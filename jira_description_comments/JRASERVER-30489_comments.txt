There's a GreenHopper story (i.e. GH wants this from JIRA) for the performance issue in JQL already that Andreas:  JRADEV-15950 that Andreas mention in his email:

{quote}
Oh and btw, it would be greatly appreciated if whatever solution we implement can be implemented in a core component in JIRA, so that plugins don't have to implement this themselves.  Having a reverse search functionality (i.e. given an issue key check if my JQL query matches) would be super useful in a lot of plugins!
{quote}

I think we actually discussed this in webhooks-land and thought that it always checked before the index was complete, i.e. your JQL should match before the event is fired.   Though possibly the more useful case is if an issue is moved to critical status, you want to know the "after" state, not the before.  We could also advise that you not write your JQL to try and match the before and after and look at the issue details to decide.

I think as a user it makes more sense for the JQL to match the *after* state.  If I've just updated an issue I don't want to receive a webhook with the before state.  Also what's the before state for 'Issue Created' :)?  Kinda means that if you use a JQL filter you will never get notified for the Issue Created event if we run the filter before.  

Andreas' proposed potential solution: https://servicedog.atlassian.net/source/browse/JNP/trunk/jira-notifications-module/src/main/java/com/atlassian/jira/plugin/notifications/dispatcher/issue/IssueNotificationTaskProducer.java?hb=true

(See the matchingIssuesCount method.)

Andreas started it off with:

{quote}
Hey JIRA peeps,

Sorry for spamming the whole list but I wasn't sure who worked on webhooks specifically.

I'm quite sure there's a bug with the JQL filtering functionality in webhooks.  The problem in particular is that indexing an issue in JIRA happens due to an event listener listening to an issue event.  Publishing webhooks also happens as the result of an event listener listening to an issue event.  The order in which listeners get notified of these events is not deterministic however! So it can happen that sometimes the webhook publisher will be notified first and try to run the JQL filter *before* the issue has been reindexed!

I was able to reproduce this just now locally with the latest trunk.  It wont happen always since it depends on the order in which event listeners get notified.

I ran into the exact same problem recently while implementing JQL filtering for pluggable notifications I'm working on for SAC (more about this in a blog later).  Basically I had a web-driver test that I thought was flaky, but after lots of logging/debugging I finally figured out that sometimes my JQL filter wouldn't match because the issue hadn't been reindexed yet!

The only solution I could think of was to reindex the issue object passed in the event in an in-memory RAMDirectory and then run my JQL search against that. I don't think there's any way to force ordering of events.  You can see my totally awesome hack here: https://servicedog.atlassian.net/source/browse/JNP/trunk/jira-notifications-module/src/main/java/com/atlassian/jira/plugin/notifications/dispatcher/issue/IssueNotificationTaskProducer.java?hb=true#to236

If anyone has a better solution to this or thinks that I'm full of shit I'm all ears :).  Oh and if this bug could be fixed before JIRA 5.2 ships it would be greatly appreciated since it will be an absolute pain in the arse to debug in support.
{quote}

Then Andreas said

{quote}
Oh and btw, it would be greatly appreciated if whatever solution we implement can be implemented in a core component in JIRA, so that plugins don't have to implement this themselves.  Having a reverse search functionality (i.e. given an issue key check if my JQL query matches) would be super useful in a lot of plugins!
{quote}

Brad chimed in with

{quote}
As an aside to this issue, the ability to find whether a single issue matches a JQL statement is one of the eco system wishes we have on the Eco Sustem JIRA improvements backlog.

https://jdog.atlassian.net/secure/RapidBoard.jspa?rapidView=213&view=detail&selectedIssue=JRADEV-15950

GH (and other plugins) want to find out whether a give JQL matches in SUPER quick time (eg view issue and not just mutating issue events).

Currently it incurs a reasonable cost of the query loading all matching doc ids and then filtering the issue id out.

An early spike we did also came up with the RAM directory idea that Andreas has talked about.

So this is something that is definitely needed for plugins to respond to issue events and also for them to decide say if they should show something on a view issue screen say.
{quote}

Andreas added again

{quote}
Btw, the RAMDirectory implementation I have now takes anywhere between 10-25ms to index a single issue and execute the JQL on my Retina MacPro (for a simple query - 2 clauses).  So while not fast, it's actually better than I thought it would be.  I didn't experiment with this but we may be able to achieve better performance by keeping the RAMDirectory around for say 100 indexes and then throwing it away rather than throwing it away for each index/search operation. 

Running the same query against JIRA's index (pre-populated with 20K issues) took about 3-8ms.  
{quote}

Brenden initially thought

{quote}
This would seem like the only sort term solution to the problem, and should work for 100% of all queries. Maybe we just need an nice API for this and bring it into JIRA. We can replace later if we deem it necessary.

I guess a long term solution would be to use the JQL AST and visitors to generate a Java and/or JavaScript predicate that can be used to test an issue(s). The actual implementation for most of the fields would be easy (i.e. Issue.getVersion() == parseVersion("1.1")). We would have to delegate off to the fields to generate each condition like we do for the queries (especially for custom fields) and therein lies the cost. Basically, #ofFields * timeForEachField = alotOfTime. And timeForEachField would not be constant. For example, implementing the matcher for comment, summary or any text field would be very complicated and in the end would probably involve Lucene anyways.
{quote}

Trevor thought

{quote}
My 2 cents worth. As Brad was showing me a couple of days back, the JIRA event processing is pretty much a dogs breakfast anyway.  It might be better in the long term to remove the indexing from event chain and actually call it directly when required in a deterministic manner.
{quote}

Brad concurred

{quote}
(trev you sure it was me??)

Yeah  well there is also that thing about how people have to remember to "put the re-index" step into their workflow definition so that re-indexing can take place after custom fields setting.  

So making it more deterministic woudl also save on support interactions.
{quote}

Mark points out

{quote}
Thats not a bug in Webhooks - thats a bug in core JIRA.
All Event Listeners should be able to rely on the index being up to date.
The re-index should be guaranteed to occur before the event is fired.

Out of interest we see similar problems in Workflow transition plugins where the plugins can be invoked before the index has the new value in it.
{quote}

Brenden agrees with Brad

{quote}
Indexing in JIRA is deterministic (at least for transitions). The calls to IssueIndexManager during workflow transitions are silently queued/merged until after the workflow transition is complete and the DB changes committed. Basically, the issue will be in the index once the transition has completed.
{quote}

Brenden realises it is still broken for Comments and Change History (and anything else with a separate index, i.e. his proposed attachment indexing)

{quote}
Having thought about this a little more, this only works for some JQL also. It wont work for JQL involving comments or history that live in a different indexs. 

Maybe a simpler workaround would be to simply queue the operation you want to perform until after the request has completed. This might work for webhooks and your notification plugin, probably wont help GH very much.
{quote}

My take:

1) If nothing else is done for 5.2, we should describe the use of jql in webhooks as experimental and/or document that it has a known bug.

2) Short term fixes for 5.2 or 5.2.x:

Whatever gets us across the line. No view to providing a service to plugins, just something that allows 5.2 to ship.

a) Andrea's ram-directory solution seems okay, but it needs to create comments and change-history, ala copy from com.atlassian.jira.issue.index.DefaultIssueIndexer.IndexIssuesOperation#perform

3) Longer term.

a) JRADEV-14998 Revamp event system in JIRA

The (issue) event system in JIRA is basically ridiculous. Event systems are supposed to allow ad-hoc listeners, but we've taken the ad-hoc attitude to event generation, too. Our event generation needs to be reliable and sane -- e.g. send the event after indexing is complete and the system has a consistent state.

b) JRADEV-16117 API for issue-query matching.

Provide a does-issue-match-query service, probably on SearchService. The initial implementation could be naive (just adds "id = 10001" to the jql), and it's performance improved incrementally.

NB: this service would NOT provide any semantics like "I'll re-index the issue in RAM for you just in case the index isn't up to date yet" because the rest of the SearchService doesn't have such semantics. Having to think about whether the index is up to date yet is a bug in JIRA and not something to be worked around within SearchService.

c) Helper code for fast issue-query for plugins (e.g. GH).

Maybe GH can't wait for JRADEV-TODO in JIRA 6.0 (or whenever it get's implemented). We could help them write a the code, and maybe that could live in a library.


Also another case that will probably never work: reporter = currentUser(). This is true for my case and I think for web hooks as well since searching happens in a background request and there is no 'searcher' anymore really(or should be different depending on who a notification gets sent to). I chose to ignore this for now :P

From what I can tell Andreas' solution won't (can't) work with the ChangedClause, WasClause, or CommentClause (basically, anything that uses the *IssueIdFilter*). Here's what happens in my non-Lucene-expert-investigation:

# Your JQL has a was-clause: *priority WAS Major*
# The issue key gets added -- {code}{priority WAS Major} AND {key = JRA-9}{code}
# Then _createLuceneQuery_ gets called, which does some query visitor stuff on each clause
# The first clause is the change history clause. We visit the WasClause, which means getting the _WasClauseQueryFactory_ out of PICO and calling create on it
# The _WasClauseQueryFactory_ uses the _SearchProviderFactory_ to get a searcher for the change-history index. I don't see a good way for us to jump in at this point and tell it to use *our* index instead of the one from the _SearchProviderFactory_ in PICO.
# Then it runs a search, creates an *IssueIdFilter* and uses that to make a *ConstantScoreQuery*

So the lucene query that actually gets run will be a mish-mash of the "real" JIRA index for change-history & comments (and any other clause that uses the SearchProviderFactory to generate terms) and our own shim.

I am loathe to spend too much more effort trying to work around a bug in JIRA. We should estimate the time to fix the problem in core JIRA:

* If it is something we can do in 5.2.1 then I say we ship webhooks as-is and document the problems.
* If it is something that we have to wait for 6.0 to fix, then I can commit Andreas' solution -- but we'll still need to document the remaining problems (currentUser(), change history, comments, text

Sometime Monday morning we need to estimate the cost of fixing this in JIRA and decide which one of those two we do.

I've talked to all stakeholders and the agreement is to mark JQL as experiment, document the known limitations, and fix the underlying JIRA bug in the 5.2.x timeframe. James' bugfix rotation will be shifted up to occur immediately so that this can be addressed and released in 5.2.1 or 5.2.2.

Chris LePetit has written a customer-friendly explanation along with links to the public JRA, which currently appears in https://extranet.atlassian.com/display/SUPPORT/Webhooks+readiness+for+JIRA+5.2. I recommend we simply incorporate that in our 5.2.0 docs where appropriate.

{quote}
My webhooks sometimes don't fire and sometimes do
When an issue is updated, two things are triggered. A reindex of that issue (to ensure the indexes are up to date), and now in JIRA 5.2, a webhook is fired. If you are using a JQL based webhook, it will need to confirm if this issue that has just been updated meets that JQL or not. The problem is that there's no guarantee surrounding the order that the reindex and webhook occur in.

E.g. if the issue currently meets the JQL, but the update will change that, we cannot be sure if the webhook and the JQL matching will occur before or after the issue index is updated, so the webhook may or may not fire in this case.

We are working to resolve this issue in a 5.2.x bugfix release and you can track the progress of the issue here:

JRA-30489 - Authenticate to see issue details
{quote}

Starting to look into this now, and although reindexing within workflow trnsitions appears to be deterministic, it isn't.  The reindex will happen when the workflow transition completes, unfortunately we've also fired the IssueEvent by then, so we have a race, one that won't be resolved by getting rid of the IndexIssueListener, instead I'm going to queue the IssueEvents and only raise them when the issue has been reindexed.  

So:
sudo nc -l localhost 1000

Set up jira instance with PennyTestData
new webhook for url: localhost:1000 and jql: project = "Bulk Move 1" AND reporter = admin for all issue events.

when issue was created, commented or worklog was updated I got a notification from JIRA
when issue was deleted, I didn't get a notification. 
Checked this few times, changed query to jql: project = "Bulk Move 1" no notifications. If the jql query is: All I get a notification. 

Unfortunately, supporting notification for issue-delete-event is non trivial and is going to take us more time than a day. Together with [~edalgliesh] we decided to do not allow users to subscribe for delete-event if JQL filter was specified.
The problem with subscribing for delete event is following:
Once delete_event is fired webhook event manager checks if deleted query matches JQL filter. Unfortunately this deleted issue isn't present in index anymore, so there is not match. 
In case of all filter this check is not necessary, since the subscription is for all. 

What we need here is a way to determine if a deleted issue matches JQL query. I think we should use: MemoryIndex (http://lucene.apache.org/core/old_versioned_docs/versions/3_0_0/api/contrib-memory/org/apache/lucene/index/memory/MemoryIndex.html) which will allow us to run this query of a single index entry built from deleted issue. 

The fix for this is only partial, and has the following limitations:-

The IssueIndexListener is the first listener in the chain, but the chain can be reordered at runtime if the plugin system is restarted.
Webhooks will not be fired for issue delete events - as the issue is effectively no longer in the index.

We need to fix this properly in 6.0


James portion of this is complete. The problems with DELETE that have been identified were
# rejected from DOTing
# will be tracked in another story

[~jwinters] I'm not sure the fix here is working correctly (due to multi-tenancy I think).  So I tested this with the notifications plugin against JIRA 5.2.6 and this is what I've been able to observe:
* Switching the code to querying the lucene indexes on disk (which rely on the issue having been reindexed) have reintroduce unreliability in my tests again
* After some debugging I found that there's 2 event publishers involved in notifying listners (due to multi-tenancy changes): PluginsEventPublisher and PeeringEventPublisher
* The order in which we notify listeners within event publishers is now predictable due to the changes in this ticket.  However the order in which we notify the 2 eventpublishers depends on the order in which they are constructed by pico.  (see code in the DefaultPeeringEventPublisherManager)

After some debugging this is what I observed:
!https://api.monosnap.com/image/download?id=IT39s4cXFnRokTa60V2JRWizl!
The notifications event listener is registered in the PluginsEventPublisher (object ID 2001) and this publisher gets notified first (pico constructs it first on startup and therefore it comes first in the DefaultPeeringEventPublisherManager)

!https://api.monosnap.com/image/download?id=vJxTtvqZ853Lk7sILKfxFiqxH!
The IssueIndexListener is registered via the PeeringEventPublisher (object ID 17591) which comes second and therefor regardless of the ordering within eventpublishers my notification event listener is always notified *before* the IssueIndexListener :(. 

Aside from spending some more time to somehow properly fix this mess, maybe we could do a quick fix to force the PluginsEventPublisher to come last in the list of eventPublishers that the DefaultPeeringEventPublisherManager maintains?

You're right :-(  There is no more multitenancy in 6, so I didn't even think about the impact of the system tenant jumping in front of the queue.

[~jwinters], what do you think about Andreas's suggestion "maybe we could do a quick fix to force the PluginsEventPublisher to come last in the list of eventPublishers that the DefaultPeeringEventPublisherManager maintains?"?

Should we close this issue as 5.2.11 is already out the door, and 6.x is not affected?

[~bberenberg], I agree; I don't think anything fruitful will come of continuing the discussion here - there are no more 5.2.x releases and 6.0 has an inherent fix.
This issue itself was resolved in December so there's no special status change we can do.

