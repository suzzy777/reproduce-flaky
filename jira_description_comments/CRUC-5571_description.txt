The new emails show you the thread of reviews comments which is great but they are backwards to wahts sueful.

Most email threading is done with most recent first so that you read from top to bottom going backwards in time.

But this crucible emails are the wrong way around.

For example Jed said this first, followed by Darius.  I get two emails but its tricky to work out whats going on and you have to scroll to the bottom and read upwards

Jed :

{noformat}

---------------------------------------
File: jira/trunk/jira-components/jira-tests/src/test/java/com/atlassian/jira/issue/index/TestDefaultIndexManagerConcurrentIndexing.java

Comment by Jed Wesley-Smith (the real one) on 24 January 2011, 20:03 
https://atlaseye.atlassian.com/cru/CR-JRA-417/#c40911

  To really, really test this, supply an IssueIndexer that blocks
  inside optimize() and repeatedly call reindex(). This provably
  reproduces the error condition. The current test relies on
  fortune to reproduce the initial conditions for the race
  condition.

  Reply by Dariusz Kordonski on 25 January 2011, 00:05
   > I simulate work in optimize() by doing a Thread.sleep().
   > Indexing has sleep of 500ms, optimizing 2000ms (after the
   > fix). It's all in {{MockIssueIndexer}}. Do you think it's
   > good enough?

    Unread Reply By Jed Wesley-Smith (the real one) on 31 January 2011, 21:48
    #> Not for a unit-test. You need to have a latch pair that
    #> co-ordinates the threads so that you know the states.
    #> Otherwise you have a test that (a) is flaky and (b) is
    #> slow.

      Unread Reply By Dariusz Kordonski on 31 January 2011, 22:05
      #> All right, I would argue that it is not flaky, but
      #> definitely it is slow :) Since this already passed QA, I
      #> will raise a separate task to improve the unit test.

        Unread Reply By Jed Wesley-Smith (the real one) on 02 February 2011, 18:45
        #> It is flaky in the sense that if the vm is suspended
        #> for a couple of seconds then the test will fail. The
        #> fact that that hasn't happened yet and is not
        #> particularly likely is not evidence of its
        #> non-flakiness :-)
{noformat}

and Dariusz's reply

{noformat}
----------------------------------------
File: jira/trunk/jira-components/jira-tests/src/test/java/com/atlassian/jira/issue/index/TestDefaultIndexManagerConcurrentIndexing.java

Comment by Jed Wesley-Smith (the real one) on 24 January 2011, 20:03 
https://atlaseye.atlassian.com/cru/CR-JRA-417/#c40911

  To really, really test this, supply an IssueIndexer that blocks
  inside optimize() and repeatedly call reindex(). This provably
  reproduces the error condition. The current test relies on
  fortune to reproduce the initial conditions for the race
  condition.

  Reply by Dariusz Kordonski on 25 January 2011, 00:05
   > I simulate work in optimize() by doing a Thread.sleep().
   > Indexing has sleep of 500ms, optimizing 2000ms (after the
   > fix). It's all in {{MockIssueIndexer}}. Do you think it's
   > good enough?

    Unread Reply By Jed Wesley-Smith (the real one) on 31 January 2011, 21:48
    #> Not for a unit-test. You need to have a latch pair that
    #> co-ordinates the threads so that you know the states.
    #> Otherwise you have a test that (a) is flaky and (b) is
    #> slow.

      Unread Reply By Dariusz Kordonski on 31 January 2011, 22:05
      #> All right, I would argue that it is not flaky, but
      #> definitely it is slow :) Since this already passed QA, I
      #> will raise a separate task to improve the unit test.

        Unread Reply By Jed Wesley-Smith (the real one) on 02 February 2011, 18:45
        #> It is flaky in the sense that if the vm is suspended
        #> for a couple of seconds then the test will fail. The
        #> fact that that hasn't happened yet and is not
        #> particularly likely is not evidence of its
        #> non-flakiness :-)

          Unread Reply By Dariusz Kordonski on 02 February 2011, 18:54
          #> fair enough. Raised
          #> https://jdog.atlassian.com/browse/JRADEV-4620
{noformat}