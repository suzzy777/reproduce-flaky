The best way to do this is to create a branch, add a branch-specific pipeline configuration in {{bitbucket-pipelines.yml}}, then push the branch to Bitbucket to build it.

This way commits on your branch won&#x27;t affect the rest of your team, and if you end up not wanting to make the changes permanent, you can delete the branch from your repository and the commits will all disappear.


Dear Matt,\\
What you said is a possibility.

We create a branch and push it for bitbucket build.  We use for webdriver\\
testing and junit tests.  The test won&#x27;t pass all, especially the webdriver.\\
Sometimes, there may be a good change, which is required.  So, we cannot\\
use this approach of deleting the branch.  If the branch is deleted the\\
good changes are gone.  Also, it is difficult to merge only good commits\\
from the branch to the main branch.

It is good if you give the option of running tests with out commit.    This\\
is done in many big companies. I was in Google, and this was followed.  We\\
just submit the patch/diff.

Thanks.


Okay, thanks for clarifying your request. Building from a patch is unlikely to ever be supported in Pipelines, both for architectural reasons and because the majority of users do not need this.

On the architecture side, Pipelines is built as a Bitbucket add-on that listens for push events in Bitbucket. Changing this would require a lot of additional work.

On the use case side, we&#x27;re designing primarily for teams using modern Git workflows, where the dominant approach is using topic branches for development, CI/testing on the branch, then merging via pull request into master or another shared branch for (preferably automated) deployment. For the best experience with Bitbucket and Pipelines, you may want to consider adapting your workflow to match these conventions.


