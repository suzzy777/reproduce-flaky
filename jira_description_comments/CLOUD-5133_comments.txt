This does not happen in the #77 build. Probably flaky. Found lots of the following errors in jira.log when the test was failing:
{noformat}
2011-06-15 00:15:53,581 JiraImportTaskExecutionThread-1 ERROR testadmin 15x3669x1 yi4e8u 127.0.0.1 /secure/admin/XmlRestore.jspa [com.atlassian.jirafisheyeplugin.FishEyeManagerImpl] Failed to retrieve FishEye repositories from http://localhost:3990/ 
java.io.IOException: anon access forbidden

	at com.atlassian.jirafisheyeplugin.rest.fisheye.FishEyeRestApiManagerImpl.callFisheye(FishEyeRestApiManagerImpl.java:258)
	at com.atlassian.jirafisheyeplugin.rest.fisheye.FishEyeRestApiManagerImpl.callFisheye(FishEyeRestApiManagerImpl.java:127)
	at com.atlassian.jirafisheyeplugin.FishEyeManagerImpl.getRepositories(FishEyeManagerImpl.java:152)
	at com.atlassian.jirafisheyeplugin.FishEyeManagerImpl.updateInstanceRepositories(FishEyeManagerImpl.java:304)
	at com.atlassian.jirafisheyeplugin.FishEyeManagerImpl.refresh(FishEyeManagerImpl.java:322)
	at com.atlassian.jirafisheyeplugin.config.RefreshManager.refreshAll(RefreshManager.java:84)
	at com.atlassian.jirafisheyeplugin.config.RefreshManager.onClearCache(RefreshManager.java:105)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at com.atlassian.event.internal.SingleParameterMethodListenerInvoker.invoke(SingleParameterMethodListenerInvoker.java:36)
	at com.atlassian.event.internal.AsynchronousAbleEventDispatcher$2.run(AsynchronousAbleEventDispatcher.java:60)
	at com.atlassian.event.internal.AsynchronousAbleEventDispatcher$1.execute(AsynchronousAbleEventDispatcher.java:28)
	at com.atlassian.event.internal.AsynchronousAbleEventDispatcher.dispatch(AsynchronousAbleEventDispatcher.java:56)
	at com.atlassian.event.internal.EventPublisherImpl.invokeListeners(EventPublisherImpl.java:151)
	at com.atlassian.event.internal.EventPublisherImpl.publish(EventPublisherImpl.java:70)
	at com.atlassian.multitenant.event.DefaultPeeringEventPublisherManager.publish(DefaultPeeringEventPublisherManager.java:17)
	at com.atlassian.multitenant.event.PeeringEventPublisher.publish(PeeringEventPublisher.java:23)
	at com.atlassian.jira.bc.dataimport.DataImportProductionDependencies.globalRefresh(DataImportProductionDependencies.java:79)
	at com.atlassian.jira.bc.dataimport.DefaultDataImportService.globalRefresh(DefaultDataImportService.java:618)
	at com.atlassian.jira.bc.dataimport.DefaultDataImportService.restartJira(DefaultDataImportService.java:573)
	at com.atlassian.jira.bc.dataimport.DefaultDataImportService.performImport(DefaultDataImportService.java:482)
	at com.atlassian.jira.bc.dataimport.DefaultDataImportService.doImport(DefaultDataImportService.java:209)
	at com.atlassian.jira.web.action.setup.DataImportAsyncCommand.call(DataImportAsyncCommand.java:65)
	at com.atlassian.jira.web.action.setup.DataImportAsyncCommand.call(DataImportAsyncCommand.java:28)
	at com.atlassian.jira.task.ImportTaskManagerImpl$TaskCallableDecorator.call(ImportTaskManagerImpl.java:147)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at com.atlassian.multitenant.impl.DefaultMultiTenantManager.runForTenant(DefaultMultiTenantManager.java:61)
	at com.atlassian.multitenant.juc.MultiTenantExecutors$WrappedRunnable.run(MultiTenantExecutors.java:160)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)
{noformat}

From the code in HtmlUnit's {{WebClient}} it seems that the tester kept getting 302 or 303 response and tried to follow that redirect until stack was filled. Unfortunately I can't see root of the stack (TestNG limitation?) so can't really tell what page is being requested without deep investigation.

