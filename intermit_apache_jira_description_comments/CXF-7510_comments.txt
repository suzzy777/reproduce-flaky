There are no details in the thread, the only detail there is that you say that it fails now and then in the integration tests.




Hi John - can you please attach a test project, Andriy may spot something...

I'll see if I can put something together.  It is easiest to replicate in a unit test.  If I point you to an existing github repo would that work for you?

Sure, please paste a link, that may work for [~reta] 

Thanks [~johndament]. We should be able to discover the features automatically, I will try to reproduce the problem as well. 

Hey guys,

Would appreciate your help / hints here please. So I started to look into this issue, there are basically two observations I have at the moment:
 - the automatic discovery of Features (SseFeature f.e.) in CDI works, no issue here (assuming beans.xml has no package exclusions)
 - the sample project we have provided as part of distribution references older Jetty 9.3.5.v20151012, messing dependencies up with Jetty 9.4.6.v20170531 

But I cannot reproduce imminent issue with initialization. Would you mind guys to attach the sample project to this ticket so we could pin-point the exact problem?
Thanks.

Best Regards,
    Andriy Redko

[~reta]

Sorry, my fault.  I had on my TODO to get a link over and forgot :-(  Here's a test that can reproduce the intermitent issue (though its more of a case where 90% it fails).

https://github.com/hammock-project/hammock/blob/sse-issue/rest-cxf/src/test/java/org/hammock/test/cxf/CXFSseTest.java

When it works, you'll see the atmosphere install occurring, when it fails it just does nothing.  

[~reta] RE the discovery of SseFeature, I was trying to figure out why it wasn't working.  I noticed that the {{beans.xml}} file in the archive is missing a {{bean-discovery-mode}}, per the docs its required if you're using {{version=1.1}}

bq. The version of CDI this beans.xml is for. If the version is "1.1" (or later), then the attribute bean-discovery-mode must be added.

Thanks [~johndament], I will update the sample. Regarding, the CXFSseTest, the first issue is that `SseTransportCustomizationExtension` is not being included / discovered (it is part of CXF sse module). I did a quick patch, `new HammockArchive().classes(..., SseTransportCustomizationExtension.class).jar()` and things started to bootstrap properly (ee need this extension to hint somehow CXF/CDI to use SSE transport when constructing factory beans). 

Aside from that, there seems to be another issue with Atm, we have seen it already and we know how to fix it (hopefully, the cause is the same). I'll try to address it shortly, thanks a lot for the test case. 

Ah ok, I see.  That actually explains why I sometimes see it in SE as well.  See my prior note about {{bean-discovery-mode}}.  Note that this isn't an issue {{cxf-integration-cdi}} since it has a CDI extension in it, that always enables CDI scanning in that JAR.

I would actually recommend using {{annotated}} discovery and adding bean defining annotations to the relevant classes.  Thoughts?

Sure, something like that (`cxf-integration-cdi/src/main/resources/META-INF/beans.xml`):
{code}
<?xml version="1.0"?>
<beans xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"
	bean-discovery-mode="annotated">
</beans>
{code}

I was thinking a little more comprehensive patch:

{code}
diff --git a/rt/rs/sse/src/main/java/org/apache/cxf/jaxrs/sse/SseFeature.java b/rt/rs/sse/src/main/java/org/apache/cxf/jaxrs/sse/SseFeature.java
index 36ea9ed..9193426 100644
--- a/rt/rs/sse/src/main/java/org/apache/cxf/jaxrs/sse/SseFeature.java
+++ b/rt/rs/sse/src/main/java/org/apache/cxf/jaxrs/sse/SseFeature.java
@@ -30,7 +30,10 @@ import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.jaxrs.provider.ServerProviderFactory;
 import org.apache.cxf.jaxrs.sse.atmosphere.SseAtmosphereEventSinkContextProvider;
 
+import javax.enterprise.context.Dependent;
+
 @Provider(value = Type.Feature, scope = Scope.Server)
+@Dependent
 public class SseFeature extends AbstractFeature {
     @Override
     public void initialize(Server server, Bus bus) {
diff --git a/rt/rs/sse/src/main/java/org/apache/cxf/jaxrs/sse/cdi/SseTransportCustomizationExtension.java b/rt/rs/sse/src/main/java/org/apache/cxf/jaxrs/sse/cdi/SseTransportCustomizationExtension.java
index 68af13c..66cb166 100644
--- a/rt/rs/sse/src/main/java/org/apache/cxf/jaxrs/sse/cdi/SseTransportCustomizationExtension.java
+++ b/rt/rs/sse/src/main/java/org/apache/cxf/jaxrs/sse/cdi/SseTransportCustomizationExtension.java
@@ -22,6 +22,9 @@ import org.apache.cxf.cdi.extension.JAXRSServerFactoryCustomizationExtension;
 import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;
 import org.apache.cxf.transport.sse.SseHttpTransportFactory;
 
+import javax.enterprise.context.Dependent;
+
+@Dependent
 public class SseTransportCustomizationExtension implements JAXRSServerFactoryCustomizationExtension {
     @Override
     public void customize(final JAXRSServerFactoryBean bean) {
diff --git a/rt/rs/sse/src/main/resources/META-INF/beans.xml b/rt/rs/sse/src/main/resources/META-INF/beans.xml
index 8d1007d..6b50728 100644
--- a/rt/rs/sse/src/main/resources/META-INF/beans.xml
+++ b/rt/rs/sse/src/main/resources/META-INF/beans.xml
@@ -1,5 +1,6 @@
 <?xml version="1.0"?>
 <beans xmlns="http://java.sun.com/xml/ns/javaee"
-       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
-       xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd">
+   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+   xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"
+    bean-discovery-mode="annotated">
 </beans>
{code}

Also RE the transport customization, I'm not sure that fixes it consistently.  I do add this servlet param, which I was told on list sets it as well

{code}
if(enableSseTransport) {
            params.add(new WebParam(CXFNonSpringJaxrsServlet.TRANSPORT_ID, SseHttpTransportFactory.TRANSPORT_ID));
        }
{code}

That's right, we need the transport to be passed to CXF servlet as well. The CXF/CDI should generally stay transparent (all based on extensions), but not the servlet part. So this code is correct:
{code}
params.add(new WebParam(CXFNonSpringJaxrsServlet.TRANSPORT_ID, SseHttpTransportFactory.TRANSPORT_ID));
{code}

I gave your suggestion a second thought and decided to opt-out from explicit CDI annotations (falling to bean-discovery-mode="all"). The reason is that CXF is not really bound to CDI but if we explicitly add the `@Dependent` annontation to `SseFeature`, we would make this dependency unavoidable. It definitely applies well to `SseTransportCustomizationExtension`, but with  `bean-discovery-mode="all"` we should be all set, right? Another option would be to move `SseTransportCustomizationExtension` to separate module for SSE+CDI integration, but it looks like a bit over kill. Sounds reasonable?

There is one issue with your test case (CXFSseTest), the Thread.sleep() must be inside try-with-resources block, otherwise the SseEventSource  is closed before having a chance to consume any events. 

Could you please try it out with latest 3.2.1-SNAPSHOT (should be published in a few hours)? Just committed a couple of fixes, the test is green with all the fixes :-)

Thanks!

Hi Andriy, the actual SSEFeature, can it be auto-discovered in the CDI case so that it's not manually created ? I added a CXF Provider annotation to it

thanks, Sergey

Hi Sergey, 

The discovery is controlled by `bean-discovery-mode` property, which right now is set to `all`, so the SseFeature and companion classes should be discovered (and they are). Another option, suggested by [~johndament], is to use `annotated` which means we should add CDI annotations (like `@Dependable`) in order for classes to be discovered. Thanks.

Best Regards,
    Andriy Redko

Hi Andriy, and John, - if it's is already discoverable then I guess there's no need to add another annotations to it, as indeed, it is expected to work without CDI as well...
thanks 

Technically the discovery in this way will only work in some deployment scenarios (e.g. WARs).  I'm using Java SE/CDI SE, so the present beans.xml would never be valid.

Right, but the actual SSEFeature should remain neutral.

Ah, nevermind.  I see you already pushed up the change to add {{bean-discovery-mode}}

Thant's right, the SseFeature should remain neutral, and {code}bean-discovery-mode{code} is there. [~johndament] could you please check out if 3.2.1-SNAPSHOT works for you? The test is green for me after all the changes.

I made the changes noted here (mostly just adding {{SseTransportCustomizationExtension}} as a bean to the JAR.  Unfortunately I still see the atmosphere bootstrap issue.

[~johndament] Are you running against 3.2.1-SNAPSHOT? Did you move the Thread.sleep() inside try-with-resources block? Are your changes committed so I can pull the from hammock repo?

I figured it out, was something stupid on my part.  I ended up getting it working with 3.2.0 by running with the extension being registered.

One other note, in https://github.com/apache/cxf/blob/master/integration/cdi/src/main/java/org/apache/cxf/cdi/JAXRSCdiResourceExtension.java#L361-L364 there's a bug.  You're using `getBeanClass()` which isn't the class if you're using a producer method/field.  You're better off using the value `JAXRSServerFactoryCustomizationExtension.class` instead.

If you want I can raise a PR for that.

Will do, thanks a lot for spotting that. I will fix it first thing tomorrow, if you have time for the PR, it would be very welcomed! So SSE rocks? :-)

[~johndament] Fixed the issue you have mentioned, thanks again, are we good to resolve this one? :-)

Sounds good to me.  Looks good, hopefully 3.2.1 comes soon :)

