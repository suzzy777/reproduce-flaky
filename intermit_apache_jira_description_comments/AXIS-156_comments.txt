*** Bug 10070 has been marked as a duplicate of this bug. ***

Dana,

When you don't have log4j jar in your class path, Commons logging mechanism
switches to SimpleLog that prints out the "[INFO]" messages on screen. I added a
simplelog.properties that will supress these messages. Can you please try the
latest cvs or tonight's nightly build and let us know.

Thanks,
dims

Okay, working with the Jun 20 nightly build I have interesting things to report.

1) When the service deploys without hanging, my web-service client is able to
   consistently contact the service successfully.

2) Sometimes (50%?) services will hang during deployment after restarting   
   tomcat. In this case, deployment will sometimes succeed after (many?)    
   retries (and sometimes it will never deploy), but the client fails to 
   successfully contact the service in this case and reports:

   - Mapping Exception to AxisFault
AxisFault
 faultCode: http://xml.apache.org/axis/:Server.userException
 faultString: java.io.IOException: Cannot close the same input stream twice
 faultActor: null
 faultDetail:
        stackTrace: java.io.IOException: Cannot close the same input stream twice
        at
org.apache.catalina.connector.http.HttpRequestStream.close(HttpRequestStream.java:158)

3) The situtation is better than it had been since it is somewhat more    
   predictable.  Is it possible that this problem is related to another bug
   (sorry I couldn't find the # again) that reported two instances of axis
    being started, yet only one was answering [I wonder if my hangs on deploy
    and reclosing closed stream could be result of this.]

Looks like I lied.  I just relogged in and restarted everything (and rebuilt the
service and tester just to be sure) and the client can still return the exception:

      java.io.IOException: Cannot close the same input stream twice

even if the service successfully deploys the 1st try after a tomcat restart
(though the problem seems to occur less frequently than before - it still looks
like theres a race condition yet to be found).  Sorry for the previous "false"
info, but it's hard to be certain about race conditions with black-box testing
of axis. :-(

Created an attachment (id=2148)
Modified log4j.properties to be places in webapps\axis\WEB-INF\classes directory


Dana,

We need debug traces of the whole scenario. Can you please place the
log4j.properties (see attachment to this bug) in webapps\axis\WEB-INF\classes
directory, then recreate the problem and look for axis.log in yout tomcat\bin
directory (This log file will have all relevent debug traces.). You should also
get tons of trace messages (same ones that go into axis.log) in your tomcat
console. Please post relevent bits from the log file as attachment to this
bugzilla bug.

Thanks,
dims

Created an attachment (id=2153)
axis.log file created with log4j debug properties file


I've attached the axis.log file.  On this run tomcat was started, service
deployed on first try, but client failed.  The relevant part is:

13255 [HttpProcessor[8080][4]] DEBUG
org.apache.axis.encoding.DeserializationContextImpl  - Enter:
DeserializationContextImpl::startElement(urn:jdbc, about)
13255 [HttpProcessor[8080][4]] DEBUG org.apache.axis.message.BodyBuilder  -
Enter: BodyBuilder::onStartChild()
13271 [HttpProcessor[8080][4]] ERROR org.apache.axis.handlers.soap.SOAPService 
- Exception:
java.lang.ClassNotFoundException:
edu.vt.vbi.pathport.server.webservice.jdbc.ws.JdbcSoapBindingImpl
        at
org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1394)
        at
org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1243)
        at
org.apache.axis.handlers.soap.SOAPService.getInitializedServiceDesc(SOAPService.java:297)
        at
org.apache.axis.MessageContext.getPossibleOperationsByQName(MessageContext.java:229)


I'm confused since my deployed jar file does in fact contain the desired class
(and it DOES work sometimes):

% jar -tf ~/java/tomcat-4.0.3/webapps/axis/WEB-INF/lib/jdbc.jar | fgrep
JdbcSoapBindingImpl
edu/vt/vbi/pathport/server/webservice/jdbc/ws/JdbcSoapBindingImpl.class
%

Dana,

Can you please try the latest code (with the debug log4j switched on). You
should not get java.io.IOException on the client side. You should get Class Not
found exceptions. 

Thanks,
dims

PS: Can you also make sure that you place your classes in WEB-INF/classes?

Still using the Jun 20 nightly build I exploded my services jar file into the
axis/WEB-INFO/classes directory and as long as deployment doesn't hang I am
unable to break the client (i.e., works everytime IF it deployed).  This is
good, though I still wonder if it'll break on the n+1 try. :-)

If the above holds, I would recommend downgrading the bug report from blocker
to merely critical (or even just major), given what is still problematic...
(and not being able to deploy as a .jar would then earn it's own bug report)

That leaves the problem of a deploy operation that hangs.  This still seems to
be a race condition given its intermitency.  In this case the axis.log file is 
NOT created.  But the following are (in tomcat-4.0.3/logs):

    apache_log.2002-06-21.txt  catalina.out  catalina_log.2002-06-21.txt

>>>apache_log states:

2002-06-21 16:29:55 [org.apache.catalina.connector.warp.WarpConnector] Error
accepting requests
java.net.SocketException: Socket closed
        at java.net.PlainSocketImpl.socketAccept(Native Method)
        at java.net.PlainSocketImpl.accept(PlainSocketImpl.java:343)
        at java.net.ServerSocket.implAccept(ServerSocket.java:438)
        at java.net.ServerSocket.accept(ServerSocket.java:409)
        at
org.apache.catalina.connector.warp.WarpConnector.run(WarpConnector.java:590)
        at java.lang.Thread.run(Thread.java:536)

>>>while catalina.out states (in part):

Catalina.start: LifecycleException:  Error creating server socket
(java.net.BindException):  java.net.BindException: Address already in use
LifecycleException:  Error creating server socket (java.net.BindException): 
java.net.BindException: Address already in use
        at
org.apache.catalina.connector.warp.WarpConnector.initialize(WarpConnector.java:491)
        at
org.apache.catalina.core.StandardService.initialize(StandardService.java:454)
        at
org.apache.catalina.core.StandardServer.initialize(StandardServer.java:553)
        at org.apache.catalina.startup.Catalina.start(Catalina.java:780)


Hope this helps.


Dana,
Am closing this bug. Please feel free to open other bugs and refer to this bug
if necessary.

Thanks,
dims

PS: Please upgrade to tomcat 4.0.4 (or even 3.3.1) as the intermittent deploy
hang might be a tomcat bug.  

