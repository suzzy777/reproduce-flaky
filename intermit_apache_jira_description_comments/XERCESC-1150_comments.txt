Hi Dave.  XMLStringPool was never designed to be the base class for anything.  
The only class I'm aware of that inherits from it is XMLSynchronizedStringPool, 
which we needed for thread-safe grammars.  When I created 
XMLSynchronizedStringPool, I made the minimum possible amount of change to 
XMLStringPool; which is why things look a little awkward.  

The main reason XMLStringPool was supposed to be concrete was performance, to 
avoid virtual calls.  I only made methods virtual that absolutely needed to be 
virtual, and only made data members protected that absolutely needed to be 
protected.  

So it's not so easy to override--but it wasn't spposed to be.  :)  As to making 
an interface and a concrete implementation:  I'd really worry about preserving 
source-code compatibility; the moment we have pure virtual methods, new 
XMLStringPool will break--and it's not at all unreasonable to think there are 
folks who use the class in this way.

So I don't think we can address this one.


Hi Neil,

Thanks for the comments, but let me try to make my point more succinctly.  It 
is difficult for anyone to do their own rendition of any abstract base class 
that depends on XMLStringPool.  In my case, that class is XMLGrammarPool, but 
there are others as well.

As to your comments about XMLStringPool being concrete for performance reasons, 
can you give more details about what performance benefit(s) you expect?  As far 
as I can see, the entire public interface is virtual, so virtual calls will 
always be necessary, even if XMLStringPool is a concrete class.

If you are worried about source code compatibility, then create a new base 
class called XMLStringPoolBase, derive XMLStringPool from that, and change the 
interfaces to use XMLStringPoolBase.  That would minimize the source code 
compatibility problems.

Hi Dave.  Good point about the virtual calls--apparently I had to overload 
everything when I did XMLSynchronizedStringPool.  

But source code compatibility is a binary proposition; either we are or we 
aren't; we can't "minimize the source code
compatibility problems".  In fact, we can't even add pure virtual functions to 
existing interfaces, since that will break implementors.  So even if we added a 
getURIStringPoolBase() or some such, we'd still (a) have to continue to support 
the existing method and (b) keep the new method non-virtual.

So this is exactly why we circulate new interfaces as widely as possible before 
adding them to source, and make sure people get a good look at them before we 
bless that source...  

The best I think we can do here is open up the implementation of XMLStringPool 
to make it more amenable to derivation.  Would it help you if all the data 
members became protected, for example?


I wasn't implying that source code compatibility is not binary, I was simply 
saying you could minimize the impact by creating a new abstract base class, and 
using that solely in the interface of XMLGrammarPool, and in the interfaces of 
the internal classes.  So, I wasn't pushing for a "getXMLStringPoolBase()" call 
on XMLGrammarPool, I simply was suggesting you could change all the references 
to XMLStringPool in XMLGrammarPool to XMLStringPoolBase.  That way, anyone 
using XMLStringPool would still be using a concrete class, not an abstract one.

Although I appreciate your desire to maintain source code compatibility, 
sometimes it _should_ be sacrificed to clean up design problems, because the 
advantage to the improvement of the design outweighs the small pain suffered 
but those who will be affected.  And I suspect that is a very small number of 
people.

XMLStringPool is not useful for my purposes because it requires IDs be assigned 
in sequential order, and that's a very serious limitation.  But making the data 
members protected might be useful for future users who can live with that 
restriction.

But, for the future, you should consider that making abstract base classes 
depend on concrete classes in this way can really limit how

Hi Dave.  No disputing that it would have been better to use an abstract class 
than a concrete class in the XMLGrammarPool design; I guess this somehow just 
slipped by all the people who had a look at the original draft.  

So it looks like the best compromise we have is for me to make the data members 
protected, which is what I'll do.  We've taken sufficient flak for breaking 
source-code compatibility between minor releases that changing the interface at 
this point just isn't an option; and I don't think anybody's contemplating a 
Xerces 3 yet...


We recently decided to:

- Maintain binary compatibility between patch releases (where version is major.minor.patch) but not 
between minor releases.

- Almost incidentally, to try to maintain source compatibility between minor releases, but not between 
major releases.

But I wonder if the later goal is too ambitious? Are we going to cripple Xerces because (1) we don't want 
to keep rolling the major version and (2) we're C++ and so there's quite a few minor things we could 
(want to) do that will break strict source compatibility. What if we rephrase "source compatibility" as 
being more major, on the order of the change we went through in going to the idom?

-jdb

