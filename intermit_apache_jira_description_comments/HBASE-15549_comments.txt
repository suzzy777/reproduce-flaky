bq.I want to disable it because this facility is not finished and meantime
What's not finished? What issues are you seeing with it? For us meta on master is the only thing that gets IT tests to pass on a more consistent basis. I'd prefer to fix any issues if possible.

Add a means of disabling  master-as-regionserver. Default in patch is that master CAN carry regions as it currently does but would change this on commit. Adds test of this new config.

How is this different from hbase.balancer.tablesOnMaster ? Seems weird to have to configs that do the same thing.

bq. What's not finished? 

What Master's personality is going forward. What we have now is just wrong with master carrying regions but only some regions and then the ones it does carry are the critical ones. Master is now inline with writes. This sort of deploy won't scale (one server only carrying metadata), etc.

I'm game for entertaining Master being a RegionServer or Master not being a RegionServer but this half-baked notion where Master is sort of a RegionServer.

Testing, ITBLL doesn't work for me. Trying to figure why. Want to be able to undo this behavior.

bq. How is this different from hbase.balancer.tablesOnMaster ? Seems weird to have to configs that do the same thing.

Thanks. [~mbertozzi] pointed out same thing. tablesOnMaster is kinda wonky. You pass 'none' to have no tables on master (As Matteo notes, you better not name your table 'none'). If you pass nothing, you get 'tables on master' (I passed 'false' because I misread that its supposed to be a list of Strings and got extra confused because it 'worked'). Matteo also notes for this to work all needs to subclass the base load balancer... not all balancers do.

Will do another version of patch.

Wanted to get an issue in to start catching the master-is-a-regionserver flak too.

bq.What we have now is just wrong with master carrying regions but only some regions and then the ones it does carry are the critical ones.
I disagree with this so strongly. With a large enough cluster I get double assignments, failed splits, and every nasty horrible thing if master can't talk to meta. Without meta on master I can fail ITBLL in less than 2 days. Every single time. So without meta on master there's something seriously wrong. But even if we fixed that meta and master are wedded.

Master at it's heart is something that's there to alter system tables. It doesn't really do much except read and write meta and security related tables and tell others that it's done that. Why would you put that somewhere else? For data locality it makes sense. However it is different from a regionserver in that if it goes down things in the cluster are bad. So not putting user tables on that totally makes sense.

bq. With a large enough cluster I get double assignments, failed splits, and every nasty horrible thing if master can't talk to meta.

Not being able to talk to hbase:meta is an issue apart from meta-on-master.

An RPC to do metaupdates will be more prone to issues than going local, yes. Master 2.0 with its local procedure store mitigates somewhat by only publishing final state in hbase:meta, not intermediary.


bq. Why would you put that somewhere else?

Scale. Size of hbase:meta, scaling i/o, memory.

Lets have this discussion as other than a comment on JIRA. Can try and restart the scaling/master discussion out on dev list.

bq.Not being able to talk to hbase:meta is an issue apart from meta-on-master.
Except it's not. Master always uses the short circuit path to write to meta. There's no times that we need to finalize a risky operation and can't.



bq. There's no times that we need to finalize a risky operation and can't.

Your argument is built on no RPCing which is a bit hard to get away with in a distributed system.

Again, lets do this properly as a discussion thread rather than a back and forth in a JIRA comment.

Balancer gets messed up if master is not carrying regions:

{code}
hbase(main):008:0* balancer force
NameError: undefined local variable or method `force' for #<Object:0x3d620a1>

hbase(main):009:0> balancer 'force'

ERROR: java.io.IOException: 6
        at org.apache.hadoop.hbase.ipc.RpcServer.call(RpcServer.java:2285)
        at org.apache.hadoop.hbase.ipc.CallRunner.run(CallRunner.java:109)
        at org.apache.hadoop.hbase.ipc.RpcExecutor.consumerLoop(RpcExecutor.java:137)
        at org.apache.hadoop.hbase.ipc.RpcExecutor$1.run(RpcExecutor.java:112)
        at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.ArrayIndexOutOfBoundsException: 6
        at org.apache.hadoop.hbase.master.balancer.BaseLoadBalancer$Cluster.getLocalityOfRegion(BaseLoadBalancer.java:869)
        at org.apache.hadoop.hbase.master.balancer.StochasticLoadBalancer$LocalityCostFunction.cost(StochasticLoadBalancer.java:1186)
        at org.apache.hadoop.hbase.master.balancer.StochasticLoadBalancer.computeCost(StochasticLoadBalancer.java:521)
        at org.apache.hadoop.hbase.master.balancer.StochasticLoadBalancer.balanceCluster(StochasticLoadBalancer.java:335)
        at org.apache.hadoop.hbase.master.balancer.StochasticLoadBalancer.balanceCluster(StochasticLoadBalancer.java:264)
        at org.apache.hadoop.hbase.master.HMaster.balance(HMaster.java:1276)
        at org.apache.hadoop.hbase.master.MasterRpcServices.balance(MasterRpcServices.java:352)
        at org.apache.hadoop.hbase.protobuf.generated.MasterProtos$MasterService$2.callBlockingMethod(MasterProtos.java:60465)
        at org.apache.hadoop.hbase.ipc.RpcServer.call(RpcServer.java:2240)
        ... 4 more
{code}

This is w/ my setting tables for master to 'none' (which makes for some nice stack traces in logs complaining about no such table 'none')

Do we still want HMaster to carry regions now?

I plan to undo HMaster extends HRegionServer in code, as it introduces a lot of cyclic dependencies on start up and shut down, which is really a pain...

{quote}Do we still want HMaster to carry regions now?
{quote}
No. It doesn't work.

I tried to undo HMaster extends HRegionServer as well as MasterRpcServices extends RSRpcServices locally, I think it could be done with two steps, first is to undo MasterRpcServices extends RSRpcServices, and second is to undo HMaster extends HRegionServer.

Will open a feature branch HBASE-15549 to land these two changes.

Thanks.

Recently I've been thinking that, maybe we could start an in process region server when maintenance mode is on. We just need a region server to hold the system regions, no matter whether it is master or not, and we even do not need them to start a on the same port.

Will try to see if this is possible. If this could be done, then I think we could finally undo HMaster extends HRegionServer.

Thanks.

See https://github.com/apache/hbase/pull/3612

Finally I decided to break maintenance mode first to see if we can decouple HMaster and HRegionServer, and the PR shows it is possible.

I will try to see how to better land the big patch.

Thanks.

All the sub tasks are done. Resolve the umbrella issue.

Since all the commits are in the sub tasks, and there are several people involved, leave the assignee of this issue to empty.

Thanks all for helping!

