In DERBY-2564, Knut said this:

" Thread.interrupt() calls Thread.checkAccess() which calls
SecurityManager.checkAccess(Thread).

http://java.sun.com/javase/6/docs/api/java/lang/SecurityManager.html#checkAccess(java.lang.Thread) says:

> If the thread argument is a system thread (belongs to the thread
> group with a null parent) then this method calls checkPermission
> with the RuntimePermission("modifyThread") permission. If the thread
> argument is not a system thread, this method just returns silently.

My guess is that none of Derby's threads are system threads, and
therefore no permissions are needed with a default security manager."

And:

"That doesn't mean we don't need to wrap the call in a privileged block, though. A SecurityManager implementation is free to override the checkAccess(Thread) method and perform stricter checks."

Does this mean that it's fine if a SecurityManager implementation *does* need the modifyThread permission? In which case perhaps we should just add the permission?

Also, as Kathey said this is an intermittent problem, does anyone have a theory about why we sometimes would need it and sometimes not? 

It looks to me like notifyAllActiveThreads() is meant to only be dealing with Derby threads, and the documentation
knut points at seems to indicate that we should not expect an exception on the call.  So I don't think we should
be recommending/requiring the modifyThread permission.

Since it is a "not expected" condition, I wonder if we should just catch it in insane and maybe ignore it and hope that it is a timing issue
with shutdown and the thread being is a wierd state.  Maybe in SANE mode add an assert with as much thread info as possible and the
assert will drive a jvm dump on some jvm's and that might help tell what is going on.

This is a patch with the proposed modification for ContextService...

I will forward this - backported to 10.10 - to the people who *can* reproduce the problem, and see what they say...

I don't think the comments match the actions of the patch, I think 
what the patch is doing:
if sane thow an assert which will cause system to shut down, it will not "go on".

In the insane case we will just do a javadump, with nothing in derby.log indicating
why.:
+                        // if sane, print out a warning.
+                        // if insane, if this is an IBM jvm, force a jvm dump
+                        // so we can analyze.
+                        // either way, go on, and hope things get cleared away
+                        // automatically in due course
+                        if (SanityManager.DEBUG)
+                        {
+                            SanityManager.THROWASSERT("unexpectedly needing an
extra permission.");
+                            ace.printStackTrace();
+                        }
+                        if (JVMInfo.isIBMJVM()) {
+                            JVMInfo.javaDump();
+                        }




Attaching another patch. I changed my mind about swallowing the exception, I think there is a chance of a hang during system shutdown if we hit it. 
But  we could do with more information. So with sane builds, causing an Assert which will dump info about the current threads to the console, and also identify which Thread is hitting the exception.
With insane, rethrow the exception, and in the case of an IBM jvm, also cause a java dump to be generated which will also contain a list of the current threads.

Patch ready for review.

Commit 1531721 from [~myrna] in branch 'code/trunk'
[ https://svn.apache.org/r1531721 ]

DERBY-6352; Access denied ("java.lang.RuntimePermission" "modifyThread") in store.RecoveryAfterBackup test
  adding try/catch code to provide more information when this happens

Commit 1532175 from [~myrna] in branch 'code/branches/10.10'
[ https://svn.apache.org/r1532175 ]

DERBY-6352; Access denied ("java.lang.RuntimePermission" "modifyThread") in store.RecoveryAfterBackup test
  Backport printing of additional info from trunk

Marking Not A Problem, to indicate this is (probably) the correct behavior, we should not need this permission on the threads Derby uses.

I think that it is a problem though that we are seeing the access denied error in this context. Possibly a java  Problem?  I think the issue should be reopened until we know and then closed invalid once confirmed and as a java  problem.  I think that is how we have handled jvm issues in the past.


I think so far things point to this being a java issue, but I'm fine with leaving it open. 

Just to note, that I also saw this in recent test runs against older branches (10.6 and 10.3) with ibm 1.6.

Not sure if it is the same failure but the test failed on trunk(revision 1550872) with IBM jdk 1.6 on Windows machine.
http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm16/1550872-derbyall_diff.txt

*** Start: RecoveryAfterBackup jdk1.6.0 storeall:storerecovery 2013-12-13 19:47:10 ***
4 del
< Database shutdown completed
5 del
< Starting restore with roll-forward recovery..
6 del
< Verifying database ...
7 del
< Count: 256 Sum: 32640
7 add
> JVMDUMP034I User requested Java dump using 'C:\jartest\JarResults.2013-12-13\ibm16_derbyall\javacore.20131213.194713.4948.0001.txt' through com.ibm.jvm.Dump.JavaDump
> JVMDUMP010I Java dump written to C:\jartest\JarResults.2013-12-13\ibm16_derbyall\javacore.20131213.194713.4948.0001.txt
> Exception in thread "main" java.security.AccessControlException: Access denied (java.lang.RuntimePermission modifyThread)
Test Failed.
*** End:   RecoveryAfterBackup jdk1.6.0 storeall:storerecovery 2013-12-13 19:47:18 ***

failed recently in 10.9 nightly testing, ibm16, windows.  Is intermitent as it has only failed a single time in this
nightly testing environment in the past 4 months:
http://people.apache.org/~myrnavl/derby_test_results/v10_9/windows/testlog/ibm16/1553785-derbyall_diff.txt
********* Diff file derbyall/storeall/storerecovery/RecoveryAfterBackup.diff
*** Start: RecoveryAfterBackup jdk1.6.0 storeall:storerecovery 2013-12-27 21:32:30 ***
4 del
< Database shutdown completed
5 del
< Starting restore with roll-forward recovery..
6 del
< Verifying database ...
7 del
< Count: 256 Sum: 32640
7 add
> Exception in thread "main" java.security.AccessControlException: Access denied (java.lang.RuntimePermission modifyThread)
Test Failed.
*** End:   RecoveryAfterBackup jdk1.6.0 storeall:storerecovery 2013-12-27 21:32:34 ***
------------------------------------------------------

Failed 1/17/2014; windows 2008, ibm 1.6, 10.9.2.2 - (1559317)
http://people.apache.org/~myrnavl/derby_test_results/v10_9/windows/testlog/ibm16/1559317-derbyall_diff.txt, diff as earlier failures.

We have seen this 'modifyThread permission' failure before in rare situations, linking those to this issue...


The test store/LogDeviceTest.java failed (with ibm16 SR15) in last night's IBM trunk run, generating a javacore dump, and at the top of the tests' derby.log I found this:

Database Class Loader started - derby.database.classpath=''^M
New exception raised during cleanup Access denied (java.lang.RuntimePermission modifyThread)^M
java.security.AccessControlException: Access denied (java.lang.RuntimePermission modifyThread)^M
        at java.security.AccessController.throwACE(AccessController.java:100)^M
        at java.security.AccessController.checkPermission(AccessController.java:174)^M
        at java.lang.SecurityManager.checkPermission(SecurityManager.java:544)^M
        at java.lang.SecurityManager.checkAccess(SecurityManager.java:671)^M
        at java.lang.Thread.checkAccess(Thread.java:403)^M
        at java.lang.Thread.interrupt(Thread.java:531)^M
        at org.apache.derby.iapi.services.context.ContextService$1.run(Unknown Source)^M
        at org.apache.derby.iapi.services.context.ContextService$1.run(Unknown Source)^M
        at java.security.AccessController.doPrivileged(AccessController.java:273)^M
        at org.apache.derby.iapi.services.context.ContextService.notifyAllActiveThreads(Unknown Source)^M
        at org.apache.derby.impl.db.DatabaseContextImpl.cleanupOnError(Unknown Source)^M
        at org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(Unknown Source)^M
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.cleanupOnError(Unknown Source)^M
        at org.apache.derby.impl.jdbc.EmbedConnection.<init>(Unknown Source)^M
        at org.apache.derby.jdbc.InternalDriver.getNewEmbedConnection(Unknown Source)^M
        at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)^M
        at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)^M
        at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)^M
        at java.sql.DriverManager.getConnection(DriverManager.java:419)^M
        at java.sql.DriverManager.getConnection(DriverManager.java:367)^M
        at org.apache.derbyTesting.functionTests.util.TestUtil.getConnection(TestUtil.java:802)^M
        at org.apache.derbyTesting.functionTests.tests.store.LogDeviceTest.shutdown(LogDeviceTest.java:159)^M
        at org.apache.derbyTesting.functionTests.tests.store.LogDeviceTest.runTest(LogDeviceTest.java:101)^M
        at org.apache.derbyTesting.functionTests.tests.store.LogDeviceTest.main(LogDeviceTest.java:53)^M
Cleanup action completed^M
New exception raised during cleanup Access denied (java.lang.RuntimePermission modifyThread)^M
java.security.AccessControlException: Access denied (java.lang.RuntimePermission modifyThread)^M
        at java.security.AccessController.throwACE(AccessController.java:100)^M
        at java.security.AccessController.checkPermission(AccessController.java:174)^M
        at java.lang.SecurityManager.checkPermission(SecurityManager.java:544)^M
        at java.lang.SecurityManager.checkAccess(SecurityManager.java:671)^M
        at java.lang.Thread.checkAccess(Thread.java:403)^M
        at java.lang.Thread.interrupt(Thread.java:531)^M
        at org.apache.derby.iapi.services.context.ContextService$1.run(Unknown Source)^M
        at org.apache.derby.iapi.services.context.ContextService$1.run(Unknown Source)^M
        at java.security.AccessController.doPrivileged(AccessController.java:273)^M
        at org.apache.derby.iapi.services.context.ContextService.notifyAllActiveThreads(Unknown Source)^M
        at org.apache.derby.impl.db.DatabaseContextImpl.cleanupOnError(Unknown Source)^M
        at org.apache.derby.iapi.services.context.ContextManager.cleanupOnError(Unknown Source)^M
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.cleanupOnError(Unknown Source)^M
        at org.apache.derby.impl.jdbc.TransactionResourceImpl.handleException(Unknown Source)^M
        at org.apache.derby.impl.jdbc.EmbedConnection.handleException(Unknown Source)^M
        at org.apache.derby.impl.jdbc.EmbedConnection.<init>(Unknown Source)^M
        at org.apache.derby.jdbc.InternalDriver.getNewEmbedConnection(Unknown Source)^M
        at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)^M
        at org.apache.derby.jdbc.InternalDriver.connect(Unknown Source)^M
        at org.apache.derby.jdbc.AutoloadedDriver.connect(Unknown Source)^M
        at java.sql.DriverManager.getConnection(DriverManager.java:419)^M
        at java.sql.DriverManager.getConnection(DriverManager.java:367)^M
        at org.apache.derbyTesting.functionTests.util.TestUtil.getConnection(TestUtil.java:802)^M
        at org.apache.derbyTesting.functionTests.tests.store.LogDeviceTest.shutdown(LogDeviceTest.java:159)^M
        at org.apache.derbyTesting.functionTests.tests.store.LogDeviceTest.runTest(LogDeviceTest.java:101)^M
        at org.apache.derbyTesting.functionTests.tests.store.LogDeviceTest.main(LogDeviceTest.java:53)^M


This error is very frustrating, and very elusive.
How do we or can we make sure no derby threads are system threads?

Attaching the javacore files from the test failure in store/LogDeviceTest (modified to remove strings like hostname, username, and the like, and then zipped)

Test failed on 10.8.3.3(revision 1575473) with ibm jdk 1.6 on Windows 2008 machine
http://people.apache.org/~myrnavl/derby_test_results/v10_8/windows/testlog/ibm16/1575473-derbyall_diff.txt

I don't know where the system thread that causes problems in the test comes from, but I am able to reproduce the AccessControlException in my environment by manually starting a system thread and doing some db operations in that thread while another thread shuts down the engine. See the attached patch test-case.diff. The test case consistently fails for me with AccessControlException (insane) or ASSERT FAILURE (sane).

The test failed on 10.10.1.4 with IBM JDK 1.6 on March 15th on Linux machine
http://people.apache.org/~myrnavl/derby_test_results/v10_10/linux/testlog/ibm16/1577960-derbyall_diff.txt

Another failure with IBM jdk 1.6, this time on trunk 10.11.0.0(revision 1576555)
http://people.apache.org/~myrnavl/derby_test_results/main/windows/testlog/ibm16/1576555-derbyall_diff.txt

Another instance of hitting this in a test and not seeing it again.

I have made a debug build and am waiting for the results of multi iteration test runs in an environment where this reproduces more consistently, hopefully that will tell us what thread (name) is identified as needing the modifyThread permission.

Until that information is available, I am wondering:
- should we 'support' Derby activity on system threads? 
- if not, should we explicitly document this (and where?)
- assuming we find a reasonable explanation for Derby calling interrupt on a system level thread in the RecoveryAfterBackup test (and even more rare occurrenes in other tests), would it be acceptable to, when we get this exception, just check whether we're dealing with a system level thread and if so, swallow the exception, and only other wise throw the exception?
Something like this (in ContextService.notifyAllActiveThreads):
                final Thread fActive = active;
		if (cm.setInterrupted(c))
                {
                    // DERBY-6352; in some cases a SecurityException is seen
                    // demanding an explicit granting of modifyThread
                    // permission. Just swallow.
                    try {
                        AccessController.doPrivileged(
                                new PrivilegedAction() {
                                    public Object run()  {
                                        fActive.interrupt();
                                        return null;
                                    }
                                });
                    } catch (java.security.AccessControlException ace) {
                        // if we're seeing the need for modifyThread exception, and
                        // this is a system thread, i.e. no parent thread, then forget about sending
                        // an interrupt.
                        if (ace.getPermission().toString().indexOf("modifyThread")>0) 
                        {
                            if(fActive.getThreadGroup().getParent() == null)
                                 continue;
                        }
                        else 
                            throw ace;
                    }
Perhaps this is a bit odd as we'd never see the 'modifyThread' permission unless it is a system thread?


The debug runs showed that when we hit the problem in the RecoveryAfterBackup test, it's on a 'Finalizer'  thread.

In this case, Derby is shutting down the database, right? It seems OK to me to just ignore the exception if the interrupt
happens as part of the shutdown, since that interrupt is actually generated by Derby itself.

Thanks for the comment Dag, yes, Derby is shutting down the database.

I am fiddling with a couple of options, and trying to make sure I don't mess up...
I'm thinking of basically 2 options:
1. leave the code as it is currently (but remove the no longer needed ibm jvm specific javadump and try to minimize the comments) so catch the exception, then ignore it if we find it's a Finalizer thread
  1.b in sane mode, still throw an assert.
2. only call interrupt except if fActive is a system level thread with the word 'Finalizer' in it.

I am wondering which is best, and experimenting to see which is fastest.



Or perhaps we should ignore all SecurityExceptions when calling interrupt() in this method, regardless of which thread it is? I'm thinking this because:
* I'm not sure we can rely on every JVM having the same name for the finalizer thread.
* There could be other system threads doing database work.
* The interrupt in this method looks like an optimization (active threads will stop earlier), and not an essential part of the shutdown, so it's probably not necessary to abort the shutdown if it is not allowed to interrupt the thread.

I'm still a little curious to know which finalize() method is causing this, since I didn't think the finalizers in the engine were doing work that would require a context stack.

Thanks Knut, I'll go and implement this then.
The Java call Stack from the jvm's informational dump suggests the finalizer comes from the EmbedConnection (this is based on a 10.10.1.4 build):
----------------------------
3XMTHREADINFO      "Finalizer thread" J9VMThread:0x00000000007A0200, j9thread_t:0x000000000079F1A0, java/lang/Thread:0x00007F7868697F90, state:B, prio=5
3XMJAVALTHREAD            (java/lang/Thread getId:0xB, isDaemon:true)
3XMTHREADINFO1            (native thread ID:0x4553, native priority:0x5, native policy:UNKNOWN)
3XMTHREADINFO2            (native stack address range from:0x00007F7865B10000, to:0x00007F7865B51000, size:0x41000)
3XMTHREADINFO3           Java callstack:
4XESTACKTRACE                at org/apache/derby/iapi/services/context/SystemContext.cleanupOnError(Bytecode PC:76(Compiled Code))
4XESTACKTRACE                at org/apache/derby/iapi/services/context/ContextManager.cleanupOnError(Bytecode PC:271(Compiled Code))
4XESTACKTRACE                at org/apache/derby/impl/jdbc/TransactionResourceImpl.cleanupOnError(Bytecode PC:6(Compiled Code))
4XESTACKTRACE                at org/apache/derby/impl/jdbc/EmbedConnection.close(Bytecode PC:73(Compiled Code))
4XESTACKTRACE                at org/apache/derby/impl/jdbc/EmbedConnection.finalize(Bytecode PC:12(Compiled Code))
4XESTACKTRACE                at java/lang/J9VMInternals.runFinalize(J9VMInternals.java:438(Compiled Code))
-------------------

Thanks Myrna. The EmbedConnection.close(StandardException) method does some work within a setup/restoreContextStack() block, which explains why it is seen as an active thread.

Adding a patch which removes all the debugging printouts and asserts and just does nothing when we see an AccessControlException.
Thus, if we do not have enough permission to interrupt a thread, we just let it finish on its own.

Thanks, Myrna. The patch looks fine to me. +1 to commit.

Nit: The JVMInfo class is no longer used in ContextService, so the import statement can be removed too.

Commit 1590817 from [~myrna] in branch 'code/trunk'
[ https://svn.apache.org/r1590817 ]

DERBY-6352; Access denied ("java.lang.RuntimePermission" "modifyThread") highly intermittent, but e.g. in store.RecoveryAfterBackup test
  When we see a AccessControlException during shutdown in the notifyAll call, do nothing, which lets the Thread finish on its own.

Commit 1591077 from [~myrna] in branch 'code/branches/10.10'
[ https://svn.apache.org/r1591077 ]

DERBY-6352; Access denied ("java.lang.RuntimePermission" "modifyThread") highly intermittent, but e.g. in store.RecoveryAfterBackup test
   backport of revision 1590817 from trunk; accepting that if we see an AccessControlException in this spot in the code we let the thread finish on its own.

bulk change to close all issues resolved but not closed and not changed since June 1, 2014.

