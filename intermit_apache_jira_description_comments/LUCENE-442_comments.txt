Hoss,

how exactly did the test fail, what was the real number and what was the expected number?

I must admit I don't understand your scenario. The test happens only at the end, on an optimized index. We start two threads on an empty index. Both threads randomly add and delete documents and remember the number of documents added and deleted. At the end, when both threads are finished, the index should contain this many documents:

# added by thread 1 + # added by thread 2 - # deleted by thread 1 - # deleted by thread 2

This is how I understand it. Maybe you could rephrase your scenario?

Regards
 Daniel


Okay, I see now that there are problems with the test. I will try to fix them, maybe that way it becomes clear (to me) if that test case makes sense at all.


I see a few issues:

1) A constant seed is used for reproducability:
  private Random random = new Random(101);		// constant seed for reproducability
But, it won't have that effect since the same random number generator is used across threads.

2) race condition between checking idStack.size() and calling pop()

3) non-atomic increment of the document id could lead to duplicates

IMO, the ideal multithreaded test would be designed to not use any synchronization at all, making it easier to test if IndexModifier actually does all the synchronization it needs to.

I just committed some updates, could you please check whether it's okay now?

Daniel: I used the following script to run through 50 iterations of the test...

#!/bin/sh
for ((i=0; i < 50; i++)); do {
  ant test -Dtestcase=TestIndexModifier;
  mv build/test/TEST-org.apache.lucene.index.TestIndexModifier.xml build/test/TEST-org.apache.lucene.index.TestIndexModifier.xml.$i;
};
done
grep -l "failure message" build/test/TEST-org.apache.lucene.index.TestIndexModifier.xml.*

...prior to upgrading to the changes you made, 30 of the 50 test runs failed (with the values being off by one or two in each case).  After upgrading to TestIndexModifier.java v328151, 0 of the 50 runs failed.  

It's not a proof of correctness, but it certainly bodes well.

I also want to clarify the scenerio I described earlier: I'm an idiot.  I completely missed that each call to testIndexInternal(int) blocks waiting for the threads to finish -- for some reason I thought all three calls were happening concurrently.  So the types of scenerios I was initially thinking could cause problems were completely non-existent -- and it looks like you fixed all the ones Yonik noticed.

(I do think Yonik has a good point however regarding a test with no synchronization at all -- this should be possible if each instant of IndexThread maintaining it's own id and idStack variables, using  'threadNumber + "-" id++' to generate new doc identifiers, and only ever deleted documents it added).

Yep, it looks good.  I'd go ahead and close this issue (if I knew how...)

The multithreaded tests w/o any synchronization is just a good general guideline.  I briefly browsed the TestIndexModifier, and there shouldn't be any issues in that regard since  the synchronization is trivial (all public methods synchronized on the same object)

Yonik, thanks for your review. I'm closing this issue now. You'll need to ask Erik to give you committer's permissions in Jira, then you'll be able to close issues with the "Workflow actions" on the left.


This issue was moved to GitHub issue: [#1520|https://github.com/apache/lucene/issues/1520].

