A patch will be submitted soon; I'm presuming that it is ok to create a dependency on xml-commons-resolver.jar...

The patch allows catalog files to be specified on the WSDL2Java command line, and within the axis-wsdl2java Ant task, although in the case of the latter, support of embedded Ant <xmlcatalog> elements is limited to <catalogpath> elements, there is no way in the current Ant XMLCatalog API to get access to e.g. files on the classpath as a URL.

<wsdl:import> and <xsd:import>/<xsd:include> URIs are resolved as a SYSTEM ID as far as the catalog is concerned; this is compatible with XMLSchema validation tools which use catalogs.

Patch file xml-catalog.pch; all necessary patches (including test!) except addition of the XML Commons resolver 1.1 jar which can be downloaded from the XML Commons Project (as resolver.jar), and placed in ws-axis/java/lib (as xml-commons-resolver-1.1.jar).

Let me know what you think.


Ellis,

does this mean Resolver is needed at runtime too? can you please make it optional at runtime? (using reflection). Usually there is a lot of flak for adding new jar dependencies and avoiding more jars at runtime may help.

thanks,
dims

Ok, I'll have a go at making it  optional at run-time; I had this in mind when I designed it anyway :)


Consider this flak for adding any more runtime jars. :-)
Please don't do that, especially for functionality that only a subset of users would ever use.


I think I'm going to have to put this on ice externally (I need to use it internally) :(

The reason is that I need to modify the WSDL4J API/implementation slightly to support using a WSDLLocator when 'reading' a WSDL passed in as a Document object; currently the API only allows specification of a WSDLLocator (which I can then use to resolve the import URIs) when reading a document solely through the readWSDL(WSDLLocator) method, it doesn't allow for setting one for Document based readWSDL() calls.

With this API change (which involves simply adding a setLocator() method to javax.wsdl.xml.WSDLReader and its implementation), the solution works perfectly.

The patch I submitted earlier, which relied solely on replacing the SymbolTable.getURL() method, was insufficient since, in my test case, I was mis-using the WSDL and specifying an xs:import element directly inside the wsdl:types element, rather than embedding it in an xs:schema element; this caused WSDL4J to ignore the schema, and the SymbolTable to import it itself, which then used all the resolution stuff. The correct use of wsdl:types resulted in WSDL4J processing the imports itself, without the benefit of any resolver.

For your interest only (and the record), I'll submit the new patches to both axis and wsdl4j, but I don't expect them to be moved on.

I've commented on JSR-110 asking for the new API call (both on SourceForge and via jsr-110-comments@jcp.org), so who knows? ;)

Patch to Axis 1.2.1 (HEAD as of 2005-05-13T16:37:00Z+01:00:00)

Also requires patch wsdl4j.pch to wsdl4j (1.5.1) from http://sourceforge.net/projects/wsdl4j/

Optional (for the XML Catalog facility) XML Commons resolver.jar (1.1) from http://xml.apache.org/commons/components/resolver/

See ws-axis/java/test/wsdl/_import/build.xml (and ImportMessagesXSDImportURI.wsdl) for use of catalogs with ant-wsdl2java, see wsdl2java -h for use from command line (hint -g).

wsdl4j patch for wsdl4j version 1.5.1 (current HEAD); enables WSDLLocator to be used with any WSDLReader readWSDL() method.

Integrated in axis-trunk #194 (See [https://builds.apache.org/job/axis-trunk/194/])
    AXIS-1984: Added XML catalog support to maven-wsdl2java-plugin. (Revision 1398987)

     Result = SUCCESS
veithen : 
Files : 
* /axis/axis1/java/trunk
* /axis/axis1/java/trunk/axis-rt-core/src/main/java
* /axis/axis1/java/trunk/axis-rt-core/src/main/java/org/apache/axis/wsdl/gen/Parser.java
* /axis/axis1/java/trunk/axis-rt-core/src/main/java/org/apache/axis/wsdl/symbolTable/NullEntityResolver.java
* /axis/axis1/java/trunk/axis-rt-core/src/main/java/org/apache/axis/wsdl/symbolTable/SymbolTable.java
* /axis/axis1/java/trunk/axis-rt-core/src/main/java/org/apache/axis/wsdl/symbolTable/WSDLLocatorAdapter.java
* /axis/axis1/java/trunk/maven/maven-wsdl2java-plugin/pom.xml
* /axis/axis1/java/trunk/maven/maven-wsdl2java-plugin/src/it/wsrf
* /axis/axis1/java/trunk/maven/maven-wsdl2java-plugin/src/it/wsrf/pom.xml
* /axis/axis1/java/trunk/maven/maven-wsdl2java-plugin/src/it/wsrf/src
* /axis/axis1/java/trunk/maven/maven-wsdl2java-plugin/src/it/wsrf/src/main
* /axis/axis1/java/trunk/maven/maven-wsdl2java-plugin/src/it/wsrf/src/main/wsdl
* /axis/axis1/java/trunk/maven/maven-wsdl2java-plugin/src/it/wsrf/src/main/wsdl/addressing.xsd
* /axis/axis1/java/trunk/maven/maven-wsdl2java-plugin/src/it/wsrf/src/main/wsdl/catalog.xml
* /axis/axis1/java/trunk/maven/maven-wsdl2java-plugin/src/it/wsrf/src/main/wsdl/wsrf-WS-BaseFaults-1.2-draft-01.xsd
* /axis/axis1/java/trunk/maven/maven-wsdl2java-plugin/src/it/wsrf/src/main/wsdl/wsrf-WS-ResourceProperties-1.2-draft-01-impl.wsdl
* /axis/axis1/java/trunk/maven/maven-wsdl2java-plugin/src/it/wsrf/src/main/wsdl/wsrf-WS-ResourceProperties-1.2-draft-01.wsdl
* /axis/axis1/java/trunk/maven/maven-wsdl2java-plugin/src/it/wsrf/src/main/wsdl/wsrf-WS-ResourceProperties-1.2-draft-01.xsd
* /axis/axis1/java/trunk/maven/maven-wsdl2java-plugin/src/it/wsrf/src/main/wsdl/xml.xsd
* /axis/axis1/java/trunk/maven/maven-wsdl2java-plugin/src/it/wsrf/verify.bsh
* /axis/axis1/java/trunk/maven/maven-wsdl2java-plugin/src/main/java/org/apache/axis/tools/maven/wsdl2java/AbstractWsdl2JavaMojo.java
* /axis/axis1/java/trunk/test/wsdl/interop
* /axis/axis1/java/trunk/test/wsdl/wsrf


