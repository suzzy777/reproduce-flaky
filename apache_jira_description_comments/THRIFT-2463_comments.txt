I'm wondering whether this could be caused by a spurious SIGALRM timeout, because {{TestServer.py}} arms the alarm for only 2 seconds and it's possible that if the machine was under heavy load, it would take more than 2 seconds for {{TestServer.py}} to start accepting connections.

Excerpt from the code:
{code}
elif server_type == "TProcessPoolServer":
  import signal
  from thrift.server import TProcessPoolServer
  server = TProcessPoolServer.TProcessPoolServer(processor, transport, tfactory, pfactory)
  server.setNumWorkers(5)
  def set_alarm():
    def clean_shutdown(signum, frame):
      print "SIGALRM: Shutting down server"
      for worker in server.workers:
        if options.verbose > 0:
          print 'Terminating worker: %s' % worker                                                 
        worker.terminate()
      if options.verbose > 0:
        print 'Requesting server to stop()'
      try:       
        server.stop()
      except:
        pass
    signal.signal(signal.SIGALRM, clean_shutdown)
    signal.alarm(2)
  set_alarm()
{code}

I'm sure why the alarm is even armed here, and why so aggressively.  This was added in THRIFT-1094 by [~bryanduxbury].

Hi Benoit,

Thanks for having a look on it. That's something we really need to fix. If you have a patch please attach here so everyone can review it.

Cheers,
Henrique

I may have a patch, I added some debugging and I don't see us tripping on the {{SIGALRM}} (event though it still looks fishy to me).  There are some interlock issues in {{RunClientServer.py}} that I'm fixing to see if that indeed stops the flakiness of my CI system.

Maybe the problem is completely different than what I thought.  I just saw this:
{code}
Test run #2:  (includes gen-py-default) Server=TSimpleServer,  Proto=accel,  zlib=False,  SSL=True
Testing server TSimpleServer: /usr/bin/python ./TestServer.py --genpydir=gen-py-default --proto=accel --port=9090 --ssl TSimpleServer
Testing client: /usr/bin/python ./TestClient.py --genpydir=gen-py-default --proto=accel --port=9090 --ssl
ERROR:root:'NoneType' object has no attribute 'read'
Traceback (most recent call last):
  File "./../../lib/py/build/lib.linux-i686-2.7/thrift/server/TServer.py", line 84, in serve
    self.processor.process(iprot, oprot)
  File "gen-py-default/ThriftTest/ThriftTest.py", line 995, in process
    (name, type, seqid) = iprot.readMessageBegin()
  File "./../../lib/py/build/lib.linux-i686-2.7/thrift/protocol/TBinaryProtocol.py", line 126, in readMessageBegin
    sz = self.readI32()
  File "./../../lib/py/build/lib.linux-i686-2.7/thrift/protocol/TBinaryProtocol.py", line 206, in readI32
    buff = self.trans.readAll(4)
  File "./../../lib/py/build/lib.linux-i686-2.7/thrift/transport/TTransport.py", line 58, in readAll
    chunk = self.read(sz - have)
  File "./../../lib/py/build/lib.linux-i686-2.7/thrift/transport/TTransport.py", line 159, in read
    self.__rbuf = StringIO(self.__trans.read(max(sz, self.__rbuf_size)))
AttributeError: 'NoneType' object has no attribute 'read'
Traceback (most recent call last):
  File "./TestServer.py", line 243, in <module>
    server.serve()
  File "./../../lib/py/build/lib.linux-i686-2.7/thrift/server/TServer.py", line 90, in serve
    itrans.close()
  File "./../../lib/py/build/lib.linux-i686-2.7/thrift/transport/TTransport.py", line 152, in close
    return self.__trans.close()
AttributeError: 'NoneType' object has no attribute 'close'
{code}

I haven't modified anything that could be causing this.  Weird.

Ah OK, while trying to fix this bug, I tripped on another bug, namely that opening and closing a connection to a thrift server that uses SSL without actually performing an SSL handshake triggers the above {{AttributeError}} due to lack of error checking in {{TSimpleServer}}.

I think my fix works, I filed a separate issue for the lack of error checking in the {{TServer}} implementations (it's not just {{TSimpleServer}}): THRIFT-2466

Patch that I believe fixes the issue.  Need the patch of THRIFT-2466 first, otherwise this patch will cause the test to run into that bug.

Hi Benoit
looks good!
committed
;-r


FAILURE: Integrated in Thrift #1138 (See [https://builds.apache.org/job/Thrift/1138/])
THRIFT-2463 test/py/RunClientServer.py fails sometimes (roger: rev 9b328531122ae241ed52622b9356014fd8aa8a6a)
* test/py/RunClientServer.py


