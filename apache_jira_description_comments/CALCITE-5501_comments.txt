This seems to be happening only on the SonarCloud part, right? Of course we need to fix this even if that's the case, just wondering what can cause the difference in behaviour w.r.t. "regular" CI, understanding that might hint us into the right direction.

I built [this PR|https://github.com/apache/calcite/pull/3047] to propose the use of [XmlUnit|https://mvnrepository.com/artifact/org.xmlunit/xmlunit-matchers/2.9.1] to compare to XML File. 
Hope it will fix the issue.

[~clesaec], Can you explain what you think caused the issue with those sample runs, and how XmlUnit would fix it?

I think the problem is that {{SqlToRelConverterTest.xml}} is used by two different tests - {{SqlToRelConverterTest}} and {{SqlToRelConverterExtendedTest}} - and there is a race condition. The problem is therefore not XML but files.

Hum, you're certainly right, i thought it was on indentation or something like that.
So, we would have to copy SqlToRelConverterTest.xml into SqlToRelConverterExtendedTest.xml 
And add code below to SqlToRelConverterExtendedTest class

{code:java}
  private static final SqlToRelFixture LOCAL_FIXTURE =
      SqlToRelFixture.DEFAULT
          .withDiffRepos(DiffRepository.lookup(SqlToRelConverterExtendedTest.class));

  private static DiffRepository diffRepos = null;

  @Override
  public SqlToRelFixture fixture() {
    diffRepos = LOCAL_FIXTURE.diffRepos();
    return LOCAL_FIXTURE;
  }
{code}
?

I haven't had time to look in-depth yet but I had the same idea of [~julianhyde], it smells of a race condition on the output file.

IIUC _SqlToRelConverterExtendedTest_ just tests the "Rel -> Json -> Rel" round-trip for each test in the base class {_}SqlToRelConverterTest{_}, is it possible that we don't need to write to an XML at all in the subclass?

In that case, simply removing the _DiffRepository_ from the test fixture in _SqlToRelConverterExtendedTest_ would do, like this:
 
{code:java}
@Override public SqlToRelFixture fixture() {
  return SqlToRelFixture.DEFAULT;
}{code}
It would be nice to avoid to duplicate the output file because it enforces a bit more manual work for contributors of new tests (on the bright side the current machinery at least guarantees that they would stay in sync and up-to-date).

Of course if there is no other way and what I proposed does not work (or breaks assumptions over _SqlToRelConverterExtendedTest_ that I missed), I am good with at least recovering from the actual flaky state, and we can improve further in a second moment.

Unfortunately _SqlToRelConverterExtendedTest_ needs a _DiffRepository_ too it seems, so my proposed solution does not work.

I managed to reproduce locally as follows:
{code:java}
./gradlew assemble --no-build-cache cleanTest :core:test --tests "org.apache.calcite.test.SqlToRelConverterExtendedTest" --tests "org.apache.calcite.test.SqlToRelConverterTest"{code}
I am trying to see if I can make those two classes run sequentially (either at the JUnit5 level or via gradle), worst case we go for the extra XML file as [~clesaec] suggested, if there are no objections.

[@ResourceLock|https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/parallel/ResourceLock.html] from JUnit5 to the rescue here, I have updated my [PR|https://github.com/apache/calcite/pull/3049] by making _SqlToRelConverterExtendedTest_ and _SqlToRelConverterTest_ classes run sequentially, while keeping their execution w.r.t. the other classes and for the test cases within them, parallel.

Running "./gradlew assemble --no-build-cache cleanTest :core:test" repeatedly on the main branch and with the PR on my machine did not provide noticeable difference in the total execution time, because the tests from the two classes are still executed in parallel with all the rest of the tests, the two classes simply don't step on each other toes anymore.

I will check in the ML if there is still time to fix this before the release, or if it will wait for main to be open again.

Yes, that might work. If SqlToRelConverterExtendedTest were to produce genuinely different plans, I have no idea where we'd put them. Ergo, there's no point writing.

There's another case logged - I can't find it just now - that DiffRepository is very inefficient - if there are 100 tests, it will write the .xml file 100 times, and each time it writes 100 xml elements, therefore a cartesian performance problem. Solving that case might kill two birds.

From your description I think you are referring to CALCITE-3517.

I think that even writing the file once per test class,  we would still be having a race condition, because one of the two test classes might be writing when the other one is comparing.

Of course it would limit sensibly the chances of the race condition to happen (once per class vs once per test) but we would still need a lock on _SqlToRelConverterTest.xml_ which remains shared, so I think that my proposed patch would still be needed.

I therefore suggest to get this in (once the release is over) and tackle the performance improvement separately as part of CALCITE-3517, if that makes sense to you too.

Fixed via [{{03a0b9d}}|https://github.com/apache/calcite/commit/03a0b9d93774ad6d0a7c0909fa33bc9640a3a02a], thanks [~clesaec] for your review, and to [~zabetak] and [~julianhyde] for the discussion and for reporting the issue.

For the record there is the proposal of splitting the golden files on a per test basis (CALCITE-4595). I experimented a bit with https://approvaltests.com/ in the past and I guess it can be achieved with minimal changes. I don't know if it solves the problem in CALCITE-3517 but If there is interest I could try to put together a prototype.

I think that will help with CALCITE-3517, but the issue we have here would still exist, since each test (and associated golden file) would still be shared. As I was saying in a previous comment, the race condition will be rarer but still happening if the same test is executed at the same time by both classes.

This said I think it might be a good improvement and worth trying, since these kind of tests are widespread and time consuming, so if it helps with CALCITE-3517 we will make our tests run way faster!

[~zabetak], I think with {{DiffRepository}} I implemented approval tests years before they became popular (or there was even a name for them). I think that {{DiffRepository}}-based tests work well for Calcite and I think we should stick with it.

[~julianhyde] I was not really suggesting dropping {{DiffRepository}}. I just wanted to re-surface the idea of having a single file per test since it would somehow address the concurrency and performance problem (CALCITE-3517).

Resolved in release 1.34.0 (2023-03-14)

