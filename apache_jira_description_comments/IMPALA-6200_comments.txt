Different variation of failures:

{noformat}
select straight_join *
from tpch_parquet.lineitem
    left join tpch_parquet.orders on l_orderkey = o_orderkey
{noformat}

Actual:
{noformat}
F02:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
|  Per-Host Resources: mem-estimate=0B mem-reservation=0B
PLAN-ROOT SINK
|  mem-estimate=0B mem-reservation=0B
|
04:EXCHANGE [UNPARTITIONED]
|  mem-estimate=0B mem-reservation=0B
|  tuple-ids=0,1N row-size=454B cardinality=6001215
|
F00:PLAN FRAGMENT [RANDOM] hosts=2 instances=2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Per-Host Resources: mem-estimate=380.41MB mem-reservation=34.00MB
{noformat}


Expected:
{noformat}
F02:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
|  Per-Host Resources: mem-estimate=0B mem-reservation=0B
PLAN-ROOT SINK
|  mem-estimate=0B mem-reservation=0B
|
04:EXCHANGE [UNPARTITIONED]
|  mem-estimate=0B mem-reservation=0B
|  tuple-ids=0,1N row-size=454B cardinality=6001215
|
F00:PLAN FRAGMENT [RANDOM] hosts=3 instances=3
Per-Host Resources: mem-estimate=380.41MB mem-reservation=34.00MB
{noformat}


[~zamsden], would you mind digging into what could have caused the flakiness above ? This seems to be occurring quite frequently recently.

Another set of failure. Not sure if it's related. This time with HBase.

{noformat}
Tests run: 64, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 46.173 sec <<< FAILURE! - in org.apache.impala.planner.PlannerTest
testHbase(org.apache.impala.planner.PlannerTest)  Time elapsed: 10.722 sec  <<< FAILURE!
java.lang.AssertionError: section SCANRANGELOCATIONS of query:
select * from functional_hbase.alltypessmall
where id < 5
Actual does not match expected result:
  HBASE KEYRANGE port=16201 1:3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  HBASE KEYRANGE port=16202 3:7
  HBASE KEYRANGE port=16203 7:<unbounded>
  HBASE KEYRANGE port=16203 <unbounded>:1
NODE 0:

Expected:
  HBASE KEYRANGE port=16201 <unbounded>:3
  HBASE KEYRANGE port=16202 3:7
  HBASE KEYRANGE port=16203 7:<unbounded>
NODE 0:
section SCANRANGELOCATIONS of query:
select * from functional_hbase.stringids
where id < '5'
and tinyint_col = 5
Actual does not match expected result:
  HBASE KEYRANGE port=16201 1:3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  HBASE KEYRANGE port=16202 3:5
  HBASE KEYRANGE port=16203 <unbounded>:1
NODE 0:

Expected:
  HBASE KEYRANGE port=16201 <unbounded>:3
  HBASE KEYRANGE port=16202 3:5
NODE 0:
section SCANRANGELOCATIONS of query:
select * from functional_hbase.alltypesagg
where bigint_col is not null and bool_col = true
Actual does not match expected result:
  HBASE KEYRANGE port=16201 1:3
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  HBASE KEYRANGE port=16202 3:7
  HBASE KEYRANGE port=16203 7:<unbounded>
  HBASE KEYRANGE port=16203 <unbounded>:1
NODE 0:

Expected:
  HBASE KEYRANGE port=16201 <unbounded>:3
  HBASE KEYRANGE port=16202 3:7
  HBASE KEYRANGE port=16203 7:<unbounded>
NODE 0:

        at org.junit.Assert.fail(Assert.java:88)
        at org.apache.impala.planner.PlannerTestBase.runPlannerTestFile(PlannerTestBase.java:770)
        at org.apache.impala.planner.PlannerTestBase.runPlannerTestFile(PlannerTestBase.java:775)
        at org.apache.impala.planner.PlannerTest.testHbase(PlannerTest.java:89)
{noformat}

Actually, could this be a dup of IMPALA-3887 ?

This does look a lot like a dup of IMPALA-3887, but how does that explain the HBase split failure?  If the HBase split fails to take place, we should fail in the data load step.  So that looks like a different issue.

I'm gonna go ahead and close this as a dup.  We can continue investigation in IMPALA-3887

