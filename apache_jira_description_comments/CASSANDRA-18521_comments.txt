Here is a patch:
||PR||CI||
|[cep-7-sai|https://github.com/apache/cassandra/pull/2329]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2892/workflows/d6f09762-97f1-409f-90b7-aa69c7951668] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2892/workflows/837b186e-6cd9-442c-baaf-8bc067f56b21]|

[The first commit|https://github.com/apache/cassandra/pull/2329/commits/9722461016ab0a4ee4a0a0e55b5ed6bdd9ba7023] moves {{SAITester#waitForIndexQueryable}} to {{CQLTester}} and renames the methods. So {{CQLTester}} has separate {{waitForIndexQueryable}} and {{waitForTableIndexesQueryable}} methods.

[The second commit|https://github.com/apache/cassandra/pull/2329/commits/fbf68d158f6d074dc1cc2330397d45f5f4b936d5] addresses the addition of a version of {{CQLTester#createIndex}} that waits for the index to become queryable.

There are hundred of calls to {{createIndex}} outside the index package. Most of these calls don't use any of the utility methods to wait for the index. Instead, the rely on the fact that [legacy indexes don't have an initialization task when the indexed table is empty|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/index/internal/CassandraIndex.java#L171]. This makes the creation of a legacy index on an empty table a blocking operation. Most tests exploit this by creating the index before inserting data, so they don't have to wait for the index build. I think this comes from a time when the methods for waiting for the index build didn't exist.

I think that approach is risky because it depends on the particular implementation of secondary indexes. The index API doesn't offer any guarantees of synchronicity when creating indexes on empty tables. Indeed, SAI always does an asynchronous index creation. So those hundred tests can become flaky if someday we make SAI the default implementation. Thus, I think that those tests should use the variant of {{createIndex}} that waits for the index.

I think most new tests would also want to use the synchronous {{{}createIndex{}}}. Developers unaware of the asynchronous index creation should probably be directed to the synchronous {{{}createIndex{}}}.

On the other hand, the asynchronous {{createIndex}} seems to be useful for tests validating the asynchronous building itself, and anyone writing those tests would probably be familiarized index building mechanism they are testing.

So I have made {{CQLTester#createIndex}} the synchronous method, which should solve the problem of not properly waiting for the index on the many tests outside the index package. The asynchronous index creation can be done with a new {{CQLTester#createIndexAsync}} method, which is equivalent to the previous old {{{}createIndex{}}}, and that is only used for tests related with the index building process.

It's worth mentioning that using the sync method when one needs to use the sync method usually leads to a consistent assertion error when the wait for the index build expires. However, using the async method when one needs to use the sync method produces flaky tests that are much harder to catch. That's why I prefer to make the sync method the default and not naming it {{{}createIndexSync{}}}, {{{}createIndexWaitingForQueryable{}}}, or something like that. wdyt?

I have also included some fixes in {{{}CQLTester#getCreateIndexName{}}}, which was producing wrong index names in some cases.

bq. That's why I prefer to make the sync method the default and not naming it createIndexSync, createIndexWaitingForQueryable, or something like that. wdyt?

Agreed

Failures in {{VirtualTableFromInternodeTest}} look unrelated to SAI and also appear on the {{cep-7-sai}} branch at the moment.

The failures in {{StorageAttachedIndexDDLTest}} and {{o.a.c.index.sai.functional.SnapshotTest}} I couldn't reproduce locally on a first run...

So I made my first pass, and this patch looks really nice.

The only mystery seems to be what's going on w/ the flake in {{StorageAttachedIndexDDLTest}}. I have a couple thoughts in https://github.com/apache/cassandra/pull/2329/files#r1192835455

+1

Thanks for the review. Just started one last CI round:
||PR||CI||
|[cep-7-sai|https://github.com/apache/cassandra/pull/2329]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2897/workflows/3c3c18ca-7181-4dc1-9481-15efa4981d4f] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2897/workflows/10926bed-5024-4de6-b816-21285073b012]|

So far, the test failures are:

* {{InsertUpdateIfConditionTest#testMultiExistConditionOnSameRowClustering}} is CASSANDRA-18287
* {{SelectiveIntersectionTest#tracingIsCorrectlyReported}} doesn't seem related to the changes, but it might be worth to verify that it also exists on {{cep-7-sai}}. Running it [here|https://app.circleci.com/pipelines/github/adelapena/cassandra/2898/workflows/8c4deea8-fc65-475e-b7a0-7faaf8c3acaa].
* {{StorageAttachedIndexDDLTest#concurrentTruncateWithIndexBuilding}} can be [reproduced on {{cep-7-sai}}|https://app.circleci.com/pipelines/github/adelapena/cassandra/2894/workflows/71d2d463-2780-496d-a6fd-8c530768ae1b/jobs/44121/tests].
* {{TopPartitionsTest#testServiceTopPartitionsSingleTable}} is CASSANDRA-17798.


The error in {{SelectiveIntersectionTest#tracingIsCorrectlyReported}} can also be hit on {{{}cep-7-sai{}}}:
 * [https://app.circleci.com/pipelines/github/adelapena/cassandra/2899/workflows/f7c11d0a-2e9f-4f1f-864a-76ee1d6a49d4/jobs/44809/tests]
 * [https://app.circleci.com/pipelines/github/adelapena/cassandra/2899/workflows/19456975-cb1c-4375-96ee-24c051f25f7d/jobs/44806/tests]

So it seems this patch doesn't introduce any new flakies.

[~maedhroz] are we ready to merge this into the feature branch?

Yup, go for it!

Committed to {{cep-7-sai}} as [9970cf56848f0f6176560c0cf0ce704c9b9a8c05|https://github.com/apache/cassandra/commit/9970cf56848f0f6176560c0cf0ce704c9b9a8c05]. Thanks for the review.

