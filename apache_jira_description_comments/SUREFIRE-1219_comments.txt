Integration tests for SUREFIRE-1219.

[~sflanigan]
[~seanf]
As a short answer, the feature works with skipAfterFailureCount but simply ignores rerunFailingTestsCount.
This means the failed test immediately incremented skipAfterFailureCount counter but it is not incremented when rerun phase is taken into account. This is very important because that's the only way how to make both JUnit providers surefire-junit4 and surefire-junit47 working the same way and skipping the test phase eagerly.
I know what you want to achieve, that the test is passed in next re-run but does not increment the counter but that's not possible for surefire-junit47 and not for forkCount=0 or 1 and forkCount=2C. Forking the tests is changing the behavior but we want to keep it the same for all scenarios. The point of skipAfterFailureCount is to skip the test-set eagerly and fail the build asap without waiting for whole run of whole test-set. The users do not want to wait for long running tests only due to they fail. Maybe they have common root cause, due to last commit in SVN, thus no reason to wait for next 100 test until they fail. If we placed the function of skipAfterFailureCount at the end of test phase then this feature would not make much sense because it just did not stop the build eagerly. Yes it is a kind of limit in rerun feature on how far the rerun may go. That's the reason why you can see both failures/errors and skipped tests.

[~sflanigan]
[~seanf]
What can we do about this issue? Did you think about a proposal?

(Wow, I haven't used that [~seanf] account in years. I'd like to delete it, but that email address is dead and my password isn't accepted.)

[~tibor17], I certainly don't want to wait until all 100 tests have finished to implement fail-fast, or I wouldn't have submitted this bug!  In fact, it's when you are forced to use rerun that fail-fast becomes even more important. Otherwise your test times can double or triple when there is a common root cause breaking every test.

I'm sorry Tibor, but I'm finding your explanations very difficult to understand.

I don't understand what it is about forking and surefire-junit4/surefire-junit47 which prevents us from incrementing the counter only when a test has failed _all its runs_ (instead of each time there is a failure).

If we can only get the right behaviour in some cases, I think that's more important than having the same (wrong IMHO) behaviour in all cases.  Even if we risk running an extra couple of unnecessary tests due to concurrency issues when the fail counter is triggered, that's got to be better than running all the tests, or turning off the rerun feature.  But I haven't read that code, so I can't really suggest anything concrete.  I gather that this all has to do with the fact that there is currently a separate rerun phase after the main testing phase, so it might take a lot of refactoring to make the sort of change I have in mind.

In any case, what's implemented now is not good, because even though surefire-junit4 now in fact does run flaky tests multiple times, the XML file does not reflect this - it only reports the first run (a failure), and ignores the second run (which passed).  (This is inferred from the logging in my real project's tests.)

Not to mention the fact that the description here: https://maven.apache.org/surefire/maven-surefire-plugin/examples/rerun-failing-tests.html doesn't seem to describe what actually happens when both options are set (as I said in the original report above). 

I have had to disable the fail-fast feature to get flaky reruns to work as they should, which is a real shame because these two options would really complement each other.


[~sflanigan]
I know that it does not convince all parties but stable behavior is more important for me regardless whatever forking mechanism is set. Please see the code of junit4 and junit47-provider. The provider junit4 runs rerun per each class, however junit47 runs complete testset first and then the rerun.

