[~andras.piros] I'd like to take this up and I'm reviewing code in https://github.com/apache/oozie/blob/ff21b99072203aa7584ddd9a195a32daf97fa52e/core/src/main/java/org/apache/oozie/util/DateUtils.java#L145:L147 and it throws IllegalArgumentException rather than write a warning message, do you suggest to touch this part of the code or something else? The test also expects this exception, https://github.com/apache/oozie/blob/35db5b31fa0c69680de4fe12eabc6fde818b2c54/core/src/test/java/org/apache/oozie/util/TestDateUtils.java#L131:L134. Are you referring to some other piece of code? Aside from this I can edit the twiki https://github.com/apache/oozie/blob/0b336e50f6b731f852c273e2735621c52950bb27/docs/src/site/twiki/CoordinatorFunctionalSpec.twiki

[~dbist13] you're welcome.

I thought of something like this:
* update docs to emphasize {{Continent/City}} format
* as both {{BST}} and {{Europe/London}} are present in {{java.util.TimeZone#getAvailableIds}}, within {{DateUtils#getTimeZone}}:
** {{TRACE}} log the input {{tzId}}
** {{WARN}} log if {{tzId}} doesn't match following regex: {{^(Africa|America|Asia|Atlantic|Australia|Europe|Indian|Pacific)/.*}}, but let the calculations happen in exactly the same way as before

Just to clarify, it's not that timezones like BST are wrong, handled incorrectly, or unknown.  In fact, they are handled correctly - it's just that that's not typically what users actually want.  The {{Continent/City}} timezones are kind of like aliases for the abbreviation-style timezones, and these aliases change at the DST shift.  For example, {{America/Los_Angeles}} switches from PST to PDT at a DST shift.  That's usually what users want.  If you put {{PST}} directly, it's not going to shift as expected because it's always PST and never PDT.  In other words, the DST shifts are essentially implemented by having the {{Continent/City}} style timezones switch between the abbreviation-style timezones in the backend.  You can see this behavior by running a {{Continent/City}} Coordinator over a DST shift, and looking at the CLI output with the {{-timezone}} argument set to that {{Continent/City}}.  You'll see that at the DST shift, the abbreviation timezones in the output change (e.g. {{America/Los_Angeles}} will show PST and PDT).

[~andras.piros] & [~rkanter] I think confusion stems from the fact that oozie info -timezones actually suggets to use the short name. Should I also change the output of oozie info -timezones command to emphasize the Continent/City format?

{code}
$ oozie info -timezones
The format is "SHORT_NAME (ID)"
Give the ID to the -timezone argument
GMT offsets can also be used (e.g. GMT-07:00, GMT-0700, GMT+05:30, GMT+0530)
Available Time Zones:
      GMT (Africa/Abidjan)
      GMT (Africa/Accra)
      EAT (Africa/Addis_Ababa)
      CET (Africa/Algiers)
{code}

[~rkanter] & [~andras.piros] I made changes and attempted to add a test for messages to be logged. For some reason my test fails on verify step. let me know if it's overkill or not.

[~dbist13] can you please upload the patch w/ the failing test case.

I think I would just extend the second sentence on the CLI:
{noformat}
Give the ID (Continent/City) to the -timezone argument, and in the coordinator definitions
{noformat}


Testing JIRA OOZIE-2867

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 1 line(s) longer than 132 characters
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1{color} There are no new bugs found in total.
. {color:green}+1{color} There are no new bugs found in [client].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive].
. {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
. {color:green}+1{color} There are no new bugs found in [sharelib/spark].
. {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
. {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
. {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
. {color:green}+1{color} There are no new bugs found in [sharelib/pig].
. {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
. {color:green}+1{color} There are no new bugs found in [docs].
. {color:green}+1{color} There are no new bugs found in [server].
. {color:green}+1{color} There are no new bugs found in [core].
. {color:green}+1{color} There are no new bugs found in [hadooplibs/hadoop-utils-2].
. {color:green}+1{color} There are no new bugs found in [examples].
. {color:green}+1{color} There are no new bugs found in [tools].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 1935
.    Tests rerun: 15
.    Tests failed at first run: org.apache.oozie.jms.TestJMSJobEventListener,
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

. https://builds.apache.org/job/oozie-trunk-precommit-build/3802/

[~andras.piros] please review, added failing test back, as well as modified OozieCLI class and CoordinatorFunctionalSpec.twiki.

[~dbist13] thanks for the patch! Apart from the fact that {{docs/src/site/twiki/CoordinatorFunctionalSpec.twiki#L171}} is over 132 lines, Looks Good To Me.

[~andras.piros] I'll fix the line length, what about the failing test? Any suggestions there?

Testing JIRA OOZIE-2867

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 1 line(s) longer than 132 characters
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1{color} There are no new bugs found in total.
. {color:green}+1{color} There are no new bugs found in [server].
. {color:green}+1{color} There are no new bugs found in [client].
. {color:green}+1{color} There are no new bugs found in [core].
. {color:green}+1{color} There are no new bugs found in [docs].
. {color:green}+1{color} There are no new bugs found in [hadooplibs/hadoop-utils-2].
. {color:green}+1{color} There are no new bugs found in [tools].
. {color:green}+1{color} There are no new bugs found in [examples].
. {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
. {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
. {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
. {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
. {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
. {color:green}+1{color} There are no new bugs found in [sharelib/pig].
. {color:green}+1{color} There are no new bugs found in [sharelib/spark].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1935
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testGetTimeZoneWithLogging(org.apache.oozie.util.TestDateUtils)

.    Tests failing with errors:
.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

. https://builds.apache.org/job/oozie-trunk-precommit-build/3803/

Thanks for uploading a patch.

Looking into this some more, I think we should recommend _not_ using the three-letter ids instead of recommending the "Continent/City" ids.  There's a few issues:
# IIRC, the available timezones can vary based on JVM and locale.  That's why Oracle doesn't provide a list of timezones but instead suggests {{TimeZone.getAvailableIDs()}}.  
# There's some additional "continents" that the patch is missing: "Antarctica", "Canada", "Mexico", "US" (among others) which should work correctly.
# The previous issue ties into the next issue: "Continent/City" isn't really correct.  For instance, "Pacific" or "Indian" aren't continents.  I guess "Region/City" would be more accurate.  Unfortunately, Oracle doesn't give this syntax an official name as far as I can tell.  However, there's also some timezones that are simply country names with no city, like "Israel" or "Iceland".  So that's not really correct either.

The real problem is with the three-letter ids - all other ids are fine.  Besides the DST issue we saw, [the docs|https://docs.oracle.com/javase/7/docs/api/java/util/TimeZone.html] even say that some of them are deprecated because they're ambiguous.  e.g. CST is Central Standard Time and China Standard Time.

So I'd suggest these changes:
# Replace {{CONTINENT_PATTERN}} with something like {{THREE_LETTER_ID_PATTERN="[A-Z]{3}"}} and give the warning when it matches this; though make sure to still allow okay ones like "GMT" and "UTC".  And of course update the wording of the message and docs to match.
# Can you add a brief explanation to the docs on why we don't recommend using the three letter ids?  Basically that it won't handle DST shifts properly and maybe an example?  (e.g. "America/Los_Angeles" vs "PST" and "PDT")
# Updating the description text for {{oozie info -timezones}} is a good idea
# I don't think we really need the log trace line.  The timezone should be logged elsewhere already.
# Looks like there's a line that's too long

[~rkanter] I applied the recommended changes

Testing JIRA OOZIE-2867

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:red}-1{color} the patch contains 5 line(s) with trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1{color} There are no new bugs found in total.
. {color:green}+1{color} There are no new bugs found in [server].
. {color:green}+1{color} There are no new bugs found in [client].
. {color:green}+1{color} There are no new bugs found in [core].
. {color:green}+1{color} There are no new bugs found in [docs].
. {color:green}+1{color} There are no new bugs found in [hadooplibs/hadoop-utils-2].
. {color:green}+1{color} There are no new bugs found in [tools].
. {color:green}+1{color} There are no new bugs found in [examples].
. {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
. {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
. {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
. {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
. {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
. {color:green}+1{color} There are no new bugs found in [sharelib/pig].
. {color:green}+1{color} There are no new bugs found in [sharelib/spark].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1936
.    Tests failed: 1
.    Tests errors: 2

.    The patch failed the following testcases:

.      testUpdateConfForTimeLineServiceEnabled(org.apache.oozie.action.hadoop.TestJavaActionExecutor)

.    Tests failing with errors:
.      testNewUsingACLs(org.apache.oozie.util.TestZKUtilsWithSecurity)
.      testCheckAndSetACLs(org.apache.oozie.util.TestZKUtilsWithSecurity)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

. https://builds.apache.org/job/oozie-trunk-precommit-build/3823/

Testing JIRA OOZIE-2867

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1{color} There are no new bugs found in total.
. {color:green}+1{color} There are no new bugs found in [client].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive].
. {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
. {color:green}+1{color} There are no new bugs found in [sharelib/spark].
. {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
. {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
. {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
. {color:green}+1{color} There are no new bugs found in [sharelib/pig].
. {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
. {color:green}+1{color} There are no new bugs found in [docs].
. {color:green}+1{color} There are no new bugs found in [server].
. {color:green}+1{color} There are no new bugs found in [core].
. {color:green}+1{color} There are no new bugs found in [hadooplibs/hadoop-utils-2].
. {color:green}+1{color} There are no new bugs found in [examples].
. {color:green}+1{color} There are no new bugs found in [tools].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1936
.    Tests failed: 1
.    Tests errors: 2

.    The patch failed the following testcases:

.      testUpdateConfForTimeLineServiceEnabled(org.apache.oozie.action.hadoop.TestJavaActionExecutor)

.    Tests failing with errors:
.      testNewUsingACLs(org.apache.oozie.util.TestZKUtilsWithSecurity)
.      testCheckAndSetACLs(org.apache.oozie.util.TestZKUtilsWithSecurity)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

. https://builds.apache.org/job/oozie-trunk-precommit-build/3824/

testUpdateConfForTimeLineServiceEnabled is related to https://issues.apache.org/jira/browse/OOZIE-2902

the other two tests pass locally.

Some feedback:
# In {{DateUtils}}, we should use {{XLog.getLog(getClass());}} to get the logger
# The regex pattern is not correct; there's an extra space.  It will currently match something like {{A   }} (capital letter followed by three spaces) instead of {{ABC}}.
# On the previous point, we should have some unit tests to verify this functionality
# "preffered" should be spelled "preferred"
# I think the warning should mention that "GMT, UTC, or Region/City are preferred".  I know "Region/City" isn't exactly correct, but in light of something better, that's the best thing to call it.  Most users who hit this message are likely looking for a non-GMT/UTC timezone and the message doesn't currently help them for that.
# Instead of having an empty if statement block, let's reverse the logic and remove the else block
# Let's also try to positively recommend the "Region/City" format in the docs instead of only negatively recommending not using the three letter formats.
# I think we can omit the sentence about some of the IDs being deprecated

[~rkanter] thank you for the advice, I applied your recommendations though I'm stuck on the unit test. Do I just want to test for a logging event? Can you give me an example, I looked at TestXLog.java but I'm still not clear how to capture the warning from my code block.

Testing JIRA OOZIE-2867

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 1 line(s) longer than 132 characters
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 6 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1{color} There are no new bugs found in total.
. {color:green}+1{color} There are no new bugs found in [server].
. {color:green}+1{color} There are no new bugs found in [client].
. {color:green}+1{color} There are no new bugs found in [core].
. {color:green}+1{color} There are no new bugs found in [docs].
. {color:green}+1{color} There are no new bugs found in [tools].
. {color:green}+1{color} There are no new bugs found in [examples].
. {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
. {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
. {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
. {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
. {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
. {color:green}+1{color} There are no new bugs found in [sharelib/pig].
. {color:green}+1{color} There are no new bugs found in [sharelib/spark].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 1960
.    Tests rerun: 72
.    Tests failed at first run: org.apache.oozie.action.hadoop.TestJavaActionExecutor,org.apache.oozie.coord.input.logic.TestCoordInputLogicPush,org.apache.oozie.action.hadoop.TestLauncherAM,
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}. There is at least one warning, please check{color}

The full output of the test-patch run is available at

. https://builds.apache.org/job/oozie-trunk-precommit-build/3865/

# On the unit test, I wasn't thinking - you're right.  I think this can be done but it's really messy.  Instead, you could make {{THREE_LETTER_ID_PATTERN}} package private and label it {{\@VisibleForTesting}} and just have the unit test use it directly.  It would be nice to simply call the method, but I think this is the best compromise.
# I don't think we need the {{seleniumhq}} or {{com.opera}} artifacts, right?
# The nested if statement can be merged into one if statement:
{code:java}
if (m.matches() && !tzId.equalsIgnoreCase("UTC") && !tzId.equalsIgnoreCase("GMT")) {
   ...
{code}

[~rkanter] thanks for the tip with the label, I wasn't sure what you meant by accessing the THREE_LETTER_PATTERN and testing for it in JUnit and came up with my own idea though it requires a return type of String. Please review.

Testing JIRA OOZIE-2867

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 1 line(s) longer than 132 characters
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 6 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1{color} There are no new bugs found in total.
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 1969
.    Tests rerun: 79
.    Tests failed at first run: org.apache.oozie.action.hadoop.TestJavaActionExecutor,org.apache.oozie.jms.TestJMSJobEventListener,org.apache.oozie.action.hadoop.TestLauncherAM,
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}. There is at least one warning, please check{color}

The full output of the test-patch run is available at

. https://builds.apache.org/job/oozie-trunk-precommit-build/3915/

fixing the 132 characters lines warning, the rest of the failing tests were flaky and unrelated.

Testing JIRA OOZIE-2867

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 1 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1{color} There are no new bugs found in total.
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 1969
.    Tests rerun: 64
.    Tests failed at first run: org.apache.oozie.action.hadoop.TestJavaActionExecutor,org.apache.oozie.action.hadoop.TestLauncherAM,
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}. There is at least one warning, please check{color}

The full output of the test-patch run is available at

. https://builds.apache.org/job/oozie-trunk-precommit-build/3916/

ran the failing tests locally and they passed

That was a good idea with the test - better than what I was thinking :)
Here's some more feedback:
# Though given that the returned string is not used, you could have it return something simpler, like a boolean.  In fact, you could refactor {{handleNonDSTFormatTZNames}} to be a little simpler, and move the log message to the caller so the return value has a purpose.  Something like this:
{code:java}
...
if (!handleNonDSTFormatTZNames(tzId)) {
   LOG.warn("GMT, UTC or Region/City Timezone formats are preferred instead of " + tzId);
}
...
{code}
{code:java}
static String handleNonDSTFormatTZNames(String tzId) {
   ...
   Matcher m = THREE_LETTER_ID_PATTERN.matcher(tzId);
   return m.matches() && !tzId.equalsIgnoreCase("UTC") && !tzId.equalsIgnoreCase("GMT");
}
{code}
And then update the unit test to match
# Let's rename {{handleNonDSTFormatTZNames}} to something more straightforward like {{isThreeLetterTZName}}.

[~rkanter] thanks for the suggestion, this makes everything a lot simpler and easier to follow.

Testing JIRA OOZIE-2867

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 1 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1{color} There are no new bugs found in total.
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 959
.    Tests rerun: 3
.    Tests failed at first run: org.apache.oozie.action.hadoop.TestHdfsOperations,
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}. There is at least one warning, please check{color}

The full output of the test-patch run is available at

. https://builds.apache.org/job/oozie-trunk-precommit-build/3977/

test is unrelated, passes locally.

Testing JIRA OOZIE-2867

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 77 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1{color} There are no new bugs found in total.
. {color:green}+1{color} There are no new bugs found in [core].
. {color:green}+1{color} There are no new bugs found in [client].
. {color:green}+1{color} There are no new bugs found in [docs].
. {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
. {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
. {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
. {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
. {color:green}+1{color} There are no new bugs found in [sharelib/pig].
. {color:green}+1{color} There are no new bugs found in [sharelib/spark].
. {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
. {color:green}+1{color} There are no new bugs found in [examples].
. {color:green}+1{color} There are no new bugs found in [tools].
. {color:green}+1{color} There are no new bugs found in [server].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 2049
.    Tests failed: 8
.    Tests errors: 2

.    The patch failed the following testcases:

.      testMain(org.apache.oozie.action.hadoop.TestHiveMain)
.      testPig_withNullExternalID(org.apache.oozie.action.hadoop.TestPigMain)
.      testEmbeddedPigWithinPython(org.apache.oozie.action.hadoop.TestPigMain)
.      testPigScript(org.apache.oozie.action.hadoop.TestPigMain)
.      testImportTablesOverflowBatchSize(org.apache.oozie.tools.TestDBLoadDump)
.      testImportInvalidDataLeavesTablesEmpty(org.apache.oozie.tools.TestDBLoadDump)
.      testImportToNonEmptyTablesCausesPrematureExit(org.apache.oozie.tools.TestDBLoadDump)
.      testImportedDBIsExportedCorrectly(org.apache.oozie.tools.TestDBLoadDump)

.    Tests failing with errors:
.      testAddXIncludeFromReader(org.apache.oozie.util.TestXConfiguration)
.      testAddXIncludeFromStream(org.apache.oozie.util.TestXConfiguration)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}. There is at least one warning, please check{color}

The full output of the test-patch run is available at

. https://builds.apache.org/job/PreCommit-OOZIE-Build/156/

[~gezapeti] [~rkanter] all tests pass locally. Can we get this into beta 5.0?

[~dbist13] can you please rebase the patch to current {{master}}? Thanks!

PreCommit-OOZIE-Build started



Testing JIRA OOZIE-2867

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1{color} There are no new bugs found in total.
. {color:green}+1{color} There are no new bugs found in [examples].
. {color:green}+1{color} There are no new bugs found in [webapp].
. {color:green}+1{color} There are no new bugs found in [core].
. {color:green}+1{color} There are no new bugs found in [tools].
. {color:green}+1{color} There are no new bugs found in [server].
. {color:green}+1{color} There are no new bugs found in [docs].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
. {color:green}+1{color} There are no new bugs found in [sharelib/pig].
. {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive].
. {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
. {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
. {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
. {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
. {color:green}+1{color} There are no new bugs found in [sharelib/spark].
. {color:green}+1{color} There are no new bugs found in [client].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 2134
.    {color:orange}Tests failed at first run:{color}
TestCoordMaterializeTriggerService#testCoordMaterializeTriggerService3
.    For the complete list of flaky tests, see TEST-SUMMARY-FULL files.
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

. https://builds.apache.org/job/PreCommit-OOZIE-Build/549/



Thanks for the contribution [~dbist13] and for the reviews [~rkanter]! +1

Committed to {{master}}.

Closing issue; Oozie 5.1.0 is released.

The logic for the error message is the wrong way around. It prints warnings for all valid timezones now.

See OOZIE-3608

