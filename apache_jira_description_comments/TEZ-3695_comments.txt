Looks like the test has an inherent race in it:
{code}
    List<Integer> list = new ArrayList<>();
    Future<?> f1 = service.submit(new Wait(list));
    List<Future<?>> futures = new ArrayList<>();
    for (int i = 0; i < 10; ++i) {
      futures.add(service.submit(new Appender<Integer>(list, i)));
    }

    // This shutdown does not prevent already submitted tasks from completing.
    service.shutdown();

    // Until we notify nothing moves forward.
    Assert.assertEquals(0, list.size());
    _notify(list);
    f1.get();
{code}

The code assumes that the executor will be fast enough to get to the {{wait}} in the {{Wait}} code before the main test code tries to do the {{notify}} to wake it up.  However if the executor is a little slower then the main code will trigger the {{notify}} _before_ any code is waiting and then we end up with an indefinite wait and test timeout.

The test should be using something like a {{CountdownLatch}} to coordinate between the {{Wait}} code and main test code.

{{testAwaitTermination}} looks like it could have similar racing issues since it has the same assumptions when it calls {{notify}}, but that test has a 100 msec timer hack that would make it less likely in practice.  Again a {{CountdownLatch}} would make this faster and more deterministic.

Patch that uses a latch instead of the racy {{wait}}/{{notify}} pair.  I also increased the test timeouts to reduce the chance of sporadic test timeouts if the tests run on a slow machine or VM.
 

{color:green}+1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12864771/TEZ-3695.001.patch
  against master revision bb4fb64.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/2390//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/2390//console

This message is automatically generated.

+1 for the changes. Thank [~jlowe] for finding and fixing this issue. Sorry for committing a flaky test case.

Thanks for the review, Harish!  I committed this to master.

