when launching from maven command line, there are only 4 test in error, all seems to be due to bad lien ending:
{noformat}
Results :

Failed tests: 
org.apache.camel.component.dataset.FileDataSetProducerTest.testDefaultListDataSet(org.apache.camel.component.dataset.FileDataSetProducerTest)
  Run 1: FileDataSetProducerTest>TestSupport.runBare:58->testDefaultListDataSet:41->ContextTestSupport.assertMockEndpointsSatisfied:343 dataset://foo Failed due to caught exception: java.lang.AssertionError: message body does not match. Expected: Line 1
Line 2
Line 3
Line 4
Line 5
Line 6
Line 7
Line 8
Line 9
Line 10
 but was: Line 1
Line 2
Line 3
Line 4
Line 5
Line 6
Line 7
Line 8
Line 9
Line 10
 on Exchange[ID-DESKTOP-9NT300B-53415-1479998461578-705-2] with headers: {breadcrumbId=ID-DESKTOP-9NT300B-53415-1479998461578-705-1, CamelDataSetIndex=0}
  Run 2: FileDataSetProducerTest>TestSupport.runBare:58->testDefaultListDataSet:41->ContextTestSupport.assertMockEndpointsSatisfied:343 dataset://foo Failed due to caught exception: java.lang.AssertionError: message body does not match. Expected: Line 1
Line 2
Line 3
Line 4
Line 5
Line 6
Line 7
Line 8
Line 9
Line 10
 but was: Line 1
Line 2
Line 3
Line 4
Line 5
Line 6
Line 7
Line 8
Line 9
Line 10
 on Exchange[ID-DESKTOP-9NT300B-53415-1479998461578-707-2] with headers: {breadcrumbId=ID-DESKTOP-9NT300B-53415-1479998461578-707-1, CamelDataSetIndex=0}
  Run 3: FileDataSetProducerTest>TestSupport.runBare:58->testDefaultListDataSet:41->ContextTestSupport.assertMockEndpointsSatisfied:343 dataset://foo Failed due to caught exception: java.lang.AssertionError: message body does not match. Expected: Line 1
Line 2
Line 3
Line 4
Line 5
Line 6
Line 7
Line 8
Line 9
Line 10
 but was: Line 1
Line 2
Line 3
Line 4
Line 5
Line 6
Line 7
Line 8
Line 9
Line 10
 on Exchange[ID-DESKTOP-9NT300B-53415-1479998461578-708-2] with headers: {breadcrumbId=ID-DESKTOP-9NT300B-53415-1479998461578-708-1, CamelDataSetIndex=0}

org.apache.camel.component.dataset.FileDataSetProducerTest.testDefaultListDataSetWithSizeGreaterThanListSize(org.apache.camel.component.dataset.FileDataSetProducerTest)
  Run 1: FileDataSetProducerTest>TestSupport.runBare:58->testDefaultListDataSetWithSizeGreaterThanListSize:54->ContextTestSupport.assertMockEndpointsSatisfied:343 dataset://foo Failed due to caught exception: java.lang.AssertionError: message body does not match. Expected: Line 1
Line 2
Line 3
Line 4
Line 5
Line 6
Line 7
Line 8
Line 9
Line 10
 but was: Line 1
Line 2
Line 3
Line 4
Line 5
Line 6
Line 7
Line 8
Line 9
Line 10
 on Exchange[ID-DESKTOP-9NT300B-53415-1479998461578-704-2] with headers: {breadcrumbId=ID-DESKTOP-9NT300B-53415-1479998461578-704-1, CamelDataSetIndex=0}
  Run 2: FileDataSetProducerTest>TestSupport.runBare:58->testDefaultListDataSetWithSizeGreaterThanListSize:54->ContextTestSupport.assertMockEndpointsSatisfied:343 dataset://foo Failed due to caught exception: java.lang.AssertionError: message body does not match. Expected: Line 1
Line 2
Line 3
Line 4
Line 5
Line 6
Line 7
Line 8
Line 9
Line 10
 but was: Line 1
Line 2
Line 3
Line 4
Line 5
Line 6
Line 7
Line 8
Line 9
Line 10
 on Exchange[ID-DESKTOP-9NT300B-53415-1479998461578-706-2] with headers: {breadcrumbId=ID-DESKTOP-9NT300B-53415-1479998461578-706-1, CamelDataSetIndex=0}
  Run 3: FileDataSetProducerTest>TestSupport.runBare:58->testDefaultListDataSetWithSizeGreaterThanListSize:54->ContextTestSupport.assertMockEndpointsSatisfied:343 dataset://foo Failed due to caught exception: java.lang.AssertionError: message body does not match. Expected: Line 1
Line 2
Line 3
Line 4
Line 5
Line 6
Line 7
Line 8
Line 9
Line 10
 but was: Line 1
Line 2
Line 3
Line 4
Line 5
Line 6
Line 7
Line 8
Line 9
Line 10
 on Exchange[ID-DESKTOP-9NT300B-53415-1479998461578-709-2] with headers: {breadcrumbId=ID-DESKTOP-9NT300B-53415-1479998461578-709-1, CamelDataSetIndex=0}

org.apache.camel.component.dataset.FileDataSetProducerWithSplitTest.testDefaultListDataSet(org.apache.camel.component.dataset.FileDataSetProducerWithSplitTest)
  Run 1: FileDataSetProducerWithSplitTest>TestSupport.runBare:58->setUp:62 Unexpected DataSet size expected:<10> but was:<1>
  Run 2: FileDataSetProducerWithSplitTest>TestSupport.runBare:58->setUp:62 Unexpected DataSet size expected:<10> but was:<1>
  Run 3: FileDataSetProducerWithSplitTest>TestSupport.runBare:58->setUp:62 Unexpected DataSet size expected:<10> but was:<1>

org.apache.camel.component.dataset.FileDataSetProducerWithSplitTest.testDefaultListDataSetWithSizeGreaterThanListSize(org.apache.camel.component.dataset.FileDataSetProducerWithSplitTest)
  Run 1: FileDataSetProducerWithSplitTest>TestSupport.runBare:58->setUp:62 Unexpected DataSet size expected:<10> but was:<1>
  Run 2: FileDataSetProducerWithSplitTest>TestSupport.runBare:58->setUp:62 Unexpected DataSet size expected:<10> but was:<1>
  Run 3: FileDataSetProducerWithSplitTest>TestSupport.runBare:58->setUp:62 Unexpected DataSet size expected:<10> but was:<1>

Flaked tests: 
org.apache.camel.management.ManagedRouteStopTest.testStopRoute(org.apache.camel.management.ManagedRouteStopTest)
  Run 1: ManagedRouteStopTest>TestSupport.runBare:58->testStopRoute:65
  Run 2: ManagedRouteStopTest>TestSupport.runBare:58->testStopRoute:65
  Run 3: PASS


Tests run: 5784, Failures: 4, Errors: 0, Skipped: 4, Flakes: 1
{noformat}

GitHub user apupier opened a pull request:

    https://github.com/apache/camel/pull/1311

    CAMEL-10515 - Fix test on Windows

    - depending on Git strategy, line endings can be converted to CRLF (the
    default windows EOL) or kept to LF (the default Linux EOL and how files
    are stored on the git repository for Camel project)
    - test changed to create files in the test in order to use the system
    EOL and don't make assumptions on the git strategy

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apupier/camel CAMEL-10515-FixEOLIssuesInTests

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1311.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1311
    
----
commit 79d862fdd590a5ca160f42220d1f41df1018c059
Author: Aurelien Pupier <apupier@redhat.com>
Date:   2016-11-25T09:03:48Z

    CAMEL-10515 - Fix test on Windows
    
    - depending on Git strategy, line endings can be converted to CRLF (the
    default windows EOL) or kept to LF (the default Linux EOL and how files
    are stored on the git repository for Camel project)
    - test changed to create files in the test in order to use the system
    EOL and don't make assumptions on the git strategy

----


Ah good can you look at those 4 tests with line terminator issues. There is some other unit tests in camel-core that works with both windows and linux.

The camel-test kit has a LS you can use for line break, eg
https://github.com/apache/camel/blob/master/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpChangedReadLockTest.java#L63

Github user apupier closed the pull request at:

    https://github.com/apache/camel/pull/1311


The other failing tests are failing when launching as JUnit test in Eclipse.

Several of them are searching for some html files that doesn't exist in my workspace, for instance with org.apache.camel.component.dataset.DataSetComponentConfigurationAndDocumentationTest.testComponentDocumentation() it is searching for
org/apache/camel/component/dataset/dataset.html

Are these files generated? How?

Yes they are generated.

The testing of Camel is from command line so these tests are okay. You can close this ticket

what??
you are really working always by launching from the command line? This is such a loose of time...

Still keep this issue open, the test reported as flaky the first time was reported as failed 3 times in a row:
 this one:
{noformat}
Flaked tests: 
org.apache.camel.management.ManagedRouteStopTest.testStopRoute(org.apache.camel.management.ManagedRouteStopTest)
  Run 1: ManagedRouteStopTest>TestSupport.runBare:58->testStopRoute:65
  Run 2: ManagedRouteStopTest>TestSupport.runBare:58->testStopRoute:65
  Run 3: PASS
{noformat}

No but the command line is what CI and releases are using. We do not support whatever IDE end user use and how they have set it up.



The flaky tests is when you have a fast computer so the uptime is returned as 0. I am adding a slight delay to improve these tests.

