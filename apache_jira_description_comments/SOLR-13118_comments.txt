In the attached patch, I've remedied this (in {{TestSimTriggerIntegration.testNodeLostTriggerRestoreState}} ) via the following (non-test) API changes:
 * {{SimCloudManager}} now exposes a public {{getOverseerTriggerThread()}} method â€“ allowing Sim tests the same level of accesss to the OverseerTriggerThread/ScheduledTriggers that non-sim tests can get via the Overseer ode (by way of it's JettyRunner->CoreContainer)
 * {{ScheduledTriggers}} now exposes a public (lucene.internal for tests only) method to {{getTrigger(String name)}}
 * {{TriggerBase}} has been refactored to expose a public (lucene.internal for tests only) method to get a {{deepCopyState()}}

With these changes, the test(s) can now use the following flow...
 * register an initial trigger w/an effectively infinite {{waitFor}} configuration
 * create the nodeAdd/nodeLost situation
 * reach into the ScheduledTriggers in a {{TimeOut.waitFor(...)}} to inspect the state of the trigger being tests to know once it's run() and detected the situation/event and started tracking it
 ** but not yet executed any actions because of the {{waitFor}} property
 * update the trigger w/ {{waitFor: 0s}}
 * use the latches & event queues of the "mock" trigger actions to confirm that the event state information gets preserved from one trigger instance to the next, and ultimately process()ed

----

Unless there are any concerns with this approach, I'll try to update the other similarly problematic tests ASAP...
 * TestSimTriggerIntegration.testNodeAddedTriggerRestoreState
 * NodeLostTriggerIntegrationTest.testNodeLostTriggerRestoreState
 * NodeAddedTriggerIntegrationTest.testNodeAddedTriggerRestoreState

(I'd also like to look into re-writing TestSimTriggerIntegration.testEventFromRestoredState to use an effectively infinit {{waitFor}} and the new direct state introspection before & after restarting the overseer rather then the current (delicately problematic) precise sleep times ... but that's a lower priority at the moment that i haven't fully thought through)

This looks good - actually checking the internal state allows us to avoid depending on unreliable timeouts. Some comments:
* I like the idea of putting {{assertAutoScalingRequest}} in {{CloudTestUtils}} - the same pattern exists also in many non-simulated tests.
* some typos in comments: "since we know the nodeLost even has been detected" etc.

Commit 5a513fab8345cd0397435e7ce830268cd3763651 in lucene-solr's branch refs/heads/master from Chris M. Hostetter
[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5a513fa ]

SOLR-13118: Fix various nodeAdded/nodeLost trigger (integration) tests related to restoriung state

This includes some cleanup and refactoring of unrelated test methods in the same classes to use new helper methods


Pushed to master ... will aim to backport soon unless something suprising happens with jenkins.

Commit 5a60c3e0db26ec3dba119d6a6a44facf2089c77d in lucene-solr's branch refs/heads/branch_8x from Chris M. Hostetter
[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5a60c3e ]

SOLR-13118: Fix various nodeAdded/nodeLost trigger (integration) tests related to restoriung state

This includes some cleanup and refactoring of unrelated test methods in the same classes to use new helper methods

(cherry picked from commit 5a513fab8345cd0397435e7ce830268cd3763651)


Commit 612a1d029f69c268761306891c80e405341979e7 in lucene-solr's branch refs/heads/branch_7x from Chris M. Hostetter
[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=612a1d0 ]

SOLR-13118: Fix various nodeAdded/nodeLost trigger (integration) tests related to restoriung state

This includes some cleanup and refactoring of unrelated test methods in the same classes to use new helper methods

(cherry picked from commit 5a513fab8345cd0397435e7ce830268cd3763651)

Conflicts:
	solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimSolrCloudTestCase.java


this is looking pretty good

