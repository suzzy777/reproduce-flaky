While reworking the tests for recoverable and simulated unrecoverable failures with the updated api, I noticed that there are some problems in the test cases I previously wrote.  There will be some significant changes with the tests in this patch as well.

Oddly I have a case where splitting was not happening in a particular test case but is in another.  

bq. This is an RPC change, so it would be really good to get this api right before the final 0.92 goes out.

Raise to blocker, either fix or undo for release. +1 on fix.

Ends up that I was splitting in the wrong place and splitting an empty region returns scary error messages when it should say return an innocuous one.

Review here: https://reviews.apache.org/r/2730/

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12502534/0001-HBASE-4740-bulkload-HBASE-4552-API-can-t-tell-if-err.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 4 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/178//console

This message is automatically generated.

Is this right Jon, setting maxRetries to 0 by default?

{code}
+        int maxRetries = cfg.getInt("hbase.bulkload.retries.number", 0);
{code}

This is a little odd looking but thats it (could let auto-boxing take care of the boolean to Boolean):

{code}
+      public Boolean call() throws Exception {
{code}

This code looks a lot like whats in the populateTable method:

{code}
     // create HFiles for different column families
-    Path bulk2 = new Path(dir, "bulkload2");
-    buildHFiles(fs, bulk2, 2); // all values are '2'
-    lih2.doBulkLoad(bulk2, t);
+    Path dir = util.getDataTestDir(table);
+    FileSystem fs = util.getTestFileSystem();
+    Path bulk = new Path(dir, "bulkload2");
+    HTable t = new HTable(util.getConfiguration(), Bytes.toBytes(table));
+    buildHFiles(fs, bulk, 2); // all values are '2'
+    lih2.doBulkLoad(bulk, t);
{code}

Code dup?

Patch seems fine.  Did you try it on a cluster Jon?

@Stack

Yeah, 0 is actually the original behavior in the pre-HBASE-4552 version it I think would just eat exceptions and bail out without completing.  It is more complicated because of bulk atomicity.

Will update boolean if it works --  there is some template checking in another place so assumed it needed boxed type.

The difference is that the version uses a different LoadIncrementalHandlers instance.  I'll refactor to exclude that portion and require it in the test.

I tried the previous version with a small data set on psuedo-dist cluster and live cluster.  For this particular patch I tried this one by looping the relevant unit tests 100 times and seeing that they passed all the time.  I haven't tested this exact version on real cluster. 



@Jon Sounds good.  Was wondering if you think this issue will be done soon (test and Ted's comments?) -- its only blocker on 0.92 currently (I'm sure that will change -- we'll soon have a million blockers -- but hopefully can get an RC up before the million blockers come in).  Good on you Jon.

Updated patch addressed comments in review and on jira.

@Stack I've updated the patch -- if this is insufficient, I'm probably going to be spotty for a week or so.

Patch testing v2.

These tests passed based on patch v2:
{code}
 1060  mt -Dtest=TestLoadIncrementalHFilesSplitRecovery
 1061  mt -Dtest=TestLoadIncrementalHFiles
  802  mt -Dtest=TestHRegionServerBulkLoad
  803  mt -Dtest=TestHFileOutputFormat
{code}

+1 on patch v2.

Patch v3 is same as v2.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12502640/4740.v3
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 javadoc.  The javadoc tool appears to have generated -164 warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 48 new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

     -1 core tests.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.thrift2.TestThriftHBaseServiceHandler
                  org.apache.hadoop.hbase.master.TestDistributedLogSplitting
                  org.apache.hadoop.hbase.master.TestMasterFailover
                  org.apache.hadoop.hbase.coprocessor.TestRegionServerCoprocessorExceptionWithRemove

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/192//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/192//artifact/trunk/patchprocess/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/192//console

This message is automatically generated.

Some test failures were due to 'Too many open files'

I couldn't reproduce TestThriftHBaseServiceHandler-related failures:
{code}
Running org.apache.hadoop.hbase.thrift2.TestThriftHBaseServiceHandler
Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 15.595 sec

Results :

Tests run: 11, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 21.351s
[INFO] Finished at: Sun Nov 06 05:56:09 PST 2011
{code}

Integrated to 0.92 and TRUNK.

Thanks for the patch Jonathan.

Thanks for the review Stack.

Integrated in HBase-0.92 #119 (See [https://builds.apache.org/job/HBase-0.92/119/])
    HBASE-4740  [bulk load] the HBASE-4552 API can't tell if errors on region server are recoverable
               (Jonathan Hsieh)

tedyu : 
Files : 
* /hbase/branches/0.92/CHANGES.txt
* /hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/ipc/HRegionInterface.java
* /hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/mapreduce/LoadIncrementalHFiles.java
* /hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
* /hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
* /hbase/branches/0.92/src/main/resources/hbase-default.xml
* /hbase/branches/0.92/src/test/java/org/apache/hadoop/hbase/mapreduce/TestLoadIncrementalHFilesSplitRecovery.java


Can we close this now Ted?

I think the test failure in HBase-0.92 build 119 shouldn't be caused by this JIRA.
We can resolve this.

Integrated in HBase-TRUNK #2420 (See [https://builds.apache.org/job/HBase-TRUNK/2420/])
    HBASE-4740  [bulk load] the HBASE-4552 API can't tell if errors on region server are recoverable
               (Jonathan Hsieh)

tedyu : 
Files : 
* /hbase/trunk/CHANGES.txt
* /hbase/trunk/src/main/java/org/apache/hadoop/hbase/ipc/HRegionInterface.java
* /hbase/trunk/src/main/java/org/apache/hadoop/hbase/mapreduce/LoadIncrementalHFiles.java
* /hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
* /hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
* /hbase/trunk/src/main/resources/hbase-default.xml
* /hbase/trunk/src/test/java/org/apache/hadoop/hbase/mapreduce/TestLoadIncrementalHFilesSplitRecovery.java


Committed to trunk and 0.92 branch.  Thanks for the patch Jon.

This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).

