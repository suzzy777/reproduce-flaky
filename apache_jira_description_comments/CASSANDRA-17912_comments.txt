These are the arguments used in Jenkins (--execute-upgrade-tests-only --upgrade-target-version-only --upgrade-version-selection all) - [https://github.com/apache/cassandra-builds/blob/trunk/build-scripts/cassandra-dtest-pytest.sh#L91]

But we set only --execute-upgrade-tests in CircleCI - https://github.com/apache/cassandra/blob/cassandra-3.0/.circleci/config.yml#L787

I just verified that, as expected, 4.0, 4.1 and trunk CircleCI config matches Jenkins.

Fix for [3.0|https://github.com/ekaterinadimitrova2/cassandra/commit/f99cff0621d00a86992dddecd9b6046b72086170]

Testing it [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1939/workflows/c06f6aeb-48b0-42d5-8952-af814341e782]

If things look good I will push it to 3.11 too. 

All tests finished green. Unfortunately, I didn't find in Jenkins a final number of test runs to compare. I manually inspected what do we have in artifacts that we have representatives of the classes we expect for this version. Also, checked that the latest flaky tests were run, they just finished this time successfully by chance. 

Added a [patch|https://github.com/ekaterinadimitrova2/cassandra/commit/7f4d236dacffa9a587eb8b783b118869a6f0e5be], started testing for 3.11 - [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1940/workflows/b822932d-e171-4490-b794-f1d35deee5d9]

 

3.11 still runs some tests that we shouldn't see {_}I think{_}... 

Also, I realized I have to update probably the repeated upgrade tests config too. It will be the same command just at one more place... 

I suspect the 3.11 might be some weird Circle issue as other branches were running some old stuff which I am surprised to see here as it is a brand new branch?... with the same arguments Jenkins skips those tests... it's weird, I will have to dig more into this.

On a second pass and also while reading into the upgrade_manifest and CASSANDRA-16328, it seems we are running the right tests. Now I think the issue is Jenkins not running udtfix tests but I think why they are skipped can be tackled separately?

I think this is ready for review, to summarize:

-[3.0 patch|https://github.com/ekaterinadimitrova2/cassandra/commit/f99cff0621d00a86992dddecd9b6046b72086170] [CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1939/workflows/c06f6aeb-48b0-42d5-8952-af814341e782]

-[3.11 patch|https://github.com/ekaterinadimitrova2/cassandra/commit/7f4d236dacffa9a587eb8b783b118869a6f0e5be]  [CI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1940/workflows/b822932d-e171-4490-b794-f1d35deee5d9]

[~mck] , [~dcapwell] , anyone of you for review? 

I can open a follow up ticket for Jenkins. 

------

And some good news - the 3.0 upgrade tests run in Circle CI was brought from 1 hour 25 minutes to 47 minutes. 

------

Tried to run those locally and I am puzzled:
{code:java}
$pytest --execute-upgrade-tests-only --upgrade-target-version-only --upgrade-version-selection all --log-level="DEBUG" --cassandra-dir=........./cassandra upgrade_udtfix_test.py -rxXs
============================================================================================================ test session starts =============================================================================================================
platform darwin -- Python 3.8.13, pytest-3.6.4, py-1.9.0, pluggy-0.7.1
rootdir: /Users/ekaterina.dimitri/IdeaProjects/cassandra-dtest-d, inifile: pytest.ini
plugins: flaky-3.7.0, timeout-1.4.2, repeat-0.9.1
timeout: 900.0s
timeout method: signal
timeout func_only: False
collected 20 items                                                                                                                                                                                                                           
 
upgrade_udtfix_test.py ssssssssssssssssssss                                                                                                                                                                                            [100%]
========================================================================================================== short test summary info ===========================================================================================================
SKIP [16] upgrade_tests/upgrade_udtfix_test.py: test not applicable to env.
SKIP [2] /Users/ekaterina.dimitri/IdeaProjects/cassandra-dtest-d/conftest.py: 3.0.27 < 3.11.6
SKIP [2] /Users/ekaterina.dimitri/IdeaProjects/cassandra-dtest-d/conftest.py: 3.0.28 < 3.11.6
 
========================================================================================================= 20 skipped in 4.66 seconds =========================================================================================================
{code}
This is with plain cassandra-3.11 and also with the patched branch. Double-checked the build.xml version and it is correct...

From the test class:
{code:java}
 for path in build_upgrade_pairs():
    gen_class_name = UpgradeUDTFixTest.__name__ + '_' + path.name
    assert gen_class_name not in globals()
    spec = {'UPGRADE_PATH': path,
            '__test__': True}

    start_family = spec['UPGRADE_PATH'].starting_meta.family
    upgrade_family = spec['UPGRADE_PATH'].upgrade_meta.family
    start_family_applies = start_family == CASSANDRA_3_0
    upgrade_applies_to_env = RUN_STATIC_UPGRADE_MATRIX or start_family_applies
    cls = type(gen_class_name, (UpgradeUDTFixTest,), spec)
    if not upgrade_applies_to_env:
        add_skip(cls, 'test not applicable to env.')
    globals()[gen_class_name] = cls
{code}
Anyway, I think those should be run for 3.11? I can add more info to a follow up ticket for Jenkins. In a quick check I didn't see us setting for example RUN_STATIC_UPGRADE_MATRIX neither in CircleCI, nor in Jenkins. (I was trying to find out where the difference came from). I am not sure also how the version check can fail locally but not in CircleCI? And why at all fails...

Alright, seems like we [set RUN_STATIC_UPGRADE_MATRIX|https://github.com/apache/cassandra/blob/cassandra-3.0/.circleci/config.yml#L752] in CircleCI config but I do not see it set anywhere in cassandra_builds?

Also, we set it in CircleCI config only for 3.0 and 3.11. 

Alright, seems like the answer is in CASSANDRA-16328 which removed setting the RUN_STATIC_UPGRADE_MATRIX but only 4.0+

[~mck] , [~dcapwell] , [~marcuse] , any thoughts here?

RUN_STATIC_UPGRADE_MATRIX is definitely the culprit and runs all test combinations, valid or not.

Indeed. I will remove it from 3.0 and 3.11 too and push a new patch soon

So I pushed that change to 3.0 and 3.11 but still something doesn't click. 

If we look in butler there are two tests consistently failing that I cannot find in the CircleCI artifacts.

Then I check number of tests by looking into  [this Jenkins table of results|https://jenkins-cm4.apache.org/job/Cassandra-3.0/296/testReport/] which lists some numbers I sum up and the Circle numbers and they also don't click...

Something fishy is going on... I will keep on looking

[3.0 patch|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:17912-3.0?expand=1] - [CI run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1971/workflows/8eb3b149-a84b-4f76-a061-e15df972492e/jobs/15600/tests]

[3.11 patch|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:17912-3.11?expand=1] - [CI run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1972/workflows/f3615560-40d8-42a3-b0ff-f0c108409d25/jobs/15599]

I started doubting everything so I double-checked the 4.1 numbers -  they match in CircleCI and Jenkins

We provide non-default [test_filter_pattern|https://github.com/apache/cassandra/blob/cassandra-3.0/.circleci/config-2_1.yml#L456] in 3.0 and 3.11 which identifies only the tests under upgrade_tests dir.

Without applying it, the way we do in 4.0+, we get additionally below tests in the list of tests to run:
{code:java}
+upgrade_crc_check_chance_test.py::TestCrcCheckChanceUpgrade::test_crc_check_chance_upgrade
+upgrade_internal_auth_test.py::TestAuthUpgrade::test_upgrade_to_22
+upgrade_internal_auth_test.py::TestAuthUpgrade::test_upgrade_to_30
+upgrade_internal_auth_test.py::TestAuthUpgrade::test_upgrade_legacy_table
{code}
Jenkins 3252 vs 3299 Circle

Still the calculation difference is more than only 4 tests... if I am looking at the right numbers in Jenkins

I don't see us doing [that filtering|https://github.com/apache/cassandra-builds/blob/trunk/build-scripts/cassandra-dtest-pytest.sh#L99] in Jenkins and it seems to me that we shouldn't do it, the way it is in 4.0+

I will continue on Monday

 

Alright, I think I figured it out. 

This is the last 3.0 [patch|https://github.com/apache/cassandra/compare/cassandra-3.0...ekaterinadimitrova2:cassandra:17912-3.0?expand=1] and [run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1971/workflows/8eb3b149-a84b-4f76-a061-e15df972492e/jobs/15600]

Meaningful changes done: 
 * removed extra_env_args: 'RUN_STATIC_UPGRADE_MATRIX=true' (making us run all possible tests, this one should be removed in another ticket CASSANDRA-16348 directly from the DTEST repo) and tests_filter_pattern: '^upgrade_tests' (which was filtering to run only tests from the upgrade_tests dir but we have some also in the main dir)
 * changed to run the tests with DEBUG and not INFO, same we do in Jenkins and other branches. Easier for debugging 
 * propagated the changes to MIDRES and HIGHRES too and recreated the patch files even if they were still applicable. Otherwise we get confusing warnings. 

It seems in Jenkins some tests were not run, we just see a diff mark in the report and this constitutes for the 50 that I was wondering about.

Now I didn't find a Jenkins diff definition. I do not see so far any error messages or something. But I identified for example test_composite_index_collections being one of the tests that didn't run in the last #256 3.0 run in Jenkins. I do not understand why it was missed. It seems this diff variates - we see + and -

I can see it in my Circle CI run

If we agree here, I will propagate the last changes to 3.11 and push run there too.

[~mck] , [~dcapwell] can you review, please? 

+1

For the record I think we are ready with this one but I am waiting for final rebase and CI runs of both 3.0 and 3.11 on CASSANDRA-17987.

There will be some merge conflicts to solve and it will be easier to do it in the smaller patch here for me than for [~adelapena] there and he is almost ready :) 

[~e.dimitrova] thanks for waiting on CASSANDRA-17987. Indeed it's easier to rebase the smaller patch over bigger one. It's very kind of you to wait for that one, please let me know if I can help with the rebase of this one :)

{quote}  It's very kind of you to wait for that one, please let me know if I can help with the rebase of this one 
{quote}
No worries, I know the pain

{quote} Indeed it's easier to rebase the smaller patch over bigger one. 
{quote}
Thanks for offering, you already help a lot. I can quickly deal with this when the time comes. :)

Just committed CASSANDRA-17987.

Thank you for the ping [~adelapena] !

Patch rebased and CI started for 3.0 and 3.11. 

The other branches do not need CI as the only change will be to add the -a flag in the CircleCI ReadMe.

Pending commit on CI results and final confirmation with what we see in Jenkins (plus squash of the three commits as the rebase and updates required separate steps):
||Patch||Upgrade tests running||
|[3.0|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:17912-3.0-2?expand=1]|[CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2021/workflows/3dcf7f43-1ba1-40e1-b89e-0113837489eb]|
|[3.11|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:17912-3.11]|[CircleCI|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2020/workflows/70412fe4-f058-4435-aba4-b28d14eb258a]|
|[4.0|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:17912-4.0?expand=1]| |
|[4.1|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:17912-4.1?expand=1]| |
|[trunk|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:trunk-17912?expand=1]| |

* 3.0 - 3304 tests have been run and there are two failures which matches Jenkins last runs. The two failures already have tickets opened and linked in Butler(CASSANDRA-17313 and CASSANDRA-17329).
 * 3.11 - 3676 tests have been run and 1 failed. Again this is matching Jenkins. There is already a ticket open for the failure and linked in Butler (CASSANDRA-17329).

[~mck] , do you want to take a final look now when we are ready also with 3.11 before I commit?

LGTM, +1

my only comment was the collapsing of multiple lines in the yaml to one long line. one line makes it hard to read and to review changes.

Thanks [~mck] !
{quote}my only comment was the collapsing of multiple lines in the yaml to one long line. one line makes it hard to read and to review changes.
{quote}
I am sorry, I forgot to post on the ticket earlier - the collapse happens when we use the CircleCI cli tool to create our configuration from config-2_1.yml. I opened a support ticket for them and the explanation was that they rely on third-party package which is to be blamed for the collapse... This response was not rely satisfying, considering we use paid accounts and this configuration is the primary point to configure their product. They will continue looking on what they can do but from my experience, it will take some time.

Agreed with [~mck] offline to commit the patch now and hopefully the collapse will be solved later, I will follow up with CircleCI support teams. 
{quote}one line makes it hard to read and to review changes.
{quote}
Agreed, also for maintenance. That's why I raised the support ticket but with no good luck so far. 

Starting commit soon

After a lot of sweating on double-checking the multi-branch commit, I am done:

To https://github.com/apache/cassandra.git

   e0331f631e..90fe8608a4  cassandra-3.0 -> cassandra-3.0

   b82dca6f81..43dcb5cd14  cassandra-3.11 -> cassandra-3.11

   8f06ec372e..6885bf9724  cassandra-4.0 -> cassandra-4.0

   162d504be0..1e67ef02f5  cassandra-4.1 -> cassandra-4.1

   51cc20a9f8..31341ee4bd  trunk -> trunk

 

