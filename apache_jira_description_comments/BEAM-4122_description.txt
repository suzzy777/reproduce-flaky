The new Gradle build seems to be exhausting memory on the Jenkins machines, causing them to lose their connection and die. This has made our tests extremely flaky.

We need to tune the Gradle build such that it does not exhaust Jenkins machine resources.

A  [Gradle build scan|https://scans.gradle.com/s/ehue5xqj36zeo/infrastructure] shows some information about the Jenkins VM:
 * Operating system Linux 3.19.0-79-generic
 * CPU cores 4 cores
 * Max Gradle workers 4 workers
 * Java runtime Oracle Java(TM) SE Runtime Environment 1.8.0_152-b16
 * Java VM Oracle Java HotSpot(TM) 64-Bit Server VM 25.152-b16 (mixed mode)
 * Max JVM memory heap size 3506 MB

From the [Jenkins Load Statistics|https://builds.apache.org/computer/beam3/load-statistics] page, it appears that each machine has 2 executors.

Some resources for tuning memory:
 * [https://wiki.jenkins.io/display/JENKINS/I%27m+getting+OutOfMemoryError] 
 * [https://guides.gradle.org/performance/] 
 * [https://docs.gradle.org/current/userguide/build_environment.html#sec:configuring_jvm_memory] 
 * [https://docs.gradle.org/current/userguide/command_line_interface.html#sec:command_line_performance] 

 

We may also be able to improve performance by using Gradle features to remove redundant work:
 * [Build Cache|https://docs.gradle.org/current/userguide/build_cache.html]: re-use up-to-date outputs from previous builds
 * [Gradle Daemon|https://docs.gradle.org/current/userguide/gradle_daemon.html]: re-use worker process and cache output status