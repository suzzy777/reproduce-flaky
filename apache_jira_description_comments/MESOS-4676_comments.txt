I think this is related to docker issue. When I try to reproduce this, I saw {{Unrecognized input header}} in stderr.
{code}
I0218 01:44:26.620074 17540 docker.cpp:766] Running docker -H unix:///var/run/docker.sock inspect mesos-d2bdb09d-f546-4c5a-9385-628ebce457d9-S0.5978ddad-425c-4641-a5e8-2a62d6c45753
Unrecognized input header
{code}

And stdout looks weird.
{code}
Starting task 1
^B^@^@^@^@^@^@(errba84f3ab-0f60-4747-8451-56d82Shutting down
{code}

Confirmed that this is a docker issue.  I fished out a command string from a failed test with {{GLOG_v=1}}, then ran it independently repeatedly.

On Ubuntu12 (another place we're seeing the failure):
{code}
sh -c 'while true; do 
  docker -H unix:///var/run/docker.sock run --cpu-shares 2048 --memory 1073741824 \
  -e MESOS_SANDBOX=/mnt/mesos/sandbox \
  -e MESOS_CONTAINER_NAME=mesos-3672e44c-2c92-48d5-825e-e8475227ad88-S0.bdb7f52c-5d3e-46f9-b676-4e693fb0d1f2 \
  -v /tmp/DockerContainerizerTest_ROOT_DOCKER_Logs_vSwYXT/slaves/3672e44c-2c92-48d5-825e-e8475227ad88-S0/frameworks/3672e44c-2c92-48d5-825e-e8475227ad88-0000/executors/1/runs/bdb7f52c-5d3e-46f9-b676-4e693fb0d1f2:/mnt/mesos/sandbox \
  --net host \
  --entrypoint /bin/sh \
  alpine -c "echo outd5d895af-0c86-41bc-9f27-037ab12d8035 ; echo errd5d895af-0c86-41bc-9f27-037ab12d8035 1>&2"; 
done' 2>&1 | grep -v \
  -e "^outd5d895af-0c86-41bc-9f27-037ab12d8035$" \
  -e "^errd5d895af-0c86-41bc-9f27-037ab12d8035$" \
  -e "^WARNING: Your kernel does not support swap limit capabilities, memory limited without swap.$"
{code}

After about an hour (don't know exactly how many iterations), got the following output:
{code}
(outd5d895af-0c86-41bc-9f27-037abUnrecognized input header
(outd5d895af-0c86-41bc-9f27-037abUnrecognized input header
(errd5d895af-0c86-41bc-9f27-037abUnrecognized input header
(errd5d895af-0c86-41bc-9f27-037abUnrecognized input header
...
{code}

Based on the linked issue ("Bug report for Docker 1.9.1 on Fedora"), it looks like docker has some sort of race when the containerized process writes to both stdout & stderr at the same time.

To mitigate the test hitting this:
* Try separating the two {{echo}} commands.
* Try using the {{unbuffer}} utility. i.e. {{unbuffer echo foo; unbuffer echo bar 1>&2}}.  See https://github.com/docker/docker/issues/1385

Approach #2: https://reviews.apache.org/r/43963/

I also find this issue https://github.com/docker/docker/issues/19950 It said should be 
{quote}
This error is from stdcopy package which muxes stdout/stderr streams. It seems like now it writes something weird; I think it can also be golang version change.
{quote}
And I could reproduce through the example code in the issue https://gist.github.com/dpiddy/0c460a8bb297ee19a7a0

Verify that add {{-t}} when {{docker run}} also could avoid this problem.

{code}
commit d0d4d5a64e8aa17f0bc364060d98690b49037550
Author: Joseph Wu <joseph@mesosphere.io>
Date:   Thu Feb 25 12:22:07 2016 +0100

    Fixed flakiness in DockerContainerizerTest.ROOT_DOCKER_Logs.
    
    Adds the `unbuffer` utility in front of each `echo` in the test.
    Since Docker appears to handle simultaneous stdout/stderr in a
    non-robust fashion, this mitigates the amount of overlap the two
    streams will have in the test.
    
    Review: https://reviews.apache.org/r/43963/
{code}

