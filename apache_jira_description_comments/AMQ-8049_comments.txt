Don't you have another instance using the same kahadb folder (at first level for instance) ?

No. Only one java process was running in this machine. This was my first check.
The stacktrace show that the problem is registering JMX bean (this seem a local/jvm issue).

We had similar issue when using filtered kahadb with 'catch all' perdestination like:
{code:java}
<persistenceAdapter>
    <mKahaDB directory="${activemq.data}/kahadb">
        <filteredPersistenceAdapters>
            <filteredKahaDB queue="XXX.>">
                <persistenceAdapter>
                    <kahaDB checkForCorruptJournalFiles="true"
                            indexCacheSize="10000"
                            journalMaxFileLength="32mb"
                            lockKeepAlivePeriod="2000"
                            preallocationScope="entire_journal"
                            preallocationStrategy="os_kernel_copy">
                        <locker>
                            <shared-file-locker failIfLocked="false"
                                                lockAcquireSleepInterval="1000"/>
                        </locker>
                    </kahaDB>
                </persistenceAdapter>
            </filteredKahaDB>
            <filteredKahaDB topic="XXX.>">
                <persistenceAdapter>
                    <kahaDB checkForCorruptJournalFiles="true"
                            indexCacheSize="1000"
                            indexWriteBatchSize="10"
                            journalMaxFileLength="10kb"
                            lockKeepAlivePeriod="2000"
                            preallocationScope="entire_journal"
                            preallocationStrategy="os_kernel_copy"
                            journalMaxWriteBatchSize="100mb"
                            journalDiskSyncStrategy="never">
                                                        </kahaDB>
                </persistenceAdapter>
            </filteredKahaDB>
            <!-- kahaDB per destinations -->
            <filteredKahaDB perDestination="true">
                <persistenceAdapter>
                    <kahaDB checkForCorruptJournalFiles="true"
                            preallocationScope="entire_journal"
                            preallocationStrategy="os_kernel_copy"
                            indexCacheSize="10000"
                            journalMaxFileLength="32mb"
                            lockKeepAlivePeriod="2000">
                        <locker>
                            <shared-file-locker failIfLocked="false"
                                                lockAcquireSleepInterval="1000"/>
                        </locker>
                    </kahaDB>
                </persistenceAdapter>
            </filteredKahaDB>
        </filteredPersistenceAdapters>
    </mKahaDB>
</persistenceAdapter>
{code}
In our case it was problem when restarting ActiveMQ. Right now code assumes that all directories are connected to perDestination filter and starts them. If there are destinations in metadata (what I belive could be true almost always for example in case of topics for STOMP). As a result it will start adapter for topic directory and then try to start another one for configured adapter.

I have created proposal of fix.

Resuming test/investigation on this one.

I tested with 6.0.0-SNAPSHOT, 5.18.3/5.18.4-SNAPSHOT, 5.17.6/5.17.7-SNAPSHOT and it works fine with the provided {{{}activemq.xml{}}}.

