Last time I counted we have ~150 threads on a totally un-loaded region server. The number of context switches that represents is a pretty serious perf impact.

I was thinking along the same lines when I first encountered Chore. +1 

[~stack], [~enis] would you care to update this one? Would it make sense to have a fixVersion?

We need this one fixed. This might get picked up soon.

I started to look into this issue this week. Initial investigation revealed that on average the number of threads running within the HMaster process that can be attributed to Chores is around 12 threads. I have attached a sample thread dump above (you can see the active Chore threads by searching for 'Chore').

As discussed, the goal of a proposed solution should be to reduce the number of running threads by allowing the running Chores to share threads that are idle in between Chore cycles. The idea of using ScheduledThreadPoolExecutor seems well suited for the job. 

A ScheduleThreadPoolExecutor allows us to specify the maximum number of threads that we want to allow the running Chores to use. Since there may be Chores with tasks that take a while to execute, this value would have to be dynamic so that it could increase/decrease during varying Chore loads. Specifically, the executor needs to account for the worst case scenario that all running Chores have tasks that take longer than their period (i.e. the chore finishes after its next scheduled execution should have started). Thus the core pool size could be set to a small initial value, and if we recognize that Chores are missing their scheduled start times, we could increase the core pool size to a maximum of however many active chores there are.

In summary, I am proposing that we design a service that acts as an interface to an underlying ScheduleThreadPoolExecutor whose core pool size can vary. Any feedback on this proposed solution and where this may fit into the HBase workflow would be greatly appreciated.

Sounds great [~jonathan.lawlor]  

bq. Thus the core pool size could be set to a small initial value, and if we recognize that Chores are missing their scheduled start times, we could increase the core pool size to a maximum of however many active chores there are.

If a thread is taking longer than its period, we won't schedule another instance of the same Chore type? In other words, is there anything to prevent the pool being filled with Chores all of the same type if taking longer their period?

Can we have it so pool has a small minimum and a max that allows all chores run concurrently if necessary... then when chore is done, threads die off till we are back to the minimum again?  That way, for those threads with a long period between runs.... say 5 minutes... we create a thread each time?

Good stuff [~jonathan.lawlor]



{quote}
If a thread is taking longer than its period, we won't schedule another instance of the same Chore type?
{quote}

That's correct [~stack]. The [ScheduledThreadPoolExecutor|http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html] enforces that functionality for all periodic tasks scheduled through scheduleAtFixedRate and scheduleWithFixedDelay calls. Specifically:

{quote}
Successive executions of a task scheduled via scheduleAtFixedRate or scheduleWithFixedDelay do not overlap. While different executions may be performed by different threads, the effects of prior executions happen-before those of subsequent ones. 
{quote}

In response to:
{quote}
Can we have it so pool has a small minimum and a max that allows all chores run concurrently if necessary
{quote}

This seems doable and would be the goal. The [ScheduledThreadPoolExecutor|http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html] provides a few mechanisms for controlling the number of active threads at any given time. Specifically, there is a timeout mechanism that allows us to specify a keep-alive-timer for threads and if a thread is idle for that period of time then it will terminate. Another mechanism for controlling the number of active threads to is to simply use setCorePoolSize which will expand or shrink the number of threads in the pool. This call is nice because in the case that we shrink the core pool size, it will not mindlessly shutdown threads. Instead it will wait for a thread to become idle before terminating it.






Sweet.

Work In Progress Update:
I have been working on implementing the outlined solution and have attached a patch representing my progress thus far. 

As it stands, the TestChoreService class is very rough and represents tests that I wrote to simply test a few underlying concepts. More extensive and robust test coverage will be implemented.

The two main classes that I have been developing are ScheduledChore.java and ChoreService.java:

Progress/Details with respect to ScheduledChore.java:
- The ScheduledChore.java was designed with the current Chore implementation in mind. I wanted to maintain all of the existing functionality while making it compatible with the new workflow. 
- A new concept that appears in ScheduledChore that is not present in the existing Chore implementation is the concept of "missing start time". ScheduledChores track the time between successive runs. If the time between successive runs exceeds 1.5 * period then we say that the chore has missed its start time and we notify the ChoreService of this event. This is a useful workflow as it helps the ChoreService decide when it needs to increase the number of threads.

Progress/Details with respect to ChoreService.java:
- The ChoreService.java class is the class that defines how Chores are scheduled and how the thread count is controlled. 
- The service allows Chores to be scheduled, cancelled, rescheduled, and triggered immediately. It also provides some useful methods for checking the status of scheduled chores.
- When chores are added and removed the ChoreService may make some decisions with respect to the size of the core pool. For example, if a Chore that caused an increase in the core pool size is removed from the service, an attempt is made to reduce the core pool size.

The finer grain details can be seen by going through the patch attached above. The next steps are to refine the test coverage and begin converting existing Chores into ScheduledChores. 

One design detail that I was hoping to get feedback on was where the instance of ChoreService should live in the codebase. Is there an object that would be suitable to hold an instance of ChoreService that could then be used to service objects that want to start a periodic chore?

All feedback is greatly appreciated.

Thanks,
Jonathan

Nice writeup [~jonathan.lawlor]

ChoreService should be at the top-level I believe as is Chore (right?) It is used all over the code base.

Before final patch, backfill doc.  Above outline would be good skeleton. For example, nothing currently on ChoreService but that is because this a WIP.

Doc on data members is good quality.

Not needed:

88	    if (chore == null) {
89	      throw new NullPointerException("chore cannot be null");
90	    }

Why not have intialdelay be Chore too rather than pass it in?  Because it a one-off?  Gets a bit awkward when you have to say this: "The initial delay before the scheduled chore becomes active. Measured in
109	   *          same units as chore.getTimeUnit()"  ... in other words, the initial delay depends on Chore... bettter if if didnt'.  This is a nit.

If all methods are synchronized, why do we need concurrent hash map?

You should probably tighten up your class and not let stuff like 	  public int getNumberOfChoresMissingStartTime() { out to anyone but unit tests.  TMI.

Check out how threads are named in hbase. We'll usually add the server name for a prefix. Helps when you have many of them all running in the one JVM.

This should be internal detail?

  public synchronized boolean requestCorePoolIncrease() {

Shut down the likes of t his till someone asks for it:

		218	  public void onChoreMadeStartTime(ScheduledChore chore) {
219	    // TODO: This is a placeholder for future extension... As it currently stands,

Shut down access to this?

225	  public synchronized void onChoreMissedStartTime(ScheduledChore chore) {

Internal detail?

I'd say keep the debug stuff in but just make it log at trace level (and check trace level is set).

FYI, don't need public qualifiers when defining an Interface...   public interface ChoreServicer {  Its always public.

Do we need to reschedule?  I don't remember this feature.  It is nice but maybe not needed?

Very nice tests.

Coming along real nice [~jonathan.lawlor]













Thanks for the feedback [~stack]. I have modified the implementation to take into account most of this feedback, but I do have a few clarifying questions that are due to my inexperience with the codebase:

1. When you say that ChoreService should be at the top level I'm not quite sure what you mean. With the current Chore workflow, a class creates an instance of a Chore, and since that Chore contains a thread, scheduling that chore to run simply requires starting the thread. 

In contrast, the workflow that we are trying to move to would require a ScheduledChore instance to be created and then offered to a ChoreService instance for scheduling. I'm wondering where the instance of the ChoreService would live (i.e. is there a static class that I could create an instance of ChoreService in and then expose public scheduling methods). 

2. In terms of backfilling the doc before the final patch, I'm not sure where this information would go. Would you be able to point me in the right direction here (or maybe there is a commit that I could review to see how it's typically done).

3. In order to tighten up the class so that certain methods are visible only for testing, would adding the "@VisibleForTesting" annotation suffice, or is there more to it than that?

4.  The onChoreMissedStartTime is currently exposed publicly so that chores can tell the ChoreService that they are scheduled with that they have missed their start time. The ChoreService can subsequently make the decision as to whether or not this event should cause an increase in the core pool thread count. If this method isn't exposed VIA the ChoreServicer interface, I'm unsure of how to achieve a similar event flow.

In terms of the reschedule method: it was added as a side effect of the new workflow. Specifically, in the case that a ScheduledChore misses its start time, we reschedule it immediately so that the ScheduledThreadPoolExecutor no longer regards it as a delayed task (this is important since the ScheduledThreadPoolExecutor assigns threads to waiting tasks based on how long the tasks have waited -> tasks with a larger delay have a higher priority -> thus rescheduling the task prevents that chore from hogging a thread).

bq.  When you say that ChoreService should be at the top level I'm not quite sure what you mean

At org.apache.hadoop.hbase package probably in hbase-common if there are no dependencies on later modules (Would be good to not have dependencies on later modules and get it into hbase-common if you can)

ChoreService should be at the top-level IMO. It is used by lots of subpackages.  You can't put it in a subpackage without another subpackage reaching over to make use of it.  Doing this ups our entanglement quotient.

bq.  Would you be able to point me in the right direction here (or maybe there is a commit that I could review to see how it's typically done).

When I wrote that comment, I had come across empty class comments: i.e. the javadoc at the head of a class. As I reviewed, I saw you had good javadoc on the methods.  What is missing is a bit of metadoc on what this service does and when to use it.  That should go in class comment.  Make sense?

bq. would adding the "@VisibleForTesting" annotation suffice, or is there more to it than that?

Make the methods and classes package private.  Tests in same package can still access package private methods.  This may not be possible though.  In that case, then you'd have to make the methods public, and then they need the @VisibleForTesting annotation.

On 4. I do not follow what missing starttime implies. Can the chore not keep this state -- whether it ran the start -- internal to itself?  But sounds like you need it exposed so you can figure when to up threads.  Does ExecutorService not expose methods you could make use of?  Queued chores and how many current threads?  Could you do a heuristic based off these?  Just a suggestion.

Maybe look at keep the reschedule internal rather than expose it since it adds facility we will have to support and it is 'new'. Has anyone asked for it?

Great work [~jonathan.lawlor]









Thanks for answering these questions [~stack].

bq. As I reviewed, I saw you had good javadoc on the methods. What is missing is a bit of metadoc on what this service does and when to use it. That should go in class comment. Make sense?

Ahh I see what you meant, that makes sense, thanks

bq. Does ExecutorService not expose methods you could make use of? Queued chores and how many current threads? Could you do a heuristic based off these? Just a suggestion.

The ScheduledThreadPoolExecutor does expose certain methods that reveal things like the size of the queue and the number of active threads. The problem with these methods is that they don't provide sufficient information to make the decision as to whether or not the current core thread pool is large enough. This is because being in the Queue does not necessarily mean that you are ready to execute (you may be in the queue because you are waiting for the start of your next execution). Thus, a large queue size does not indicate that there are many tasks that are ready to execute, but rather there are many tasks that are either waiting for their next start time OR ready to execute. 

Because of the ambiguity, I thought it would be best for chores to have a means by which they could tell the service that the core pool is not large enough, since the service cannot make this decision with its information alone.

bq. Has anyone asked for it?
Nobody has asked for the reschedule functionality so I'll be sure to keep it internal.

Thanks [~stack]


Work In Progress Update #2:
I have attached the latest version of the solution to this issue above (HBASE_6778_WIP_v2.patch). Since the last WIP update, the following changes have been made:
- Made changes in response to the feedback that [~stack] provided
- Added Stoppable support to ScheduledChore (Stoppable support was needed as the same behavior could not be replicated with cancels alone). What this means is that now an instance of a Stoppable can be passed into the ScheduledChore during construction and the ScheduledChore will cancel itself if Stoppable#isStopped() becomes true.
- Added shutdown() to ChoreService to allow for convenient all-in-one cleanup of a ChoreService
- Changed usages of Chore (the implementation we would like to get rid of) into usages of ScheduledChore
- Expanded the test coverage of ScheduledChore and ChoreService

While converting Chores to ScheduledChores the primary goal was to maintain the same behavior. Most changes can be understood through the following mapping (Chore usage -> ScheduledChore usage):
- Chore.interrupt() -> ScheduledChore.cancel(mayInterruptWhileRunning = true)
- Threads.setDaemonThreadRunning(Chore) -> ChoreService.scheduleChore(ScheduledChore)
- Chore.isAlive -> ScheduledChore.isScheduled()
- Chore.getSleeper().skipSleepCycle() -> ScheduledChore.triggerNow()

Important Notes on recent changes:
- There are two chores in the codebase that don't seem to do anything at the moment. The first is DelayedClosing (defined within ConnectionManager.java). The second is MovedRegionsCleaner (defined within HRegionServer). While converting them into ScheduledChores I noticed that when they are used, instances of the chores are created but the threads are never started. I looked into it a bit and the issue with DelayedClosing is called out in HBASE-11354, but I couldn't find anything that spoke about MovedRegionsCleaner. As it stands, I have not changed this behavior (i.e. both chores still don't do anything) but I thought I should raise the issue regardless.

- With the movement to this new implementation of Chores, it should be understood that we will only see a reduction in the number of threads in cases where we can schedule many chores with a common ChoreService object (e.g. schedule 5 chores with a single instance of ChoreService). Scheduling each chore with a different ChoreService instance will not provide a reduction in the number of threads since each instance will always have at least one thread in its core pool (in fact, scheduling each Chore with a separate instance of ChoreService would be equivalent to the current implementation of Chores since it would be a thread per Chore).

- While it would have been nice to have a single ChoreService that all ScheduledChores could talk to, this did not seem feasible. Instead, an instance of ChoreService has been created inside HRegionServer, and "getChoreService()" has been added to the interfaces RegionServerServices and MasterServices. Most of the places where Chores were used had access to an HRegionServer, so this allowed many of the existing chores to be scheduled under a common ChoreService and thus reduced the number of threads. However, in instances where there wasn't access to an HRegionServer, an instance of ChoreService had to be defined. Note that this is simply equivalent to the old implementation of Chores (1 thread per chore).

Summary:
- If you observe the BEFORE(Chore) and AFTER(ScheduledChore) thread dumps, you will see that the movement to the usage of ChoreService has reduced the number of threads used for Chores from 12 to 3 which is promising. 

- While the thread count may increase (due to a larger Chore load), we are guaranteed that the new implementation's worst case thread count will never exceed the previous implementation's thread count.

Any feedback with regards to the patch above would be greatly appreciated.


Thanks



Just read your write up. Its great. MovedRegionsCleaner not being started looks like a bug.  Suggest fix in new issue.  Have the chore run once a day since seems like it not running has not been an issue up to this.  I reattached the patch on HBASE-11354 to trigger a rebuild. Will commit it if it passes.

Nice stuff like this should go into release note:

{code}
Chore.interrupt() -> ScheduledChore.cancel(mayInterruptWhileRunning = true)
Threads.setDaemonThreadRunning(Chore) -> ChoreService.scheduleChore(ScheduledChore)
Chore.isAlive -> ScheduledChore.isScheduled()
Chore.getSleeper().skipSleepCycle() -> ScheduledChore.triggerNow()
{code}

Nice numbers on cut in thread count.

Let me give you a bit of feedback on the patch.

Looking at your patch and given the recent radical refactor of Connection, I'd say purge DelayedClosing rather than add it back in as  HBASE-11354  has it.  The discussion in  HBASE-11354  is too nebulous on what DelayedClosing brings and its allowed we purge till we figure what is needed in new world.

Don't need 'Thread' on end of name here, redundant: _ChoreServiceThread_

Add this to Server rather than MasterServices and then to RegionServerServices?

	  ChoreService getChoreService();

Do you not remove the classes you are replacing?

This patch is really good.  Let me run it by hadoopqa.



{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12694298/HBASE_6778_WIP_v2.patch
  against master branch at commit 1c1a306b2e4bdd5a4ff877634c5064097637e2f2.
  ATTACHMENT ID: 12694298

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 46 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 checkstyle{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:red}-1 findbugs{color}.  The patch appears to introduce 2 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 lineLengths{color}.  The patch introduces the following lines longer than 100:
    +  /** The minimum number of threads in the core pool of the underlying ScheduledThreadPoolExecutor */
+        new ScheduledThreadPoolExecutor(corePoolSize, new ChoreServiceThreadFactory(coreThreadPoolPrefix));
+      public CountingChore(String name, Stoppable stopper, int period, final boolean outputOnTicks) {
+    assertEquals("Should not create more pools than scheduled chores", 3, service.getCorePoolSize());

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.regionserver.TestEndToEndSplitTransaction
                  org.apache.hadoop.hbase.mapreduce.TestLoadIncrementalHFiles

     {color:red}-1 core zombie tests{color}.  There are 1 zombie test(s): 	at org.apache.hadoop.hbase.namespace.TestNamespaceAuditor.testTableOperations(TestNamespaceAuditor.java:123)

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/12590//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12590//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12590//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12590//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12590//artifact/patchprocess/newPatchFindbugsWarningshbase-annotations.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12590//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12590//artifact/patchprocess/newPatchFindbugsWarningshbase-rest.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12590//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12590//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12590//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12590//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12590//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/12590//artifact/patchprocess/checkstyle-aggregate.html

  Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/12590//console

This message is automatically generated.

Are the findbugs and/or tests yours [~jonathan.lawlor]? Thanks.

Attaching a new patch. This patch addresses the issues raised by [~stack] and fixes the new findbugs.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12694819/HBASE_6778_v1.patch
  against master branch at commit f7df0990c2d321cffd7ea2e20cb7b280d8cc9db6.
  ATTACHMENT ID: 12694819

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 85 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:red}-1 javadoc{color}.  The javadoc tool appears to have generated 2 warning messages.

    {color:green}+1 checkstyle{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:red}-1 findbugs{color}.  The patch appears to introduce 2 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.mapreduce.TestLoadIncrementalHFiles

     {color:red}-1 core zombie tests{color}.  There are 1 zombie test(s): 	at org.apache.hadoop.hbase.namespace.TestNamespaceAuditor.testDeleteTable(TestNamespaceAuditor.java:226)

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/12604//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12604//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12604//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12604//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12604//artifact/patchprocess/newPatchFindbugsWarningshbase-annotations.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12604//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12604//artifact/patchprocess/newPatchFindbugsWarningshbase-rest.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12604//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12604//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12604//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12604//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12604//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/12604//artifact/patchprocess/checkstyle-aggregate.html

  Javadoc warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12604//artifact/patchprocess/patchJavadocWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/12604//console

This message is automatically generated.

Retrying with new patch

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12694877/HBASE_6778_v2.patch
  against master branch at commit f7df0990c2d321cffd7ea2e20cb7b280d8cc9db6.
  ATTACHMENT ID: 12694877

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 85 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:red}-1 javadoc{color}.  The javadoc tool appears to have generated 2 warning messages.

    {color:green}+1 checkstyle{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:red}-1 findbugs{color}.  The patch appears to introduce 1 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
     

     {color:red}-1 core zombie tests{color}.  There are 1 zombie test(s): 	at org.apache.hadoop.hbase.namespace.TestNamespaceAuditor.testTableOperations(TestNamespaceAuditor.java:123)

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/12609//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12609//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12609//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12609//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12609//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12609//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12609//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12609//artifact/patchprocess/newPatchFindbugsWarningshbase-rest.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12609//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12609//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12609//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12609//artifact/patchprocess/newPatchFindbugsWarningshbase-annotations.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/12609//artifact/patchprocess/checkstyle-aggregate.html

  Javadoc warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12609//artifact/patchprocess/patchJavadocWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/12609//console

This message is automatically generated.

Updating patch: findbugs fixes and rebased to master

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12694903/HBASE_6778_v3.patch
  against master branch at commit 6b20a0f831b195c6f136a3decee61f1d80ebde29.
  ATTACHMENT ID: 12694903

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 85 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 checkstyle{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.master.TestMasterFailover
                  org.apache.hadoop.hbase.client.TestHCM
                  org.apache.hadoop.hbase.mapreduce.TestLoadIncrementalHFiles

     {color:red}-1 core zombie tests{color}.  There are 2 zombie test(s): 	at org.apache.hadoop.hbase.namespace.TestNamespaceAuditor.testDeleteTable(TestNamespaceAuditor.java:233)
	at org.apache.hadoop.hbase.TestAcidGuarantees.testScanAtomicity(TestAcidGuarantees.java:354)

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/12613//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12613//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12613//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12613//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12613//artifact/patchprocess/newPatchFindbugsWarningshbase-rest.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12613//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12613//artifact/patchprocess/newPatchFindbugsWarningshbase-annotations.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12613//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12613//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12613//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12613//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12613//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/12613//artifact/patchprocess/checkstyle-aggregate.html

  Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/12613//console

This message is automatically generated.

Retry. Took a look at failures and seem unrelated.  Lets try again.

So, you removed delayed from ConnectionManager.java but you are still starting up a choreservice?  We need to?

How does the choreservice in AuthUtils get shutdown? It never was shutdown it looks like?

I like the removal of whole classes

Nice doc on ChoreService

nit, if this is suffix, you don't need last '_' on this THREAD_NAME_SUFFIX = "_ChoreService_";

Is that printChoreServiceDetails called each time and those trace logs calculate and logged even though we usually don't run at trace?  Want to add a guard?  LOG.isTraceEnabled?

Remove this kinda javadoc that is using invisible ink (forgot my lemon juice!)

83	  /**
84	   * 
85	   */
86	  interface ChoreServicer {


Whats that change in MasterServices.java ? No biggie

Its nice how ScheduledChore slots in nicely in place of Chore; minimal disruption.

In places like ConnectionCache.java, for sure the chore executor is being shut down?

Very nice @jonathan lawlor

Anyone else want to take looksee at this nice patch?


{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12694926/HBASE_6778_v3.patch
  against master branch at commit 6b20a0f831b195c6f136a3decee61f1d80ebde29.
  ATTACHMENT ID: 12694926

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 85 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 checkstyle{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.master.TestDistributedLogSplitting

     {color:red}-1 core zombie tests{color}.  There are 1 zombie test(s): 	at org.apache.hadoop.hbase.namespace.TestNamespaceAuditor.testTableOperations(TestNamespaceAuditor.java:123)

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/12615//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12615//artifact/patchprocess/newPatchFindbugsWarningshbase-rest.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12615//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12615//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12615//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12615//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12615//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12615//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12615//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12615//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12615//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12615//artifact/patchprocess/newPatchFindbugsWarningshbase-annotations.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/12615//artifact/patchprocess/checkstyle-aggregate.html

  Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/12615//console

This message is automatically generated.

new patch attached to fix:

bq. you removed delayed from ConnectionManager.java but you are still starting up a choreservice? We need to?

Good catch, it is definitely not needed. Removed

bq. How does the choreservice in AuthUtils get shutdown? It never was shutdown it looks like?

AuthUtil now returns a scheduledChore rather than actually starting the chore in the static function. The caller of the static method is responsible for starting that chore with a choreService that they can manage

Added guards to logs and removed invisible ink javadoc

The change in MasterServices was caused by eclipse auto-formatter.

bq. In places like ConnectionCache.java, for sure the chore executor is being shut down?

Added a shutdown method and a call to it where it is used. Also, in ThreadPoolExecutors shutdown() inside finalize so in the case where ChoreService#shutdown() is missed, the executor will still shutdown gracefully during GC

Also, added timeouts to the tests that have been failing in the hope that the flaky tests will succeed after a timeout. (*fingers crossed*)

Correction: Meant to say that ThreadPoolExecutors call shutdown inside their finalize()

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12695049/HBASE_6778_v4.patch
  against master branch at commit 6b20a0f831b195c6f136a3decee61f1d80ebde29.
  ATTACHMENT ID: 12695049

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 89 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 checkstyle{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
     

     {color:red}-1 core zombie tests{color}.  There are 1 zombie test(s): 	at org.apache.hadoop.hbase.namespace.TestNamespaceAuditor.testTableOperations(TestNamespaceAuditor.java:123)

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/12619//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12619//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12619//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12619//artifact/patchprocess/newPatchFindbugsWarningshbase-annotations.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12619//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12619//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12619//artifact/patchprocess/newPatchFindbugsWarningshbase-rest.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12619//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12619//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12619//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12619//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12619//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/12619//artifact/patchprocess/checkstyle-aggregate.html

  Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/12619//console

This message is automatically generated.

Added timeout to failing zombie test

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12695089/HBASE_6778_v5.patch
  against master branch at commit 6b20a0f831b195c6f136a3decee61f1d80ebde29.
  ATTACHMENT ID: 12695089

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 93 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 checkstyle{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
     

     {color:red}-1 core zombie tests{color}.  There are 1 zombie test(s): 	at org.apache.hadoop.hbase.namespace.TestNamespaceAuditor.testDeleteTable(TestNamespaceAuditor.java:238)

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/12620//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12620//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12620//artifact/patchprocess/newPatchFindbugsWarningshbase-annotations.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12620//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12620//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12620//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12620//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12620//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12620//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12620//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12620//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12620//artifact/patchprocess/newPatchFindbugsWarningshbase-rest.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/12620//artifact/patchprocess/checkstyle-aggregate.html

  Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/12620//console

This message is automatically generated.

Okay, I think I have it this time (though I may be jinxing it). 

I am claiming that the issue that has caused all of these test failures is rooted in how the new ScheduledChore's handle exceptions within their run method vs. how the old Chore implementation handled exceptions. 

The issue is that ScheduledChores are canceling themselves whenever an exception is thrown during the execution of chore(). This is incorrect and we should instead catch the error, log it, and see if the ScheduledChore has been stopped. If stopped, then we can cancel the chore.

The attached patch has added this behavior, and testing locally shows that the failing zombie test passes. 

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12695132/HBASE_6778_v6.patch
  against master branch at commit 6b20a0f831b195c6f136a3decee61f1d80ebde29.
  ATTACHMENT ID: 12695132

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 93 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 checkstyle{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.mapreduce.TestLoadIncrementalHFiles

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/12625//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12625//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12625//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12625//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12625//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12625//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12625//artifact/patchprocess/newPatchFindbugsWarningshbase-rest.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12625//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12625//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12625//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12625//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12625//artifact/patchprocess/newPatchFindbugsWarningshbase-annotations.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/12625//artifact/patchprocess/checkstyle-aggregate.html

  Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/12625//console

This message is automatically generated.

Retry, test failures seem unrelated and pass when run locally.

{color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12695307/HBASE_6778_v6.patch
  against master branch at commit 6bfa8ea977e991c372c0bef7faa49d6142befebc.
  ATTACHMENT ID: 12695307

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 93 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 checkstyle{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/12633//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12633//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12633//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12633//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12633//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12633//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12633//artifact/patchprocess/newPatchFindbugsWarningshbase-rest.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12633//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12633//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12633//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12633//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12633//artifact/patchprocess/newPatchFindbugsWarningshbase-annotations.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/12633//artifact/patchprocess/checkstyle-aggregate.html

  Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/12633//console

This message is automatically generated.

Failures indeed look unrelated.  Will commit this afternoon unless objection.

I committed to master branch. Want to make a patch for branch-1 mighty [~jonathan.lawlor]? Bunch of conflicts. Figured you could do it faster than I.

Nice work.

FAILURE: Integrated in HBase-TRUNK #6072 (See [https://builds.apache.org/job/HBase-TRUNK/6072/])
HBASE-6778 Deprecate Chore; its a thread per task when we should have one thread to do all tasks (Jonathan Lawlor) (stack: rev 538388c2b59cd56dd41a63dabc9eafd8f743ca0c)
* hbase-server/src/main/java/org/apache/hadoop/hbase/Server.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/CleanerChore.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/util/ConnectionCache.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationTrackerZKImpl.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/quotas/QuotaCache.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/MockRegionServerServices.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestHFileLinkCleaner.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestTableLockManager.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HeapMemoryManager.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestCatalogJanitor.java
* hbase-rest/src/main/java/org/apache/hadoop/hbase/rest/RESTServlet.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BalancerChore.java
* hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionManager.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/tool/Canary.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/ClusterStatusChore.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/SplitLogManager.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/util/MockServer.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestServerNonceManager.java
* hbase-common/src/main/java/org/apache/hadoop/hbase/AuthUtil.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSyncUp.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationStateZKImpl.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerServices.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/security/token/TestTokenAuthentication.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHeapMemoryManager.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StorefileRefresherChore.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/backup/example/TestZooKeeperTableArchiveClient.java
* hbase-common/src/main/java/org/apache/hadoop/hbase/Chore.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/MockRegionServer.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestSplitLogManager.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/namespace/TestNamespaceAuditor.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestEndToEndSplitTransaction.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/ClusterStatusPublisher.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestReplicationSourceManager.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestLoadIncrementalHFiles.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/CatalogJanitor.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/backup/TestHFileArchiving.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestClockSkewDetection.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ServerNonceManager.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/HealthCheckChore.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitLogWorker.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestLogsCleaner.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestHFileCleaner.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestActiveMasterManager.java


Looks like 3 new files should have been checked in.
I added them and checked into git repo.

Stack, hope you don't mind.


I was wondering why it was failing just now as I tried to add them.

Thanks.

FAILURE: Integrated in HBase-TRUNK #6073 (See [https://builds.apache.org/job/HBase-TRUNK/6073/])
HBASE-6778 Deprecate Chore; its a thread per task when we should have one thread to do all tasks - add new files (tedyu: rev d3eedb24e1ebf56ce820ea77522b695350fada6c)
* hbase-common/src/main/java/org/apache/hadoop/hbase/ScheduledChore.java
* hbase-common/src/main/java/org/apache/hadoop/hbase/ChoreService.java
* hbase-common/src/test/java/org/apache/hadoop/hbase/TestChoreService.java


Attaching patch for branch-1. Compiling and passing tests locally.

Pushed to branch-1.

Thanks for the sweet contrib [~jonathan.lawlor]

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12695629/HBASE-6778-branch-1-v1.patch
  against branch-1 branch at commit b08802a3e8e522f84519415b83455870b49bf8da.
  ATTACHMENT ID: 12695629

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 89 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:red}-1 javadoc{color}.  The javadoc tool appears to have generated 12 warning messages.

    {color:green}+1 checkstyle{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:red}-1 findbugs{color}.  The patch appears to introduce 1 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/12651//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12651//artifact/patchprocess/newPatchFindbugsWarningshbase-rest.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12651//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12651//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12651//artifact/patchprocess/newPatchFindbugsWarningshbase-annotations.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12651//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12651//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12651//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12651//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12651//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12651//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12651//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/12651//artifact/patchprocess/checkstyle-aggregate.html

  Javadoc warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/12651//artifact/patchprocess/patchJavadocWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/12651//console

This message is automatically generated.

FAILURE: Integrated in HBase-1.1 #127 (See [https://builds.apache.org/job/HBase-1.1/127/])
HBASE-6778 Deprecate Chore; its a thread per task when we should have one thread to do all tasks (Jonathan Lawlor) (stack: rev af84b746ceab1e4e6ed8a37ce8f1f4546ad3df5c)
* hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSyncUp.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/HealthCheckChore.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/MockRegionServer.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/ClusterStatusChore.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ServerNonceManager.java
* hbase-common/src/main/java/org/apache/hadoop/hbase/Chore.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/tool/Canary.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestSplitLogManager.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationTrackerZKImpl.java
* hbase-common/src/test/java/org/apache/hadoop/hbase/TestChoreService.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestHFileCleaner.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/replication/TestReplicationStateZKImpl.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HeapMemoryManager.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerServices.java
* hbase-common/src/main/java/org/apache/hadoop/hbase/ScheduledChore.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestServerNonceManager.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestReplicationSourceManager.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/util/ConnectionCache.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitLogWorker.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/ClusterStatusPublisher.java
* hbase-common/src/main/java/org/apache/hadoop/hbase/ChoreService.java
* hbase-rest/src/main/java/org/apache/hadoop/hbase/rest/RESTServlet.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/balancer/BalancerChore.java
* hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionManager.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestCatalogJanitor.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestActiveMasterManager.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/CatalogJanitor.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestTableLockManager.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/Server.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestLogsCleaner.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StorefileRefresherChore.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/util/MockServer.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/MockRegionServerServices.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestClockSkewDetection.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/security/token/TestTokenAuthentication.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHeapMemoryManager.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/backup/TestHFileArchiving.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/SplitLogManager.java
* hbase-common/src/main/java/org/apache/hadoop/hbase/AuthUtil.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestHFileLinkCleaner.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestLoadIncrementalHFiles.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/backup/example/TestZooKeeperTableArchiveClient.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/CleanerChore.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestEndToEndSplitTransaction.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java


Closing issues released in 1.1.0.

