[~sseth]  I attach a patch for this.

* for handleInputInitializerEvent and onVertexStateUpdated, these method would been called in StateChangeNotifier. So catch exception in InputInitializer , wrap is as AMUserCodeException then pass it to StateChangeNotifier. Handle these exception in StateChangeNotifier, send VertexEventFail to fail the vertex.
* Add a new transition from initializing to Failed to enforce fail vertex.
* Add system test in TestExceptionPropagation, but unit test is not added, will add that today.



[~zjffdu] - I don't think we should be changing the StateChangeNotifier at all as part of this patch. That's just a mechanism for notifying interested entities on when the state of vertices / tasks changes. The StateChangeNotifier has no context beyond this - whether the notification was sent out to a VMPlugin / EMPlugin / InputInitializer or maybe other entities later on. It can't really take a decision on what needs to be done in case of failure. It's not a public API and is meant to be invoked by Tez internal components - which would have context information on how to handle errors.

onStateUpdated(VertexStateUpdate) in RootInputInitializerManager can just catch the exception from the user code and inform the Vertex via an event - indicating ROOT_INPUT_INITIALIZER failures (VertexEventRootInputFailed). It could potentially interrupt the corresponding Initializer thread as well - but that will eventually happen via the state machines in any case.

Similarly for handleInputInitializerEvents and onTaskSucceeded (sendEvents). These exceptions should not make it back to the stateChangeNotifier since it wouldn't know how to handle them. Eventually, the InputInitializerManager will likely have a separate thread to send the events to the user (instead of using the AsyncDispatcher thread / statenotifier thread). It'll be better to use the same mechanism of sending a VertexEventRootInputFailed event IMHO.

- Does DAG have to change to add getAppContext() ?


[~sseth] Thanks for your review and suggestion.

You are right, catch the exception in RootInputInitializerManager and send VertexEventRootInputFailed would be much more simple and clean.
I attach a new patch, please help review.

bq. Does DAG have to change to add getAppContext() ?
Revert the change as we don't need it in the new patch.

BTW, I think we should rename RootInputInitializerManager to InputInitializerManager because not only root vertex has InputInitializer, non-root vertex can also have InputInitializer.  

Comments on the patch.

{code}
-            DAGTerminationCause.VERTEX_FAILURE,
-            vertexEvent.getVertexTerminationCause() == null ? VertexTerminationCause.OTHER_VERTEX_FAILURE
-                : vertexEvent.getVertexTerminationCause());
+            DAGTerminationCause.VERTEX_FAILURE, VertexTerminationCause.OTHER_VERTEX_FAILURE);
{code}
This is required so that all vertices don't get the same termination cause as the first vertex to fail ?
We should remove getVertexTerminationCause in a follow up jira, since that seems to be of no use.

{code}
+        String diagnosticMsg = "Vertex failed/killed due to VertexManagerPlugin/EdgeManagerPlugin failed. "
{code}
Will inputInitializer failures never go through this transition ? It may be better to set this up based on the SOURCE information available in the exception.

There's some race conditions possible in the InputInitialzier.
Prior to the patch
 - It's possible for events/notifications to be sent to a complete Initializer since the initializers / events are handled in separate threads. The setComplete() and isComplete checks aren't sufficient to avoid this.
- Ideally, completed initializers should just handle these events gracefully, but that's not something that Tez can guarantee. We need to handle such situations, likely in a separate jira.

With the patch,
It's possible for a INITIALIZER_FAILED event to go out after an INITIALIZER_SUCCESS goes out. Sequence: T1: initializer running, T2: eventReceived/VertexUpdateReceived, throws Exception. T1: completes (the event could be partially handled which triggers completion of initialize()).
Similarly it's possible to get INITILZIER_SUCCEEDED messages after a INITIALIER_FAILED message (in a FAILEd etc state). This isn't as harmful.
This means we could end up getting INITIALIZER_FAILED messages in the INITED / RUNNING and possibly other states.

The state machine in VertexImpl will need to change to handle INITIALIER_FAILED in some more states, and fail the vertex.

And +1 for renaming the file. Please do that just before the commit though - not as part of iterative patches.

bq.  {code}
 DAGTerminationCause.VERTEX_FAILURE,
 vertexEvent.getVertexTerminationCause() == null ? VertexTerminationCause.OTHER_VERTEX_FAILURE
 : vertexEvent.getVertexTerminationCause());
 DAGTerminationCause.VERTEX_FAILURE, VertexTerminationCause.OTHER_VERTEX_FAILURE);
{code}
bq. This is required so that all vertices don't get the same termination cause as the first vertex to fail ?
Yes, otherwise all the vertices' termination would be the same which don't make sense to me. Beside there will be one issue in VertexImpl.checkVertexForCompletion where we will check the termination cause where we don't check ROOT_INPUT_INIT_FAILURE. 

bq. Prior to the patch
bq. It's possible for events/notifications to be sent to a complete Initializer since the initializers / events are handled in separate threads. The setComplete() and isComplete checks aren't sufficient to avoid this.
bq. Ideally, completed initializers should just handle these events gracefully, but that's not something that Tez can guarantee. We need to handle such situations, likely in a separate jira.
After Initialize completed, InputInitliazerManager would been shutdown, will that solve this issue ?

bq. Will inputInitializer failures never go through this transition ? It may be better to set this up based on the SOURCE information available in the exception.
InputInitializer will set TerminationCause as ROOT_INIT_FAILURE rather than AM_USERCODE_EXCEPTION which is a special cause.  Maybe we could still split AMUserCodeException into VertexManagerException/EdgeManagerException, then it would be much more clear and consistency.

bq. The state machine in VertexImpl will need to change to handle INITIALIER_FAILED in some more states, and fail the vertex.
Add more transition in the state machine and also unit test to cover this.

bq. And +1 for renaming the file. Please do that just before the commit though - not as part of iterative patches.
Actually it is more about renaming RootInputInitlaizerManager, do the following changes:
* RootInputInitializerManager -> InputInitializerManager
* TezRootInputInitializerContextImpl -> TezInputInitializerContextImpl
* VertexEventRootInputInitialized -> VertexEventInputInitialized
* VertexEventRootInputFailed -> VertexEventInputFailed
* VertexTerminationCause.ROOT_INPUT_INIT_FAILURE -> VertexTerminationCause.INPUT_INIT_FAILURE.
* EventType.ROOT_INPUT_DATA_INFORMATION_EVENT -> EventType.INPUT_DATA_INFORMATION_EVENT
* EventType.ROOT_INPUT_INITIALIZER_EVENT -> EventType.INPUT_INITIALIZER_EVENT
* VertexEventType.V_ROOT_INPUT_INITIALIZED -> VertexEventType.V_INPUT_INITIALIZED
* VertexEventType.V_ROOT_INPUT_FAILED -> VertexEventType.V_INPUT_INIT_FAILED





One bit to fix in the patch - V_ROOT_INPUT_FAILED at RUNNING should go into TERMINATING state so that any tasks that have started are killed.

Could you please post the patch without renames - otherwise, a review is really difficult. In fact, lets just do the renames in a follow up jira since they're fairly far-reaching, and end up dwarfing the changes in the patch.

[~sseth] Update the patch

* Revert he renaming changes
* Change the State to go into TERMINATING at RUNNING when get V_ROOT_INPUT_FAILED.



+1. Looks good. Thanks [~zjffdu]

Thanks [~sseth],

Committed to master and branch-0.5

[~sseth] The origin patch has one race issue in test case. Previously I'd like simulate the behavior of  INIT_FAILED after INIT_SUCCEEDED in InputInitliazed, INIT_SUCCEEDED will cause the RootInputInitializerManager shutdown, so I make the InputIntializer thread sleep 1 second to wait for the RootInputInitializerManager shutdown and catch the exception to throw it. But the issue here is that executor.shutdownNow() is not blocking method, so here would result in a race issue between InputInitializer thread and AsyncDispatcher thread.  

It's not easy to simulate the behavior of INIT_FAILED after INIT_SUCCEEDED in InputInitializer , so in the new patch I did it in AsyncDispatcher thread.

commit 8f8a81f7a17f9018ae4e87bf0fca9d6cdc0a5ba4 (HEAD, origin/master, origin/HEAD, master, TEZ-1703)
Author: Jeff Zhang <zjffdu@apache.org>
Date:   Fri Oct 31 13:30:10 2014 +0800

    TEZ-1703. addendum - fix flaky test. (zjffdu)

