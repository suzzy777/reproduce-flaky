Change implemented here https://github.com/apache/cassandra/commit/40687bd44bf21b1e5caf4c42b85035e66e51e6bd

http://cassci.datastax.com/job/trunk_testall/63/testReport/org.apache.cassandra.io.sstable/IndexSummaryManagerTest/testCompactionRace/

This test is consistently timing out on the Windows CI env:
http://cassci.datastax.com/job/cassandra-2.2_utest_win32/5/testReport/junit/org.apache.cassandra.io.sstable/IndexSummaryManagerTest/testCompactionRace/

A couple of observations: 1) there's a non-deterministic time required for this test to pass, 2) major compactions on CI take an order of magnitude longer to complete than they do on my SSD-enabled laptop, and 3) upping the timeout on all unit tests to 120 makes this test pass on the CI box *sometimes*.

I think we should move testCompactionRace out to a long test. [~benedict]: you're the author of this test and it's been flaky w/regards to passing off and on since introduction. Thoughts on long-testing it?

Actually [~tjake] is the author; I just committed it along with the fix(es). From my POV we should *both* 1) move it to a long test; 2) make it more robust

I'm pretty sure performing an actual major compaction is unnecessary, and this is largely where the problem comes from (with the indeterminate sleeping as we wait for cessation of other active tasks). What we need is for the instances of reader to change as we try marking the files for redistribution, and we should probably just do this in a direct tight loop so that both code sections are spinning in direct contention. This both increases the likelihood of the failure scenario, but also ensures that if we don't encounter it we can stop promptly (by just spinning for a fixed interval, and calling it a day if we haven't failed).

bq. Actually T Jake Luciani is the author; I just committed it along with the fix(es)
Now that you mention that, I'm pretty sure we've already gone over this in JIRA comments on another ticket.

re-committed [~aweisberg] fix in 4362e71

This is still happening and pretty much hard failing.

I ran six builds of this in cassci and it it didn't fail in any of them.
http://cassci.datastax.com/view/Dev/view/aweisberg/job/aweisberg-C-9271-2-testall/

https://github.com/apache/cassandra/compare/trunk...aweisberg:C-9271-2
https://github.com/apache/cassandra/compare/trunk...aweisberg:C-9271-2.diff

I stopped at 106 loop runs over this test - lgtm :)

It may fix this behaviour, but unfortunately I am -1 on using Thread.yield(). It depends on the priority of the thread, and that is generally not good practice. It could lead to spinning burning a full CPU flat out until compactions acquiesce. I don't like making application behaviour even slightly less good in order to fix a problematic test.

As I stated above, it should be possible to modify this test to simply mark and unmark compacting directly, rather than actually perform a major compaction.

OK I'll back out Thread.yield().

I propose we remove the test and replace it with this single line. The goal of the test was to ensure we could not mark compacting the incorrect instance of an sstable. This test checks that.

OK. I am +1 on replacing it with the simpler assertion on the invariant maintained by Tracker.

