+1
Running this 100 times before commit, just to be sure

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 11s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  0s{color} | {color:blue} Findbugs executables are not available. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green}  0m  0s{color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
|| || || || {color:brown} master Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  5m 35s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 44s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  1m  4s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} shadedjars {color} | {color:green}  5m 44s{color} | {color:green} branch has no errors when building our shaded downstream artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 28s{color} | {color:green} master passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  4m 29s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 41s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 41s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} checkstyle {color} | {color:red}  1m  2s{color} | {color:red} hbase-server: The patch generated 1 new + 1 unchanged - 1 fixed = 2 total (was 2) {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedjars {color} | {color:green}  4m 42s{color} | {color:green} patch has no errors when building our shaded downstream artifacts. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 47m 56s{color} | {color:green} Patch does not cause any errors with Hadoop 2.6.1 2.6.2 2.6.3 2.6.4 2.6.5 2.7.1 2.7.2 2.7.3 or 3.0.0-alpha4. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 28s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 94m 49s{color} | {color:green} hbase-server in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 18s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black}162m 38s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hbase:eee3b01 |
| JIRA Issue | HBASE-19150 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12895263/HBASE-19150.patch |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  shadedjars  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux 0e852a866222 3.13.0-129-generic #178-Ubuntu SMP Fri Aug 11 12:48:20 UTC 2017 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / b3e438b9c5 |
| Default Java | 1.8.0_141 |
| checkstyle | https://builds.apache.org/job/PreCommit-HBASE-Build/9565/artifact/patchprocess/diff-checkstyle-hbase-server.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/9565/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/9565/console |
| Powered by | Apache Yetus 0.5.0   http://yetus.apache.org |


This message was automatically generated.



Pushed to branch-1.4 and up

UUID.randomUUID uses the SecureRandom generator and uses up system entropy. Can we switch to a different generator?

Other than that, great patch - I was looking at this failure last week but got distracted before I could figure out what was going on. Thanks, [~churromorales]!

FAILURE: Integrated in Jenkins build HBase-Trunk_matrix #3984 (See [https://builds.apache.org/job/HBase-Trunk_matrix/3984/])
HBASE-19150 TestSnapshotWithAcl is flaky (apurtell: rev 8d1e6a3e2317231786d56924fe03f8138c3a6352)
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotWithAcl.java


SUCCESS: Integrated in Jenkins build HBase-2.0 #784 (See [https://builds.apache.org/job/HBase-2.0/784/])
HBASE-19150 TestSnapshotWithAcl is flaky (apurtell: rev 663f3c7b50444b4363698ebdceacc66c08c6f2b0)
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestSnapshotWithAcl.java


[~apurtell], [~churromorales] - did y'all see my request above?

Edit: I see that there is a lot of extant usage of UUID.randomUUID in our code base, I'll file a new issue to clean it up.

bq.  I see that there is a lot of extant usage of UUID.randomUUID in our code base, I'll file a new issue to clean it up.

Yes, this sounds good. Let's make this change everwhere it occurs not just in this test. (We've done passes before removing SecureRandom where not needed for same reason.)

Generally I think we can do
{code}
new UUID(ThreadLocalRandom.current().nextLong(), ThreadLocalRandom.current().nextLong())
{code}


