Thanks for reporting, if you can then you are welcome to send your suggested fix as a PR against main branch

[~davsclaus] I prototyped some changes here [https://github.com/apache/camel/pull/8713,] but it's not as trivial as I expected (for async calls), and I would appreciate any guidance on the approach I've done in the PR or alternatives. Thanks!

Thanks for reporting and the excellent work on fixing/improving this

Should we look into backporting this for the upcoming {{3.18.5}} LTS release?

No its a bit too invasive in the core (not isolated to opentelemetry only)

Please review: https://github.com/apache/camel/pull/8911

Hi [~Molkova] 

As per conversation [here|https://github.com/apache/camel/pull/8911#issuecomment-1355233167] just to let you know that the flaky test has popped up on Jenkins build as well:

https://ci-builds.apache.org/job/Camel/job/Camel%20JDK11%20Build%20(S390x)/job/main/409/testReport/junit/org.apache.camel.opentelemetry/CurrentSpanTest/testContextDoesNotLeak/
 
{code}
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[1E6AD74DFFAFE6E-000000000000000A]
	at org.apache.camel.CamelExecutionException.wrapCamelExecutionException(CamelExecutionException.java:45)
	at org.apache.camel.support.AbstractExchange.setException(AbstractExchange.java:597)
	at org.apache.camel.support.DefaultExchange.setException(DefaultExchange.java:27)
	at org.apache.camel.processor.MulticastProcessor$MulticastTask.aggregate(MulticastProcessor.java:445)
	at org.apache.camel.processor.MulticastProcessor$MulticastReactiveTask.lambda$run$0(MulticastProcessor.java:570)
	at org.apache.camel.AsyncCallback.run(AsyncCallback.java:44)
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:181)
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:54)
	at org.apache.camel.processor.MulticastProcessor.lambda$schedule$1(MulticastProcessor.java:336)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: org.opentest4j.AssertionFailedError: expected: <false> but was: <true>
	at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
	at org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)
	at org.junit.jupiter.api.AssertFalse.failNotFalse(AssertFalse.java:63)
	at org.junit.jupiter.api.AssertFalse.assertFalse(AssertFalse.java:36)
	at org.junit.jupiter.api.AssertFalse.assertFalse(AssertFalse.java:31)
	at org.junit.jupiter.api.Assertions.assertFalse(Assertions.java:228)
	at org.apache.camel.opentelemetry.CurrentSpanTest$1.lambda$configure$0(CurrentSpanTest.java:221)
	at org.apache.camel.AggregationStrategy.aggregate(AggregationStrategy.java:86)
	at org.apache.camel.processor.MulticastProcessor.doAggregateInternal(MulticastProcessor.java:882)
	at org.apache.camel.processor.MulticastProcessor.doAggregateSync(MulticastProcessor.java:863)
	at org.apache.camel.processor.MulticastProcessor.doAggregate(MulticastProcessor.java:848)
	at org.apache.camel.processor.MulticastProcessor$MulticastTask.aggregate(MulticastProcessor.java:439)
	... 10 more
{code}

