What is the point of doing async initialization in constructor?

I think it is a legitimate assumption that whenever there is a class taking time to initialize, the client of such class may want it to happen asynchronously, to keep the main thread alive. The question is - on who's side it is implemented.

The same could be done in the client code by simply creating MetastorePlugin on a separate thread and allowing callbacks only after creation is complete, at which point complete initialization is guaranteed. This approach has many advantages, one of them being a very simple state model - once you can get reference to MetastorePlugin, it is fully functional.

I agree that the synchronization for the MetastorePlugin is quite broken at various places.

[~vspector@gmail.com]
Can you post a reviewboard link for your changes?

Code review: https://reviews.apache.org/r/53125/

Just to re-iterate, I'd rather see the patch that eliminates asynchronous initialization altogether, which would make the code much cleaner; but I think the reviewers should weigh in on this. The initial patch tries to preserve the original intent, only fixing some aspects of the implementation.

Can you clarify what aspects are you fixing with the suggested patch and what aspects you are leaving alone? Do you plan to open another JIRA for things that are not addressed here?

Here are the results of testing the latest attachment
https://issues.apache.org/jira/secure/attachment/12834768/SENTRY-1508.001.patch against master.

{color:green}Overall:{color} +1 all checks pass

{color:green}SUCCESS:{color} all tests passed

Console output: https://builds.apache.org/job/PreCommit-SENTRY-Build/2084/console

This message is automatically generated.

I edited the description to make it more clear what this JIRA is/ is not going to address.

To re-iterate: this JIRA honors the original design, which is supporting asynchronous initialization of MetastorePlugin; it just tries to fix the implementation bugs, and those bugs should all be covered in the Description.

However, should we decide to drop support of asynchronous initialization altogether (perhaps, as the result of code review and thinking of all the implementation complexities?), I'd be strongly in favor of it. In this case, I'd rather submit another patch within the same JIRA, so no, I do not propose another JIRA.

What is the expected semantics of callers to various MetastorePlugin functions when 

* MetastorePlugin initialization isn't complete - should they wait or go ahead?
* MetastorePlugin initialization failed - should they also fail or try to recover?


I don't believe I've seen expected semantics documented anywhere, so I can only say what the code attempts to implement.

The existing code's behavior does not distinguish between the two states. The constructor tries to initialize the local cache of authorized paths (authzPaths) and if it fails, authzPaths always stays null with no attempt to re-initialize it. Lack of re-initialization attempt actually makes sense, because when some invalid HMS entries break initialization, it must be fixed first, so retrying would be futile. MetastorePlugin still gets constructed and Hive code has no problems using it.

Once authzPaths fails to initialize (or is not yet initialized), it stays null. The behavior of MetastorePlugin is as follows:

1)  the synchronization thread (SyncTask) periodically makes sure that the local cache is in-sync with the Sentry-side. It will short-circuit when authzPaths == null. This fact is invisible to the client code, unless one checks the logs. The result - increased odds of Sentry state getting out-of-sync.

2) Each public callback API (addPath, removeAllPaths, removePath, renameAuthzObject) does two things, in that order:
a) updates local cache, i.e. authzPaths, which, of course, fails if authzPaths == null due to either initialization-in-progress, or failed initialization.
b) attempts to notify Sentry, which fails whenever (a) throws an exception, which happens for the reasons explained in (a). Sentry notification, actually, can fail as well, due to the comm error, and fail silently (only checking the logs would reveal the failure) - which is another issue.

No direct way exists for the client to check whether MetastorePlugin has been initialized successfully, apart from consistent failure of callback APIs.

The scope of the initial patch is to simplify detection and troubleshooting of the failed cache initialization + plus proactively fix some found thread synchronization issues affecting the normal flow. I believe, there should be no way of using MetastorePlugin after failed initialization, and it's straightforward to fix - but that that would certainly affect public APIs behavior and may affect Hive code. If we remove support for async initialization, then we address initialization failure by simply failing to construct MetastorePlugin (which would also affect Hive code). It is up to us to decide whether it is worth spending time on, or we should wait for HA where we'll hopefully do things right.

Linking related jiras here: Sentry-1260 attempts to improve error message at the time of intializer failure and Sentry-1270 improves the error message for following cases when intialization has failed. SENTRY-840 proposes to get rid of the async configurability.

Per our discussion, the following approach has been adopted:

a) Drop support of asynchronous initialization of MetastorePlugin. It will significantly simplify the code, eliminating handling of "initialization-in-progress" case (in particular updateQueue and syncSent - related logic)

b) MetastorePlugin should still be initialized, even when cache initialization has failed. This is in consideration of the existing client code (Hive daemon) that would crush otherwise.

c) Failed cache initialization should make MetastorePlugin totally unusable. It makes no sense (and would be misleading) to keep it partially functional. Every public callback API should immediately throw the same exception with the message clearly indicating the cause of initialization failure.

d) SENTRY-840 will be naturally addressed by this patch, since we are removing support for async initialization.

e) the existing patch can be ignored; new patch to be generated shortly


Just to update here: Sentry1260 and Sentry-1270 have been committed.

Uploading brand-new patch with MetastorePlugin only supporting synchronous initialization mode only. Found and fixed additional concurrency issues that might result in Sentry updates being sent out-of-order (i.e. their sequence numbers being non-monotonous).

Updated code review: https://reviews.apache.org/r/53125/diff/2/

Here are the results of testing the latest attachment
https://issues.apache.org/jira/secure/attachment/12835907/SENTRY-1508.001.patch against master.

{color:green}Overall:{color} +1 all checks pass

{color:green}SUCCESS:{color} all tests passed

Console output: https://builds.apache.org/job/PreCommit-SENTRY-Build/2115/console

This message is automatically generated.

Per discussion with Sravya, all public callback APIs of MetastorePlugin - addPath(), removePath(), renameAuthzObject() - should throw unchecked exception upon catching SentryMalformedPathException, when the path passed to the method is malformed (or null). It would clearly communicate to Hive code that Sentry notification is broken. This is a minor change, patch will be available shortly.



Patch is available, new code review: https://reviews.apache.org/r/53125/diff/3/


Here are the results of testing the latest attachment
https://issues.apache.org/jira/secure/attachment/12836418/SENTRY-1508.002.patch against master.

{color:red}Overall:{color} -1 due to 4 errors

{color:red}ERROR:{color} mvn test exited 1
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.hdfs.TestHDFSIntegrationAdvanced
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.hdfs.TestHDFSIntegrationAdvanced
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.hdfs.TestHDFSIntegrationAdvanced

Console output: https://builds.apache.org/job/PreCommit-SENTRY-Build/2117/console

This message is automatically generated.

Here are the results of testing the latest attachment
https://issues.apache.org/jira/secure/attachment/12836441/SENTRY-1508.002.patch against master.

{color:red}Overall:{color} -1 due to 3 errors

{color:red}ERROR:{color} mvn test exited 1
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.dbprovider.TestDbPrivilegesAtFunctionScope
{color:red}ERROR:{color} Failed: org.apache.sentry.provider.db.generic.service.persistent.TestPrivilegeOperatePersistence

Console output: https://builds.apache.org/job/PreCommit-SENTRY-Build/2118/console

This message is automatically generated.

Here are the results of testing the latest attachment
https://issues.apache.org/jira/secure/attachment/12836446/SENTRY-1508.002.patch against master.

{color:red}Overall:{color} -1 due to 3 errors

{color:red}ERROR:{color} mvn test exited 1
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.dbprovider.TestDbPrivilegesAtFunctionScope
{color:red}ERROR:{color} Failed: org.apache.sentry.provider.db.service.thrift.TestSentryServerWithoutKerberos

Console output: https://builds.apache.org/job/PreCommit-SENTRY-Build/2119/console

This message is automatically generated.

Here are the results of testing the latest attachment
https://issues.apache.org/jira/secure/attachment/12836452/SENTRY-1508.001.patch against master.

{color:red}Overall:{color} -1 due to 3 errors

{color:red}ERROR:{color} mvn test exited 1
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.dbprovider.TestDbPrivilegesAtFunctionScope
{color:red}ERROR:{color} Failed: org.apache.sentry.provider.db.service.thrift.TestSentryWebServerWithoutSecurity

Console output: https://builds.apache.org/job/PreCommit-SENTRY-Build/2120/console

This message is automatically generated.

[~vspector@gmail.com] Can you also add reviewboard link?

Latest review board link, with all feedback integrated: https://reviews.apache.org/r/53125/diff/5/

Here are the results of testing the latest attachment
https://issues.apache.org/jira/secure/attachment/12837031/SENTRY-1508.003.patch against master.

{color:green}Overall:{color} +1 all checks pass

{color:green}SUCCESS:{color} all tests passed

Console output: https://builds.apache.org/job/PreCommit-SENTRY-Build/2127/console

This message is automatically generated.

Uploaded patch #4, with proper Javadoc formatting

Here are the results of testing the latest attachment
https://issues.apache.org/jira/secure/attachment/12837865/SENTRY-1508.004.patch against master.

{color:red}Overall:{color} -1 due to 2 errors

{color:red}ERROR:{color} mvn test exited 1
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.dbprovider.TestDbPrivilegesAtFunctionScope

Console output: https://builds.apache.org/job/PreCommit-SENTRY-Build/2140/console

This message is automatically generated.

Latest code review link: https://reviews.apache.org/r/53125/diff/7/

1. Added more javadoc per multiple requests.
2. More logical choice of method names (due to removed legacy support of asynchronous initialization).

Here are the results of testing the latest attachment
https://issues.apache.org/jira/secure/attachment/12840107/SENTRY-1508.005.patch against master.

{color:red}Overall:{color} -1 due to 2 errors

{color:red}ERROR:{color} mvn test exited 1
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.hdfs.TestHDFSIntegrationAdvanced

Console output: https://builds.apache.org/job/PreCommit-SENTRY-Build/2168/console

This message is automatically generated.

Here are the results of testing the latest attachment
https://issues.apache.org/jira/secure/attachment/12840978/SENTRY-1508.006.patch against master.

{color:red}Overall:{color} -1 due to 5 errors

{color:red}ERROR:{color} mvn test exited 1
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.hdfs.TestHDFSIntegrationEnd2End
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.hdfs.TestHDFSIntegrationEnd2End
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.hdfs.TestHDFSIntegrationEnd2End
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.hdfs.TestHDFSIntegrationEnd2End

Console output: https://builds.apache.org/job/PreCommit-SENTRY-Build/2172/console

This message is automatically generated.

Latest code review link: https://reviews.apache.org/r/53125/diff/8/

Changes:
1. Removed all "volatile" definitions. Some are replaced with "final" via using temp. variables in the constructor. Others are consistently guarded by "notificationLock".
2. In one place, replaced try-catch-finally with try-with-resource (programming style).
3. Misc. javadoc enhancements.
4. No bug fixes.

Latest code review: https://reviews.apache.org/r/53125/diff/9/

Nitpicking: polished top javadoc section describing MetastorePlugin implementation

Latest code review:
https://reviews.apache.org/r/53125/diff/10/

Fixed a subtle problem having to do with initializing final variable. For some reason, not picked up by command-line build system, might be some javac flags ...

Here are the results of testing the latest attachment
https://issues.apache.org/jira/secure/attachment/12841124/SENTRY-1508.007.patch against master.

{color:red}Overall:{color} -1 due to 5 errors

{color:red}ERROR:{color} mvn test exited 1
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.hdfs.TestHDFSIntegrationEnd2End
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.hdfs.TestHDFSIntegrationEnd2End
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.hdfs.TestHDFSIntegrationEnd2End
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.hdfs.TestHDFSIntegrationEnd2End

Console output: https://builds.apache.org/job/PreCommit-SENTRY-Build/2173/console

This message is automatically generated.

Here are the results of testing the latest attachment
https://issues.apache.org/jira/secure/attachment/12841128/SENTRY-1508.008.patch against master.

{color:red}Overall:{color} -1 due to 2 errors

{color:red}ERROR:{color} mvn test exited 1
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.dbprovider.TestDbPrivilegesAtFunctionScope

Console output: https://builds.apache.org/job/PreCommit-SENTRY-Build/2174/console

This message is automatically generated.

Here are the results of testing the latest attachment
https://issues.apache.org/jira/secure/attachment/12842258/SENTRY-1508.009.patch against master.

{color:red}Overall:{color} -1 due to 5 errors

{color:red}ERROR:{color} mvn test exited 1
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.hdfs.TestHDFSIntegrationEnd2End
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.hdfs.TestHDFSIntegrationEnd2End
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.hdfs.TestHDFSIntegrationEnd2End
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.hdfs.TestHDFSIntegrationEnd2End

Console output: https://builds.apache.org/job/PreCommit-SENTRY-Build/2189/console

This message is automatically generated.

Here are the results of testing the latest attachment
https://issues.apache.org/jira/secure/attachment/12842389/SENTRY-1508.010.patch against master.

{color:red}Overall:{color} -1 due to 2 errors

{color:red}ERROR:{color} mvn test exited 1
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.hive.TestPerDatabasePolicyFile

Console output: https://builds.apache.org/job/PreCommit-SENTRY-Build/2193/console

This message is automatically generated.

Here are the results of testing the latest attachment
https://issues.apache.org/jira/secure/attachment/12842438/SENTRY-1508.011.patch against master.

{color:red}Overall:{color} -1 due to 3 errors

{color:red}ERROR:{color} mvn test exited 1
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.hdfs.TestHDFSIntegrationAdvanced
{color:red}ERROR:{color} Failed: org.apache.sentry.tests.e2e.hdfs.TestHDFSIntegrationAdvanced

Console output: https://builds.apache.org/job/PreCommit-SENTRY-Build/2194/console

This message is automatically generated.

Here are the results of testing the latest attachment
https://issues.apache.org/jira/secure/attachment/12842478/SENTRY-1508.012.patch against master.

{color:green}Overall:{color} +1 all checks pass

{color:green}SUCCESS:{color} all tests passed

Console output: https://builds.apache.org/job/PreCommit-SENTRY-Build/2196/console

This message is automatically generated.

Latest review board link: https://reviews.apache.org/r/53125/diff/14/

Seems like I've nailed down the cause of flaky HDFS integration tests. JUnit creates multiple instances of MetastorePlugin (via multiple instances of Hive metastore) and runs different tests on different instances. Each MetastorePlugin starts its own housekeeping thread to synchronize HMS paths with Sentry daemon. Since there is no proper shutdown API for MetastorePlugin (design oversight), there is no proper way to shutdown housekeeping thread, so multiple threads "synchronize" state with Sentry daemon, messing it up pretty badly.

Added test hookup logic, shutting down previous housekeeping thread (if any found)  on each creation of new MetastorePlugin instance. This logic is no-op in deployment scenarion, where only a single instance of MetastorePlugin is created.

