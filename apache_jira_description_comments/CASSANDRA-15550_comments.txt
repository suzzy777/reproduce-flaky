This one has been around quite some time: ~4 years.  In defense of that, it did sometimes take nearly 300 runs to reproduce it.  The cause of this very tight race is that aborting the session is done asynchronously in nonPeriodicTasks, so we need to make sure that isn't pending when we call finishTasks since it checks the {code}completed{code} variable which won't be true until the task is aborted. Patch here: https://github.com/driftx/cassandra/tree/CASSANDRA-15550 to do this, but it does raise the question to me of should finishTasks actually _not_ finish if the abort hasn't set completed to true? Why would we need to call it in idempotent fashion? As evidenced by the test it seems like this is at least _potential_ for leaking a reference.

With the patch the test passed a couple thousand times.

bq. should finishTasks actually not finish if the abort hasn't set completed to true? Why would we need to call it in idempotent fashion?

[~benedict] [~aleksey] [~djoshi] would love your input to those questions.  I can help review but not as familiar with streaming so harder for me to answer what the expected semantics *should* be

I don't have any immediate comments but I can get to reviewing this around Monday if you are ok waiting until then?

Which Monday were you referring to? ;)  Just kidding, but friendly reminder if you have time.

Or better, what year?

ok, finally got around to reviewing this on a *Tuesday* ;). The only feedback is limit the number of retries to some finite value (like 3, 5 or 10) and abort the test if streaming doesn't complete (abort) within those retries. You can fix this on commit if you'd like.

Commited with retries limited to 10, since recently I've seen a trend where tests fail on weaker machines, and 10 retries is still only 100ms total.

