{panel:title=Branch: [pull/9321/head] Base: [master] : No blockers found!|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}{panel}
{panel:title=Branch: [pull/9321/head] Base: [master] : New Tests (9)|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}
{color:#00008b}Basic 3{color} [[tests 9|https://ci.ignite.apache.org/viewLog.html?buildId=6179048]]
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRestoreStoreSwapTest.testSnapshotRestoreDuringForceReassignment - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRemoteRequestTest.testSnapshotRemoteRequestEachOther - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRemoteRequestTest.testSnapshotRequestRemoteSourceNodeLeft - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRemoteRequestTest.testRemoteRequestedInitiatorNodeLeft - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRemoteRequestTest.testSnapshotRequestRemoteCancel - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRestoreStoreSwapTest.testSnapshotCachesStoppedIfNodeCrashed - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRestoreStoreSwapTest.testSnapshotCachesStoppedIfLoadingFailOnRemote - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRestoreStoreSwapTest.testRestoreAllGroups - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRemoteRequestTest.testSnapshotRemoteRequestFromSingleNode - PASSED{color}

{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=6178698&amp;buildTypeId=IgniteTests24Java8_RunAll]

[~alex_pl] Can you review my changes?

{panel:title=Branch: [pull/9539/head] Base: [master] : Possible Blockers (1)|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1}
{color:#d04437}Basic 3{color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=6278677]]
* IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRestoreFromRemoteTest.testRestoreAllGroups[Encryption is disabled] - New test duration 86s is more that 1 minute

{panel}
{panel:title=Branch: [pull/9539/head] Base: [master] : New Tests (8)|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}
{color:#00008b}Basic 3{color} [[tests 8|https://ci.ignite.apache.org/viewLog.html?buildId=6278677]]
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRemoteRequestTest.testSnapshotRequestRemoteSourceNodeLeft[Encryption is disabled] - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRemoteRequestTest.testRemoteRequestedInitiatorNodeLeft[Encryption is disabled] - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRemoteRequestTest.testSnapshotRequestRemoteCancel[Encryption is disabled] - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRestoreFromRemoteTest.testSnapshotCachesStoppedIfLoadingFailOnRemote[Encryption is disabled] - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRestoreFromRemoteTest.testRestoreAllGroups[Encryption is disabled] - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRemoteRequestTest.testSnapshotRemoteRequestFromSingleNode[Encryption is disabled] - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRemoteRequestTest.testSnapshotRemoteRequestEachOther[Encryption is disabled] - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRestoreFromRemoteTest.testRestoreNoRebalance[Encryption is disabled] - PASSED{color}

{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=6277351&amp;buildTypeId=IgniteTests24Java8_RunAll]

The {{testRestoreAllGroups}} has exceeded the limit of 1 min duration due to additional checks have been added. The test still passes. The duration will be fixed under the [IGNITE-15233|https://issues.apache.org/jira/browse/IGNITE-15233] issue.

{panel:title=Branch: [pull/9575/head] Base: [ignite-2.12] : Possible Blockers (1)|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1}
{color:#d04437}Basic 3{color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=6279297]]
* IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRestoreFromRemoteTest.testRestoreAllGroups[Encryption is disabled] - New test duration 74s is more that 1 minute

{panel}
{panel:title=Branch: [pull/9575/head] Base: [ignite-2.12] : New Tests (8)|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}
{color:#00008b}Basic 3{color} [[tests 8|https://ci.ignite.apache.org/viewLog.html?buildId=6279297]]
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRemoteRequestTest.testSnapshotRequestRemoteSourceNodeLeft[Encryption is disabled] - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRemoteRequestTest.testRemoteRequestedInitiatorNodeLeft[Encryption is disabled] - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRemoteRequestTest.testSnapshotRequestRemoteCancel[Encryption is disabled] - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRestoreFromRemoteTest.testSnapshotCachesStoppedIfLoadingFailOnRemote[Encryption is disabled] - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRestoreFromRemoteTest.testRestoreAllGroups[Encryption is disabled] - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRemoteRequestTest.testSnapshotRemoteRequestFromSingleNode[Encryption is disabled] - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRemoteRequestTest.testSnapshotRemoteRequestEachOther[Encryption is disabled] - PASSED{color}
* {color:#013220}IgniteBasicWithPersistenceTestSuite: IgniteSnapshotRestoreFromRemoteTest.testRestoreNoRebalance[Encryption is disabled] - PASSED{color}

{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=6278514&amp;buildTypeId=IgniteTests24Java8_RunAll]

Merged to the master branch. 
[~alex_pl] thank you for the review.

I'll merge changes to the 2.12 branch soon after a few days of silence checking there are no flaky tests related to these changes.

Cherry-picked to the 2.12 branch.

Folks, my notes during the issue implementation:

{code}
 Snapshot recovery with transfer partitions.
 
 TODO: Some notes left to do for the restore using rebalancing:
  (done) 1. Disable WAL for starting caches.
  (done) 2. Own partitions on exchange (like the rebalancing does).
  (done) 3. Handle and fire affinity change message when waitInfo becomes empty.
  (done) 4. Load partitions from remote nodes.
  (no need) 5. Set partition to MOVING state during copy from snapshot and read partition Metas.
  (done) 6. Replace index if topology match partitions.
  (done) 7. Rebuild index if need.
  8. Check the partition reservation during the restore if a next exchange occurs (see message:
  Cache groups were not reserved [[[grpId=-903566235, grpName=shared], reason=Checkpoint was marked
  as inapplicable for historical rebalancing]])
  (done) 9. Add cache destroy rollback procedure if loading was unsuccessful.
  (done) 10. Crash-recovery when node crashes with started, but not loaded caches.
  (?) 11. Do not allow schema changes during the restore procedure.
  12. Restore busy lock should throw exception if a lock acquire fails.
  (?) 13. Should we clean the 'dirty' flag prior to markCheckpointBegin, so pages won't be collected by the checkpoint?
  (?) 14. cancelOrWaitPartitionDestroy should we wait for partition destroying.
  (done) 15. prevent page store initialization on write if tag has been incremented.
  (?) 16. Register snapshot task by request id not by snapshot name.
  (?) 17. Does waitRebInfo need to be cleaned on DynamicCacheChangeFailureMessage occurs for restored caches?
  (?) 18. Do we need to remove cache from the waitInfo rebalance groups prior to cache actually rollback fired?
  (?) 19. Exclude partitions for restoring caches from PME.
  20. Make the CacheGroupActionData private inner class.
  21. Partitions may not be even created in a snapshot.
  22. Snapshot interrupted during caches loading from snapshot.
 
 Other strategies to be memento to:
 
 1. Load partitions from snapshot, then start cache groups
 - registered cache groups calculated from discovery thread, no affinity cache data can be calculated without it
 - index rebuild may be started only after cache group start, will it require cache availability using disabled proxies?
 - Can affinity be calculated on each node? Node attributes may cause some issues.
 
 
 2. Start cache groups disabled, then load partitions from snapshot
 - What would happen with partition counters on primaries and backups? (probably not required)
 - Should the partition map be updated on client nodes?
 - When partition is loaded from snapshot, should we update partition counters under checkpoint?
 
 3. Start cache disabled and load data from each partition using partition iterator (defragmentation out of the box + index rebuild)
 3a. Transfer snapshot partition files from remove node and read them as local data.
 3b. Read partitions on remote node and transfer data via Supply cache message.
 - cacheId is not stored in the partition file, so it's required to obtain it from the cache data tree
 - data streamer load job is not suitable for caches running with disabled cache proxies
 - too many dirty pages can lead to data eviction to ssd
 
 4. Start cache and load partitions as it rebalancing do (transfer files)
 - There is no lazy init for index partition
 - node2part must be updated on forceRecreatePartition method call
 - do not own partitions after cache start
 - update node2part map after partitions loaded from source and start refreshPartitions/affinityChange (each node sends
   a single message with its own cntrMap to the coordinator node, than coordinator resends aggregated message to the whole
   cluster nodes on update incomeCntrMap).
 - Two strategies for the restore on the same topology with indexes: start cache group from preloaded files or start cache
   and then re-init index for started cache group. The second case will require data structures re-initialization on the fly.
 
 
 IMPLEMENTATION NOTES
 ---------------------
 
 There are still some dirty pages related to processing partition available in the PageMemory.
 
 Loaded:
 - need to set MOVING states to loading partitions.
 - need to acquire partition counters from each part
 
 The process of re-init options:
 1. Clear heap entries from GridDhtLocalPartition, swap datastore, re-init counters
 2. Re-create the whole GridDhtLocalPartition from scratch in GridDhtPartitionTopologyImpl
 as it the eviction does
 
 The re-init notes:
 - clearAsync() should move the clearVer in clearAll() to the end.
 - How to handle updates on partition prior to the storage switch? (the same as waitPartitionRelease()?)
 - destroyCacheDataStore() calls and removes a data store from partDataStores under lock.
 - CacheDataStore markDestroyed() may be called prior to checkpoint?
 - Does new pages on acquirePage will be read from new page store after tag has been incremented?
 - invalidate() returns a new tag -> no updates will be written to page store.
 - Check GridDhtLocalPartition.isEmpty and all heap rows are cleared
 - Do we need to call ClearSegmentRunnable with predicate to clear outdated pages?
 - getOrCreatePartition() resets also partition counters of new partitions can be updated
 only on cp-write-lock (GridDhtLocalPartition ?).
 - update the cntrMap in the GridDhtTopology prior to partition creation
 - WAL logged PartitionMetaStateRecord on GridDhtLocalPartition creation. Do we need it for re-init?
 - check there is no reservations on MOVING partition during the switch procedure
 - we can applyUpdateCounters() from exchange thread on coordinator to sync cntrMap and
 locParts in GridDhtPartitionTopologyImpl
{code}

