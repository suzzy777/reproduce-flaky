For hlog generated by 1.x, using WALPlayer from hbase2 would result in:
{code}
2017-11-02 21:22:40,907 INFO  [main] mapreduce.Job: Task Id : attempt_1509641483571_0003_m_000000_0, Status : FAILED
Error: java.lang.ClassCastException: org.apache.hadoop.hbase.regionserver.wal.WALEdit cannot be cast to org.apache.hadoop.hbase.wal.WALEdit
        at org.apache.hadoop.hbase.mapreduce.WALPlayer$WALCellMapper.map(WALPlayer.java:143)
        at org.apache.hadoop.mapreduce.Mapper.run(Mapper.java:146)
        at org.apache.hadoop.mapred.MapTask.runNewMapper(MapTask.java:793)
{code}
HBASE-16479 relocated WALEdit.

Chatting with Enis, he mentioned adding translation for handling hbase.regionserver.wal.WALEdit

In later comment, Stack mentioned that WALPlayer version matching the relocated WALEdit should be used.

Please outline the approach before coding patch.

Such translation code needs to be in 1.x and 2.0, right (region server reading other version's WAL) ?

bq. Such translation code needs to be in 1.x and 2.0, right (region server reading other version's WAL) ?

Would we really need HBase 1 to read HBase 2 WALs? Didn't we say on the mailing list that downgrades were a non-goal?

What if an hbase2 server goes down with some content in WAL ?
The WAL may be opened by hbase 1.x server.

Or, we can add logic in SplitLogManager to avoid the above scenario.

bq. What if an hbase2 server goes down with some content in WAL ? The WAL may be opened by hbase 1.x server.

Ahh, rolling upgrade scenario. Didn't think about that one. Good catch. As-is, we'd cause some cascading failures until recovery was picked up by a 2.0 RS (which would be scary for a big cluster).

Moved to beta-2. This is a rolling upgrade concern.

hbase1 complaint is now:

{code}
1134718 2018-02-13 10:43:57,589 DEBUG [RS_LOG_REPLAY_OPS-ve0530:16020-0] wal.WALSplitter: Finishing writing output logs and closing down.
1134719 2018-02-13 10:43:57,589 INFO  [RS_LOG_REPLAY_OPS-ve0530:16020-0] wal.WALSplitter: Processed 0 edits across 0 regions; edits skipped=0; log file=hdfs://ve0524.halxg.cloudera.com:8020/hbase/WALs/ve0534.halxg.cloudera.com,16020,1518546984742-splitting/ve0534.halxg.cloudera.com%2C1        6020%2C1518546984742.meta.1518546993545.meta, length=23982, corrupted=false, progress failed=false
1134720 2018-02-13 10:43:57,590 WARN  [RS_LOG_REPLAY_OPS-ve0530:16020-0] regionserver.SplitLogWorker: log splitting of WALs/ve0534.halxg.cloudera.com,16020,1518546984742-splitting/ve0534.halxg.cloudera.com%2C16020%2C1518546984742.meta.1518546993545.meta failed, returning error
1134721 java.io.IOException: Got unknown writer class: AsyncProtobufLogWriter
1134722   at org.apache.hadoop.hbase.regionserver.wal.ProtobufLogReader.initInternal(ProtobufLogReader.java:220)
1134723   at org.apache.hadoop.hbase.regionserver.wal.ProtobufLogReader.initReader(ProtobufLogReader.java:169)
1134724   at org.apache.hadoop.hbase.regionserver.wal.ReaderBase.init(ReaderBase.java:66)
1134725   at org.apache.hadoop.hbase.regionserver.wal.ProtobufLogReader.init(ProtobufLogReader.java:164)
1134726   at org.apache.hadoop.hbase.wal.WALFactory.createReader(WALFactory.java:303)
1134727   at org.apache.hadoop.hbase.wal.WALFactory.createReader(WALFactory.java:267)
1134728   at org.apache.hadoop.hbase.wal.WALSplitter.getReader(WALSplitter.java:853)
1134729   at org.apache.hadoop.hbase.wal.WALSplitter.getReader(WALSplitter.java:777)
1134730   at org.apache.hadoop.hbase.wal.WALSplitter.splitLogFile(WALSplitter.java:298)
1134731   at org.apache.hadoop.hbase.wal.WALSplitter.splitLogFile(WALSplitter.java:236)
1134732   at org.apache.hadoop.hbase.regionserver.SplitLogWorker$1.exec(SplitLogWorker.java:104)
1134733   at org.apache.hadoop.hbase.regionserver.handler.WALSplitterHandler.process(WALSplitterHandler.java:72)
1134734   at org.apache.hadoop.hbase.executor.EventHandler.run(EventHandler.java:129)
1134735   at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
1134736   at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
1134737   at java.lang.Thread.run(Thread.java:748)
{code}



Regards the description, a WALPlayer from hbase1 trying to read a hbase2 WAL, just use an hbase2 WALPlayer to do the job.

On an hbase1 splitting hbase2 logs and failing as per the above, that might be ok; it just means we need to add more RegionServers to the cluster of hbase2-type that can split the logs. Need to plan rolling upgrade. That'll tell us if we need this facility or not. Meantime moving out of beta-2.

bq.On an hbase1 splitting hbase2 logs and failing as per the above, that might be ok;
That should be an issue no?  When the cluster is a mix of HBase 1 and 2 RSs (upgrade in progress)  and one  2.0 RS crashed and the WAL split is been done by a 1.x server?  Am I missing any?

bq.  When the cluster is a mix of HBase 1 and 2 RSs (upgrade in progress) and one 2.0 RS crashed and the WAL split is been done by a 1.x server? Am I missing any?

You are not missing anything. My thought is Master will put up the WAL for splitting, the hbase1 RS will grab it and try to split, fail because it is hbase2... and this will go on until a hbase2 RS grabs the WAL. Meantime, we'll be adding more RS. I think that will work. We need to spend time on it.

Get you..  Would be sweet if the fail reassign do not happen. May be some other changes will be there which wont allow the split to be done by a 1.x RS even if we solve this write/reader name issue?  

w.r.t. "Got unknown writer class: AsyncProtobufLogWriter", maybe AsyncProtobufLogWriter can override the following method:
{code}
  protected String getWriterClassName() {
{code}
by returning "ProtobufLogWriter" which would be recognized by branch-1 codebase.

19166-async-log-writer.v1.txt shows what I mean.

Ran thru hbase-server tests without seeing failed test other than flaky tests.

That might work. Needs doc in code on why this is being done. Put up a cluster with hbase2 and hbase1 servers and see if WAL split works? Or at least that a WALPlayer from hbase1 can read an hbase2 written file. Thanks.

Deployed tar ball with patch onto hbase-2 cluster.
Created table 't1' and put some records in first region.
Copied ctr-e138-1518143905142-15694-01-000002.hwx.site%2C16020%2C1518819522316.meta.1518819549023.meta and ctr-e138-1518143905142-15694-01-000002.hwx.site%2C16020%2C1518819522316.1518819528879 to hdfs of hbase 1.1 cluster
Used {{hbase org.apache.hadoop.hbase.mapreduce.WALPlayer}} command on the two files whose execution completed.

+1

Since the patch is about persisting with backward compatible ProtobufLogWriter class names, should another JIRA be created for the change ?

No

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 13s{color} | {color:blue} Docker mode activated. {color} |
| {color:blue}0{color} | {color:blue} patch {color} | {color:blue}  0m  2s{color} | {color:blue} The patch file was not named according to hbase's naming conventions. Please see https://yetus.apache.org/documentation/0.7.0/precommit-patchnames for instructions. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  1s{color} | {color:blue} Findbugs executables are not available. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green}  0m  0s{color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red}  0m  0s{color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
|| || || || {color:brown} master Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  3m 53s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 38s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 54s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} shadedjars {color} | {color:green}  5m 10s{color} | {color:green} branch has no errors when building our shaded downstream artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 26s{color} | {color:green} master passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  3m 58s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 39s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 39s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 56s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedjars {color} | {color:green}  4m 12s{color} | {color:green} patch has no errors when building our shaded downstream artifacts. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red}  6m 10s{color} | {color:red} The patch causes 10 errors with Hadoop v2.6.5. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red}  8m  8s{color} | {color:red} The patch causes 10 errors with Hadoop v2.7.4. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 10m 18s{color} | {color:red} The patch causes 10 errors with Hadoop v3.0.0. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}104m 13s{color} | {color:green} hbase-server in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 22s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black}131m 31s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hbase:eee3b01 |
| JIRA Issue | HBASE-19166 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12910956/19166-async-log-writer.v2.txt |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  shadedjars  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux 21ed36ff0292 4.4.0-43-generic #63-Ubuntu SMP Wed Oct 12 13:48:03 UTC 2016 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / dad90f6cce |
| maven | version: Apache Maven 3.5.2 (138edd61fd100ec658bfa2d307c43b76940a5d7d; 2017-10-18T07:58:13Z) |
| Default Java | 1.8.0_151 |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/11555/testReport/ |
| Max. process+thread count | 4896 (vs. ulimit of 10000) |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/11555/console |
| Powered by | Apache Yetus 0.7.0   http://yetus.apache.org |


This message was automatically generated.



FAILURE: Integrated in Jenkins build HBase-Trunk_matrix #4626 (See [https://builds.apache.org/job/HBase-Trunk_matrix/4626/])
HBASE-19166 AsyncProtobufLogWriter persists ProtobufLogWriter as class (tedyu: rev bf5f034463d357f31e2c7d02c6477c2fcd93d7f4)
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AsyncProtobufLogWriter.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/SecureAsyncProtobufLogWriter.java


