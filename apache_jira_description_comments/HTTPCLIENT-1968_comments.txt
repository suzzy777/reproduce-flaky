Why should escaped slashes be preserved? 

Oleg

I'm also hitting this issue in the CXF system tests. The scenario is a GET request to this address: "http://localhost:port/bookstore/bookurl/http%3A%2F%2Ftest.com%2Frss%2F123"

With HTTP client 4.5.6 it produced:

REQUEST for //localhost:20301/bookstore/bookurl/http%3A%2F%2Ftest.com%2Frss%2F123 on HttpChannelOverHttp@306dc3f4\{r=1,c=false,a=IDLE,uri=//localhost:20301/bookstore/bookurl/http%3A%2F%2Ftest.com%2Frss%2F123,age=1}

However with 4.5.7 it produces:

REQUEST for //localhost:40501/bookstore/bookurl/http:/test.com/rss/123 on HttpChannelOverHttp@2d4c6e5d\{r=1,c=false,a=IDLE,uri=//localhost:40501/bookstore/bookurl/http:/test.com/rss/123,age=1}

Note that it is mapping %2F%2F to a single forward slash here.

This is due to path normalization. Please see HTTPCLIENT-1960 for additional details.

Oleg

I think encoded slashes should be preserved based on [RFC 3986|https://tools.ietf.org/html/rfc3986]. The forward slash is a reserved character so [section 2.4|https://tools.ietf.org/html/rfc3986#section-2.4] applies from the RFC:
{quote}When a URI is dereferenced, the components and subcomponents significant to the scheme-specific dereferencing process (if any) must be parsed and separated before the percent-encoded octets within those components can be safely decoded, as otherwise the data may be mistaken for component delimiters. The only exception is for percent-encoded octets corresponding to characters in the unreserved set, which can be decoded at any time.
{quote}
 

Given this, I think that the httpclient should not change the encoded slash when it is doing path normalization. I'd expect that if I pass a URI to the httpclient that it does not change the URI in a manner that results in a different path.

 

[~jaymode] It is irrelevant what is stated in RFC 3986 given that {{java.net.URI}} conforms to RFC 2396 only. Please see -HTTPCLIENT-1960.-

Oleg

HttpClient resorts to URI path normalization only when it must rewrite request URI from absolute to relative form. If the original request contains relative URI HttpClient does not need to make any manipulations with the path.

Oleg

This information is incorrect and based on an expired document.

-RFC 2396 has very similar text in Section 2.2:-
{quote}-The purpose of reserved characters is to provide a set of delimiting characters that are distinguishable from other data within a URI. URIs that differ in the replacement of a reserved character with its percent-encoded octet are not equivalent. Percent-encoding a reserved character, or decoding a percent-encoded octet that corresponds to a reserved character, will change how the URI is interpreted by most applications. Thus, characters in the reserved set are protected from normalization and are therefore safe to be used by scheme-specific and producer-specific algorithms for delimiting data subcomponents within a URI.-
{quote}
 -- 

-In section 2.4:-
{quote}-When a URI is dereferenced, the components and subcomponents significant to the scheme-specific dereferencing process (if any) must be parsed and separated before the percent-encoded octets within those components can be safely decoded, since otherwise the data may be mistaken for component delimiters. The only exception is for percent-encoded octets corresponding to characters in the unreserved set, which can be decoded at any time. For example, the octet corresponding to the tilde ("~") character is often encoded as "%7E" by older URI processing implementations; the "%7E" can be replaced by "~" without changing its interpretation.-
{quote}
 

I have already used the workaround of determining if the URI needs to be relative or absolute in my application, but I don't think this should be expected for users of httpclient.

None of those sections are present in the RFC 2396 published here unless I am missing something.

[https://www.ietf.org/rfc/rfc2396.txt]

But what the RFC 2396 does say is this

{quote}6. URI Normalization and Equivalence

   In many cases, different URI strings may actually identify the
   identical resource. For example, the host names used in URL are
   actually case insensitive, and the URL <http://www.XEROX.com> is
   equivalent to <http://www.xerox.com>. In general, the rules for
   equivalence and definition of a normal form, if any, are scheme
   dependent. 
{quote} 

Path normalization is a perfectly reasonable thing to do for HTTP in order disambiguate the resource reference HTTP method applies to.  

Oleg

My apologies; the document I was looking at was actually not RFC 2396 but an updated and expired draft: [https://tools.ietf.org/id/draft-fielding-uri-rfc2396bis-07.txt]

 

In [section 2.4.2|https://tools.ietf.org/html/rfc2396#section-2.4.2] of the actual RFC 2396, the following is stated:
{quote}2.4.2. When to Escape and Unescape
 A URI is always in an "escaped" form, since escaping or unescaping a completed URI might change its semantics. Normally, the only time escape encodings can safely be made is when the URI is being created from its component parts; each component may have its own set of characters that are reserved, so only the mechanism responsible for generating or interpreting that component can determine whether or not escaping a character will change its semantics. Likewise, a URI must be separated into its components before the escaped characters within those components can be safely decoded.
{quote}
 

I understand that path normalization is reasonable, but path normalization should not change the resource referenced which this does. Ultimately this is still from a newer standard, but [RFC 3986 Section 6.2.2.2|https://tools.ietf.org/html/rfc3986#section-6.2.2.2] states:

 
{quote}6.2.2.2. Percent-Encoding Normalization 
 The percent-encoding mechanism (Section 2.1) is a frequent source of variance among otherwise identical URIs. In addition to the case normalization issue noted above, some URI producers percent-encode octets that do not require percent-encoding, resulting in URIs that are equivalent to their non-encoded counterparts. These URIs should be normalized by decoding any percent-encoded octet that corresponds to an unreserved character, as described in Section 2.3.
{quote}
The key here is that a reserved character is being decoded, which changes the meaning of the URI. RFC 2396 doesn't provide these type of normalization standards but I do not see how decoding reserved characters that are encoded and changing the meaning of a URI is the right behavior.

{quote}I understand that path normalization is reasonable, but path normalization should not change the resource referenced which this does. {quote}
Both {{http://host.com/p1/p2}} and {{http://host.com/p1/%2Fp2}} reference the same resource but the latter contains senseless rubbish.

Oleg  

bq. Both http://host.com/p1/p2 and http://host.com/p1/%2Fp2 reference the same resource but the latter contains senseless rubbish.

They have different paths, so I don't see why they would reference the same resource in general.

[~reschke] The paths are identical. One contains superfluous path delimiter encoded for no apparent reason.

Oleg

Nope.

The first one contains the sequence:

1. path delimiter "/"
2. segment "p1"
3. path delimiter "/"
4. segment "p2"

The second contains:

1. path delimiter "/"
2. segment "p1"
3. path delimiter "/"
4. segment "%2Fp2", decodable as "/p2"


The fact that embedding a forward slash into a segment is indeed strange doesn't make these the same paths.


[~reschke] 

Nope. /p1/p2 is the same path as /p1//p2.

Oleg

A path in a URI is not the same thing as a filesystem path. What's true for a *nix path is not necessary true for a URI.

I'm in agreement with [~reschke]. The paths are indeed different. The encoded path should be passed to the web server for decoding, which is why httpd has an [option|https://httpd.apache.org/docs/2.4/mod/core.html#allowencodedslashes] for this. The web server can then make the decision on how to handle the request.

 

A forward slash is a *reserved* character and by decoding the reserved character, the meaning of the path changes; so you are referencing a different resource than the one the application is using the client to retrieve. If you want a concrete example of a popular application where this is used, elasticsearch uses encoded slashes within paths for [date math|https://www.elastic.co/guide/en/elasticsearch/reference/current/date-math-index-names.html]. By decoding the slash, the requested resource is entirely different.

[~reschke] We are not talking about a generic URI here but a normalized {{abs_path}} of HTTP request.

Oleg 

Yes. abs_path in an HTTP URIs does not differ at all from abs_path in a URI in general.

[~reschke] Unless normalized, of course.

Oleg 

Oleg, if I understand you correctly you say that changing

  "/p1/%2Fp2"

to

  "/p1/p2"

is some kind of normalization (which? defined where?).

I continue to disagree.

[~reschke] You are very welcome to continue disagreeing. This does not change the fact that HttpClient needs to _parse_, _decode_ and _disambiguate_ absolute URIs provided by the user in order to generate an HTTP request with a _*valid*_ {{abs_path}} in request URI.  

As I have already pointed out if one insists on their privilege to feed garbage to the origin server HttpClient provides numerous ways of accomplishing that.

Oleg

I am in the process of upgrading Hadoop to 4.5.6 and do not want to introduce this issue.

Since this seems to be caused by HTTPCLIENT-1960 and [~coheigea]'s comment suggests it is so - I assume that 4.5.6 is okay still. 

I should also mention that since HttpClient is an extremely critical component in the Knox dispatch code, this issue is concerning to me. I believe that I also saw discussion about a new URI class in email somewhere - maybe another JIRA? Also concerning.

Oleg, are you saying that

 "/p1/%2Fp2"

is an invalid abs_path?

[~reschke] No, but {{//p1/p2}} is.

Oleg

Oleg - yes, it is indeed invalid according to RFC 3986 (but not 7230 which may merit a bug report: https://github.com/httpwg/http-core/issues/195).

What I don't understand is why this is argument for breaking something that is indeed valid?

 

[~reschke] Julian, you just spent half a day disagreeing about something completely unrelated to this issue. HttpClient _NEEDS_ to parse, decode and disambiguate the URI in order to be able to rewrite it correctly. As per RFC 2396 URI normalization and equivalence are protocol scheme specific, so all your references to the generic URI syntax here are pointless.

Oleg

HTTP URLs are defined in RFC 7230 (previously RFC 2616). Can you please point out where it defines the normalization you are referring to?

 

As far as I know the HTTP spec does not define rules of URI equivalence, which is not something you can blame on me I suppose.
Oleg

[https://greenbytes.de/tech/webdav/rfc7230.html#uri.comparison]

https://greenbytes.de/tech/webdav/rfc2616.html#uri.comparison

The key statement in both links regarding equivalence and normalization are:

RFC 2616:
{quote}Characters other than those in the "reserved" and "unsafe" sets (see RFC 2396 [??[42]??|https://greenbytes.de/tech/webdav/rfc2616.html#RFC2396]) are equivalent to their ""%" HEX HEX" encoding.
{quote}
RFC 7230:
{quote}Characters other than those in the "reserved" set are equivalent to their percent-encoded octets: the normal form is to not encode them (see Sections [2.1|https://tools.ietf.org/html/rfc3986#section-2.1] and [2.2|https://tools.ietf.org/html/rfc3986#section-2.2] of [??[RFC3986]??|https://greenbytes.de/tech/webdav/rfc7230.html#RFC3986]).
{quote}

[~reschke]

Can you please point out where it defines rules of normalization and any statement pertaining to equivalence of {{//p1/p2}} relative URI?

[https://greenbytes.de/tech/webdav/rfc2616.html#uri.comparison]

Oleg

 

RFC 2616 and RFC 7230 define scheme-specific normalization of HTTP URIs.

If you start with a relative reference, you'll have to resolve it against an HTTP base URI to get a full URI (as per https://www.greenbytes.de/tech/webdav/rfc3986.html#reference-resolution). The result could then be compared against another HTTP URI.

Looking at <https://www.greenbytes.de/tech/webdav/rfc3986.html#relative-ref>, the only way "//p1/p2" can be interpreted is the first alternative:

 relative-part = "//" authority path-abempty

so it would parse as authority "p1" and path "/p2".

What other relative reference do you want to compare it with? (I'm really interested in finding out whether the specs are broken, or there's a misunderstanding here)



[~reschke] So, we continue going merrily round in circles, round and round. And I keep on repeating the same things over and over:
 # It is irrelevant what RFC 3986 states. {{java.net.URI}} conforms to the RFC 2396.
 # There is no reference to RFC 3986 in RFC 2616.
 # HttpClient needs to convert request URIs to {{abs_path}} representation when the user supplies a request URI in the absolute form. While doing so HttpClient need to deal with fringe cases like *{{https://host.com//p1/p2}}*. It is impossible to handle such paths consistently without normalization.
 # Those fringe cases arise form people's insistence on being able to embed rubbish in the URI path component.  
Oleg

{quote}It is irrelevant what RFC 3986 states. java.net.URI conforms to the RFC 2396.
{quote}
It is relevant, because RFC 3986 has obsoleted RFC 2396. Insisting on compliance to an obsoleted spec is not helpful. That said, I don't think the definitions in 2396 are materially different. (If they are, please point that out).
{quote}There is no reference to RFC 3986 in RFC 2616.
{quote}
It has a reference to 2396, which has been obsoleted by RFC 3986. The same way RFC 2616 has been obsoleted as well.
{quote}HttpClient needs to convert request URIs to abs_path representation when the user supplies a request URI in the absolute form. While doing so HttpClient need to deal with fringe cases like [https://host.com//p1/p2]. It is impossible to handle such paths consistently without normalization.
{quote}
AFAICT, that string is not a valid URI (neither in 2396, nor 3986). It's unfortunate that URI doesn't have a strict mode. So this is garbage-in-garbage-out. Upon {{getPath()}}, the return value is "//p1/p2". That is an invalid abs path according to the URI RFCs. So you could throw an exception.
{quote}Those fringe cases arise form people's insistence on being able to embed rubbish in the URI path component.
{quote}
Well. Optionally doing something with rubbish is one thing (I personally hate it), but breaking *valid* URIs at the same time is another thing...

[~reschke]

So, we continue going in circles.
{quote}Insisting on compliance to an obsoleted spec is not helpful
{quote}
Please point it out to Oracle.

I'll close this bug as invalid unless someone can tell me how RFC 2396 or RFC 2616 specify path component normalization in URIs like {{[https://host.com//p1/p2]}}

Oleg

bq.     Insisting on compliance to an obsoleted spec is not helpful -> Please point it out to Oracle.

With all due respect, that's what you are doing here.

bq. FC 2396 or RFC 2616 specify path component normalization in URIs like https://host.com//p1/p2

They do not specify normalization of invalid URIs.

 

 

RFC 2396 says:

 

2:
{quote}Within a URI, characters are either used as delimiters, or to represent strings of data (octets) within the delimited portions. Octets are either represented directly by a character (using the US- ASCII character for that octet [ASCII]) or by an escape encoding.{quote}
2.2:
{quote}Many URI include components consisting of or delimited by, certain special characters. These characters are called "reserved", since their usage within the URI component is limited to their reserved purpose. If the data for a URI component would conflict with the reserved purpose, then the conflicting data must be escaped before forming the URI.{quote}
2.4.2:
{quote}A URI is always in an "escaped" form, since escaping or unescaping a completed URI might change its semantics. Normally, the only time escape encodings can safely be made is when the URI is being created from its component parts; each component may have its own set of characters that are reserved, so only the mechanism responsible for generating or interpreting that component can determine whether or not escaping a character will change its semantics. Likewise, a URI must be separated into its components before the escaped characters within those components can be safely decoded.{quote}
Treating `/p1/%2Fp2` as equivalent to `/p1//p2` is incorrect.  As explained in 2.4.2, you cannot unescape the path without first breaking it into its components (by splitting on `/`).  Then you need to re-escape before reassembling the path (concat'ing with `/`).

Imagine you had a path like this: `/page/\{id}`, and that you had a page whose id was `/foo`, you have to escape the `/` before forming the path, so you would end up with `/page/%2Ffoo`.  The way you're doing normalisation changes the meaning of the original path, and so is disallowed by 2.4.2.

 

If you have a path like `/foo//bar2F`and you wanted to normalise that, you would:
 * split on `/` which would result in `[ "foo", "", "bar%2F", ]`
 * normalise the string, eg remove the empty string, resulting in `[ "foo", "bar%2F"]`
 * join with `/` and prepend `/`, resulting in `"/foo/bar%2F"`

 

[~clintongormley]

This the first sensible analysis of the issue.The trouble here is not how *_I_* do normalization is how *_JRE_* does parsing of URIs.

Oleg 

Not being an expert at all in this area, one should completely neglect Java's faulty {{URI}} implementation and solely roll our own with RFC 3986 and RFC 7230 plus friends.

java.net.URI should be ok, as long you stick to the simple parts (for instance, getting the raw path).



Solely the fact that {{toString()}} returns an invalid URL as soon as you have non-ASCII chars part of the path makes it simple unusable.

I think the issue is explained in this comment: https://issues.apache.org/jira/browse/HTTPCLIENT-1960?focusedCommentId=16740468&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16740468
{quote}An extra %2F cannot be added manually because {{setPath("/%2Fetc/motd")}} results in {{"/%252Fetc/motd"}} because the path will be (correctly) URI-encoded.
{quote}
The comment after that provides the solution:
{quote}There should be a function added to set an "escaped" path instead of only "unescaped" paths
{quote}
You should NEVER set unescaped paths as a single string - only as path segments, which are then concat'ed with `/`.  It is impossible to accurately decode and encode paths that consist of more than one path segment where a path segment includes a /.

 

For instance, imagine your path segments are `["foo", "bar/baz"]`.  To convert this to a path, you would encode each segment, then concat with `/`, to give you `foo/bar%2Fbaz`.  That string you could then use to set an encoded path parameter.  But joining with / before encoding would result in `foo/bar/baz` which is completely different.  There is no way you can encode that correctly.

 

So the only way to accept an unencoded path is as an array of segments.

{quote}So the only way to accept an unencoded path is as an array of segments{quote}

Absolutely correct. Or not sticking garbage into URIs in the first place.

Oleg

{quote}Absolutely correct. Or not sticking garbage into URIs in the first place.
{quote}
This is not garbage.  It is perfectly legal. What the library shouldn't do is try to fix user mistakes. And it should not provide a means to set an unencoded path, which it does currently. Providing that method is making a promise to the user that the library is unable to fulfill.

Hi All.

I am thinking about moving forward here and how to help Here is a possible path forward:
 * State a specific use case with a unit test
 * Propose a patch _which does not break binary compatibility_
 * Ideally these are new APIs like {{setThisKindOfPath}}
 * It might be possible to workaround this with documentation. Is it?

Then we can move away from changing the behavior of the current API to adding APIs you can use and discuss if your patch fits in here.

Thoughts?

[~garydgregory] We have three options here. We
# do not normalize URI path at all and upset some people by generating completely wrong request URIs in some cases (see cases discussed above)
# normalize URI path by eliminating rubbish and upset people who want to stick rubbish into URI path element.
# work around the fact that {{java.net.URI}} represents the path element as a single decoded string rather than an array of path segments.

Oleg   

{quote}State a specific use case with a unit test
{quote}
The patch that I've attached has a unit test for ensuring that rewriteUri does not lose encoded slashes. Ideally is should be that any reserved character that is encoded within a URI should not be lost during a rewrite.

 
{quote}It might be possible to workaround this with documentation. Is it?
{quote}
Currently there is a workaround, but it involves an application specifically crafting the URI the right way so that it doesn't go through the rewriteUri method that does normalization. I personally feel like documenting that is leaking too much of the internal workings/implementation details to the client.

 
{quote}work around the fact that {{java.net.URI}} represents the path element as a single decoded string rather than an array of path segments.
{quote}
I think path normalization and preservation of reserved characters is still possible using by using java.net.URI#getRawPath, which preserves the original encoding. The path can then be split based on non encoded forward slashes and normalized. The path can then be reconstructed with the escaped reserved characters being encoded. I'm happy to work on this with tests and all if this is acceptable.

 

Ultimately taking an array of path parts would probably be an ideal enhancement for UriBuilder.

Would be good if the fix in HTTPCLIENT-1960 becomes somehow controlled (ie. from HttpContext?). Currently, we cannot upgrade our http client (used in proxy for Azure Docker registry) due to their "known issue": they emit redirect responses with paths having double slashes, and worse, they *expect those to be there* (as otherwise they claim requested resource is not there).

With pre 4.5.7 HttpClient this worked fine for us with having custom {{RedirectStrategy}} in place (it simply did not normalize). But since 4.5.7 (or better since HTTPCLIENT-1960 change), where URIUtil is changed, the "ironing out" of double slashes happens across all the client and custom redirect strategy does not work either.

See
 [https://github.com/docker/distribution/issues/1247]

[~cstamas] If you put together a patch against 4.5 that makes request URI or request path rewriting optional depending on {{RequestConfig}} I will review and integrate it.

Oleg

I'm in.
 I have troubles upgrading to 4.5.7

I have http resource http://host/parent/<pid>/child/<cid>

pid is optional

so request to http://host/parent//child/<cid> is legal
 
 but 4.5.7 converts it to
 
http://host/parent/child/<cid>

which is completably another resource

{quote}which is completably another resource{quote}

No, it is not. You are just trying to push silliness from the server onto the client side.

Oleg

I just want to make exactly what I want - execute HTTP request to the url http://host/parent//child/<cid>
I can't do it with 4.5.7. I have no chances. The only way (except fixing this bug) is to switch HTTP client or to stick with 4.5.6 forever.

It's not always possible to change the silliness on the server side.
Another case - tests. I need to write test on java to check how the server is processing such requests. No chance again.

{quote}I can't do it with 4.5.7. I have no chances{quote}
Wrong. 

And the idea of fixing the parser of the server side has not crossed your mind at all?

Oleg  

your rudeness is the stopper for a productive dialog, bye

[~kullfar] There is ongoing work to resolve this issue, I am pretty much in same shoe as you (server, that is out of my scope, pushes strange things to our client, to say at least. Hence cant move to latest 4.5.7 of httpclient to get latest bugfixes): https://github.com/apache/httpcomponents-client/pull/136

Commit 4093a3015d6b789888077e317e535df4c8102e5d in httpcomponents-client's branch refs/heads/4.5.x from Tamas Cservenak
[ https://gitbox.apache.org/repos/asf?p=httpcomponents-client.git;h=4093a30 ]

HTTPCLIENT-1968: Make normalization of URI paths optional

Make it driven by RequestConfig.


Commit ae9ea601956101185b5ab5cc42e4c0a5fc931ee9 in httpcomponents-client's branch refs/heads/4.5.x from Oleg Kalnichevski
[ https://gitbox.apache.org/repos/asf?p=httpcomponents-client.git;h=ae9ea60 ]

Merge pull request #136 from cstamas/HTTPCLIENT-1968

HTTPCLIENT-1968

Commit ae9ea601956101185b5ab5cc42e4c0a5fc931ee9 in httpcomponents-client's branch refs/heads/4.5.x from Oleg Kalnichevski
[ https://gitbox.apache.org/repos/asf?p=httpcomponents-client.git;h=ae9ea60 ]

Merge pull request #136 from cstamas/HTTPCLIENT-1968

HTTPCLIENT-1968

The conversation here is only about slashes. However any encoding breaks (in our case encoded colons).

The example in the first comment from [~coheigea] also shows this.

{quote}
The conversation here is only about slashes. However any encoding breaks (in our case encoded colons).
{quote}

Adding another use case where encoded commas in the path are treated differently based on the build flow. Construction vs fluent builder.

{code}
  @Test
  public void uribuilder() throws URISyntaxException {
    final String rawURI = "http://localhost/service/before1%2Cafter1,before2%2Cafter2?qp1=1&qp2=2";
    System.out.println("raw uri");
    System.out.println(rawURI);

    final URI uri = new URIBuilder(rawURI).build();
    System.out.println("builder from URI");
    System.out.println(uri);
    final URI fluentURI =
        new URIBuilder()
            .setHost(uri.getHost())
            .setPath(uri.getPath())
            .setCustomQuery(uri.getQuery())
            .setScheme(uri.getScheme())
            .build();
    System.out.println("fluent builder using setQuery");
    System.out.println(fluentURI);

    final URIBuilder urib =
        new URIBuilder()
            .setHost(uri.getHost())
            .setPath(uri.getPath())
            .setCustomQuery(uri.getQuery())
            .setScheme(uri.getScheme());
    Arrays.asList(uri.getQuery().split("&")).stream()
        .forEach(
            q -> {
              final String[] value = q.split("=");
              urib.setParameter(value[0], value[1]);
            });

    System.out.println("fluent builder using setParameter");
    System.out.println(urib.build());
  }
{code}

{noformat}
raw uri
http://localhost/service/before1%2Cafter1,before2%2Cafter2?qp1=1&qp2=2
builder from URI
http://localhost/service/before1%2Cafter1,before2%2Cafter2?qp1=1&qp2=2
fluent builder using setQuery
http://localhost/service/before1,after1,before2,after2?qp1=1&qp2=2
fluent builder using setParameter
http://localhost/service/before1,after1,before2,after2?qp1=1&qp2=2
{noformat}



Commit 5f37506e7a2223d216eb3f13beb0dc77e7d027ff in httpcomponents-client's branch refs/heads/4.5.x from Oleg Kalnichevski
[ https://gitbox.apache.org/repos/asf?p=httpcomponents-client.git;h=5f37506 ]

HTTPCLIENT-1968: added utility methods to parse and format URI path segments (ported from HttpCore master)


Commit 4a976e104ea11436340b8794605391eea7edf78f in httpcomponents-client's branch refs/heads/4.5.x from Oleg Kalnichevski
[ https://gitbox.apache.org/repos/asf?p=httpcomponents-client.git;h=4a976e1 ]

HTTPCLIENT-1968: URIBuilder to split path component into path segments when digesting a URI (ported from HttpCore master)


Commit 2004eef66851796291403daeb864f9c0c88529a4 in httpcomponents-client's branch refs/heads/4.5.x from Oleg Kalnichevski
[ https://gitbox.apache.org/repos/asf?p=httpcomponents-client.git;h=2004eef ]

HTTPCLIENT-1968: Preserve escaped PATHSAFE characters when normalizing URI path segments


Commit c7985395635cbc7bd630abb4204534536cbdf8ce in httpcomponents-client's branch refs/heads/4.5.x from Oleg Kalnichevski
[ https://gitbox.apache.org/repos/asf?p=httpcomponents-client.git;h=c798539 ]

HTTPCLIENT-1968: Fixed broken API compatibility with 4.4


Commit 0fe3106dff8fa94c7ebe6697d8f2cf35b94bd541 in httpcomponents-client's branch refs/heads/4.5.x from Oleg Kalnichevski
[ https://gitbox.apache.org/repos/asf?p=httpcomponents-client.git;h=0fe3106 ]

HTTPCLIENT-1968: Fixed incorrect @since annotations


Commit acd8fcd95fcc9cb04fbddd23022e40b7eba4c2f9 in httpcomponents-client's branch refs/heads/4.5.x from Oleg Kalnichevski
[ https://gitbox.apache.org/repos/asf?p=httpcomponents-client.git;h=acd8fcd ]

Merge pull request #137 from ok2c/HTTPCLIENT-1968

URIBuilder and URIUtils improvements 

The example I gave above for forward slashes now works, thanks for the fix. I still have some failing tests relating to an encoded exclamation mark though.

 

If I specify "booksubresource/123/chapters/sub/1/matched%21uris?decode=true" as the URL, it preserved "%21" under the old behaviour, but is now changing it to "!" causing the test to fail.

Colm.

 

 

[~coheigea] Per RFC 2396 section 2.3 exclamation mark is an unreserved character that requires no encoding.

Oleg

[~olegk] OK understood thanks, I'll modify the test.

Appreciate the fix, FWIW the original normalization change (HTTPCLIENT-1960) causes issues with the AWS java SDK (because of how S3 object keys become url paths), created [https://github.com/aws/aws-sdk-java/issues/1919] there.

When do you expect to release 4.5.8? Spring Boot upgraded to 4.5.7 and they, reasonably, don't want to drop back to 4.5.6 because there are a number of important fixes in 4.5.7.

The RabbitMQ [REST API |https://pulse.mozilla.org/api/] extensively uses {{%2F}} in URLs because it is the default virtual host.

e.g. /api/exchanges/<vhost>/<name> gets the exchange info for _name_ in _vhost_ so {{/api/exchanges/%2F/foo}} is broken.

So, Spring Boot users wishing to use the RabbitMQ rest API have to override the version back to 4.5.6 (and lose all the goodness in 4.5.7).

Boot's next scheduled release is March 29, so before then would be excellent! 

Thanks.

[~grussell] Late March or early April should be doable.

Oleg

[~olegk], thanks for the reply. For the record we have a triple-pack maintenance release scheduled for March 29th. If you could manage to release before that, it would be very much appreciated. Thanks!

Commit acd8fcd95fcc9cb04fbddd23022e40b7eba4c2f9 in httpcomponents-client's branch refs/heads/HTTPCLIENT-1976 from Oleg Kalnichevski
[ https://gitbox.apache.org/repos/asf?p=httpcomponents-client.git;h=acd8fcd ]

Merge pull request #137 from ok2c/HTTPCLIENT-1968

URIBuilder and URIUtils improvements 

Can someone confirm if the following is correct?

To keep my application behavior (regarding uri normalization) same as 4.5.6, I need to set *{color:#333333}setNormalizeUri{color}* in *RequestConfig* to *false* in *v4.5.8*. This keeps the behavior same for special characters like "/", "+". Any other special characters that are still affected? Thanks.

Attempting to validate this change for my use case. The copy method on RequestConfig was not updated for normalizeUri. I built a local snapshot with that additional change and was able to verify.

https://github.com/apache/httpcomponents-client/pull/136
https://github.com/apache/httpcomponents-client/blob/4.5.8/httpclient/src/main/java/org/apache/http/client/config/RequestConfig.java#L384

Logged issue HTTPCLIENT-1984 and issued pr https://github.com/apache/httpcomponents-client/pull/144 to address the copy constructor.

In our project when upgrading from Spring Boot 2.1.3.RELEASE to 2.1.4.RELEASE (using http-client 4.5.8) our URL building no longer works as expected:
{code:java}
URIBuilder builder = new URIBuilder();
URI returnUrl = builder.setPath("https://localhost:1234/path1/path2").addParameter("param1", "param1").addParameter("param2", "param2")
 .addParameter("param3, "param3").addParameter("param4", "param4").build();{code}
In version 4.5.7 this returned: [https://localhost:1234/path1/path2?param1=param|https://localhost:1234/path1/path2?param1=param2]1 etc

In version 4.5.8 it now returns: */*[https://localhost:1234/path1/path2?param1=param1] etc which is obviously not a correct URL.

Should I change something in the way I build this URI or use another object?

Commit b3b526cef5b959e7f21f1c7805af434c9d38b55b in httpcomponents-client's branch refs/heads/HTTPCLIENT-1968 from Oleg Kalnichevski
[ https://gitbox.apache.org/repos/asf?p=httpcomponents-client.git;h=b3b526c ]

HTTPCLIENT-1968: Preserve escaped PATHSAFE characters when normalizing URI path segments (backport from 4.5.x)


Commit 8603a61b555a4b7e92d04e11cd0a825aaf7d2f0d in httpcomponents-client's branch refs/heads/master from Oleg Kalnichevski
[ https://gitbox.apache.org/repos/asf?p=httpcomponents-client.git;h=8603a61 ]

HTTPCLIENT-1968: Preserve escaped PATHSAFE characters when normalizing URI path segments


Commit 8603a61b555a4b7e92d04e11cd0a825aaf7d2f0d in httpcomponents-client's branch refs/heads/JDK-8212885 from Oleg Kalnichevski
[ https://gitbox.apache.org/repos/asf?p=httpcomponents-client.git;h=8603a61 ]

HTTPCLIENT-1968: Preserve escaped PATHSAFE characters when normalizing URI path segments


Commit 8603a61b555a4b7e92d04e11cd0a825aaf7d2f0d in httpcomponents-client's branch refs/heads/httpcore-5.0b8-upgrade from Oleg Kalnichevski
[ https://gitbox.apache.org/repos/asf?p=httpcomponents-client.git;h=8603a61 ]

HTTPCLIENT-1968: Preserve escaped PATHSAFE characters when normalizing URI path segments


I have opened HTTPCLIENT-2011, which I expect is another side-effect of the URI normalization attempt.

