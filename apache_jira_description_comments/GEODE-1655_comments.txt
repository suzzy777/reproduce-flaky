This is a problem with the test's expectations.  It shuts down a server and expects the client to get a memberCrashed event in its bridge membership listener but instead it may get a memberLeft event.

Commit 7c2e21933ecce1602e27e0b74f439fa94ceb8b52 in incubator-geode's branch refs/heads/develop from [~bschuchardt]
[ https://git-wip-us.apache.org/repos/asf?p=incubator-geode.git;h=7c2e219 ]

GEODE-1655: CI Failure in AutoConnectionSourceDUnitTest.testClientMembershipListener

Clients may get a memberLeft event instead of a memberCrashed event when
a server is shut down.  I've adjusted the test's expectations and added
some logging in the membership listener to note which events it receives.


Commit 7c2e21933ecce1602e27e0b74f439fa94ceb8b52 in incubator-geode's branch refs/heads/feature/GEODE-1673-PR-212 from [~bschuchardt]
[ https://git-wip-us.apache.org/repos/asf?p=incubator-geode.git;h=7c2e219 ]

GEODE-1655: CI Failure in AutoConnectionSourceDUnitTest.testClientMembershipListener

Clients may get a memberLeft event instead of a memberCrashed event when
a server is shut down.  I've adjusted the test's expectations and added
some logging in the membership listener to note which events it receives.


{noformat}
It's reproduced in CI DistributedTest #76, for develop
 
org.apache.geode.cache.client.internal.AutoConnectionSourceDUnitTest > testClientMembershipListener FAILED
 
org.apache.geode.test.dunit.RMIException: While invoking org.apache.geode.test.dunit.NamedRunnable.run in VM 3 running on Host c2598f8bb49d with 4 VMs
at org.apache.geode.test.dunit.VM.invoke(VM.java:436)
at org.apache.geode.test.dunit.VM.invoke(VM.java:405)
at org.apache.geode.test.dunit.VM.invoke(VM.java:336)
at org.apache.geode.cache.client.internal.AutoConnectionSourceDUnitTest.waitForCrash(AutoConnectionSourceDUnitTest.java:534)
at org.apache.geode.cache.client.internal.AutoConnectionSourceDUnitTest.testClientMembershipListener(AutoConnectionSourceDUnitTest.java:409)
 
Caused by:
org.awaitility.core.ConditionTimeoutException: Condition with lambda expression in org.apache.geode.cache.client.internal.AutoConnectionSourceDUnitTest that uses org.apache.geode.cache.client.internal.AutoConnectionSourceDUnitTest$MyListener was not fulfilled within 10 seconds.
at org.awaitility.core.ConditionAwaiter.await(ConditionAwaiter.java:104)
at org.awaitility.core.CallableCondition.await(CallableCondition.java:79)
at org.awaitility.core.CallableCondition.await(CallableCondition.java:27)
at org.awaitility.core.ConditionFactory.until(ConditionFactory.java:809)
at org.awaitility.core.ConditionFactory.until(ConditionFactory.java:785)
at org.apache.geode.cache.client.internal.AutoConnectionSourceDUnitTest.lambda$waitForCrash$b6506259$1(AutoConnectionSourceDUnitTest.java:536)
 {noformat}
 
 

Commit af0ac3ddc9e4d9c325a9187e38b9335954075997 in geode's branch refs/heads/develop from [~bschuchardt]
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=af0ac3d ]

GEODE-1655: CI Failure in AutoConnectionSourceDUnitTest.testClientMembershipListener

The waitForCrash(), waitForJoin(), waitForLeave() methods in this test were
modified to use Awaitility.  When that was done they started throwing
exceptions but the old versions of these methods didn't do that.  They allowed
the caller to perform validation checks if there was a timeout.

In the case of testClientMembershipListener this has caused the test to fail
if a server's departure is interpreted as not being a "crash" but a "leave".
The validation code allows for that but the altered waitForCrash() method
does not.

I've modified the tests to ignore Awaitility timeouts in these methods, which
should make the test stop being flaky.


Commit af0ac3ddc9e4d9c325a9187e38b9335954075997 in geode's branch refs/heads/feature/GEM-1772 from [~bschuchardt]
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=af0ac3d ]

GEODE-1655: CI Failure in AutoConnectionSourceDUnitTest.testClientMembershipListener

The waitForCrash(), waitForJoin(), waitForLeave() methods in this test were
modified to use Awaitility.  When that was done they started throwing
exceptions but the old versions of these methods didn't do that.  They allowed
the caller to perform validation checks if there was a timeout.

In the case of testClientMembershipListener this has caused the test to fail
if a server's departure is interpreted as not being a "crash" but a "leave".
The validation code allows for that but the altered waitForCrash() method
does not.

I've modified the tests to ignore Awaitility timeouts in these methods, which
should make the test stop being flaky.


This was fixed in July '18 but the ticket wasn't updated

