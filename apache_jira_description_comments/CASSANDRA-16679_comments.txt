CC [~maedhroz] - just FYI

First observations - this test fails only when  the whole class is run. Running on its own it succeeds 500 runs. Also, the original python DTest looks good in Jenkins. 

I am wondering whether it is not in-jvm issue. This reminds me of 
 CASSANDRA-16598
  where there is a suspicion that the node didn't really go down

//CC [~blerer] as he is tackling CASSANDRA-16598

After experimenting more with this one I think this is probably some very tiny race around the  in-jvm tests framework.

If I remove node 4 never to get back up, I still can see in the logs of node 2 that node 4 goes down and then a connection is established between node 2 and node4 and node 4 is marked immediately up in the logs of node 2...

Then I looped the original python dtest 500 times and it succeeded. 

My suggestion is to fix this issue but not to block the release on it. [~ifesdjeen], [~blerer], [~maedhroz], any thoughts? 

 

Node 2:

 
{code:java}
INFO [node2_GossipStage:1] node2 2021-05-26 16:14:07,666 InetAddress /127.0.0.4:7012 is now DOWN
DEBUG [node2_GossipStage:1] node2 2021-05-26 16:14:07,667 Forcing conviction of /127.0.0.4:7012
INFO [node2_Messaging-EventLoop-3-7] node2 2021-05-26 16:14:07,673 /127.0.0.2:7012(/127.0.0.1:50938)->/127.0.0.4:7012-URGENT_MESSAGES-5627f198 successfully connected, version = 12, framing = CRC, encryption = unencrypted
DEBUG [node2_GossipStage:1] node2 2021-05-26 16:14:07,676 removing expire time for endpoint : /127.0.0.4:7012
INFO [node2_GossipStage:1] node2 2021-05-26 16:14:07,676 InetAddress /127.0.0.4:7012 is now UP
DEBUG [node2_GossipStage:1] node2 2021-05-26 16:14:07,676 removing expire time for endpoint : /127.0.0.4:7012
INFO [node2_GossipStage:1] node2 2021-05-26 16:14:07,676 InetAddress /127.0.0.4:7012 is now UP
{code}
 

 

This is from node 4:
{code:java}
INFO [node4_isolatedExecutor:3] node4 2021-05-26 16:14:07,660 Announcing shutdown
DEBUG [node4_isolatedExecutor:3] node4 2021-05-26 16:14:07,660 Node /127.0.0.4:7012 state shutdown, token [9223372036854775801]
INFO [node4_isolatedExecutor:6] node4 2021-05-26 16:14:07,660 Paused hints dispatch
INFO [node4_isolatedExecutor:3] node4 2021-05-26 16:14:07,660 Node /127.0.0.4:7012 state jump to shutdown
DEBUG [node4_isolatedExecutor:3] node4 2021-05-26 16:14:07,661 Node /127.0.0.4:7012 state shutdown, token [9223372036854775801]
INFO [node4_isolatedExecutor:3] node4 2021-05-26 16:14:07,661 Node /127.0.0.4:7012 state jump to shutdown
INFO [node4_Messaging-EventLoop-3-19] node4 2021-05-26 16:14:07,673 /127.0.0.2:7012(/127.0.0.1:50938)->/127.0.0.4:7012-URGENT_MESSAGES-e48b31a6 messaging connection established, version = 12, framing = CRC, encryption = unencrypted
INFO [node4_Messaging-EventLoop-3-20] node4 2021-05-26 16:14:08,604 /127.0.0.1:7012(/127.0.0.1:51090)->/127.0.0.4:7012-URGENT_MESSAGES-559580c8 messaging connection established, version = 12, framing = CRC, encryption = unencrypted
INFO [node4_isolatedExecutor:17] node4 2021-05-26 16:14:09,666 Waiting for messaging service to quiesce{code}
 

Until the in-jvm tests framework issue is solved I suggest [here |https://github.com/ekaterinadimitrova2/cassandra/commit/80122161d3723dea57db268e5d8f1332d084b365] we @Ignore the tests so we can have a clean CI view. The python DTests are still in place, completing successfully. [~brandon.williams], up for review/comment before I commit it? 

+1

Committed, thanks

To https://github.com/apache/cassandra.git

   c7795ee62c..dfd5a0b4a5  cassandra-4.0 -> cassandra-4.0

   546792169e..e151fa5b89  cassandra-4.0.0 -> cassandra-4.0.0

   922872b38f..6c30261bc8  trunk -> trunk

Removing myself from assignment in case someone else has cycles to look at it in the meanwhile

I've created a branch [here|https://github.com/maedhroz/cassandra/commits/CASSANDRA-16679-unignore] that re-enables this test class and started a 300x repeat run of that class [here|https://app.circleci.com/pipelines/github/maedhroz/cassandra?branch=CASSANDRA-16679-unignore]. If there are no issues in that run, it would seem unlikely that the original issue persists, and that wouldn't be too strange, given recent changes to fix in-JVM test shutdown order, etc.

Also, I've made some small fixes that should make things more deterministic in CASSANDRA-17808, and there is already a successful 300x run on the books there. If the run above actually does surface failures, it's possible that these fixes matter, and this issue could be closed along w/ CASSANDRA-17808, at least for trunk. (I suppose we'd need to pull those changes down to 4.0 and 4.1 if they really matter.)

It looks like the fixes I made in my [17808 patch|https://github.com/apache/cassandra/pull/1835/files] address exactly the problem that was making this test flaky. The [multiplexer run|https://app.circleci.com/pipelines/github/maedhroz/cassandra/517/workflows/8e9b8fd1-d6bf-4aeb-8424-f48532ebd309/jobs/4728/tests#failed-test-0] on trunk with the tests un-ignored shows failures around the {{totalHints}} metric not being updated synchronously w/ the writes that generated them.

|PR|
|[4.0|https://github.com/apache/cassandra/pull/1838]|
|[4.1|https://github.com/apache/cassandra/pull/1842]|
|[trunk|https://github.com/apache/cassandra/pull/1843]|

Note: PRs contain links to 300x multiplexer runs against the full {{HintedHandoffAddRemoveNodesTest}} suite.

2 questions:

1) Do we need follow up ticket, does the issue with the immortal node still exists? I do not expect it to be fixed here but if it is still presented we will need to spin a new ticket. 

2) The original Python test does not suffer from this issue? I think it sounds suspicious, what do I miss?

bq. 2) The original Python test does not suffer from this issue? I think it sounds suspicious, what do I miss?

The original Python dtest does not make any assertions around the hint-related metrics, so I wouldn't expect it to have the issue my patch addresses.

[~e.dimitrova] I browsed the logs from one of the [4.0 multiplexer runs|https://output.circle-artifacts.com/output/job/972c7b84-f976-4756-a65b-8babccad5409/artifacts/0/logs/passes/01/org.apache.cassandra.distributed.test.HintedHandoffAddRemoveNodesTest/cluster-7b24809c-6a9c-428b-a3bd-9f9a4910a85d/node2/system.log] of the decommission hint delivery test.

(This is node 2...)

{noformat}
DEBUG [node2_GossipStage:1] node2 2022-09-02 05:16:36,208 Marked /127.0.0.4:7012 as shutdown
...
INFO  [node2_Messaging-EventLoop-3-3] node2 2022-09-02 05:16:41,798 /127.0.0.2:7012->/127.0.0.4:7012-URGENT_MESSAGES-[no-channel] failed to connect
io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: /127.0.0.4:7012
Caused by: java.net.ConnectException: Connection refused
...
INFO  [node2_GossipStage:1] node2 2022-09-02 05:17:28,148 Node /127.0.0.4:7012 has restarted, now UP
{noformat}

The progression of things looks pretty normal, and if there *was* some issue with shutdown/startup for node 4, I would expect 1800+ runs across the three branches to expose it. In the end, I think the original failure report was so long ago that we should fix what appears to be the (reproducible on trunk, etc.) failure and open a new Jira if somehow this test ever gives us more problems

{quote}The progression of things looks pretty normal, and if there *was* some issue with shutdown/startup for node 4, I would expect 1800+ runs across the three branches to expose it. In the end, I think the original failure report was so long ago that we should fix what appears to be the (reproducible on trunk, etc.) failure and open a new Jira if somehow this test ever gives us more problems
{quote}
Agreed, thanks for checking. You and David fixed a lot of things in the start/stop order for in-jvm tests framework so I guess this got fixed in time.
{quote}The original Python dtest does not make any assertions around the hint-related metrics, so I wouldn't expect it to have the issue my patch addresses.
{quote}
(y)

So now that we have already support for vnodes if we want to match the python dtests, _test_hintedhandoff_decom_ has a mark {_}no_vnode{_}, we need to do the same for the in-jvm version of the test (the original test was added before vnodes support for in-jvm framework was added)

The rest LGTM

Thanks! I'll add that annotation and start getting ready to commit...

Committed

4.0 - https://github.com/apache/cassandra/commit/c56952efb570df2b09a7d428319a9b7755a0c387

4.1 - https://github.com/apache/cassandra/commit/adb01284852a6c7943f7038dcee3cae101f47d23

trunk - https://github.com/apache/cassandra/commit/97a5ff9925802c81e22dc38a6bf58e8835b2c20a

