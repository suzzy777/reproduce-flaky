This issue is assigned but has not received an update in 30 days so it has been labeled "stale-assigned". If you are still working on the issue, please give an update and remove the label. If you are no longer working on the issue, please unassign so someone else may work on it. In 7 days the issue will be automatically unassigned.

This issue was marked "stale-assigned" and has not received a public comment in 7 days. It is now automatically unassigned. If you are still working on it, you can assign it to yourself again. Please also give an update about the status of the work.

I ran {{../../gradlew dependencies}} at {{:vendor:grpc-1_26_0}} module, but could not find Eclipse Jetty (9.2.10.v20150310):

[https://gist.github.com/suztomo/6503ceaa4acc8e528a28affb1edaa8a3]

It's technically possible just upgrade the gRPC version from 1.26 to 1.35. However, how can we confirm the CVE is properly addressed after upgrading the gRPC version?

 

Yes this is possible actually this is what we did in the past when moving from version 1.13.1.

Notice that this process has two steps:
1. Upgrade and release (independently) the vendored dependency.
2. Update the Beam codebase to use the vendored dependency (usually a huge but relatively straight forward PR).

(1) requires a vote in the mailing list and ideally (2) to have been tested in advance.

I can help with the vote/release part if you like when we can confirm that the upgrade works. Also I think the upgrade is worth to catch up with the latest releases and improvements of gRPC independent of the security issue but that's a good question. [~bmbodj] How did you get to know about this vulnerability and its relation with this module?. Seems odd because gRPC seems not to have any use jetty

 

 

 

 

Oh sorry I had not checked in the right place. It seems that probably it should be an automatic dependency vulnerability detector looking at this one [https://github.com/apache/beam/blob/70335bbf323ce4d6bb728cc8e80d6dcb29cf363e/buildSrc/src/main/groovy/org/apache/beam/gradle/GrpcVendoring_1_26_0.groovy#L76] [~suztomo]

I am a bit surprised that grpc is not better self-contained and even wondering if we do really need to declare all those deps (to be checked).

[~iemejia] Thank you for your response. I see "alpn_api_version = "1.1.2.v20150522" and "org.eclipse.jetty.alpn:alpn-api:", not the Jetty itself. Reading https://bugs.eclipse.org/bugs/show_bug.cgi?id=567921#c2, the CVE is about Jetty's use of temporary directories.

I take this as false positive of the automatic dependency vulnerability detector (and going to close the PR 14028). Let me know if you think otherwise.

I agree in the fact that this is probably a false positive, but companies are really picky about using libraries/tools reported by vulnerability reports. Still the open question is if the upgrade guarantees that the jetty upgrade to a non vulnerable version.

The other question is if Beam may benefit or some recent improvements of gRPC to make it worth too but well that's less important than the security issue.

> companies are really picky about using libraries/tools reported by vulnerability reports

That makes sense. We want the automatic detector to unmark the vendored gRPC artifact.

Even if we upgrade to the latest version of gRPC, the line "org.eclipse.jetty.alpn:alpn-api:$alpn_api_version" remains with version "1.1.2.v20150522" ([my current attempt|https://github.com/apache/beam/pull/14028/files#diff-20e6ab6fadc3019303d5534ed1b041f154a31e9e7a8e5829d6b8fc0a7218f6dfR76]) (It's less than "9.4.32" mentioned in [https://bugs.eclipse.org/bugs/show_bug.cgi?id=567921#c2]. The latest is ["1.1.3.v20160715"|https://search.maven.org/artifact/org.eclipse.jetty.alpn/alpn-api/1.1.3.v20160715/jar]). On the other hand, this issue description clearly say "Eclipse Jetty (9.2.10.v20150310)". Where is this version coming from?

I'll wait for [~bmbodj]'s response before committing something.

We actually want to upgrade anyhow for performance reasons, so I would really like to continue.

Looking at Boury Mbodj's [activity|https://issues.apache.org/jira/secure/ViewProfile.jspa?name=bmbodj&selectedTab=com.atlassian.streams.streams-jira-plugin:user-profile-stream-panel], it seems that this is one-off ticket (not by automation).

[~kenn] Sure. Let me continue [https://github.com/apache/beam/pull/14028] to see what would break.
h1. Memo

Previous emails
 * [[VOTE] Vendored Dependencies Release gRPC 1.26.0 v0.3 for BEAM-9288 RC #3|https://lists.apache.org/thread.html/rea4a27c47529a27936ab2c51162c8e532b8b625c4d70c4f7f485c7cd%40%3Cdev.beam.apache.org%3E] (vote passed)
 * [[VOTE] Vendored Dependencies Release gRPC 1.26.0 v0.3 for BEAM-9288 RC #2|https://lists.apache.org/thread.html/rc6372c9873a2b00cf5dc30efeeb0b13bb1aa92a0f93e2417211effc4%40%3Cdev.beam.apache.org%3E] (commit id mistake)
 * [Re: [VOTE] Vendored Dependencies Release gRPC 1.26.0 v0.3 for BEAM-9288|https://lists.apache.org/thread.html/r31fb38e8480889ecb23db7135771d419c9cf43fd20be96c4aa179e54%40%3Cdev.beam.apache.org%3E] (-> conscrypt was in JAR)

{code:java}
suztomo@suztomo:~/beam$ jar tvf vendor/grpc-1_36_0/build/libs/beam-vendor-grpc-1_36_0-0.1.jar  | grep conscrypt
suztomo@suztomo:~/beam$ 
{code}
Previous version (beam-vendor-grpc-1_26_0-0.3):
{code:java}
suztomo-macbookpro44%  jar tvf ~/Downloads/beam-vendor-grpc-1_26_0-0.3.jar|grep '\.so$'
2626449 Sat Sep 21 10:06:14 EDT 2019 META-INF/native/liborg_apache_beam_vendor_grpc_v1p26p0_netty_tcnative_linux_x86_64.so
 59545 Wed Nov 26 20:02:18 EST 2014 linux/amd64/liblz4-java.so
 68840 Wed Nov 26 20:02:18 EST 2014 linux/i386/liblz4-java.so
161360 Wed Nov 26 20:02:18 EST 2014 win32/amd64/liblz4-java.so
{code}
Current proposal
{noformat}
suztomo-macbookpro44% jar tvf vendor/grpc-1_36_0/build/libs/beam-vendor-grpc-1_36_0-0.1.jar  | grep '\.so$' 
2628280 Fri Aug 21 11:19:38 EDT 2020 META-INF/native/liborg_apache_beam_vendor_grpc_v1p36p0_netty_tcnative_linux_x86_64.so
1933284 Fri Aug 21 11:19:38 EDT 2020 META-INF/native/liborg_apache_beam_vendor_grpc_v1p36p0_netty_tcnative_linux_aarch64.so
suztomo-macbookpro44% 
{noformat}
h1. Consideration
h2. protobuf-java version

gRPC 1.36 uses protobuf-java 3.12.0 and com.google.api.grpc:proto-google-common-protos:2.0.1 draws protobuf-java 3.13.0. Gradle's dependency mediation chooses 3.13.0 (higher) which has the Java8-incompatibility problem ([https://github.com/protocolbuffers/protobuf/issues/7827]). We need to set a higher version to avoid having the problem in the vendored gRPC.
h2. Remove dependencies that seem unused

In preparing the vendored gRPC 1.26, it seems that unnecessary dependencies were added to the vendored gRPC project just to resolve the error messages by Linkage Checker. Let's verify whether they are really needed or not.
{code:java}
      "io.perfmark:perfmark-api:$perfmark_version",
      "com.github.jponge:lzma-java:$lzma_java_version",
      "com.google.protobuf.nano:protobuf-javanano:$protobuf_javanano_version",
      "com.jcraft:jzlib:$jzlib_version",
      "com.ning:compress-lzf:$compress_lzf_version",
      "net.jpountz.lz4:lz4:$lz4_version",
      "org.bouncycastle:bcpkix-jdk15on:$bouncycastle_version",
      "org.bouncycastle:bcprov-jdk15on:$bouncycastle_version",
      "org.eclipse.jetty.alpn:alpn-api:$alpn_api_version",
      "org.eclipse.jetty.npn:npn-api:$npn_api_version",
      "org.jboss.marshalling:jboss-marshalling:$jboss_marshalling_version",
      "org.jboss.modules:jboss-modules:$jboss_modules_version"
{code}
If they are not needed by Beam's use of gRPC, then we can
 * remove the source class that appear in the linkage errors
 * add [exclusion file|https://github.com/GoogleCloudPlatform/cloud-opensource-java/wiki/Linkage-Checker-Exclusion-File] for Linkage Checker

Linkage Errors when I remove them: [https://gist.github.com/suztomo/6e76e09b33ff834726634175c458f096]

(continuing)
h1. Linkage Errors

I ran checkJavaLinkage task ([output|https://gist.github.com/suztomo/c1d9c587ea58ad4cfd25c853ad921c93#file-beam-vendor-grpc-1_36_0_with_protobuf_3-15-txt-L6]).
 
h3. org.jboss.marshalling.Marshaller

If the netty user is not using MarshallingEncoder, the linkage errors will not cause an error.

 
{noformat}
io.netty:netty-codec:4.1.52.Final
25 target classes causing linkage errors referenced from 42 source classes.

Class org.jboss.marshalling.Marshaller is not found, referenced from 3 classes ▼

io.netty.handler.codec.marshalling.ThreadLocalMarshallerProvider
io.netty.handler.codec.marshalling.MarshallingEncoder
io.netty.handler.codec.marshalling.CompatibleMarshallingEncoder
Class org.jboss.marshalling.MarshallerFactory is not found, referenced from 4 classes ▼

io.netty.handler.codec.marshalling.ThreadLocalMarshallerProvider
io.netty.handler.codec.marshalling.ThreadLocalUnmarshallerProvider
io.netty.handler.codec.marshalling.DefaultMarshallerProvider
io.netty.handler.codec.marshalling.DefaultUnmarshallerProvider
Class org.jboss.marshalling.Unmarshaller is not found, referenced from 4 classes ▼

io.netty.handler.codec.marshalling.ThreadLocalUnmarshallerProvider
io.netty.handler.codec.marshalling.ContextBoundUnmarshallerProvider
io.netty.handler.codec.marshalling.MarshallingDecoder
io.netty.handler.codec.marshalling.CompatibleMarshallingDecoder

Class org.jboss.marshalling.ByteInput is not found, referenced from 2 classes ▼

io.netty.handler.codec.marshalling.LimitingByteInput
io.netty.handler.codec.marshalling.ChannelBufferByteInput
{noformat}

netty-codec declares jboss-marshalling as optional.

{noformat}
    <dependency>
      <groupId>org.jboss.marshalling</groupId>
      <artifactId>jboss-marshalling</artifactId>
      <optional>true</optional>
    </dependency>
{noformat}


This indicates that only those who need this serialization algorithm declare the dependencies.

h3. protobuf-nano

Netty supports protobuf serialization.


{noformat}
Class com.google.protobuf.nano.MessageNano is not found, referenced from 2 classes ▼

io.netty.handler.codec.protobuf.ProtobufDecoderNano
io.netty.handler.codec.protobuf.ProtobufEncoderNano
Class com.google.protobuf.nano.CodedOutputByteBufferNano is not found, referenced from io.netty.handler.codec.protobuf.ProtobufEncoderNano
{noformat}


{{com.google.protobuf.nano.MessageNano}} is in protobuf-javanano and netty-codec declares the artifact as optional dependency.

{noformat}
    <dependency>
      <groupId>com.google.protobuf.nano</groupId>
      <artifactId>protobuf-javanano</artifactId>
      <optional>true</optional>
    </dependency>
{noformat}

This indicates that only those who need this serialization algorithm declare the dependencies.

h3. jzlib

{noformat}
Class com.jcraft.jzlib.Deflater is not found, referenced from 2 classes ▼

io.netty.handler.codec.compression.JZlibEncoder
io.netty.handler.codec.compression.ZlibUtil
Class com.jcraft.jzlib.JZlib is not found, referenced from 3 classes ▼

io.netty.handler.codec.compression.JZlibEncoder
io.netty.handler.codec.compression.ZlibUtil
io.netty.handler.codec.compression.JZlibDecoder

Class com.jcraft.jzlib.Inflater is not found, referenced from 2 classes ▼

io.netty.handler.codec.compression.ZlibUtil
io.netty.handler.codec.compression.JZlibDecoder
Class com.jcraft.jzlib.JZlib$WrapperType is not found, referenced from io.netty.handler.codec.compression.ZlibUtil
{noformat}


netty-codec declares jzlib dependency as optional.

{noformat}
    <dependency>
      <groupId>com.jcraft</groupId>
      <artifactId>jzlib</artifactId>
      <optional>true</optional>
    </dependency>
{noformat}


[Netty in action Chapter 11|https://livebook.manning.com/book/netty-in-action/chapter-11/50] says this dependency is only needed when users want the compression and using JDK 6 or earlier.

h3. lzma

{noformat}
Class lzma.sdk.lzma.Encoder is not found, referenced from io.netty.handler.codec.compression.LzmaFrameEncoder
{noformat}


lzma-java is declared as optional.

{noformat}
    <dependency>
      <groupId>com.github.jponge</groupId>
      <artifactId>lzma-java</artifactId>
      <optional>true</optional>
    </dependency>
{noformat}


This indicates that only those who need the compression algorithm declare the dependencies.

h3. lzf

{noformat}
Class com.ning.compress.lzf.LZFChunk is not found, referenced from io.netty.handler.codec.compression.LzfEncoder

Class com.ning.compress.lzf.ChunkEncoder is not found, referenced from io.netty.handler.codec.compression.LzfEncoder

Class com.ning.compress.lzf.util.ChunkEncoderFactory is not found, referenced from io.netty.handler.codec.compression.LzfEncoder

Class com.ning.compress.BufferRecycler is not found, referenced from 2 classes ▼

io.netty.handler.codec.compression.LzfEncoder
io.netty.handler.codec.compression.LzfDecoder
Class com.ning.compress.lzf.LZFEncoder is not found, referenced from io.netty.handler.codec.compression.LzfEncoder
{noformat}


netty-codec declares compress-lzf dependency as optional.

{noformat}
    <dependency>
      <groupId>com.ning</groupId>
      <artifactId>compress-lzf</artifactId>
      <optional>true</optional>
    </dependency>
{noformat}


This indicates that only those who need the compression algorithm declare the dependencies.
h3. tcnative.SSL

 


{noformat}
Class io.netty.internal.tcnative.SSL is not found, referenced from 8 classes ▼

io.netty.handler.ssl.ReferenceCountedOpenSslEngine
io.netty.handler.ssl.OpenSslSessionContext
io.netty.handler.ssl.ReferenceCountedOpenSslContext
io.netty.handler.ssl.OpenSslX509KeyManagerFactory
io.netty.handler.ssl.OpenSslKeyMaterialProvider
io.netty.handler.ssl.OpenSslPrivateKey
io.netty.handler.ssl.DefaultOpenSslKeyMaterial
io.netty.handler.ssl.OpenSslServerSessionContext
{noformat}


netty-handler declares tcnative dependency as optional:


{noformat}
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>${tcnative.artifactId}</artifactId>
      <classifier>${tcnative.classifier}</classifier>
      <optional>true</optional>
    </dependency>
{noformat}


The value of {{${tcnative.classifier}}} differs depending on profiles defined in netty-parent. By default it uses {{netty-tcnative}} but users can opt to use boringssl

 


{noformat}
      <id>boringssl</id>
      <properties>
        <tcnative.artifactId>netty-tcnative-boringssl-static</tcnative.artifactId>
        <tcnative.classifier />
      </properties>
    </profile>
{noformat}


Why is tcnative (netty's folk of Tomcat Native) optional? It's because netty users should choose the artifact depending on their platform:


{noformat}
    <dependency>
      <groupId>io.netty</groupId>
      <artifactId>netty-tcnative</artifactId>
      <version>2.0.0.Final</version>
      <classifier>${os.detected.classifier}</classifier>
    </dependency>
{noformat}

from [Netty's documentation|https://netty.io/wiki/forked-tomcat-native.html#wiki-h2-4].
h3. BlockHound

Netty-BlockHound integration detects blocking calls. If we don't use BlockHound, then we don't need it.


{noformat}
Class reactor.blockhound.integration.BlockHoundIntegration is not found, referenced from io.netty.util.internal.Hidden

Class reactor.blockhound.BlockHound$Builder is not found, referenced from io.netty.util.internal.Hidden
{noformat}

[netty-common|https://search.maven.org/artifact/io.netty/netty-common/4.1.52.Final/jar] declares the blockhound dependency as optional:

{noformat}
    <dependency>
      <groupId>io.projectreactor.tools</groupId>
      <artifactId>blockhound</artifactId>
      <version>1.0.3.RELEASE</version>
      <scope>compile</scope>
      <optional>true</optional>
    </dependency>
{noformat}



[~iemejia] I'm going to send email about this upgrade to dev@beam.apache.org. As per https://s.apache.org/beam-release-vendored-artifacts, can I nominate you as the release manager?
(Once I finish the [PR#14028|https://github.com/apache/beam/pull/14028]. I would like the release manager to take over "Build a release candidate" and voting in the doc. )


{quote}2. Update the Beam codebase to use the vendored dependency (usually a huge but relatively straight forward PR).
...
(2) to have been tested in advance{quote}

Yes, before voting, let me think about how I can test the vendored guava. I think inserting few commands to install the vendored artifact locally (as in [README.md|https://github.com/apache/beam/pull/14028/files#diff-127a723f9b1317696bc8bcbc91190d0133ec55700142b019393f56c0cb2744e2R38]) for Jenkins would make it possible to confirm it without actually publishing the artifact.

I think we should get this cherrypicked into 2.29.0. How is it going?

[~kenn] Yes, it worked ([link|https://github.com/apache/beam/pull/14028#issuecomment-797568330]). With [this hack|https://github.com/apache/beam/pull/14028/files#diff-c0dfa6bc7a8685217f70a860145fbdf416d449eaff052fa28352c5cec1a98c06R344] to install the vendored gRPC artifact to local Maven repository, the checks on the pull request runs against the new vendored artifact.

I need somebody with committer permission to perform the release. Can I nominate you as a release manager?

I expect the following tasks from the release manager:
* Check out my branch in the [PR#14028|https://github.com/apache/beam/pull/14028]
* Build the vendored artifact by {{./gradlew -p vendor/grpc-1_36_0 -PisRelease -PvendoredDependenciesOnly publish}}
* Follow the rest in https://s.apache.org/beam-release-vendored-artifacts for svn, voting, and etc.



Yes I can do that. I will take this issue until I have completed it.

Thank you. I've sent an email to the dev mailing list. I'm confirming [the PR|https://github.com/apache/beam/pull/14028] passes "SQL Post Commit Tests", which was fixed in master this morning.

I don't think this issue should be blocking the release because even if we release the vendored gRPC version the follow up PR to update the use of the vendored dependency on the code will still be needed and that looks like a huge (and hellish) thing to cherry pick. WDYT? Maybe we should just move the version where this will be fixed to 2.30.0

I'm ok this to be fixed in 2.30.0. (It's not blocking me)

 

I saw Kenn's email about the vote passed for the vendored gRPC release and [https://search.maven.org/artifact/org.apache.beam/beam-vendor-grpc-1_36_0/0.1/jar] is available. I'll work on the PR today.

 

 

[https://github.com/apache/beam/pull/14295] upgraded the dependency. The vendored gRPC does not have Eclipse Jetty dependency.

Reopening this issue as the commit was reverted, because we started observing frequent (not always) build timeouts in "Java Precommit Cron" ([detail|https://github.com/apache/beam/pull/14466#issuecomment-815343974]).

 

Investigation: [https://github.com/apache/beam/pull/14474]
 * gRPC 1.36.0's netty dependency: 4.1.52.Final (Bad)
 * gRPC 1.34.0's netty dependency: 4.1.51.Final (Bad)
 * gRPC 1.32.2's netty dependency: 4.1.51.Final (Good)
 * gRPC 1.26.0's netty dependency: 4.1.42.Final (Good)

Good/Bad is from https://github.com/apache/beam/pull/14295#issuecomment-806071087

Thanks for the deep investigation. Is it valuable to upgrade to 1.32.2 then?

(Sorry for late response) I prefer to have newer version and investigate the problem investigated further. Let me try gRPC 1.37.0 to see any improvement.

Looks like the upgrade was successfully merged. Can we close this now?

I just marked Fixed.

Thanks a lot for all your attention to this issue [~suztomo] !

Hi guys, 
The version  1.36 will fix the netty dependency issue. 
Do you guys have any information about the log4j-api issue ? 
2.6.2 -> 2.8.2

!image (28).png!

[~abelmatos] the issue for Beam should be covered by BEAM-11055 (Notice that if you use HCatalogIO the issue might be still there because this requires a harder todo version upgrade).

