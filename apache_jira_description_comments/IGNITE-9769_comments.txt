GitHub user SomeFire opened a pull request:

    https://github.com/apache/ignite/pull/4897

    IGNITE-9769 IgniteCacheAtomicProtocolTest.testPutReaderUpdate1 is flaky

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/SomeFire/ignite IGNITE-9769

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/ignite/pull/4897.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #4897
    
----
commit e7addd989e230953277ae16c14d61aa003a585ad
Author: Dmitrii Ryabov <somefireone@...>
Date:   2018-10-02T18:06:48Z

    IGNITE-9769 IgniteCacheAtomicProtocolTest.testPutReaderUpdate1 is flaky

----


{panel:title=No blockers found!|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}{panel}
[TeamCity Run All|http://ci.ignite.apache.org/viewLog.html?buildId=1991656&amp;buildTypeId=IgniteTests24Java8_RunAll]

The test fails because affinity version (and partition assignment) doesn't ready, {{awaitPartitionExchange}} is awaiting not last, but the previous version. Flakiness can be removed by moving key determination to the late moment of time or waiting for a specific affinity version. Current implementation solves ticket in a first way.

[~SomeFire], I think we are a tiny step away from the correct solution :) Let's create a method in {{GridCommonAbstractTest}} that will wait for the proper affinity version and use it in this test (something similar is done in {{CacheLateAffinityAssignmentTest#testAffinitySimpleNoCacheOnCoordinator1}}).

Otherwise, the test will become flaky again if we speed up client start, for example.

[~SomeFire] after a bit deeper code check, I see that {{awaitPartitionMapExchange}} actually checks ideal partition distribution. Can you please describe the race you see in greater detail? Probably, the {{awaitPartitionMapExchange}} method needs to be fixed.

[~agoncharuk], sometimes {{awaitPartitionMapExchange}} waits for not latest affinity version. Then the latest affinity changes affinity assignment. I tried to fix {{awaitPartitionMapExchange}}, but in such cases I couldn't see the latest affinity version inside {{awaitPartitionMapExchange}} method.

[~agoncharuk], I added awaiting for specific affinity version in PR.

[Test suite|https://ci.ignite.apache.org/viewLog.html?buildId=2116507&tab=buildResultsDiv&buildTypeId=IgniteTests24Java8_Cache5] is ok. [100 runs|https://ci.ignite.apache.org/viewLog.html?buildId=2068911&tab=buildResultsDiv&buildTypeId=IgniteTests24Java8_Cache5] are ok.

{noformat}if(affNodesCnt!=ownerNodesCnt||!affNodes.containsAll(owners)||
    (waitEvicts&&loc!=null&&loc.state()!=GridDhtPartitionState.OWNING)){
    if(i%50==0)
    LT.warn(log(),"Waiting for topology map update ["+
    "igniteInstanceName="+g.name()+
    ", cache="+cfg.getName()+
    ", cacheId="+dht.context().cacheId()+
    ", topVer="+top.readyTopologyVersion()+
    ", p="+p+
    ", affNodesCnt="+affNodesCnt+
    ", ownersCnt="+ownerNodesCnt+
    ", affNodes="+F.nodeIds(affNodes)+
    ", owners="+F.nodeIds(owners)+
    ", topFut="+topFut+
    ", locNode="+g.cluster().localNode()+']');
{noformat}
Looks like we need to check not only that affNodes.containsAll(owners), but also that order of nodes in these collections (or at least first nodes, that are primaries) is the same.

[~ilantukh], I added check for primaries. Can you review the changes?

[~SomeFire],
The name *equalsPrimaryAffNodes* is misleading, because it will be *true* if primary nodes are *not equal*. Also, I think it will be more readable if you simply add something like this to *if* condition:
{noformat}
|| !dht.context().affinity().primaryByPartition(p, readyVer).equals(affNodes.get(0))
{noformat}

With these check added you should be able to rollback other changes you did in this PR and the test should pass.

{panel:title=No blockers found!|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}{panel}
[TeamCity Run All Results|http://ci.ignite.apache.org/viewLog.html?buildId=2189229&amp;buildTypeId=IgniteTests24Java8_RunAll]

[~ilantukh], done.

[~SomeFire],
Do we still need changes in IgniteCacheAtomicProtocolTest to resolve this ticket?

[~ilantukh], yes, because we must wait for PME and generate key only after cache was started.

OK, patch looks good to me. Thanks for the contribution!

Thanks, [~SomeFire], merged your changes to master.

Github user asfgit closed the pull request at:

    https://github.com/apache/ignite/pull/4897


