+1

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
|| || || || {color:brown} master Compile Tests {color} ||
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:red}-1{color} | {color:red} asflicense {color} | {color:red}  1m  2s{color} | {color:red} The patch generated 2 ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black}  1m 55s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Optional Tests |  asflicense  |
| uname | Linux hiveptest-server-upstream 3.16.0-4-amd64 #1 SMP Debian 3.16.43-2+deb8u5 (2017-09-19) x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /data/hiveptest/working/yetus_PreCommit-HIVE-Build-21843/dev-support/hive-personality.sh |
| git revision | master / 8b9fadb |
| asflicense | http://104.198.109.242/logs//PreCommit-HIVE-Build-21843/yetus/patch-asflicense-problems.txt |
| modules | C: ql U: ql |
| Console output | http://104.198.109.242/logs//PreCommit-HIVE-Build-21843/yetus.txt |
| Powered by | Apache Yetus    http://yetus.apache.org |


This message was automatically generated.





Here are the results of testing the latest attachment:
https://issues.apache.org/jira/secure/attachment/13000717/HIVE-23264.01.patch

{color:green}SUCCESS:{color} +1 due to 1 test(s) being added or modified.

{color:red}ERROR:{color} -1 due to 2 failed/errored test(s), 17122 tests executed
*Failed tests:*
{noformat}
org.apache.hadoop.hive.cli.TestCliDriver.testCliDriver[timestamptz_2] (batchId=37)
org.apache.hadoop.hive.ql.parse.TestReplTableMigrationWithJsonFormat.org.apache.hadoop.hive.ql.parse.TestReplTableMigrationWithJsonFormat (batchId=198)
{noformat}

Test results: https://builds.apache.org/job/PreCommit-HIVE-Build/21843/testReport
Console output: https://builds.apache.org/job/PreCommit-HIVE-Build/21843/console
Test logs: http://104.198.109.242/logs/PreCommit-HIVE-Build-21843/

Messages:
{noformat}
Executing org.apache.hive.ptest.execution.TestCheckPhase
Executing org.apache.hive.ptest.execution.PrepPhase
Executing org.apache.hive.ptest.execution.YetusPhase
Executing org.apache.hive.ptest.execution.ExecutionPhase
Executing org.apache.hive.ptest.execution.ReportingPhase
Tests exited with: TestsFailedException: 2 tests failed
{noformat}

This message is automatically generated.

ATTACHMENT ID: 13000717 - PreCommit-HIVE-Build

I think adding {{-- SORT_QUERY_RESULTS}} in q file is better than changing the actual test queries

[~vgarg] why is it better? I mean what is the advantage of it - except for less work?

Depending upon the test ORDER BY (or any change in the query) could change the plan and thus the test itself. I don't know if it's the case with this test.

I see your point, on the other hand a  {{-- SORT_QUERY_RESULTS }}may lead to a situation where one query produces some lines that the other one lacks, and still it would run fine. So I'd only use it if there is only one query in the q file. Thanks for the comment though, I'll keep that in mind. I've checked this q test again, and in this case the potential plan change is not an issue.

Pushed to master. As this patch is fixing a flaky test causing a lot of issues lately, it was merged without a successful ptest run, to prevent future failings because of this. I'll keep an eye on this test for the next runs to make sure it is not casing a regression.

bq. I see your point, on the other hand a  {{-- SORT_QUERY_RESULTS }}may lead to a situation where one query produces some lines that the other one lacks, and still it would run fine. So I'd only use it if there is only one query in the q file
Sorry I don't understand what do you mean. SORT_QUERY_RESULTS is only suppose to sort the result output. Can you give an example?

Let's suppose query 1 has these results:

 
{code:java}
a
a
b
{code}
 

while query 2 has this:

 
{code:java}
a
b
b
{code}
 

Now if by error query 1 would return this:

 
{code:java}
a
a
b
b
{code}
and query 2 would return this:

 
{code:java}
a
b
{code}
 

after a -- SORT_QUERY_RESULTS the result would be fine, as there are enough 'a' and 'b' lines

 

SORT_QUERY_RESULTS doesn't sort globally, it sorts result per query. So the output will remain same per query.

Oh, I see now. Yes, in this case it is a simpler solution.

