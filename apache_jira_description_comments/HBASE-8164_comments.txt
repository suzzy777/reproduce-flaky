It failed in hbase-0.95 build #96 as well.

From https://builds.apache.org/job/HBase-TRUNK/3979/testReport/junit/org.apache.hadoop.hbase.master/TestTableLockManager/testTableReadLock/ :
{code}
2013-03-21 01:26:54,242 WARN  [Split thread] master.TestTableLockManager$6(363): Caught exception
java.io.IOException: java.io.IOException: java.lang.AssertionError: getSplitPoint() called on a region that can't split!
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:525)
	at org.apache.hadoop.ipc.RemoteException.instantiateException(RemoteException.java:95)
	at org.apache.hadoop.ipc.RemoteException.unwrapRemoteException(RemoteException.java:79)
	at org.apache.hadoop.hbase.ipc.ProtobufRpcClientEngine$Invoker.invoke(ProtobufRpcClientEngine.java:146)
	at $Proxy18.splitRegion(Unknown Source)
	at org.apache.hadoop.hbase.protobuf.ProtobufUtil.split(ProtobufUtil.java:1423)
	at org.apache.hadoop.hbase.client.HBaseAdmin.split(HBaseAdmin.java:1766)
	at org.apache.hadoop.hbase.client.HBaseAdmin.split(HBaseAdmin.java:1738)
	at org.apache.hadoop.hbase.client.HBaseAdmin.split(HBaseAdmin.java:1711)
	at org.apache.hadoop.hbase.master.TestTableLockManager$6.chore(TestTableLockManager.java:361)
	at org.apache.hadoop.hbase.Chore.run(Chore.java:81)
	at java.lang.Thread.run(Thread.java:722)
Caused by: org.apache.hadoop.hbase.ipc.RemoteWithExtrasException: java.io.IOException: java.lang.AssertionError: getSplitPoint() called on a region that can't split!
	at org.apache.hadoop.hbase.regionserver.HStore.getSplitPoint(HStore.java:1533)
	at org.apache.hadoop.hbase.regionserver.RegionSplitPolicy.getSplitPoint(RegionSplitPolicy.java:81)
	at org.apache.hadoop.hbase.regionserver.HRegion.checkSplit(HRegion.java:5132)
	at org.apache.hadoop.hbase.regionserver.HRegionServer.splitRegion(HRegionServer.java:3493)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.apache.hadoop.hbase.ipc.ProtobufRpcServerEngine$Server.call(ProtobufRpcServerEngine.java:174)
	at org.apache.hadoop.hbase.ipc.HBaseServer$Handler.run(HBaseServer.java:1871)

	at org.apache.hadoop.hbase.ipc.HBaseClient.call(HBaseClient.java:1321)
	at org.apache.hadoop.hbase.ipc.ProtobufRpcClientEngine$Invoker.invoke(ProtobufRpcClientEngine.java:131)
	... 8 more
2013-03-21 01:26:54,244 FATAL [Split thread] hbase.Chore(92): Split threaderror
java.lang.AssertionError: java.io.IOException: java.lang.AssertionError: getSplitPoint() called on a region that can't split!
	at org.junit.Assert.fail(Assert.java:88)
	at org.apache.hadoop.hbase.master.TestTableLockManager$6.chore(TestTableLockManager.java:364)
	at org.apache.hadoop.hbase.Chore.run(Chore.java:81)
	at java.lang.Thread.run(Thread.java:722)
2013-03-21 01:26:54,244 INFO  [Split thread] hbase.Chore(94): Split thread exiting
{code}

Since Split thread exited, the test got stuck waiting for region count to get over 10.

I think we can expose HRegion#checkSplit() so that splitThread in testTableReadLock() can detect whether the randomly selected region is splittable.

You will work on this Ted or can i take it up.?

I do plan to work on this today.

First attempt.

Looped TestTableLockManager 6 times locally which all passed.

Does the above exception come out when you call admin.split?

I'd be +1 on committing this and then leaving issue open to see if it arises later.

The exception came out of HBaseAdmin.split(HBaseAdmin.java:1711)

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12575039/8164.txt
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified tests.

    {color:green}+1 hadoop2.0{color}.  The patch compiles against the hadoop 2.0 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.regionserver.TestSplitTransactionOnCluster
                  org.apache.hadoop.hbase.regionserver.wal.TestHLog

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/4970//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/4970//console

This message is automatically generated.

Patch v2 utilizes checkSplit() so that we can see which region is splittable.

On Mac, I noticed about 20 second speedup for TestTableLockManager

{color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12575062/8164-v2.txt
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified tests.

    {color:green}+1 hadoop2.0{color}.  The patch compiles against the hadoop 2.0 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/4973//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4973//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4973//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4973//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4973//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4973//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4973//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4973//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4973//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/4973//console

This message is automatically generated.

Two comments: 
{code}
 regions.get(idx).checkSplit();
{code}
returns the split point. Can you also check whether this is not-null. 

A lot of the test failures, and flakiness has been related to picking regions not splittable, and trying to split anyway. Should we extract this to HBTU? Can do in a follow up. 

Patch v3 creates utility method HBaseTestingUtility#getSplittableRegion()

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12575230/8164-v3.txt
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 6 new or modified tests.

    {color:green}+1 hadoop2.0{color}.  The patch compiles against the hadoop 2.0 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

    {color:red}-1 site{color}.  The patch appears to cause mvn site goal to fail.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/4989//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4989//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4989//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4989//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4989//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4989//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4989//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4989//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4989//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/4989//console

This message is automatically generated.

Do you want to check for null here:

+          HRegion region = TEST_UTIL.getSplittableRegion(tableName, -1);
+          byte[] regionName = region.getRegionName();

It looks like your new method can legit return a null region.

The region list was obtained this way:
{code}
    List<HRegion> regions = getHBaseCluster().getRegions(tableName);
{code}
where I see:
{code}
        if (Bytes.equals(region.getTableDesc().getName(), tableName)) {
          ret.add(region);
{code}
So the region returned from getSplittableRegion() wouldn't be null.

{code}
+    return null;
+  }
{code}

{code}
+    } while (maxAttempts == -1 || attempts < maxAttempts);
+    return null;
{code}
Were you referring to the above snippet ?

It may happen when maxAttempts is exhausted. But in case of TestTableLockManager, maxAttempts of -1 is passed.

lgtm. 

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12575342/8164-v4.txt
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 6 new or modified tests.

    {color:green}+1 hadoop2.0{color}.  The patch compiles against the hadoop 2.0 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

    {color:red}-1 site{color}.  The patch appears to cause mvn site goal to fail.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.regionserver.TestSplitLogWorker

     {color:red}-1 core zombie tests{color}.  There are 1 zombie test(s): 

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/4993//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4993//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4993//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4993//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4993//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4993//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4993//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4993//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4993//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/4993//console

This message is automatically generated.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12575352/8164-v4.txt
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 6 new or modified tests.

    {color:green}+1 hadoop2.0{color}.  The patch compiles against the hadoop 2.0 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

    {color:red}-1 site{color}.  The patch appears to cause mvn site goal to fail.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.regionserver.wal.TestHLog

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/4996//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4996//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4996//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4996//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4996//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4996//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4996//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4996//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4996//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/4996//console

This message is automatically generated.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12575376/8164-v4.txt
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 6 new or modified tests.

    {color:green}+1 hadoop2.0{color}.  The patch compiles against the hadoop 2.0 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

    {color:red}-1 site{color}.  The patch appears to cause mvn site goal to fail.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.io.encoding.TestChangingEncoding

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/4999//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4999//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4999//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4999//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4999//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4999//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4999//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4999//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/4999//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/4999//console

This message is automatically generated.

Will integrate patch v4 today if there is no more review comment.

Integrated to 0.95 and trunk.

Thanks for the reviews, Stack and Enis.

Will wait for a few builds before resolving.

Integrated in hbase-0.95 #111 (See [https://builds.apache.org/job/hbase-0.95/111/])
    HBASE-8164 TestTableLockManager fails intermittently in trunk builds (Ted Yu) (Revision 1461799)

     Result = FAILURE
tedyu : 
Files : 
* /hbase/branches/0.95/hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java
* /hbase/branches/0.95/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestTableLockManager.java


Integrated in HBase-TRUNK #3998 (See [https://builds.apache.org/job/HBase-TRUNK/3998/])
    HBASE-8164 TestTableLockManager fails intermittently in trunk builds (Ted Yu) (Revision 1461797)

     Result = FAILURE
tedyu : 
Files : 
* /hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java
* /hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestTableLockManager.java


TestTableLockManager failed in trunk build #3998
Will look into the failure.

Integrated in HBase-TRUNK-on-Hadoop-2.0.0 #467 (See [https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/467/])
    HBASE-8164 TestTableLockManager fails intermittently in trunk builds (Ted Yu) (Revision 1461797)

     Result = FAILURE
tedyu : 
Files : 
* /hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java
* /hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestTableLockManager.java


Integrated in hbase-0.95-on-hadoop2 #46 (See [https://builds.apache.org/job/hbase-0.95-on-hadoop2/46/])
    HBASE-8164 TestTableLockManager fails intermittently in trunk builds (Ted Yu) (Revision 1461799)

     Result = FAILURE
tedyu : 
Files : 
* /hbase/branches/0.95/hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java
* /hbase/branches/0.95/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestTableLockManager.java


Here was the reason the test failed:
{code}
2013-03-28 23:27:24,108 WARN  [Split thread] master.TestTableLockManager$6(364): Caught exception
org.apache.hadoop.hbase.exceptions.NotServingRegionException: org.apache.hadoop.hbase.exceptions.NotServingRegionException: Region is not online: 821616a109dcc97ad7f037ae5b636aa2
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:525)
	at org.apache.hadoop.ipc.RemoteException.instantiateException(RemoteException.java:95)
	at org.apache.hadoop.ipc.RemoteException.unwrapRemoteException(RemoteException.java:79)
	at org.apache.hadoop.hbase.ipc.ProtobufRpcClientEngine$Invoker.invoke(ProtobufRpcClientEngine.java:146)
	at $Proxy18.splitRegion(Unknown Source)
	at org.apache.hadoop.hbase.protobuf.ProtobufUtil.split(ProtobufUtil.java:1424)
	at org.apache.hadoop.hbase.client.HBaseAdmin.split(HBaseAdmin.java:1805)
	at org.apache.hadoop.hbase.client.HBaseAdmin.split(HBaseAdmin.java:1777)
	at org.apache.hadoop.hbase.client.HBaseAdmin.split(HBaseAdmin.java:1750)
	at org.apache.hadoop.hbase.master.TestTableLockManager$6.chore(TestTableLockManager.java:362)
	at org.apache.hadoop.hbase.Chore.run(Chore.java:81)
	at java.lang.Thread.run(Thread.java:722)
Caused by: org.apache.hadoop.hbase.ipc.RemoteWithExtrasException: org.apache.hadoop.hbase.exceptions.NotServingRegionException: Region is not online: 821616a109dcc97ad7f037ae5b636aa2
	at org.apache.hadoop.hbase.regionserver.HRegionServer.getRegionByEncodedName(HRegionServer.java:2421)
	at org.apache.hadoop.hbase.regionserver.HRegionServer.getRegion(HRegionServer.java:3686)
	at org.apache.hadoop.hbase.regionserver.HRegionServer.splitRegion(HRegionServer.java:3492)
	at sun.reflect.GeneratedMethodAccessor51.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.apache.hadoop.hbase.ipc.ProtobufRpcServerEngine$Server.call(ProtobufRpcServerEngine.java:174)
	at org.apache.hadoop.hbase.ipc.HBaseServer$Handler.run(HBaseServer.java:1871)

	at org.apache.hadoop.hbase.ipc.HBaseClient.call(HBaseClient.java:1321)
	at org.apache.hadoop.hbase.ipc.ProtobufRpcClientEngine$Invoker.invoke(ProtobufRpcClientEngine.java:131)
	... 8 more
2013-03-28 23:27:24,109 FATAL [Split thread] hbase.Chore(92): Split threaderror
java.lang.AssertionError: org.apache.hadoop.hbase.exceptions.NotServingRegionException: Region is not online: 821616a109dcc97ad7f037ae5b636aa2
	at org.junit.Assert.fail(Assert.java:88)
	at org.apache.hadoop.hbase.master.TestTableLockManager$6.chore(TestTableLockManager.java:365)
	at org.apache.hadoop.hbase.Chore.run(Chore.java:81)
	at java.lang.Thread.run(Thread.java:722)
2013-03-28 23:27:24,109 INFO  [Split thread] hbase.Chore(94): Split thread exiting
{code}
Region 821616a109dcc97ad7f037ae5b636aa2 moved, resulting in Split thread to exit.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12576114/8164-addendum.txt
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified tests.

    {color:green}+1 hadoop2.0{color}.  The patch compiles against the hadoop 2.0 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

    {color:red}-1 site{color}.  The patch appears to cause mvn site goal to fail.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.regionserver.TestJoinedScanners

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/5047//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5047//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5047//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5047//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5047//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5047//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5047//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5047//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5047//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/5047//console

This message is automatically generated.

Ted, do we know why the region has moved in the first place? LB? Shouldn't admin.split() retry? 

I checked test output again. There was no balancer action earlier than NotServingRegionException was encountered for region 821616a109dcc97ad7f037ae5b636aa2.

bq. Shouldn't admin.split() retry?
We would retry in the next iteration of the loop (on a newly selected region). Or do you mean something else ?

One of the step in modifying a table is to reassign all regions. My understanding is that the split goes to the region server when the region is closed so it is not served.  Split region locks the table only after the region is confirmed to be on the region server and the split request is accepted.

bq. One of the step in modifying a table is to reassign all regions. My understanding is that the split goes to the region server when the region is closed so it is not served. Split region locks the table only after the region is confirmed to be on the region server and the split request is accepted.
Yes, it is indeed what seems to be happening. In this case +1 to the addendum patch. 

Integrated to 0.95 and trunk.

Thanks for the reviews, Jimmy and Enis.

Still keeping this issue open - maybe there is other case I missed.

Integrated in hbase-0.95 #114 (See [https://builds.apache.org/job/hbase-0.95/114/])
    HBASE-8164 TestTableLockManager fails intermittently in trunk builds, addendum (Revision 1462669)

     Result = FAILURE
tedyu : 
Files : 
* /hbase/branches/0.95/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestTableLockManager.java


Integrated in hbase-0.95-on-hadoop2 #48 (See [https://builds.apache.org/job/hbase-0.95-on-hadoop2/48/])
    HBASE-8164 TestTableLockManager fails intermittently in trunk builds, addendum (Revision 1462669)

     Result = FAILURE
tedyu : 
Files : 
* /hbase/branches/0.95/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestTableLockManager.java


Integrated in HBase-TRUNK-on-Hadoop-2.0.0 #469 (See [https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/469/])
    HBASE-8164 TestTableLockManager fails intermittently in trunk builds, addendum (Revision 1462668)

     Result = FAILURE
tedyu : 
Files : 
* /hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestTableLockManager.java


TestTableLockManager passes for me locally now. Since the patch went in, this issue should be marked resolved, right? It can always be reopened as needed if the fix was incorrect (but does not appear to be).

I am trying to find out why the test failed again in https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/469/testReport/org.apache.hadoop.hbase.master/TestTableLockManager/testTableReadLock/ :
{code}
2013-03-30 04:43:51,011 WARN  [Split thread] master.TestTableLockManager$6(366): Caught exception
java.io.IOException: java.io.IOException: java.lang.AssertionError: getSplitPoint() called on a region that can't split!
	at org.apache.hadoop.hbase.regionserver.HStore.getSplitPoint(HStore.java:1540)
	at org.apache.hadoop.hbase.regionserver.RegionSplitPolicy.getSplitPoint(RegionSplitPolicy.java:81)
	at org.apache.hadoop.hbase.regionserver.HRegion.checkSplit(HRegion.java:5172)
	at org.apache.hadoop.hbase.regionserver.HRegionServer.splitRegion(HRegionServer.java:3500)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.hadoop.hbase.ipc.ProtobufRpcServerEngine$Server.call(ProtobufRpcServerEngine.java:174)
	at org.apache.hadoop.hbase.ipc.HBaseServer$Handler.run(HBaseServer.java:1871)

	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:513)
	at org.apache.hadoop.ipc.RemoteException.instantiateException(RemoteException.java:90)
	at org.apache.hadoop.ipc.RemoteException.unwrapRemoteException(RemoteException.java:79)
	at org.apache.hadoop.hbase.ipc.ProtobufRpcClientEngine$Invoker.invoke(ProtobufRpcClientEngine.java:146)
	at $Proxy21.splitRegion(Unknown Source)
	at org.apache.hadoop.hbase.protobuf.ProtobufUtil.split(ProtobufUtil.java:1424)
	at org.apache.hadoop.hbase.client.HBaseAdmin.split(HBaseAdmin.java:1805)
	at org.apache.hadoop.hbase.client.HBaseAdmin.split(HBaseAdmin.java:1777)
	at org.apache.hadoop.hbase.client.HBaseAdmin.split(HBaseAdmin.java:1750)
	at org.apache.hadoop.hbase.master.TestTableLockManager$6.chore(TestTableLockManager.java:361)
	at org.apache.hadoop.hbase.Chore.run(Chore.java:81)
	at java.lang.Thread.run(Thread.java:662)
Caused by: org.apache.hadoop.hbase.ipc.RemoteWithExtrasException(java.io.IOException): java.io.IOException: java.lang.AssertionError: getSplitPoint() called on a region that can't split!
	at org.apache.hadoop.hbase.regionserver.HStore.getSplitPoint(HStore.java:1540)
	at org.apache.hadoop.hbase.regionserver.RegionSplitPolicy.getSplitPoint(RegionSplitPolicy.java:81)
	at org.apache.hadoop.hbase.regionserver.HRegion.checkSplit(HRegion.java:5172)
	at org.apache.hadoop.hbase.regionserver.HRegionServer.splitRegion(HRegionServer.java:3500)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.hadoop.hbase.ipc.ProtobufRpcServerEngine$Server.call(ProtobufRpcServerEngine.java:174)
	at org.apache.hadoop.hbase.ipc.HBaseServer$Handler.run(HBaseServer.java:1871)

	at org.apache.hadoop.hbase.ipc.HBaseClient.call(HBaseClient.java:1321)
	at org.apache.hadoop.hbase.ipc.ProtobufRpcClientEngine$Invoker.invoke(ProtobufRpcClientEngine.java:131)
	... 8 more
2013-03-30 04:43:51,012 FATAL [Split thread] hbase.Chore(92): Split threaderror
java.lang.AssertionError: java.io.IOException: java.lang.AssertionError: getSplitPoint() called on a region that can't split!
	at org.apache.hadoop.hbase.regionserver.HStore.getSplitPoint(HStore.java:1540)
	at org.apache.hadoop.hbase.regionserver.RegionSplitPolicy.getSplitPoint(RegionSplitPolicy.java:81)
	at org.apache.hadoop.hbase.regionserver.HRegion.checkSplit(HRegion.java:5172)
	at org.apache.hadoop.hbase.regionserver.HRegionServer.splitRegion(HRegionServer.java:3500)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.hadoop.hbase.ipc.ProtobufRpcServerEngine$Server.call(ProtobufRpcServerEngine.java:174)
	at org.apache.hadoop.hbase.ipc.HBaseServer$Handler.run(HBaseServer.java:1871)

	at org.junit.Assert.fail(Assert.java:88)
	at org.apache.hadoop.hbase.master.TestTableLockManager$6.chore(TestTableLockManager.java:367)
	at org.apache.hadoop.hbase.Chore.run(Chore.java:81)
	at java.lang.Thread.run(Thread.java:662)
2013-03-30 04:43:51,012 INFO  [Split thread] hbase.Chore(94): Split thread exiting
{code}
getSplittableRegion() didn't appear in stack trace. We catch Exception in getSplittableRegion() while AssertionError is a Throwable.
I think we should remove the fail() in splitThread:
{code}
        } catch (Exception ex) {
          LOG.warn("Caught exception", ex);
          fail(ex.getMessage());
{code}

The reason for failure should be
In getSplittableRegion() 
{code}
 regions = getHBaseCluster().getRegions(tableName);
{code}
The regions are obtained from the RS memory (the online regions in that RS).
Now as per the logs in the failed test run, it seems that the region for which the split failed is the one that just got newly created as part of its parent's split.
Now as this region is added to online region list we tend to check if that new region can be splitted.
Ideally when we check if region.checkSplit() in getSplittableRegions
{code}
    if (!splitPolicy.shouldSplit()) {
      return null;
    }
{code}
The shouldSplit will return false here.  This is because there are no store files for this region and also forceSplit is false.  
You can see that the compaction has not happened for the this region due to the same reason.

But when we issue admin.split() the above shouldSplit is returning true because forceSplit is true now.  And hence it goes upto getSplitPoint() and fails there. 
{code}
2013-03-30 04:43:50,481 INFO  [PRI IPC Server handler 8 on 56813] regionserver.HRegionServer(3551): Compacting testTableReadLock,,1364618626029.be3c0267dd27d6b83ffd4b53832987e2.
2013-03-30 04:43:50,481 DEBUG [PRI IPC Server handler 8 on 56813] compactions.DefaultCompactionPolicy(222): Not compacting files because we only have 0 files ready for compaction. Need 3 to initiate.
2013-03-30 04:43:50,481 DEBUG [PRI IPC Server handler 8 on 56813] regionserver.CompactSplitThread(281): Not compacting testTableReadLock,,1364618626029.be3c0267dd27d6b83ffd4b53832987e2. because compaction request was cancelled
{code}

Pls do correct me if am wrong here.



@Ram:
Nice analysis.

Can you take a look at addendum v2 ?
I try to align splittable region search with the split() call.

Looks like the new way splittable region is chosen is not effective.
TestTableLockManager never seems to complete. Using jstack reveals:
{code}
"Split thread" prio=5 tid=7ff7e291c000 nid=0x125c76000 in Object.wait() [125c75000]
   java.lang.Thread.State: TIMED_WAITING (on object monitor)
  at java.lang.Object.wait(Native Method)
  at org.apache.hadoop.hbase.util.Sleeper.sleep(Sleeper.java:94)
  - locked <78f08d498> (a java.lang.Object)
  at org.apache.hadoop.hbase.Chore.run(Chore.java:89)
{code}

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12576247/8164-addendum-2.txt
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 6 new or modified tests.

    {color:green}+1 hadoop2.0{color}.  The patch compiles against the hadoop 2.0 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.security.access.TestAccessController

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/5066//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5066//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5066//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5066//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5066//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5066//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5066//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5066//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5066//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/5066//console

This message is automatically generated.

Pls check this patch.  I can think of rewriting the logic if this still fails.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12576281/HBASE-8164_addendum_3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified tests.

    {color:green}+1 hadoop2.0{color}.  The patch compiles against the hadoop 2.0 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.TestZooKeeper
                  org.apache.hadoop.hbase.master.TestTableLockManager

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/5072//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5072//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5072//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5072//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5072//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5072//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5072//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5072//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5072//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/5072//console

This message is automatically generated.

Wow..this same test even fails.  :).  Will try out a diff approach.

Am not able to see the logs for this test failure.

@Ram:
Here it is: https://builds.apache.org/job/PreCommit-HBASE-Build/5072//artifact/trunk/hbase-server/target/surefire-reports/org.apache.hadoop.hbase.master.TestTableLockManager-output.txt

{code}
2013-03-31 12:51:05,877 DEBUG [RS_CLOSE_REGION-asf000.sp2.ygridcore.net,38041,1364734244359-0] zookeeper.ZKAssign(721): regionserver:38041-0x13dc07ff3b50002 Attempting to transition node 7512a3d74f54292162072ab564904679 from M_ZK_REGION_CLOSING to RS_ZK_REGION_CLOSED
2013-03-31 12:51:05,879 WARN  [Split thread] master.TestTableLockManager$6(366): Caught exception
java.lang.IllegalArgumentException: n must be positive
	at java.util.Random.nextInt(Random.java:250)
	at org.apache.hadoop.hbase.HBaseTestingUtility.getSplittableRegion(HBaseTestingUtility.java:1946)
	at org.apache.hadoop.hbase.master.TestTableLockManager$6.chore(TestTableLockManager.java:357)
	at org.apache.hadoop.hbase.Chore.run(Chore.java:81)
	at java.lang.Thread.run(Thread.java:662)
{code}
Tomorrow will check more on this.

The reason for getting 0 regions for the table is that, as online schema change is enabled, just when we try to get the region for split the region has been trying to reopen after the modifytable was completed.  This closure of region removed the region from online regions list in the RS. So we get 0 regions.  My latest addendum avoids split to proceed in such cases.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12576341/HBASE-8164_addendum_4.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 6 new or modified tests.

    {color:green}+1 hadoop2.0{color}.  The patch compiles against the hadoop 2.0 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
     

     {color:red}-1 core zombie tests{color}.  There are 1 zombie test(s): 	at org.apache.hadoop.hbase.util.TestHBaseFsck.testFixByTable(TestHBaseFsck.java:1159)

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/5079//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5079//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5079//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5079//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5079//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5079//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5079//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5079//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5079//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/5079//console

This message is automatically generated.

Addendum 4 looks good.
{code}
+               "region got closed and the attempts got over before"
+                + "the region could have got reassigned.");
{code}
There should be a space between before and the.
{code}
+      if(regCount > 0){
{code}
nit: space between 'if' and '('

What I applied.  Includes fixes for Ted nits.

Thanks for addendum [~ram_krish]

"Blessed be the unit test fixers!"

Integrated in hbase-0.95 #118 (See [https://builds.apache.org/job/hbase-0.95/118/])
    HBASE-8164 TestTableLockManager fails intermittently in trunk builds (Revision 1463195)

     Result = SUCCESS
stack : 
Files : 
* /hbase/branches/0.95/hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java
* /hbase/branches/0.95/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestTableLockManager.java


Integrated in HBase-TRUNK #4004 (See [https://builds.apache.org/job/HBase-TRUNK/4004/])
    HBASE-8164 TestTableLockManager fails intermittently in trunk builds (Revision 1463194)

     Result = FAILURE
stack : 
Files : 
* /hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java
* /hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestTableLockManager.java


"Blessed be the unit test fixers!"
bq. Sorry guys for writing a seemingly unfixable unit test :) 

Looks like the test failed after addendum 5 went in:
http://54.241.6.143/job/HBase-TRUNK/org.apache.hbase$hbase-server/74/testReport/junit/org.apache.hadoop.hbase.master/TestTableLockManager/testTableReadLock/

In trunk build #4011:

  testTableReadLock(org.apache.hadoop.hbase.master.TestTableLockManager): test timed out after 600000 milliseconds

Will take a look Ted and update here.

Missed to check out this one. Will do that today.

On my machine, the test needs 5 minutes to run, alone. It means that in parallel on an overloaded jenkins, it can takes much more. I'm surprised it needs so much time. Still, it would make sense to lower the number of split to something like 3 to increase its chances to finish on time?

How about reducing expected region count to 6 ?

On MacBook the test took less than 2 minutes with region count lowered to 6:

Running org.apache.hadoop.hbase.master.TestTableLockManager
2013-04-09 10:32:14.462 java[48493:dc07] Unable to load realm info from SCDynamicStore
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 108.585 sec

Ok, let's do that and see what happens. Do we use this jira or do we need another one?

I will open another JIRA - there're too many addendum to this issue.
And, I don't know if this change is the last :-)

Marking closed.

