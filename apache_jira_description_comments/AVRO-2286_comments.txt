Don't think that's a big one. I'll be trying to submit a fix for this ASAP. Thanks for providing a test, too ;)

Great, thanks! :)

Commit a262a107ddd403e3ac5a773c735110a6565104de in avro's branch refs/heads/master from Martin Jubelgas
[ https://gitbox.apache.org/repos/asf?p=avro.git;h=a262a10 ]

Fix for AVRO-2286 and regression test (#406)



Commit 568ee67c2d0c8d62049741ae78dc91910aa1b6f2 in avro's branch refs/heads/master from RyanSkraba
[ https://gitbox.apache.org/repos/asf?p=avro.git;h=568ee67 ]

AVRO-3033: Fix flaky file descriptor test (#1078)

It looks like before fixing the bug AVRO-2286, the number of openFilesBeforeOperation was always greater than openFilesAfterOperation. In practice, now they're usually the same value, which is promising evidence that there isn't a resource leak there.

The flakiness of the test comes from the fact that "something" might be fuzzing either of them off by one. I used to see this in travis and local builds too (but infrequently). It might be a background, system-process or an action like garbage collection. I don't think it's instability of the machine, it's just not as deterministic as we'd like.

Commit 568ee67c2d0c8d62049741ae78dc91910aa1b6f2 in avro's branch refs/heads/dependabot/nuget/lang/csharp/nunit3testadapter-3.17.0 from RyanSkraba
[ https://gitbox.apache.org/repos/asf?p=avro.git;h=568ee67 ]

AVRO-3033: Fix flaky file descriptor test (#1078)

It looks like before fixing the bug AVRO-2286, the number of openFilesBeforeOperation was always greater than openFilesAfterOperation. In practice, now they're usually the same value, which is promising evidence that there isn't a resource leak there.

The flakiness of the test comes from the fact that "something" might be fuzzing either of them off by one. I used to see this in travis and local builds too (but infrequently). It might be a background, system-process or an action like garbage collection. I don't think it's instability of the machine, it's just not as deterministic as we'd like.

Commit 568ee67c2d0c8d62049741ae78dc91910aa1b6f2 in avro's branch refs/heads/dependabot/nuget/lang/csharp/NUnit.ConsoleRunner-3.12.0 from RyanSkraba
[ https://gitbox.apache.org/repos/asf?p=avro.git;h=568ee67 ]

AVRO-3033: Fix flaky file descriptor test (#1078)

It looks like before fixing the bug AVRO-2286, the number of openFilesBeforeOperation was always greater than openFilesAfterOperation. In practice, now they're usually the same value, which is promising evidence that there isn't a resource leak there.

The flakiness of the test comes from the fact that "something" might be fuzzing either of them off by one. I used to see this in travis and local builds too (but infrequently). It might be a background, system-process or an action like garbage collection. I don't think it's instability of the machine, it's just not as deterministic as we'd like.

Commit 568ee67c2d0c8d62049741ae78dc91910aa1b6f2 in avro's branch refs/heads/dependabot/nuget/lang/csharp/System.Reflection.Emit.Lightweight-4.7.0 from RyanSkraba
[ https://gitbox.apache.org/repos/asf?p=avro.git;h=568ee67 ]

AVRO-3033: Fix flaky file descriptor test (#1078)

It looks like before fixing the bug AVRO-2286, the number of openFilesBeforeOperation was always greater than openFilesAfterOperation. In practice, now they're usually the same value, which is promising evidence that there isn't a resource leak there.

The flakiness of the test comes from the fact that "something" might be fuzzing either of them off by one. I used to see this in travis and local builds too (but infrequently). It might be a background, system-process or an action like garbage collection. I don't think it's instability of the machine, it's just not as deterministic as we'd like.

Commit 568ee67c2d0c8d62049741ae78dc91910aa1b6f2 in avro's branch refs/heads/dependabot/nuget/lang/csharp/System.CodeDom-5.0.0 from RyanSkraba
[ https://gitbox.apache.org/repos/asf?p=avro.git;h=568ee67 ]

AVRO-3033: Fix flaky file descriptor test (#1078)

It looks like before fixing the bug AVRO-2286, the number of openFilesBeforeOperation was always greater than openFilesAfterOperation. In practice, now they're usually the same value, which is promising evidence that there isn't a resource leak there.

The flakiness of the test comes from the fact that "something" might be fuzzing either of them off by one. I used to see this in travis and local builds too (but infrequently). It might be a background, system-process or an action like garbage collection. I don't think it's instability of the machine, it's just not as deterministic as we'd like.

