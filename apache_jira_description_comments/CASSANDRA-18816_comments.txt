scope slightly increased due to bugs found by new fuzz test of repair coordination, so now covers a resource leak when preview is halted due to IR completing.

First pass at review complete. I've left some bits in the PR, we've had some offline conversation as well, and there are some remaining TODOs. My plan is to try to slap a final +1 on this early next week when those are all resolved to our liking.

+1 to the trunk patch

(Let me know if 5.0 is significantly different)

(For the record, I'd support getting this into 5.0.)

added first round of comments on the PR, will check the rest (basically the tests) next week

and second round posted - the new tests all seem to fail so I'll get back to them once fixed

there is also a bunch of TODOs in the patch, should those be fixed or removed?

bq. the new tests all seem to fail 

They are failing when compatibility mode is disabled, which caused us to use the latest messaging version=13... there was a code change that fails serialization if the time value is too large... I asked about this in slack (see https://the-asf.slack.com/archives/CK23JSY2K/p1695314528885979) as this change feels dangerous (we have vint, so why try to truncate when we don't need to?)...  This was failing in those builds as there was a but with the simulated clock... it works with nanoseconds but was given a seed time in milliseconds, and when it created a new millisecond it was actually returning nanoseconds!  The clock was fixed so it now makes sense and the tests are passing locally, will check CI in a few hours to make sure its stable there as well

bq. there is also a bunch of TODOs in the patch, should those be fixed or removed?

{code}
$ git diff trunk | grep TODO
+        throw new UnsupportedOperationException("TODO");
+            throw new UnsupportedOperationException("TODO");
+            throw new UnsupportedOperationException("TODO");
+            throw new UnsupportedOperationException("TODO");
{code}

I can always remove the word "TODO" here, but this is just blocking thread APIs we don't currently support.  I don't intend to add them in this patch as its not needed.

{code}
+    { PREPARE, VALIDATION } // TODO (coverage): SYNC doesn't have a good entry point for injecting the failure
{code}

this one I want to think about more, since sync doesn't have a good point to cause a failure, this condition wasn't checked... ill work on this

All other TODOs are fixed now or removed

removed the sync todo as don't feel it makes too much sense to test that case as we accept if we won the race... since the handling logic is shared, we already have coverage with regard to prepare/validation

tests are stable now.  There was a jdk 17 bug, just pushed a fix... will need to patch in accord as well

+1

it looks like some of the code was copied from elsewhere (like SimulatedExecutorFactory looks very similar to classes in Accord, and you mentioned in the PR that some of the Backoff code was copied from hadoop?) - it would have simplified review a lot if that would have been mentioned in comments.

thanks all!  going to start back porting to 5.0 now

+1 from Caleb / Marcus on trunk, Caleb is rereviewing the 5.0 back port now

Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-5.0|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-18816-cassandra-5.0-B23F0227-BECF-4D24-8BAB-50909DA79982]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-18816-cassandra-5.0-B23F0227-BECF-4D24-8BAB-50909DA79982]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2605/]|
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-18816-trunk-B23F0227-BECF-4D24-8BAB-50909DA79982]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-18816-trunk-B23F0227-BECF-4D24-8BAB-50909DA79982]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2606/]|


will restart the merge tomorrow.  There were a few style comments with the code so will redo the CI tomorrow when I have time to do the merge.

+1 on the 5.0 patch

Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-5.0|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-18816-cassandra-5.0-E73F65B6-7A0A-4D0A-BE22-CFCA00785A0A]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-18816-cassandra-5.0-E73F65B6-7A0A-4D0A-BE22-CFCA00785A0A]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2607/]|
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-18816-trunk-E73F65B6-7A0A-4D0A-BE22-CFCA00785A0A]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-18816-trunk-E73F65B6-7A0A-4D0A-BE22-CFCA00785A0A]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2608/]|


The new {{ConcurrentIrWithPreviewFuzzTest}} introduced by this patch is ~6% flaky in both 5.0 and trunk:

* https://app.circleci.com/pipelines/github/adelapena/cassandra/3222/workflows/ecfca708-f183-429e-80e5-b2bfea8d25a0/jobs/80292/tests
* https://app.circleci.com/pipelines/github/adelapena/cassandra/3221/workflows/bb777ac0-6263-4d6e-aa54-35d6928e1e9b/jobs/80294

{code}
junit.framework.AssertionFailedError: Property error detected:
Seed = 3695691971125975155
Examples = 2
Pure = false
Error: property test did not complete within PT1M
Values:

	at accord.utils.Property$Common.checkWithTimeout(Property.java:115)
	at accord.utils.Property$SingleBuilder.check(Property.java:223)
	at accord.utils.Property$ForBuilder.check(Property.java:124)
	at org.apache.cassandra.repair.ConcurrentIrWithPreviewFuzzTest.concurrentIrWithPreview(ConcurrentIrWithPreviewFuzzTest.java:46)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{code}
I don't see any repeated runs on the CI results above, were they run?

I have opened CASSANDRA-18890 to deal with it.

bq. I don't see any repeated runs on the CI results above, were they run?

Looks like not.  I use my own script for setting up CI and looks like it didn't add repeat jobs... it was before jdk8, so the recent changes must not be working with my script... will try to figure out what's going on

my script to setup CI broke when jdk17 was added, bug in my script.  Fixed locally and see that the _repeat jobs are added back

So anyone using that script has not been running repeated tests before commit since jdk17 was added?

bq. So anyone using that script has not been running repeated tests before commit since jdk17 was added?

That seems to be the case, for example:

* CASSANDRA-18681: https://app.circleci.com/pipelines/github/jonmeredith/cassandra/946/workflows/79250adf-d083-4164-bf64-8266455b2aba
* CASSANDRA-18733: https://app.circleci.com/pipelines/github/jonmeredith/cassandra/906/workflows/d977f977-e8ed-404c-8bb5-92a15916319c
* CASSANDRA-18722: https://app.circleci.com/pipelines/github/jonmeredith/cassandra/900/workflows/7ec4d4c3-c1a5-4683-8f2c-98bbeee18de8
* CASSANDRA-18725: https://app.circleci.com/pipelines/github/jonmeredith/cassandra/893/workflows/0dae5a07-e555-4045-801a-677d9a8e7943

The absence of repeated runs can be easily detected by taking a quick look at the CI results. If the patch contains any changes on tests there should be jobs named with the {{_repeat}} suffix. 

Reviewers can also check the {{.circleci/config.yml}} file to see if it includes the relevant tests.

The bug in the script was my mistake. Thanks for catching it. 

I've searched JIRA and don't see any tickets for flaky tests filed against any of those issues except CASSANDRA-18733. Were you just mentioning the omission for future reference, or are you aware of any issues?

I'll rerun the repeated tests against CASSANDRA-18681, CASSANDRA-18725 and CASSANDRA-18733 for completeness.

I'm not aware of any other flaky tests caused by those tickets. I haven't searched for all the affected tickets. I don't know where it was used nor when the issue started since it's a non-public tool.

I'm mentioning those tickets for reference, and to show the need to review CI results, since tools can fail. 

FWIW, I started using the public tooling after Java 17 support was added...

