Hm, yeah I think I've seen this fail once or twice before. I did look into it a bit a while back, and just could not figure out whether it was a possible bug or an issue with the test itself. My money's definitely on the latter, but it might be worth taking another look sometime if we have the chance. 

If there is a bug that this is uncovering, at least it would not be a correctness bug, only an annoyance in restoring when it's not necessary. I think it's more likely that the test is flaky because for example the consumer dropped out of the group and invoked onPartitionsLost, which would close the task as dirty and require restoring from the changelog

Hm, actually, I guess that could be considered a bug in itself, or at least a flaw in  the recycling feature  – for persistent stores with ALOS, dropping out of the group only causes tasks to be closed dirty, it doesn't force them to be wiped out to restore from the changelog from scratch. But with in-memory stores, simply closing them is akin to physically wiping out the state directory for that task. Avoiding that was the basis for this recycling feature in the first place.

This does kind of suck, but at least it should be a relatively rare event. I'm a bit worried about how much complexity it would introduce to the code to fix this "bug", but I'll at least file a ticket for it now and we can go from there

Filed https://issues.apache.org/jira/browse/KAFKA-12936

Reopening this since it's been extremely flaky lately since being parametrized, specifically for the `stateUpdaterEnabled = true` condition. I was able to reproduce this locally so I've updated logs for the failed run, hopefully this will make it relatively easy to debug but if DEBUG logs are needed you should be able to reproduce it yourself without much trouble

[^RestoreIntegrationTest#shouldRecycleStateFromStandbyTaskPromotedToActiveTaskAndNotRestore[true].rtf]

Fixed again via https://github.com/apache/kafka/commit/ce5faa222b3f58a74994190e3a6267ac87ee21a8

