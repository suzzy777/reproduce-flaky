If sync is the problem, is it possible to make a similar test that will always fail ?
I don't mind changing testPortChange but I'd rather do it if we're sure what the problem is, otherwise we won't know if there's another problem we're missing.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12703763/ZOOKEEPER-2137.patch
  against trunk revision 1665315.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2557//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2557//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2557//console

This message is automatically generated.

How about skipping this test until it's fixed by doing something like Ignore("will be fixed by ZOOKEEPER-2136")?

I guess my preference [~michim] would be to put in this fix unless we think it compromises the usefulness of the test. I'd rather have the test running than not if possible. Otherwise I agree with you; I'm not in the loop enough to know if the test with this change is still useful.

The patch just changes through which server the reconfig operation is submitted. The test is still useful with the proposed change so I agree with Camille. Keep in mind that since we don't know what the bug is there is no guarantee that this fix will solve it. 

Ok sounds good I'll check this patch in and keep it open to remember to change it back when the actual issue is fixed.

trunk: http://svn.apache.org/viewvc?view=revision&revision=1666764
branch-3.5: http://svn.apache.org/viewvc?view=revision&revision=1666765

SUCCESS: Integrated in ZooKeeper-trunk #2628 (See [https://builds.apache.org/job/ZooKeeper-trunk/2628/])
ZOOKEEPER-2137 Make testPortChange() less flaky (Hongchao Deng via michim) (michim: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1666764)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/ReconfigTest.java


-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12703763/ZOOKEEPER-2137.patch
  against trunk revision 1733525.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3083//console

This message is automatically generated.

[~michim] - according to the comments this has been committed to SVN. Why is it still PA? Can you confirm and resolve? Perhaps we can close it given there are followup jiras? (linked) Thanks.

The fix committed apparently didn't fix it:

https://builds.apache.org/job/ZooKeeper_branch35_jdk8/52/

Also, the description indicates that the change here should be reverted once ZOOKEEPER-2136 is fixed.

CC [~phunt]

There's an easy way to test Hongchao's theory about this being the sync's fault. We can replace the syncs by writes.
Also ZOOKEEPER-2000 seems relevant.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12703763/ZOOKEEPER-2137.patch
  against trunk revision 1746511.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    -1 patch.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3180//console

This message is automatically generated.

Add a canonical test case that fails pretty often for me locally to make life easier for those who want a easy reproduce. Also verified this is the only place in entire ReConfig test that will ever fail; other test cases in ReConfig test are solid.

{code}
@Test
    public void testPortChange() throws Exception {
        qu = new QuorumUtil(1); // create 3 servers
        qu.disableJMXTest = true;
        qu.startAll();
        ZooKeeper[] zkArr = createHandles(qu);

        List<String> joiningServers = new ArrayList<String>();

        int leaderIndex = getLeaderId(qu);
        int followerIndex = leaderIndex == 1 ? 2 : 1;

        testNormalOperation(zkArr[followerIndex], zkArr[leaderIndex]);

        // change leader's leading port - should renounce leadership

        int newQuorumPort = PortAssignment.unique();
        joiningServers.add("server." + leaderIndex + "=localhost:"
                + newQuorumPort
                + ":"
                + qu.getPeer(leaderIndex).peer.getElectionAddress().getPort()
                + ":participant;localhost:"
                + qu.getPeer(leaderIndex).peer.getClientPort());

        reconfig(zkArr[leaderIndex], joiningServers, null, null, -1);

        // Fails here.
        testNormalOperation(zkArr[followerIndex], zkArr[leaderIndex]);

        Assert.assertTrue(qu.getPeer(leaderIndex).peer.getQuorumAddress()
                .getPort() == newQuorumPort);
        Assert.assertTrue(getLeaderId(qu) != leaderIndex); // the leader changed

        joiningServers.clear();

        closeAllHandles(zkArr);
    }
{code}

Change the status from Patch Available to Open, as the old patch does not fix the problem.

sync API is an asynchronous API, so the sync request might not be processed on server side after the call returned. This patch introduces a small delay after the sync call. I've validated that testPortChange passes in my endurance tests (600 runs). 

In ZOOKEEPER-2137.patch, a delay was introduced after sync. This is not ideal as the timing may be off and depend on runtime environment. This ZOOKEEPER-2137-cb.patch did the fix in a different way by using a count down latch to block main thread until the callback from sync is executed, at which point the sync request should have been processed by server. 

However, this fix does not pass my endurance tests. I am suspecting there might be a separate issue in the watcher and/or server code, and I am looking into it. Meanwhile, it might be good to get ZOOKEEPER-2137.patch in trunk which survives endurance tests.

Good catch - apprently there isn't a synchronous sync API ??
Since we know sync isn't always correct and we now know about the async/sync issue, perhaps we should just use synchronous setData
to some dummy znode instead of the sync in the reconfig test ? That should have the intended effect of the sync. Notice that there's another place where sync is used, in testServerHasConfig 

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12808768/ZOOKEEPER-2137-cb.patch
  against trunk revision 1746511.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 5 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3183//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3183//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3183//console

This message is automatically generated.

Note testPortChange failed on build bot because it was running against ZOOKEEPER-2137-cb.patch which does not fix the issue as mentioned earlier. ZOOKEEPER-2137.patch should fix the tests, but it does not get triggered for some reasons..

bq. Good catch - apprently there isn't a synchronous sync API ??
I think so, there is no sync version of the "sync". Probably we should.

bq. perhaps we should just use synchronous setData
Good idea, will try.

bq. there's another place where sync is used, in testServerHasConfig
Ah, I missed this one. The (incorrect) usage of sync in testServerHasConfig never fails in my endurance tests, for some reasons.

Update patch that replaces sync() calls with setData based on Alex's feedback.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12808828/ZOOKEEPER-2137.patch
  against trunk revision 1746511.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3184//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3184//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3184//console

This message is automatically generated.

Cancel patch for now to investigate the KeeperException thrown from tests.

notice that the patch introduces a requirement that one of the functions (the one creating the dummy node) runs before the other, that just sets it.
Perhaps that's the reason for the failure ? In any case, could you try to change it somehow ? Note that other tests, not in this file, use these two functions.

Thanks for the tip, the failure is not from testPortChange but from ReconfigFailureCasesTest.testObserverToParticipantConversionFails which uses testNormalOperation, and it looks like caused by what you said. Will check it out later.

In:

{code}
public static void testNormalOperation(ZooKeeper writer, ZooKeeper reader)
                    try{ 
                        writer.create("/test", "test".getBytes(),
                            ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
+                       reader.create("/dummy", "dummy".getBytes(),
+                               ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
                    } catch (KeeperException.NodeExistsException e) {                       
                    }
{code}

don't you want *each* create() call to be independently wrapped within a try/catch NodeExistsException to ensure both writer and reader have an updated view of the world?

Yup I think you are right [~rgs], I could see one case where an existing writer node created by a different call of testNormalOperation (where the zk handles were shared between calls) can throw the exception that skip reader node creation - which might be the cause of the failure in previous pre-commit tests. 

Rework patch based on feedback from Alex and Raul: separate creation of znode for reader / writer zookeeper handles using a dedicated function.

+1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12809039/ZOOKEEPER-2137.patch
  against trunk revision 1747408.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 7 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3186//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3186//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/3186//console

This message is automatically generated.

lgtm, +1.

[~shralex]: any other thoughts?

+1 from me too, thanks Michael!

Thanks Michael! Committed to 3.5.2 and trunk.

Thanks Pat for committing it! And thanks for Alex & Raul for your review and feedback :-)

SUCCESS: Integrated in ZooKeeper-trunk #2961 (See [https://builds.apache.org/job/ZooKeeper-trunk/2961/])
ZOOKEEPER-2137: Make testPortChange() less flaky (Michael Han via phunt) (phunt: [http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1748608])
* trunk/CHANGES.txt
* trunk/src/java/test/org/apache/zookeeper/test/ReconfigTest.java


