It appears that this is a failure of a previous test to do its cleanup.  I note that the suspicious string found
{noformat}
org.apache.geode.distributed.DistributedSystemDisconnectedException: Distribution manager on 172.17.0.3(server-1:496)<v1>:41002 started at Thu Nov 15 19:47:58 UTC 2018: Message distribution has terminated
{noformat}

has a timestamp before the beginning of the "failed" test, as noted in the {{<artifacts>/geode-web/build/distributedTest/distributedTest-progress.txt}}

{noformat}
2018-11-15 19:48:07.082 +0000 Starting test org.apache.geode.management.internal.cli.commands.ShutdownCommandOverHttpDUnitTest testShutdownAll
[...]
2018-11-15 19:48:16.635 +0000 Completed test org.apache.geode.management.internal.cli.commands.ShutdownCommandOverHttpDUnitTest testShutdownAll with result: FAILURE
{noformat}

Additional investigation forthcoming...

While separate test classes should be properly containerized, it is worth noting that the following tests were running at the time the suspect string is timestamped:

{noformat}
org.apache.geode.management.internal.cli.commands.ConnectCommandWithSSLTest connectWithClusterAndJmxSSL 
org.apache.geode.management.internal.cli.commands.ExportLogsOverHttpDistributedTest testExportWithNoFilters 
org.apache.geode.management.internal.cli.commands.AlterRuntimeCommandDUnitTest alterStatisticSampleRateRangeIsEnforced(true) [0]
org.apache.geode.management.internal.cli.commands.RegionMembershipMBeanOverHttpDUnitTest testAddRmNewMemberWithReplicatedRegionsAndSubregions
org.apache.geode.management.internal.cli.commands.QueryCommandOverHttpDUnitTest testQueryEvictedDataDeserializable
org.apache.geode.management.internal.security.LogNoPasswordDistributedTest testPasswordInLogs
org.apache.geode.management.internal.cli.commands.ConnectCommandWithSSLTest connectWithClusterAndJmxSSL
org.apache.geode.management.internal.cli.commands.ShutdownCommandOverHttpDUnitTest testShutdownServers
{noformat}

Tighter checking for suspect strings has been opened in GEODE-6079.  Hopefully that will narrow down where the actual flakiness is.

https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-develop-main/jobs/WindowsGfshDistributedTestOpenJDK8/builds/545

Failed here: [https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-develop-main/jobs/WindowsGfshDistributedTestOpenJDK8/builds/589]

[https://concourse.gemfire-ci.info/teams/main/pipelines/gemfire-develop-main/jobs/DistributedTestOpenJDK8/builds/756]

Looking at the code, this look like a race condition in ShutdownFunction.execute. It spins up a thread to shutdown the cache, and then sends a reply (using geode's messaging). So maybe the shutdown can happen before the reply? This class then does a blanket catch and log warning. Maybe ignoring CancelException would be ok, or maybe this should somehow reply before shutdown?

I tried looking at this yesterday. [~upthewaterspout]'s idea seems plausible, but something I don't understand is: The code in ShutdownFunction.execute seems to _wait_ until the cache is shutdown, _then_ send the reply. So it seems that the shutdown would _always_ happen before the reply. Given that, I don't understand why this test doesn't fail every time. 

Failed again: https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-develop-main/jobs/DistributedTestOpenJDK11/builds/1242

Seen again in https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-develop-main/jobs/DistributedTestOpenJDK8/builds/1320

Two failures in the mass test runs..

 
{noformat}
         testShutdownAll       https://concourse.apachegeode-ci.info/teams/main/pipelines/mhansonp-mhanson-mass-test-ru-main/jobs/DistributedTestOpenJDK8/builds/1929
         testShutdownAll       https://concourse.apachegeode-ci.info/teams/main/pipelines/mhansonp-mhanson-mass-test-ru-main/jobs/DistributedTestOpenJDK8/builds/1810 {noformat}

testShutdownAll is failing in ShutdownCommandDUnitTest and ShutdownCommandOverHttpDUnitTest

org.apache.geode.management.internal.cli.commands.ShutdownCommandDUnitTest: 1 failures (99.667% success rate)

testShutdownAll [https://concourse.apachegeode-ci.info/teams/main/pipelines/mhansonp-mhanson-mass-test-ru-main/jobs/DistributedTestOpenJDK8/builds/2100]
{noformat}
09:30:23org.apache.geode.management.internal.cli.commands.ShutdownCommandDUnitTest > testShutdownAll FAILED
09:30:23    java.lang.AssertionError: Suspicious strings were written to the log during this run.
09:30:23    Fix the strings or use IgnoredException.addIgnoredException to ignore.
09:30:23    -----------------------------------------------------------------------
09:30:23    Found suspect string in log4j at line 293
09:30:23
09:30:23    org.apache.geode.distributed.DistributedSystemDisconnectedException: Distribution manager on 172.17.0.17(server-2:120)<v2>:41002 started at Mon Dec 16 17:30:08 GMT 2019: Message distribution has terminated
09:30:23    	at org.apache.geode.distributed.internal.ClusterDistributionManager$Stopper.generateCancelledException(ClusterDistributionManager.java:2784)
09:30:23    	at org.apache.geode.CancelCriterion.checkCancelInProgress(CancelCriterion.java:83)
09:30:23    	at org.apache.geode.distributed.internal.ClusterDistributionManager.sendMessage(ClusterDistributionManager.java:2005)
09:30:23    	at org.apache.geode.distributed.internal.ClusterDistributionManager.putOutgoing(ClusterDistributionManager.java:1070)
09:30:23    	at org.apache.geode.internal.cache.FunctionStreamingReplyMessage.send(FunctionStreamingReplyMessage.java:65)
09:30:23    	at org.apache.geode.internal.cache.MemberFunctionStreamingMessage.sendReply(MemberFunctionStreamingMessage.java:368)
09:30:23    	at org.apache.geode.internal.cache.MemberFunctionStreamingMessage.sendReplyForOneResult(MemberFunctionStreamingMessage.java:353)
09:30:23    	at org.apache.geode.internal.cache.execute.MemberFunctionResultSender.lastResult(MemberFunctionResultSender.java:101)
09:30:23    	at org.apache.geode.management.internal.cli.functions.ShutDownFunction.execute(ShutDownFunction.java:55)
09:30:23    	at org.apache.geode.internal.cache.MemberFunctionStreamingMessage.process(MemberFunctionStreamingMessage.java:201)
09:30:23    	at org.apache.geode.distributed.internal.DistributionMessage.scheduleAction(DistributionMessage.java:394)
09:30:23    	at org.apache.geode.distributed.internal.DistributionMessage$1.run(DistributionMessage.java:458)
09:30:23    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
09:30:23    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
09:30:23    	at org.apache.geode.distributed.internal.ClusterOperationExecutors.runUntilShutdown(ClusterOperationExecutors.java:475)
09:30:23    	at org.apache.geode.distributed.internal.ClusterOperationExecutors.doFunctionExecutionThread(ClusterOperationExecutors.java:393)
09:30:23    	at org.apache.geode.logging.internal.executors.LoggingThreadFactory.lambda$newThread$0(LoggingThreadFactory.java:119)
09:30:23    	at java.lang.Thread.run(Thread.java:748)
09:42:03
09:42:03352 tests completed, 1 failed, 5 skipped {noformat}
org.apache.geode.management.internal.cli.commands.ShutdownCommandOverHttpDUnitTest: 1 failures (99.667% success rate)

testShutdownAll [https://concourse.apachegeode-ci.info/teams/main/pipelines/mhansonp-mhanson-mass-test-ru-main/jobs/DistributedTestOpenJDK8/builds/2075]
{noformat}
22:10:45org.apache.geode.management.internal.cli.commands.ShutdownCommandOverHttpDUnitTest > testShutdownAll FAILED
22:10:45    java.lang.AssertionError: Suspicious strings were written to the log during this run.
22:10:45    Fix the strings or use IgnoredException.addIgnoredException to ignore.
22:10:45    -----------------------------------------------------------------------
22:10:45    Found suspect string in log4j at line 264
22:10:45
22:10:45    org.apache.geode.distributed.DistributedSystemDisconnectedException: Distribution manager on 172.17.0.19(server-1:112)<v1>:41001 started at Mon Dec 16 06:10:19 GMT 2019: Message distribution has terminated
22:10:45    	at org.apache.geode.distributed.internal.ClusterDistributionManager$Stopper.generateCancelledException(ClusterDistributionManager.java:2784)
22:10:45    	at org.apache.geode.CancelCriterion.checkCancelInProgress(CancelCriterion.java:83)
22:10:45    	at org.apache.geode.distributed.internal.ClusterDistributionManager.sendMessage(ClusterDistributionManager.java:2005)
22:10:45    	at org.apache.geode.distributed.internal.ClusterDistributionManager.putOutgoing(ClusterDistributionManager.java:1070)
22:10:45    	at org.apache.geode.internal.cache.FunctionStreamingReplyMessage.send(FunctionStreamingReplyMessage.java:65)
22:10:45    	at org.apache.geode.internal.cache.MemberFunctionStreamingMessage.sendReply(MemberFunctionStreamingMessage.java:368)
22:10:45    	at org.apache.geode.internal.cache.MemberFunctionStreamingMessage.sendReplyForOneResult(MemberFunctionStreamingMessage.java:353)
22:10:45    	at org.apache.geode.internal.cache.execute.MemberFunctionResultSender.lastResult(MemberFunctionResultSender.java:101)
22:10:45    	at org.apache.geode.management.internal.cli.functions.ShutDownFunction.execute(ShutDownFunction.java:55)
22:10:45    	at org.apache.geode.internal.cache.MemberFunctionStreamingMessage.process(MemberFunctionStreamingMessage.java:201)
22:10:45    	at org.apache.geode.distributed.internal.DistributionMessage.scheduleAction(DistributionMessage.java:394)
22:10:45    	at org.apache.geode.distributed.internal.DistributionMessage$1.run(DistributionMessage.java:458)
22:10:45    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
22:10:45    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
22:10:45    	at org.apache.geode.distributed.internal.ClusterOperationExecutors.runUntilShutdown(ClusterOperationExecutors.java:475)
22:10:45    	at org.apache.geode.distributed.internal.ClusterOperationExecutors.doFunctionExecutionThread(ClusterOperationExecutors.java:393)
22:10:45    	at org.apache.geode.logging.internal.executors.LoggingThreadFactory.lambda$newThread$0(LoggingThreadFactory.java:119)
22:10:45    	at java.lang.Thread.run(Thread.java:748)
22:22:45
22:22:45140 tests completed, 1 failed {noformat}

Commit 54d2341c7bcb3e7a63fa3562878c0bc0b8ad18ff in geode's branch refs/heads/develop from Ivan Godwin
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=54d2341 ]

GEODE-6070: Fix ShutdownCommandOverHttpDUnitTest

 Inline and refactor TestBase

- Replace deprecated code
- Await shutdowns

Commit 54d2341c7bcb3e7a63fa3562878c0bc0b8ad18ff in geode's branch refs/heads/feature/GEODE-7665 from Ivan Godwin
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=54d2341 ]

GEODE-6070: Fix ShutdownCommandOverHttpDUnitTest

 Inline and refactor TestBase

- Replace deprecated code
- Await shutdowns

WindowsGfshDistributedTestOpenJDK8 build 153:

[https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-develop-main/jobs/WindowsGfshDistributedTestOpenJDK8/builds/153]
{noformat}
org.apache.geode.management.internal.cli.commands.ShutdownCommandOverHttpDUnitTest > testShutdownAll FAILED
16:46:14    java.lang.AssertionError: Suspicious strings were written to the log during this run.
16:46:14    Fix the strings or use IgnoredException.addIgnoredException to ignore.
16:46:14    -----------------------------------------------------------------------
16:46:14    Found suspect string in log4j at line 389
16:46:14
16:46:14    org.apache.geode.distributed.DistributedSystemDisconnectedException: Distribution manager on 10.0.0.90(server2:12308)<v2>:41003 started at Mon May 11 23:45:58 GMT 2020: Message distribution has terminated
16:46:14    	at org.apache.geode.distributed.internal.ClusterDistributionManager$Stopper.generateCancelledException(ClusterDistributionManager.java:2872)
16:46:14    	at org.apache.geode.CancelCriterion.checkCancelInProgress(CancelCriterion.java:83)
16:46:14    	at org.apache.geode.distributed.internal.ClusterDistributionManager.sendMessage(ClusterDistributionManager.java:2018)
16:46:14    	at org.apache.geode.distributed.internal.ClusterDistributionManager.putOutgoing(ClusterDistributionManager.java:1083)
16:46:14    	at org.apache.geode.internal.cache.FunctionStreamingReplyMessage.send(FunctionStreamingReplyMessage.java:65)
16:46:14    	at org.apache.geode.internal.cache.MemberFunctionStreamingMessage.sendReply(MemberFunctionStreamingMessage.java:368)
16:46:14    	at org.apache.geode.internal.cache.MemberFunctionStreamingMessage.sendReplyForOneResult(MemberFunctionStreamingMessage.java:353)
16:46:14    	at org.apache.geode.internal.cache.execute.MemberFunctionResultSender.lastResult(MemberFunctionResultSender.java:101)
16:46:14    	at org.apache.geode.management.internal.cli.functions.ShutDownFunction.execute(ShutDownFunction.java:55)
16:46:14    	at org.apache.geode.internal.cache.MemberFunctionStreamingMessage.process(MemberFunctionStreamingMessage.java:201)
16:46:14    	at org.apache.geode.distributed.internal.DistributionMessage.scheduleAction(DistributionMessage.java:376)
16:46:14    	at org.apache.geode.distributed.internal.DistributionMessage$1.run(DistributionMessage.java:441)
16:46:14    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
16:46:14    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
16:46:14    	at org.apache.geode.distributed.internal.ClusterOperationExecutors.runUntilShutdown(ClusterOperationExecutors.java:442)
16:46:14    	at org.apache.geode.distributed.internal.ClusterOperationExecutors.doFunctionExecutionThread(ClusterOperationExecutors.java:377)
16:46:14    	at org.apache.geode.logging.internal.executors.LoggingThreadFactory.lambda$newThread$0(LoggingThreadFactory.java:119)
16:46:14    	at java.lang.Thread.run(Thread.java:748) {noformat}

Failed again https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-develop-main/jobs/WindowsGfshDistributedTestOpenJDK8/builds/165#A

kirklund opened a new pull request #5162:
URL: https://github.com/apache/geode/pull/5162


   Use IgnoredException for DistributedSystemDisconnectedException.
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jchen21 commented on a change in pull request #5162:
URL: https://github.com/apache/geode/pull/5162#discussion_r431997075



##########
File path: geode-web/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/ShutdownCommandOverHttpDUnitTest.java
##########
@@ -96,48 +93,61 @@ public void setup() throws Exception {
 
     locatorString = "localhost[" + locatorPort + "]";
 
-    locator.invoke(
-        () -> startLocator(locatorDir, locatorPort, locatorJmxPort, locatorHttpPort));
+    locator.invoke(() -> startLocator(locatorDir, locatorPort, locatorJmxPort, locatorHttpPort));
     server1.invoke(() -> startServer(SERVER1_NAME, server1Dir, locatorString));
     server2.invoke(() -> startServer(SERVER2_NAME, server2Dir, locatorString));
 
     gfsh.connectAndVerify(locatorHttpPort, PortType.http);
+
+    addIgnoredException(DistributedSystemDisconnectedException.class);
   }
 
   @Test
   public void testShutdownServers() {
     String command = "shutdown";
 
-    gfsh.executeAndAssertThat(command).statusIsSuccess().containsOutput("Shutdown is triggered");
+    gfsh.executeAndAssertThat(command)
+        .statusIsSuccess()
+        .containsOutput("Shutdown is triggered");
 
     for (VM vm : toArray(server1, server2)) {
       vm.invoke(() -> verifyNotConnected(SERVER_LAUNCHER.get().getCache()));
     }
 
-    gfsh.executeAndAssertThat("list members").statusIsSuccess();
+    gfsh.executeAndAssertThat("list members")
+        .statusIsSuccess();
+
     assertThat(gfsh.getGfshOutput()).contains("locator");
   }
 
   @Test
   public void testShutdownAll() {
     String command = "shutdown --include-locators=true";
 
-    gfsh.executeAndAssertThat(command).statusIsSuccess().containsOutput("Shutdown is triggered");
+    gfsh.executeAndAssertThat(command)
+        .statusIsSuccess()
+        .containsOutput("Shutdown is triggered");
+
     server1.invoke(() -> verifyNotConnected(SERVER_LAUNCHER.get().getCache()));
     server2.invoke(() -> verifyNotConnected(SERVER_LAUNCHER.get().getCache()));
     locator.invoke(() -> verifyNotConnected(LOCATOR_LAUNCHER.get().getCache()));
   }
 
   private void verifyNotConnected(Cache cache) {
-    await().untilAsserted(() -> assertThat(cache.getDistributedSystem().isConnected()).isFalse());
+    await().untilAsserted(() -> {
+      assertThat(cache.getDistributedSystem().isConnected())
+          .as("cache.getDistributedSystem().isConnected()")

Review comment:
       Is it preferable to use `withFailMessage` than `as` for this case?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


kirklund commented on a change in pull request #5162:
URL: https://github.com/apache/geode/pull/5162#discussion_r432154188



##########
File path: geode-web/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/ShutdownCommandOverHttpDUnitTest.java
##########
@@ -96,48 +93,61 @@ public void setup() throws Exception {
 
     locatorString = "localhost[" + locatorPort + "]";
 
-    locator.invoke(
-        () -> startLocator(locatorDir, locatorPort, locatorJmxPort, locatorHttpPort));
+    locator.invoke(() -> startLocator(locatorDir, locatorPort, locatorJmxPort, locatorHttpPort));
     server1.invoke(() -> startServer(SERVER1_NAME, server1Dir, locatorString));
     server2.invoke(() -> startServer(SERVER2_NAME, server2Dir, locatorString));
 
     gfsh.connectAndVerify(locatorHttpPort, PortType.http);
+
+    addIgnoredException(DistributedSystemDisconnectedException.class);
   }
 
   @Test
   public void testShutdownServers() {
     String command = "shutdown";
 
-    gfsh.executeAndAssertThat(command).statusIsSuccess().containsOutput("Shutdown is triggered");
+    gfsh.executeAndAssertThat(command)
+        .statusIsSuccess()
+        .containsOutput("Shutdown is triggered");
 
     for (VM vm : toArray(server1, server2)) {
       vm.invoke(() -> verifyNotConnected(SERVER_LAUNCHER.get().getCache()));
     }
 
-    gfsh.executeAndAssertThat("list members").statusIsSuccess();
+    gfsh.executeAndAssertThat("list members")
+        .statusIsSuccess();
+
     assertThat(gfsh.getGfshOutput()).contains("locator");
   }
 
   @Test
   public void testShutdownAll() {
     String command = "shutdown --include-locators=true";
 
-    gfsh.executeAndAssertThat(command).statusIsSuccess().containsOutput("Shutdown is triggered");
+    gfsh.executeAndAssertThat(command)
+        .statusIsSuccess()
+        .containsOutput("Shutdown is triggered");
+
     server1.invoke(() -> verifyNotConnected(SERVER_LAUNCHER.get().getCache()));
     server2.invoke(() -> verifyNotConnected(SERVER_LAUNCHER.get().getCache()));
     locator.invoke(() -> verifyNotConnected(LOCATOR_LAUNCHER.get().getCache()));
   }
 
   private void verifyNotConnected(Cache cache) {
-    await().untilAsserted(() -> assertThat(cache.getDistributedSystem().isConnected()).isFalse());
+    await().untilAsserted(() -> {
+      assertThat(cache.getDistributedSystem().isConnected())
+          .as("cache.getDistributedSystem().isConnected()")

Review comment:
       I use `as` to indicate an alias for the subject of the assertion, and `withFailMessage` as a full replacement of the failure message.
   
   `distributed system isConnected` is probably a better example of English for an `as` in this case. It's kind of interesting to compare the output when using `as` vs `withFailMessage`.
   
   Using `as`:
   ```
   org.junit.ComparisonFailure: [cache.getDistributedSystem().isConnected()] 
   Expected :false
   Actual   :true
    <Click to see difference>
   
   
   	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
   	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
   	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
   	at org.apache.geode.test.awaitility.WithFailMessageTest.foo(WithFailMessageTest.java:79)
   ```
   Using `withFailMessage`:
   java.lang.AssertionError: cache.getDistributedSystem().isConnected()
   
   	at org.apache.geode.test.awaitility.WithFailMessageTest.foo(WithFailMessageTest.java:79)
   ```
   So I only use `withFailMessage` if I want to actually suppress and replace the native assertion failure message.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


kirklund commented on a change in pull request #5162:
URL: https://github.com/apache/geode/pull/5162#discussion_r432154188



##########
File path: geode-web/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/ShutdownCommandOverHttpDUnitTest.java
##########
@@ -96,48 +93,61 @@ public void setup() throws Exception {
 
     locatorString = "localhost[" + locatorPort + "]";
 
-    locator.invoke(
-        () -> startLocator(locatorDir, locatorPort, locatorJmxPort, locatorHttpPort));
+    locator.invoke(() -> startLocator(locatorDir, locatorPort, locatorJmxPort, locatorHttpPort));
     server1.invoke(() -> startServer(SERVER1_NAME, server1Dir, locatorString));
     server2.invoke(() -> startServer(SERVER2_NAME, server2Dir, locatorString));
 
     gfsh.connectAndVerify(locatorHttpPort, PortType.http);
+
+    addIgnoredException(DistributedSystemDisconnectedException.class);
   }
 
   @Test
   public void testShutdownServers() {
     String command = "shutdown";
 
-    gfsh.executeAndAssertThat(command).statusIsSuccess().containsOutput("Shutdown is triggered");
+    gfsh.executeAndAssertThat(command)
+        .statusIsSuccess()
+        .containsOutput("Shutdown is triggered");
 
     for (VM vm : toArray(server1, server2)) {
       vm.invoke(() -> verifyNotConnected(SERVER_LAUNCHER.get().getCache()));
     }
 
-    gfsh.executeAndAssertThat("list members").statusIsSuccess();
+    gfsh.executeAndAssertThat("list members")
+        .statusIsSuccess();
+
     assertThat(gfsh.getGfshOutput()).contains("locator");
   }
 
   @Test
   public void testShutdownAll() {
     String command = "shutdown --include-locators=true";
 
-    gfsh.executeAndAssertThat(command).statusIsSuccess().containsOutput("Shutdown is triggered");
+    gfsh.executeAndAssertThat(command)
+        .statusIsSuccess()
+        .containsOutput("Shutdown is triggered");
+
     server1.invoke(() -> verifyNotConnected(SERVER_LAUNCHER.get().getCache()));
     server2.invoke(() -> verifyNotConnected(SERVER_LAUNCHER.get().getCache()));
     locator.invoke(() -> verifyNotConnected(LOCATOR_LAUNCHER.get().getCache()));
   }
 
   private void verifyNotConnected(Cache cache) {
-    await().untilAsserted(() -> assertThat(cache.getDistributedSystem().isConnected()).isFalse());
+    await().untilAsserted(() -> {
+      assertThat(cache.getDistributedSystem().isConnected())
+          .as("cache.getDistributedSystem().isConnected()")

Review comment:
       I use `as` to indicate an alias for the subject of the assertion, and `withFailMessage` as a full replacement of the failure message.
   
   `distributed system isConnected` is probably a better example of English for an `as` in this case. It's kind of interesting to compare the output when using `as` vs `withFailMessage`.
   
   Using `as`:
   ```
   org.junit.ComparisonFailure: [cache.getDistributedSystem().isConnected()] 
   Expected :false
   Actual   :true
    <Click to see difference>
   
   
   	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
   	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
   	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
   	at org.apache.geode.test.awaitility.WithFailMessageTest.foo(WithFailMessageTest.java:79)
   ```
   Using `withFailMessage`:
   ```
   java.lang.AssertionError: cache.getDistributedSystem().isConnected()
   
   	at org.apache.geode.test.awaitility.WithFailMessageTest.foo(WithFailMessageTest.java:79)
   ```
   So I only use `withFailMessage` if I want to actually suppress and replace the native assertion failure message.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


kirklund commented on a change in pull request #5162:
URL: https://github.com/apache/geode/pull/5162#discussion_r432154931



##########
File path: geode-web/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/ShutdownCommandOverHttpDUnitTest.java
##########
@@ -96,48 +93,61 @@ public void setup() throws Exception {
 
     locatorString = "localhost[" + locatorPort + "]";
 
-    locator.invoke(
-        () -> startLocator(locatorDir, locatorPort, locatorJmxPort, locatorHttpPort));
+    locator.invoke(() -> startLocator(locatorDir, locatorPort, locatorJmxPort, locatorHttpPort));
     server1.invoke(() -> startServer(SERVER1_NAME, server1Dir, locatorString));
     server2.invoke(() -> startServer(SERVER2_NAME, server2Dir, locatorString));
 
     gfsh.connectAndVerify(locatorHttpPort, PortType.http);
+
+    addIgnoredException(DistributedSystemDisconnectedException.class);
   }
 
   @Test
   public void testShutdownServers() {
     String command = "shutdown";
 
-    gfsh.executeAndAssertThat(command).statusIsSuccess().containsOutput("Shutdown is triggered");
+    gfsh.executeAndAssertThat(command)
+        .statusIsSuccess()
+        .containsOutput("Shutdown is triggered");
 
     for (VM vm : toArray(server1, server2)) {
       vm.invoke(() -> verifyNotConnected(SERVER_LAUNCHER.get().getCache()));
     }
 
-    gfsh.executeAndAssertThat("list members").statusIsSuccess();
+    gfsh.executeAndAssertThat("list members")
+        .statusIsSuccess();
+
     assertThat(gfsh.getGfshOutput()).contains("locator");
   }
 
   @Test
   public void testShutdownAll() {
     String command = "shutdown --include-locators=true";
 
-    gfsh.executeAndAssertThat(command).statusIsSuccess().containsOutput("Shutdown is triggered");
+    gfsh.executeAndAssertThat(command)
+        .statusIsSuccess()
+        .containsOutput("Shutdown is triggered");
+
     server1.invoke(() -> verifyNotConnected(SERVER_LAUNCHER.get().getCache()));
     server2.invoke(() -> verifyNotConnected(SERVER_LAUNCHER.get().getCache()));
     locator.invoke(() -> verifyNotConnected(LOCATOR_LAUNCHER.get().getCache()));
   }
 
   private void verifyNotConnected(Cache cache) {
-    await().untilAsserted(() -> assertThat(cache.getDistributedSystem().isConnected()).isFalse());
+    await().untilAsserted(() -> {
+      assertThat(cache.getDistributedSystem().isConnected())
+          .as("cache.getDistributedSystem().isConnected()")

Review comment:
       And this is the same assertion failure without `as` or `withFailMessage`:
   ```
   org.junit.ComparisonFailure: 
   Expected :false
   Actual   :true
    <Click to see difference>
   
   
   	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
   	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
   	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
   	at org.apache.geode.test.awaitility.WithFailMessageTest.foo(WithFailMessageTest.java:78)
   ```




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jchen21 commented on a change in pull request #5162:
URL: https://github.com/apache/geode/pull/5162#discussion_r432157888



##########
File path: geode-web/src/distributedTest/java/org/apache/geode/management/internal/cli/commands/ShutdownCommandOverHttpDUnitTest.java
##########
@@ -96,48 +93,61 @@ public void setup() throws Exception {
 
     locatorString = "localhost[" + locatorPort + "]";
 
-    locator.invoke(
-        () -> startLocator(locatorDir, locatorPort, locatorJmxPort, locatorHttpPort));
+    locator.invoke(() -> startLocator(locatorDir, locatorPort, locatorJmxPort, locatorHttpPort));
     server1.invoke(() -> startServer(SERVER1_NAME, server1Dir, locatorString));
     server2.invoke(() -> startServer(SERVER2_NAME, server2Dir, locatorString));
 
     gfsh.connectAndVerify(locatorHttpPort, PortType.http);
+
+    addIgnoredException(DistributedSystemDisconnectedException.class);
   }
 
   @Test
   public void testShutdownServers() {
     String command = "shutdown";
 
-    gfsh.executeAndAssertThat(command).statusIsSuccess().containsOutput("Shutdown is triggered");
+    gfsh.executeAndAssertThat(command)
+        .statusIsSuccess()
+        .containsOutput("Shutdown is triggered");
 
     for (VM vm : toArray(server1, server2)) {
       vm.invoke(() -> verifyNotConnected(SERVER_LAUNCHER.get().getCache()));
     }
 
-    gfsh.executeAndAssertThat("list members").statusIsSuccess();
+    gfsh.executeAndAssertThat("list members")
+        .statusIsSuccess();
+
     assertThat(gfsh.getGfshOutput()).contains("locator");
   }
 
   @Test
   public void testShutdownAll() {
     String command = "shutdown --include-locators=true";
 
-    gfsh.executeAndAssertThat(command).statusIsSuccess().containsOutput("Shutdown is triggered");
+    gfsh.executeAndAssertThat(command)
+        .statusIsSuccess()
+        .containsOutput("Shutdown is triggered");
+
     server1.invoke(() -> verifyNotConnected(SERVER_LAUNCHER.get().getCache()));
     server2.invoke(() -> verifyNotConnected(SERVER_LAUNCHER.get().getCache()));
     locator.invoke(() -> verifyNotConnected(LOCATOR_LAUNCHER.get().getCache()));
   }
 
   private void verifyNotConnected(Cache cache) {
-    await().untilAsserted(() -> assertThat(cache.getDistributedSystem().isConnected()).isFalse());
+    await().untilAsserted(() -> {
+      assertThat(cache.getDistributedSystem().isConnected())
+          .as("cache.getDistributedSystem().isConnected()")

Review comment:
       Thank you for the explanation and examples!




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


kirklund merged pull request #5162:
URL: https://github.com/apache/geode/pull/5162


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


Commit 57cc3c7b40816bc1b7bbae80481dea608c7caff5 in geode's branch refs/heads/develop from Kirk Lund
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=57cc3c7 ]

GEODE-6070: Fix ShutdownCommandOverHttpDUnitTest flakiness (#5162)

Use IgnoredException for DistributedSystemDisconnectedException.

Reopening - this failed again in a Windows CI run:

[https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-develop-main/jobs/WindowsGfshDistributedTestOpenJDK11/builds/361]

 
{noformat}
> Task :geode-web:distributedTest
11:46:41
11:46:41org.apache.geode.management.internal.cli.commands.ShutdownCommandOverHttpDUnitTest > testShutdownAll FAILED
11:46:41    java.lang.AssertionError: Suspicious strings were written to the log during this run.
11:46:41    Fix the strings or use IgnoredException.addIgnoredException to ignore.
11:46:41    -----------------------------------------------------------------------
11:46:41    Found suspect string in log4j at line 290
11:46:41
11:46:41    org.apache.geode.distributed.DistributedSystemDisconnectedException: Distribution manager on 10.0.0.35(server2:12032)<v2>:41003 started at Wed Jul 29 18:46:26 GMT 2020: Message distribution has terminated
11:46:41    	at org.apache.geode.distributed.internal.ClusterDistributionManager$Stopper.generateCancelledException(ClusterDistributionManager.java:2864)
11:46:41    	at org.apache.geode.CancelCriterion.checkCancelInProgress(CancelCriterion.java:83)
11:46:41    	at org.apache.geode.distributed.internal.ClusterDistributionManager.sendMessage(ClusterDistributionManager.java:2010)
11:46:41    	at org.apache.geode.distributed.internal.ClusterDistributionManager.putOutgoing(ClusterDistributionManager.java:1083)
11:46:41    	at org.apache.geode.internal.cache.FunctionStreamingReplyMessage.send(FunctionStreamingReplyMessage.java:65)
11:46:41    	at org.apache.geode.internal.cache.MemberFunctionStreamingMessage.sendReply(MemberFunctionStreamingMessage.java:368)
11:46:41    	at org.apache.geode.internal.cache.MemberFunctionStreamingMessage.sendReplyForOneResult(MemberFunctionStreamingMessage.java:353)
11:46:41    	at org.apache.geode.internal.cache.execute.MemberFunctionResultSender.lastResult(MemberFunctionResultSender.java:101)
11:46:41    	at org.apache.geode.management.internal.cli.functions.ShutDownFunction.execute(ShutDownFunction.java:55)
11:46:41    	at org.apache.geode.internal.cache.MemberFunctionStreamingMessage.process(MemberFunctionStreamingMessage.java:201)
11:46:41    	at org.apache.geode.distributed.internal.DistributionMessage.scheduleAction(DistributionMessage.java:376)
11:46:41    	at org.apache.geode.distributed.internal.DistributionMessage$1.run(DistributionMessage.java:441)
11:46:41    	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
11:46:41    	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
11:46:41    	at org.apache.geode.distributed.internal.ClusterOperationExecutors.runUntilShutdown(ClusterOperationExecutors.java:442)
11:46:41    	at org.apache.geode.distributed.internal.ClusterOperationExecutors.doFunctionExecutionThread(ClusterOperationExecutors.java:377)
11:46:41    	at org.apache.geode.logging.internal.executors.LoggingThreadFactory.lambda$newThread$0(LoggingThreadFactory.java:119)
11:46:41    	at java.base/java.lang.Thread.run(Thread.java:834)
11:46:41
11:47:18
11:47:18122 tests completed, 1 failed {noformat}
 

{noformat}
Failed in Windows...
https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-develop-main/jobs/WindowsGfshDistributedTestOpenJDK11/builds/367

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=  Test Results URI =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
http://files.apachegeode-ci.info/builds/apache-develop-main/1.14.0-build.0252/test-results/distributedTest/1596225340/
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Test report artifacts from this job are available at:

http://files.apachegeode-ci.info/builds/apache-develop-main/1.14.0-build.0252/test-artifacts/1596225340/windows-gfshdistributedtest-OpenJDK11-1.14.0-build.0252.tgz {noformat}

This ticket is open for anyone else to take a look. I added an IgnoredException for DistributedSystemDisconnectedException but it still fails suspect strings due to DistributedSystemDisconnectedException, so I assume there's a background thread that remains running past normal tearDown and eventually logs the call stack AFTER the tests have completed. So I'm not sure what we would do next.

Seen on support/1.12 in [WindowsGfshDistributedTestOpenJDK11 #19|https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-support-1-12-main/jobs/WindowsGfshDistributedTestOpenJDK11/builds/19] ... see [test results|http://files.apachegeode-ci.info/builds/apache-support-1-12-main/1.12.2-build.0196/test-results/distributedTest/1615034385/] or download [artifacts|http://files.apachegeode-ci.info/builds/apache-support-1-12-main/1.12.2-build.0196/test-artifacts/1615034385/windows-gfshdistributedtest-OpenJDK11-1.12.2-build.0196.tgz].

Seen on support/1.12 in [windows-gfsh-distributed-test-openjdk11 #33|https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-support-1-12-main/jobs/windows-gfsh-distributed-test-openjdk11/builds/33] ... see [test results|http://files.apachegeode-ci.info/builds/apache-support-1-12-main/1.12.9-build.0349/test-results/distributedTest/1645535957/] or download [artifacts|http://files.apachegeode-ci.info/builds/apache-support-1-12-main/1.12.9-build.0349/test-artifacts/1645535957/windows-gfshdistributedtest-openjdk11-1.12.9-build.0349.tgz].

