This is a serious bug. Please check it. [~dionusos] [~asalamon74] 

Github PR link: https://github.com/apache/oozie/pull/64

[~zuston] Thanks for catching this. I didn't take a deeper look but could you please also provide unit tests for this change. A test which can result in deadlock with the old code but passes with the new code would be great.

 

Thanks

Got it [~dionusos]. Test case will be provided in next few days.

[~dionusos] Hi, could you tell me how to run test case in TestSignalXCommand, like {{mvn test}} shell ? Thanks

To run unit tests using
{noformat}
mvn test -pl <subproject> -Dtest=org.apache.oozie...TestClass{noformat}
Or for example from IntelliJ Idea and to debug the tes case. But in thiscase you may need to run
{noformat}
mvn clean install -DskipTests
mvn -pl core openjpa:enhance {noformat}
 

Thanks [~dionusos].


Now the test case has been attached([link|https://github.com/apache/oozie/pull/65]), you could run it and reproduce the dead-lock.

Besides, the stucked thread stack is in ticket's attachment.

If you run {{testPossibleDeadLock}} method, it will fail.


But when you make the {{{}ConfigurationService.setBoolean(SignalXCommand.FORK_PARALLEL_JOBSUBMISSION, false);{}}}, everything is ok.


Because of the sync invoking in {{SignalXCommand}}
{code:java}
List<Future<ActionExecutorContext>> futures = Services.get().get(CallableQueueService.class)
.invokeAll(tasks)
{code}
 

Please check it and let me know what you think [~dionusos]

Gentle ping [~dionusos]. Could you help check it? So give some suggestion? 

PreCommit-OOZIE-Build started



Testing JIRA OOZIE-3646

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any star imports
.    {color:red}-1{color} the patch contains 5 line(s) longer than 132 characters
.    {color:green}+1{color} the patch adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} Javadoc generation succeeded with the patch
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1{color} There are [3] new bugs found below threshold in total that must be fixed.
.    {color:green}+1{color} There are no new bugs found in [tools].
.    {color:red}-1{color} There are [3] new bugs found below threshold in [core] that must be fixed.
.    You can find the SpotBugs diff here (look for the red and orange ones): core/findbugs-new.html
.    The most important SpotBugs errors are:
.    At BulkJPAExecutor.java:[line 206]: This use of javax/persistence/EntityManager.createQuery(Ljava/lang/String;)Ljavax/persistence/Query; can be vulnerable to SQL/JPQL injection
.    At BulkJPAExecutor.java:[line 176]: At BulkJPAExecutor.java:[line 175]
.    At BulkJPAExecutor.java:[line 205]: At BulkJPAExecutor.java:[line 199]
.    Unsafe comparison of hash that are susceptible to timing attack: At BulkJPAExecutor.java:[line 206]
.    At ShareLibService.java:[line 689]: At ShareLibService.java:[line 695]
.    {color:green}+1{color} There are no new bugs found in [examples].
.    {color:green}+1{color} There are no new bugs found in [webapp].
.    {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
.    {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
.    {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
.    {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
.    {color:green}+1{color} There are no new bugs found in [sharelib/spark].
.    {color:green}+1{color} There are no new bugs found in [sharelib/hive].
.    {color:green}+1{color} There are no new bugs found in [sharelib/git].
.    {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
.    {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
.    {color:green}+1{color} There are no new bugs found in [sharelib/pig].
.    {color:green}+1{color} There are no new bugs found in [fluent-job/fluent-job-api].
.    {color:green}+1{color} There are no new bugs found in [client].
.    {color:orange}0{color} There are [4] new bugs found in [server] that would be nice to have fixed.
.    You can find the SpotBugs diff here: server/findbugs-new.html
.    {color:green}+1{color} There are no new bugs found in [docs].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 3216
.    {color:orange}Tests failed at first run:{color}
TestCoordActionsKillXCommand#testActionKillCommandActionNumbers
TestCoordActionsKillXCommand#testActionKillCommandDate
TestJMSAccessorService#testConnectionRetry
TestBlockingInputStream#testFastWritingBlockingInputStream
TestPriorityDelayQueue#testPeek
.    For the complete list of flaky tests, see TEST-SUMMARY-FULL files.
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 
{color:green}+1 MODERNIZER{color}

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

. https://ci-hadoop.apache.org/job/PreCommit-OOZIE-Build/53/



Hey [~zuston] 

Thanks fr your quick work. Please forgive me, I am overloaded at work thus no much free time I have. I'll take a deeper look as soon as possible.

Thanks for your understanding.

Denes

[~dionusos] Take it easy :). Thanks

Gentle ping [~dionusos] [~asalamon74]

Hey [~zuston] 

I downloaded the patch set from the Jira and checked. Unfortunately the test case seems stuck on my computer; I cannot run from console nor from IndelliJ Idea. :(

I also added some comments on the pull request.

Yep. [~dionusos], maybe you should remove the starting process of {{HCatalogServer}} in {{{}XHCatTestCase{}}}. In my mac, it also hang when no removing. Should be like as follows:
{code:java}
public abstract class XHCatTestCase extends XFsTestCase {

    private MiniHCatServer hcatServer;

    @Override
    protected void setUp() throws Exception {
        super.setUp();
//        super.setupHCatalogServer();
//        hcatServer = super.getHCatalogServer();
    }
{code}
Please check it. And to reproduce this bug, you could run this test case: [https://github.com/apache/oozie/pull/65]

 

Looking forward to your reply.

[~dionusos] Upload new patch. Please recheck it. Thanks

Gentle ping [~dionusos] :)

Gentle ping [~dionusos] 

{noformat}
16:10:35 Testing JIRA OOZIE-3646
16:10:35 
16:10:35 Cleaning local git workspace
16:10:35 
16:10:35 ----------------------------
16:10:35 
16:10:35 +1 PATCH_APPLIES
16:10:35 +1 CLEAN
16:10:35 -1 RAW_PATCH_ANALYSIS
16:10:35     +1 the patch does not introduce any @author tags
16:10:35     +1 the patch does not introduce any tabs
16:10:35     +1 the patch does not introduce any trailing spaces
16:10:35     +1 the patch does not introduce any star imports
16:10:35     -1 the patch contains 6 line(s) longer than 132 characters
16:10:35     +1 the patch adds/modifies 1 testcase(s)
16:10:35 +1 RAT
16:10:35     +1 the patch does not seem to introduce new RAT warnings
16:10:35 +1 JAVADOC
16:10:35     +1 Javadoc generation succeeded with the patch
16:10:35     +1 the patch does not seem to introduce new Javadoc warning(s)
16:10:35 +1 COMPILE
16:10:35     +1 HEAD compiles
16:10:35     +1 patch compiles
16:10:35     +1 the patch does not seem to introduce new javac warnings
16:10:35 -1 There are [6] new bugs found below threshold in total that must be fixed.
16:10:35     +1 There are no new bugs found in [client].
16:10:35     +1 There are no new bugs found in [webapp].
16:10:35     +1 There are no new bugs found in [fluent-job/fluent-job-api].
16:10:35     +1 There are no new bugs found in [server].
16:10:35     -1 There are [5] new bugs found below threshold in [core] that must be fixed.
16:10:35     You can find the SpotBugs diff here (look for the red and orange ones): core/findbugs-new.html
16:10:35     The most important SpotBugs errors are:
16:10:35     At BulkJPAExecutor.java:[line 206]: This use of javax/persistence/EntityManager.createQuery(Ljava/lang/String;)Ljavax/persistence/Query; can be vulnerable to SQL/JPQL injection
16:10:35     At BulkJPAExecutor.java:[line 176]: At BulkJPAExecutor.java:[line 175]
16:10:35     At BulkJPAExecutor.java:[line 205]: At BulkJPAExecutor.java:[line 199]
16:10:35     This use of javax/persistence/EntityManager.createQuery(Ljava/lang/String;)Ljavax/persistence/Query; can be vulnerable to SQL/JPQL injection: At BulkJPAExecutor.java:[line 206]
16:10:35     At BulkJPAExecutor.java:[line 111]: At BulkJPAExecutor.java:[line 127]
16:10:35     +1 There are no new bugs found in [sharelib/spark].
16:10:35     +1 There are no new bugs found in [sharelib/hive2].
16:10:35     +1 There are no new bugs found in [sharelib/distcp].
16:10:35     +1 There are no new bugs found in [sharelib/streaming].
16:10:35     +1 There are no new bugs found in [sharelib/hive].
16:10:35     +1 There are no new bugs found in [sharelib/git].
16:10:35     +1 There are no new bugs found in [sharelib/hcatalog].
16:10:35     +1 There are no new bugs found in [sharelib/pig].
16:10:35     -1 There are [1] new bugs found below threshold in [sharelib/oozie] that must be fixed.
16:10:35     You can find the SpotBugs diff here (look for the red and orange ones): sharelib/oozie/findbugs-new.html
16:10:35     The most important SpotBugs errors are:
16:10:35     At ShellMain.java:[line 93]: This usage of java/lang/ProcessBuilder.&lt;init&gt;(Ljava/util/List;)V can be vulnerable to Command Injection
16:10:35     At ShellMain.java:[line 91]: At ShellMain.java:[line 90]
16:10:35     At ShellMain.java:[line 92]
16:10:35     +1 There are no new bugs found in [sharelib/sqoop].
16:10:35     +1 There are no new bugs found in [tools].
16:10:35     +1 There are no new bugs found in [docs].
16:10:35     +1 There are no new bugs found in [examples].
16:10:35 +1 BACKWARDS_COMPATIBILITY
16:10:35     +1 the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
16:10:35     +1 the patch does not modify JPA files
16:10:35 +1 TESTS
16:10:35     Tests run: 3216
16:10:35     Tests failed at first run:
16:10:35 TestCoordActionInputCheckXCommand#testNone
16:10:35 TestBlockingInputStream#testFailure
16:10:35     For the complete list of flaky tests, see TEST-SUMMARY-FULL files.
16:10:35 +1 DISTRO
16:10:35     +1 distro tarball builds with the patch 
16:10:35 +1 MODERNIZER
16:10:35 
16:10:35 ----------------------------
16:10:35 -1 Overall result, please check the reported -1(s) {noformat}
Only {{-1 the patch contains 6 line(s) longer than 132 characters}} left from patch set 2. If those are fixed and uploaded as OOZIE-3646-003.patch I will commit your change, [~zuston] .

Fixed [~dionusos] .

Thanks for your review.

PreCommit-OOZIE-Build started



Testing JIRA OOZIE-3646

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any star imports
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} Javadoc generation succeeded with the patch
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1{color} There are [6] new bugs found below threshold in total that must be fixed.
.    {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
.    {color:green}+1{color} There are no new bugs found in [sharelib/git].
.    {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
.    {color:green}+1{color} There are no new bugs found in [sharelib/pig].
.    {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
.    {color:green}+1{color} There are no new bugs found in [sharelib/spark].
.    {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
.    {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
.    {color:green}+1{color} There are no new bugs found in [sharelib/hive].
.    {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
.    {color:green}+1{color} There are no new bugs found in [docs].
.    {color:green}+1{color} There are no new bugs found in [examples].
.    {color:green}+1{color} There are no new bugs found in [fluent-job/fluent-job-api].
.    {color:green}+1{color} There are no new bugs found in [webapp].
.    {color:green}+1{color} There are no new bugs found in [client].
.    {color:green}+1{color} There are no new bugs found in [tools].
.    {color:red}-1{color} There are [6] new bugs found below threshold in [core] that must be fixed, listing only the first [5] ones.
.    You can find the SpotBugs diff here (look for the red and orange ones): core/findbugs-new.html
.    The top [5] most important SpotBugs errors are:
.    At BulkJPAExecutor.java:[line 206]: This use of javax/persistence/EntityManager.createQuery(Ljava/lang/String;)Ljavax/persistence/Query; can be vulnerable to SQL/JPQL injection
.    At BulkJPAExecutor.java:[line 176]: At BulkJPAExecutor.java:[line 175]
.    At BulkJPAExecutor.java:[line 205]: At BulkJPAExecutor.java:[line 199]
.    This use of javax/persistence/EntityManager.createQuery(Ljava/lang/String;)Ljavax/persistence/Query; can be vulnerable to SQL/JPQL injection: At BulkJPAExecutor.java:[line 206]
.    At BulkJPAExecutor.java:[line 111]: At BulkJPAExecutor.java:[line 127]
.    {color:green}+1{color} There are no new bugs found in [server].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 3216
.    {color:orange}Tests failed at first run:{color}
TestPurgeXCommand#testPurgeableBundleUnpurgeableCoordinatorUnpurgebleWorkflowPurgeableSubWorkflow
.    For the complete list of flaky tests, see TEST-SUMMARY-FULL files.
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 
{color:green}+1 MODERNIZER{color}

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

. https://ci-hadoop.apache.org/job/PreCommit-OOZIE-Build/76/



Thank you for the fix [~zuston] . +1 from me.

[~asalamon74] may I ask you to please double check the code if you find anything. It looks good to me but this change has a bigger effect.

Thank you.

Great finding [~zuston] and thanks for the patch.

I checked the unit test locally. It was failing without the fix and it passes with the fix which is very good.

The code looks to me. The {{synchronized (SignalXCommand.class)}} looks a bit dangerous to me, but I have no better idea.

+1

Commit 1d3530cb26642d460dabd373dcb99c8cf29e54a3 in oozie's branch refs/heads/master from Denes Bodo
[ https://gitbox.apache.org/repos/asf?p=oozie.git;h=1d3530c ]

OOZIE-3646 Possible dead-lock in SignalXCommand (zuston via dionusos)


Thank you for your contribution [~zuston] . Your change is committed to master.

Thanks for your patient review. [~dionusos]  [~asalamon74] :)

