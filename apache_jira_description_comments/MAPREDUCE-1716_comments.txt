This is related to MAPREDUCE-1100 and solves one part of it.

mapreduce.task.userlog.limit.kb is not usable in the current format because of its limitations:
    * If this is used, showing the userlogs is not possible until tasks finish or fail. This is simply *not* acceptable.
    * The stdout/stderr files are controlled by using 'tail -c' on the stdout/stderr of the task-jvm. This tail command uses some of the *precious* memory allocated to the users, which is not accounted or controlled anywhere.
    * syslog files are written to by tasks but the files themselves can be arbitrarily written to by the jvm and its child processes without respecting any of these limits.

The task-logs truncation functionality through "tail -c" is *broken* since 0.19 itself when jvm-reuse feature went in via HADOOP-249. Instead of fixing "tail -c" which has the above said limitations, I propose we throw it away as part of this issue itself in favour of the truncation code being put in here.

Note that MAPREDUCE-1648 is a related JIRA trying to solve similar problems but tries to 'rewrite' the overall (loosely defined) logging framework for tasks using log4j and thus is still uncertain about certain points like performance, pipes etc. This issue on the other hand is an incremental improvement over what we already have.

Attaching the ydist patches for this issue. These were already uploaded on MAPREDUCE-1100 before this sub-task was created.

Attaching one more patch for ydist that (1) fixes truncation problem when binary data is written to the logs and (2) adds a header at the beginning of a truncated log file: "[ ... this log file was truncated because of excess length]\n"

Making a blocker since it's parent task is.

This test case has a bit of a race, since it assumes that the logs will be truncated immediately upon job completion.

This isn't the case, since the logs aren't added to the truncation manager until the JVM finished, which can be several seconds after the last task finishes (eg when sleepTimeBeforeSigKill is 5 seconds). So, I found that this test was flaky as is.

You can show this by adding a 10 second sleep before truncating the logs, for example.

This delta patch has the tests loop for 20 seconds while checking the logs for truncation. It only fails if the logs aren't truncated after 20 seconds.

Sounds like this went in as part of the 203 release. Can one of the 203 authors comment?

Any volunteers to fix this for 0.22?

Unblocking this. Target for 0.22.1

Konstantin - I'd strongly urge you to consider this for 0.22.0 itself. Without this patch clusters are very susceptible to tasks in which users have code to log excessively & cause lots of issues for DN/TT by eating up disk space on nodes.

Fixed. Sort of.

