update
***************
It seems that in spark 2.1 code, the sorting issue is resolved.
The sorter does consider inner sorting in the sorting key - but I think it will be faster to just insert the rows to a list in a hash map.
***************

When using partition by,  datawriter can sometimes mess up an ordered dataframe.

The problem originates in org.apache.spark.sql.execution.datasources.DynamicPartitionWriterContainer.
In the writeRows method when too many files are opened (configurable), it starts inserting rows to UnsafeKVExternalSorter, then it reads all the rows again from the sorter and writes them to the corresponding files.
The problem is that the sorter actually sorts the rows using the partition key, and that can sometimes mess up the original sort (or secondary sort if you will).

I think the best way to fix it is to stop using a sorter, and just put the rows in a map using key as partition key and value as an arraylist, and then just walk through all the keys and write it in the original order - this will probably be faster as there no need for ordering.

