I didn't manage to reproduce this one in CircleCI - [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1684/workflows/c07b84c2-071b-4974-9de8-f3baaf13b5eb.]

It seems flaky in Butler on 4.0, 4.1 and trunk. With that said I will test it tomorrow whether it wasn't flaky when it was introduced for 4.0 but covered by the recently fixed python dtest bug where tests were not marked failing even if there are errors in some nodes logs.

If that is the case, this wouldn't be a beta blocker as it won't be a regression. To be verified...Â 

I did some research here. It's been failing in a number of ways:
- Timeouts: they seem to align with jenkins problems
- sstables/sstable readers unsynch: This seems like legit bug present in [4.0 already|https://ci-cassandra.apache.org/job/Cassandra-4.0/400/testReport/junit/dtest-upgrade.upgrade_tests.drop_compact_storage_upgrade_test/TestDropCompactStorage/test_drop_compact_storage_mixed_cluster/]

Looking at the code for the 2nd case it seems readers and files are tracked through some sync'ed code, which would explain the above NPE if there was a bug. I haven't gotten to find it reading the code or managed to repro locally yet though.

Either way I also think like [~e.dimitrova] this is not a 4.1 blocker but a legit bug still imo.

We can see, looking in butler, how this fails in 4.0 both:
- With the [timeouts|https://ci-cassandra.apache.org/job/Cassandra-4.0/416/testReport/dtest-upgrade.upgrade_tests.drop_compact_storage_upgrade_test/TestDropCompactStorage/test_drop_compact_storage_mixed_cluster/], where the test has many sleeps hence it's flakiness
- With sstable and CF mistracking. This _may_ be a side effect of the above?

In any case I think we have enough proof this is not a 4.1 regression, hence amending the fixver. Please feel free to change it if you disagree.

bq. With the timeouts, where the test has many sleeps hence it's flakiness
bq. With sstable and CF mistracking. This may be a side effect of the above?

There are some best practices we've learned that this test isn't following in a few places, namely: waiting for schema agreement, and not waiting for the binary proto in once instance during upgrades.  I think these can explain the above behaviors, modulo environmental timeouts, and [I have a patch for this|https://github.com/driftx/cassandra-dtest/tree/CASSANDRA-17634].  [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1999/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/1999/pipeline]

In 4.1, there's another error:

bq. ERROR [NonPeriodicTasks:1] 2022-10-06 04:20:13,633 LogTransaction.java:398 - SSTableTidier ran with no existing data file for an sstable that was not new

Unfortunately, the [logs|https://nightlies.apache.org/cassandra/cassandra-4.1/Cassandra-4.1-dtest-upgrade/157/Cassandra-4.1-dtest-upgrade/label=cassandra-dtest,split=15/] are empty and this is the only run we have.  Apparently there is another cause for the empty logs after CASSANDRA-17901 :(


^  I am fine with the schema agreement waits. I am only slightly worried about the node starts where not waiting for others to notice or the binary protocol seems intentional. I am not sure why that would be. On the other hand I checked [other|https://github.com/apache/cassandra-dtest/blob/trunk/upgrade_tests/upgrade_through_versions_test.py#L532]  upgrade tests seem to indeed wait for it.

Overall I am +1 merging these changes and see where they get us.

bq. I am only slightly worried about the node starts where not waiting for others to notice or the binary protocol seems intentional.

I thought about this too and couldn't think of a good reason to not wait, and a similar fix solved CASSANDRA-17005.  I committed this patch, let's see what happens.

Should we move this one to committed and reopen if/when needed?

Works for me, though I think we'll be back.

From [https://ci-cassandra.apache.org/job/Cassandra-trunk/1452/testReport/dtest-upgrade.upgrade_tests.drop_compact_storage_upgrade_test/TestDropCompactStorage/test_drop_compact_storage_mixed_cluster/]
{code:java}
Regressiondtest-upgrade.upgrade_tests.drop_compact_storage_upgrade_test.TestDropCompactStorage.test_drop_compact_storage_mixed_cluster
          (from Cassandra dtests)
        Failing for the past 1 build
          (Since #1452 )
        Took 5 min 49 sec. Failed 3 times in the last 30 runs. Flakiness: 17%, Stability: 90%Error Messagefailed on teardown with "Unexpected error found in node logs (see stdout for full details). Errors: [[node3] "WARN  [MessagingService-Incoming-/127.0.0.2] 2023-02-09 17:55:28,848 IncomingTcpConnection.java:105 - UnknownColumnFamilyException reading from socket; closing\norg.apache.cassandra.db.UnknownColumnFamilyException: Couldn't find table for cfId 5bc52802-de25-35ed-aeab-188eecebb090. If a table was just created, this is likely due to the schema not being fully propagated.  Please wait for schema agreement on table creation.\n\tat org.apache.cassandra.config.CFMetaData$Serializer.deserialize(CFMetaData.java:1572)\n\tat org.apache.cassandra.db.ReadCommand$Serializer.deserialize(ReadCommand.java:668)\n\tat org.apache.cassandra.db.ReadCommand$Serializer.deserialize(ReadCommand.java:607)\n\tat org.apache.cassandra.io.ForwardingVersionedSerializer.deserialize(ForwardingVersionedSerializer.java:50)\n\tat org.apache.cassandra.net.MessageIn.read(MessageIn.java:98)\n\tat org.apache.cassandra.net.IncomingTcpConnection.receiveMessage(IncomingTcpConnection.java:216)\n\tat org.apache.cassandra.net.IncomingTcpConnection.receiveMessages(IncomingTcpConnection.java:193)\n\tat org.apache.cassandra.net.IncomingTcpConnection.run(IncomingTcpConnection.java:96)"]"StacktraceUnexpected error found in node logs (see stdout for full details). Errors: [[node3] "WARN  [MessagingService-Incoming-/127.0.0.2] 2023-02-09 17:55:28,848 IncomingTcpConnection.java:105 - UnknownColumnFamilyException reading from socket; closing\norg.apache.cassandra.db.UnknownColumnFamilyException: Couldn't find table for cfId 5bc52802-de25-35ed-aeab-188eecebb090. If a table was just created, this is likely due to the schema not being fully propagated.  Please wait for schema agreement on table creation.\n\tat org.apache.cassandra.config.CFMetaData$Serializer.deserialize(CFMetaData.java:1572)\n\tat org.apache.cassandra.db.ReadCommand$Serializer.deserialize(ReadCommand.java:668)\n\tat org.apache.cassandra.db.ReadCommand$Serializer.deserialize(ReadCommand.java:607)\n\tat org.apache.cassandra.io.ForwardingVersionedSerializer.deserialize(ForwardingVersionedSerializer.java:50)\n\tat org.apache.cassandra.net.MessageIn.read(MessageIn.java:98)\n\tat org.apache.cassandra.net.IncomingTcpConnection.receiveMessage(IncomingTcpConnection.java:216)\n\tat org.apache.cassandra.net.IncomingTcpConnection.receiveMessages(IncomingTcpConnection.java:193)\n\tat org.apache.cassandra.net.IncomingTcpConnection.run(IncomingTcpConnection.java:96)"] {code}

Unassigning since I'm currently out of ideas after adding the calls to wait for schema agreement.

