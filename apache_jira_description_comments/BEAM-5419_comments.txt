What is the plan for this JIRA? Are we targeting 2.8.0 with cut date 10/10?

Won't be fixed for 2.8.0.

Will this be fixed in 2.9.0?

With the release cut coming up tomorrow, likely not. I started looking into this but there were some difficulties with regard to the overall build system.

We should provide binaries for 1.6.x for the next release. I see that EMR now supports 1.6.1: [https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-flink.html] - Bigtop on the other hand is still at 1.4x: [https://github.com/apache/bigtop/blob/master/bigtop.bom#L309]

 

 

Mailing list thread: [https://lists.apache.org/thread.html/e44d07f4ed12eda9af38fb263a1f53e6e82e838cce1fbb82fe51c6df@%3Cdev.beam.apache.org%3E]

To repeat from there for watchers: You can build Beam yourself for Flink 1.6 by changing the version here: https://github.com/apache/beam/blob/v2.8.0/runners/flink/build.gradle#L49 

 

I did try changing the version from 1.5.5 to 1.6.0 (and 1.6.1) but the beam-runner-flink still fails.

[~gstamatakis] The last time I tried it was only a minor issues with classes being renamed. Maybe post the error message?

Thank you for the reply. I used 2.8.0,2.9.0 and the master branch. 
 Here are the ./gradlew build --stacktrace results after changing the 
 runners/flink/build.gradle flink version line to 1.6.0 (same for 1.6.1).

> Task :beam-runners-flink_2.11:compileJava FAILED

FAILURE: Build failed with an exception.
 * What went wrong:
 Execution failed for task ':beam-runners-flink_2.11:compileJava'.
 > Compilation failed with exit code 1; see the compiler error output for details.

 * Try:
 Run with --info or --debug option to get more log output. Run with --scan to get full insights.

 * Exception is:
 org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':beam-runners-flink_2.11:compileJava'.
 at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:110)
 at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:77)
 at org.gradle.api.internal.tasks.execution.OutputDirectoryCreatingTaskExecuter.execute(OutputDirectoryCreatingTaskExecuter.java:51)
 at org.gradle.api.internal.tasks.execution.SkipCachedTaskExecuter.execute(SkipCachedTaskExecuter.java:105)
 at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:59)
 at org.gradle.api.internal.tasks.execution.ResolveTaskOutputCachingStateExecuter.execute(ResolveTaskOutputCachingStateExecuter.java:54)
 at org.gradle.api.internal.tasks.execution.ResolveBuildCacheKeyExecuter.execute(ResolveBuildCacheKeyExecuter.java:79)
 at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:59)
 at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:101) at org.gradle.api.internal.tasks.execution.FinalizeInputFilePropertiesTaskExecuter.execute(FinalizeInputFilePropertiesTaskExecuter.java:44)
 at org.gradle.api.internal.tasks.execution.CleanupStaleOutputsExecuter.execute(CleanupStaleOutputsExecuter.java:91)
 at org.gradle.api.internal.tasks.execution.ResolveTaskArtifactStateTaskExecuter.execute(ResolveTaskArtifactStateTaskExecuter.java:62)
 at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:59)
 at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:54)
 at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43)
 at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:34)
 at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.run(EventFiringTaskExecuter.java:51)
 at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:300)
 at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:292)
 at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:174)
 at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:90)
 at org.gradle.internal.operations.DelegatingBuildOperationExecutor.run(DelegatingBuildOperationExecutor.java:31)
 at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter.execute(EventFiringTaskExecuter.java:46)
 at org.gradle.execution.taskgraph.LocalTaskInfoExecutor.execute(LocalTaskInfoExecutor.java:42)
 at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareWorkItemExecutor.execute(DefaultTaskExecutionGraph.java:277)
 at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareWorkItemExecutor.execute(DefaultTaskExecutionGraph.java:262)
 at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$ExecutorWorker$1.execute(DefaultTaskPlanExecutor.java:135)
 at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$ExecutorWorker$1.execute(DefaultTaskPlanExecutor.java:130)
 at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$ExecutorWorker.execute(DefaultTaskPlanExecutor.java:200)
 at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$ExecutorWorker.executeWithWork(DefaultTaskPlanExecutor.java:191)
 at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$ExecutorWorker.run(DefaultTaskPlanExecutor.java:130)
 at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
 at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)
 at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)
 Caused by: org.gradle.api.internal.tasks.compile.CompilationFailedException: Compilation failed with exit code 1; see the compiler error output for details.
 at net.ltgt.gradle.errorprone.ErrorProneCompiler.execute(ErrorProneCompiler.java:74)
 at net.ltgt.gradle.errorprone.ErrorProneCompiler.execute(ErrorProneCompiler.java:23)
 at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.delegateAndHandleErrors(NormalizingJavaCompiler.java:100)
 at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.execute(NormalizingJavaCompiler.java:52)
 at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.execute(NormalizingJavaCompiler.java:38)
 at org.gradle.api.internal.tasks.compile.CleaningJavaCompilerSupport.execute(CleaningJavaCompilerSupport.java:39)
 at org.gradle.api.internal.tasks.compile.incremental.IncrementalCompilerFactory$2.execute(IncrementalCompilerFactory.java:110) at org.gradle.api.internal.tasks.compile.incremental.IncrementalCompilerFactory$2.execute(IncrementalCompilerFactory.java:106) at org.gradle.api.internal.tasks.compile.incremental.IncrementalResultStoringCompiler.execute(IncrementalResultStoringCompiler.java:59)
 at org.gradle.api.internal.tasks.compile.incremental.IncrementalResultStoringCompiler.execute(IncrementalResultStoringCompiler.java:43)
 at org.gradle.api.tasks.compile.JavaCompile.performCompilation(JavaCompile.java:153)
 at org.gradle.api.tasks.compile.JavaCompile.compile(JavaCompile.java:121)
 at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:73)
 at org.gradle.api.internal.project.taskfactory.IncrementalTaskAction.doExecute(IncrementalTaskAction.java:50)
 at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:39)
 at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:26)
 at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$1.run(ExecuteActionsTaskExecuter.java:131)
 at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:300)
 at org.gradle.internal.operations.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:292)
 at org.gradle.internal.operations.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:174)
 at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:90)
 at org.gradle.internal.operations.DelegatingBuildOperationExecutor.run(DelegatingBuildOperationExecutor.java:31)
 at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:120)
 at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:99)
 ... 33 more

 * Get more help at [https://help.gradle.org|https://help.gradle.org/]

Deprecated Gradle features were used in this build, making it incompatible with Gradle 5.0.
 Use '--warning-mode all' to show the individual deprecation warnings.
 See [https://docs.gradle.org/4.10.2/userguide/command_line_interface.html#sec:command_line_warnings]

BUILD FAILED in 4m 7s
 139 actionable tasks: 72 executed, 67 up-to-date

 

*******

A different version also produced:


> Task :beam-runners-flink_2.11:compileJava FAILED
/mnt/c/Users/gstamatakis/IdeaProjects/beam/runners/flink/src/main/java/org/apache/beam/runners/flink/translation/wrappers/streaming/state/FlinkKeyGroupStateInternals.java:53: error: cannot find symbol
import org.apache.flink.streaming.api.operators.HeapInternalTimerService;
 ^
 symbol: class HeapInternalTimerService
 location: package org.apache.flink.streaming.api.operators
Note: Some input files use or override a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
1 error

 

 

 

[~gstamatakis] The above error is actually just a renamed class linked in a JavaDoc comment. It should compile fine if you remove the mentioned line (it is just a comment).

In the meantime Flink 1.7 was released last week. Is anyone working on different Flink runner builds?

Since this gets asked for more and more, I will prioritize this for 2.10.0. With Flink 1.7 out, we should provide at least builds for 1.7 and 1.6, and most likely also 1.5 because supporting it is about the same effort as supporting 1.6.

[~jeroens] Are you interested in 1.6 or 1.7?

[~mxm], that's great! I'm interested in 1.6.x and 1.7.x. Different projects, with different needs.

This would be of great interest to us too, we run on AWS EMR which the latest version includes flink 1.6.x, but we can't upgrade until BEAM supports this version.

AWS release train looks to be about once a month for EMR, so I'd imagine they'll roll out Flink 1.7 in the next few months as an option.

Right now tracking the releases/compatibility of BEAM + Flink + EMR is becoming quite an effort



Additionally AWS have recently released a new managed flink product [1] that's running 1.6.

I'd be eager to try running a job that's using the BEAM API (theoretically it should work?) but we need the flink runner to support 1.6 first. 



[1] https://aws.amazon.com/kinesis/data-analytics/ 

[~djharper] Thanks for the pointer to the AWS service. Indeed, it is plain Flink 1.6, so you would be able to run Beam on it as well.

The PR was merged for supporting multiple versions of the Flink Runner. So the next release will contain Flink 1.6 and Flink 1.7.

Quick question. I tried to build my project with mvn with the 1.6 jar and it fails with "Flink runner not found". 
Still runs ok with 1.5.5 though.

This just has been merged to master. Unfortunately, you will have to wait for the next release to be able to retrieve the artifacts via Maven.

I got the jars by building from source with gradle. I used the jars that were in the libs folder of 1.6. 

The error message implies that the jar has not been correctly added to the compile path. Or the jar does not contain the FlinkRunner classes, but I've just checked on my machine that it contains all the required classes.

This is my last question since I have already asked a lot of them.
Im trying to replace in pom.xml the already existing  beam-runners-flink_2.11  dependency  (which works up to 1.5.5) with the new one from the compiled sources beam-runners-flink-1.6-2.10.0-SNAPSHOT.jar. But its still undetected when Im running the pipeline (error: cant find FlinkRunner)

No worries about asking questions! Thanks for trying out the 1.6 build. If you just replace the dependency in the pom file, e.g. {{beam-runners-flink_2.11}} against {{beam-runners-flink-1.6}}, it will only work if you installed the 1.6 version in your local Maven repository.

Like so: {{mvn install:install-file -Dfile=<path-to-1.6-jar>}}

