Very nice write up Enis. Left a few comments. Thanks.

This looks awesome.  Thanks, Enis.  I also left some comments and questions in the GDoc.

I'm leaving comments in the doc too. Let me download as word doc when done and attach to the issue to snapshot the discussion there. 

I think this could be considered an important enough improvement, especially if a table property defaulting to off, to go into master (2.0) and a future branch-1 minor release. Let's have that discussion.

There are very good comments and discussions happening at the doc. Thanks everyone for chiming in. It seems that there is consensus to proceed with this approach. Things that needs the next level of details are, how to land it, how to keep BC, handling migration and gradually moving to using HLC and keeping "happened before" relationships.

I have been working on a prototype which can be the core patch in a subtask. That should give us some solid ground to see how we can do follow up work (region assignment, etc). 

Nice writeup.

What about replication? Are we trying to order events between clusters? I assume we won't: On the sink we just apply edits at the timestamps _at which they happened_, which may be in the past. So I think replication does not need special consideration.

What we could do is sending current PT,LT along with each replication RPC and thus keep the HLCs of the source and sink server in sync.

I've put up a patch which contains the core logic and client level APIs as well as the semantics for how we can introduce clocks per table for existing and new HBase tables. 

The javadoc for the timestamp class https://reviews.apache.org/r/36753/diff/1#2 contains most of the semantics.

Please check whether Timestamp / Clock APIs and new semantics makes sense. I am especially open to suggestions around how we can encapsulate this in the client API, how to make it compatible with existing tables and applications, and what does the migration might look like. 

bq. What about replication? Are we trying to order events between clusters? I assume we won't: On the sink we just apply edits at the timestamps at which they happened, which may be in the past. So I think replication does not need special consideration.
Sorry I missed this. For replication, the timestamps from cells should just update the Clock of the node. In that case, there is no special handling. Since we always carry the PT+LT components in the timestamps with cells, it is just a matter of doing a receive event per cell in writes from replication. 



I put a comment in the doc asking how time and sequenceid relate. If time were by region rather than by regionserver, HLC time could be the sequenceid as I see it.

Dave Latham followed up with a suggestion on how we might deal with clients that set the timestamp explicitly that may be more generally applicable.

Nice javadoc

"Timestamps from cells should always be interpreted by the table's Timestamp type so that timestamps given by HBase servers can be converted to wall clock."

This implies Cell is no longer standalone. It needs a context so its timestamp is interpreted appropriately.



bq. I put a comment in the doc asking how time and sequenceid relate. If time were by region rather than by regionserver, HLC time could be the sequenceid as I see it.
Agreed that it will be a nice way of simplification. We are a multi-value database with client settable timestamps and ordering is timestamp-first then seqId. If we want to merge these, it should not be client settable and replication cannot work the way it does today. Current proposal does not propose that we change the HBase semantics at that level. But it also does not prevent it in any way if we want to follow that approach. Once core HLC classes are there, it should be much easy to build. 

bq. This implies Cell is no longer standalone. It needs a context so its timestamp is interpreted appropriately.
True. You can still get the 64-bit timestamp from Cell without Timestamp class. Only if you want to interpret it as wall clock time, you need Timestamp class. 

Just to  note the importance of this effort.

Was chatting w/ the mighty [~jmspaggi]. He asked what happens if two writes at same exact coordinates agreeing in all but sequenceid. Well, they make it into the system but you are unable to read them out thereafter. The *ColumnTrackers drop edits with same timestamp though different sequenceid. Dataloss. Could plumb sequenceid all through the system as we've talked of doing, or just make it easier all around and go this route.

bq.Could plumb sequenceid all through the system as we've talked of doing, or just make it easier all around and go this route.
The tracker just drops the older sequence id. It doesn't drop both. So putting sequence id through everything would be a pretty big behavioral change as there's no other way to replace a cell at a timestamp.

bq. The tracker just drops the older sequence id. It doesn't drop both. 

I should have been more clear. These are two legit edits that just happen to arrive at the same time. Let them be Puts that we'd want to aggregate at read time for example.

bq. So putting sequence id through everything would be a pretty big behavioral change as there's no other way to replace a cell at a timestamp.

Delete and then Put at the explicit coordinate only now that sequenceid is respected, you can actually overwrite the delete.

[~enis] Any reason why Timestamp.java file is put in hbase-client module as opposed to hbase-common ? (Referring to the code in the review board link above)

[~enis] Referring to the Description on RB link. Why are Meta Tables not HLC ? What is the reason for it ?

bq. Referring to the Description on RB link. Why are Meta Tables not HLC ? What is the reason for it ?
I think it is a typo on my end. It should have read: 
 - Meta table is *now* HLC and all tables by default are HLC.

The patch contains this: 
{code}
    metaDescriptor.setTimestampType(Timestamp.HLC);
{code}

Thank you for the clarification.

[~enis] 
Referring to description in RB link - "TTL works with HLC timestamps and SYSTEM timestamps".

I feel TTL might not work well with HLC, as there could be a message with much greater PT than the current system time, say a second (but less than max delta we set), which can take the HLC physical time forward. If you read the time the HLC time before the message was received and after the message was received, the difference will be inflated by one second. 
Can you clarify this aspect ?


[~enis] 
Again, Referring to description in the RB link.
"Undo updates to meta with local clock"

My understanding of why timestamps were assigned by the local clock in the first place was to guard against the possible network reordering of delete region, add region which might lead to add region to meta getting eclipsed. 

In case my understanding is right, why are we undoing the local timestamps updates to meta table? and does HLC help in this in any way ?



I am not sure what is the concern. TTL is usually set in hours, or more likely days. Having a ~1 second fuzziness in TTL should not be a correctness concern. 

There were 2 issues before. 1 was the case you mentioned that, and the other is that a regionserver's local clock can be behind so that the update to meta is eclipsed by earlier puts with higher timestamp. With new master code, all operations to meta are strictly serialized by the master. The regionservers never update meta themselves. So delere-after-put should not be a problem if master guarantees that delete RPC is finished before the put RPC is sent. 

I feel it is better to use HLC time in places where we are interested(like puts, deletes etc), for places where difference in time is needed rather than the exact time., physical time can be used.
1. This saves us from some contention as HLC.getCurrentTime is synchronized(This could be significant because, I see that currentTime is being called everywhere in the code for setting names of files to finding difference in time etc)
2. Also clears any fuzziness in time difference(insignificant with TTL in hours)

[~enis] [~stack]
Is there a reason why we are introducing System Monotonic clock apart from HLC clock ?
Do we need it anywhere specifically ? Can we not use HLC in places where we might use System Monotonic ? I feel it might be better to have clock implementations that will be used. 


I think so. System monotonic clock will be fully compatible with the existing data, and we need the monotonicly non-decreasing semantics to be available. If existing data and applications use the timestamp explicitly (for example table already has TTL), etc, then we cannot change the table to be HLC. For those tables, we still want a monotonic clock for correctness. 

@enis knows better but I'd think SYSTEM clock is the one we'd drop. SYSTEM_MONOTONIC is superior to raw SYSTEM in that it doesn't go backward. We'd use this in 2.0 rather than plain SYSTEM.

Don't worry about #1 for now (I'm sorry -- the paranoia is my fault).

And on TTL, we just had a chat and it should be fine w/ HLC.

Thank you for your insights and suggestions.
I think it makes sense to drop System time as suggested.

We still need three algorithms implemented: 
(1) HLC 
(2) System time with monotonically non-decreasing 
(3) Leave the timestamps alone, I know what I am doing from client side (basically tephra / omid, etc). Mainly current implementation (if client supplied use it, otherwise use wall clock). 

I think I was using SYSTEM as a name for algorithm (3), but changed that to CUSTOM to be more descriptive. 

The document(Current Status of HLC - google doc) contains the current status of the project with some details of the decisions made in the process. It also contains the work that is yet to be done. 
Open to comments.

The patch - HBase-14070.master.001.patch contains the current unfinished changes for the
 HLC project. A document describing current state of the work and work yet to
 be done is attached in the HBASE-14070. It is present in the links section of this JIRA, it is named Current Status of HLC. 

h2. Work Done
Timestamp Enum Class with all the methods with the tests
Clock Class supporting three clock types with the tests
HLC clock updates during recovery and replication
Clock per Region Server notion
TTL and Time to Purge work well across all Clock Types
Most of the time related tests are parameterized to run against all the three clock types.
Test cases setting timestamps in Put were changed so that timestamp is not set with the help of manual environment edge
The tests were run with HLC as default clock type of the tables and most of the bugs have been removed. There is still some work to be done to get all the tests passed.

h2. Work Yet to done
Time range should be dealt with as per section 3.3
A check, for HLC and System Monotonic tables, disallowing clients to set the timestamps in the server side and not on the client side (Keep Client dumb)
Currently, still some test cases are flaky, some are failing. Need to clear them.
HLC clock should be updates for more events such open, close regions etc. as per various use cases. Deciding which events we should track is important.
Bulk Loads need to be thought upon. Mechanism to ensure that the bulk loaded files are having correct timestamp types. If we can have the highest timestamp of all the cells, we can update the local clock with it. This is something to think about.
Test cases written currently are very local, need to write some integration tests which tests the HLC clock properties w.r.t recovery, replication and more.

Currently some of the tests were rewritten using manual environment edge to get around the problem of not setting timestamps for HLC tables. A suggestion was made by Stack and Enis to not use environment edge in the clocks. Instead have a pluggable manual clock in place of Environment Edge.

this is so close to being done.  So many hbase issues can be resolved with this feature.  I would like to try and finish this but I don't want to step on anybody's toes since [~saitejar] is so far along with this patch :).  Are you planning on completing the last few open issues?

If there is nobody working on this, I would love to try and get this in to HBase 2.x because it could solve so many of our issues.  

[~churromorales] Man. Would be cool if we could get this in. Our [~ranuva] is busy finishing up at school. I'm sure he is interested but probably doesn't have time. Would a meeting on state help [~churromorales]? We could rope Sai in (and probably our HLC granddad, [~enis]).

Yep, this would be pretty good if we can get it in. Last time I've looked at it is some time ago. If you want to pick it up, go for it. 

I'm going to reassign this to [~churromorales] . Good luck Rahul! :-)

[~churromorales] Any luck here boss? Might have someone else interested in moving this forward.

[~stack] Sorry haven't had much time to work on this feature.  If anyone else is interested by all means they should take it.  Might have time in a month but that might be too late. 

Thanks for update [~churromorales] Will return here if have any new status sir.

[~churromorales] I assigned to [~amit.patel]; he is going to try and move this effort to the next stage.

FAILURE: Integrated in Jenkins build HBase-Trunk_matrix #3321 (See [https://builds.apache.org/job/HBase-Trunk_matrix/3321/])
HBASE-14070 - Core HLC (stack: rev 9fe94c11690891eed6470fdb0b9bfcfc9e95a888)
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreScanner.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Store.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCopyTable.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionSplitPolicy.java
* (add) hbase-common/src/main/java/org/apache/hadoop/hbase/Clock.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ModifyTableProcedure.java
* (edit) hbase-client/src/test/java/org/apache/hadoop/hbase/TestInterfaceAudienceAnnotations.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/AbstractTestWALReplay.java
* (add) hbase-common/src/test/java/org/apache/hadoop/hbase/TestClock.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/querymatcher/DropDeletesCompactionScanQueryMatcher.java
* (edit) hbase-common/src/main/java/org/apache/hadoop/hbase/SettableTimestamp.java
* (edit) hbase-client/src/main/java/org/apache/hadoop/hbase/HTableDescriptor.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat2.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/querymatcher/ScanQueryMatcher.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionReplayEvents.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestIncrementTimeRange.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestCoprocessorScanPolicy.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerServices.java
* (add) hbase-common/src/test/java/org/apache/hadoop/hbase/TestTimestampType.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/MockRegionServerServices.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompactingMemStore.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
* (add) hbase-common/src/main/java/org/apache/hadoop/hbase/TimestampType.java
* (edit) hbase-client/src/main/java/org/apache/hadoop/hbase/client/TableDescriptorBuilder.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestWALLockup.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultMemStore.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestTableName.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestCellACLWithMultipleVersions.java
* (add) hbase-server/src/test/java/org/apache/hadoop/hbase/TestClockWithCluster.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Region.java
* (add) hbase-common/src/main/java/org/apache/hadoop/hbase/ClockType.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/master/MockRegionServer.java
* (edit) hbase-client/src/main/java/org/apache/hadoop/hbase/client/TableDescriptor.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java
Revert "HBASE-14070 - Core HLC" Revert a push too-early (stack: rev c5abb6cabb312a424dc14aa77055339fe5cac5f7)
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerServices.java
* (edit) hbase-client/src/main/java/org/apache/hadoop/hbase/HTableDescriptor.java
* (delete) hbase-common/src/main/java/org/apache/hadoop/hbase/Clock.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ModifyTableProcedure.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
* (edit) hbase-common/src/main/java/org/apache/hadoop/hbase/SettableTimestamp.java
* (delete) hbase-common/src/test/java/org/apache/hadoop/hbase/TestTimestampType.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestWALLockup.java
* (delete) hbase-common/src/main/java/org/apache/hadoop/hbase/ClockType.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat2.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Region.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultMemStore.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/MockRegionServerServices.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompactingMemStore.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/AbstractTestWALReplay.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestIncrementTimeRange.java
* (delete) hbase-common/src/test/java/org/apache/hadoop/hbase/TestClock.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestCellACLWithMultipleVersions.java
* (edit) hbase-client/src/main/java/org/apache/hadoop/hbase/client/TableDescriptorBuilder.java
* (edit) hbase-client/src/test/java/org/apache/hadoop/hbase/TestInterfaceAudienceAnnotations.java
* (delete) hbase-server/src/test/java/org/apache/hadoop/hbase/TestClockWithCluster.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestCoprocessorScanPolicy.java
* (edit) hbase-client/src/main/java/org/apache/hadoop/hbase/client/TableDescriptor.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCopyTable.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestTableName.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/querymatcher/DropDeletesCompactionScanQueryMatcher.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/master/MockRegionServer.java
* (delete) hbase-common/src/main/java/org/apache/hadoop/hbase/TimestampType.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Store.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/querymatcher/ScanQueryMatcher.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionReplayEvents.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionSplitPolicy.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreScanner.java


[Plan for Hybrid Logical Clocks|http://apache-hbase.679495.n3.nabble.com/Plan-for-Hybrid-Logical-Clocks-td4088705.html] covers the plan of moving the current HLC work upstream and how additional functionality would be introduced.

FAILURE: Integrated in Jenkins build HBASE-14070.HLC #8 (See [https://builds.apache.org/job/HBASE-14070.HLC/8/])
HBASE-14070 - Core HLC (stack: rev 9fe94c11690891eed6470fdb0b9bfcfc9e95a888)
* (edit) hbase-client/src/main/java/org/apache/hadoop/hbase/HTableDescriptor.java
* (add) hbase-common/src/main/java/org/apache/hadoop/hbase/Clock.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
* (edit) hbase-client/src/test/java/org/apache/hadoop/hbase/TestInterfaceAudienceAnnotations.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerServices.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestWALLockup.java
* (add) hbase-server/src/test/java/org/apache/hadoop/hbase/TestClockWithCluster.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionSplitPolicy.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompactingMemStore.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestCoprocessorScanPolicy.java
* (add) hbase-common/src/main/java/org/apache/hadoop/hbase/TimestampType.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionReplayEvents.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/master/MockRegionServer.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/querymatcher/ScanQueryMatcher.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ModifyTableProcedure.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
* (edit) hbase-client/src/main/java/org/apache/hadoop/hbase/client/TableDescriptorBuilder.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestTableName.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/querymatcher/DropDeletesCompactionScanQueryMatcher.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreScanner.java
* (edit) hbase-common/src/main/java/org/apache/hadoop/hbase/SettableTimestamp.java
* (add) hbase-common/src/test/java/org/apache/hadoop/hbase/TestTimestampType.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultMemStore.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Store.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestCellACLWithMultipleVersions.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Region.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestIncrementTimeRange.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java
* (add) hbase-common/src/main/java/org/apache/hadoop/hbase/ClockType.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCopyTable.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat2.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/AbstractTestWALReplay.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/MockRegionServerServices.java
* (add) hbase-common/src/test/java/org/apache/hadoop/hbase/TestClock.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java
* (edit) hbase-client/src/main/java/org/apache/hadoop/hbase/client/TableDescriptor.java
Revert "HBASE-14070 - Core HLC" Revert a push too-early (stack: rev c5abb6cabb312a424dc14aa77055339fe5cac5f7)
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestCoprocessorScanPolicy.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/AbstractTestWALReplay.java
* (delete) hbase-common/src/test/java/org/apache/hadoop/hbase/TestClock.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreScanner.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerServices.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestCellACLWithMultipleVersions.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/querymatcher/DropDeletesCompactionScanQueryMatcher.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionSplitPolicy.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Store.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestIncrementTimeRange.java
* (edit) hbase-common/src/main/java/org/apache/hadoop/hbase/SettableTimestamp.java
* (delete) hbase-common/src/main/java/org/apache/hadoop/hbase/TimestampType.java
* (delete) hbase-common/src/test/java/org/apache/hadoop/hbase/TestTimestampType.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultMemStore.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestTableName.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Region.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompactingMemStore.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionReplayEvents.java
* (delete) hbase-common/src/main/java/org/apache/hadoop/hbase/ClockType.java
* (edit) hbase-client/src/main/java/org/apache/hadoop/hbase/HTableDescriptor.java
* (edit) hbase-client/src/main/java/org/apache/hadoop/hbase/client/TableDescriptor.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ModifyTableProcedure.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/MockRegionServerServices.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/querymatcher/ScanQueryMatcher.java
* (delete) hbase-server/src/test/java/org/apache/hadoop/hbase/TestClockWithCluster.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat2.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCopyTable.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java
* (edit) hbase-client/src/test/java/org/apache/hadoop/hbase/TestInterfaceAudienceAnnotations.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestWALLockup.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/master/MockRegionServer.java
* (edit) hbase-client/src/main/java/org/apache/hadoop/hbase/client/TableDescriptorBuilder.java
* (delete) hbase-common/src/main/java/org/apache/hadoop/hbase/Clock.java
HBASE-14070 - Core HLC (Sai Teja Ranuva) Rebased by Amit Patel (stack: rev f66976adae66aeb3bb81000e730f0c11d39afa48)
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestCellACLWithMultipleVersions.java
* (edit) hbase-client/src/main/java/org/apache/hadoop/hbase/HTableDescriptor.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/AbstractTestWALReplay.java
* (add) hbase-common/src/main/java/org/apache/hadoop/hbase/ClockType.java
* (edit) hbase-common/src/main/java/org/apache/hadoop/hbase/SettableTimestamp.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestTableName.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/querymatcher/DropDeletesCompactionScanQueryMatcher.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/master/MockRegionServer.java
* (edit) hbase-client/src/main/java/org/apache/hadoop/hbase/client/TableDescriptorBuilder.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionSplitPolicy.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java
* (add) hbase-common/src/main/java/org/apache/hadoop/hbase/Clock.java
* (add) hbase-common/src/main/java/org/apache/hadoop/hbase/TimestampType.java
* (add) hbase-server/src/test/java/org/apache/hadoop/hbase/TestClockWithCluster.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/MockRegionServerServices.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCopyTable.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestIncrementTimeRange.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultMemStore.java
* (add) hbase-common/src/test/java/org/apache/hadoop/hbase/TestClock.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreScanner.java
* (add) hbase-common/src/test/java/org/apache/hadoop/hbase/TestTimestampType.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerServices.java
* (edit) hbase-client/src/main/java/org/apache/hadoop/hbase/client/TableDescriptor.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ModifyTableProcedure.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestWALLockup.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestHFileOutputFormat2.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Region.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/querymatcher/ScanQueryMatcher.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionReplayEvents.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Store.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompactingMemStore.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestCoprocessorScanPolicy.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java


FAILURE: Integrated in Jenkins build HBASE-14070.HLC #56 (See [https://builds.apache.org/job/HBASE-14070.HLC/56/])
HBASE-14070 Undoing the use of master's timestamp for meta updates (Sai (appy: rev c90948c8e28224c303337db44944d303f853ad4d)
* (edit) hbase-client/src/main/java/org/apache/hadoop/hbase/MetaTableAccessor.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/RegionStateStore.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/TestMetaTableAccessor.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/util/HBaseFsckRepair.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestHBaseFsckReplicas.java


FAILURE: Integrated in Jenkins build HBASE-14070.HLC #69 (See [https://builds.apache.org/job/HBASE-14070.HLC/69/])
HBASE-14070 - Core HLC (Sai Teja Ranuva) Rebased by Amit Patel (appy: rev d53fbc74ba6e3b4489b82bb48ced6dfe470c8b10)
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerServices.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/querymatcher/NormalUserScanQueryMatcher.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/querymatcher/RawScanQueryMatcher.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/MockRegionServerServices.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestCopyTable.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/querymatcher/TestCompactionScanQueryMatcher.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Region.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultMemStore.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionReplayEvents.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestWALLockup.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ModifyTableProcedure.java
* (edit) hbase-client/src/main/java/org/apache/hadoop/hbase/HTableDescriptor.java
* (edit) hbase-client/src/main/java/org/apache/hadoop/hbase/client/TableDescriptor.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionSplitPolicy.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/master/MockRegionServer.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java
* (add) hbase-common/src/main/java/org/apache/hadoop/hbase/ClockType.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestTableName.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/querymatcher/MinorCompactionScanQueryMatcher.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/querymatcher/ScanQueryMatcher.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/querymatcher/DropDeletesCompactionScanQueryMatcher.java
* (add) hbase-common/src/main/java/org/apache/hadoop/hbase/TimestampType.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/AbstractTestWALReplay.java
* (add) hbase-common/src/test/java/org/apache/hadoop/hbase/TestClock.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/querymatcher/TestUserScanQueryMatcher.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/querymatcher/LegacyScanQueryMatcher.java
* (add) hbase-common/src/main/java/org/apache/hadoop/hbase/Clock.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreScanner.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java
* (add) hbase-server/src/test/java/org/apache/hadoop/hbase/TestClockWithCluster.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompactingMemStore.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/querymatcher/StripeCompactionScanQueryMatcher.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/querymatcher/MajorCompactionScanQueryMatcher.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Store.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestCellACLWithMultipleVersions.java
* (edit) hbase-common/src/main/java/org/apache/hadoop/hbase/SettableTimestamp.java
* (add) hbase-common/src/test/java/org/apache/hadoop/hbase/TestTimestampType.java
* (edit) hbase-client/src/main/java/org/apache/hadoop/hbase/client/TableDescriptorBuilder.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestCoprocessorScanPolicy.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestIncrementTimeRange.java
HBASE-14070 Undoing the use of master's timestamp for meta updates (Sai (appy: rev 7a42c38ef9b0c2cbcb82d516767b4f308551d712)
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/util/HBaseFsckRepair.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/TestMetaTableAccessor.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestHBaseFsckReplicas.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/RegionStateStore.java
* (edit) hbase-client/src/main/java/org/apache/hadoop/hbase/MetaTableAccessor.java


While reviewing one of the patches, a question popped in my mind:
We are passing master clock to RS in open/close region request and RS clock to master in the responses. And they both update their own time on receiving these request/response.
(x= don't care)
Say RS hlc time is (10,x) and master time is (20,x). Master sends request to RS which then updates its own time to (20,x).
While RS's physical java clock (which is backing up physical component of hlc clock) will still take 10 sec to catch up, we'll keep incrementing logical component. That means, in worst case, our logical clock window should be big enough to support all the events that can happen in max skew time.
The problem is, that doesn't seem to be the case. Our logical window is 1M events (20bits) and max skew time is 30 sec, that results in 33k  max write qps, which is quite low. We can easily see 150k update qps per beefy server with 1k values.

Even 22 bits won't be enough. We'll need minimum of 23 bits and 20 sec max skew time to support ~420k max events per second in worst case clock skew.

PT = physical time, LT = logical time, ST = system time
----
Note that in current implementation, master and RSs are updating their own clocks on receiving any region close/open request/response.
Also, on receiving a clock ahead of its own, they update their own clock to its PT+LT, and keep increasing LT till their own ST catches that PT.
----
Problem 1: cascading logical time increment
When more RS are involved say - 3 RS and 1 master.  Let's say max skew is 30 sec.
HLC Clocks (physical time, logical time):  X = don't care
RS1: (50, 100k)
Master: (40, X)
RS2: (30, X)
RS3: (20, X) 
[RS3's ST behind RS1's by 30 sec.]

RS1 replies to master, sends it's clock (50,X).
Master's clock (50, X).  It'll be another 10 sec before it's own physical clock reaches 50, so HLC's PT will remain 50 for next 10 sec.
Master --> RS2
RS2's clock = (50, X).
RS2 keeps incrementing LT on writes (since it's own PT is behind) for few seconds before it replies back to master with (50, X+ few 100k).
Master's clock = (50, X+ few 100k) [Since master's physical clock hasn't caught up yet, note that it was 10 seconds behind, PT remains 50.].
Master --> RS3
RS3's clock (50, X+few 100k) 
But RS3's ST is behind RS1's ST by 30 sec, which means it'll keep incrementing LT for next 30 sec (unless it gets a newer clock from master).
But the problem is, RS3 has much smaller LT window than actual 1M!!
---
Problem 2:
Single bad RS clock crashing the cluster:
If a single RS's clock is bad and a bit faster, it'll catch time and keep pulling master's PT with it. If 'real time' is say 20, max skew time is 10, and bad RS is at time 29.9, it'll pull master to 29.9 (via next response), and then any RS less than 19.9, i.e. just  0.1 sec away from real time will die due to higher than max skew.
This can bring whole clusters down!
---
Problem 3: Time jumps (not a bug, but more of a nuisance)
Say a RS is behind master by 20 sec. On each communication from master, RS will update its own PT to master's PT, and it'll remain that till RS's ST catches up. If there are frequent communication from master, ST might never catch up and RS's PT will actually look like discrete time jumps rather than continuous time.
For eg. If master communicated with RS at times 30, 40, 50 (RSs corresponding times are 10, 20, 30), than all events on RS between time [10, 50] will be timestamped with either 30, 40 or 50.
---




I think a simple solution here is, keep track of skew in clock. And instead of keeping track of physical time, always compute it by ST + skew.
On update(), recalculate {{skew}} and validate if it's greater than max_skew.
On toTimestamp(), calculate PT = ST+skew.
The biggest advantage is, PT will keep moving forward. It'll fix most problems mentioned earlier which arise because PT gets stuck.
I'll make a patch to show what i mean.

Here's the jira which has the patch: https://issues.apache.org/jira/browse/HBASE-18432

Having to manage catch-up is 'known issue' that has had some consideration. If skew too large or we are unable to catch-up given allotted logical time per ms, let the RS just fail (in first implementation).

On Problem 1: this will just become a case of a server being off by 30 seconds which currently results in a RS shutdown.
On Problem 2: yeah, should add in protection. We can do this in-the-small in the time-engine unit tests?
On Problem 3: is not a problem?

 

An additional issue to consider is what timestamp(s) to send over RPC for syncing the clock(s) during events like region open/close. Since each region server contains instances of each clock (system, system monotonic, hybrid logical), it may be necessary/beneficial to send timestamps for each timestamp type (physical and hybrid timestamp) and in turn update both corresponding clocks upon receiving the timestamps. Otherwise we could send one timestamp type and update one clock type if the clock type of meta and the target region are the same, but send/update both if there was a mismatch in clock type.

FAILURE: Integrated in Jenkins build HBASE-14070.HLC #159 (See [https://builds.apache.org/job/HBASE-14070.HLC/159/])
HBASE-14070 Fix TestTimestampType#testPhysicalIsLikelyOfType and (appy: rev 0f52f68de18083ff436596ded1654f4710bb0343)
* (edit) hbase-common/src/test/java/org/apache/hadoop/hbase/TestTimestampType.java
* (edit) hbase-common/src/main/java/org/apache/hadoop/hbase/TimestampType.java


Sending both clocks seems easiest. Are they expensive to read and update?

Just as a status update, I'll be finishing my internship so I will be much less active in the future (I still hope to maintain some degree of involvement with the work). I am extremely grateful for the help and mentorship that I have received from the community. At the moment there are still a few outstanding issues that should be addressed before merging the work into master:
* Performance of HLC (Clock#now, Clock#update are expensive, not as big of an issue if HLC is only used for meta but certainly is for user tables)
* Huge number of tests timing out in in the pre-commit/[public branch|https://builds.apache.org/job/HBASE-14070.HLC/] builds (but haven't been able to replicate the test time-out and they pass just fine if ran locally)

In terms of enabling HLC on user tables, remaining issues would include:
* Some tests that are still explicitly setting the timestamp and need to be converted to instead manipulate the current time via mocking the clocks
* Bulk load does not update the HLC

Some additional brainstorming/discussions includes:
* [Deprecate setting of timestamp in client for HLC|https://issues.apache.org/jira/browse/HBASE-18642]
* [Add 'Transaction ID' to Result for HLC|https://issues.apache.org/jira/browse/HBASE-18643]

Needed to resolve and reopen to kick status back to open

