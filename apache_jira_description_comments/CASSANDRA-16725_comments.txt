PR https://github.com/apache/cassandra/pull/1051/files

Did you consider providing this functionality over a virtual table? While it may make sense to provide this via nodetool to be consistent with getfullquerylog I was wondering if we should not start moving away from JMX and towards virtual tables to provide new admin functionality.

Yes but I would really love to have this one in if you do not mind :)

Hey [~stefan.miklosovic], I just moved your patch to patch available as otherwise people won't see it and pick up for review. 

Also, based on our conversation in Slack I assigned version 4.1 to it. 

I understand that also you solved with [~paulo] the topic on why not virtual tables at this point. 

I rebased the branch and pushed Jenkins CI run:

[patch |https://github.com/ekaterinadimitrova2/cassandra/commits/CASSANDRA-16725-review] | [CI |https://jenkins-cm4.apache.org/job/Cassandra-devbranch/916/]

[~stefan.miklosovic] there are a few failures you might want to check before we move on. Thanks

Some comments made in the PR… 

Thanks [~mck] I will reflect your suggestions in the PR soon.

Hey, [~stefan.miklosovic], please, let me know when you are done with the changes and I will do a pass as I see this is back to work in progress based on [~mck]'s suggestions which I just looked at and support too. Thanks

[~e.dimitrova] build still runs as I write this: https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/956/

branch is same, just forcepushed more stuff, feel free to take a more deeper look, thanks

something went royaly wrong with the build, checking that ... 

I managed to fix it, this is the build [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/970/]

branch / PR is same

[https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/981/]

PR / branch is same

changes included:

1) composite data rewritten, they are no on "options" as discussed in PR, the whole class is simplified because of that a lot

2) added virtual table for audit log options

3) added AuditLogManagerMBean

4) Added more options into nodetool's enableauditlog (to be on par with fullquerylog)

I am not sure if I can move remaining "enable" methods from StorageService to new AuditLogManager. I know there is some policy about backward compatible interfaces and we should at most mark some methods as deprecated if new are introduced however here we are adding completely new MBean and I am not sure what to do in that case.

Together with [~paulo] we came to the conclusion that it would be better to leave vtable to a separate ticket. It would be maybe more desirable to come with a bunch of other vtables too in order to not have them scattered across the repository. So I would prefer to not merge that vtable for now.

thanks [~e.dimitrova] for the review, I reflected that already, same PR / branch. The build is here

[https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/983/#showFailuresLink]

 

I think that the only thing remaining is to ask what to do with jmx methods as mentioned in my other comment otherwise if you do not have any objections I think we might just ship it as it is.

Thank you [~stefan.miklosovic] for making the changes. As I mentioned on the PR, these were initial small comments, I want to think about a few things a bit more and I will get back to you, probably tomorrow or Monday. Thanks again for all the work!

Hi [~e.dimitrova], I believe I reflected all review comments. Would you please find some time to close this one and formally +1 it please?

Thanks for fruitful discussions and addressing review comments as per what we agreed together.
I just left a few super nits, mostly for typos, and we need to deprecate _enableAuditLog_ also in _StorageServiceMBean_.
Unfortunately, I noticed that _DatabaseDescriptorRefTest_ is failing. I suspect it will be a test issue only but it is 10pm already so I can take a look tomorrow morning with fresh eyes if needed. Not doing well enough now for debugging.
Further to that, I think we miss only final rebase and full CI run + the votes of the other two reviewers. We are getting there. Thank you for your hard work! :-) 

https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1020/

In the meantime I also pushed to loop the below three test classes to ensure no weird flakies in the future. I don't expect anything but we already saw during the flaky tests cleaning there were so many unexpected small things so I figured it out it is good to loop new tests now when we have the multiplexer. Also, the unit tests can be run with LOWRES in the free tier.

|| AuditLogOptionsTest | [j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1064/workflows/0d2ff0c9-f7f9-4674-adfe-f8553f91d1c9/jobs/6263] | [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1064/workflows/76d55640-36da-406c-b6d4-0bd33b88866b/jobs/6259/steps] | [j8/j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1064/workflows/0d2ff0c9-f7f9-4674-adfe-f8553f91d1c9/jobs/6280] |
|| AuditLogFilterTest | [j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1062/workflows/35905ee6-44fb-4594-bd9c-db254cee39a6/jobs/6249] | [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1062/workflows/7e833893-fe79-4f45-9196-21117be90ca6/jobs/6252] | [j8/j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1062/workflows/35905ee6-44fb-4594-bd9c-db254cee39a6/jobs/6281] |
|| GetAuditLogTest | [j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1066/workflows/042c1297-6872-4b68-8a34-da738876305e/jobs/6277] | [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1066/workflows/b89e5784-7ed9-40ea-925c-bbbb028eaaf2/jobs/6273] | [j8/j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1066/workflows/b89e5784-7ed9-40ea-925c-bbbb028eaaf2/jobs/6273] |

_DatabaseDescriptorRefTest_ is still failing for me locally but I don't see it failing in Jenkins or CircleCI. [~stefan.miklosovic], can you check it also on your end, please?

I think that has something to do with IDEA and how tests are being executed there. It is failing for me locally too (and it always was, regardless of what we have done here)

I checked that test and it seems it counts the numbers of threads somehow differently based on what environment one runs that test in, I can not otherwise explain that test method not failing via Ant but it fails in IDEA, for example. I would leave this issue as is for now. It happens on other branches too, not just on this one.

I just tested that it fails for me locally on 3.11,  4.0, trunk. While it is definitely not caused by this patch, I am pretty sure it was not failing last summer as I remember I was looking into changes there back then. So it seems now we have classic flaky test... I will open a separate ticket 

fwiw, DatabaseDescriptorRefTest passes for me with or without this patch applied.

Classic flaky test :) 

The implementation and CI run look good to me. There is only one thing I miss in the puzzle - why do we need [this|https://github.com/apache/cassandra/pull/1051/files#diff-9bf2c26bc294ef9085e16bf287490223665eaa2eb8ec24bcf5bd8653c713644bR5797] unused _enableAuditLog_ method? Should it be deprecated? I am a bit confused. I think you might want to add a comment about that and also put those 4 _enableAuditLog_ methods in the same order in StorageService and StorageServiceMbean. Thank you.

 

Thank Ekaterina, we addressed your issue in the PR, in a nutshell, that method is there for people able to enable audit logging without nodetool nor the necessity to call that programatically.
[~mck] do you want to take a look too? I am still confused how many "+1" I actually need.

I think there is this "policy" that if one is a committer, all it takes is another committer to review, 2 are necessary if the original author is not a committer.

I understand that the bigger the change is, more probable it is to have it reviewed by 2 (and more) people, I just do not want to chase people down unnecesarilly if it might be committed regardless, for the sake of saving their time.

bq. I think there is this "policy" that if one is a committer, all it takes is another committer to review, 2 are necessary if the original author is not a committer.

If reviewers have become involved, always try to keep them included and take some patience for them to wrap up with a formal +1 on the ticket. This is important to create a warm and inclusive culture here. Ideally reviewers should remove themselves from the list if they see that they won't be returning to provide such a +1.

I am listening and following the conversations, and I promise you won't wait long for me once all remaining questions have been ironed out. The more +1s you get the better!

Thanks [~mck], I think they _are_ ironed out as of now after the very last round from Ekaterina so you might indeed take a look too now.

{quote}If reviewers have become involved, always try to keep them included and take some patience for them to wrap up with a formal +1 on the ticket. This is important to create a warm and inclusive culture here. Ideally reviewers should remove themselves from the list if they see that they won't be returning to provide such a +1.
{quote}
+1.  I think of the rule for two committers +1 as a minimum requirement for a commit to happen. BUT if there are more people who were trying to help with a review, it is a respect to their time and effort to wait for them to either finish it or signal that they are fine the patch to be committed without their final vote. Also, it doesn't matter whether it is contributor, committer or PMC. Every review matters. How I see reviews is they are the belief of a person that a work Is meaningful and he/she supports It through dedicating time and efforts into helping to shape it/provide feedback. 
{quote}I think they _are_ ironed out as of now after the very last round from Ekaterina so you might indeed take a look too now.
{quote}
+1 to the patch, just please add a comment (or maybe even better, java doc) on commit about that method to make it easier to find and understand its goal by whoever needs it/looks at it. Thank you for all your work!

 

+1

Thanks Mick.

Ekaterina - I fully agree. On the other hand, I think we are all grown adults here and I would not be personally "shocked" or "offended" (not saying anybody is, just saying) if a commit happens without my explicit approval if it is just waived off by other competent people. I completely get that the review of others matter, I reiterate that I understand that, but waiting for that to happen is in a lot of cases just a formality if a versatile and experienced developer like you already says it is good to go ... In other words I just want to avoid bureacracy and saving time for people in general (even though I am not sure where I am rushing it awyway but that is my problem to work on).

I ll merge tomorrow. Thanks everybody.

My only point was that I am with Mick on this - "_Ideally reviewers should remove themselves from the list if they see that they won't be returning to provide such a +1_"

I have one question for you, are you going to add the person as a reviewer?  To me both "yes" and "no" doesn't feel good.
 # in case of a "yes" - someone is merit without doing the job maybe or a critical bug appears and people think that this person approved the buggy code... (unfortunately, sometimes things happen, distributed systems are complex)
 # in case of a "no" - the person put some time and efforts and maybe they were even doing  still something in the background but you didn't know and you just skipped them. It's not about being adult in this case I think.

Also, please, consider that many of the engineers in the community come with different background and are experts in different areas of the codebase so it is possible to get the best of all worlds if you hear more people. :) As a wise man once said ([~mck] :)) - "The beauty of OSS is in the teamwork"

One more time, thank you for all the great work! I think this work will be really appreciated by our users. 

