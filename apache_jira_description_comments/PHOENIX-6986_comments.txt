We could call it _phoenix.query.global.server.merge.enable_ with a default value of "true".

kabhishek4 opened a new pull request, #1640:
URL: https://github.com/apache/phoenix/pull/1640

   …ed indexes
   
   Introduces config parameter to enable or disable server merges of uncovered hinted indexes.
   




stoty commented on code in PR #1640:
URL: https://github.com/apache/phoenix/pull/1640#discussion_r1263487600


##########
phoenix-core/src/main/java/org/apache/phoenix/optimize/QueryOptimizer.java:
##########
@@ -336,10 +336,15 @@ private QueryPlan addPlan(PhoenixStatement statement, SelectStatement select, PT
         Map<TableRef, QueryPlan> dataPlans = Collections.singletonMap(indexTableRef, dataPlan);
         PTable indexTable = indexTableRef.getTable();
         PIndexState indexState = indexTable.getIndexState();
+        boolean isServerMergeFoeUncoveredIndexEnabled = statement.getConnection().

Review Comment:
   typo



##########
phoenix-core/src/main/java/org/apache/phoenix/optimize/QueryOptimizer.java:
##########
@@ -336,10 +336,15 @@ private QueryPlan addPlan(PhoenixStatement statement, SelectStatement select, PT
         Map<TableRef, QueryPlan> dataPlans = Collections.singletonMap(indexTableRef, dataPlan);
         PTable indexTable = indexTableRef.getTable();
         PIndexState indexState = indexTable.getIndexState();
+        boolean isServerMergeFoeUncoveredIndexEnabled = statement.getConnection().

Review Comment:
   Also, CQSI is already available in the "services" object variable, no need to go back to statement.





kabhishek4 commented on code in PR #1640:
URL: https://github.com/apache/phoenix/pull/1640#discussion_r1266248639


##########
phoenix-core/src/main/java/org/apache/phoenix/optimize/QueryOptimizer.java:
##########
@@ -336,10 +336,15 @@ private QueryPlan addPlan(PhoenixStatement statement, SelectStatement select, PT
         Map<TableRef, QueryPlan> dataPlans = Collections.singletonMap(indexTableRef, dataPlan);
         PTable indexTable = indexTableRef.getTable();
         PIndexState indexState = indexTable.getIndexState();
+        boolean isServerMergeFoeUncoveredIndexEnabled = statement.getConnection().

Review Comment:
   Corrected the typo. 
   
   I am reading the value of parameter from statement because my test is failing. 
   I see that value of parameter is true in QueryOptimizer.addPlan,
   
   this.services.getProps().getBoolean(
   QueryServices.SERVER_MERGE_FOR_UNCOVERED_INDEX,
   QueryServicesOptions.DEFAULT_SERVER_MERGE_FOR_UNCOVERED_INDEX);
   
   despite setting it to
   
   props.setProperty(QueryServices.SERVER_MERGE_FOR_UNCOVERED_INDEX,
       Boolean.toString(false));
   
   in the test. This is because there is nothing in the overriden values map.
   
   I verified another property USE_REVERSE_SCAN_ATTRIB and it shows the same behaviour. 
   I could see appropriate value only when read from the ‘statement’ object.
   
   
   Failed Checks analysis:
   The checkstyle errors are not due to my code.
   I ran ParallelPhoenixConnectionFailureTest.testExecuteQueryChainFailure locally and it passed. 
   It’s a flaky test.
   



##########
phoenix-core/src/main/java/org/apache/phoenix/optimize/QueryOptimizer.java:
##########
@@ -336,10 +336,15 @@ private QueryPlan addPlan(PhoenixStatement statement, SelectStatement select, PT
         Map<TableRef, QueryPlan> dataPlans = Collections.singletonMap(indexTableRef, dataPlan);
         PTable indexTable = indexTableRef.getTable();
         PIndexState indexState = indexTable.getIndexState();
+        boolean isServerMergeFoeUncoveredIndexEnabled = statement.getConnection().

Review Comment:
   Corrected the typo. 
   
   I am reading the value of parameter from statement because my test is failing. 
   I see that value of parameter is true in QueryOptimizer.addPlan,
   
   this.services.getProps().getBoolean(
   QueryServices.SERVER_MERGE_FOR_UNCOVERED_INDEX,
   QueryServicesOptions.DEFAULT_SERVER_MERGE_FOR_UNCOVERED_INDEX);
   
   despite setting it to
   
   props.setProperty(QueryServices.SERVER_MERGE_FOR_UNCOVERED_INDEX,
       Boolean.toString(false));
   
   in the test. This is because there is nothing in the overriden values map.
   
   I verified another property USE_REVERSE_SCAN_ATTRIB and it shows the same behaviour. 
   I could see appropriate value only when read from the ‘statement’ object.
   
   
   Failed Checks analysis:
   The checkstyle errors are not due to my code.
   I ran ParallelPhoenixConnectionFailureTest.testExecuteQueryChainFailure locally and it passed. 
   It’s a flaky test.
   





stoty commented on PR #1640:
URL: https://github.com/apache/phoenix/pull/1640#issuecomment-1641517851

   Hmm.
   I think that this may be a limitation of the "unit" test infrastructure.
   It would be interesting to see if the using the existing services object in the code works in a unit test, or on a real / sandbox cluster.




Committed to master and 5.1

Thanks for the patch [~kabhishek4] .

stoty closed pull request #1640: PHOENIX-6986 Add property to disable server merges for hinted uncover…
URL: https://github.com/apache/phoenix/pull/1640




