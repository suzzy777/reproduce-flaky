Attaching a patch with tez.session.am.dag.submit.timeout.secs as 5 sec.
[~hitesh] [~harishjp] Please help in reviewing.

{color:green}+1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12829546/TEZ-3432.1.patch
  against master revision 9cf25d1.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/1978//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/1978//console

This message is automatically generated.

Comments: 
   - bunch of copy paste errors related to TestMRRJobs need to be fixed. Also, any reason on why we need a new test file launching a new minicluster instead of adding to one of the existing test files? 
   - reference to MRAppJar - what is this for?
   - the test verifies that the session shut down but it does not really check that the session shuts down due to the timeout. Please take a look at TEZ-3405 and maybe consider pulling out the tests and functionality changes from that patch if required to actually verify the functionality. 
   - the test is timing dependent - was this run 50-100 times in a row to verify that it is not flaky? 
   - why does "conf.setInt(TezConfiguration.TEZ_SESSION_AM_DAG_SUBMIT_TIMEOUT_SECS, 5);" need to be setup at the cluster config level and not at the session level? 

Cancelling patch to address the comments.

Attaching a fresh patch with the comments addressed. 

bq. the test is timing dependent - was this run 50-100 times in a row to verify that it is not flaky?
Have added tests for the same, as it was taking too long the iterations have been limited to 10.

[~hitesh] [~harishjp] Please help in review.

{color:green}+1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12830745/TEZ-3432.2.patch
  against master revision 5c2f893.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/1991//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/1991//console

This message is automatically generated.

Hi Sreenath,

Test mostly looks fine, please consider the following:

* The timeout of 250000 is too much, I guess thats because you are iterating 10 times. We should not be doing this, just asserting once should be enough.
* The getDiagnostics method needs to fixed, it assumes that the top diagnostic is the required one and that it will always have values which are long, this can make it flaky if someone adds another diagnostic before this. How about sending a prefix or substring in getDiagnostic which can be used to filter diagnostic and only parse those, it would be nice if we can just use Map<String, String> so that it will be generic and we can do the parsing later.



bq. I guess thats because you are iterating 10 times

To clarify, my point was to run mvn test -Dtestcase 50-100 times to ensure that the test is not flaky but not to have the unit test do multiple iterations. 

Thanks [~harishjp], attaching a fresh patch with the changes.
Thanks [~hitesh], I tried running the test command in a loop, and things looks good.

{color:green}+1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12831146/TEZ-3432.3.patch
  against master revision 5c2f893.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/2003//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/2003//console

This message is automatically generated.

Comments: 

 - s/waitForAppTimeout/waitForAppCompletion/ -

  - "Assert.assertEquals("Session timed out", diagnostics.get("Session timed out"));"  - this is better off done by via assertTrue(string.contains())
  - "Assert.assertTrue(amShutdownTime - lastDAGCompletionTime < 5500); //Testing with 10% buffer" - was this tried on a VM for example? The 0.5 seconds buffer seems potentially flaky. 

  - "public HashMap<String, String> getDiagnostics(YarnClient yarnClient, ApplicationId appId) throws Exception {" 
     - should return a map and not a hashmap
     - should take in just diagnostics string as input arg
     - should not need throws Exception after args are changed
     - as part of invoking the function, there should be checks to ensure that diagnostics is not null and not empty.

  - Seems like the parsing code might throw an error when it hits something like ", foo=," ? 


  


Thanks [~hitesh]
Attaching a fresh patch with the comments addressed.

bq. was this tried on a VM
It was run on an open-stack machine. Have bumped the buffer to 20%, is that good enough?

bq. there should be checks to ensure that diagnostics is not null and not empty.
In the current patch, isn't Assert.assertTrue(diagnostics.contains("Session timed out")); enough for the same.

As getDiagnosticParams accepts a string now, its implementation have become more generic. So should we put it in some shared class for helper functions.

{color:green}+1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12831949/TEZ-3432.4.patch
  against master revision 149db1b.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/2019//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/2019//console

This message is automatically generated.

Minor comments: 
  -  "Assert.assertTrue(amShutdownTime - lastDAGCompletionTime < 6000); //Testing with 20% buffer"  - the assert stmt should be a string message arg which would the print the values of amShutdownTime and lastDAGCompletionTime to help in debugging if there is a failure

[~hitesh]
Attaching a fresh patch with the comment addressed.
I'v also added another another assertion to check that the Shutdown happens only after 5sec.

{color:green}+1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12832667/TEZ-3432.5.patch
  against master revision ead4c0a.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/2029//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/2029//console

This message is automatically generated.

Looks good. +1. 

Minor comment on: 

{code}
      Assert.assertTrue("AM didn't timeout in the expected time!" +
1051	              " AM Shutdown Time:" + dateFormatter.format(amShutdownTime) +
1052	              " Last DAG Completion Time:" + dateFormatter.format(lastDAGCompletionTime),
1053	          (amShutdownTime - lastDAGCompletionTime) < 6000); //Testing with 20% buffer
{code}

This might be something to keep an eye in the future to ensure that it is not flaky on low-cpu VMs. 

Cancelling patch as this will now conflict with changes from TEZ-3405. 

[~Sreenath] Any luck in creating a new patch? 

Attaching a new patch against the latest master code.
Also I have bumped the buffer to 40%, hope that would help.


Have you looked at TestTezJobs::testSessionTimeout() in the master branch and looked to augment it instead? 

Comments to be addressed. 

