cc [~zeroshade]

[~kszucs] That looks like the Go consumer is receiving that error from the Java producer. I'll take a look, but can someone also look into the Java producer while I do?

I was trying to add this minor logging improvement to at least understand what is the descriptor used: https://github.com/apache/arrow/pull/13053

[~kszucs] I'm currently unable to reproduce this locally by manually running the java flight integration server and the go flight integration client with the generated_primitive_no_batches.json file. I'm gonna attempt using the ubuntu-verify-rc docker image and seeing if I can reproduce it manually there in a way I can debug. But I don't know what would be different to cause it unless there's something on the Java side.

Thanks [~zeroshade] for investigating it! 

cc [~lidavidm]

[~raulcd] [~lidavidm] Judging from the error message in the output, it looks like the Java server is returning a "NotFound" error in response to the DoGet portion of the test after the DoPut. Likely this is related to the fact that this scenario has no record batches so sends a flight descriptor in the stream with no record batches and then closes the DoPut. But since I can't reproduce this error by manually running the java server and go client locally i'm not sure where to go from here. As far as I'm able to tell, the Go client *definitely does* send the descriptor before closing the DoPut stream, and the C++ server doesn't seem to have this flakiness or issue in the tests with the Go client for this scenario.

[~zeroshade] possibly a race condition - does the Go client here wait for the server to close the stream before continuing? https://github.com/apache/arrow/blob/d8977165d610d3b828eea0923d733cc5a1cf2c4e/go/arrow/internal/flight_integration/scenario.go#L195-L199

Judging from https://grpc.io/docs/languages/go/basics/#bidirectional-streaming-rpc-1 we should end the DoPut in Go with a loop that calls stream.Recv until we get io.EOF

[~lidavidm] I can give that a try. You're correct that the Go isn't waiting for confirmation / the server to close the stream before it continues there. I'll add a loop for that into the scenario code. 

[~kszucs] Should I make a PR to merge into the release-8.0.0 branch for this? Or just merge to master and you'll update that branch/tag?

Just merge to master then I can cherry-pick the commit to the release branch, though RC3 is currently building so I'm not planning to include this in the 8.0.0 release unless we consider it as a blocker. 

Fair enough. I've put up the PR and linked it to this issue. Would be good if we can confirm this fixes the issue but it's hard to do that given the flakiness

Issue resolved by pull request 13058
[https://github.com/apache/arrow/pull/13058]

This issue has been migrated to [issue #20227|https://github.com/apache/arrow/issues/20227] on GitHub. Please see the [migration documentation|https://github.com/apache/arrow/issues/14542] for further details.

