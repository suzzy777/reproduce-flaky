[~giacomotaylor] Was just curios to know why this is happening so just spent  little time to find out the issue. The reason it's happening is because the function (randomDataGenerator.nextLong (minDt.getMillis(), maxDt.getMillis() ) ) which is being used to  generate random date between two limits generates data with endpoints included.  And the assertion in RuleGenratorTest class is  assertDateBetween which checks the date generated is exactly between limits and it fails sometimes because date generated is sometimes same as limits as in the above stack-trace we can see.   

I have a very simple fix for this we just have to add 1 unit to lower limit and subtract 1  from upper limit when we pass the limits to function, this will make sure the data generated is exactly between limits.

This test is there from starting so don't know why this issue didn't happen before, may be probability is really very low so never occurred such frequently. I never got this error in so many builds.  But for sure this is a bug and needs to be fixed. 

Let me know if I can go ahead and submit patch for this.
   

Yes, [~karan.singhal], a patch would be much appreciated.

Fixed random-data generator to generate data exactly between limits

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12782240/PHOENIX-2592.patch
  against master branch at commit 79d24a8bedc1d99b04c44593c4873fda97d4804b.
  ATTACHMENT ID: 12782240

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 4 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:red}-1 javadoc{color}.  The javadoc tool appears to have generated 33 warning messages.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.phoenix.pherf.RuleGeneratorTest

     {color:red}-1 core zombie tests{color}.  There are 1 zombie test(s): 

Test results: https://builds.apache.org/job/PreCommit-PHOENIX-Build/224//testReport/
Javadoc warnings: https://builds.apache.org/job/PreCommit-PHOENIX-Build/224//artifact/patchprocess/patchJavadocWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-PHOENIX-Build/224//console

This message is automatically generated.

[~giacomotaylor] and [~cody.marcel@gmail.com].The failure which Hadoop QA reported is little interesting because this test passes every time on mac machine and every time fails on Linux machine.The test failure says that "2019-09-22 00:01:00.000" (date) is too short. So when I ran the test in debug mode, found that  in mac machine the parser is able to successfully parse the date "2019-09-22 00:01:00.000 UTC" (with time zone appended) from xml  and so test is success. And in Linux machine the parser just parses the date without time zone and the formater function in test throws  the error that date is too short. And on another Linux machine test passes successfully without any issue. So parser (JAXB) is showing different behaviors in different environments. May be its another compatibility kind of  bug which needs to be fixed. 

The reason of test failure which is reported by Hadoop QA is not relevant to my changes in the patch. This failure might occur again in the present build too. 

[~karan.singhal] - given your comment above, should we proceed with reviewing/committing your patch? Does it fix the issue?

If so, [~mujtabachohan] - would you mind reviewing/committing? 

[~giacomotaylor] and [~mujtabachohan] - yes, please review and commit it.

Ok. [~mujtabachohan] - would you mind committing this please?

SUCCESS: Integrated in Phoenix-master #1077 (See [https://builds.apache.org/job/Phoenix-master/1077/])
PHOENIX-2592 Pherf RuleGeneratorTest.testDateGenerator() is flapping (mujtaba: rev 4f50257b569874209fe1b5988f0a256c22c6d0c1)
* phoenix-pherf/src/main/java/org/apache/phoenix/pherf/rules/RulesApplier.java
* phoenix-pherf/src/test/java/org/apache/phoenix/pherf/RuleGeneratorTest.java


[~karan.singhal] - looks like the test is still flapping.

https://builds.apache.org/job/Phoenix-4.x-HBase-0.98/1001/console

Tests run: 6, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.954 sec <<< FAILURE! - in org.apache.phoenix.pherf.RuleGeneratorTest
testDateGenerator(org.apache.phoenix.pherf.RuleGeneratorTest)  Time elapsed: 0.926 sec  <<< ERROR!
java.lang.IllegalArgumentException: Invalid format: "2019-09-22 00:01:00.000" is too short
	at org.apache.phoenix.pherf.RuleGeneratorTest.assertDateBetween(RuleGeneratorTest.java:319)
	at org.apache.phoenix.pherf.RuleGeneratorTest.assertRandomDateValue(RuleGeneratorTest.java:196)
	at org.apache.phoenix.pherf.RuleGeneratorTest.testDateGenerator(RuleGeneratorTest.java:62)




[~karan.singhal] - please add the @Ignore tag to the test. The churn this is causing is painful.

[~giacomotaylor]- The change which solves this jira's issue are there in the patch applied. The reason now test is failing is altogether different case that is dates are not properly parsed from xml in some environments. I am curios to know why it's happening so working on the fix maybe   it's related to different JAXB or jdk versions but not sure so need little more time to find out. 

Yes, we can definitely put the ignore tag for test until the issue is resolved. Should I submit a new patch with just ignore tag in that?  
 

Yes, please.

Done.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12782732/Ignore_test.patch
  against master branch at commit c584029b9face0acb0513d328d68ec42b25fc011.
  ATTACHMENT ID: 12782732

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 4 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:red}-1 javadoc{color}.  The javadoc tool appears to have generated 33 warning messages.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-PHOENIX-Build/225//testReport/
Javadoc warnings: https://builds.apache.org/job/PreCommit-PHOENIX-Build/225//artifact/patchprocess/patchJavadocWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-PHOENIX-Build/225//console

This message is automatically generated.

SUCCESS: Integrated in Phoenix-master #1085 (See [https://builds.apache.org/job/Phoenix-master/1085/])
PHOENIX-2592 Ignore flaky test (jtaylor: rev 3e5fa3efceeee2da6b551f11c7bc7cfb86f06143)
* phoenix-pherf/src/test/java/org/apache/phoenix/pherf/RuleGeneratorTest.java


I think this patch is ok. I'll verify again today hopefully and commit. The flapper is actually a different issue (PHOENIX-2612) @karan is looking into. 

[~cody.marcel@gmail.com] - the patch was already committed and the unit test continued to flap. Please don't commit until you're sure it won't continue to flap (as the churn is too high when we're this close to a release).

[~jamestaylor] I didn't realize it was already committed. Sorry about that. The other Jira is actually the fix for the test. This patch fixed the failure in the description though. Your right though, nothing to do on this one.

