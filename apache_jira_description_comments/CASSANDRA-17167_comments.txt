Note for the reviewer:

[~adelapena] probably a quick review for you as we've both been working on these tests.

I split the tests that according to jenkins history have suffered the timeouts recently. It's just a plain split of test files.

Sure, I'll take a look

+1 to splitting those tests. Not sure however about applying the changes to 4.0 if we are only finding the failures in trunk. 4.0 misses the refactoring done by CASSANDRA-1712, which was done to avoid the code duplication introduced by the previous splitting of view tests done by CASSANDRA-16670. Thus, this new test splitting is introducing even more core duplication in 4.0. I think I'd prefer to either leave 4.0 unchanged or port back the changes introduced by CASSANDRA-17122 and then split, wdyt?

It's interesting that we are seeing those timeouts only in trunk. CASSANDRA-17122 introduced changes to always wait for  MV builds and updates even when it's not strictly required so we prevent accidental races. This however might make the tests slightly slower and thereof more prone to produce JUnit timeouts. That might explain the difference, although I'm not sure the impact of those additional waits is noticeable. At least, I don't see a lot of difference locally.

Do we have a PR for trunk with CI runs?

I reached similar conclusions to you.

I did the 4.0 branch bc looking at jenkins test reports, despite being difficult to track, I was under the impression the same tests were close to timing out as well. Hence I thought doing 4.0 would be a good defensive move. I think porting 17122 would be a big effort with diminishing returns in 4.0. Trunk is a different story. So big refactor vs some minor code dup vs risk of timing out. I chose n2 for the best balance and return in my eyes. Would you prefer we leave 4.0 alone?

I did not push a trunk branch yet bc I wanted to have feedback on a first pass on 4.0. I'll do a trunk PR now then.

> So big refactor vs some minor code dup vs risk of timing out. I chose n2 for the best balance and return in my eyes. Would you prefer we leave 4.0 alone?

Indeed porting the refactor is quite involved and it could be done to prevent a timeout problem that we might not have. However keep duplicating code in 4.0 doesn't sound good either, especially considering that the duplication doesn't look so minor to me. I we leave 4.0 alone we could always go back and split the tests if we see them failing, but I don't have a strong opinion on this and I'd be ok splitting 4.0 if you think they are close to time out. If we go that way we should at least remove the duplications of {{{}createView{}}}/{{{}updateView{}}}/{{{}dropView{}}} in the new {{ViewFiltering2Test}} by calling the version of those methods in {{{}ViewFilteringTest{}}}, as it's done by the other {{ViewFiltering*}} tests.

Ah that dup code in {{ViewFiltering2Test}} is an oversight, my bad. Yes that has to go and I did in the latest push. I left the split in 4.0 bc jenkins shows for some a failure but only in a blue moon. So as it is already there + removing that dup code I'd leave it as it is now.

I also pushed trunk. The only thing worth mentioning is again on {{ViewFiltering2Test}} where I call {{ViewFilteringTest}} enc setup/teardown methods rather than doing some parent common class which sounds like an overkill.

{quote}I also pushed trunk. The only thing worth mentioning is again on ViewFiltering2Test where I call ViewFilteringTest enc setup/teardown methods rather than doing some parent common class which sounds like an overkill.
{quote}
Thanks, I also think that a common superclass in the trunk case is an overkill. The patch for trunk looks good to me, I have left a couple of trivial suggestions on the PR.

As for 4.0, I agree to splitting the tests if they are also timing out, and it seems they are. We don't need to port back the refactoring done in CASSANDRA-1712, but we could still try to reduce duplications a bit by extracting a common superclass for {{ViewFiltering*}} tests, like we did with {{ViewComplexTester}} in CASSANDRA-17070, [this way|https://github.com/adelapena/cassandra/commit/e5b0937f80e6d7e8640b3ae1be99487bf895c642]. That's a 5min refactor and gets rid of the duplications within the six flavours of {{{}ViewFiltering*Test{}}}.

I have run the split tests and all seem to finish in very reasonable and well balanced times, hopefully we won't need to split them again :). Could we have some repeated runs of {{{}View*Test{}}}, just to be sure that at least they aren't flaky on CircleCI?

[~adelapena] latest review comments addressed. The only downside is that I tried a 100 runs of {{View*Test}} and circle timed out as you can see on the CI links. I don't think it makes much sense to try 50, 25, etc runs. I would go for the merge but lmk wdyt.

Both PRs look good to me. With the common superclass {{ViewFilteringTester}} we don't solve the problem of duplications in 4.0 but at least we don't contribute to it with this new splitting, which is nice.
{quote}The only downside is that I tried a 100 runs of View*Test and circle timed out as you can see on the CI links. I don't think it makes much sense to try 50, 25, etc runs. I would go for the merge but lmk wdyt.
{quote}
I was writing about this on the PR, we can run those tests with MIDRES to prevent the timeouts:
{code:java}
.circleci/generate.sh -m \
  -e REPEATED_UTEST_TARGET=test \
  -e REPEATED_UTEST_COUNT=100 \
  -e REPEATED_UTEST_CLASS=View*Test
{code}
That's the config we used for CASSANDRA-17122. IIR both unit tests and repeated unit tests use the same resource class in LOWRES and MIDRES, and the only difference is parallelism. I'm running them here:
 * [4.0|https://app.circleci.com/pipelines/github/adelapena/cassandra/1171/workflows/4be538d8-6695-4f06-8fe5-b9e7149a6800]
 * [trunk|https://app.circleci.com/pipelines/github/adelapena/cassandra/1172/workflows/e27a399a-9076-4b5f-bd1e-7fa59444f9cb]

Ah sorry I was out for lunch otherwise I would have done it myself. I intentionally went for low-res to get a constrained env bc on MID is like 100/24 ~= 4 runs per node. But it's better than nothing so sgtm.

No worries :). `View*Test` contains a bunch of slowish tests, it has taken around one hour even with the 25 parallel runners, but it has happily succeeded. I think we are ready to merge.

