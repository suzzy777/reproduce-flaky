At start up, if column=info:server has value for hbase:namespace region, we can use retain assignment.
Otherwise we can randomly assign hbase:namespace region.

When doing this we should also consider, when the security coprocessors are installed, deploying the ACL and labels tables before user tables. 

{quote}
When doing this we should also consider, when the security coprocessors are installed, deploying the ACL and labels tables before user tables.
{quote}

+1

It'd be good to handle the general case of assigning system ( hbase:* ) tables first. If I remember right the original patch used to do that. 

Tentative patch.

Other system tables are not assigned ahead of user regions yet.

Patch v2 fixes an NPE found during local test run.

I renamed the new method assignSystemTable() so that it can apply to hbase:acl, etc.

Patch v3 renames the method to assignSystemTableIfExists() and adds calls for ACL and labels tables.

Tested backported patch on an hbase 1.1.1 cluster and saw the following in master log:
{code}
2015-08-07 17:15:34,122 DEBUG [perf-eval-test-2:20000.activeMasterManager] master.HMaster: Assigning hbase:namespace to perf-eval-test-3.openstacklocal,16020,1436988205709
{code}

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12749285/14190-v2.txt
  against master branch at commit 741783585306e03eec8074841b342ab742cf37e7.
  ATTACHMENT ID: 12749285

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 hadoop versions{color}. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0)

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 protoc{color}.  The applied patch does not increase the total number of protoc compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 checkstyle{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:green}+1 findbugs{color}.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn post-site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.regionserver.TestRegionServerHostname

     {color:red}-1 core zombie tests{color}.  There are 1 zombie test(s): 	at org.apache.hadoop.hbase.snapshot.TestExportSnapshot.testExportFileSystemState(TestExportSnapshot.java:310)
	at org.apache.hadoop.hbase.snapshot.TestExportSnapshot.testConsecutiveExports(TestExportSnapshot.java:214)

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/14996//testReport/
Release Findbugs (version 2.0.3) 	warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/14996//artifact/patchprocess/newFindbugsWarnings.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/14996//artifact/patchprocess/checkstyle-aggregate.html

  Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/14996//console

This message is automatically generated.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12749305/14190-v3.txt
  against master branch at commit f06daaf010e8e1941946de131a11f018b8419307.
  ATTACHMENT ID: 12749305

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 hadoop versions{color}. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0)

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 protoc{color}.  The applied patch does not increase the total number of protoc compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 checkstyle{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:green}+1 findbugs{color}.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn post-site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.regionserver.wal.TestLogRolling
                  org.apache.hadoop.hbase.regionserver.TestRowTooBig
                  org.apache.hadoop.hbase.regionserver.TestHRegion
                  org.apache.hadoop.hbase.regionserver.TestRegionServerMetrics
                  org.apache.hadoop.hbase.mapreduce.TestMultiTableInputFormat
                  org.apache.hadoop.hbase.regionserver.TestStore
                  org.apache.hadoop.hbase.regionserver.TestHRegionOnCluster
                  org.apache.hadoop.hbase.regionserver.TestRegionFavoredNodes
                  org.apache.hadoop.hbase.mapreduce.TestTimeRangeMapRed
                  org.apache.hadoop.hbase.mapreduce.TestHFileOutputFormat
                  org.apache.hadoop.hbase.regionserver.TestAtomicOperation
                  org.apache.hadoop.hbase.mapreduce.TestLoadIncrementalHFilesUseSecurityEndPoint
                  org.apache.hadoop.hbase.regionserver.TestJoinedScanners
                  org.apache.hadoop.hbase.mapreduce.TestSyncTable
                  org.apache.hadoop.hbase.regionserver.wal.TestSecureWALReplay
                  org.apache.hadoop.hbase.regionserver.TestSCVFWithMiniCluster
                  org.apache.hadoop.hbase.mapreduce.TestImportTsv
                  org.apache.hadoop.hbase.client.TestClientPushback

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/15000//testReport/
Release Findbugs (version 2.0.3) 	warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/15000//artifact/patchprocess/newFindbugsWarnings.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/15000//artifact/patchprocess/checkstyle-aggregate.html

  Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/15000//console

This message is automatically generated.

Did some more cluster testing (based on patch v2):
1. dropped server column for namespace table:
{code}
hbase(main):001:0> delete 'hbase:meta', 'hbase:namespace,,1436988213845.553f6143557b29a57346c6172a401953.', 'info:server'
0 row(s) in 0.4580 seconds
{code}
2. restarted master
3. in master log, observed the following:
{code}
2015-08-07 20:56:59,184 DEBUG [bloomberg-perf-eval-test-2:20000.activeMasterManager] master.HMaster: Assigning hbase:namespace to some server
{code}
Master came up fine.

Checking test failure in patch v3.

I manually ran some failed tests:
{code}
 2036  mt -Dtest=TestHRegion
 2037  mt -Dtest=TestRegionServerMetrics,TestTimeRangeMapRed
{code}
which passed.

From https://builds.apache.org/job/PreCommit-HBASE-Build/15000/console :
{code}
testCloseWithFailingFlush(org.apache.hadoop.hbase.regionserver.TestHRegion)  Time elapsed: 0 sec  <<< ERROR!
java.lang.OutOfMemoryError: unable to create new native thread
	at java.lang.Thread.start0(Native Method)
	at java.lang.Thread.start(Thread.java:713)
	at org.junit.internal.runners.statements.FailOnTimeout.evaluateStatement(FailOnTimeout.java:25)
	at org.junit.internal.runners.statements.FailOnTimeout.evaluate(FailOnTimeout.java:17)
{code}
Seems an environment issue.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12749353/14190-v3.txt
  against master branch at commit f1c1692d511f72ba0bef42e22d27098c25bd10d9.
  ATTACHMENT ID: 12749353

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 hadoop versions{color}. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0)

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 protoc{color}.  The applied patch does not increase the total number of protoc compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 checkstyle{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:green}+1 findbugs{color}.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn post-site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
     

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/15004//testReport/
Release Findbugs (version 2.0.3) 	warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/15004//artifact/patchprocess/newFindbugsWarnings.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/15004//artifact/patchprocess/checkstyle-aggregate.html

  Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/15004//console

This message is automatically generated.

[~yuzhihong@gmail.com] when you say 'There was issue in master assigning user regions.' can you elaborate a little more.. 

The symptom was that majority of user regions were not assigned (including hbase:namespace table).
Need to dig into master log again to see what might be the cause.

Running test suite locally I got:
{code}
Failed tests:
  TestFastFail.testFastFail:271 There should be atleast one thread that retried instead of failing
  TestDistributedLogSplitting.testLogReplayTwoSequentialRSDown:653 expected:<1000> but was:<738>

Tests in error:
  TestJMXListener.setupBeforeClass:57 » IO Shutting down
{code}
The first two failures appeared in Jenkins / QA runs.
TestJMXListener passes when run by itself.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12749367/14190-v3.txt
  against master branch at commit ea8833fd63c9ef35292766f646b1e507577e46f5.
  ATTACHMENT ID: 12749367

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 hadoop versions{color}. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0)

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 protoc{color}.  The applied patch does not increase the total number of protoc compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 checkstyle{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:green}+1 findbugs{color}.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn post-site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.regionserver.TestRegionServerHostname

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/15008//testReport/
Release Findbugs (version 2.0.3) 	warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/15008//artifact/patchprocess/newFindbugsWarnings.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/15008//artifact/patchprocess/checkstyle-aggregate.html

  Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/15008//console

This message is automatically generated.

Patch v4 calls UserProvider.isHBaseSecurityEnabled() to see if ACL and labels table need to be assigned.
This is to avoid unnecessary calls to MetaTableAccessor.tableExists().


{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12749421/14190-v4.txt
  against master branch at commit d4fc7cf2ba0d06b040dad435ab72366c4fd44116.
  ATTACHMENT ID: 12749421

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 hadoop versions{color}. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0)

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 protoc{color}.  The applied patch does not increase the total number of protoc compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 checkstyle{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:green}+1 findbugs{color}.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn post-site goal succeeds with this patch.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

     {color:red}-1 core zombie tests{color}.  There are 2 zombie test(s): 

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/15013//testReport/
Release Findbugs (version 2.0.3) 	warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/15013//artifact/patchprocess/newFindbugsWarnings.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/15013//artifact/patchprocess/checkstyle-aggregate.html

  Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/15013//console

This message is automatically generated.

{code}
Fetching the console output from the URL
Printing hanging tests
Printing Failing tests
Failing test : org.apache.hadoop.hbase.master.procedure.TestWALProcedureStoreOnHDFS
{code}
TestWALProcedureStoreOnHDFS is known flaky.

Patch v5 adds an assertion in TestMasterFailover#testSimpleMasterFailover for namespace table which is assigned before active master initialization finishes.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12749625/14190-v5.txt
  against master branch at commit ce72ce998f2e9ad23329b48ab8e85912d642fef1.
  ATTACHMENT ID: 12749625

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified tests.

    {color:green}+1 hadoop versions{color}. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0)

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 protoc{color}.  The applied patch does not increase the total number of protoc compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 checkstyle{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:green}+1 findbugs{color}.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn post-site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.master.procedure.TestWALProcedureStoreOnHDFS

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/15030//testReport/
Release Findbugs (version 2.0.3) 	warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/15030//artifact/patchprocess/newFindbugsWarnings.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/15030//artifact/patchprocess/checkstyle-aggregate.html

  Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/15030//console

This message is automatically generated.

TestWALProcedureStoreOnHDFS is known flaky test.

I may be missing something but all tables we are interested in here are in the 'hbase:' namespace. Why not just assign all of that namespace first? The special casing seems like the wrong approach, and is further problematic with stuff like this:

{code}
741	   if (UserProvider.isHBaseSecurityEnabled(conf)) {
742	      assignSystemTableIfExists(status, AccessControlLists.ACL_TABLE_NAME);
743	      assignSystemTableIfExists(status, VisibilityConstants.LABELS_TABLE_NAME);
744	
{code}

There's no guarantee at all security coprocessors are installed just because secure authentication is enabled. I get the ...IfExists part, but isHBaseSecurityEnabled doesn't say anything about if security coprocessors are installed.

What about future features or coprocessors that add additional tables to the 'hbase:' namespace  with the expectation they are system tables that should be deployed ahead of user tables?

A brief search doesn't locate the method which returns system tables currently deployed in cluster.
Planning to add one to MetaTableAccessor.

I want to get confirmation that *all* system tables should be assigned ahead of user table regions.
This would be behavioral change compared to current approach.

bq. I want to get confirmation that all system tables should be assigned ahead of user table regions.

Isn't this JIRA titled "Assign system tables ahead of user region assignment"?

Are your goals different?

bq. add additional tables to the 'hbase:' namespace with the expectation they are system tables that should be deployed ahead of user tables?

To my knowledge, there is currently no static registry of system tables. Patch v7 adds MetaTableAccessor#getSystemTableRegionsAndLocations() which scans hbase:meta table for system tables.

However, on fresh start, this method would not work.

Comment is welcome.

Patch v7 uses hbase:meta as the registry of system tables.
I think this should be fine for this JIRA.

It is also consistent with the approach of patch v1: we assign the system table if it appears in hbase:meta.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12749715/14190-v7.txt
  against master branch at commit ae35f65e9ac12256b4514e6ba6ef5333e9e90870.
  ATTACHMENT ID: 12749715

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified tests.

    {color:green}+1 hadoop versions{color}. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0)

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 protoc{color}.  The applied patch does not increase the total number of protoc compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

                {color:red}-1 checkstyle{color}.  The applied patch generated 1865 checkstyle errors (more than the master's current 1862 errors).

    {color:green}+1 findbugs{color}.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn post-site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.security.visibility.TestDefaultScanLabelGeneratorStack
                  org.apache.hadoop.hbase.util.hbck.TestOfflineMetaRebuildBase
                  org.apache.hadoop.hbase.master.TestRestartCluster

     {color:red}-1 core zombie tests{color}.  There are 3 zombie test(s): 	at org.apache.hadoop.hbase.client.TestRestoreSnapshotFromClient.testCloneSnapshotOfCloned(TestRestoreSnapshotFromClient.java:245)
	at org.apache.hadoop.hbase.client.TestReplicasClient.testReverseScanWithReplicas(TestReplicasClient.java:612)

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/15034//testReport/
Release Findbugs (version 2.0.3) 	warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/15034//artifact/patchprocess/newFindbugsWarnings.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/15034//artifact/patchprocess/checkstyle-aggregate.html

                Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/15034//console

This message is automatically generated.

TestDefaultScanLabelGeneratorStack passes locally.
I can work on investigating / fixing test failures.

Meanwhile, comment on approach in v7 would help shape the direction we go.

In the MetaTableAccessor class, getSystemTableRegionsAndLocations() method,  since we know that we need system table region information and they start with NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR string, can we optimize this :

{quote}
+    scanMeta(connection, HConstants.EMPTY_START_ROW, HConstants.EMPTY_END_ROW,
+      QueryType.REGION, visitor);
{quote}

In this way we will avoid scanning the entire meta table.

Patch v8 addresses Vandana's comment by narrowing the key range for the meta scan.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12749972/14190-v8.txt
  against master branch at commit a78e6e94994aaba2bee7747054ea9a55f1edd421.
  ATTACHMENT ID: 12749972

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 6 new or modified tests.

    {color:green}+1 hadoop versions{color}. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0)

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 protoc{color}.  The applied patch does not increase the total number of protoc compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

                {color:red}-1 checkstyle{color}.  The applied patch generated 1860 checkstyle errors (more than the master's current 1857 errors).

    {color:red}-1 findbugs{color}.  The patch appears to cause Findbugs (version 2.0.3) to fail.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn post-site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
     

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/15062//testReport/
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/15062//artifact/patchprocess/checkstyle-aggregate.html

                Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/15062//console

This message is automatically generated.

If some system region can't be assigned, master initialization could be longer.

I wonder if a new config, cough, should be introduced (default to false).
e.g. hbase.master.assign.system.tables.first

I can't think of a single time that I would want a master to say the cluster is initialized while the most important regions aren't assigned.
As such I can't see anyone ever wanting to have the master not assign the system tables first. So I can't see another config option being anything but more config bloat.

I agree with Elliott - without those system tables, the cluster cannot be fully functional.  

However, I think we should have a new JIRA to allow MASTER to start with minimal initialization (need to define what is 'minimal', eg. META regions have to be assigned)  - in 'safe mode' or 'single-user mode' so that admin could do some manual task.  Sometimes we could have problems during master initialization (eg. assign a system region).  If we don't allow MASTER to start, our option to fix the issue is limited.  To provide a way (single-user mode) to let MASTER up-and-running and accept limited requests (admin tasks) would help admin manually fix some issues (eg. admin manually assign a region to a RS).  Once issues are fixed, we can re-start MASTER with full functional mode (eg. going through all the master initialization operations). 

I have been working on making TestRestartCluster pass.
This patch is work in progress.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12750213/14190-v12.txt
  against master branch at commit d7178aa27c55ae06cfbd6db94d6839311dfb4089.
  ATTACHMENT ID: 12750213

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 9 new or modified tests.

    {color:green}+1 hadoop versions{color}. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0)

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 protoc{color}.  The applied patch does not increase the total number of protoc compiler warnings.

    {color:red}-1 javadoc{color}.  The javadoc tool appears to have generated 1 warning messages.

    {color:green}+1 checkstyle{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:green}+1 findbugs{color}.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn post-site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.replication.TestReplicationDisableInactivePeer
                  org.apache.hadoop.hbase.master.TestRollingRestart
                  org.apache.hadoop.hbase.master.procedure.TestMasterFailoverWithProcedures
                  org.apache.hadoop.hbase.namespace.TestNamespaceAuditor
                  org.apache.hadoop.hbase.TestAcidGuarantees
                  org.apache.hadoop.hbase.replication.TestReplicationSyncUpTool

     {color:red}-1 core zombie tests{color}.  There are 11 zombie test(s): 	at org.apache.hadoop.hbase.client.TestHTablePool$TestHTableReusablePool.testCloseTablePool(TestHTablePool.java:263)
	at org.apache.hadoop.hbase.master.TestMasterOperationsForRegionReplicas.testCreateTableWithMultipleReplicas(TestMasterOperationsForRegionReplicas.java:228)
	at org.apache.hadoop.hbase.client.TestTimestampsFilter.testWithVersionDeletes(TestTimestampsFilter.java:235)
	at org.apache.hadoop.hbase.client.TestTimestampsFilter.testWithVersionDeletes(TestTimestampsFilter.java:222)
	at org.apache.hadoop.hbase.mapred.TestTableInputFormat.testInputFormat(TestTableInputFormat.java:354)
	at org.apache.hadoop.hbase.mapred.TestTableInputFormat.testExtensionOfTableInputFormatBase(TestTableInputFormat.java:326)
	at org.apache.hadoop.hbase.io.hfile.TestCacheOnWrite.testStoreFileCacheOnWriteInternals(TestCacheOnWrite.java:270)
	at org.apache.hadoop.hbase.io.hfile.TestCacheOnWrite.testStoreFileCacheOnWrite(TestCacheOnWrite.java:486)
	at org.apache.hadoop.hbase.io.hfile.TestCacheOnWrite.testNotCachingDataBlocksDuringCompactionInternals(TestCacheOnWrite.java:489)
	at org.apache.hadoop.hbase.io.hfile.TestCacheOnWrite.testNotCachingDataBlocksDuringCompaction(TestCacheOnWrite.java:507)
	at org.apache.hadoop.hbase.client.TestRestoreSnapshotFromClient.testRestoreSnapshot(TestRestoreSnapshotFromClient.java:158)

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/15079//testReport/
Release Findbugs (version 2.0.3) 	warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/15079//artifact/patchprocess/newFindbugsWarnings.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/15079//artifact/patchprocess/checkstyle-aggregate.html

  Javadoc warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/15079//artifact/patchprocess/patchJavadocWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/15079//console

This message is automatically generated.

I did some debugging for test failure in TestNamespaceAuditor#testRegionOperations
In the middle of the test, this is called:
{code}
    restartMaster();
{code}
When new master initializes, it assigns hbase:quota again, resulting in:
{code}
2015-08-13 02:43:33,420 FATAL [PriorityRpcServer.handler=16,queue=0,port=50627] regionserver.HRegionServer(2072): ABORTING region server 192.168.0.12,50627,1439458945214:        Received OPEN for the region:hbase:quota,,1439458947828.c74bc53e12f6aae7f979d1ed6d8b4387., which is already online
015-08-13 02:43:33,443 INFO  [PriorityRpcServer.handler=16,queue=0,port=50627] regionserver.HRegionServer(1873): STOPPED: Received OPEN for the region:hbase:quota,,              1439458947828.c74bc53e12f6aae7f979d1ed6d8b4387., which is already online
{code}
Trying to find a solution for this scenario.

Should close this related issue?

What is the JIRA number for the related issue ?

See 'Issue Links' at top of this issue: "HBASE-13556 In assignment, treat system tables as 'special'; assign after hbase:meta and before user-space tables"

The original intention of this JIRA didn't go as far as giving system tables their own WALs.
HBASE-13556 can be kept open, in my opinion.

For 14190-v12.4.txt (for clean cluster start), I got unit tests passing.

Please comment on whether I should iterate on 14190-v12.4.txt or, separate WAL for system tables should be implemented first.

w.r.t. separate WAL for system tables , how about using .sys suffix for WAL of non-meta system tables ?

First cut (work in progress) for separate WAL file for system tables.

Comments are welcome.

Once this gets more mature, I can merge it with previously posted patch.

For system tables, can we assume that there would be only one region ?
This would be true for hbase:meta and hbase:namespace

Not sure about hbase:acl table.

bq. For system tables, can we assume that there would be only one region ?

No that is not a safe assumption at all. The only table that doesn't split as META, and we're going to (eventually) fix that.


Hi, Ted

A late question.  What was the cause that the namespace region wasn't assigned within the 300000ms timeout in your original case?

Master log has been analyzed but no conclusion as of now.

Please take a look at 14190-system-wal-v1.txt and see if the direction is good.

[~tedyu], could you put the change in review board, it is easy to review a big change in RB than looking at the flat text file?

[~tedyu], another thinking on the original intension (the master would not shut down due to namespace region unassigned), I think we also can think of a lightweight master initialization - thinking about this: without meta online, master is not very useful; if namespace is not online, master can still server in limited role (cannot do master table DDL, like CREATE TABLE); without acl online, master is not useful for secure cluster, but unsecure connection can still work.  With this in mind, we could have master up-and-running without complete all initialization steps (master up with limited role, and at the same time, master completes full initialization async) - well, this would be a different improvement, just some thoughts. 

Since the patch is not complete, I am not sure if putting on review board is needed.

Can you utilize the plugin below ?
http://search-hadoop.com/m/YGbbJN3O913jjgj2/A+Chome+extension+for+rendering+patch+on+JIRA&subj=A+Chome+extension+for+rendering+patch+on+JIRA

Thanks

[~Ted Yu], thanks, Git Patch Viewer is great!  It is much clear to see the change that way.  

Looks like the logic in {{14190-system-wal-v1.txt}} just follow what we treat with META.  From my understanding, it should work.  I think the change should be in a different JIRA (something like that "implement dedicated WAL for system tables").

Also a small code suggestion (nothing wrong with the logic, just from code maint point of view) - instead of {{regionInfo.getReplicaId() == HRegionInfo.DEFAULT_REPLICA_ID}}, use {{RegionReplicaUtil.isDefaultReplica(regionInfo)}}.  

Hi Stephen, +1 for this as well as the safe mode or single-user mode in your comment back for 13/Aug/2015 

Hi Ted,

Was just wondering what could be the possible scenario in which the 'info:server' entry from 'hbase:meta' would get deleted/manipulated.

Resolve as won't do? No progress and branch-2 already does this (see HBASE-18109 Assign system tables first (priority))

We are sometimes facing master take a long time to be inited because of namespace table not assigned either. This issue and HBASE-16488 is solving this problem in branch-1. To my understand, the namespace table is the only system table blocking master from startup. Since this issue and HBASE-16488 have both provide a complex patch and not committed for a long time. Here I offer a simple but (maybe)hack solution to discuss:
In {{openRegion}} of RSRpcServices, we have one thread only for OpenMetaHandler to open meta region, namespace table region and other regions are opened in a shared thread pool(So namespace region may be queued in the pool because other region is opening or blocked when open). since
1. the one thread for  OpenMetaHandler is never used after meta have been assigned
2. namespace region always assign after meta region is assigned when cluster restart
 Why not use this thread for namespace table region opening?
The changes are simple, something like this:
{code}
 // If there is no action in progress, we can submit a specific handler.
          // Need to pass the expected version in the constructor.
          if (region.isMetaRegion() || region.isNamespaceTable()) { //assign namespace table using OpenMetaHandler
            regionServer.service.submit(new OpenMetaHandler(
              regionServer, regionServer, region, htd, masterSystemTime, coordination, ord));
          } else {
....
}
{code}
Ping [~ted_yu],[~syuanjiang],[~stack]

Sounds reasonable to me. Do we need change in the meta region opener in case namespace gets scheduled ahead of meta?

{quote}
Sounds reasonable to me. Do we need change in the meta region opener in case namespace gets scheduled ahead of meta?
{quote}
in current design, the only case the namespace gets scheduled ahead of meta is that, namespace and meta region are host on different rs, and they crashed at the same time, and then the SSH assign both meta region and meta to the same server, and open namespace region request arrivals before open meta region request... That's nearly impossible

wait a minute... If this happens, open namespace region will stuck since meta region is not online, and assign meta will stuck also because there only one thread for meta hander. maybe this is not a good idea.

If I am not wrong, for system tables expect meta we still share logs with user regions, so even if we have some logic to assign system tables first, we still need wait log splitting done and we can not guarantee logs of system tables are split first. So there may be a blocking task that we should make multi-log feature having priority and write entries of system table in the highest priority logs. Thanks.

Good point [~yangzhe1991].

[~allan163] yeah... would need to put aside the namespace table assign if meta is not online... probably inside in the meta open handler.  Would need to not block either as per Phils comment. Not sure that possible in current setup in branch-1.



Confirming this is still an issue - seeing this today

Hey [~timrobertson100]. You talking hbase1 sir?

[~abhishek.chouhan] [~apurtell] - FYI

[~mnpoonia] [~abhishek.chouhan] maybe HBASE-16488 is better to solve the immediate problem.

