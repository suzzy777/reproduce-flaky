Some more info from the Jenkins job where this test failed:

{code}
=================================== FAILURES ===================================
_______________________ TestWebPage.test_backend_states ________________________
webserver/test_web_pages.py:321: in test_backend_states
    expected_state=running_state)
webserver/test_web_pages.py:297: in __run_query_and_get_debug_page
    self.wait_for_state(query_handle, expected_state, 100)
common/impala_test_suite.py:841: in wait_for_state
    % (handle.get_handle().id, expected_state, actual_state))
E   Timeout: query 'a94c0fc5da9a0f80:f74ed94200000000' did not reach expected state '3', last known state '4'
---------------------------- Captured stderr setup -----------------------------
SET sync_ddl=False;
-- executing against localhost:21000
DROP DATABASE IF EXISTS `test_backend_states_22f4a3e6` CASCADE;

-- 2019-01-07 23:30:21,788 INFO     MainThread: Started query 2f402bda419c7cc4:25a4492700000000
SET sync_ddl=False;
-- executing against localhost:21000
CREATE DATABASE `test_backend_states_22f4a3e6`;

-- 2019-01-07 23:30:22,619 INFO     MainThread: Started query 444d7423b372c442:10c3af7800000000
-- 2019-01-07 23:30:22,621 INFO     MainThread: Created database "test_backend_states_22f4a3e6" for test ID "webserver/test_web_pages.py::TestWebPage::()::test_backend_states"
----------------------------- Captured stderr call -----------------------------
-- executing async: localhost:21000
select sleep(10000) from functional.alltypes limit 1;
-- 2019-01-07 23:30:22,626 INFO     MainThread: Started query a94c0fc5da9a0f80:f74ed94200000000
getting state for operation: &lt;tests.common.impala_connection.OperationHandle object at 0xc87d250&gt;
{code}

As stated in the description, the query {{select sleep(10000) from functional.alltypes limit 1}} reached state FINISHED before the method {{__run_query_and_get_debug_page}} was able to check that it was in the RUNNING state. The intention of the test was for it run for at least 10 seconds so that the Python test could query the backend URL while the query was running.

Commit 274e96bd147b5d91872c441c3a600fa8d5295bbe in impala's branch refs/heads/master from Lars Volker
[ https://git-wip-us.apache.org/repos/asf?p=impala.git;h=274e96b ]

IMPALA-8059: Disable broken tests

IMPALA-7625 caused some tests to fail but because the change otherwise
also addressed test failures we explicitly disable the affected tests
here instead of reverting IMPALA-7625.

Change-Id: Ibbd11840aac63dc7d483cafc9ee9b419dc840f37
Reviewed-on: http://gerrit.cloudera.org:8080/12190
Reviewed-by: Lars Volker <lv@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


The issue with IMPALA-7625 is that the query {{select sleep(\?)}} only executes the sleep after it reaches the FINISHED state, which is a bit odd. I assumed {{sleep}} was an Impala function that just caused query to sleep while it was running.

[~stakiar] the FINISHED HS2 state doesn't actually mean the query finished executing, it actually means that the query is ready for the client to fetch results. The execution model is different from Hive so the names don't map directly

I wrote up a doc with some more info to share with a couple of people a while ago so might as well share this publicly (I'll add it to the wiki too): https://docs.google.com/document/d/1i838cTzPXHp_5zHE9twJHVVzxVnQDMIMVeNBttsFT5E/edit?usp=sharing

Thanks for showing me that doc [~tarmstrong] helps a lot. Agree, would be great to link it in the wiki as well.

I think the main thing that is confusing me is the {{sleep}} function in Impala. I would assume that while {{sleep}} is running, the query would remain in RUNNING state and only transition to FINISHED state once the sleep has completed. The query {{select sleep(60000)}} doesn't produce any rows for at least 60 seconds (the {{sleep}} function returns {{true}}) so it should stay RUNNING for 60 seconds. However, testing on a mini-cluster, this doesn't seem to be the case. The query almost immediately transitions to the FINISHED state, and then waits for 60 seconds before returning any rows.

Perhaps thats by design just for the {{sleep}} function? I would assume other Impala functions would not behave that way - e.g. {{select some_long_running_function}} would be in the RUNNING state until the function produces at least one row, right?

You would assume. There's a minor weirdness that we'd like to fix - IMPALA-7551 - that it's assumed rows are available when Open() returns from the topmost plan node, rather than when the first batch is produced. The assumption is that producing each batch is relatively quick, but there are many examples when it's not (e.g. the sleep())

Commit 51f30a6b9088cf3a0217a49a5792f1b41a8ad51b in impala's branch refs/heads/master from Joe McDonnell
[ https://git-wip-us.apache.org/repos/asf?p=impala.git;h=51f30a6 ]

IMPALA-8063: Add sleep to ImpalaTestSuite::wait_for_state() loop

ImpalaTestSuite::wait_for_state() loops waiting for the state
on the connection handle to reach the expected state. This loop
does not sleep, and the get_state() does some logging, so this
loop is generating a large amount of logging.

This adds a 0.5 second sleep to the loop. Running test_web_pages.py
shows a large reduction in logging.

webserver/test_web_page.py contains several tests that xfail but
still have run=True. Those tests are broken and use wait_for_state()
heavily, so disable those while IMPALA-8059 is being fixed.

Change-Id: Iaed0a9b292d431a64e22b460c92f6ef57b6abd1e
Reviewed-on: http://gerrit.cloudera.org:8080/12207
Reviewed-by: Sahil Takiar <stakiar@cloudera.com>
Reviewed-by: Pooja Nilangekar <pooja.nilangekar@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Reviewed-by: Joe McDonnell <joemcdonnell@cloudera.com>


