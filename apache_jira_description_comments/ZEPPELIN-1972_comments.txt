GitHub user DrIgor opened a pull request:

    https://github.com/apache/zeppelin/pull/1911

    [ZEPPELIN-1972] Preserve context classloader

    ### What is this PR for?
    `IMain.interpret` changes current thread's context classloader. It may cause different issues and definitely is the reason of [ZEPPELIN-1738](https://issues.apache.org/jira/browse/ZEPPELIN-1738) test failures.
    
    It's a known scala bug. See https://issues.scala-lang.org/browse/SI-9587
    
    As a workaround we need to save and restore context classloader manually
    
    ### What type of PR is it?
    Bug Fix
    
    ### What is the Jira issue?
    [ZEPPELIN-1972](https://issues.apache.org/jira/browse/ZEPPELIN-1972)
    
    ### How should this be tested?
    Run ignite interpreter test and ignite sql interpreter test in the same thread
    ```
    mvn test -pl ignite -am -Pscala-2.11 -Dtest=org.apache.zeppelin.ignite.IgniteInterpreterTest#testInterpret,org.apache.zeppelin.ignite.IgniteSqlInterpreterTest#testSql -DfailIfNoTests=false
    ```
    
    ### Questions:
    * Does the licenses files need update? No
    * Is there breaking changes for older versions? No
    * Does this needs documentation? No


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/DrIgor/zeppelin ZEPPELIN-1972

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zeppelin/pull/1911.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1911
    
----
commit 35c5abdc7f006c2ce4b0097cdd5192ef27293cd4
Author: Igor Drozdov <igor_drozdov@epam.com>
Date:   2017-01-16T09:19:35Z

    Preserve context classloader
    
    IMain.interpret changes current thread's context classloader.
    It's a scala bug.
    
    As a workaround we need to save and restore context classloader manually

----


Github user jongyoul commented on the issue:

    https://github.com/apache/zeppelin/pull/1911
  
    LGMT. I have a question. Is there any related issue to SparkInterpreter? Can you take a look into it?


Github user DrIgor commented on the issue:

    https://github.com/apache/zeppelin/pull/1911
  
    @jongyoul I checked SparkInterpreter, it has the same issue with context class loader


Github user Leemoonsoo commented on the issue:

    https://github.com/apache/zeppelin/pull/1911
  
    Thanks @DrIgor for fix and explanation of the issue!
    
    When RemoteInterpreterServer creates Interpreter, it [wraps interpreter instance with LazyOpenInterpreter](https://github.com/apache/zeppelin/blob/master/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java#L187). If we wrap interpreter instance with [ClassLoaderInterpreter](https://github.com/apache/zeppelin/blob/master/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/ClassloaderInterpreter.java) as well, like [zeppelin do when creating interpreter locally](https://github.com/apache/zeppelin/blob/ae1cb0527bc223b25761e1370618929e228183f8/zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java#L1123), then every interpreter will benefit by ClassloaderInterpreter. ClassloaderInterpreter restores classloader after methods call.
    
    @DrIgor @jongyoul Shell we try make RemoteInterpreterServer wrap interpreter with ClassloaderInterpreter? what do you think?


Github user jongyoul commented on the issue:

    https://github.com/apache/zeppelin/pull/1911
  
    @Leemoonsoo I think to wrap it with `ClassloaderInterpreter` would be a good idea. @DrIgor Can you try it on?


Github user DrIgor commented on the issue:

    https://github.com/apache/zeppelin/pull/1911
  
    @Leemoonsoo @jongyoul thank you! I didn't know about ClassLoaderInterpreter
    
    Unfortunately, our tests don't use InterpreterFactory and will use unwrapped Interpreter instance. So It won't fix flaky test.
    
    Besides, code inside interpreter itself will use incorrect classloader. Currently it isn't an issue but someday...
    
    Maybe It's better to wrap IMain or create "scala utils" to share common code between several scala-speaking interpreters?


Github user jongyoul commented on the issue:

    https://github.com/apache/zeppelin/pull/1911
  
    It actually wrap and conserve classloader for interpreter. I think you just change this line https://github.com/apache/zeppelin/blob/master/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java#L192 to use `ClassLoaderInterpreter`. Can you try it?


Github user jongyoul commented on the issue:

    https://github.com/apache/zeppelin/pull/1911
  
    Concerning `ClassloaderInterpreter`, you can find it https://github.com/apache/zeppelin/blob/master/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/ClassloaderInterpreter.java


Github user DrIgor commented on the issue:

    https://github.com/apache/zeppelin/pull/1911
  
    Yes, I tried ClassloaderInterpreter but it didn't fix original issue.
    
    https://github.com/apache/zeppelin/blob/master/ignite/src/test/java/org/apache/zeppelin/ignite/IgniteInterpreterTest.java#L69
    Here test creates unwrapped interpreter instance.
    
    So we need wrap every IgniteInterpreter usage. Besides, wrapper restores classloader _after_ interpreter call and interpreter itself use broken classloader.



Github user jongyoul commented on the issue:

    https://github.com/apache/zeppelin/pull/1911
  
    Got it. How about wrapping it like `new ClassloaderInterpreter(new IgniteInterpreter(props))`? It's the same logic that RemoteInterpreter want to work. You should change this line https://github.com/apache/zeppelin/blob/master/ignite/src/test/java/org/apache/zeppelin/ignite/IgniteInterpreterTest.java#L45 to `Interpreter`


Github user jongyoul commented on the issue:

    https://github.com/apache/zeppelin/pull/1911
  
    Is there any update on it?


Github user DrIgor commented on the issue:

    https://github.com/apache/zeppelin/pull/1911
  
    I tried to wrap with `ClassloaderInterpreter` and it works
    
    But I don't like this solution. We force every user of `IgniteInterpreter` to wrap it with `ClassloaderInterpreter`. It's very easy to broke this test again. For example, to add new test and forget about wrapping.
    
    It looks like dirty fix for me. `IgniteInterpreter` is still broker and we try to reduce negative effects by wrapper. I think it is acceptable for third party libraries when we can't change sources. But if we can fix original code we should do it
    
    If you think that wrapper is more appropriate I will update PR


Github user jongyoul commented on the issue:

    https://github.com/apache/zeppelin/pull/1911
  
    @DrIgor I agree with you. It's very easily broken. But on the other hands, I will make a new PR for changing `ClassloaderInterpreter` because another interpreter will fails with same issue if it doesn't implement like you.
    
    LGTM, will merge it.


Issue resolved by pull request 1911
[https://github.com/apache/zeppelin/pull/1911]

Github user asfgit closed the pull request at:

    https://github.com/apache/zeppelin/pull/1911


