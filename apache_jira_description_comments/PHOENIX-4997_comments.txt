MapReduceParallelScanGrouper also reads SnapshotManifest to determine the regions present in snapshot for query parallelization and optimization. It requires similar code changes as well.

GitHub user karanmehta93 opened a pull request:

    https://github.com/apache/phoenix/pull/397

    PHOENIX-4997 Phoenix MR on snapshots can produce duplicate rows

    @akshita-malhotra @gjacoby126 
    Could you please review?

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/karanmehta93/phoenix master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/phoenix/pull/397.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #397
    
----
commit 5bf281f8ac51eb54fb8c80db2c3ac7f056d1644b
Author: Karan Mehta <karanmehta93@...>
Date:   2018-10-27T03:28:08Z

    PHOENIX-4997 Phoenix MR on snapshots can produce duplicate rows

----


Github user karanmehta93 commented on a diff in the pull request:

    https://github.com/apache/phoenix/pull/397#discussion_r228699931
  
    --- Diff: phoenix-core/src/it/java/org/apache/phoenix/end2end/TableSnapshotReadsMapReduceIT.java ---
    @@ -66,74 +74,62 @@
       private static List<List<Object>> result;
       private long timestamp;
       private String tableName;
    +  private Job job;
    +  private Path tmpDir;
    +  private Configuration conf;
     
       @BeforeClass
       public static void doSetup() throws Exception {
           Map<String,String> props = Maps.newHashMapWithExpectedSize(1);
           setUpTestDriver(new ReadOnlyProps(props.entrySet().iterator()));
       }
     
    -  @Test
    -  public void testMapReduceSnapshots() throws Exception {
    +  @Before
    --- End diff --
    
    Refactoring done to move common code to before method.


Github user karanmehta93 commented on a diff in the pull request:

    https://github.com/apache/phoenix/pull/397#discussion_r228699968
  
    --- Diff: phoenix-core/src/it/java/org/apache/phoenix/end2end/TableSnapshotReadsMapReduceIT.java ---
    @@ -191,31 +192,52 @@ private void upsertData(PreparedStatement stmt, String field1, String field2, in
         stmt.execute();
       }
     
    -  public void upsertAndSnapshot(String tableName) throws Exception {
    +  private void upsertAndSnapshot(String tableName, boolean shouldSplit) throws Exception {
         upsertData(tableName);
     
    +    TableName hbaseTableName = TableName.valueOf(tableName);
         Connection conn = DriverManager.getConnection(getUrl());
         Admin admin = conn.unwrap(PhoenixConnection.class).getQueryServices().getAdmin();
    -    admin.snapshot(SNAPSHOT_NAME, TableName.valueOf(tableName));
    -    // call flush to create new files in the region
    -    admin.flush(TableName.valueOf(tableName));
    +
    +    if (shouldSplit) {
    +      splitTableSync(admin, hbaseTableName, "BBBB".getBytes(), 2);
    +    }
    +
    +    admin.snapshot(SNAPSHOT_NAME, hbaseTableName);
     
         List<SnapshotDescription> snapshots = admin.listSnapshots();
         Assert.assertEquals(tableName, snapshots.get(0).getTable());
     
    +    // Capture the snapshot timestamp to use as SCN while reading the table later
    +    // Assigning the timestamp value here will make tests less flaky
    +    timestamp = System.currentTimeMillis();
    +
         // upsert data after snapshot
         PreparedStatement stmt = conn.prepareStatement(String.format(UPSERT, tableName));
    -    upsertData(stmt, "DDDD", "SNFB", 0004);
    +    upsertData(stmt, "DDDD", "SNFB", 45);
         conn.commit();
       }
     
    -    public void deleteSnapshot(String tableName) throws Exception {
    +  private void splitTableSync(Admin admin, TableName hbaseTableName,
    --- End diff --
    
    Didn't use the method provided in BaseTest.java since enabling/disabling the table causes the snapshot manifest file to not contain the offline regions. 
    The bug is caused because the snapshot manifest file on a regular production table can contain information about regions that are split or offline, which should ideally be ignored when restoring snapshot.


{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12945857/PHOENIX-4997.master.001.patch
  against master branch at commit 9f224a18b59fdcc323d661af3b307411c84c4a4c.
  ATTACHMENT ID: 12945857

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:red}-1 release audit{color}.  The applied patch generated 1 release audit warnings (more than the master's current 0 warnings).

    {color:red}-1 lineLengths{color}.  The patch introduces the following lines longer than 100:
    +  private void configureJob(Job job, String tableName, String inputQuery, String condition, boolean shouldSplit) throws Exception {
+                              byte[] splitPoint , int expectedRegions) throws IOException, InterruptedException {
+      logger.info("Sleeping for 1000 ms while waiting for " + hbaseTableName.getNameAsString() + " to split");
+    protected static void splitRegion(TableName fullTableName, byte[] splitPoint) throws SQLException, IOException, InterruptedException {

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
     ./phoenix-core/target/failsafe-reports/TEST-org.apache.phoenix.end2end.UpsertSelectAutoCommitIT
./phoenix-core/target/failsafe-reports/TEST-org.apache.phoenix.end2end.index.MutableIndexSplitReverseScanIT
./phoenix-core/target/failsafe-reports/TEST-org.apache.phoenix.end2end.ConcurrentMutationsIT
./phoenix-core/target/failsafe-reports/TEST-org.apache.phoenix.end2end.SystemCatalogCreationOnConnectionIT
./phoenix-core/target/failsafe-reports/TEST-org.apache.phoenix.monitoring.PhoenixMetricsIT
./phoenix-core/target/failsafe-reports/TEST-org.apache.phoenix.end2end.index.MutableIndexSplitForwardScanIT
./phoenix-core/target/failsafe-reports/TEST-org.apache.phoenix.end2end.MigrateSystemTablesToSystemNamespaceIT

Test results: https://builds.apache.org/job/PreCommit-PHOENIX-Build/2116//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-PHOENIX-Build/2116//artifact/patchprocess/patchReleaseAuditWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-PHOENIX-Build/2116//console

This message is automatically generated.

Github user karanmehta93 commented on the issue:

    https://github.com/apache/phoenix/pull/397
  
    @BinShi-SecularBird


Github user twdsilva commented on a diff in the pull request:

    https://github.com/apache/phoenix/pull/397#discussion_r229055918
  
    --- Diff: phoenix-core/src/main/java/org/apache/phoenix/iterate/MapReduceParallelScanGrouper.java ---
    @@ -80,18 +83,39 @@ public boolean shouldStartNewScan(QueryPlan plan, List<Scan> scans,
     		}
     	}
     
    +	/**
    +	 * Get list of region locations from SnapshotManifest
    +	 * BaseResultIterators assume that regions are sorted using RegionInfo.COMPARATOR
    +	 */
     	private List<HRegionLocation> getRegionLocationsFromManifest(SnapshotManifest manifest) {
     		List<SnapshotRegionManifest> regionManifests = manifest.getRegionManifests();
     		Preconditions.checkNotNull(regionManifests);
     
    -		List<HRegionLocation> regionLocations = Lists.newArrayListWithCapacity(regionManifests.size());
    +		List<RegionInfo> regionInfos = Lists.newArrayListWithCapacity(regionManifests.size());
    +		List<HRegionLocation> hRegionLocations = Lists.newArrayListWithCapacity(regionManifests.size());
     
     		for (SnapshotRegionManifest regionManifest : regionManifests) {
    -			regionLocations.add(new HRegionLocation(
    -					ProtobufUtil.toRegionInfo(regionManifest.getRegionInfo()), null));
    +			RegionInfo regionInfo = ProtobufUtil.toRegionInfo(regionManifest.getRegionInfo());
    +			if (isValidRegion(regionInfo)) {
    +				regionInfos.add(regionInfo);
    +			}
    +		}
    +
    +		regionInfos.sort(RegionInfo.COMPARATOR);
    +
    +		for (RegionInfo regionInfo : regionInfos) {
    +			hRegionLocations.add(new HRegionLocation(regionInfo, null));
     		}
     
    -		return regionLocations;
    +		return hRegionLocations;
    +	}
    +
    +	// Exclude offline split parent regions
    +	private boolean isValidRegion(RegionInfo hri) {
    --- End diff --
    
    Maybe extract this to a util since its used in two classes.


Github user twdsilva commented on a diff in the pull request:

    https://github.com/apache/phoenix/pull/397#discussion_r229057356
  
    --- Diff: phoenix-core/src/it/java/org/apache/phoenix/end2end/TableSnapshotReadsMapReduceIT.java ---
    @@ -151,13 +147,17 @@ private void configureJob(Job job, String tableName, String inputQuery, String c
           if (condition != null) {
             selectQuery.append(" WHERE " + condition);
           }
    +
           if (inputQuery == null)
             inputQuery = selectQuery.toString();
     
           ResultSet rs = DriverManager.getConnection(getUrl(), props).createStatement().executeQuery(inputQuery);
     
           for (List<Object> r : result) {
    -        assertTrue("No data stored in the table!", rs.next());
    +        if (rs.next() == false) {
    +          System.out.println("Placeholder");
    --- End diff --
    
    remove 


Github user karanmehta93 commented on a diff in the pull request:

    https://github.com/apache/phoenix/pull/397#discussion_r229061395
  
    --- Diff: phoenix-core/src/main/java/org/apache/phoenix/iterate/MapReduceParallelScanGrouper.java ---
    @@ -80,18 +83,39 @@ public boolean shouldStartNewScan(QueryPlan plan, List<Scan> scans,
     		}
     	}
     
    +	/**
    +	 * Get list of region locations from SnapshotManifest
    +	 * BaseResultIterators assume that regions are sorted using RegionInfo.COMPARATOR
    +	 */
     	private List<HRegionLocation> getRegionLocationsFromManifest(SnapshotManifest manifest) {
     		List<SnapshotRegionManifest> regionManifests = manifest.getRegionManifests();
     		Preconditions.checkNotNull(regionManifests);
     
    -		List<HRegionLocation> regionLocations = Lists.newArrayListWithCapacity(regionManifests.size());
    +		List<RegionInfo> regionInfos = Lists.newArrayListWithCapacity(regionManifests.size());
    +		List<HRegionLocation> hRegionLocations = Lists.newArrayListWithCapacity(regionManifests.size());
     
     		for (SnapshotRegionManifest regionManifest : regionManifests) {
    -			regionLocations.add(new HRegionLocation(
    -					ProtobufUtil.toRegionInfo(regionManifest.getRegionInfo()), null));
    +			RegionInfo regionInfo = ProtobufUtil.toRegionInfo(regionManifest.getRegionInfo());
    +			if (isValidRegion(regionInfo)) {
    +				regionInfos.add(regionInfo);
    +			}
    +		}
    +
    +		regionInfos.sort(RegionInfo.COMPARATOR);
    +
    +		for (RegionInfo regionInfo : regionInfos) {
    +			hRegionLocations.add(new HRegionLocation(regionInfo, null));
     		}
     
    -		return regionLocations;
    +		return hRegionLocations;
    +	}
    +
    +	// Exclude offline split parent regions
    +	private boolean isValidRegion(RegionInfo hri) {
    --- End diff --
    
    I thought about it, however they don't have any classes in common and the implementations of these methods are slightly different. I agree that this is duplicate code and should not exist this way but I couldn't think of a better way for this.


Adding few more details here for visibility. 

MapReduceParallelScanGrouper.java has a method called `getRegionLocationsFromManifest()`, which reads snapshotManifest files and determines the regions for the snapshot. However these regions may not be sorted by startKey. The consumer of this function, `getParallelScans()` expect it to be sorted. If it is not sorted, it may result in incorrect scan boundaries or overlapping scan boundaries. 

The PR also fixes the issue by first sorting the HRegionInfo before returning the list of all HRegionLocation.

Github user gjacoby126 commented on the issue:

    https://github.com/apache/phoenix/pull/397
  
    lgtm.


Github user karanmehta93 commented on the issue:

    https://github.com/apache/phoenix/pull/397
  
    Thanks @twdsilva and @gjacoby126 for the review. Will push it soon.


Committed the patch to master (5.x-HBase-2.0), 4.x-HBase-1.4, 4.x-HBase-1.3 and 4.x-HBase-1.2 branches. 

FAILURE: Integrated in Jenkins build Phoenix-4.x-HBase-1.3 #251 (See [https://builds.apache.org/job/Phoenix-4.x-HBase-1.3/251/])
PHOENIX-4997 Phoenix MR on snapshots can produce duplicate rows (karanmehta93: rev 1b2a3d5c7f25864158cd5062f2cd58d834fb5e1f)
* (edit) phoenix-core/src/it/java/org/apache/phoenix/end2end/TableSnapshotReadsMapReduceIT.java
* (edit) phoenix-core/src/main/java/org/apache/phoenix/iterate/MapReduceParallelScanGrouper.java
* (edit) phoenix-core/src/main/java/org/apache/phoenix/iterate/TableSnapshotResultIterator.java
* (edit) phoenix-core/src/test/java/org/apache/phoenix/query/BaseTest.java


Github user karanmehta93 closed the pull request at:

    https://github.com/apache/phoenix/pull/397


FAILURE: Integrated in Jenkins build PreCommit-PHOENIX-Build #2134 (See [https://builds.apache.org/job/PreCommit-PHOENIX-Build/2134/])
PHOENIX-4997 Phoenix MR on snapshots can produce duplicate rows (karanmehta93: rev c2d33ed384467fea4655e6f49ce43834f3886409)
* (edit) phoenix-core/src/main/java/org/apache/phoenix/iterate/MapReduceParallelScanGrouper.java
* (edit) phoenix-core/src/it/java/org/apache/phoenix/end2end/TableSnapshotReadsMapReduceIT.java
* (edit) phoenix-core/src/main/java/org/apache/phoenix/iterate/TableSnapshotResultIterator.java
* (edit) phoenix-core/src/test/java/org/apache/phoenix/query/BaseTest.java


FAILURE: Integrated in Jenkins build Phoenix-omid2 #147 (See [https://builds.apache.org/job/Phoenix-omid2/147/])
PHOENIX-4997 Phoenix MR on snapshots can produce duplicate rows (karanmehta93: rev 1b2a3d5c7f25864158cd5062f2cd58d834fb5e1f)
* (edit) phoenix-core/src/main/java/org/apache/phoenix/iterate/TableSnapshotResultIterator.java
* (edit) phoenix-core/src/main/java/org/apache/phoenix/iterate/MapReduceParallelScanGrouper.java
* (edit) phoenix-core/src/test/java/org/apache/phoenix/query/BaseTest.java
* (edit) phoenix-core/src/it/java/org/apache/phoenix/end2end/TableSnapshotReadsMapReduceIT.java


Bulk closing Jiras for the 4.15.0 release.

