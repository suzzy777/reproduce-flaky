This seems to be happening because guava is repackaged but the cassandra drivers aren't.

Looking at the decompiled JAR, it seems the call to mapper.saveAsync is changed to return the repackaged ListenableFuture class but, at runtime, the unchanged cassandra mapper is used, which has no clue where that class comes from...

Noting here that I agree this is good candidate for a release blocker for 2.10.0. Is it true that this affects all versions after 2.5.0?

I moved it to 2.11.0 because the current fix depends on the integration of the vendored guava dependency which happen after the 2.10.0 branch cut.

This is still broken, apparently the shadowing plugin is still rewriting the bytecode to use the vendored ListenableFuture class.
{quote}{{javap org/apache/beam/sdk/io/cassandra/CassandraServiceImpl\$MutatorImpl.class}}
{{Compiled from "CassandraServiceImpl.java"}}
{{abstract class org.apache.beam.sdk.io.cassandra.CassandraServiceImpl$MutatorImpl {}}
{{  final org.apache.beam.sdk.io.cassandra.CassandraServiceImpl this$0;}}
{{  org.apache.beam.sdk.io.cassandra.CassandraServiceImpl$MutatorImpl(org.apache.beam.sdk.io.cassandra.CassandraIO$Mutate<T>, java.util.function.BiFunction<com.datastax.driver.mapping.Mapper<T>, T, org.apache.beam.repackaged.beam_sdks_java_io_cassandra.com.google.common.util.concurrent.ListenableFuture<java.lang.Void>>, java.lang.String);}}
{{  void mutate(T) throws java.util.concurrent.ExecutionException, java.lang.InterruptedException;}}
{{  public void close() throws java.util.concurrent.ExecutionException, java.lang.InterruptedException;}}
{{}}}{quote}

What is the plan for 2.11 for this issue? Should we update the fix version?

This one is partially blocked by BEAM-6620 so better to move the fix version up.

Did https://github.com/apache/beam/pull/7957 fix this one?

No, that one was a fix only for BigTable. However BEAM-6820 introduced a new API that does not use explicitly Guava's `ListenableFuture` which was at this moment the only non vendored class used in the IO and being relocated. So this accidentally fixed this issue because the build part that was relocating does not find the Guava reference anymore then it does not rewrite the bytecode to use the repackaged version of `ListenableFuture`.

I'm still getting this - compiling the latest master:
{code:java}
Exception in thread "main" org.apache.beam.sdk.Pipeline$PipelineExecutionException: java.lang.NoSuchMethodError: com.datastax.driver.mapping.Mapper.saveAsync(Ljava/lang/Object;)Lorg/apache/beam/repackaged/beam_sdks_java_io_cassandra/com/google/common/util/concurrent/ListenableFuture;
        at org.apache.beam.runners.direct.DirectRunner$DirectPipelineResult.waitUntilFinish(DirectRunner.java:332)
        at org.apache.beam.runners.direct.DirectRunner$DirectPipelineResult.waitUntilFinish(DirectRunner.java:302)
        at org.apache.beam.runners.direct.DirectRunner.run(DirectRunner.java:197)
        at org.apache.beam.runners.direct.DirectRunner.run(DirectRunner.java:64)
        at org.apache.beam.sdk.Pipeline.run(Pipeline.java:313)
        at org.apache.beam.sdk.Pipeline.run(Pipeline.java:299)
        at org.apache.beam.examples.WriteCassandra.main(WriteCassandra.java:62)
Caused by: java.lang.NoSuchMethodError: com.datastax.driver.mapping.Mapper.saveAsync(Ljava/lang/Object;)Lorg/apache/beam/repackaged/beam_sdks_java_io_cassandra/com/google/common/util/concurrent/ListenableFuture;
        at org.apache.beam.sdk.io.cassandra.DefaultObjectMapper.saveAsync(DefaultObjectMapper.java:52)
        at org.apache.beam.sdk.io.cassandra.CassandraIO$Mutator.mutate(CassandraIO.java:1110)
        at org.apache.beam.sdk.io.cassandra.CassandraIO$WriteFn.processElement(CassandraIO.java:976)
{code}

@srfrnk thanks for confirming this. So it is not as I expected sadly. It seems that even if the IO now does not use the relocated paths, the relocation plugin is rewriting the 'Cassandra' classes.

[~kenn] is there an 'easy' way to exclude CassandraIO from relocating guava? I can try to tackle it just to get this fixed for 2.12.0 ?

I would expect overriding the shadow closure to do it, since this line would not be executed: https://github.com/apache/beam/blob/4a3cb6964c18410ad39fca00cdef06e05fa52da6/buildSrc/src/main/groovy/org/apache/beam/gradle/BeamModulePlugin.groovy#L529

Ah the problem is that it extends the DEFAULT_SHADOW_CLOSURE instead of replacing it: https://github.com/apache/beam/blob/master/sdks/java/io/cassandra/build.gradle#L21

I think we are in the state where we are ready to simply get rid of having any default shadow closure (yay!) since that is only Guava. But that change could have big effects so it is not a good choice for a cherrypick. I think just removing it from CassandraIO is OK though for the release branch.

This is fixed for the CassandraIO now, and hopefully won't happen again once BEAM-6620 is resolved.

[~srfrnk] can you please check again against Beam's master to confirm if this is finally resolved. Notice that I did check the symbols and it looks ok now.

[~iemejia] Looks like writing to Cassandra works with the latest fix in place.
Great work! Many thanks.


Thanks [~srfrnk] iti is nice to confirm that this is fixed now. I created recently also BEAM-6911 to move CassandraIO into the new Cassandra driver API that does not leak Guava in the public API, but this should keep us covered in the meantime. All kudos to [~kenn] for the fix, and hopefully for removing relocations totally soon :)

[~srfrnk] we changed our dependency management to not shade Guava. To ensure that everything works ok for you, I was wondering if you could help us test that the Cassandra module works correctly in the latest snapshots.

The good news is that {code:java}gradle -p ../beam/sdks/java/io/cassandra build{code} passes.

Sadly {code:java}gradle -p ../beam/sdks/java/io/cassandra shadowJar{code} fails. See below.
Has any related behavior changed? 'shadowJar' used to work. Do we not need that now?

{code:java}
$ gradle -p ../beam/sdks/java/io/cassandra shadowJar 
Configuration on demand is an incubating feature.

FAILURE: Build failed with an exception.

* What went wrong:
Task 'shadowJar' not found in project ':sdks:java:io:cassandra'.

* Try:
Run gradle tasks to get a list of available tasks. Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.

* Get more help at https://help.gradle.org

Deprecated Gradle features were used in this build, making it incompatible with Gradle 6.0.
Use '--warning-mode all' to show the individual deprecation warnings.
See https://docs.gradle.org/5.2.1/userguide/command_line_interface.html#sec:command_line_warnings

BUILD FAILED in 0s
{code}


Yes the change is exactly that, the removal of shadowing (shading) for most modules including Cassandra. Can you test if the locally generated jars, or even better those published in Apache snapshots (adding the -SNAPSHOT suffix) work still as intended? I am pretty sure this won't reopen this issue but better to double check. Thanks!

Good to know.
So I've rebuilt latest locally. 
Tested the generated *-SNAPSHOT Jars vs. my playground project.
Most stuff work great. My 'join-from-cassandra-to-cassandra' test fails to run.
I am not convinced it has anything to do with this issue however - so I'd mark this has fixed.
I will need to look further into why the join fails and then later test the new Jars with my real projects.
Will update here if I see anything relevant.
Thanks!

Thanks a lot for checking [~srfrnk]!

