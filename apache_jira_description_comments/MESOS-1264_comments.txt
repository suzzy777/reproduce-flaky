[~vinodkone] and [~adam-mesos], can one of you take a look here?

TL;DR: If the slave is recovering after dying, we should removeFrameworks/removeOffers, but if the slave is reregistering to the same master from the same process (ZK failover?), we probably should not removeFrameworks (sends TASK_LOST). How can the master tell which scenario it is?

Previously, this disconnect(Slave) code was only called for checkpointing slaves in Master::exited(). I pulled all of that code out and reused it at the start of Master::authenticate() to disconect an authenticating slave before re-authenticating/re-registering. The disconnect(Slave) code currently does 3 things: 1) disable the slave in the allocator so it makes no more offers, 2) remove (non-checkpointing) frameworks, which sends the TASK_LOST message you were seeing, and 3) remove all offers on that slave and have the allocator recover those resources.
1) I definitely want the slave disabled in the allocator, so that we don't offer any of this slave's resources in the middle of re-registration. It will be re-enabled once (re)registration completes.
2) Removing non-checkpointed frameworks could be unnecessary/overkill for a live re-registration, but would need to happen eventually if the re-auth/registration fails (sends ShutdownMessage, which should trigger Master::exited?). Successful re-registrations will reconcile the tasks with the slave.
3) I am less sure about removing/rescinding the slave's offers, since a launchTasks during re-registration would probably fail anyway, but the slave's actual resources could have changed between registrations. The offers are rescinded during deactivate(Framework), so maybe it should happen in disconnect(Slave) too.
I can easily make it so that only the desired steps (1 and maybe 3) happen on re-authentication, and we can hope/expect/test that failed auth/reg will clean up and send TASK_LOST correctly.

Even still, all 3 of these disconnect(Slave) steps were originally intended for checkpointing slaves. Should non-checkpointing slaves behave any differently on re-authentication/registration?
The slave authenticate()s with the master on A) recovery or B) detection of a new master (and it would only trigger disconnect when the "new" master is actually the same).
A) If the slave process did actually shutdown and a new (recovering) process is re-registering while the master thinks the old one is still active, a non-checkpointing slave would have lost all its tasks, and a checkpointing slave would have lost all tasks from non-checkpointing frameworks. So non-checkpointing slaves should send TASK_LOST for all frameworks.
B) But if the slave for some reason detected a master change to the same master (as the ReconcileIncompleteTasks does), disconnect(Slave) will be triggered, and the (non)checkpointed state should be irrelevant. In this case, the tasks are not actually lost, so sending the TASK_LOST is incorrect.
Is there a way to tell whether a re-authenticating/registering slave is the same process that was previously registered? The pid is a libprocess pid, so it should remain the same.

Fix up for review: https://reviews.apache.org/r/21017/

commit 84184f9979604a855143979a40fb8dd6b8e73d41
Author: Adam B <adam@mesosphere.io>
Date:   Fri May 2 13:40:21 2014 -0700

    Fixed slave authentication to prevent sending TASK_LOST on
    disconnection.
    
    Changed master to only remove a slave's frameworks and offers on
    exited, not on reauthenticate. Still disconnects at the allocator in
    both cases.
    
    Review: https://reviews.apache.org/r/21017


