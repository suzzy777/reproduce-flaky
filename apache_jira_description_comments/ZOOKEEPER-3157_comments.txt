[~lvfangmin] thanks for making a fix on this.

For this specific flaky test, we could either do what I suggested there (by wrapping the getData with some retry logic), or apply junit.RetryRule for this specific test case only since we know the cause and the fix should be retry anyway. I suggest we should not add junit.RetryRule to all test cases / ZKTestCase for reasons I mentioned here https://github.com/apache/zookeeper/pull/605#issuecomment-425496416.

[~lvfangmin] [~hanm]

I think I have a better approach for this, what do you think:

The problem is here:

{code:java}
        LOG.info("Restarting follower A to load snapshot");
        mt[followerA].shutdown();
        mt[followerA].start();
        QuorumPeerMainTest.waitForOne(zk[followerA], States.CONNECTED);
{code}

I believe that when the check validates the CONNECTED state, the client hasn't realised yet that the server went down and it's still connected. The check goes on and the rest is just about luck and good timing. I would add an additional check like this:

{code:java}
        LOG.info("Restarting follower A to load snapshot");
        mt[followerA].shutdown();
        QuorumPeerMainTest.waitForOne(zk[followerA], States.CONNECTING);
        mt[followerA].start();
        QuorumPeerMainTest.waitForOne(zk[followerA], States.CONNECTED);
{code}

Just to make sure that the client gets fully disconnected before restarting the follower.

Issue resolved by pull request 657
[https://github.com/apache/zookeeper/pull/657]

FAILURE: Integrated in Jenkins build ZooKeeper-trunk #223 (See [https://builds.apache.org/job/ZooKeeper-trunk/223/])
ZOOKEEPER-3157: Improve FuzzySnapshotRelatedTest to avoid flaky due to (andor: rev 00c4c11853460923bdc9f3e4618382391d7b713c)
* (edit) zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/FuzzySnapshotRelatedTest.java


