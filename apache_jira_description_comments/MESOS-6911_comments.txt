Looks like this test calls `slave->reset()` to simulate registration attempt of an agent that failed recover. This causes `~Cluster::Slave()` to be called which destroys the executor and sends an update triggering the unexpected expectation. Not sure why we don't call `slave.get()->terminate()` instead.

[~neilc] looks like you changed this from `terminate` to `reset` recently in this review: https://reviews.apache.org/r/53237/diff/3#index_header

Can you let me know why?

I made this change because I wanted to query metrics; querying {{Metrics()}} hangs if there is a slave that has been terminated but doesn't yet been destroyed (MESOS-6231). Unfortunately I can't repro the flakiness locally, but there should be a way to fix it but still query metrics -- I'll take a look.

https://reviews.apache.org/r/55437/
https://reviews.apache.org/r/55438/

commit 71d8c243648fd27ccc74798bc9238c66e7889cf0
Author: Neil Conway <neil.conway@gmail.com>
Date:   Tue Jan 17 14:28:13 2017 +0100

    Fixed flakiness in SlaveRecoveryTest.RegisterDisconnectedSlave.
    
    Review: https://reviews.apache.org/r/55438/

commit 15ca82d96e5f66a26900614cd4867ba410fa4b79
Author: Neil Conway <neil.conway@gmail.com>
Date:   Tue Jan 17 14:27:58 2017 +0100

    Cleaned up SlaveRecoveryTest.RegisterDisconnectedSlave.
    
    Review: https://reviews.apache.org/r/55437/


