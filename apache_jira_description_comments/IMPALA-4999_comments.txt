Maybe we should just delete the test. I'm not convinced it provides valuable coverage.

I saw this fail in a slightly different way:

{noformat}
 TestSpillStress.test_spill_stress[iterations: 1 | test_id: 0 | exec_option: {'disable_codegen': False, 'abort_on_error': 1, 'exec_single_node_rows_threshold': 0, 'batch_size': 0, 'num_nodes': 0} | table_format: text/none] 

self = <test_spilling.TestSpillStress object at 0x59695d0>
vector = <tests.common.test_vector.ImpalaTestVector object at 0x6661fd0>

    @pytest.mark.stress
    def test_spill_stress(self, vector):
      # Number of times to execute each query
      for i in xrange(vector.get_value('iterations')):
>       self.run_test_case('agg_stress', vector)

custom_cluster/test_spilling.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
common/impala_test_suite.py:359: in run_test_case
    result = self.__execute_query(target_impalad_client, query, user=user)
common/impala_test_suite.py:567: in __execute_query
    return impalad_client.execute(query, user=user)
common/impala_connection.py:160: in execute
    return self.__beeswax_client.execute(sql_stmt, user=user)
beeswax/impala_beeswax.py:173: in execute
    handle = self.__execute_query(query_string.strip(), user=user)
beeswax/impala_beeswax.py:339: in __execute_query
    self.wait_for_completion(handle)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.beeswax.impala_beeswax.ImpalaBeeswaxClient object at 0x59503d0>
query_handle = QueryHandle(log_context='a643ef679251bc0d:92b3014000000000', id='a643ef679251bc0d:92b3014000000000')

    def wait_for_completion(self, query_handle):
      """Given a query handle, polls the coordinator waiting for the query to complete"""
      while True:
        query_state = self.get_state(query_handle)
        # if the rpc succeeded, the output is the query state
        if query_state == self.query_states["FINISHED"]:
          break
        elif query_state == self.query_states["EXCEPTION"]:
          try:
            error_log = self.__do_rpc(
              lambda: self.imp_service.get_log(query_handle.log_context))
>           raise ImpalaBeeswaxException("Query aborted:" + error_log, None)
E           ImpalaBeeswaxException: ImpalaBeeswaxException:
E            Query aborted:
E           Cannot perform hash join at node with id 3. Repartitioning did not reduce the size of a spilled partition. Repartitioning level 6. Number of rows 1.
E           
E           
E           
E           Cannot perform hash join at node with id 3. Repartitioning did not reduce the size of a spilled partition. Repartitioning level 6. Number of rows 1.
{noformat}

[~tarmstrong] In light of this slightly different failure, and your comment above, please decide if we should keep this test and fix it, or just remove it.


IMPALA-4914,IMPALA-4999: remove flaky TestSpillStress

The test does not work as intended and would likely not provide
very good coverage of the different spilling paths, because it
only runs a single simple query. The stress test
(tests/stress/concurrent_select.py) provides much better coverage.
test_mem_usage_scaling.py probably also provides better coverage
that TestSpillStress in its current form.

Change-Id: Ie792d64dc88f682066c13e559918d72d76b31b71
Reviewed-on: http://gerrit.cloudera.org:8080/6437
Reviewed-by: Michael Brown <mikeb@cloudera.com>
Tested-by: Impala Public Jenkins
---

