[~rkanter] Do we need to support for both system property and conf property. I am not sure how many people are using HA. If there are none, we can remove system property.

We can fallback on system properties for {{oozie.http.hostname}} and  {{oozie.http.port}}, since it there from beginning. For {{oozie.instance.id}} we should only support conf property.

That's a good point.  We should try to keep this compatible.  I think we can handle this if we put properties in oozie-site/default, but if the equivalent env var is also defined, we overwrite it (i.e. env var has highest priority, then oozie-site, then oozie-default).  This should allow us to remove the env vars but still let people use them if they already have them defined.  For implementing this, I think we can just do something simple like have Services or ConfigurationService check the env vars on startup and if defined, overwrite their equivalent config properties; all of the code using these properties can then look at the Oozie config from Services.getConf() without worrying about it.  Makes sense?

Testing JIRA OOZIE-1915

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1507
.    Tests failed: 6
.    Tests errors: 2

.    The patch failed the following testcases:

.      testBundleStatusNotTransitionFromKilled(org.apache.oozie.service.TestStatusTransitService)
.      testCoordStatusTransitServiceSuspendAndResume(org.apache.oozie.service.TestStatusTransitService)
.      testResetSequence_withMultiThread(org.apache.oozie.service.TestZKUUIDService)
.      testCoordinatorActionCommandsSubmitAndStart(org.apache.oozie.sla.TestSLAEventGeneration)
.      testEngine(org.apache.oozie.command.coord.TestFutureActionsTimeOut)
.      testConcurrencyReachedAndChooseNextEligible(org.apache.oozie.service.TestCallableQueueService)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/1359/

+1. Committed to branch-4.1 and trunk. Thanks Puru.

Test Result (8 failures / +4)
org.apache.oozie.command.coord.TestCoordActionsIgnoreXCommand.testCoordActionsIgnore
org.apache.oozie.command.coord.TestFutureActionsTimeOut.testEngine
org.apache.oozie.service.TestRecoveryService.testBundleRecoveryCoordCreate
org.apache.oozie.service.TestStatusTransitService.testBundleStatusNotTransitionFromKilled
org.apache.oozie.service.TestStatusTransitService.testCoordStatusTransitServiceSuspendAndResume
org.apache.oozie.service.TestZKUUIDService.testResetSequence_withMultiThread
org.apache.oozie.service.TestCallableQueueService.testConcurrencyReachedAndChooseNextEligible
org.apache.oozie.sla.TestSLAEventGeneration.testCoordinatorActionCommandsSubmitAndStart

First three are due to OOZIE-1811 and others are flaky tests.

