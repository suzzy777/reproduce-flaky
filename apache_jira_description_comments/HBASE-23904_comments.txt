The idea is that, a RuntimeException usually means we have code bug. So here if we do think the rejection should be handled, then we can catch it explicitly?

{quote}The idea is that, a RuntimeException usually means we have code bug. So here if we do think the rejection should be handled, then we can catch it explicitly?
{quote}
Its complicated.

We can get a RuntimeException at any time and a Reject explicitly because the pool is wrongly-sized, or more likely, because the host whose Connection we are using is being shutdown. If we are trying to do meta ops at the time of shutdown, before HBASE-21789, we'd catch the Reject, convert to IOE and then the Procedure retried (and succeeded?) down the line. --The attached patch restores the old behavior which should make it so a merge/split will succeed even if Master is killed in the middle of the merge/split procedure (currently it fails w/ ugly CODE-BUG complaint).

On whether we should be catching RuntimeExceptions and converting to IOEs, thats a good question. We could stop catching them but then we'd have to handle them in callers; e.g. Procedures making meta table edits would need to handle them. A new issue to discuss how to handle this? Meantime, this patch restores old behavior and fixes a flakie test. Thanks [~zhangduo]

I think the intention here is to let the master crash soon? We used to fix a lot of problem which causes the master to hang during shutdown...

So I do not think we should let the procedures to finish when master is going to quit...

Oh cool, I've been seeing some stuff like this in tests and didn't know what was expected.

bq. The rejected exception is probably because the pool has been shutdown

Yeah, pool is TERMINATED, so it was shutdown and that process was fully completed: Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 5

bq. So I do not think we should let the procedures to finish when master is going to quit...

I agree that this is not a great default behavior if the procedures are likely going to take a while - unless you have a clear easy option of shutdown ASAP or shutdown after you have finished any outstanding work you might be chewing on that is going to take more than a fairly short time. As a user, if you were going to prevent the procedures from running and do a speedy shutdown, I wouldn't want to see anything about CODE-BUG or even an exception - just a message about how the master is shutting down and procedures have been aborted or skipped.


{quote}
just a message about how the master is shutting down and procedures have been aborted or skipped.
{quote}

This is exactly what I mean. Just catch the RejectException and wrap it as you like to terminate the master. But wrapping all RuntimeExceptione with IOException, could hide the actual "CODE BUG".

{quote}So I do not think we should let the procedures to finish when master is going to quit...
{quote}
The change does not do this. The Master shutdown is not held up. Rather, we're just making it so the Procedure fails cleanly:

 

[https://github.com/apache/hbase/blob/master/hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/MergeTableRegionsProcedure.java#L246]

 

If wanted, I could add a check that does "if Reject exception AND Connection closing, convert Reject RuntimeException to IOE" but this is snowflakey especially given all other (sync) Table calls just do Callable which under the wraps does a blanket convertion to IOE.

 

I'm good for revisiting this stuff but such a review I'd suggest we do in a new issue since it will require substantial change (currently I'm trying to fix flakies and help get the minor 2.3.0 RC ready). Thanks.

 

I filed HBASE-23910 to consider where we should be wrapping RuntimeExceptions in IOEs making RPCs.

Will push this patch since it restores the old behavior and makes us at least consistent around edits to meta by Procedures.

Pushed to branch-2 and master.

Results for branch branch-2
	[build #2518 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/branch-2/2518/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2/2518//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2/2518//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2/2518//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch master
	[build #1647 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/master/1647/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/master/1647//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/master/1647//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/master/1647//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


