Found via debugging an internal application:

# Client cancels a doGet.
# Server doesn't observe this and calls putNext. (or, the cancellation happens in between when the server calls putNext and the client cancels.)
# An ArrowMessage is created, retaining references to buffers. The references won't be cleared until {{ArrowMessage#asInputStream}} is called.
# {{ServerCallStreamObserverImpl#onNext}} finds that the call has been cancelled, _and Flight has set an onCancel handler_ in {{FlightService.GetListener.<constructor>}}. Thus, it doesn't throw, and returns early (_before_ calling {{ServerCallImpl#sendMessage}}).
# Thus, the message is never freed.

I don't particularly like this, but one way to fix this is to have GetListener retain (Java) references to ArrowMessage so it can force clean them (perhaps on a rolling basis).

cc [~jacques] 

I think a reasonable fix is to have a flag on ArrowMessage indicating whether we've transitioned ownership of the buffer to Netty/gRPC; if we send a message and the flag isn't set, then we should immediately clean up the buffers. (I'm wondering if there is a case where we transition ownership to Netty but Netty itself drops the buffers, I don't believe there is such a case.)

There are some follow up issues I want to investigate and maybe file:
 * Is DoPut susceptible to the same issue? (Probably.)
 * {{ServerStreamListener#isCancelled}} is rather useless, since gRPC actually maintains two distinct (and only somewhat correlated) flags for whether a call has been cancelled, and only the one one that isn't easily observable by application code actually matters. (Maybe this is worth filing an upstream bug, and maybe we can wrap gRPC to expose stronger semantics - but I'm not sure given the asynchronicity of gRPC.)
 * In general, we should review how we're wrapping gRPC concepts and either make precise the guarantees we provide relative to gRPC, or make sure we actually expose the full range of gRPC concepts.
 * Again, maybe we really need an async API, at least in Java; while the sync API is more convenient, it does lead to weird issues like this.

I've implemented the fix in the linked PR. I also found that DoPut could leak for different reasons (we call gRPC methods that can throw, causing us to skip cleanup), which I've fixed.

Issue resolved by pull request 6003
[https://github.com/apache/arrow/pull/6003]

This issue has been migrated to [issue #23623|https://github.com/apache/arrow/issues/23623] on GitHub. Please see the [migration documentation|https://github.com/apache/arrow/issues/14542] for further details.

