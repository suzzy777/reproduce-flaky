The issue with access to nullified log field is present at the current master branch (2.8-SNAPSHOT) not only in TcpCommunicationSpi but also in TcpDiscoveryMulticastIpFinder, see stacktraces below:
{code:java}
[2019-09-24 15:31:19,018][ERROR][sys-stripe-0-#325%worker-8%][root] Critical system error detected. Will be handled accordingly to configured handler [hnd=StopNodeOrHaltFailureHandler [tryStop=false, timeout=0, super=AbstractFailureHandler [ignoredFailureTypes=UnmodifiableSet [SYSTEM_WORKER_BLOCKED, SYSTEM_CRITICAL_OPERATION_TIMEOUT]]], failureCtx=FailureContext [type=SYSTEM_WORKER_TERMINATION, err=java.lang.NullPointerException]][2019-09-24 15:31:19,018][ERROR][sys-stripe-0-#325%worker-8%][root] Critical system error detected. Will be handled accordingly to configured handler [hnd=StopNodeOrHaltFailureHandler [tryStop=false, timeout=0, super=AbstractFailureHandler [ignoredFailureTypes=UnmodifiableSet [SYSTEM_WORKER_BLOCKED, SYSTEM_CRITICAL_OPERATION_TIMEOUT]]], failureCtx=FailureContext [type=SYSTEM_WORKER_TERMINATION, err=java.lang.NullPointerException]]
java.lang.NullPointerException
 at org.apache.ignite.spi.communication.tcp.TcpCommunicationSpi.sendMessage0(TcpCommunicationSpi.java:2821)
 at org.apache.ignite.spi.communication.tcp.TcpCommunicationSpi.sendMessage(TcpCommunicationSpi.java:2805)
 at org.apache.ignite.internal.managers.communication.GridIoManager.send(GridIoManager.java:2031)
 at org.apache.ignite.internal.managers.communication.GridIoManager.sendToGridTopic(GridIoManager.java:2128)
 at org.apache.ignite.internal.processors.cache.GridCacheIoManager.send(GridCacheIoManager.java:1257)
 at org.apache.ignite.internal.processors.cache.GridCacheIoManager.send(GridCacheIoManager.java:1296)
 at org.apache.ignite.internal.processors.cache.distributed.dht.atomic.GridDhtAtomicCache.sendDeferredUpdateResponse(GridDhtAtomicCache.java:3619)
 at org.apache.ignite.internal.processors.cache.distributed.dht.atomic.GridDhtAtomicCache.access$3300(GridDhtAtomicCache.java:142)
 at org.apache.ignite.internal.processors.cache.distributed.dht.atomic.GridDhtAtomicCache$DeferredUpdateTimeout.run(GridDhtAtomicCache.java:3865)
 at org.apache.ignite.internal.util.StripedExecutor$Stripe.body(StripedExecutor.java:550)
 at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java:120)
 at java.lang.Thread.run(Thread.java:748)
{code}
 
{code:java}
[2019-09-24 15:31:11,411][ERROR][tcp-client-disco-reconnector-#64%worker-4%][TcpDiscoverySpi] Runtime error caught during grid runnable execution: IgniteSpiThread [name=tcp-client-disco-reconnector-#64%worker-4%][2019-09-24 15:31:11,411][ERROR][tcp-client-disco-reconnector-#64%worker-4%][TcpDiscoverySpi] Runtime error caught during grid runnable execution: IgniteSpiThread [name=tcp-client-disco-reconnector-#64%worker-4%]
java.lang.NullPointerException
 at org.apache.ignite.spi.discovery.tcp.ipfinder.multicast.TcpDiscoveryMulticastIpFinder.requestAddresses(TcpDiscoveryMulticastIpFinder.java:637)
 at org.apache.ignite.spi.discovery.tcp.ipfinder.multicast.TcpDiscoveryMulticastIpFinder.getRegisteredAddresses(TcpDiscoveryMulticastIpFinder.java:392)
 at org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi.registeredAddresses(TcpDiscoverySpi.java:1944)
 at org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi.resolvedAddresses(TcpDiscoverySpi.java:1892)
 at org.apache.ignite.spi.discovery.tcp.ClientImpl.joinTopology(ClientImpl.java:562)
 at org.apache.ignite.spi.discovery.tcp.ClientImpl.access$1100(ClientImpl.java:141)
 at org.apache.ignite.spi.discovery.tcp.ClientImpl$Reconnector.body(ClientImpl.java:1523)
{code}
 

 

I see two different solutions:

1) Replace constructions
{code:java}
if (log.isDebugEnabled())
    log.debug(...);{code}
and
{code:java}
if (log.isTraceEnabled())
    log.trace(...);{code}
by wrappers similar to U.error(...) and U.warn(...), where log reference will be checked for null before access.

 

2) Prevent nullifying of log references annotated by IgniteLogger at GridResourceProcessor.cleanup() method.

First solution seems more simple to me rather than second one, so I propose use that for resolving this issue.

Thoughts?

 

 

 

{panel:title=Branch: [pull/7004/head] Base: [master] : No blockers found!|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=4722528&amp;buildTypeId=IgniteTests24Java8_RunAll]

Ultimately, I chose the second solution with leaving injected loggers non-nullified, see [PR#7004|https://github.com/apache/ignite/pull/7004].

Ticket is ready for code review.

Discussion thread on dev-list:
[Clearing of injected resources on node stop|http://apache-ignite-developers.2346864.n4.nabble.com/Clearing-of-injected-resources-on-node-stop-td44159.html]

{panel:title=Branch: [pull/7004/head] Base: [master] : Possible Blockers (510)|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1}
{color:#d04437}Platform C++ (Linux)*{color} [[tests 505 JVM CRASH , Exit Code |https://ci.ignite.apache.org/viewLog.html?buildId=4725458]]
* IgniteOdbcTest: SqlNumericFunctionTestSuite: TestNumericFunctionFloor - Test has low fail rate in base branch 0,0% and is not flaky
* IgniteOdbcTest: TransactionTestSuite: TransactionVersionMismatchError - Test has low fail rate in base branch 0,0% and is not flaky
* IgniteOdbcTest: SqlNumericFunctionTestSuite: TestNumericFunctionLog - Test has low fail rate in base branch 0,0% and is not flaky
* IgniteOdbcTest: SqlDateTimeFunctionTestSuite: TestCurrentDate - Test has low fail rate in base branch 0,0% and is not flaky
* IgniteCoreTest: CacheQueryTestSuite: TestFieldsQueryByteArrayInsertSelect - Test has low fail rate in base branch 0,0% and is not flaky
* IgniteCoreTest: ContinuousQueryTestSuite: TestBasic - Test has low fail rate in base branch 0,0% and is not flaky
* IgniteCoreTest: ContinuousQueryTestSuite: TestInitialQueryScan - Test has low fail rate in base branch 0,0% and is not flaky
* IgniteOdbcTest: ApiRobustnessTestSuite: TestSQLGetStmtAttr - Test has low fail rate in base branch 0,0% and is not flaky
* IgniteOdbcTest: StreamingTestSuite: TestStreamingManyObjects - Test has low fail rate in base branch 0,0% and is not flaky
* IgniteCoreTest: ContinuousQueryTestSuite: TestInitialQuerySql - Test has low fail rate in base branch 0,0% and is not flaky
* IgniteThinClientTest: AuthTestSuite: AuthSuccess - Test has low fail rate in base branch 0,0% and is not flaky
... and 494 tests blockers

{color:#d04437}SPI{color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=4725449]]
* IgniteSpiTestSuite: GridTcpCommunicationSpiSslSelfTest.testSendToManyNodes - Test has low fail rate in base branch 0,0% and is not flaky

{color:#d04437}Cache 2{color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=4725483]]
* IgniteCacheTestSuite2: GridNearCacheStoreUpdateTest.testOptimisticSerializableUpdateNear - Test has low fail rate in base branch 0,0% and is not flaky

{color:#d04437}ZooKeeper (Discovery) 4{color} [[tests 2|https://ci.ignite.apache.org/viewLog.html?buildId=4725512]]
* ZookeeperDiscoverySpiTestSuite4: DistributedMetaStoragePersistentTest.testUnstableTopology - Test has low fail rate in base branch 0,0% and is not flaky
* ZookeeperDiscoverySpiTestSuite4: DistributedMetaStoragePersistentTest.testDeactivateActivate - Test has low fail rate in base branch 0,0% and is not flaky

{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=4725533&amp;buildTypeId=IgniteTests24Java8_RunAll]

{panel:title=Branch: [pull/7004/head] Base: [master] : No blockers found!|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=4731332&amp;buildTypeId=IgniteTests24Java8_RunAll]

