The failure was seen on java 11

Hi [~dcapwell],

Just to confirm, this was tested only with 11 or it is not an issue with 8?

My experience is primarily with v8 but I can give it a try. 

The tests run against 8 and 11 and the first failure I saw was 11; ill double check to see if I can find it failing on java 8

I have yet to see it fail on java 8; all failures were java 11.

Alright, thanks for checking. I will work on this probably tomorrow morning.

100 times it passed successfully so I am not really able to reproduce the issue easily and go through everything with the debugger... Attaching the log.

do you run the single test or the whole class?  

Best way to simulate CI is as follows

{code}
CASSANDRA_USE_JDK11=true ant testclasslist -Dtest.classlistfile=<(echo org/apache/cassandra/index/sasi/SASIIndexTest.java) -Dtest.classlistprefix=unit
{code}

I ran the following and got a failure locally on my Mac (different test case, same class)

{code}
$ while true; do CASSANDRA_USE_JDK11=true ant testclasslist -Dtest.classlistfile=<(echo org/apache/cassandra/index/sasi/SASIIndexTest.java) -Dtest.classlistprefix=unit; done;
...
[junit-timeout] Testsuite: org.apache.cassandra.index.sasi.SASIIndexTest
[junit-timeout] Testsuite: org.apache.cassandra.index.sasi.SASIIndexTest Tests run: 32, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 11.27 sec
[junit-timeout]
[junit-timeout] Testcase: testConcurrentMemtableReadsAndWrites(org.apache.cassandra.index.sasi.SASIIndexTest):  FAILED
[junit-timeout] null
[junit-timeout] junit.framework.AssertionFailedError
[junit-timeout]         at org.apache.cassandra.index.sasi.utils.RangeIterator.<init>(RangeIterator.java:46)
[junit-timeout]         at org.apache.cassandra.index.sasi.memory.KeyRangeIterator.<init>(KeyRangeIterator.java:42)
[junit-timeout]         at org.apache.cassandra.index.sasi.memory.TrieMemIndex$ConcurrentTrie.search(TrieMemIndex.java:150)
[junit-timeout]         at org.apache.cassandra.index.sasi.memory.TrieMemIndex.search(TrieMemIndex.java:102)
[junit-timeout]         at org.apache.cassandra.index.sasi.memory.IndexMemtable.search(IndexMemtable.java:70)
[junit-timeout]         at org.apache.cassandra.index.sasi.conf.ColumnIndex.searchMemtable(ColumnIndex.java:138)
[junit-timeout]         at org.apache.cassandra.index.sasi.TermIterator.build(TermIterator.java:91)
[junit-timeout]         at org.apache.cassandra.index.sasi.plan.QueryController.getIndexes(QueryController.java:145)
[junit-timeout]         at org.apache.cassandra.index.sasi.plan.Operation$Builder.complete(Operation.java:434)
[junit-timeout]         at org.apache.cassandra.index.sasi.plan.QueryPlan.analyze(QueryPlan.java:57)
[junit-timeout]         at org.apache.cassandra.index.sasi.plan.QueryPlan.execute(QueryPlan.java:68)
[junit-timeout]         at org.apache.cassandra.index.sasi.SASIIndex.lambda$searcherFor$2(SASIIndex.java:301)
[junit-timeout]         at org.apache.cassandra.db.ReadCommand.executeLocally(ReadCommand.java:455)
[junit-timeout]         at org.apache.cassandra.index.sasi.SASIIndexTest.getIndexed(SASIIndexTest.java:2576)
[junit-timeout]         at org.apache.cassandra.index.sasi.SASIIndexTest.getPaged(SASIIndexTest.java:2537)
[junit-timeout]         at org.apache.cassandra.index.sasi.SASIIndexTest.testConcurrentMemtableReadsAndWrites(SASIIndexTest.java:1108)
[junit-timeout]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[junit-timeout]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[junit-timeout]         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[junit-timeout]
[junit-timeout]
[junit-timeout] Test org.apache.cassandra.index.sasi.SASIIndexTest FAILED
{code}

May be possible that one test is flaky and corrupts the other tests

Linked the 2 other JIRAs for this class.  Looking at the history all 3 fail together but out of a hand full of runs on my laptop only testConcurrentMemtableReadsAndWrites failed; it may be possible that testConcurrentMemtableReadsAndWrites is flaky and corrupts the other two some times?

Good point, I was running just the single test locally on my Mac. 

Thanks

Pretty weird, I run it already 40-50 minutes the same way as you 1:1 and there are still no failures.... 

One run takes around 20 seconds so this means around 150 successful runs of all the tests in the class

I left it running in the background , just checked again..... still no failures after three hours running. 

So you don't see any test fail I take it?  [~jrwest] is looking at the other ticket and just reported he was able to reproduce https://issues.apache.org/jira/browse/CASSANDRA-15526?focusedCommentId=17031111&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17031111

Fun...

No, no failures, everything works like a charm!

I am gonna check what he said, this got me really curious what is going on here...

 

 

[~e.dimitrova] it took me 40-50 runs to reproduce -- running the command [~dcapwell] shared above. 

Weird, I ran it for three hours, the same command he shared. This is around 180*3 runs, if we consider every run 20 seconds. No failures. 

Last update: Running  testConcurrentMemtableReadsAndWrites on ubuntu VM reproduced the failure immediately...

 

YES! IM NOT CRAZY! =D

No, definitely not, I heard such issues happen a lot, unfortunately. 

Now the thing is that only that one I can reproduce, the other two not. So I guess your theory might prove correct and it is good to first start from our main contributor of troubles - 
testConcurrentMemtableReadsAndWrites

[~dcapwell] As it looks like this one is dependent on  CASSANDRA-15526

(You reproduce it in case the other one fails and for me only the other one fails, only on Ubuntu VM so ),

I am gonna put this one for now as blocked by the other one until we come up with solution there. Then we can check whether our assumption for dependency is valid. About CASSANDRA-15526, I didn't find any other issue than the one mentioned already by [~jrwest]

As per the Java doc:

"Beware that, unlike in most collections, the {{size}} method is _not_ a constant-time operation. Because of the asynchronous nature of these sets, determining the current number of elements requires a traversal of the elements, and so may report inaccurate results if this collection is modified during traversal."

Probably we will need to find a more reliable test. TBD

 

 

bq. I am gonna put this one for now as blocked by the other one until we come up with solution there.

+1

[~e.dimitrova] I believe this has the same root cause as CASSANDRA-15528. I just submitted a patch for that and added some reproduction steps, you may want to see if that applies here too.

Thank you [~gianluca]
Indeed, it solves this one too. 
I will close the ticket as soon as the other two are committed.

Fixed in 15526 and 15528

