-6 means NotEnoughBookiesException. Did you have any other log statements about the bookie failure, which causes not enough bookies.

BTW, I am assuming 'fail()' of a unit test would stop the process, not sure why it doesn't quit.

fail() only works if it's called in the junit thread. In this case it'll be run by the bookkeeper callback thread. These calls to fail are all broken, and need to be rejigged. It would be interesting to see why there aren't enough bookies though.

ah, got it. thanks Ivan for explanation.

when we cannot get enough bookies, the operation about add entry will throw exception, then 'fail()' will be called, the callback function will be done. So, the 'counter' cannot be increment, that cause the while loop enter endless loop.

we must guarantee the test case will be end although we cannot get enough bookies.

The question here is, why there are bookie failures inside?
Any logs regarding to that failures?

BTW, if you are running it throw eclipse, you just add the below property in eclipse src/test/resource/log4j.properties file. So, that logs will come on eclipse console.

log4j.rootLogger=TRACE, CONSOLE, ROLLINGFILE, TRACEFILE

Instead of using some syncCounter and increment on each entry write callback, if we use ContDownLatch and set the wait timeout, then test will fail if we are not getting the response in time as well right?

or, change it to timed waits and add assertion as expected after that to ensure, loop exited only after counter reaches expected entries, otherwise assertion will fail.
But we have to figure out why there are Bookie failure in your tests.

[~umamahesh] How about using junit test timeouts @Test(timeout=X)? 

The warn log show that may be ReadTimeOutException, I am looking the reason why could not connect bookkeeper server frequently? 

/**
* the partial log information about the error
*/
WARN  - [Hashed wheel timer #4:PerChannelBookieClient@488] - Couldn't connect to bookkeeper server
     org.jboss.netty.handler.timeout.ReadTimeoutException
	at org.jboss.netty.handler.timeout.ReadTimeoutHandler.<clinit>(ReadTimeoutHandler.java:84)
	at org.apache.bookkeeper.proto.PerChannelBookieClient.getPipeline(PerChannelBookieClient.java:450)
	at org.jboss.netty.bootstrap.ClientBootstrap.connect(ClientBootstrap.java:212)
	at org.jboss.netty.bootstrap.ClientBootstrap.connect(ClientBootstrap.java:188)
	at org.apache.bookkeeper.proto.PerChannelBookieClient.connect(PerChannelBookieClient.java:135)
	at org.apache.bookkeeper.proto.PerChannelBookieClient.connectIfNeededAndDoOp(PerChannelBookieClient.java:203)
	at org.apache.bookkeeper.proto.BookieClient.addEntry(BookieClient.java:108)
	at org.apache.bookkeeper.client.PendingAddOp.sendWriteRequest(PendingAddOp.java:76)
	at org.apache.bookkeeper.client.PendingAddOp.initiate(PendingAddOp.java:117)
	at org.apache.bookkeeper.client.LedgerHandle$2.safeRun(LedgerHandle.java:539)
	at org.apache.bookkeeper.util.SafeRunnable.run(SafeRunnable.java:31)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)


Can do it. That will be one good practice, to ensure no tests will block due to flaky behaviours in tests. I used to follow in my tests, ex: see zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java
At the same time, we should not depend 100% depend on that, untill unless we don't have option for proper assertion. Otherwise we may loose the track where we exactly test hanged. If we have an option to track that, we can assert and throw out with the problem.

{noformat}
testOpenException                        =11.381s
testStreamingClients                     =9.793s
testReadWriteAsyncSingleClient           =7.660s
testReadWriteRangeAsyncSingleClient      =6.944s
testReadWriteAsyncSingleClientThrottle   =94.505s
testSyncReadAsyncWriteStringsSingleClient=10.330s
testReadWriteSyncSingleClient            =57.973s
testReadWriteZero                        =75.294s
testMultiLedger                          =128.302s
testReadWriteAsyncLength                 =6.218s
testShutdown                             =899.927s
testReadFromOpenLedger                   =32.631s
testReadFromOpenLedgerOpenOnce           =13.526s
testReadFromOpenLedgerZeroAndOne         =2.478s
testLastConfirmedAdd                     =67.694s
{noformat}

Here is the info ragarding time taken by each test in my local env.

Removed fail() calls from callbacks as they do nothing there.

the new patch looks good for me. +1

resubmit the patch to trigger pre-commit job.

Jenkins has been down for a couple of days, I've run manually with bin/test-patch --jira=BOOKKEEPER-408 --reset-scm and it comes out clean. Committing

Committed as r1421401. Thanks for reviewing Sijie.

Integrated in bookkeeper-trunk #860 (See [https://builds.apache.org/job/bookkeeper-trunk/860/])
    BOOKKEEPER-408: BookieReadWriteTest will enter the endless loop and will not leave out (ivank) (Revision 1421401)

     Result = FAILURE
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java


Good revision. I find the BookieWriteLedgerTest also has the problem. Maybe another jira is needed to clean all the problems.

The source code:
    @Override
    public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {
        if (rc != BKException.Code.OK)
            fail("Return code is not OK: " + rc);

BookieFailureTest also has same problem.

like this:
    public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {
        if (rc != 0)
            fail("Failed to write entry: " + entryId);
        SyncObj x = (SyncObj) ctx;
        synchronized (x) {
            x.counter++;
            x.notify();
        }
    }

Do you mind rising a separate JIRA as this is already closed? Thanks for noticing them.

@[~umamaheswararao], I don't know whether it is necessary to do this, cause there are many jiras like this, as BOOKKEEPER-523.
Anyway, using the 'Junit Assert' in callback is not a good way. It must be revised through all the test project. The jira is created as BOOKKEEPER-525.

