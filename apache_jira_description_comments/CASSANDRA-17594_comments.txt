will linke CI after lunch

You might want to rebase before submitting it :) Mick just made final CI changes after the branching so things should be fine now but... please, rebase :) 

thanks, rebased and kicked off CI

this patch seems to cause some repair tests to fail, so will look closer into that (juggling things, so will do tomorrow)

fun, if I revert conftest.py I see it logs that there were errors in the log, but the test is marked as success... so by fixing conftest.py I now cause the tests to fail !

yay?

{code}
18:39:33,839 repair_tests.repair_test DEBUG Killed node3, now waiting repair to finish
PASSED                                                                                                                                                                                                   [100%]
---------------------------------------------------------------------------------------------- live log teardown -----------------------------------------------------------------------------------------------
18:39:33,859 conftest ERROR Unexpected error in node1 log, error:
'ERROR [Repair#1:1] 2022-05-04 18:39:20,930 JVMStabilityInspector.java:68 - Exception in thread Thread[Repair#1:1,5,Repair#1]\norg.apache.cassandra.repair.SomeRepairFailedException: null'


-------------------------------------------------------------------------- generated xml file: /parallel-ci/output/pytest_result.xml ---------------------------------------------------------------------------
========================================================================================== 1 passed in 87.70 seconds ===========================================================================================
bash-4.2$
{code}

To be more clear, this is the bug with conftest.py 

* error is non-empty, so we validate its not "" and re-add to errors array
* we then "break" but this doesn't take us out of the top loop, but just the inner loop; if error is size 2, we only look at the first error
* we *override* error with next node, which has 0 errors
* we see errors is empty, so mark test success

so I will fix this, just need to update each test to include the new errors being detected

+1

[~e.dimitrova] found this doesn't catch all cases, so reopening

Can checkout CI status at
        https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci/python-dtest_CASSANDRA-17594_attempt_2_cassandra-3.0&filter=all
        https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci/python-dtest_CASSANDRA-17594_attempt_2_cassandra-3.11&filter=all
        https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci/python-dtest_CASSANDRA-17594_attempt_2_cassandra-4.0&filter=all
        https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci/python-dtest_CASSANDRA-17594_attempt_2_cassandra-4.1&filter=all
        https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci/python-dtest_CASSANDRA-17594_attempt_2_trunk&filter=all

A few issues are showing up, and just hiding the logs isn't a solution as they show real bugs...

{code}
ERROR [RepairJobTask:2] 2022-05-06 17:20:15,757 SystemDistributedKeyspace.java:222 - Error executing query UPDATE system_distributed.repair_history SET status = 'FAILED', finished_at = toTimestamp(now()), exception_message=?, exception_stacktrace=? WHERE keyspace_name = 'keyspace1' AND columnfamily_name = 'standard1' AND id = c3ff84a0-cd60-11ec-8ac5-4b7fd7730840
java.lang.AssertionError: java.lang.InterruptedException
  at org.apache.cassandra.net.OutboundTcpConnection.enqueue(OutboundTcpConnection.java:187)
  at org.apache.cassandra.net.MessagingService.sendOneWay(MessagingService.java:794)
  at org.apache.cassandra.net.MessagingService.sendRR(MessagingService.java:756)
  at org.apache.cassandra.service.StorageProxy.sendToHintedEndpoints(StorageProxy.java:1314)
  at org.apache.cassandra.service.StorageProxy$2.apply(StorageProxy.java:137)
  at org.apache.cassandra.service.StorageProxy.performWrite(StorageProxy.java:1151)
  at org.apache.cassandra.service.StorageProxy.mutate(StorageProxy.java:710)
  at org.apache.cassandra.service.StorageProxy.mutateWithTriggers(StorageProxy.java:931)
  at org.apache.cassandra.cql3.statements.ModificationStatement.executeWithoutCondition(ModificationStatement.java:434)
  at org.apache.cassandra.cql3.statements.ModificationStatement.execute(ModificationStatement.java:420)
  at org.apache.cassandra.cql3.QueryProcessor.processStatement(QueryProcessor.java:219)
  at org.apache.cassandra.cql3.QueryProcessor.process(QueryProcessor.java:250)
  at org.apache.cassandra.cql3.QueryProcessor.process(QueryProcessor.java:265)
  at org.apache.cassandra.repair.SystemDistributedKeyspace.processSilent(SystemDistributedKeyspace.java:218)
  at org.apache.cassandra.repair.SystemDistributedKeyspace.failedRepairJob(SystemDistributedKeyspace.java:206)
  at org.apache.cassandra.repair.RepairJob$3.onFailure(RepairJob.java:132)
  at com.google.common.util.concurrent.Futures$6.run(Futures.java:1313)
  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
  at org.apache.cassandra.concurrent.NamedThreadFactory.lambda$threadLocalDeallocator$0(NamedThreadFactory.java:83)
  at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException: null
  at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireInterruptibly(AbstractQueuedSynchronizer.java:1220)
  at java.util.concurrent.locks.ReentrantLock.lockInterruptibly(ReentrantLock.java:335)
  at java.util.concurrent.LinkedBlockingQueue.put(LinkedBlockingQueue.java:339)
  at org.apache.cassandra.net.OutboundTcpConnection.enqueue(OutboundTcpConnection.java:183)
  ... 20 common frames omitted
{code}

I know [~maedhroz] was looking at this a while back, but repair interrupts and read/write path assumes we don't do that, which can cause issues... so we should avoid interrupting. 

{code}
WARN  [epollEventLoopGroup-2-14] 2022-05-06 17:15:19,006 NoSpamLogger.java:94 - Protocol exception with client networking: org.apache.cassandra.transport.ProtocolException: Invalid or unsupported protocol version (5); the lowest supported version is 3 and the greatest is 4
{code}

the code requests v4 and attempts to connect to node1... yet node2 sees a connection of v5... I can't explain this one yet so not sure if python-dtest or python-driver related. 

the first issue is CASSANDRA-17466, which is fixed in 4.x but not 3.x... so guess we can ignore in 3.x...

Spoke to [~samt] and seems the below error is expected behavior

{code}
[node1] 'WARN  [epollEventLoopGroup-2-7] 2022-05-16 19:59:46,595 NoSpamLogger.java:94 - Protocol exception with client networking: org.apache.cassandra.transport.ProtocolException: Invalid or unsupported protocol version (5); the lowest supported version is 3 and the greatest is 4'
{code}

so will need to include that in the global list...

DSE_V1 and V2 were also found; so added to the allow list

3.0 is green

4.0 is green

4.1 is green

trunk is green

3.11 has an issue with beta version which wasn't getting ignored with my patch, working on it

3.11 is yellow... python-dtest is green, but upgrade had failures.  Since this core logic is on shutdown log detection, non failed due to that so calling it green.

+1

Can you post the CI runs, please?

Also, thanks for fixing Travis formatting. The build is no kicking it. Not sure why sometimes it happens but I ran all checks and tests locally and I can confirm that they pass with the latest patches.

What is the reason for not fixing in 3.x and considering it is fine to ignore the error msgs for CASSANDRA-17466?

Also, not sure about the other two repair tests, if you can provide a bit of background info, please. Thanks!

CI runs are

https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci/python-dtest_CASSANDRA-17594_attempt_2_cassandra-3.0&filter=all
https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci/python-dtest_CASSANDRA-17594_attempt_2_cassandra-3.11&filter=all
https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci/python-dtest_CASSANDRA-17594_attempt_2_cassandra-4.0&filter=all
https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci/python-dtest_CASSANDRA-17594_attempt_2_cassandra-4.1&filter=all
https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=ci/python-dtest_CASSANDRA-17594_attempt_2_trunk&filter=all

bq. What is the reason for not fixing in 3.x and considering it is fine to ignore the error msgs for CASSANDRA-17466?

Because back porting that fix to 3.x would be its own effort, so I felt it was out of scope for this ticket.  That behavior has been around for a long time so if you were bitten by it... upgrade to 4.0? =D

Replied in PR for the repair tests

{code}
This is the log we generate when we skip repair due to no data (or no tables, etc.); this test does *not* write data, so skipping repair is the expected behavior
{code}

{quote}CI runs are
{quote}
Thanks! I think we miss only the python upgrade tests for 3.0
{quote}Because back porting that fix to 3.x would be its own effort, so I felt it was out of scope for this ticket. That behavior has been around for a long time so if you were bitten by it... upgrade to 4.0? =D
{quote}
While we often agree to not backport something, I am not sure that is what the community wants here? If we are going to silently ignore this bug in our tests, I would like to see some visibility and common agreement on that.

My concerns – the original ticket is critical and mentions the bug affects availability but it doesn't even mention that the issue exists on previous versions. It is said it is there since 4.0? While I absolutely do not expect fixing the problem or porting the patch here as part of this ticket, I am not sure we should just decide to silence it. Probably [~maedhroz] can comment better as the person most familiar with that problem. 

bq. so if you were bitten by it... upgrade to 4.0?

3.0 and 3.11 are supported for another year, so I'm not sure we can suggest upgrading to get around bugs if this happens.

Also, why is it fine to exclude errors by default and not on per case basis? Why do DSE popped up? I think I have to do one more pass on this tomorrow carefully.

And again, if the original patch exposed more unrelated bugs, I don’t expect all of them to be fixed in one ticket. If additional tickets are needed and more work and attention - I am fine with that. 

bq. Also, why is it fine to exclude errors by default and not on per case basis?

Some errors are generic and can happen in 100% of tests, such as connection shutdown early; we would need to update 100% of tests to include this default list

bq. Why do DSE popped up? 

I wasn't 100% sure of this as well, was confusing why it wasn't more present...

Talked with [~samt] and client protocol negotiation uses highest version it knows and moves down the list until server stops rejecting, in python driver the "highest" versions are DSE_v2 then V1 (linked source but linter got made, so gave all parts needed to get the link <_<...

What I couldn't figure out was why was it only 2 tests that hit DSE and the rest were complaining about v5?

Missed that CASSANDRA-17466 did close SSTables, thought it just interrupted queries... yeah, its a bad bug that prob should be back ported; should I remove that restriction in the patch and leave it flaky for 3.x?

I can create another ticket to backport CASSANDRA-17466 and leave it flaky in this patch; [~e.dimitrova] [~brandon.williams] works for you?

{quote}Some errors are generic
{quote}
I want to be sure that there is no case when they might be actually useful. 
{quote}What I couldn't figure out was why was it only 2 tests that hit DSE and the rest were complaining about v5?
{quote}
Can you try to verify this one, please?
{quote}should I remove that restriction in the patch and leave it flaky for 3.x?
{quote}
I personally think that opening a new separate ticket and not silencing those is the right thing to do.

Unfortunately, I will be off until Thursday, so I don't mind if someone takes over the review of this one in the meantime and a patch gets merged when everything is confirmed and ready. I don't want to block it. But I do have concerns and we need to be very, very careful with all errors we silence, especially when it is done broadly. I am -1 on silencing 17466, +0 on the rest as it needs confirmations. Not blocking, but want to be verified very carefully.

reverted and will open a new ticket to backport to 3.0

Created CASSANDRA-17648 to backport

That works for me, thanks.

PR is ready to review; [~jonmeredith] is looking now

+1 - it's hard to tell how the dtest runs really went after time/changes, but I think it's good. Will double-check Jenkins once this merges.

latest commit

{code}
commit 7bc8467233af69391efeaf74ef87a73c0ea9ceb1 (HEAD -> trunk, upstream/trunk)
Author: David Capwell <dcapwell@gmail.com>
Date:   Wed Jun 1 10:57:09 2022 -0700

    Fix flaky python-tests due to connection getting closed
    Patch by David Capwell; reviewed by Caleb Rackliffe for CASSANDRA-17594
{code}

