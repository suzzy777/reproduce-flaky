Changes are for counter updating and for increasing number of threads in threadpool. 

Merging all partitions at the time of close() is very expensive currently depending on the number of partitions and spills (e.g for 20 spills with 1009 partitions, it ends up reopening the file lots of times). And reading/decompressing/appending/compressing data to final file. Haven't considered optimizing this.

Unordered*Writer was honoring pipelinedshuffle earlier. It is possible that pipelined shuffle is disabled as the config is common for sorted/unsorted outputs. However, in the case of unordered*writer, {{TEZ_RUNTIME_ENABLE_FINAL_MERGE_IN_OUTPUT}} can be considered as well for disabling final merge. Addressed this in the current patch. 

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12862245/TEZ-3680.2.patch
  against master revision 04f0c76.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/2367//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/2367//console

This message is automatically generated.

On using finalMergeEnabled for PipelinedShuffle - With the change, it serves the same purpose as PipelinedShuffle. Think it is better to handle this properly in a separate jira, where EnbaleFinalMerge=false + pipelined=false means "Send N events at the end", instead of sending them when they are generated.

numThreads: Assuming you are trying this out with multiple buffers. Instead of a FixedThreadPool - this could be a CachedPool, for cases where multiple buffers are not created / the spill from a single thread is fast enough.

counter and notifyProgress - It may be a little too infrequent now. Maybe this should be per N records instead of per buffer. Also the notify per partition (not in the tight loop), and the notify in the final Merge, likely needs to be more often. Can't have a disk write cause a timeout, or the final merge cause a timeout.

Thanks [~sseth]. 

1.  Removed finalMergeEnabled changes. Will create separate ticket for that.
2. numThreads: Changed to cachedThreadPool.
3. counter/notifyProgress: Made it to update at every partition level. This would  be at partition level now, which still reduces the number of calls by a factor of 1009 in cases where partitions are higher.  Reason for not going with the number of records is that, we do not know the size of every record that would fit in the buffer.

SpillCallable does not notify per partition - is this required? (during the last spill?)
newCachedPool - a cached pool should be ok here, correct? since we don't expect too many buffers to be used. (Was thinking ThreadPool with min/max in the last comment, but i think cachedPool will work in this case)

In terms of the notify after N records, don't think buffer size should affect that. In fact buffer size being large, with small records, can lead to infrequent notifications, which can cause timeouts. Afaik. PIG relies on these notifications for timeouts.

+1, after addressing these comments.


{color:red}-1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12862431/TEZ-3680.3.patch
  against master revision 04f0c76.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/2368//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/2368//console

This message is automatically generated.

SpillCallable does not notify per partition - is this required? (during the last spill?)
- This is not needed, as it notifies immediately after scheduling.  Even if it does not spill, it ends up notifying once during close.

newCachedPool - a cached pool should be ok here, correct? since we don't expect too many buffers to be used. (Was thinking ThreadPool with min/max in the last comment, but i think cachedPool will work in this case)
- cached thread pool has unbounded threads. But this is in the scenario where users are not going to creates 1000s of buffers. But replaced with "ThreadPoolExecutor" with min/max which is used by cachedThreadPool internally.

In terms of the notify after N records, don't think buffer size should affect that. In fact buffer size being large, with small records, can lead to infrequent notifications, which can cause timeouts. Afaik. PIG relies on these notifications for timeouts.
+1, after addressing these comments.
- Added notification for every 1000 records.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12862439/TEZ-3680.4.patch
  against master revision 04f0c76.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/2369//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/2369//console

This message is automatically generated.

Moved "getSpillPathDetails" inside the {{SpillCallable::callInteral}}.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12863204/TEZ-3680.5.patch
  against master revision f355a05.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in :
                   org.apache.tez.runtime.library.common.writers.TestUnorderedPartitionedKVWriter

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/2373//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/2373//console

This message is automatically generated.

+1, after the test fix.

Reverting the change for "getSpillPathDetails". Patch is same as 0.4. Will commit it once jenkin passes.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12863957/TEZ-3680.6.patch
  against master revision f355a05.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in :
                   org.apache.tez.runtime.library.common.writers.TestUnorderedPartitionedKVWriter

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/2374//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/2374//console

This message is automatically generated.

Without the getSpillPathDetails move to callInternal, the move into constructor changes are extra. The older code was simpler, that it happens right there. Is the plan to move it later? Else does it make sense to revert those changes to the earlier version?

I agree. There is some flakiness in the test for spills. Same test works fine in the current environment and fails in jenkins. Will debug more on the reason for flakiness.

TezCounter is not threadsafe and updating this from multiple threads in SpillCallable caused the flakiness in the test. Thanks [~harishjp] for checking this. Incrementing it in sync block in SpillCallable for writing every partition in latest patch.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12864206/TEZ-3680.7.patch
  against master revision fb0e45b.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in :
                   org.apache.tez.dag.app.rm.TestTaskSchedulerManager

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/2383//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/2383//console

This message is automatically generated.

TestTaskSchedulerManager failure reported is due to timeout issue. Will commit shortly .7 patch to master. 

Committed to master. Thanks [~sseth],  [~harishjp]
>>
commit cadf31b5e21fd824c53ccfa74ac97eb8aff508b9
>>

The following tests fail intermittently on ppc64le and x86 platform since TEZ-3680.
- org.apache.tez.runtime.library.common.writers.TestUnorderedPartitionedKVWriter.testMultipleSpills_WithPipelinedShuffle
- org.apache.tez.runtime.library.common.writers.TestUnorderedPartitionedKVWriter.testMergeBuffersAndSpill
The error message is as follows:
{code:borderStyle=solid}
java.util.concurrent.RejectedExecutionException: Task com.google.common.util.concurrent.ListenableFutureTask@272aa26f rejected from java.util.concurrent.ThreadPoolExecutor@5c508ec9[Running, pool size = 2, active threads = 2, queued tasks = 0, completed tasks = 1]
	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2047)
	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:823)
	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1369)
	at com.google.common.util.concurrent.MoreExecutors$ListeningDecorator.execute(MoreExecutors.java:440)
	at com.google.common.util.concurrent.AbstractListeningExecutorService.submit(AbstractListeningExecutorService.java:56)
	at org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter.setupNextBuffer(UnorderedPartitionedKVWriter.java:431)
	at org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter.write(UnorderedPartitionedKVWriter.java:378)
	at org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter.write(UnorderedPartitionedKVWriter.java:329)
	at org.apache.tez.runtime.library.common.writers.TestUnorderedPartitionedKVWriter.baseTestWithPipelinedTransfer(TestUnorderedPartitionedKVWriter.java:629)
	at org.apache.tez.runtime.library.common.writers.TestUnorderedPartitionedKVWriter.testMultipleSpills_WithPipelinedShuffle(TestUnorderedPartitionedKVWriter.java:565)
{code}
Any update on this issue?

https://issues.apache.org/jira/browse/TEZ-3701 address this.

Thank you [~rajesh.balamohan].

