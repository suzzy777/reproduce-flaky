Pushed the attached patch to branch-2 only.

Leaving open for now.... Will probably revert in morning.

Couple of minor comments.., I think we can add a check in the beginning for the following block..

if (master.isStopped() || master.isStopping()) return false..

{code}
   ServerManager sm = master.getServerManager();
100	    if (sm == null) {
101	      LOG.debug("ServerManager is null; stopping={}", master.isStopping());
102	      return false;
103	    }
104	    sm.registerListener(this);
105	    ProcedureExecutor<MasterProcedureEnv> pe = master.getMasterProcedureExecutor();
106	    if (pe == null) {
107	      LOG.debug("ProcedureExecutor is null; stopping={}", master.isStopping());
108	      return false;
109	    }
110	    procedureEnv = pe.getEnvironment();
111	    if (this.procedureEnv == null) {
112	      LOG.debug("ProcedureEnv is null; stopping={}", master.isStopping());
113	      return false;
114	    }
{code}

Second..not totally sure if this is the right way.. technically the shutdown() should return irrespective of what happened on the server, no? This is the reason, why I was thinking of adding logging to test to see why the shutdown() fails. Thoughts?

{code}
   () -> masterThread.getMaster().getServerManager() != null &&
              !masterThread.getMaster().isStopping()));
{code}



I'll make the changes above and push. The 'isStopping' is useless on deeper dive set only in RegionServer#run on its way out. Any others? We hung last night but it was in the second 10 minute wait, after the rpc wait. The becomeActiveMaster thread when done goes into the RegionServer#run thread and it will try to do stuff like register w/ the master....  Let me add a few more isStopped checks.

Ya, the second waitFor() is the mysterious one, fwiw, found another race in teardown. Race between shutdown and start on {{HMaster#cleanerPool}} 

{noformat}
java.lang.NullPointerException: Chore's pool can not be null
	at org.apache.hbase.thirdparty.com.google.common.base.Preconditions.checkNotNull(Preconditions.java:897)
	at org.apache.hadoop.hbase.master.cleaner.CleanerChore.<init>(CleanerChore.java:99)
	at org.apache.hadoop.hbase.master.cleaner.CleanerChore.<init>(CleanerChore.java:81)
	at org.apache.hadoop.hbase.master.cleaner.LogCleaner.<init>(LogCleaner.java:78)
	at org.apache.hadoop.hbase.master.HMaster.startServiceThreads(HMaster.java:1451)
	at org.apache.hadoop.hbase.master.HMaster.finishActiveMasterInitialization(HMaster.java:1058)
	at org.apache.hadoop.hbase.master.HMaster.startActiveMasterManager(HMaster.java:2231)
	at org.apache.hadoop.hbase.master.HMaster.lambda$run$0(HMaster.java:621)
	at java.lang.Thread.run(Thread.java:748)
{noformat}

Also, I was planning to do this, adding more logging to see why the rpcs failed. Probably good to squash all of them to a single debug logging commit? I can spin up a separate one on how to handle InterrupedExceptions in the ZK watchers.

{noformat}
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java
index a5e596f79d..4d586a96c5 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java
@@ -183,10 +183,10 @@ public class TestMasterShutdown {
               LOG.debug("Shutdown RPC sent.");
               return true;
             } catch (CompletionException e) {
-              LOG.debug("Failure sending shutdown RPC.");
+              LOG.debug("Failure sending shutdown RPC.", e);
             }
           } catch (IOException|CompletionException e) {
-            LOG.debug("Failed to establish connection.");
+            LOG.debug("Failed to establish connection.", e);
           } catch (Throwable e) {
             LOG.info("Something unexpected happened.", e);
           }
{noformat}

Sure. Add a patch here and I'll apply it w/ my few bits. At the moment it is looking like the join on the shutdown future in the test is why we are stuck... Yeah, need to figure why.

In meantime pushed attached addendum... w/ your exceptions added and a check for stopping in RS #run

Dumbed down TestMasterShutdown and pushed it on branch-2.

Results for branch branch-2
	[build #2568 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/branch-2/2568/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2/2568//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2/2568//JDK8_Nightly_Build_Report_(Hadoop2)/]


(/) {color:green}+1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2/2568//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 jdk11 hadoop3 checks{color}
-- For more information [see jdk11 report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2/2568//JDK11_Nightly_Build_Report/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(x) {color:red}-1 client integration test{color}
--Failed when running client tests on top of Hadoop 2. [see log for details|https://builds.apache.org/job/HBase%20Nightly/job/branch-2/2568//artifact/output-integration/hadoop-2.log]. (note that this means we didn't run on Hadoop 3)


This failure is pretty informative: https://builds.apache.org/job/HBase-Flaky-Tests/job/branch-2/5884/artifact/hbase-server/target/surefire-reports/org.apache.hadoop.hbase.master.TestMasterShutdown-output.txt

The join on shutdown is not coming home though the shutdown went in to the master. We seem to be stuck trying to put up a ReadOnlyZKClient zk connection.

I pushed a simplification on the test. Seems to be working. Will know more in morning.

[~stack] It appears to me (based on the ClosedChannel exceptions from the latest run) that the rpc server is shutting down even before the shutdown() rpc call is responded to by the server. Am I reading it right? Was that your conclusion too? Curious how you simplified the test. I see the underlying problem to be a synchronous (or I'd say almost-synchronous) shutdown RPC call.

[~bharathv] when you say 'latest run', do you mean the link https://builds.apache.org/job/HBase-Flaky-Tests/job/branch-2/5884/artifact/hbase-server/target/surefire-reports/org.apache.hadoop.hbase.master.TestMasterShutdown-output.txt ?

Yes, the rpc does not get a response so the client/test main thread was hanging out waiting on the shutdown.join...

I just undid the test-side join and did the basic synchronous shutdown (see last attached addendum) and then a join on the Master. Fixes flakeyness. I didn't spend time on why the rpc call failed complete though the Master was down (You think it worth study?). Was going to make a patch for branch-2.3. Looks like master needs something similar. https://builds.apache.org/job/HBase-Flaky-Tests/job/master/5930/testReport/org.apache.hadoop.hbase.master/TestMasterShutdown/testMasterShutdownBeforeStartingAnyRegionServer/

Added a PR that aggregates and cleans the mess I made on branch-2 under the rubric of this JIRA and set the result against branch-2.3. Lets see how it does. Will push there and a version to master if comes back good.

> when you say 'latest run', do you mean the link

Yea, I meant the same job.

> Fixes flakeyness. I didn't spend time on why the rpc call failed complete though the Master was down

I think this masks the issue of shutdown being synchronous on the server side (more details in the PR comment). Don't think that should block the test fix, but curious if you are thinking along the same lines. Something to consider for the future? Although one thing that is surprising is what triggered this, something is causing the rpc server to shutdown before the response is sent back.

Â 

Pushed to branch-2.3+. Thanks [~bharathv] for the review.

Results for branch branch-2.3
	[build #12 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/branch-2.3/12/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2.3/12//General_Nightly_Build_Report/]




(/) {color:green}+1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2.3/12//JDK8_Nightly_Build_Report_(Hadoop2)/]


(/) {color:green}+1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2.3/12//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 jdk11 hadoop3 checks{color}
-- For more information [see jdk11 report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2.3/12//JDK11_Nightly_Build_Report/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(x) {color:red}-1 client integration test{color}
--Failed when running client tests on top of Hadoop 2. [see log for details|https://builds.apache.org/job/HBase%20Nightly/job/branch-2.3/12//artifact/output-integration/hadoop-2.log]. (note that this means we didn't run on Hadoop 3)


Results for branch master
	[build #1684 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/master/1684/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/master/1684//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/master/1684//JDK8_Nightly_Build_Report_(Hadoop2)/]


(/) {color:green}+1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/master/1684//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 jdk11 hadoop3 checks{color}
-- For more information [see jdk11 report|https://builds.apache.org/job/HBase%20Nightly/job/master/1684//JDK11_Nightly_Build_Report/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(x) {color:red}-1 client integration test{color}
--Failed when running client tests on top of Hadoop 2. [see log for details|https://builds.apache.org/job/HBase%20Nightly/job/master/1684//artifact/output-integration/hadoop-2.log]. (note that this means we didn't run on Hadoop 3)


Reopen for cherry-pick to branch-2.2.

Pushed to branch-2.2.

Results for branch branch-2.2
	[build #44 on builds.a.o|https://ci-hadoop.apache.org/job/HBase/job/HBase%20Nightly/job/branch-2.2/44/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://ci-hadoop.apache.org/job/HBase/job/HBase%20Nightly/job/branch-2.2/44//General_Nightly_Build_Report/]




(/) {color:green}+1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://ci-hadoop.apache.org/job/HBase/job/HBase%20Nightly/job/branch-2.2/44//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://ci-hadoop.apache.org/job/HBase/job/HBase%20Nightly/job/branch-2.2/44//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


