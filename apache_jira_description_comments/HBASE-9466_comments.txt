I guess this can be achieve using Kerberos or something like that?  But might still be a good idea to have something easier to use that K?

More that just filtering with Kerberos, if the RS knowns a Region is in RO mode, it can skip initialization of write-path components to save resources. This would also allow the RO regions to be served by all three favored notes.

(cc [~enis] [~devaraj])

How would that compare to the current feature where you can set a table to be read-only? https://github.com/apache/hbase/blob/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/HTableDescriptor.java#L566

[~jdcryans] [~fenghh] doesn't want to disable the table to flip it to RO.  That is what this issue is about.

My understanding is he's comparing a proposed "read-only mode" to just disabling the table.

You can do an alter table w/o disable with online schema changes. This is disabled by default for now, but if we can nail down the root cause of what Elliot observed during tests, we can re-enable it. 
bq. This would also allow the RO regions to be served by all three favored notes
This would be a nice thing to have. Will need changes in meta, AM, and the client side though. 


[~jdcryans] Yes, I'm proposing a 'read-only mode'(can be per-table or per-cluster) rather than 'disabling table', the latter is pretty heavyweight in that it needs to offline all regions of the given table.
If we just want to temporarily disable 'update' to a table or the whole cluster and later on we want to enable 'update' again, disabling a table or all tables of the cluster seems a quite heavy choice.

Thanks for pointing me to the read-only interface of HTableDescriptor of trunk, but I don't see any code using it, how is this RO expected to work?

It is set here: https://github.com/apache/hbase/blob/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java#L621

Then we check the write state when doing operations that can mutate data.

I guess the issue is then online schema updates are disabled by default now on account of flakiness observed during integration tests, so a read-only flip without disabling the table isn't currently possible. Is that a correct summary of the current state? So if we get online updates back, we will be able to flip a table read only without a disable. 

[~jdcryans] Thanks for the pointer. But currently the readonly mode can't be switched on/off without disabling a table. What I proposed for this JIRA is to provide user the capability to switch a table to readonly mode(temporarily reject write) without disabling it(hence without offling all its regions, which is heavy).

Current readonly(table attribute) supports read to a table and rejects update, but if user wants to enable write to this table, he needs to do online schema change for this table and which incurs offling/re-onlining operations for all regions of this table. My proposal is can we provide readonly as table mode(as enable/disable) rather than table attribute which indicates whether a table accepts write and can switch on/off without offlining/onlining all its regions.

[~fenghh] Sounds good to me.  Make the new API generic if you can, not just read-only, because I can see us adding other on-line switches in near future (good stuff)

[~fenghh] see what Andrew said regarding enabling/disabling (but online altering still requires closing the regions, flushing, etc).

If we do go down the patch flipping switches, I'm with Stack here. We'll need a generic framework for doing this. One could envision changing a lot more things live than just read-only, but we don't have to implement them all right away. Yours would be the first implemented use case.

[~stack] / [~jdcryans] : OK, I'll make a generic framework first and then implement readonly based on it.

Updated description 

[~lhofhansl]

