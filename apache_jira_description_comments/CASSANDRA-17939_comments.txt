[The proposed PR|https://github.com/apache/cassandra/pull/1899] adds new jobs for automatically repeating new or modified JUnit tests. Each regular JUnit job has a companion job to run the tests on that suite that are new or modified, according to the results of {{{}git diff --diff-filter=AMR{}}}. Each pair of all/repeated jobs is subjected to the same approval step, so the new workflow has more jobs but an identical number of approval steps.

These CI results use a synthetic patch doing some arbitrary changes on every test family, so we can verify how the new jobs work:
||PR||Test patch||CI||
|[trunk|https://github.com/apache/cassandra/pull/1899]|[trunk|https://github.com/adelapena/cassandra/tree/17939-trunk-dev-test]|[j8_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2135/workflows/e54ff736-015e-4002-b170-6ea826b591d1] 
[j11_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2135/workflows/c2811225-9a38-4216-9b7e-b15c9bb6d53c] 
[j8_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2135/workflows/13593914-4cdf-4f88-b5be-3201908e3e01] 
[j11_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2135/workflows/7c7d779d-0d22-4977-abca-0ddf01adb327]|

I'll add PRs for the remaining branches once we settle on a design.

This ticket is focused only on JUnit tests. Similar jobs for Python tests can be added in a separate ticket if we see value on it. However, that would be quite more challenging because we would need to find a way to get the class and method name of the new or modified test files identified by {{{}git diff{}}}. We probably shouldn't run entire {{.py}} files in the same way that we run {{.java}} files because Python tests are more resource intensive and their test files use to be quite crowded. To further complicate things, the names of some Python tests are automatically generated and don't appear on the compared files. Also, adding Python tests is not as common as adding JUnit tests these days, so there is probably less value on automatically multiplexing them.

CC [~e.dimitrova] [~dcapwell] [~jmckenzie] 

wow this is cool!

Although the new jobs will run any new or modified {{*Test.java}} file, in some cases we'll still need to manually run tests that are affected by the changes. We can do that with the classic test multiplexer. This however can be awkward because the multiplexer jobs only run a class at a time, so we'd need multiple pushes if we want to run multiple not-new-nor-modified classes.

CASSANDRA-17938 aims to solve that by allowing to specify multiple classes in the classic multiplexer. However, I think that we can run those sets of not-new-nor-modified classes in the same companion classes that we are proposing here. For that, we can have a env property per companion job allowing to specify what test classes we want to run in addition to the automatically detected new-or-modified tests. The list of env vars for manually specifying the tests to be repeated would be:
{code:java}
REPEATED_UTESTS_CLASSES:
REPEATED_UTESTS_FQLTOOL_CLASSES:
REPEATED_UTESTS_LONG_CLASSES:
REPEATED_UTESTS_STRESS_CLASSES:
REPEATED_SIMULATOR_DTESTS_CLASSES:
REPEATED_JVM_DTESTS_CLASSES:
REPEATED_JVM_UPGRADE_DTESTS_CLASSES:
{code}
We could pass those variables to the {{generate.sh}} script, for example:
{code:java}
.circleci/generate.sh -m \
  -e REPEATED_TESTS_COUNT=5 \
  -e REPEATED_UTESTS_CLASSES=org.apache.cassandra.cql3.ListsTest,org.apache.cassandra.cql3.validation.entities.DateTypeTest \
  -e REPEATED_UTESTS_COUNT=10 \
  -e REPEATED_JVM_DTESTS_CLASSES=org.apache.cassandra.distributed.test.AlterTest \
  -e REPEATED_JVM_DTESTS_COUNT=10 \
  -e REPEATED_UTESTS_LONG_CLASSES=org.apache.cassandra.io.sstable.CQLSSTableWriterLongTest \
  -e REPEATED_UTESTS_LONG_COUNT=2
{code}
Those manually specified tests would be run together with the automatically detected tests. For example, the above command with the [synthetic patch from my previous comment|https://github.com/adelapena/cassandra/commit/b8ec11dac7b18288c297ad4412476ab4dc7a50fe] would produce this run:
||Patch||CI||
|[trunk|https://github.com/adelapena/cassandra/tree/17939-trunk-classes-test]|[j8_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2143/workflows/19d6741b-72f1-43d3-88a2-556b17ca1531] 
[j11_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2143/workflows/43fe94a0-213e-41b0-b0bc-1db368e81bda] 
[j8_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2143/workflows/47fe1bf9-6454-41f0-89e5-4a18a38c5bc1]
[j11_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2143/workflows/557e0782-1b2e-4ef8-b24d-60082be1b8ac]|

We can see in the [artifacts tabs|https://app.circleci.com/pipelines/github/adelapena/cassandra/2143/workflows/47fe1bf9-6454-41f0-89e5-4a18a38c5bc1/jobs/21565/artifacts] that the jobs are repeatedly running both the automatically detected tests and the manually specified tests.

If we adopt this approach, the classic utest multiplexer would only be used for debugging existing flakies, as originally intended, and the new jobs would be what we use in regular tickets to make sure we are not introducing new flakies. Indeed, we could remove the classic utest multiplexer from the pre-commit workflows and leave it only in the separate workflows.

bq. we can have a env property per companion job allowing to specify what test classes we want to run in addition to the automatically detected new-or-modified tests. 

Is there a convenient way to get a list of which tests were detected as new-or-modified?

The detection of tests is done on Circle, so it cannot be seen locally. The tests can be seen on the artifacts tab or in the run output (there are a few [{{echo}} calls|https://github.com/adelapena/cassandra/blob/17939-trunk-classes-test/.circleci/config-2_1.yml#L1956]).

Locally, you can run the same simple git command that is used by the Circle config script:
{code:java}
git --no-pager diff --name-only --diff-filter=AMR ASF/trunk | grep Test\\.java
{code}
Where {{ASF}} is the name of the remote pointing to the main repo.

Thanks [~adelapena] ! I second [~smiklosovic]'s excitement :) 

There was a request on the Mailing List to keep this one on hold for a bit.

Otherwise, your plan and implementation LGTM on a quick high-level skim. I can do a full review when we get a GO from the community if someone doesn't get to it before me (soon I will be off until 18th October)

Indeed, the Python DTests are more involved and we can work them out in a separate ticket later depending on what the community decides there. I suspect the community will be fine with not detecting them, only having the multiplexer jobs for fixing flaky tests in time. 

I'm glad you both like it :)

On a further refinement, I have added support for specifying particular method names in the lists of test classes that are manually passed to the companion jobs. For example:
{code:java}
.circleci/generate.sh -m \
  -e REPEATED_TESTS_COUNT=5 \
  -e REPEATED_UTESTS=org.apache.cassandra.cql3.DurationTest#testAddTo,org.apache.cassandra.cql3.validation.entities.DateTypeTest \
  -e REPEATED_UTESTS_COUNT=10 \
  -e REPEATED_JVM_DTESTS=org.apache.cassandra.distributed.test.AlterTest#getAndSetCompressionParametersTest \
  -e REPEATED_JVM_DTESTS_COUNT=10 \
  -e REPEATED_UTESTS_LONG=org.apache.cassandra.io.sstable.CQLSSTableWriterLongTest#testWideRow \
  -e REPEATED_UTESTS_LONG_COUNT=2
{code}
||PR||CI||
|[trunk|https://github.com/apache/cassandra/pull/1899]|[j8_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2157/workflows/d470fdb7-c321-4f18-82b5-6eac6d7c0992] 
[j11_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2157/workflows/2bd34d9e-a32e-460d-a075-8ffdf7db4f09] 
[j8_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2157/workflows/3018332a-0c93-4e27-918f-48e4166de932] 
[j11_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2157/workflows/56c80e7d-d3f4-4e46-ba9a-021e80cf9314]|

We can see on [the artifacts tabs|https://app.circleci.com/pipelines/github/adelapena/cassandra/2157/workflows/d470fdb7-c321-4f18-82b5-6eac6d7c0992/jobs/21753/artifacts] that the jobs are running the manually specified test classes and methods, together with the automatically detected tests that come from [this test commit|https://github.com/adelapena/cassandra/commit/6639cc5d1c39080da271ef8a5c8d8366a5b713af].

With this changes the new companion jobs are mostly equivalent in functionality to the classic utest multiplexer. The only relevant thing that is missing in the new companion jobs is that the classic utest multiplexer is able to run any Ant target, and we don't have regular not-multiplexer jobs for some Ant targets, like {{test-cdc}} or {{{}msg-ser-test{}}}.

I guess that someday we'll manage to get CircleCI jobs for every possible type of test, all of them with its companion multiplexer job. That day we could probably get rid of the classic utest multiplexer.

In the meantime, I wonder if we should remove the classic utest multiplexer from the pre-commit workflows and leave it only on the separate workflows. Or perhaps move it to a separate workflow dedicated to that kind of debugging. After all, the sole purpose of the classic utest multiplexer will be reproducing existing flakies.

I have updated the PR adding support for specifying multiple Python dtests, which are specified in the env var {{REPEATED_DTESTS}} as a comma-separated list:
{code:java}
  -e REPEATED_DTESTS=cfid_test.py,pending_range_test.py::TestPendingRangeMovements::test_pending_range,cdc_test.py
{code}
I have also rearranged the optional steps so the pre-commit workflows is as simple as possible. As for the separate workflows, I have added approval steps so the multiplexer jobs can be started individually. With those changes the new jobs can mostly replace the old multiplexer, which was only able to run a type of test at a time.

The old dtest multiplexer has been divided into two companion jobs, so we can start runs with and without vnodes into the same push. The old utest multiplexer job is renamed from "repeated_utest" to "repeated_ant_test", because its only purpose is running ant targets that are not covered by other tests. The new name should make it easier to distinguish it from the new jobs.

I have also slightly altered the names of some job in order to standarize the names of the jobs.

The proposed changes in CircleCI config are relatively broad, and they require to pass different arguments to the {{generate.sh}} script. However, I think that the new workflow contains all we need to make sure that a single push can contain all the test repetitions that we need. Most of the tests will be automatically detected by {{{}git diff{}}}, and specifying whatever other tests are relevant should be relatively easy:
{code:java}
.circleci/generate.sh -m \
  -e REPEATED_TESTS_COUNT=5 \
  -e REPEATED_UTESTS=org.apache.cassandra.cql3.DurationTest,org.apache.cassandra.cql3.validation.entities.DateTypeTest \
  -e REPEATED_JVM_DTESTS=org.apache.cassandra.distributed.test.AlterTest#getAndSetCompressionParametersTest \
  -e REPEATED_UTESTS_LONG=org.apache.cassandra.io.sstable.CQLSSTableWriterLongTest#testWideRow \
  -e REPEATED_DTESTS=cfid_test.py,pending_range_test.py::TestPendingRangeMovements::test_pending_range
{code}
||PR||CI||
|[trunk|https://github.com/apache/cassandra/pull/1899]|[j8_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2201/workflows/901e73ba-1bac-40d2-9201-3c268bfb6c6f] 
[j8_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2201/workflows/bc908102-7aa8-45cb-ae74-48a521f2a0e5] 
[j11_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2201/workflows/736d8b7f-5c1f-4687-a974-6dc153eb7f01]
[j11_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2201/workflows/6c929d31-ebbc-4c82-a550-107e6f26d38e] |

I'll take review on this

First high level thoughts from a UX / design perspective / comments on the thread:
{quote}This ticket is focused only on JUnit tests.
{quote}
+1 to junit only; we should be avoiding adding new python tests anyway at this point. I see you've added repeat python tests as well which I wouldn't say _no_ to. :)
{quote}Locally, you can run the same simple git command
{quote}
Could we wrap this up in a flag to generate.sh in .circleci, {{generate.sh -d}} or something to show auto-detected diff tests? Or at least doc how circle derives it in readme.md so folks can run that themselves locally if they're curious what tests get picked up and want to perhaps add some more.
{quote}There was a request on the Mailing List to keep this one on hold for a bit.
{quote}
This was mostly miscommunication and a race condition between mck and I. Didn't want to derail / confuse the 4.1-beta1 vote w/another vote. Think we're good to go here.
{quote}we don't have regular not-multiplexer jobs for some Ant targets, like test-cdc or msg-ser-test
{quote}
No concerns about this, though we may want to doc in readme.md
{quote}I wonder if we should remove the classic utest multiplexer from the pre-commit workflows and leave it only on the separate workflows
{quote}
+1 to moving to separate workflows only in favor of the new flow

Going to start digging into the changes + the UX on circle now. Thanks for doing all this Andres - this is going to be a _huge_ help for a lot of folks!

bq. Could we wrap this up in a flag to generate.sh in .circleci, generate.sh -d or something to show auto-detected diff tests? Or at least doc how circle derives it in readme.md so folks can run that themselves locally if they're curious what tests get picked up and want to perhaps add some more.
First thing that pops for me - this command will (reasonably so) pop up all tests that differ from upstream _including ones that are due to your branch being stale and needing a rebase_, which further adds to the value of "double check which tests will auto-populate from my branch" as a generate.sh command + some output to say "hey, if you're seeing more than you expect you may need to rebase".

[~jmckenzie] thanks for looking into this.
{quote}+1 to junit only; we should be avoiding adding new python tests anyway at this point. I see you've added repeat python tests as well which I wouldn't say _no_ to. :)
{quote}
The automatic repetitions are only for JUnit tests. The changes in Python dtests are just the renaming of the job and the ability to accept multiple tests. This is done for consistency with the changes in the rest of the test jobs.
{quote}Locally, you can run the same simple git command

Could we wrap this up in a flag to generate.sh in .circleci, {{generate.sh -d}} or something to show auto-detected diff tests? Or at least doc how circle derives it in readme.md so folks can run that themselves locally if they're curious what tests get picked up and want to perhaps add some more.

First thing that pops for me - this command will (reasonably so) pop up all tests that differ from upstream {_}including ones that are due to your branch being stale and needing a rebase{_}, which further adds to the value of "double check which tests will auto-populate from my branch" as a generate.sh command + some output to say "hey, if you're seeing more than you expect you may need to rebase".
{quote}
Yep, I'll do that in a bit. Note that the diff uses the three dot syntax, so it should compare the current head of the patch branch to its fork point, not to the head of the base branch. That is, it compares the head of the base branch to the most recent commit that both the patch branch and the base branch have in common. The diff should remain unchanged even if there are newer changes on the base branch.
{quote}I wonder if we should remove the classic utest multiplexer from the pre-commit workflows and leave it only on the separate workflows

+1 to moving to separate workflows only in favor of the new flow
{quote}
I have renamed the job to {{repeated_ant_test}} so it doesn't get confused with the regular jobs. I have also removed it from the pre-commit workflows but left it on the separate workflows. I think that moving it to a new pair of workflows would add more noise/confussion that just leaving it on the separate workflows. Those workflows are meant for debugging an/or fixing flakies, so I guess it makes sense to have the special {{repeated_ant_test}} jobs there. Once we have specific test jobs for all the available Ant targets we can just remove {{{}repeated_ant_test{}}}.

I have just added a {{generate.sh -d}} option to preview the new or modified tests that will be selected and run on CircleCI. It needs the base branch as an argument because we don't know what remotes the users will have in their local machines, and we probably don't want to mess with their repos by adding nor fetching remotes. Using [the same test commit|https://github.com/adelapena/cassandra/commit/6639cc5d1c39080da271ef8a5c8d8366a5b713af] that we have used in the examples above, the output looks like:
{code}
$ .circleci/generate.sh -d apache/trunk
New or modified tests compared to apache/trunk:
unit_tests_repeat:
  org.apache.cassandra.cql3.functions.NewTimeFctsTest
  org.apache.cassandra.cql3.functions.RenamedCastFctsTest
  org.apache.cassandra.cql3.functions.TimeFctsTest
utests_compression_repeat:
  org.apache.cassandra.cql3.functions.NewTimeFctsTest
  org.apache.cassandra.cql3.functions.RenamedCastFctsTest
  org.apache.cassandra.cql3.functions.TimeFctsTest
utests_system_keyspace_directory_repeat:
  org.apache.cassandra.cql3.functions.NewTimeFctsTest
  org.apache.cassandra.cql3.functions.RenamedCastFctsTest
  org.apache.cassandra.cql3.functions.TimeFctsTest
utests_long_repeat:
  org.apache.cassandra.db.commitlog.BatchCommitLogStressTest
  org.apache.cassandra.db.commitlog.GroupCommitLogStressTest
  org.apache.cassandra.db.commitlog.NewBatchCommitLogStressTest
  org.apache.cassandra.db.commitlog.PeriodicCommitLogStressTest
  org.apache.cassandra.db.commitlog.RenamedCommitLogStressTest
utests_stress_repeat:
  org.apache.cassandra.stress.generate.RenamedDistributionSequenceTest
  org.apache.cassandra.stress.settings.NewOptionReplicationTest
  org.apache.cassandra.stress.settings.OptionReplicationTest
utests_fqltool_repeat:
  org.apache.cassandra.fqltool.FQLReplayTest
  org.apache.cassandra.fqltool.NewFQLReplayTest
  org.apache.cassandra.fqltool.RenamedFQLCompareTest
simulator_dtests_repeat:
  org.apache.cassandra.simulator.test.NewShortPaxosSimulationTest
  org.apache.cassandra.simulator.test.RenamedMonitorMethodTransformerTest
  org.apache.cassandra.simulator.test.TrivialSimulationTest
jvm_dtests_repeat:
  org.apache.cassandra.distributed.test.NewBooleanTest
  org.apache.cassandra.distributed.test.QueriesTableTest
  org.apache.cassandra.distributed.test.RenamedGroupByTest
jvm_dtests_vnode_repeat:
  org.apache.cassandra.distributed.test.NewBooleanTest
  org.apache.cassandra.distributed.test.QueriesTableTest
  org.apache.cassandra.distributed.test.RenamedGroupByTest
jvm_upgrade_dtests_repeat:
  org.apache.cassandra.distributed.upgrade.MixedModeMessageForwardTest
  org.apache.cassandra.distributed.upgrade.NewMixedModeAvailabilityV3XOneAllTest
  org.apache.cassandra.distributed.upgrade.RenamedMixedModeWritetimeOrTTLTest
{code}
Note that the actual diff is done on CircleCI, and this is only a preview mode for local use. The reason for doing the diff on Circle is that using the {{generate.sh}} script is optional, and users can directly use the provided {{config.yml}} files.

As for running the actual diff on CircleCI instead of running it locally:
* It allows the detection of new and modified tests even if the user doesn't use the {{generate.sh}} script when pushing.
* It prevents us from doing shallow clones ({{git clone --depth 1}}). This means a slightly longer build and a bigger working directory to be copied to every runner. Running the diff locally would require less resources.
* It ensures that we use the right remote and base branch when running the diff, whereas a local diff would require the right config on the user's machine.
* The results of a local call to {{generate.sh -d}} could be different to what is actually run on CircleCI. However that seems unlikely given that we use three-dot diffs. Having more commits on top of the base branch when the tests are run shouldn't make a difference.

Got it. I was incredibly lazy and just copy/pasted the syntax from the comment above which led to the "local branch is stale" diff showing up. :)

Will be taking a look at this today.

Looks like the -d flag requires running in the root and doesn't take relative path into account when it iterates over test directories. Maybe adding a bit more helpful of an error message / usage guidance there could help future users:
{code:java}
./generate.sh -d asf/trunk
New or modified tests compared to asf/trunk:
unit_tests_repeat:
fatal: ambiguous argument 'test/unit/': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git <command> [<revision>...] -- [<file>...]'
{code}

[This commit|https://github.com/adelapena/cassandra/commit/edb452ce2ef718877ba24e42f2287b4fd0490ea2] shows a draft of how doing the diff locally with the {{generate.sh}} script would look like. The script would do the diff and simply add the detected tests to the usual env vars. For example:
{code:java}
$ .circleci/generate.sh 
  -m \
  -e REPEATED_UTESTS=org.apache.cassandra.cql3.DurationTest#testAddTo,org.apache.cassandra.cql3.validation.entities.DateTypeTest \
  -e REPEATED_JVM_DTESTS=org.apache.cassandra.distributed.test.AlterTest#getAndSetCompressionParametersTest \
  -e REPEATED_UTESTS_LONG=org.apache.cassandra.io.sstable.CQLSSTableWriterLongTest#testWideRow \
  -e REPEATED_DTESTS=cfid_test.py,pending_range_test.py::TestPendingRangeMovements::test_pending_range
Generating new config.yml file with middle resources from config-2_1.yml
patching file .circleci/config-2_1.yml

Detecting new or modified tests with git diff --diff-filter=AMR trunk...HEAD:
  org.apache.cassandra.cql3.functions.NewTimeFctsTest
  org.apache.cassandra.cql3.functions.RenamedCastFctsTest
  org.apache.cassandra.cql3.functions.TimeFctsTest
  org.apache.cassandra.db.commitlog.BatchCommitLogStressTest
  org.apache.cassandra.db.commitlog.GroupCommitLogStressTest
  org.apache.cassandra.db.commitlog.NewBatchCommitLogStressTest
  org.apache.cassandra.db.commitlog.PeriodicCommitLogStressTest
  org.apache.cassandra.db.commitlog.RenamedCommitLogStressTest
  org.apache.cassandra.stress.generate.RenamedDistributionSequenceTest
  org.apache.cassandra.stress.settings.NewOptionReplicationTest
  org.apache.cassandra.stress.settings.OptionReplicationTest
  org.apache.cassandra.fqltool.FQLReplayTest
  org.apache.cassandra.fqltool.NewFQLReplayTest
  org.apache.cassandra.fqltool.RenamedFQLCompareTest
  org.apache.cassandra.simulator.test.NewShortPaxosSimulationTest
  org.apache.cassandra.simulator.test.RenamedMonitorMethodTransformerTest
  org.apache.cassandra.simulator.test.TrivialSimulationTest
  org.apache.cassandra.distributed.test.NewBooleanTest
  org.apache.cassandra.distributed.test.QueriesTableTest
  org.apache.cassandra.distributed.test.RenamedGroupByTest
  org.apache.cassandra.distributed.upgrade.MixedModeMessageForwardTest
  org.apache.cassandra.distributed.upgrade.NewMixedModeAvailabilityV3XOneAllTest
  org.apache.cassandra.distributed.upgrade.RenamedMixedModeWritetimeOrTTLTest

Setting environment variables:
  REPEATED_UTESTS: org.apache.cassandra.cql3.functions.TimeFctsTest,org.apache.cassandra.cql3.functions.RenamedCastFctsTest,org.apache.cassandra.cql3.functions.NewTimeFctsTest,org.apache.cassandra.cql3.DurationTest#testAddTo,org.apache.cassandra.cql3.validation.entities.DateTypeTest
  REPEATED_JVM_DTESTS: org.apache.cassandra.distributed.test.RenamedGroupByTest,org.apache.cassandra.distributed.test.QueriesTableTest,org.apache.cassandra.distributed.test.NewBooleanTest,org.apache.cassandra.distributed.test.AlterTest#getAndSetCompressionParametersTest
  REPEATED_UTESTS_LONG: org.apache.cassandra.db.commitlog.RenamedCommitLogStressTest,org.apache.cassandra.db.commitlog.PeriodicCommitLogStressTest,org.apache.cassandra.db.commitlog.NewBatchCommitLogStressTest,org.apache.cassandra.db.commitlog.GroupCommitLogStressTest,org.apache.cassandra.db.commitlog.BatchCommitLogStressTest,org.apache.cassandra.io.sstable.CQLSSTableWriterLongTest#testWideRow
  REPEATED_DTESTS: cfid_test.py,pending_range_test.py::TestPendingRangeMovements::test_pending_range
  REPEATED_UTESTS_STRESS: org.apache.cassandra.stress.settings.OptionReplicationTest,org.apache.cassandra.stress.settings.NewOptionReplicationTest,org.apache.cassandra.stress.generate.RenamedDistributionSequenceTest
  REPEATED_UTESTS_FQLTOOL: org.apache.cassandra.fqltool.RenamedFQLCompareTest,org.apache.cassandra.fqltool.NewFQLReplayTest,org.apache.cassandra.fqltool.FQLReplayTest
  REPEATED_SIMULATOR_DTESTS: org.apache.cassandra.simulator.test.TrivialSimulationTest,org.apache.cassandra.simulator.test.RenamedMonitorMethodTransformerTest,org.apache.cassandra.simulator.test.NewShortPaxosSimulationTest
  REPEATED_JVM_UPGRADE_DTESTS: org.apache.cassandra.distributed.upgrade.RenamedMixedModeWritetimeOrTTLTest,org.apache.cassandra.distributed.upgrade.NewMixedModeAvailabilityV3XOneAllTest,org.apache.cassandra.distributed.upgrade.MixedModeMessageForwardTest
{code}
Note how the detected tests are listed and added to the final CircleCI env vars, together with the tests manually provided by the user.

As mentioned before, the downside of this approach is that the detection of tests depends on developers using the {{generate.sh}} script.

{quote}Looks like the -d flag requires running in the root and doesn't take relative path into account when it iterates over test directories.
{quote}
Yep, I have considered that in the above patch for doing the diff on the {{generate.sh}} script but I missed it on the main PR. I'll fix it.
{quote}I was incredibly lazy and just copy/pasted the syntax from the comment above which led to the "local branch is stale" diff showing up.
{quote}
Doesn't help that I wrote the command on that comment with the wrong syntax :). The command is:
{code}
git --no-pager diff --name-only --diff-filter=AMR <REMOTE>/<BRANCH>...HEAD <DIRECTORY>
{code}
And then there are a couple of filters.
 

It looks like this'll spin up a bunch of parallel containers just to say "nope, no repeated tests found here!" - [see example|https://app.circleci.com/pipelines/github/josh-mckenzie/cassandra/313/workflows/96c850ba-0042-4d0f-b5fd-6c142d88a617/jobs/3708/parallel-runs/0?filterBy=ALL]. Is there any way we can get it to skip the _repeat jobs w/out entries entirely?

The only way I know to not start those jobs is manual approval steps, as we do in the separate workflows. Alternatively, if we do the diff on the {{generate.sh}} script we can try to modify the config to remove or disable those jobs if there isn't anything to run. But that approach has the problem of requiring the developers to always use the {{generate.sh}} script.

What if we bake it into any of the sizing flags (low / medium / high) on generate.sh w/the assumption that people that run circle will use that + want to run the diffed test?

That's what [the patch running the diff locally|https://github.com/adelapena/cassandra/commit/edb452ce2ef718877ba24e42f2287b4fd0490ea2] does, where the diff is automatically done with the l/m/h flags. We can try to also add the skipping of the repeated tests there. I don't know if everyone uses the script, though. In theory we provide the four {{config.yml}} files so people don't have to necessarily use the script, although I'm not sure that's useful anymore.

bq. I don't know if everyone uses the script, though

I don't, I replaced with my own that Josh keeps pointing out that I should OSS...

Ill try to review the ticket (don't want to block), but the intent behind it LGTM... I personally think our CI is too hard right now so I tell people in my world to add a script to their path and just type "higher" and forget about all this...  I kinda wonder if we should try to do the same in OSS... "ci/higher", "ci/lower", "ci/mid"... 

The reason why I ask this is that higher/lower/mid are all bad and based off random judgement from someone a long time ago and tend to be a bad fit... for example my scripts figure out how many containers are needed based off how many tests are being run... and I find that we use far less containers (HIGHER says 100 containers for unit, but we can't justify more than 35 atm on trunk... there is like a 1m difference in performance).  Given this statement it feels in-line with the idea of finding what tests need to run and sizing properly...



{quote}I personally think our CI is too hard right now so I tell people in my world to add a script to their path and just type "higher" and forget about all this... I kinda wonder if we should try to do the same in OSS... "ci/higher", "ci/lower", "ci/mid"...
{quote}
The current {{generate.sh}} script only allows to define the resource low/mid/high profile with the -l/-m/h flags. I wrote a patch in CASSANDRA-17113 adding flags to automatically start the builds and to select between the pre-commit and separate workflows. That ticket hasn't had any feedback since November last year. It would be great to have either that or those not-open source scripts, although that seems out of the scope of this ticket.

I agree that the HIGHRES config is a waste of resources, that's why we added the MIDRES config some time ago. Learning that there is a script out there overriding the HIGHRES config might explain why that config has survived for so long: there isn't anyone using it. Nevertheless, changing the resources or automatically estimating them is out of the scope of this ticket.

The fact that we have a good number of developers not using the {{generate.sh}} but a parallel not-open source script seems to support the decision of running the diffs on CircleCI instead of on that script, since our goal is making sure that every ticket gets repeated runs for all the new, modified and relevant tests. An alternative would be doing the diff on the {{generate.sh}} script and assume that that not-open source script will also be updated to add the soon-to-be mandatory repeated tests. [~dcapwell] wdyt?

bq. An alternative would be doing the diff on the generate.sh script and assume that that not-open source script will also be updated to add the soon-to-be mandatory repeated tests. David Capwell wdyt?

If you have logic to detect what to run as a repeat, replicating in my script wouldn't be hard...

bq. It would be great to have either that or those not-open source scripts, although that seems out of the scope of this ticket.

I really should just post it... its not the "perfect" that I want which is why I kept holding it off...  Ideally I want to rewrite all our CircleCI and my script is a tmp solution until we do that... 

bq. I agree that the HIGHRES config is a waste of resources, that's why we added the MIDRES config some time ago

The issue we face is 1) number of workers are randomly chosen and not based off the work needed, 2) we really didn't put in a lot of effort to say we need xlarge vs medium images.  We are also not consistent due to the patching nature of this work (filed a ticket to move away from patches but that had concerns due to 4.1 being branched soon), so some times HIGHER uses mid resources and some times MID uses xlarge...

bq. The fact that we have a good number of developers not using the generate.sh but a parallel not-open source script seems to support the decision of running the diffs on CircleCI instead of on that script

If you add a new job to the workflow my script will drop it... so if you are changing what you plan to do based off my non-OSS script... don't bother =).

I personally feel the logical place for this work is generate.sh as that is the only place that can "learn" what needs to happen and if we even need the new job... 

I have a few things on my plate so will be slow to review this work; don't think you need to block on my review if others have more cycles. 

[Here|https://github.com/adelapena/cassandra/tree/17939-trunk-generate] is an updated version of the patch using the {{generate.sh}} script to calculate the diff. I have updated it to remove the repeated jobs that don't have any assigned test, either manually or coming from the diff. That way, the workflow would only show the jobs that actually have some work to do, saving us a lot of useless container starts.
||Patch||CI without test changes||CI with test changes||
|[trunk|https://github.com/adelapena/cassandra/tree/17939-trunk-generate]|[j8_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2217/workflows/1fef5d68-c161-4cb1-9b18-e1340749ec5c] 
[j11_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2217/workflows/686c2bda-26bd-41d8-85a0-9cd4324fe73f] 
[j8_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2217/workflows/4372a725-9007-40cf-853b-42448c5cb850] 
[j11_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2217/workflows/881e1d17-e017-478c-a9f3-f65f0de6db9a]|[j8_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2218/workflows/1cc5669f-e894-488d-a47c-99e2c4d32acd] 
[j11_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2218/workflows/2bff8f98-29ca-4e36-ade8-a1c0de474f1a] 
[j8_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2218/workflows/2798d4df-9037-46e6-97b2-a82b346e0f9f] 
[j11_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2218/workflows/ca20dbe4-556d-4934-9bce-482ab6a9ed10]|

As before, the output of {{generate.sh}} shows what tests will be repeated.

Functionality tests out fine. Will be reviewing the actual code soon(tm).

nit: wdyt about renaming the j8_build approval step on j8_pre-commit to something like "all_jdk_build"? Also, could serve to rename j8_pre-commit to "all_jdk_precommit". [https://app.circleci.com/pipelines/github/adelapena/cassandra/2218/workflows/1cc5669f-e894-488d-a47c-99e2c4d32acd]

That way we could document it as the "one-stop-shop" to hit the button and get all your test results.

Also, while we're here (famous last words...) - could we also deprecate the -l, -m, and -h flags, fail out on -l (since I believe it doesn't work at all?) and have -m and -h just route to a default that hits up -m as per the discussion above w/a debug print out letting the user know we re-routed? i.e. get us to a place where we have a very straightforward flow like:

1. Run .circleci/generate.sh
2. Visually confirm the tests you expect to see changed show up in the repeated run output in console
3. {{git commit -a -m "[DO NOT MERGE] circleci config" (could even add a convenience wrapper to .circleci that'd generate + commit...)
4. After push, go to circleci pipeline and click the {{all_jdk_precommit}} {{all_jdk_build}} job to approve it. Wait, review.

{quote}nit: wdyt about renaming the j8_build approval step on j8_pre-commit to something like "all_jdk_build"? Also, could serve to rename j8_pre-commit to "all_jdk_precommit". [https://app.circleci.com/pipelines/github/adelapena/cassandra/2218/workflows/1cc5669f-e894-488d-a47c-99e2c4d32acd]

That way we could document it as the "one-stop-shop" to hit the button and get all your test results.
{quote}
I don't think that's an all jdk build, nor that we should only use that workflow. That workflow tests building with j8 and running with both j8 and j11. The j11 workflow is for both building and running with j11. We should be running both workflows before committing.

 

{quote}I don't think that's an all jdk build, nor that we should only use that workflow. That workflow tests building with j8 and running with both j8 and j11. The j11 workflow is for both building and running with j11. We should be running both workflows before committing.
{quote}
That said, I think we could unify both j8 and j11 pairs of pre-commit/separate workflows into a single one. I would prefer to do that in a separate ticket, since the scope of this one is repeated tests, and it's already quite large as it is.
{quote}
Also, while we're here (famous last words...) - could we also deprecate the -l, -m, and -h flags, fail out on -l (since I believe it doesn't work at all?) and have -m and -h just route to a default that hits up -m as per the discussion above w/a debug print out letting the user know we re-routed?
{quote}
I'd also leave that for a separate ticket. I think we need the -l flag for users on CircleCI's free plan. The -h flag is probably unused, but we should ask on the mail list. The original idea was that -m and -h were both for users on CircleCI's payment plans, but with -m trying to find a balance between cost and execution time, and -h prioritizing execution time.

bq. That said, I think we could unify both j8 and j11 pairs of pre-commit/separate workflows into a single one. I would prefer to do that in a separate ticket

+1

bq. That workflow tests building with j8 and running with both j8 and j11. The j11 workflow is for both building and running with j11. We should be running both workflows before committing.
Ah. I never realized that. To be fair I use David's script about 90% of the time which has a different flow. Is that documented somewhere? Or is a user just to infer "run all things w/pre-commit in the name"? Which is a reasonable enough assertion to be fair.

Totally fine w/separate ticket(s) for follow-up stuff too. My instinct is to play a little more fast and loose with the circleci generation stuff but that's probably just bad behavior on my part. :)

{quote}Ah. I never realized that. To be fair I use David's script about 90% of the time which has a different flow. Is that documented somewhere? Or is a user just to infer "run all things w/pre-commit in the name"? Which is a reasonable enough assertion to be fair.
{quote}
Definitively we will have to document that somewhere, probably when we update the general documentation about our CI process with the latter changes that are under voting.

As for joining the workflows, I think I took a quick look at that during CASSANDRA-16882 or some other related ticket. Circle needs a different name for every job, so we would needs jobs of the form:
 * j8_j8_jvm_dtests
 * j8_j11_jvm_dtests
 * j11_j11_jvm_dtests
 * j8_j8_jvm_dtests_vnode
 * j8_j11_jvm_dtests_vnode
 * j11_j11_jvm_dtests_vnode

Or something like that. The problem is that Circle UI cuts names over a certain number of characters. Most of the current job names are short enough to be understandable even if the last few chars are replaced by "…", and adding the j8/j11 build prefix could make them hard to recognize on the UI:
 * j8_j8_jvm_dtests…
 * j8_j11_jvm_dtest…
 * j11_j11_jvm_dtes…
 * j8_j8_jvm_dtests…
 * j8_j11_jvm_dtest…
 * j11_j11_jvm_dtes…

Maybe we can start using the Java version as a suffix, as in:
 * jvm_dtests_j8_j8
 * jvm_dtests_j8_j11
 * jvm_dtests_j11_j11
 * jvm_dtests_j8_j8
 * jvm_dtests_j8_j11
 * jvm_dtests_j11_j11

So they are truncated to:
 * jvm_dtests_j8_j8
 * jvm_dtests_j8_j1…
 * jvm_dtests_j11_j…
 * jvm_dtests_vnode…
 * jvm_dtests_vnode…
 * jvm_dtests_vnode…

However, that would mess with the ordering of the jobs, which is mostly alphabetical.

But that's probably something to discuss on a followup ticket and keep this one focused on repeated tests.

bq. But that's probably something to discuss on a followup ticket and keep this one focused on repeated tests.
Agree. Also agree it's a bit of a thorny problem, but one we're going to continue to face as we move forward w/2 JDK's supported into perpetuity so I think it's worth figuring out + documenting.

generate.sh looks fine enough to me. Well documented, as clean as bash gets, and works. There's _a lot_ of config yaml changes and I'm not sure how to effectively review those changes, so for now I'll settle for the proxy of "I ran it on multiple configurations and it all appears to be working".

Functional question for you: if you make a change to a long or stress test, the current script auto-detects that and then sets up the config with the same repeat run count:
{code:java}
REPEATED_TESTS_COUNT: 500                                                                              
...
REPEATED_UTESTS_LONG_COUNT: REPEATED_TESTS_COUNT
{code}
My intuition is that we probably want a different default repeat count for LONG and STRESS tests that's lower than the default count for other types of tests given a) their much longer runtime, and b) a different profile / frequency of flaking out. Not sure what that number should be; I'd probably start at an order of magnitude down under the assumption that they take that much longer to run, but that's a very non-scientific position for me to take.

WDYT [~adelapena]?

{quote}There's _a lot_ of config yaml changes and I'm not sure how to effectively review those changes, so for now I'll settle for the proxy of "I ran it on multiple configurations and it all appears to be working".
{quote}
That should be enough :). The only relevant yaml file is [{{config-2_1.yml}}|https://github.com/apache/cassandra/blob/388845dc3852154710a9dd8e98f35a120c405745/.circleci/config-2_1.yml], the others are just files generated by {{generate.sh -a}}. I usually check that running that command doesn't change the pre-built {{config.yml}} files that are included in the patch. It also could make sense to diff the low/mid/high files and verify that there aren't surprises when comparing them. Other than that, it's just verifying that it works.
{quote}
My intuition is that we probably want a different default repeat count for LONG and STRESS tests that's lower than the default count for other types.
{quote}
Yep, I was thinking the same. I'll change it to 50 or 100 and give it a run to see how long it takes. Ideally all repeated jobs should complete in more or less the same time, so I'll try to adjust to that.


Actually, stress tests are regular tests for the stress tool, so they shouldn't be particularly slow. I think that upgrade Python dtests can also be particularly long due to the difficulty to select particular upgrade tests. I'm running those and LONG tests with 100 iterations [here|https://app.circleci.com/pipelines/github/adelapena/cassandra/2232/workflows/7a768262-5790-4252-a0c7-9b845c07442a]. I'll update the default value if it looks good.

I have also fixed a couple of bugs that I have found during the last runs:
 * [Accidental removal of the step to add the Apache origin|https://github.com/adelapena/cassandra/commit/f85d3370723097f5b904a38ec61d368128ddd719]. It's a leftover from the approach running the diff on CircleCI. It only affected upgrade dtests.
 * [Too generic {{grep}} pattern when finding the manually specified environment vars|https://github.com/adelapena/cassandra/commit/add3fa89e2a84ea4b5d864ebc3c6fa4dae1ff1ee]. For example, it matched both {{REPEATED_UTESTS_LONG_COUNT}} and {{{}REPEATED_UTESTS_LONG{}}}.

It seems that 100 is an acceptable number for long unit tests.

As for Python upgrade dtests, those can be super slow if one tries to run an entire test file, as in {{cql_tests.py}}. Those files contain many tests that are applied to different upgrade paths, so they can take ages. Also, the syntax for running particular tests isn't super friendly, as in {{upgrade_tests/cql_tests.py::TestCQLNodes2RF1_Upgrade_current_4_0_x_To_indev_4_0_x::test_counters}}. So I'm setting the default to only 25 iterations, which should be something between 1h and 2h for a large test file and MIDRES. After all, there isn't automatic detection of Python dtests so the users will probably manually provide their own count.

Given that we have different counts for each test family, I'm removing the default generic {{REPEATED_TESTS_COUNT}}. That can only lead to misunderstandings if one gets used to it and then get surprised when some especially long tests ignore it. Also, the way it worked was quite hacky and I'm afraid it could fail in future versions of CircleCI CLI.

I'm also leaving a single {{REPEATED_TESTS_STOP_ON_FAILURE}} env var instead of one per family of tests. This is so partly to avoid the error-prone approach for default env vars. Also I can't see a case where we could have different setting per family of tests, and the less vars we have the better.

The {{readme.md}} file is updated to describe the multiplexer env vars.
 
||Patch||CI without test changes||CI with test changes||
|[trunk|https://github.com/adelapena/cassandra/tree/17939-trunk-generate]|[j8_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2248/workflows/c53a390b-d08a-4a2a-b63d-3e6d35f9984b] 
[j11_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2248/workflows/d6f51790-a17d-44cd-810f-fc679b1f5379] 
[j8_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2248/workflows/3f4a47dd-1bfa-4a5c-a384-85d708fbd41c] 
[j11_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2248/workflows/66462337-401d-4f87-9b5b-b1c016c50613]|[j8_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2247/workflows/a88e2d87-828c-4fe5-84de-d190d294c2a4] 
[j11_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2247/workflows/9ff67d2f-cae6-4fc8-9537-376a6cd267e1] 
[j8_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2247/workflows/7cb93de7-b54f-46e9-aac1-ab45b736caaa] 
[j11_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2247/workflows/9f083479-f7c9-4a94-9bcb-b2f47851a5e3]|

[~jmckenzie] if you are ok with the changes I can start preparing the patches for all the other branches (since 3.0).

Couple nits on the review (looks like the old top level repeat count was left in the script help output and readme.md) but otherwise +1.

I'll make a note for us to create some follow up tickets about massaging the output of generate.sh on the following fronts:
 # Tuning parallelism levels per job (David's findings indicate there's a more optimal / tighter bound for this)
 # Renaming of jobs to be more indicative of their function
 # Updating documentation w/guidance on using circle ([how to commit|https://cassandra.apache.org/_/development/how_to_commit.html], [testing|https://cassandra.apache.org/_/development/testing.html])

Thanks for being patient w/all my probing on this Andres. I've been using this ecosystem quite a bit in the past year and have accumulated some opinions as a user. :)

I have just updated the script with missed variables, I totally missed that.

I have also added a couple of [missing flags in the dtests multiplexer|https://github.com/apache/cassandra/pull/1899/commits/9f1bc35de5447e2e14d981f6d4d9ee7da875824e]. Their purpose is making sure that we only tests upgrades towards the current branch. These flags are used by the regular {{upgrade_dtests}} jobs that {{upgrade_dtests_repeat}} mimics, so the repeated task should also use them.

Thanks for all the feedback, it's really useful :)

Here are the patches for all the branches:
||Patch||CI without test changes||CI with test changes||
|[trunk|https://github.com/apache/cassandra/pull/1899]|[j8_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2269/workflows/d8907cbc-dbca-4d21-bdb9-1a4c58e1a412] 
[j11_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2269/workflows/67790999-8a9a-4aa7-ac30-2a7cb9b79008] 
[j8_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2269/workflows/50fddd0a-c80b-4a76-b22c-4f35b0879446] 
[j11_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2269/workflows/c151de5e-d1f1-4347-a5bb-80d200410000]|[j8_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2278/workflows/e339f5d4-0e16-4d4a-bde8-f0d9b9f3912d] 
[j11_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2278/workflows/ee8ba57a-45f7-4a07-b841-72d4c0d3c569] 
[j8_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2278/workflows/c1f1312e-5eba-45eb-94ec-9fddc54f4373] 
[j11_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2278/workflows/a55c8eec-53ff-47e0-96ca-4f505c003c65]|
|[4.1|https://github.com/apache/cassandra/pull/1914]|[j8_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2268/workflows/f7271e50-fbb7-467a-9f6d-4d1bb31c8c21] 
[j11_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2268/workflows/9787576f-1a88-4918-a3bd-d0eed88dd33f] 
[j8_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2268/workflows/8703ca44-ceef-48bd-bc3b-b8f49279374d] 
[j11_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2268/workflows/563a2f03-a934-4627-a3ff-4d1ce0bb6d97]|[j8_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2277/workflows/73dba25a-1e70-4acf-9546-db94c06b7bed] 
[j11_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2277/workflows/9d05afa3-e83e-47b4-9190-894a38db8805] 
[j8_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2277/workflows/0f89fe10-25e1-47a9-a8a0-624fa47bcdc9]
[j11_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2277/workflows/7f82a284-e24d-49c8-ac39-6e748f419550]|
|[4.0|https://github.com/apache/cassandra/pull/1913]|[j8_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2272/workflows/39f3427d-a342-4d8f-80ed-cd8b705a9e2e] 
[j11_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2272/workflows/826d2c64-d4ce-44b4-a783-3ce1ade04025] 
[j8_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2272/workflows/78e84858-3203-4e4e-bfa6-bdb9af0f4ca3] 
[j11_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2272/workflows/ac8623fd-a640-42d9-ad46-862715f79896]|[j8_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2276/workflows/95215a24-1cc1-4b60-a0de-0454bc901a79] 
[j11_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2276/workflows/e08d90e1-a459-4955-8919-625327bbc1ac] 
[j8_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2276/workflows/84500666-1b75-4054-9b43-b9f5a749165d] 
[j11_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2276/workflows/dd019688-0304-416d-815e-cd5ccb481ccd]|
|[3.11|https://github.com/apache/cassandra/pull/1912]|[j8_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2279/workflows/659665c6-a4ee-4dd6-93b9-509fd63f1c23] 
[j8_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2279/workflows/ed80c6f1-87ac-4538-8ccf-88b0722c996c]|[j8_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2282/workflows/0363caa4-7691-49d4-bcb1-4b1a757c5426] 
[j8_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra?branch=17939-3.11-test]|
|[3.0|https://github.com/apache/cassandra/pull/1911]|[j8_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2280/workflows/6abec7d6-7dcb-4e51-9927-cbae7d8286ac] 
[j8_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2280/workflows/6585bfb3-7464-4291-9968-ec91653c3f5c]|[j8_pre-commit|https://app.circleci.com/pipelines/github/adelapena/cassandra/2283/workflows/ba4c0a12-a0ad-4027-8ab6-9d5224d41d77] 
[j8_separate|https://app.circleci.com/pipelines/github/adelapena/cassandra/2283/workflows/57a32fae-1cbe-402b-8c7a-4d16656fce92]|

Some tests aren't available in some branches, so I'm also not adding the companion repeated jobs in those cases, nor the associated env vars:
 * The simulator tests aren't available in 3.0, 3.11 and 4.0.
 * JVM dtests with vnodes aren't available in 3.0, 3.11 and 4.0.
 * 3.0 doesn't have any tests for the stress tool, so there isn't a job for it.

I have also added the missing Ant target {{long-testsome}} in 3.0 and 3.11, and {{stress-test-some}} in 3.11 only. Those targets, which are mostly trivial, are used to run individual tests.

[~jmckenzie] are you ok with the patches for the old branches? Are we ready to commit?

+1

Committed to 3.0 as [9aa28a81ecb65d8e586039f419ca3272c1de64c2|https://github.com/apache/cassandra/commit/9aa28a81ecb65d8e586039f419ca3272c1de64c2] and merged to [3.11|https://github.com/apache/cassandra/commit/f13cdddcad17a4c674c3011e7fff714d4f89f683], [4.0|https://github.com/apache/cassandra/commit/cc622a20e1908d94626217b85737948b1df9b96a], [4.1|https://github.com/apache/cassandra/commit/36e73bdf55e4a5e088e91eecea8896c1b47915cf] and [trunk|https://github.com/apache/cassandra/commit/0ab2aa25d46e743c9a1f5a325bcf96541a3f0e5b].

Thanks for the review.

Note: this introduced some bash-dependent syntax:

{quote}
$ .circleci/generate.sh -m
Generating new config.yml file with middle resources from config-2_1.yml
patching file .circleci/config-2_1.yml.MIDRES (read from .circleci/config-2_1.yml)
.circleci/generate.sh: 209: Syntax error: redirection unexpected
{quote}

This is perfectly fine but the shebang in generate.sh points to /bin/sh, which may not be bash on all systems.

[~brandon.williams] thanks for finding that. As an alternative to use bash in the shebang, we can avoid the bashsim by using pipes instead of the here string:

||Patch||
|[3.0|https://github.com/adelapena/cassandra/tree/17939-3.0-hotfix]|
|[3.11|https://github.com/adelapena/cassandra/tree/17939-3.11-hotfix]|
|[4.0|https://github.com/adelapena/cassandra/tree/17939-4.0-hotfix]|
|[4.1|https://github.com/adelapena/cassandra/tree/17939-4.1-hotfix]|
|[trunk|https://github.com/adelapena/cassandra/tree/17939-trunk-hotfix]|

Thank you for the very quick patch [~adelapena]. I can confirm those were marked in my IntelliJ with warnings "In POSIX sh, here-strings are undefined"

I think we might need further updates - I am getting also "In POSIX sh, [[ ]] is undefined" on lines 211, 258, 264, 267, 270, 273, 276, 282, 286, 292, 295 (Mentioning explicitly with lines, etc as I know you mentioned your version of IDE did not show you anything. Hope this helps :) )

That fix looks good, but unfortunately appears to unveil other bashisms:

{quote}
$ .circleci/generate.sh -m
Generating new config.yml file with middle resources from config-2_1.yml
patching file .circleci/config-2_1.yml.MIDRES (read from .circleci/config-2_1.yml)

Detecting new or modified tests with git diff --diff-filter=AMR cassandra-4.0...HEAD:
.circleci/generate.sh: 251: [[: not found
.circleci/generate.sh: 257: [[: not found
.circleci/generate.sh: 260: [[: not found
.circleci/generate.sh: 263: [[: not found
.circleci/generate.sh: 266: [[: not found
.circleci/generate.sh: 272: [[: not found
.circleci/generate.sh: 276: [[: not found
.circleci/generate.sh: 282: [[: not found
.circleci/generate.sh: 285: [[: not found
{quote}

Thanks for looking into this. I have removed the remaining bashisms and tested it with dash:

||Patch||
|[3.0|https://github.com/adelapena/cassandra/tree/17939-3.0-hotfix]|
|[3.11|https://github.com/adelapena/cassandra/tree/17939-3.11-hotfix]|
|[4.0|https://github.com/adelapena/cassandra/tree/17939-4.0-hotfix]|
|[4.1|https://github.com/adelapena/cassandra/tree/17939-4.1-hotfix]|
|[trunk|https://github.com/adelapena/cassandra/tree/17939-trunk-hotfix]|

+1 to this, thanks for the extra effort!

Thanks, I'll commit it in a second

Fix committed to 3.0 as [2b511c57143063553fe1256679d5ce8aefc50129|https://github.com/apache/cassandra/commit/2b511c57143063553fe1256679d5ce8aefc50129] and merged to [3.11|https://github.com/apache/cassandra/commit/c7d665dcc7c06120c6c149a7b9fda27b8ea13b67], [4.0|https://github.com/apache/cassandra/commit/a9df34c62a3596a9fc40de200adffe10b960146a], [4.1|https://github.com/apache/cassandra/commit/f90148a344737102994289fa2828939c11ad829b] and [trunk|https://github.com/apache/cassandra/commit/b69ac3ffcc2a4736d6eeb28535f14f657222624e].

