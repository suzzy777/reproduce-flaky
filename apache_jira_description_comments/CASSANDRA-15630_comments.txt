After going through the source, the test failure looks only caused by improper barrier set in the test itself. Not an implementation bug. 

The countdown latch gets released in the verb handler. And the processed count increment happens _after_ it. Therefore, there is a chance that the test is signaled to proceed to assertions, meanwhile the processed count has not been updated yet. 

Since there is no easy way to register a callback after the processed count increment, I am proposing a patch that adds a {{longCheck()}}Â method, which repeatedly run checks within the specified timeout until passing. 

I have run the test locally in a docker container and the test failure cannot be reproduced.

PR: [https://github.com/apache/cassandra/pull/470]

I think the failures reported in the other 2 JIRAs, CASSANDRA-15628 and CASSANDRA-15629, are caused by the same reason. Changing the {{check()}} to {{longCheck()}}in those 2 tests should fix.

Code mostly LGTM; left my comments in GitHub.

Most my comments are nits so you can choose to ignore if you want, the main feedback is to move away from system time to cpu time, details in GitHub.

Thanks [~dcapwell].

I have updated the PR to address most of your comments.

only minor/nit comments remain; main one is resolved.

+1

linked both CASSANDRA-15628 and CASSANDRA-15629..

[~dcapwell] [~jasonstack] [~yifanc] are we ready to ask [~brandon.williams] or [~mck] maybe to commit?
Is there anything outstanding to be done?

I believe we do require a committer to review (general statement); so I think we need a review from one?

Based on what I can see, we have some race conditions on several tests and the check for {{scheduledCount}} in {{ConnectionUtils}} is also expecting some race conditions. I strongly suspect that we might not have not found yet all the race conditions.
Rather than having a {{checkLong}} method for tests that we found out are racy, I would prefer to assume that all the tests could be racy and fix the {{check}} method.

We already have an utility method to handle racy operation: {{Util.spinAssertEquals}}. Rather than developing a new solution I would add a new version that accept a message in its signature and use it in {{ConnectionUtils}} in place of {{Assert.assertEquals}}. There are a few refactoring to do along the way but I believe that it should be doable.

Hi [~blerer], I was not aware of the {{Util.spinAssertEquals}}. Thanks for pointing it out. I will use it instead. 


bq. I strongly suspect that we might not have not found yet all the race conditions.
Yup. This test is not the only one. Multiple tests in {{ConnectionTest}} have failed and JIRAs were created for each of them (i.e. CASSANDRA-15628 and CASSANDRA-15629). Later, I found out that they were likely failed for the same cause. Since multiple JIRAs were created already, I only applied the fix for this one. 

[~blerer], the PR was just updated. The {{longCheck()}} got removed and the {{check()}} now invokes the spin assertion. 
In consequence, it should fix the related PRs (i.e. CASSANDRA-15628 and CASSANDRA-15629) too. 

[~yifanc] Nice work :-). Thanks a lot. I just added a minor comment that I can do on commit if you want to.

Do you have a link toward the CI run?

{quote}Since multiple JIRAs were created already, I only applied the fix for this one. {quote}

In such a case, you can simply clause them and mark them as duplicates. :-)

CI passed. Link: https://app.circleci.com/pipelines/github/yifan-c/cassandra/59/workflows/9b1dee87-f930-4729-a577-71da5fc9660c/jobs/282

However, I do not think it is very representative. (There are other flaky tests in the code base, a green run is more because of luck).

In addition, I made a docker container that caps CPUs to 2 to run the {{ConnectionTest}} repeatedly until failure.  [^CASS-15630-TEST-DOCKER.zip] 
It applies another flaky test fixing patch that has not been merged yet before running the repeating test. On my local, the test passes for dozen times. 

Regarding the comment, it is probably better to use {{spinAssertEquals}} explicitly. If you strongly prefer to use testAndFailCheck, I am cool with it.

Thanks all for reviewing!

[~blerer], would you like to take another look and merge it if all good? 

Committed into trunk at e08053b77cac4ec91fd398d7bad65bba1394f45f

