GitHub user merrimanr opened a pull request:

    https://github.com/apache/metron/pull/786

    METRON-1231: Separate Sensor name and topic in the Management UI

    ## Contributor Comments
    This PR separates sensor name and sensor Kafka topic in both the REST app as well as the Management UI.  The SensorParserConfigController [POST](http://node1:8082/swagger-ui.html#!/sensor-parser-config-controller/saveUsingPOST_5) endpoint now accepts a `name` path variable that represents the sensor name and the [getAll](http://node1:8082/swagger-ui.html#!/sensor-parser-config-controller/findAllUsingGET_1) endpoint now returns a map with the sensor name as the key and config as the value (was just a list before).
    
    This has been tested in full dev.  To verify, log in to the Management UI and create or edit a sensor.  There should now be separate inputs for sensor name and Kafka topic.  Editing one should not affect the other and vice-versa.  The Kafka topic field should function the same as it did before.  There was a significant refactor required so the Management UI should be tested to ensure all the features still work and no regressions were introduced.
    
    The REST endpoints should also function normally and include the new behavior mentioned above.
    
    ## Pull Request Checklist
    
    Thank you for submitting a contribution to Apache Metron.  
    Please refer to our [Development Guidelines](https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=61332235) for the complete guide to follow for contributions.  
    Please refer also to our [Build Verification Guidelines](https://cwiki.apache.org/confluence/display/METRON/Verifying+Builds?show-miniview) for complete smoke testing guides.  
    
    
    In order to streamline the review of the contribution we ask you follow these guidelines and ask you to double check the following:
    
    ### For all changes:
    - [x] Is there a JIRA ticket associated with this PR? If not one needs to be created at [Metron Jira](https://issues.apache.org/jira/browse/METRON/?selectedTab=com.atlassian.jira.jira-projects-plugin:summary-panel). 
    - [x] Does your PR title start with METRON-XXXX where XXXX is the JIRA number you are trying to resolve? Pay particular attention to the hyphen "-" character.
    - [x] Has your PR been rebased against the latest commit within the target branch (typically master)?
    
    
    ### For code changes:
    - [x] Have you included steps to reproduce the behavior or problem that is being changed or addressed?
    - [x] Have you included steps or a guide to how the change may be verified and tested manually?
    - [x] Have you ensured that the full suite of tests and checks have been executed in the root metron folder via:
      ```
      mvn -q clean integration-test install && build_utils/verify_licenses.sh 
      ```
    
    - [x] Have you written or updated unit tests and or integration tests to verify your changes?
    - [x] If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under [ASF 2.0](http://www.apache.org/legal/resolved.html#category-a)? 
    - [x] Have you verified the basic functionality of the build by building and running locally with Vagrant full-dev environment or the equivalent?
    
    ### For documentation related changes:
    - [x] Have you ensured that format looks appropriate for the output in which it is rendered by building and verifying the site-book? If not then run the following commands and the verify changes via `site-book/target/site/index.html`:
    
      ```
      cd site-book
      mvn site
      ```
    
    #### Note:
    Please ensure that once the PR is submitted, you check travis-ci for build issues and submit an update to your PR as soon as possible.
    It is also recommended that [travis-ci](https://travis-ci.org) is set up for your personal repository such that your branches are built there before submitting a pull request.
    


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/merrimanr/incubator-metron METRON-1231

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/metron/pull/786.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #786
    
----
commit c2013b0e390eb776aff6f32257c0e371fa562025
Author: merrimanr <merrimanr@gmail.com>
Date:   2017-10-04T18:58:49Z

    initial commit

commit 7f027ade0af32f381b48d0144363b76dfcc48644
Author: merrimanr <merrimanr@gmail.com>
Date:   2017-10-04T19:05:14Z

    Merge remote-tracking branch 'mirror/master' into METRON-1231
    
    # Conflicts:
    #	metron-interface/metron-config/src/app/sensors/sensor-parser-config/sensor-parser-config.component.ts

commit 073c3def971304e9e07dda2dacde18396bdebecb
Author: merrimanr <merrimanr@gmail.com>
Date:   2017-10-04T19:13:23Z

    resolved merge conflict

----


Github user justinleet commented on the issue:

    https://github.com/apache/metron/pull/786
  
    @merrimanr Can you deconflict this?  This is otherwise ready for review, but it just needs to happen, right?


Github user merrimanr commented on the issue:

    https://github.com/apache/metron/pull/786
  
    @justinleet this should be ready for review now.


Github user justinleet commented on the issue:

    https://github.com/apache/metron/pull/786
  
    I took a swing through this, and generally this worked as expected. There were a couple things in full dev that I'm not sure if they were preexisting or not, just from unfamiliarity with how it worked before.  If these things are preexisting, it might be worth a follow on task to clean up.
    
    1. If I try to create a new sensor without a name, I get an error "Unable to save sensor config: Request method 'POST' not supported".  We should be able to give a more informative error, and really it should be on the fly like validation like the Kafka topic name.
    
    1. If a field is missing in a new sensor (e.g. topic or GROK statement), I get "Unexpected end of JSON input".  This makes me worry there's a structural problem in the request, along with the lack of informative error.
    
    1. The UI will happily let me try to recreate an existing sensor, and apparently executes an update.  I would expect it to refuse to let me override an existing sensor.  This includes on a running sensor, which is worrisome.
    
    1. If we get a permission denied error while editing a parser (e.g. I tried to edit squid and hit HDFS permissions), we throw a giant stack trace on the screen.


Github user merrimanr commented on the issue:

    https://github.com/apache/metron/pull/786
  
    I believe 2 and 4 are preexisting but I'm happy to fix them here.  Will update when I have resolved these issues.


Github user merrimanr commented on the issue:

    https://github.com/apache/metron/pull/786
  
    @justinleet 1, 2, and 3 have been addressed with the latest commit.  I also added a couple unit tests for good measure.  
    
    I wasn't able to easily reproduce 4 so I didn't fix that one.  It is not related to this at all and would probably make more sense in a separate bug fix PR. 


Github user justinleet commented on the issue:

    https://github.com/apache/metron/pull/786
  
    Yeah, 4 I'm definitely fine with being a separate PR.  I'll spin this up again quick and take another look.


Github user justinleet commented on the issue:

    https://github.com/apache/metron/pull/786
  
    @merrimanr Are those fixes the sort of thing we can/should add e2e tests for?  I know those are flaky, but it seems like we should be able to have semi-automated confirmation on the fixes.


Github user merrimanr commented on the issue:

    https://github.com/apache/metron/pull/786
  
    We don't have e2e tests for the management UI.  We do have unit tests and I added tests for these fixes there.


Github user justinleet commented on the issue:

    https://github.com/apache/metron/pull/786
  
    @merrimanr You are absolutely right, my bad.  Turns out I am illiterate in the morning.


Github user justinleet commented on the issue:

    https://github.com/apache/metron/pull/786
  
    Spun it up, noticed one other problem.  Unfortunately, again, I'm not sure if it's preexisting due to unfamiliarity. I stopped the bro topology (which was successful), then I started it again.  I got an error message about startup failing.  However, startup succeeded and things appeared to pick up normally.


Github user justinleet commented on the issue:

    https://github.com/apache/metron/pull/786
  
    Didn't see this happen while trying a second time time, or with snort and the logs don't seem to have anything interesting.


Github user justinleet commented on the issue:

    https://github.com/apache/metron/pull/786
  
    This happens intermittently for me.  An error in the dev tools when hitting `http://node1:4200/api/v1/storm/parser/start/bro` is:  
    ```
    (failed)
    net::ERR_EMPTY_RESPONSE
    ```
    
    The response timing is "stalled", is it possible that it simply takes too long to come back?


Github user justinleet commented on the issue:

    https://github.com/apache/metron/pull/786
  
    I spun up master and this also occurs there.  I'll create a JIRA for it.
    
    +1, thanks for the improvement!


Github user asfgit closed the pull request at:

    https://github.com/apache/metron/pull/786


