Github user hanm closed the pull request at:

    https://github.com/apache/zookeeper/pull/247


GitHub user hanm reopened a pull request:

    https://github.com/apache/zookeeper/pull/247

    ZOOKEEPER-2778: Potential server deadlock between follower sync with leader and follower receiving external connection requests.

    Remove synchronization requirements on certain methods to prevent dead lock. Current analysis indicates these methods don't require synchronization for them to work properly. Patch is stress tested with 1k runs of entire unit test suites.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hanm/zookeeper ZOOKEEPER-2778

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/zookeeper/pull/247.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #247
    
----
commit 4453ab2a32f8b1a6d195a65c5466c1749bbb3464
Author: Michael Han <hanm@apache.org>
Date:   2017-05-06T05:13:26Z

    Potential server deadlock between follower sync with leader and follower receiving external connection requests.
    Remove synchronization requirements on certain methods to prevent dead lock. Current analysis indicates these methods don't require synchronization for them to work properly.

----


+1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +0 tests included.  The patch appears to be a documentation patch that doesn't require tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/667//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/667//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/667//console

This message is automatically generated.

Github user afine commented on a diff in the pull request:

    https://github.com/apache/zookeeper/pull/247#discussion_r117582004
  
    --- Diff: src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java ---
    @@ -682,27 +682,19 @@ public void setQuorumAddress(InetSocketAddress addr){
         }
     
         public InetSocketAddress getElectionAddress(){
    -        synchronized (QV_LOCK) {
    -            return myElectionAddr;
    -        }
    +        return myElectionAddr;
    --- End diff --
    
    > All set code path was protected by QV_LOCK already, which implies that whoever calls set* should already acquire the QV_LOCK.
    
    Not sure about this one. `setElectionAddress` is called by `recreateSocketAddresses` which is called by `QuorumCnxManager#Listener.run` without acquiring QV_LOCK. Not sure what the implication of this is. Although I believe you are correct about `setClientAddress`.
    
    > if we get out dated addr (in case the current quorum peer is being reconfigured) and sent this to another peer, another peer will not able to connect but that's fine, it will retry until at certain point later it will get correct information.
    
    What is the behavior if we are able to connect to the "incorrect peer". Will we eventually disconnect or do we stay connected until reconfiguration occurs again?


Hello,

We are computer science PhD students building a Distributed model checking tool. We have been able to reproduce this issue too, when the QuorumPeer thread is racing with the Listener thread and gets into deadlock by requesting QCNXManager lock while holding QV_LOCK (on the other side, Listener thread holds QCNXManager lock and requests QV_LOCK). We also see this potential issue with the WorkerSender thread while performing toSend -> connectOne (one argument, requesting QCNXManager_LOCK) -> connectOne (two arguments, requesting QCNXManager_LOCK) -> initiateConnection -> getElectionAddress (requesting QV_LOCK) which can also race with the QuorumPeer thread for the same locks.



Thanks for your efforts on reproducing this bug (and many others), [~castuardo]! I'll resume working on this soon.

Hey,

Happy to help [~hanm]! Are we correct about the issue (regarding the path)?

bq. Are we correct about the issue (regarding the path)?

Yes it sounds right - what you said:
{noformat}
We also see this potential issue with the WorkerSender thread while performing toSend -> connectOne (one argument, requesting QCNXManager_LOCK) -> connectOne (two arguments, requesting QCNXManager_LOCK) -> initiateConnection -> getElectionAddress (requesting QV_LOCK) which can also race with the QuorumPeer thread for the same locks.
{noformat}

Feel free to create a separate JIRA for this issue.

[~hanm] 
Are you still working on this?Could I pick up it(smirk)?

[~maoling] Do you have an update on this ticket?

@  all
I was stuck with other staffs the other day.I will spare no effort to chase this girl down these day.

May I suggest a different approach?  There are three fragments of data here (myQuorumAddr, myClientAddr, and myElectionAddr) that should be 1) updated atomically as a group, and 2) aggressively made visible to concurrent threads on other CPUs.  There isn't really a need to lock out access to them while other code that holds QV_LOCK runs.  Seems like an ideal candidate for an AtomicReference to an immutable POJO that holds the three addresses.  Suggested patch in https://github.com/apache/zookeeper/pull/707

[~mkedwards]
I take a quick look at your patch.
the solution you had provided is so smart and elegant.incredible!

Is there a need to add a reader/writer lock that prevents read access to these addresses until they have been written for the first time?  I haven't yet looked closely enough at the code to see whether that's a possible scenario.

From what I'm seeing, it would be a crashing bug for {{getQuorumAddress()}} (which cannot be marked {{protected}}, because it's called by has-a holders of a {{QuorumPeer}} reference rather than by is-a subclasses of {{QuorumPeer}}, but can and should be package-private) to be called before the addresses are set.  The only call to {{getClientAddress()}} (which should be {{private}}) is in {{processReconfig()}}, and it's appropriate for it to return {{null}} if called early.  This leaves {{getElectionAddress()}}, which again is pseudo-protected and would produce a crash if called before the addresses are set.

So the actual problem here is that, if the election address is not yet known, there's no safe return value from {{getElectionAddress()}} in the race scenario cited in the bug description.  This "fix" – hanm's or mine – will turn it into an NPE instead of a deadlock.

This might be addressable by ensuring that code that needs the {{QV_LOCK}} for a {{QuorumPeer}} associated with a {{QuorumCnxManager}} (to protect the macroscopic critical sections in {{QuorumCnxManager.connectOne()}}, {{QuorumPeer.setLastSeenQuorumVerifier()}}, and {{QuorumPeer.setQuorumVerifier()}}) always takes the lock on the {{QuorumCnxManager}} instance first.  Looking into that.

I have to refresh my memory on this issue, but now looking back I think the gist of the issue is:
We want to guarantee to get a consistent membership view of the ensemble thus we need to lock (QV_LOCK) on the quorum peer when we access (read/write) to it. Meanwhile we need another lock on QCM itself and the order of acquiring both locks in different path is not consistent, thus causing dead lock.

The fix I proposed earlier and PR 707 did it by removing the QV lock on the read path. The problem is I am not sure how to validate its correctness given the intertwined code path :) - I previously while working on this was convinced removing QV_LOCK on read path of the three addresses is sound, now I am not sure.

We could also try remove one or both synchronized on the connectOne of QCM - it seems OK at least for the first connectOne (with two parameters) and this should fix this specific dead lock.

Another idea is to avoid QV lock completely by abstract the quorum verifier as an AtomicrReference similar as 707 did for three address field, if it's feasible to do so.

I have implemented a more complete fix which (I think) solves all the lock ordering and cross-thread visibility issues associated with the QV_LOCK, qcm, and address fields.  Testing now; assuming no surprises, I'll push it as an update to https://github.com/apache/zookeeper/pull/707.

Thanks to [~maoling] and [~andor] for quick review!  [~castuardo], @afine, any chance you might be able to take a look at the alternate patch?

Legit green build!

Note that the current version of this patch also addresses ZOOKEEPER-2488.

The current versions of this patch (#719 for master, #707 for branch-3.5) build green and don't have extraneous content.

Issue resolved by pull request 707
[https://github.com/apache/zookeeper/pull/707]

FAILURE: Integrated in Jenkins build Zookeeper-trunk-single-thread #137 (See [https://builds.apache.org/job/Zookeeper-trunk-single-thread/137/])
ZOOKEEPER-2778: QuorumPeer: address potential reconfiguration deadlocks (andor: rev 6ea3c0b6897ec3a833f5b86fe8612bc9b2ac672c)
* (edit) zookeeper-server/src/test/java/org/apache/zookeeper/test/ReconfigTest.java
* (edit) zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java
* (edit) zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LeaderBeanTest.java


SUCCESS: Integrated in Jenkins build ZooKeeper-trunk #298 (See [https://builds.apache.org/job/ZooKeeper-trunk/298/])
ZOOKEEPER-2778: QuorumPeer: address potential reconfiguration deadlocks (andor: rev 6ea3c0b6897ec3a833f5b86fe8612bc9b2ac672c)
* (edit) zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LeaderBeanTest.java
* (edit) zookeeper-server/src/test/java/org/apache/zookeeper/test/ReconfigTest.java
* (edit) zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java


