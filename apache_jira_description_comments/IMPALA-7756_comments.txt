[~tarmstrong]
This idea came up after the investigation of IMPALA-7471 - the DCHECK (actually a FILE_CHECK) that was hit has the exact goal off catching corrupt files like the one in the ticket, so removing the check does not seem like a valid fix. Replacing it with returning an error also doesn't seem a 100% good idea, as the code is run for every row in collection columns, so it could affect performance.

It seems beneficial to me to handle corrupt data properly and not ignore it. I think we should not have DCHECKs that can be triggered by input data at all. We can annotate any check for corrupt data as {{UNLIKELY(if...)}} to help the compiler generate efficient code. Would that not work here?

Yeah the FILE_CHECK macros were intended to be converted to proper error handling at some point. IIRC it was done to unblock the parquet nested type support since it was proving tricky to add the validation without affecting performance.

I think it's a bad idea in general to have divergent behaviour between the release and debug builds here, at least by default. Maybe it makes sense to have a development option to enable the checks in the debug build? So we can run some with that set but so we still test with behaviour matching the release build.

Maybe it's cheap enough to add an UNLIKELY() branch at some of these places though. It looks like it's mostly in the nested types scanning code.

