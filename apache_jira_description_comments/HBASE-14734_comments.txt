Weird. According to MiniKDC source the default configuration is to bind to an ephemeral port and then export the port via system property for everyone else to use. On the other hand, mina is only a dependency of MiniKDC via ApacheDS so this must be the offender. Maybe it's something ApacheDS is doing internally. 


In any event it's out of our hands I think. Either ApacheDS or Hadoop (MiniKDC). 

Thanks [~apurtell] Would it help if we picked a random port? Do you think the incidence of clash would go down? It is pretty rare at the moment but it regular enough.

(Not sure why history is showing it having run once only)

https://builds.apache.org/view/H-L/view/HBase/job/HBase-1.3/lastCompletedBuild/jdk=latest1.7,label=Hadoop/testReport/org.apache.hadoop.hbase.security.token/TestGenerateDelegationToken/org_apache_hadoop_hbase_security_token_TestGenerateDelegationToken/history/


We see it again here:

https://builds.apache.org/view/H-L/view/HBase/job/HBase-1.3/lastCompletedBuild/jdk=latest1.7,label=Hadoop/testReport/org.apache.hadoop.hbase.security.token/TestGenerateDelegationToken/org_apache_hadoop_hbase_security_token_TestGenerateDelegationToken/

Error Message

Address already in use
Stacktrace

java.net.BindException: Address already in use
	at sun.nio.ch.Net.bind0(Native Method)
	at sun.nio.ch.Net.bind(Net.java:463)
	at sun.nio.ch.Net.bind(Net.java:455)
	at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223)
	at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74)
	at org.apache.mina.transport.socket.nio.NioSocketAcceptor.open(NioSocketAcceptor.java:198)
	at org.apache.mina.transport.socket.nio.NioSocketAcceptor.open(NioSocketAcceptor.java:51)
	at org.apache.mina.core.polling.AbstractPollingIoAcceptor.registerHandles(AbstractPollingIoAcceptor.java:547)
	at org.apache.mina.core.polling.AbstractPollingIoAcceptor.access$400(AbstractPollingIoAcceptor.java:68)
	at org.apache.mina.core.polling.AbstractPollingIoAcceptor$Acceptor.run(AbstractPollingIoAcceptor.java:422)
	at org.apache.mina.util.NamePreservingRunnable.run(NamePreservingRunnable.java:64)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)

I don't think we have any control here 

Thanks [~apurtell] Let me take a look (sometime)...

Failed again here: https://builds.apache.org/view/H-L/view/HBase/job/HBase-1.2/lastCompletedBuild/jdk=latest1.8,label=Hadoop/testReport/org.apache.hadoop.hbase.security.token/TestGenerateDelegationToken/org_apache_hadoop_hbase_security_token_TestGenerateDelegationToken/



bq. In any event it's out of our hands I think. 

Yeah. Head of the MiniKDC class says:

bq. ...multiple MiniKdc instances cannot be started in parallel. For example, running testcases in parallel that start a KDC each. To accomplish this a single MiniKdc should be used for all testcases running 

It does just one test so maybe I can move the setup/teardown into the test and if a bind address issue, log a WARN but not fail the test, or try again with a new port myself.

Again https://builds.apache.org/view/H-L/view/HBase/job/HBase-1.3/lastCompletedBuild/jdk=latest1.7,label=Hadoop/testReport/org.apache.hadoop.hbase.security.token/TestGenerateDelegationToken/org_apache_hadoop_hbase_security_token_TestGenerateDelegationToken/

I don't think the issue here is related to restriction on being able to run only single KDC at a time. Minikdc comments say that the restriction is because of two system level properties, but those properties are not used until [here|https://github.com/apache/hadoop/blob/branch-2.6.0/hadoop-common-project/hadoop-minikdc/src/main/java/org/apache/hadoop/minikdc/MiniKdc.java#L461] and that too, just to write a file. If we ever reached there, the kdc starting later would have overwritten the file and the test which were using old kdc would have started using new kdc and started failing.

But the failure we are seeing is happening because the port gets allocated [here|https://github.com/apache/hadoop/blob/branch-2.6.0/hadoop-common-project/hadoop-minikdc/src/main/java/org/apache/hadoop/minikdc/MiniKdc.java#L270] (in MiniKdc's constructor), but gets binded to [here|http://grepcode.com/file/repo1.maven.org/maven2/org.apache.directory.server/apacheds-protocol-kerberos/1.5.7/org/apache/directory/server/kerberos/kdc/KdcServer.java#511] (on calling MiniKdc.start()-->MiniKdc.initKDCServer() --> KdcServer.start()). And in meantime, some other service captures the port. It seems that this can happen frequently enough to justify the rate with which we see the errors.



(Note that the code links are from hadoop-2.6.0 branch because the minikdc code in hadoop master is significantly different).

I was thinking of a solution on lines of reserving some ports and then passing them to minikdc so it can use it. But seems like that ain't the way. http://unix.stackexchange.com/questions/15511/how-do-i-reserve-ports-for-my-application.

Seems like the way stack suggested above might be the best i.e. check for exception and retry.

This is great work.  +++++++++1  This is an old issue that generates random flakies. It is great having a fix. Chatting offline, sounds like a test might be possible which'd be coolio.

Gave a try at test after the chat, but now it seems that we actually can't test it. The problem is, we are dealing with ports over which we don't have full control. We can block a port and make sure that kdc setup fails, but we can't ensure an always available dedicated port  to test that kdc setup succeeds.
Here's the test, not committing it but putting here for posterity.

{noformat}
  @Test
  void TestMiniKdcSetupBindException() throws Exception {
    HBaseTestingUtility hbt = new HBaseTestingUtility();
    ServerSocket socket = new ServerSocket(0);
    int port = socket.getLocalPort();

    boolean exception = false;
    try {
      hbt.setupMiniKdc(null, port);
    } catch (BindException e) {
      exception = true;
    }
    assertTrue("setupMiniKdc didn't encounter exception even though port was not available.",
        exception);

    // Close the socket and try again. Shouldn't get exception now.
    socket.close();
    exception = false;
    try {
      hbt.setupMiniKdc(null, port);
    } catch (BindException e) {
      exception = true;
    }
    // It's possible that port gets captured by some other service. So this test itself is flaky by
    // nature.
    assertTrue("setupMiniKdc encountered exception even though port was closed.", exception);
  }
{noformat}

Chatted with stack, will commit current patch itself.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 12s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 5 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 10m 42s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 43s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 1m 11s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 26s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 55s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 54s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 52s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 41s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 41s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 51s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 15s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 29m 40s {color} | {color:green} Patch does not cause any errors with Hadoop 2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.1 2.6.2 2.6.3 2.7.1. {color} |
| {color:green}+1{color} | {color:green} hbaseprotoc {color} | {color:green} 0m 13s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 2m 4s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 29s {color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 98m 39s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 25s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 150m 39s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Timed out junit tests | org.apache.hadoop.hbase.client.TestReplicasClient |
|   | org.apache.hadoop.hbase.client.TestMultiRespectsLimits |
|   | org.apache.hadoop.hbase.client.TestIncrementFromClientSideWithCoprocessor |
|   | org.apache.hadoop.hbase.client.TestSnapshotMetadata |
|   | org.apache.hadoop.hbase.client.TestHCM |
|   | org.apache.hadoop.hbase.client.TestRestoreSnapshotFromClientWithRegionReplicas |
|   | org.apache.hadoop.hbase.client.TestMobCloneSnapshotFromClient |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.11.2 Server=1.11.2 Image:yetus/hbase:7bda515 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12829654/HBASE-14734.master.001.patch |
| JIRA Issue | HBASE-14734 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux d24401a28685 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / 5568929 |
| Default Java | 1.8.0_101 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/3634/artifact/patchprocess/patch-unit-hbase-server.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-HBASE-Build/3634/artifact/patchprocess/patch-unit-hbase-server.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/3634/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/3634/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



Patch isn't touching any of the failing tests. It touches HBaseTestingUtility, but only adds a function without changing any existing logic. So the failures are totally unrelated.
Still, ran the above timed out tests locally and they passed.
Committing.
{noformat}
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
Running org.apache.hadoop.hbase.client.TestHCM
^[[DTests run: 24, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 310.58 sec - in org.apache.hadoop.hbase.client.TestHCM
Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
Running org.apache.hadoop.hbase.client.TestIncrementFromClientSideWithCoprocessor
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 22.301 sec - in org.apache.hadoop.hbase.client.TestIncrementFromClientSideWithCoprocessor
Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
Running org.apache.hadoop.hbase.client.TestMobCloneSnapshotFromClient
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 113.521 sec - in org.apache.hadoop.hbase.client.TestMobCloneSnapshotFromClient
Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
Running org.apache.hadoop.hbase.client.TestMultiRespectsLimits
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 24.173 sec - in org.apache.hadoop.hbase.client.TestMultiRespectsLimits
Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
Running org.apache.hadoop.hbase.client.TestReplicasClient
Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 254.478 sec - in org.apache.hadoop.hbase.client.TestReplicasClient
Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
Running org.apache.hadoop.hbase.client.TestRestoreSnapshotFromClientWithRegionReplicas
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 94.408 sec - in org.apache.hadoop.hbase.client.TestRestoreSnapshotFromClientWithRegionReplicas
Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
Running org.apache.hadoop.hbase.client.TestSnapshotMetadata
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 37.885 sec - in org.apache.hadoop.hbase.client.TestSnapshotMetadata

Results :

Tests run: 61, Failures: 0, Errors: 0, Skipped: 1
{noformat}

FAILURE: Integrated in Jenkins build HBase-1.2-JDK7 #29 (See [https://builds.apache.org/job/HBase-1.2-JDK7/29/])
HBASE-14734 Prevent BindException when setting up MiniKdc. Port for kdc (appy: rev 79531fd95f1b7b72ad1f764d7cd57e37467a4b2a)
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/token/TestGenerateDelegationToken.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestUsersOperationsWithSecureHadoop.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestSecureRPC.java


FAILURE: Integrated in Jenkins build HBase-1.4 #421 (See [https://builds.apache.org/job/HBase-1.4/421/])
HBASE-14734 Prevent BindException when setting up MiniKdc. Port for kdc (appy: rev e7e660d5b2b6ed915ec7614e8d7070f9a51d091f)
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/AbstractTestSecureIPC.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestUsersOperationsWithSecureHadoop.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/token/SecureTestCluster.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java


FAILURE: Integrated in Jenkins build HBase-Trunk_matrix #1650 (See [https://builds.apache.org/job/HBase-Trunk_matrix/1650/])
HBASE-14734 Prevent BindException when setting up MiniKdc. Port for kdc (appy: rev 593fb750835ebf5e74cdd42945d65fcf71b32c1e)
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/io/asyncfs/TestSaslFanOutOneBlockAsyncDFSOutput.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/token/SecureTestCluster.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestSecureIPC.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestUsersOperationsWithSecureHadoop.java


FAILURE: Integrated in Jenkins build HBase-1.3-JDK7 #18 (See [https://builds.apache.org/job/HBase-1.3-JDK7/18/])
HBASE-14734 Prevent BindException when setting up MiniKdc. Port for kdc (appy: rev 1c42948d5ec691b1f27b5c61f5589fdf59e16b6c)
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestUsersOperationsWithSecureHadoop.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/AbstractTestSecureIPC.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/token/SecureTestCluster.java


FAILURE: Integrated in Jenkins build HBase-1.2-JDK8 #26 (See [https://builds.apache.org/job/HBase-1.2-JDK8/26/])
HBASE-14734 Prevent BindException when setting up MiniKdc. Port for kdc (appy: rev 79531fd95f1b7b72ad1f764d7cd57e37467a4b2a)
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestUsersOperationsWithSecureHadoop.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestSecureRPC.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/token/TestGenerateDelegationToken.java


FAILURE: Integrated in Jenkins build HBase-1.3-JDK8 #19 (See [https://builds.apache.org/job/HBase-1.3-JDK8/19/])
HBASE-14734 Prevent BindException when setting up MiniKdc. Port for kdc (appy: rev 1c42948d5ec691b1f27b5c61f5589fdf59e16b6c)
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/token/SecureTestCluster.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestUsersOperationsWithSecureHadoop.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/security/AbstractTestSecureIPC.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java


Reopening. git bisect reveals this patch as the source for our nightly failures on branch 1.2+ due to a ClassNotFoundException in the hbase-shell module. Looks like the change introduces a dependency on MiniKDC that hten isn't fulfilled come time for our hbase shell tests.

[~appy] think you can come up with an addendum or follow on ticket today? Otherwise, I'd like to revert so I can get the 1.2.4 RC out.

Done. HBASE-16682
last time i was backporting it, i had to stop at branch-1 itself because of some failure (there in its comments).

