Avoided the need for a intermediate byte array by directly writing into the DataOutputBuffer used by Hadoop.  DataOutputBuffer is

{code}
@InterfaceAudience.LimitedPrivate({"HDFS", "MapReduce"})
@InterfaceStability.Unstable
{code}

but we use it directly in Tez in lots of places. So I hope that is fine.  Added an else clause logic just for completeness sake and changed it to reuse a 8K buffer.

It would have been easy if we can do bb.array(), but because it is a read only ByteBuffer could do nothing about it. Started with changing UserPayLoad to return payload.duplicate() instead of payload.asReadOnlyBuffer(), but that did not work as the payload was already read only.  UserPayLoad ByteBuffer is constructed from ByteString.asReadOnlyByteBuffer() and there is no way to get around that as ByteString does not expose the underlying array at all. 

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12789963/TEZ-3140-1.patch
  against master revision bdcdfcc.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/1513//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/1513//console

This message is automatically generated.

bq. -1 tests included. The patch doesn't appear to include any new or modified tests.
  Just change in serialization logic. Existing tests (For eg: TestMRRJobs) cover that and they will fail if even if 1 byte is not copied correctly.

The main intent here is to avoid creating huge buffers while sending data to tasks - use the buffer created by the RPC layer itself, otherwise restrict to 8K at max ?
We really should move this over to the Protobuf engine - though that may end up forcing the buffer creation as well.

The changes look good to me.
Minor: SERIALIZE_BUFFER_SIZE, ByteBufferDataInput.bb should be final
I think it's worthwhile to add a unit test for the serialization loop - a simple test to write an EntityDescriptor with a payload less than 8K and another > 8K. ByteBuffer changes have caused problems in the past.

There are other cases in Hadoop code where they need to do something similar, and if we want to avoid the custom ByteBufferDataInput class I think we could reuse the DataInputByteBuffer and accomplish the same no-copy semantics like this:
{code}
        if (out instanceof DataOutputBuffer) {
          DataOutputBuffer dub = (DataOutputBuffer) out;
          DataInputByteBuffer dibb = new DataInputByteBuffer();
          dibb.reset(bb);
          dub.write(dibb, size);
{code}

ShuffleUtils and DagTypeConverters are already doing similar things with DataInputByteBuffer.


The DataInputByteBuffer extends DataInputStream which has these nasty hidden buffers. That's why this class needs to be avoided.
{noformat}
private byte bytearr[] = new byte[80];
private char chararr[] = new char[80];
{noformat}

Updated patch addressing review comments from [~sseth].  

Did not switch to DataInputByteBuffer to avoid the unnecessary objects it creates. There are couple more in DataInputByteBuffer.Buffer class (scratch, buffers, bidx, pos, length) apart from ones in DataInputStream mentioned by Jon. Though the sizes are negligible, decided to stick with the wrapper class in the patch as that has zero object and size additional overhead. 

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12790501/TEZ-3140-2.patch
  against master revision 18398c8.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in :
                   org.apache.tez.dag.app.rm.TestContainerReuse

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/1530//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/1530//console

This message is automatically generated.

The new patch only has a test added and variables declared as final. Failure of https://builds.apache.org/job/PreCommit-TEZ-Build/1530/testReport/junit/org.apache.tez.dag.app.rm/TestContainerReuse/testReuseConflictLocalResources/ is not related. Seems to be flaky. Runs fine in laptop.

+1. Could you please move the test into a new file before commit - TestEntityDescriptor before commit. The test doesn't have too much to do with DagTypeConverters.

bq. The test doesn't have too much to do with DagTypeConverters.
  Yes. Could not find a appropriate test class to add to and looked like overkill to create one class for that test considering it is forking a jvm for each test class. Added that to  TestDagTypeConverters as it had testTezEntityDescriptorSerialization which tested the protobuf serialization for EntityDescriptor and actually started writing this test copying over stuff from that. So think it should not be that bad to leave it there considering there are two tests that are related though not exactly to the test class. I can move it to a separate class if you still think that would be more clean.

I think it's better to set this up in it's own test class - not very costly, and the test is really only testing how EntityDescriptor handles serialization. However, go ahead if you don't think a new class is warranted.

Committed to branch-0.7 and master. Attaching the final patch TEZ-3140-3.patch  which moves the test to TestEntityDescriptor.java.  Thanks [~sseth] for the review.

Closing as 0.7.1 released.

