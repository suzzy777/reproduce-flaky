Yes, ITEM should be declared as "strong", in the sense that {{x[y]}} is null if {{x}} is null. But we don't have "only if"; I don't recall whether we need "only if" to safely push through outer joins.

A test case for reproduction 
{code:java}
@Test public void test() {
  HepProgram program = new HepProgramBuilder()
      .addRuleInstance(ProjectJoinTransposeRule.INSTANCE)
      .build();

  checkPlanning(program, "" +
    "select B.col2['k1']\n" +
    "from\n" +
    "(select 1 col0, 2 col1, map['k1','v1','k2','v2'] col2) A\n" +
    "left join\n" +
    "(select 1 col0, 2 col1, map['k1','v1','k2','v2'] col2) B\n" +
    "on A.col0 = B.col0");
}

Result Plan as Below:
LogicalProject(EXPR$0=[ITEM($2, 'k1')])
  LogicalJoin(condition=[=($0, $1)], joinType=[left])
    LogicalProject(COL0=[$0])
      LogicalProject(COL0=[1], COL1=[2], COL2=[MAP('k1', 'v1', 'k2', 'v2')])
        LogicalValues(tuples=[[{ 0 }]])
    LogicalProject(COL0=[$0], COL2=[$2])
      LogicalProject(COL0=[1], COL1=[2], COL2=[MAP('k1', 'v1', 'k2', 'v2')])
        LogicalValues(tuples=[[{ 0 }]]){code}
SqlKind of ITEM is OTHER_FUNCTION, thus the Policy for checking Strong-ness is not ANY but AS_IS. Shall we add an independent SqlKind for it ? And set the Strong-ness checking Policy to be ANY.

 

 

Thanks [~julianhyde] and [~jinxing6042@126.com] for your suggestions.  That's pretty much along the lines of what I discussed with [~volodymyr] and have a WIP branch here [1].  I am in the process of checking whether it breaks any of our tests in Drill before creating a PR. 

[1] https://github.com/amansinha100/incubator-calcite/commit/08e74a48932a8458d72cd5550c7c0ea9e677f7f5


Fixed in [a02155a|https://github.com/apache/calcite/commit/a02155a70a1fe98c8930a0060dc043902ebbd88f], thanks for your PR, [~amansinha100] !

Resolved in release 1.22.0 (2020-03-05).

