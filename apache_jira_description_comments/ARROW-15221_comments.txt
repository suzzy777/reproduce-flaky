There seems to be a lot flakiness in those tests, there are other issues open (for possibly different underlying issues).

New one from Travis. [https://app.travis-ci.com/github/apache/arrow/jobs/568309093] 
{noformat}
34/74 Test #35: arrow-compute-hash-join-node-test .........***Failed    9.28 sec

Running arrow-compute-hash-join-node-test, redirecting output into /build/cpp/build/test-logs/arrow-compute-hash-join-node-test.txt (attempt 1/1)

/arrow/cpp/build-support/run-test.sh: line 88: 18487 Aborted                 (core dumped) $TEST_EXECUTABLE "$@" > $LOGFILE.raw 2>&1

Running main() from /build/cpp/googletest_ep-prefix/src/googletest_ep/googletest/src/gtest_main.cc

[==========] Running 27 tests from 4 test suites.

[----------] Global test environment set-up.

[----------] 8 tests from HashJoin

[ RUN      ] HashJoin.Suffix

[       OK ] HashJoin.Suffix (20 ms)

[ RUN      ] HashJoin.Random

/arrow/cpp/src/arrow/util/mutex.cc:51:  Check failed: (impl_) != (nullptr)

/usr/local/lib/libarrow.so.800(arrow::util::CerrLog::PrintBackTrace()+0x3e)[0x3ffbabf6336]

/usr/local/lib/libarrow.so.800(arrow::util::CerrLog::~CerrLog()+0x7c)[0x3ffbabf626c]

/usr/local/lib/libarrow.so.800(arrow::util::CerrLog::~CerrLog()+0x22)[0x3ffbabf62a2]

/usr/local/lib/libarrow.so.800(arrow::util::ArrowLog::~ArrowLog()+0x6e)[0x3ffbabcd2be]

/usr/local/lib/libarrow.so.800(arrow::util::Mutex::Lock()+0xce)[0x3ffbabd05f6]

/usr/local/lib/libarrow.so.800(arrow::util::AsyncTaskGroup::AddTask(arrow::Future<arrow::internal::Empty> const&)+0x56)[0x3ffbac90bb6]

/usr/local/lib/libarrow.so.800(arrow::compute::HashJoinNode::ScheduleTaskCallback(std::function<arrow::Status (unsigned long)>)+0x172)[0x3ffba825c7a]

/usr/local/lib/libarrow.so.800(arrow::compute::HashJoinNode::StartProducing()::{lambda(std::function<arrow::Status (unsigned long)>)#5}::operator()(std::function<arrow::Status (unsigned long)>) const+0x80)[0x3ffba824950]

/usr/local/lib/libarrow.so.800(std::_Function_handler<arrow::Status (std::function<arrow::Status (unsigned long)>), arrow::compute::HashJoinNode::StartProducing()::{lambda(std::function<arrow::Status (unsigned long)>)#5}>::_M_invoke(std::_Any_data const&, std::function<arrow::Status (unsigned long)>&&)+0x84)[0x3ffba84deac]

/usr/local/lib/libarrow.so.800(std::function<arrow::Status (std::function<arrow::Status (unsigned long)>)>::operator()(std::function<arrow::Status (unsigned long)>) const+0x8c)[0x3ffba6f9394]

/usr/local/lib/libarrow.so.800(arrow::compute::TaskSchedulerImpl::ScheduleMore(unsigned long, int)+0x404)[0x3ffba67ad34]

/usr/local/lib/libarrow.so.800(arrow::compute::TaskSchedulerImpl::StartTaskGroup(unsigned long, int, long)+0x320)[0x3ffba679708]

/usr/local/lib/libarrow.so.800(arrow::compute::HashJoinBasicImpl::ScanHashTable(unsigned long)+0xa6)[0x3ffba821856]

/usr/local/lib/libarrow.so.800(arrow::compute::HashJoinBasicImpl::OnLeftSideAndQueueFinished(unsigned long)+0x52)[0x3ffba821af2]

/usr/local/lib/libarrow.so.800(arrow::compute::HashJoinBasicImpl::ProbeQueuedBatches_on_finished(unsigned long)+0x118)[0x3ffba820b38]

/usr/local/lib/libarrow.so.800(arrow::compute::HashJoinBasicImpl::RegisterProbeQueuedBatches()::{lambda(unsigned long)#2}::operator()(unsigned long) const+0x5c)[0x3ffba820d04]

/usr/local/lib/libarrow.so.800(std::_Function_handler<arrow::Status (unsigned long), arrow::compute::HashJoinBasicImpl::RegisterProbeQueuedBatches()::{lambda(unsigned long)#2}>::_M_invoke(std::_Any_data const&, unsigned long&&)+0x74)[0x3ffba846f7c]

/usr/local/lib/libarrow.so.800(std::function<arrow::Status (unsigned long)>::operator()(unsigned long) const+0x90)[0x3ffba6f9010]

/usr/local/lib/libarrow.so.800(arrow::compute::TaskSchedulerImpl::OnTaskGroupFinished(unsigned long, int, bool*)+0x1ea)[0x3ffba679f42]

/usr/local/lib/libarrow.so.800(+0x2c7a8ea)[0x3ffba67a8ea]

/usr/local/lib/libarrow.so.800(+0x2cb42fc)[0x3ffba6b42fc]

/usr/local/lib/libarrow.so.800(std::function<arrow::Status (unsigned long)>::operator()(unsigned long) const+0x90)[0x3ffba6f9010]

/usr/local/lib/libarrow.so.800(arrow::compute::HashJoinNode::ScheduleTaskCallback(std::function<arrow::Status (unsigned long)>)::{lambda()#1}::operator()() const+0x74)[0x3ffba8259ac]

/usr/local/lib/libarrow.so.800(std::enable_if<std::is_void<void>::value, void>::type arrow::detail::ContinueFuture::operator()<arrow::compute::HashJoinNode::ScheduleTaskCallback(std::function<arrow::Status (unsigned long)>)::{lambda()#1}&, , void, arrow::Future<arrow::internal::Empty> >(arrow::Future<arrow::internal::Empty>, arrow::compute::HashJoinNode::ScheduleTaskCallback(std::function<arrow::Status (unsigned long)>)::{lambda()#1}&) const+0x50)[0x3ffba898208]

/usr/local/lib/libarrow.so.800(void std::__invoke_impl<void, arrow::detail::ContinueFuture&, arrow::Future<arrow::internal::Empty>&, arrow::compute::HashJoinNode::ScheduleTaskCallback(std::function<arrow::Status (unsigned long)>)::{lambda()#1}&>(std::__invoke_other, arrow::detail::ContinueFuture&, arrow::Future<arrow::internal::Empty>&, arrow::compute::HashJoinNode::ScheduleTaskCallback(std::function<arrow::Status (unsigned long)>)::{lambda()#1}&)+0x8e)[0x3ffba897df6]

/usr/local/lib/libarrow.so.800(std::__invoke_result<arrow::detail::ContinueFuture&, arrow::Future<arrow::internal::Empty>&, arrow::compute::HashJoinNode::ScheduleTaskCallback(std::function<arrow::Status (unsigned long)>)::{lambda()#1}&>::type std::__invoke<arrow::detail::ContinueFuture&, arrow::Future<arrow::internal::Empty>&, arrow::compute::HashJoinNode::ScheduleTaskCallback(std::function<arrow::Status (unsigned long)>)::{lambda()#1}&>(std::__invoke_result&&, (arrow::detail::ContinueFuture&)...)+0x7a)[0x3ffba897762]

/usr/local/lib/libarrow.so.800(void std::_Bind<arrow::detail::ContinueFuture (arrow::Future<arrow::internal::Empty>, arrow::compute::HashJoinNode::ScheduleTaskCallback(std::function<arrow::Status (unsigned long)>)::{lambda()#1})>::__call<void, , 0ul, 1ul>(std::tuple<>&&, std::_Index_tuple<0ul, 1ul>)+0xb0)[0x3ffba896f68]

/usr/local/lib/libarrow.so.800(void std::_Bind<arrow::detail::ContinueFuture (arrow::Future<arrow::internal::Empty>, arrow::compute::HashJoinNode::ScheduleTaskCallback(std::function<arrow::Status (unsigned long)>)::{lambda()#1})>::operator()<, void>()+0x52)[0x3ffba896742]

/usr/local/lib/libarrow.so.800(arrow::internal::FnOnce<void ()>::FnImpl<std::_Bind<arrow::detail::ContinueFuture (arrow::Future<arrow::internal::Empty>, arrow::compute::HashJoinNode::ScheduleTaskCallback(std::function<arrow::Status (unsigned long)>)::{lambda()#1})> >::invoke()+0x38)[0x3ffba895fe8]

/usr/local/lib/libarrow.so.800(arrow::internal::FnOnce<void ()>::operator()() &&+0x70)[0x3ffbabacfc8]

/usr/local/lib/libarrow.so.800(+0x319ab38)[0x3ffbab9ab38]

/usr/local/lib/libarrow.so.800(+0x31a7320)[0x3ffbaba7320]

/usr/local/lib/libarrow.so.800(arrow::internal::FnOnce<void ()>::operator()() &&+0x70)[0x3ffbabacfc8]

/usr/local/lib/libarrow.so.800(+0x319948e)[0x3ffbab9948e]

/usr/local/lib/libarrow.so.800(+0x319a82c)[0x3ffbab9a82c]

/usr/local/lib/libarrow.so.800(+0x31a75b4)[0x3ffbaba75b4]

/usr/local/lib/libarrow.so.800(+0x31a74e6)[0x3ffbaba74e6]

/usr/local/lib/libarrow.so.800(+0x31a741e)[0x3ffbaba741e]

/usr/local/lib/libarrow.so.800(+0x31a73ae)[0x3ffbaba73ae]

/usr/local/lib/libarrow.so.800(+0x31a7292)[0x3ffbaba7292]

/lib/s390x-linux-gnu/libstdc++.so.6(+0xea136)[0x3ffb75ea136]

/lib/s390x-linux-gnu/libpthread.so.0(+0x7e66)[0x3ffb7107e66]

/lib/s390x-linux-gnu/libc.so.6(+0xfcbf6)[0x3ffb737cbf6]

[0x0]

/build/cpp/src/arrow/compute/exec
 {noformat}

This issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned per [project policy|https://arrow.apache.org/docs/dev/developers/bug_reports.html#issue-assignment]. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon.

This issue has been migrated to [issue #20052|https://github.com/apache/arrow/issues/20052] on GitHub. Please see the [migration documentation|https://github.com/apache/arrow/issues/14542] for further details.

