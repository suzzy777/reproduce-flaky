The following is a summary of the functionalities of the API

1. performing on-demand snapshotting
2. applying all the transactions persisted in the transaction logs and taking a snapshots
3. streaming out the snapshot data as bytes 
4. rate limiting the request to make the server is not overloaded








There are some overlap between this and the in-progress work done in https://issues.apache.org/jira/browse/ZOOKEEPER-3499. 

 [~maoling] thanks for the great work. I wonder what is the plan for https://github.com/apache/zookeeper/pull/1044 and if we can consolidate the work and get the automated backup feature move forward. 

I think this one can be built on top of https://github.com/apache/zookeeper/pull/1044, streaming out data after creating the snapshot file.  [~maoling] any thoughts or input on this?






I'm concerned that a write operation, and a potentially heavy weight one at that, is being added to the adminserver api - which has no auth controls. Additionally the defaults for the endpoint are sketchy aside from this feature (on by default, no HTTPS, etc...): https://zookeeper.apache.org/doc/r3.8.0/zookeeperAdmin.html#sc_adminserver_config

Not the fault of this feature, but it's something which needs to be considered if we're expanding the scope from "read some stats from the server" to "run operations on the server".

ps - awesome to see the docs were updated as part of this patch, kudos.

That said - there isn't much detail on the semantics of the "backup" - eg, what "version" am I getting? How do I know which version is the backup representing? For example, the return value from the curl call could (imo should) include some indication of the zxid corresponding to the snapshot. That would allow me to eg correlate btw. IMO likely the snapshot directory itself should include this information prominently - I don't see anything detailing the naming of the backup dir. 

I think allowing "# the parameter: snapDir which can specify the directory to store the snapshot" is probably a major security hole as well. Is this limited to a particular subdirectory? If not then there's all kinds of bad stuff an attacker could do....

There have been some discussions on similar feature in the past. Adding the links here for reference.

https://issues.apache.org/jira/browse/ZOOKEEPER-3318
https://github.com/apache/zookeeper/pull/917

{quote}it's something which needs to be considered if we're expanding the scope from "read some stats from the server" to "run operations on the server".{quote}

Totally agree. The feature can only enabled if HTTPs is enforced. Also some sort of auth control on admin server APIs is needed. I have some ideas and will be shared via the design doc. I also posted a message in the dev community a while ago for more discussion on the topic. Thanks for bringing it up and looking forward to more discussions.

{quote}That said - there isn't much detail on the semantics of the "backup" - eg, what "version" am I getting? How do I know which version is the backup representing? For example, the return value from the curl call could (imo should) include some indication of the zxid corresponding to the snapshot. That would allow me to eg correlate btw. IMO likely the snapshot directory itself should include this information prominently - I don't see anything detailing the naming of the backup dir.{quote}

I saw last_zxid is returned in the response payload in the https://github.com/apache/zookeeper/pull/1044.[~maoling] can probably comment more on this. 

When streaming snapshot data back to client, how to include the "metadata" is something we can discuss more too.

{quote}I think allowing "# the parameter: snapDir which can specify the directory to store the snapshot" is probably a major security hole as well. Is this limited to a particular subdirectory? If not then there's all kinds of bad stuff an attacker could do....{quote}

Looking at the https://github.com/apache/zookeeper/pull/1044, it doesn't look like there is any restriction the snapDir.

Design doc: https://docs.google.com/document/d/1UHf07ZnPi_Kyos7-DRnANmkuhv1BILNGJanZkBv12WA/edit?usp=sharing

[~phunt] I totally agree.

And we should start a separate initiative to support Authentication and Authorisation on the Admin API.

That can be a independent work, seen as a pre-requisite.

Â 

[~liwang] nice work, I have added this comment on the GDoc as well.

