I agree that StressTestNonBlocking is unstable on Windows. I think it may better be disabled for all users on Windows. I've submitted a corresponding PR to disable the test on Windows.

Also, when looking at the test results, I'm under the impression that the implementation of StressTestNonBlocking may be flaky. On average, one out of two runs of StressTestNonBlocking dies on MSVC, with errors such as:
{code}
[...]
 433: Thrift: Mon Apr 20 10:42:23 2020 TNonblockingServer: IO thread #0 entering loop...
 433: Launch 20 client threads
 433: workers :4, client : 20, loops : 1000, rate : 132.213
 433: echoVoid => 20000
 433: done.
 433: Thrift: Mon Apr 20 10:44:55 2020 TNonblocking: notifyHandler read() failed: : errno = 10093
 433: Thrift: Mon Apr 20 10:
 23/26 Test #433: StressTestNonBlocking ......................   Passed  152.30 sec
{code}

The "curious" lines are
{code}
 433: Thrift: Mon Apr 20 10:44:55 2020 TNonblocking: notifyHandler read() failed: : errno = 10093
 433: Thrift: Mon Apr 20 10:
{code}
I'm under the impression that there is a crash or problem, but potentially in a separate thread, and not transferred to the main application. The test is marked as "passed"! However, one out of five runs, the test ends more critically and gets terminated in error state.

So, while disabling the flaky test seems reasonable, it may be good to check if the error handling for multi-threading is correct and complete. Something may be fishy there. Better error handling may help to pinpoint to the underlying problem.

