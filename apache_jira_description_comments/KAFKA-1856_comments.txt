Thanks for filing this [~singhashish]! Look forward to this.

RB: https://reviews.apache.org/r/29893/.

Tested on [KAFKA-1664|https://issues.apache.org/jira/browse/KAFKA-1664?focusedCommentId=14277439&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14277439].

[~nehanarkhede] and [~joestein], could you guys take a look. I can then try to get started with steps 2 and 3.

[~singhashish], I see many errors in the tests on KAFKA-1664, yet the build on trunk is successful: https://builds.apache.org/view/All/job/Kafka-trunk/

Any idea what's going on?

once this is working let me know and I can create the Jenkins build for whatever we need

[~gwenshap] those errors are due to flaky tests. I was running tests back to back multiple times. I will give it a try on some other JIRA to be sure.

Any idea what do other projects do about flaky tests?

I can speak of Apache Hive. The contributor takes a look at the failed tests and comments whether those tests are related or not. If he/she feels the failing tests are not related to the patch, they say so in his/her comment. The reviewer then takes a second look before giving a +1. This will force us to fix the flaky tests, which I believe is a good thing.

So, I re-ran it on KAFKA-1664, https://issues.apache.org/jira/browse/KAFKA-1664?focusedCommentId=14280988&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14280988. Makes much more sense now.

It does!

SQOOP's precommit hook contains a link to the jenkins report, so we can see the exact error that led to failure. This is great because some tests have multiple assert() statements. (For example: https://issues.apache.org/jira/browse/SQOOP-2022)

Do you think this is something we can add in your script? (obviously it won't work until we actually run from Jenkins. Thats expected).



btw. can you test on a non-trunk version? like 0.8.2? 

[~gwenshap] If jenkins job specifies {{BUILD_URL}}, then the link will be printed as well. So, yes it will work.

I noticed that many JIRAs mention 0.8.3 or 0.9.0 as the fix versions, those branches not yet exist. I am trying to understand how branching is done in Kafka. 0.8.1 came out of trunk and then was merged with trunk. 0.8.2 was again forked out of trunk. However, I think its not always true, as I was not able to build KAFKA-1694's patch with trunk, not even with 0.8.2. Could you help me understand branching aspect of the project a bit?

The way we have been developing since from incubation is on trunk. When we are ready (or close to ready) we make a branch for that release off of trunk. This allows new work to occur on trunk and any blockers to be double committed to branch release and trunk. If we ever need (as was the case with 0.8.0) to make a an update on that branched release we update on that branch (again double committing to trunk). When we actually do a final release we have it on a tag e.g. 0.8.1.0, 0.8.1.1, 0.8.2.0 etc so as to not conflict with the branch name and give the branch the ability for minor blocker fixes to get out.

[~joestein] thanks for the info here!

I was testing out preCommit testing patch on KAFKA-1694. I applied its latest patch on "trunk" successfully. However, compilation failed. Am I correct with my understanding that KAFKA-1694's patch must have been built on trunk?

Also, could you confirm that I can safely assume that all the patches must be applied to "trunk". However, patches for which {{fixVersion}} is in the form of A.B.C.D, patch must be applied on A.B.C branch.

Patches where A.B.C branch exist, should be applied on A.B.C branch. If A.B.C doesn't exist (0.8.3, 0.9), they should be applied on trunk. This should explain KAFKA-1694.

You can open a JIRA with a "fake patch" for the purpose of testing builds on different releases.


[~gwenshap] in that case current logic in the patch should just work fine. Will test it out on few more JIRAs. Fake JIRA is not required as I have an option of not posting the result.

Updated reviewboard https://reviews.apache.org/r/29893/
 against branch trunk

[~gwenshap] I have tested both cases, one where fix version is an existing branch and one where it is not.

Non-binding +1 from me :)
Looks good and I'm excited about getting automated results on the JIRA.

[~joestein]:
If this also looks good to you, perhaps you can commit and create a jenkins job as described here:  http://wiki.apache.org/general/PreCommitBuilds ?

Once we ask Apache Infra to automatically run this when patches become available, test results will be very visible on every JIRA. We should probably warn the community before doing that.



Once KAFKA-1915 is in, will be nice to include it in the pre-commit checks.

[~singhashish] can you double check that --output flag works? I think we'll need it for the jenkins job.

[~gwenshap] I have tried the {{--output}} and it works as expected. Let me know if that does not work for you.

Here's what I did and the result:

{code}
gshapira-MBP:kafka gshapira$ python ./dev-utils/test-patch.py --defect KAFKA-1809 --output patch-process --run-tests 

Defect: KAFKA-1809
INFO: URL = https://issues.apache.org/jira/rest/api/2/issue/KAFKA-1809, Username = gwenshap, data = None, headers = {}
No Affected or Fixed version found in JIRA
INFO: Guessed branch as trunk
INFO: URL = https://issues.apache.org/jira/browse/KAFKA-1809, Username = gwenshap, data = None, headers = {}
INFO: URL = https://issues.apache.org/jira/secure/attachment/12696246/KAFKA-1809_2015-02-03_10%3A52%3A36.patch, Username = gwenshap, data = None, headers = {}
INFO: Executing gradle 1>patch-process/bootstrap.txt 2>&1
INFO: Executing ./gradlew clean 1>patch-process/clean.txt 2>&1
INFO: Executing git checkout trunk
Already on 'trunk'
Your branch is up-to-date with 'origin/trunk'.
INFO: Executing git clean -d -f
Removing dev-utils/
Removing gradle/wrapper/
Removing patch-process/
INFO: Executing git reset --hard HEAD
HEAD is now at 1c6d5bb KAFKA-1915: Add checkstyle for java code.
INFO: Executing git fetch origin
INFO: Executing git merge --ff-only origin/trunk
Already up-to-date.
INFO: Executing git apply -p1 < patch-process/KAFKA-1809.patch 1>patch-process/apply.txt 2>&1
/bin/sh: patch-process/KAFKA-1809.patch: No such file or directory
Traceback (most recent call last):
  File "./dev-utils/test-patch.py", line 420, in <module>
  File "./dev-utils/test-patch.py", line 205, in git_apply
  File "./dev-utils/test-patch.py", line 280, in fatal
  File "./dev-utils/test-patch.py", line 344, in log_and_exit
  File "./dev-utils/test-patch.py", line 37, in write_file
IOError: [Errno 2] No such file or directory: 'patch-process/jira-comment.txt'
{code}

I think we are just missing something like:
{code}
if options.output_dir and not os.path.isdir(options.output_dir):
  os.makedirs(options.output_dir)
{code}

Updated reviewboard https://reviews.apache.org/r/29893/
 against branch trunk

[~gwenshap] so the issue was that you were specifying {{output}} to be inside your kafka root dir and while cleaning up kafka before applying patch, {{git reset HEAD --hard}}, hard reset removes the dir. I have made a few modifications to accommodate this. Let me know if it still does not work.

I will try out the checkstyle and if it works fine then I will try to include that as part of this.

Updated reviewboard https://reviews.apache.org/r/29893/
 against branch trunk

[~gwenshap] added checkstyle checks as part of pre-commit patch testing.

Looks good!

[~joestein] or [~nehanarkhede] - please try it out on one of the patches you are reviewing.
For example:
python dev-utils/test-patch.py --defect KAFKA-1333 --output patch-process --run-tests --username user  --password password

Let us know what you think.

really cool, just tried this out 

{code}

python dev-utils/test-patch.py --defect KAFKA-1845 --output patch-process --run-tests

{code}

which I think once this is in the jenkins build would have shown up on the KAFKA-1845 ticket as 

Testing file [KAFKA-1845_2015-02-08_17%3A05%3A22.patch|https://issues.apache.org/jira/secure/attachment/12697336/KAFKA-1845_2015-02-08_17%3A05%3A22.patch] against branch trunk took 0:31:28.393900.

{color:green}Overall:{color} +1 all checks pass

{color:green}SUCCESS:{color} Gradle bootstrap was successful
{color:green}SUCCESS:{color} Clean was successful
{color:green}SUCCESS:{color} Patch applied, but there has been warnings:
{code}<stdin>:233: space before tab in indent.
                    	if (trimmed.equalsIgnoreCase("true"))
<stdin>:234: space before tab in indent.
                    		return true;
<stdin>:235: space before tab in indent.
                    	else if (trimmed.equalsIgnoreCase("false"))
<stdin>:236: space before tab in indent.
                    		return false;
<stdin>:237: space before tab in indent.
                    	else
warning: squelched 1 whitespace error
warning: 6 lines add whitespace errors.
{code}

{color:green}SUCCESS:{color} Patch add/modify test case
{color:green}SUCCESS:{color} Gradle bootstrap was successful
{color:green}SUCCESS:{color} Patch compiled
{color:green}SUCCESS:{color} Checked style for Main
{color:green}SUCCESS:{color} Checked style for Test
{color:green}SUCCESS:{color} All unit tests passed

This message is automatically generated.


[~gwenshap] and [~charmalloc] thanks for trying this out. The checkstyle is also working fine, thanks to [~jkreps] for adding checkstyle to the project.

[~charmalloc] could you help with adding a jenkins job to automate this. As [~gwenshap] suggested, it will be a good idea to drop a mail to dev list once we do that. I do not think we need a KIP for this, but if we do let me know.

[~singhashish] I created a new jenkins build https://builds.apache.org/job/KafkaPreCommit/ and will do some more testing on your patch but it lgtm. 

Tomorrow(ish) if I can get it all to hooked up will commit it or let you know if any questions/issues.

Sounds good [~charmalloc]. Thanks!

This is cool. Thanks for working on this, [~singhashish], [~gwenshap]!

[~charmalloc] were you able to get this work? I do not have access to see configuration of the job, https://builds.apache.org/job/KafkaPreCommit/.

[~singhashish] I didn't want to make these changes while the build on trunk is breaking currently in jenkins. There is a new jenkins job ready to go once that is fixed we can do this.

Sounds good [~charmalloc]!

Testing file [KAFKA-1856_2015-02-04_15%3A44%3A47.patch|https://issues.apache.org/jira/secure/attachment/12696611/KAFKA-1856_2015-02-04_15%3A44%3A47.patch] against branch trunk took 0:25:20.725178.

{color:red}Overall:{color} -1 due to 2 errors

{color:red}ERROR:{color} Some unit tests failed (report)
{color:red}ERROR:{color} Failed unit test: {{unit.kafka.consumer.PartitionAssignorTest > testRangePartitionAssignor FAILED
}}
{color:green}SUCCESS:{color} Gradle bootstrap was successful
{color:green}SUCCESS:{color} Clean was successful
{color:green}SUCCESS:{color} Patch applied correctly
{color:green}SUCCESS:{color} Patch add/modify test case
{color:green}SUCCESS:{color} Gradle bootstrap was successful
{color:green}SUCCESS:{color} Patch compiled
{color:green}SUCCESS:{color} Checked style for Main
{color:green}SUCCESS:{color} Checked style for Test

This message is automatically generated.

This still requires the jenkins build to get updated with the job I created https://builds.apache.org/job/KafkaPreCommit/rename?newName=PreCommit-Kafka and I will ping INFRA about getting that connected.

Thanks!

Thanks for helping out [~charmalloc]!

