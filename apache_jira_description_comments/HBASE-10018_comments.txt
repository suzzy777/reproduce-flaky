IIRC, a colleague at Trend Micro contributed this code to speed up HBase MR job initialization. There have been many changes to the client since, makes sense to redo this for current conditions. 

I would be all for removing it.  The reverse scan wouldn't work for anyone that's scanning forward.

Does the prefetch have to be done inline?  Can it be lazy?  What to do though if 1M regions?  What do we fetch?  Maybe we don't want prefetch when we now have a bounded size for our cache.  Could just flip the configuration to turn off prefetch in 0.98?  When the prefetch was added, i thought there was also added a facility for reading in all of the meta -- reading from HDFS IIRC? -- but I can't find it so probably a pigment of my emancipation.

bq. Does the prefetch have to be done inline
Not really. It's just a little bit more complicated if we start a thread.

bq.  What to do though if 1M regions
It does not care: it reads the next 10 regions, whatever the table size. 
Ihmo, when you have a lot of region it does not really work, when you have just a few it's not really necessary.
Excepted in the scenario mentioned by Elliott above.

bq.  Could just flip the configuration to turn off prefetch in 0.98? 
I would prefer to be more radical: just remove it. Or at least, make it optional, deactivated by default, on .96 and .98.
Thinking more about it, that's my prefered scenario. If nobody disagrees, I will do that: "make it optional, deactivated by default, on .96 and .98."

bq. . If nobody disagrees, I will do that: "make it optional, deactivated by default, on .96 and .98."

Fine by me.  Since you are of a jacobin bent, you could remove in 0.98 and just configure it off in 0.96?

+1 remove in 0.98 and disable it in 0.96. Planning on branching 0.98 on 12/1.

Moving out of 0.98.0. Put back if ready before RC.

v1:
 - remove the lock
 - does a small reversed scan instead of a getRowSomething and a scan
 - deprecates all the prefetch methods, keep the interfaces but the methods do nothing
 - when we were doing a locate *without* the cache, we were also removing the entry from the cache. We don't do that anymore.

v2: creates directly the scanner instead of going through a HTable creation, saving some subjects & configuration parsing.
However, I seems that the Reversed scan doesn't manage the 'small' status. If it's the case, it will worth fixing here.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12631242/10018.v1.patch
  against trunk revision .
  ATTACHMENT ID: 12631242

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified tests.

    {color:green}+1 hadoop1.0{color}.  The patch compiles against the hadoop 1.0 profile.

    {color:green}+1 hadoop1.1{color}.  The patch compiles against the hadoop 1.1 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.util.TestCoprocessorScanPolicy

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/8819//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8819//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8819//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8819//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8819//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8819//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8819//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8819//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8819//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8819//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/8819//console

This message is automatically generated.

Skimmed.  Looks great.  How much we prefetch when we do the reverse scan?

Before removing the prefetch, I think we should have an idea whether this will bring a regression. Hopefully not, but would be good if we can have a better idea. 
bq. replace it with a reverse scan: this would save a call
+1 to that. Makes sense to dog food. Should we get rid of HTable.getRowOrBefore() or keep that as an interface, but implement it via small reverse scan? 
This is good, even though we might still have prefetch. 
{code}
+    @Deprecated
     public void setRegionCachePrefetch(final byte[] tableName,
         final boolean enable) {
{code}

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12631309/10018.v2.patch
  against trunk revision .
  ATTACHMENT ID: 12631309

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified tests.

    {color:green}+1 hadoop1.0{color}.  The patch compiles against the hadoop 1.0 profile.

    {color:green}+1 hadoop1.1{color}.  The patch compiles against the hadoop 1.1 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.client.TestClientNoCluster

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/8823//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8823//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8823//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8823//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8823//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8823//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8823//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8823//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8823//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8823//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/8823//console

This message is automatically generated.

bq.  How much we prefetch when we do the reverse scan?
Just one. We could increase this, with a kind of heuristic to stay in 1 network packet, but well..

bq. Should we get rid of HTable.getRowOrBefore() 
It's still used when you do a meta scan, even it's may be an historical case. I will double check. In any case, we need to deprecate it first.

bq. but implement it via small reverse scan? 
We could do this, but I'm not sure that this feature is very useful outside of the .meta. case, so...

bq. this will bring a regression
You mean a performance regression? It's complex, because we unlikely to be better in all cases, and there is the usual difference between throughput and latency. And may be the reversed scan is not efficient enough (I need to look at how it works when the scan is 'small', I'm not sure this case is optimized actually).

btw, I reproduce the test issue. Will fix.

v3 fixes the test issue.
It seems that small scans optimization is not there for small scan. We need it to make this patch efficient.



{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12632205/10018v3.patch
  against trunk revision .
  ATTACHMENT ID: 12632205

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified tests.

    {color:green}+1 hadoop1.0{color}.  The patch compiles against the hadoop 1.0 profile.

    {color:green}+1 hadoop1.1{color}.  The patch compiles against the hadoop 1.1 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 2 new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.util.TestCoprocessorScanPolicy

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/8861//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8861//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8861//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8861//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8861//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8861//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8861//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8861//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8861//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8861//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/8861//console

This message is automatically generated.

I reproduce the issue, it's a table not found on hbase:namespace when there is a master copro. Looking.

I've solved the issue by filtering on the system tables on the scanner in the test. It seems to be the right thing to do, but I'm not sure of what the test is actually doing.
v4 includes HBASE-9999. 

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12632321/10018.v4.patch
  against trunk revision .
  ATTACHMENT ID: 12632321

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 6 new or modified tests.

    {color:green}+1 hadoop1.0{color}.  The patch compiles against the hadoop 1.0 profile.

    {color:green}+1 hadoop1.1{color}.  The patch compiles against the hadoop 1.1 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 2 new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/8868//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8868//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8868//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8868//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8868//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8868//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8868//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8868//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8868//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8868//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/8868//console

This message is automatically generated.

I've just committed HBASE-9999. This patch is ready to go.
I see two options:
1) As it is, i.e. full removal of the features, interfaces kept deprecated for backward compatibility but they do nothing
2) Change the patch to keep the prefetch as an option, deactivated by default.

I've got a small preference for 1), but I don't mind doing 2).
The reason for 2) would be that if there is a performance degradation for some use cases, we can use the option to to keep us safe.
My reasons for prefering 1) are:
- I remove much more code this way: with 2, I'm unclear about what to do with the existing code to put/remove a table in the "to prefect" list.
- It's often better to have an optimized code path rather than 2 average.
- an option non activated will become more or less obsolete or buggy very quickly, so it may not help that much...

As you like guys :-)

Any opinion? By default I would go for the patch as it is.

I would like this to make it to trunk soon. Any feedback? I had a few takers at the beginning :-)

+1 on 1 for your stated reasons.

Patch looks great (on skim).  You don't deprecated getClosestRowOrBefore.  It is needed?  If not, deprecate it on commit.

v5 = v4 rebased + deprecation of getClosestRowOrBefore

getClosestRowOrBefore is actually deprecated in HTableInterface since 0.92: "As of version 0.92 this method is deprecated without replacement."
But we still use it in a few place, and we can't remove it w/o breaking rolling upgrades. 

I will commit v5 is hadoop qa is happy and if there is no objection...

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12637794/10018.v5.patch
  against trunk revision .
  ATTACHMENT ID: 12637794

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 9 new or modified tests.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.client.TestClientTimeouts
                  org.apache.hadoop.hbase.security.visibility.TestVisibilityLabelsWithDistributedLogReplay

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/9138//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9138//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9138//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9138//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9138//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9138//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9138//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9138//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9138//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9138//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/9138//console

This message is automatically generated.

v6 fixes TestClientTimeouts
TestVisibilityLabelsWithDistributedLogReplay works here, it's likely unrelated.

+1

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12638985/10018.v6.patch
  against trunk revision .
  ATTACHMENT ID: 12638985

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 9 new or modified tests.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.procedure.TestZKProcedure

     {color:red}-1 core zombie tests{color}.  There are 1 zombie test(s): 	at org.apache.hadoop.hbase.master.TestMasterNoCluster.testNotPullingDeadRegionServerFromZK(TestMasterNoCluster.java:298)

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/9214//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9214//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9214//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9214//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9214//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9214//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9214//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9214//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9214//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9214//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/9214//console

This message is automatically generated.

This looks like test flakiness. Commit is under way.

Committed, thanks for the reviews, Stack & Enis.

I guess I'm 5 minutes too late, but in the future would it be possible to set a better jira title once we know what the patch is going to look like? In this case, "location prefetch" isn't a thing, it's "meta prefetching" or "region location prefetching". Also it wasn't changed, it was removed.

I think we can now close this issue? HBASE-6841

It's not too late to change the title at least. Let me do it.

I'm not sure for HBASE-6841: for the last comment from Amit, it could be that the bottleneck is in the meta server, the lock could be just a red herring? On this other hand, if disabling the prefect worked for you, then yes HBASE-6841 is solved. 

ABORTED: Integrated in HBase-TRUNK #5070 (See [https://builds.apache.org/job/HBase-TRUNK/5070/])
HBASE-10018 Change the location prefetch (nkeywal: rev 1585518)
* /hbase/trunk/bin/region_mover.rb
* /hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionManager.java
* /hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HConnection.java
* /hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HConnectionKey.java
* /hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HTable.java
* /hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HTableInterface.java
* /hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HTablePool.java
* /hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetaScanner.java
* /hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java
* /hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java
* /hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/HTableWrapper.java
* /hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestClientTimeouts.java
* /hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java
* /hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestCoprocessorScanPolicy.java
* /hbase/trunk/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/ThriftServerRunner.java


Closing this issue after 0.99.0 release. 

