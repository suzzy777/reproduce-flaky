Testing JIRA OOZIE-2550

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1782
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testBundleStatusCoordSubmitFails(org.apache.oozie.service.TestStatusTransitService)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/2925/

Testing JIRA OOZIE-2550

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1782
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testNone(org.apache.oozie.command.coord.TestCoordActionInputCheckXCommandNonUTC)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/2928/

Test failure is unrelated

[~pbacsko] Good catch in principal.

What I would change:
1. Destroy the ZKUUIDService created at setup method.
2. The array you have created holds references to Boolean variables null at default. The assertTrue has a boolean parameter so it will throw a NPE at unboxing when one is not set. You should fill the AtomicReferenceArray with False values at startup. (AtomicReferenceArray is fine here, but you might consider using a native Boolean[] instead of this structure for this usecase as a more lightweight solution)


Hi Ferenc,

Array init +1.

I agree that the usage of AtomicRef is debatable here. But in scenarios like this I like to play safe - using simple constructs can lead to subtle and hard-to-debug problems if a shared resource is mutated from multiple threads. However I just read an article (https://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html) which states that returning from a join() guarantees visibility so looks like it's safe to change it to primitive boolean array. 

This

{code}
        for (int i = 0; i < size; i++) {
            result.set(0, false);   // update 0 to i
        }
{code}
should be 
{code}
        for (int i = 0; i < size; i++) {
            result.set(i, false);
        }
{code}



Testing JIRA OOZIE-2550

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 1786
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/2964/

I think the {{AtomicReferenceArray}} is a bit overkill here.  The two threads should get non-overlapping sets of IDs, which are used as indexes.  So there should never be any race conditions on the individual array elements themselves.  If that somehow does happen, then we'll know because the test will fail because at least one of the array elements will be {{false}}.  In fact, it would be helpful if this test does fail, if we were to log the IDs generated by each thread.  
So, I think we should:
# Replace the {{AtomicReferenceArray}} with a boolean array:
{code:java}
boolean[] result = new boolean[size];
{code}
This should default to {{false}} for all elements, but if you want to be extra sure you can always add {{Arrays.fill(result, false);}}
# Print out the IDs generated by each thread and which thread generated them for easier debugging.
# In {{setUp()}}, use a try-finally block to make sure the uuid service there is always destroyed.  
#- Actually, I think we'd be better off making {{setMaxSequence}} a static method.  It's setting a static variable, so that makes sense.  Then you don't have to create a new {{ZKUUIDService}} here.
# I might be missing something here, but don't we need to reset the sequence to start at 0 somewhere?  The array is from 0 to 10000, but what if a previous test had left the sequence at, say 50?  We use the IDs as indexes, so this wouldn't work correctly, right?

In the same context as [~rkanter] mentioned regarding making {{setMaxSequence}} a static method. We can also reduce it's visibility from {{public}} to {{default}}. Because this is accessed in the {{TestZKUUIDService}} only, which is in the same package as {{ZKUUIDService}} so scope can be reduce.

Hi guys,

thanks for the comments. 

1. My main concern was visibility of the changes, not the overlapping. In this particular case, we got a guarantee from the JVM because we check the contents after {{Thread.join()}}, but in general I prefer constructs which have stronger guarantees like AtomicRefArray, but I'm fine with the primitive boolean[] array.
2. OK.
3. I was also thinking about making setMaxSequence static, if it's only used for testing. Plus, reducing it package private is also a good idea.
4. The reason why we don't have to reset the sequence is because the ZK instance is destroyed after each testcase. So we always starts with a fresh and empty ZNode for the counter.

Testing JIRA OOZIE-2550

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 1786
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/2968/

We should add the some prefix into the log statement to identify, from which thread, {{id}} got generated. The logging level in both the threads should be {{debug}} level. We don't want to log the ids all the time. Also, you have already provided a nice message to highlight the failure index, in the assert statement.

Edit: we can identify the ids, from two threads by their different timestamp.

Interesting, I didn't even see that the thread name is not logged. I suggest modifying the log4j config instead, because it's always very useful to see which thread logs a given message.

Shall we modify oozie-log4j.properties in src/main/resources? Looks like this is the file that contains the PatternLayout config.

I think it is a good point to log the thread's name/id to see where a particular thing happened.
On the other hand it should not be hidden in a flaky test jira.

4. gotcha

I don't think we should change oozie-log4j.properties in src/main/resources.  This will make the log messages even longer, and we've already received complaints about the current amount of stuff we log.  I imagine there's also a performance penalty, and in general, I don't think the thread id will help because most Oozie things are done from a thread pool.

I think it's fine to just change
{code:java}
log.info("Generated id: {0}", id);
{code}
to
{code:java}
log.info("Thread 1 generated id: {0}", id);
{code}
and similar for the other for loop.

Also, [~pbacsko], please don't delete the older versions of the patch.  The Jenkins job will always pick up the newest attachment, so that's not a problem.

The reason why I think it's helpful (at least in tests) is that couple of things are done on main (like assertions) but certain business logic related-steps are executed in threads other than main. If we log threads it may become easier to reason about flaky tests or racy code. We can still create a new log4j config under src/test/resources and use that only in tests. 

Hmm, that might be helpful, but I think only for unit tests.  In any case, that should be a separate JIRA; let's leave this one for fixing TestZKUUIDService.  Can you file a new one?

+1 on the 006 patch, pending Jenkins.

New JIRA: https://issues.apache.org/jira/browse/OOZIE-2564

Testing JIRA OOZIE-2550

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1786
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testConnectionDrop(org.apache.oozie.jms.TestJMSJobEventListener)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/2970/

Thanks Peter.  Committed to trunk!

Closing issue; Oozie 4.3.0 is released.

