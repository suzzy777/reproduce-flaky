https://reviews.apache.org/r/22441/

I think what's actually happening here is a race with Containerizer::wait() triggering container termination in the first slave.

The slave calls Containerizer::wait() after it's _started_ the launch and this returns a Failure because the test intercepts the launch so the TestContainerizer doesn't know about the container. The slave then thinks the executor has terminated and proceeds accordingly. This sequence may or may not happen depending on when the containerizer and slave are destroyed/stopped.

I think the correct fix is to intercept the Containerizer::wait call and return a pending future .

it seems this test was flaky before (MESOS-1273). I'm going to revert to the initial version of the test and try a different approach to the initial fix.

intercepting Containerizer::wait seems reasonable but it causes recovery to fail, which is not what we want to test.

[~dhamon] why does it cause the recovery to fail?

https://reviews.apache.org/r/22441/

The complete fix is to intercept {{wait}} being called on the containerizer, then to deal with a second race which is caused by the second slave reregistering and triggering multiple status update manager {{flush}} calls.

commit c2454181ef180587b8b3dd71f1f859b41d1475a3
Author: Dominic Hamon <dhamon@twopensource.com>
Date:   Thu Jun 12 19:33:43 2014 -0700

    Fixed SlaveRecoveryTest.RestartBeforeContainerizerLaunch test.
    
    Review: https://reviews.apache.org/r/22441


