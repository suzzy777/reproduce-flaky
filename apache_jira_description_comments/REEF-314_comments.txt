The code compiles just fine, but the 11 tests that actually try to run REEF fail. I will post the log here later.

I've been playing around with this some more. Some findings from a machine with both VS 2013 and VS 2015RC installed:

  # Compiling and testing from the command line completely works using the VS 2015 tools.
  # Compiling the code in VS 2015 works. It uses the VS 2013 compiler for our C++ project by default, and that works just fine.
  # Tests fail from VS 2015, The reason seems to be that the JAR file isn't put in the right place when triggering the build through the VS gui.


When testing, VS 2015 raises an error that the build (for the tests) failed. However, the output window doesn't contain much useful information:

{noformat}
All packages are already installed and there is nothing to restore.
NuGet package restore finished.
1>------ Build started: Project: Org.Apache.REEF.Bridge.JAR, Configuration: Debug x64 ------
2>------ Build started: Project: Org.Apache.REEF.Tang.Tests, Configuration: Debug x64 ------
1>  C:\Users\mweimer\OneDrive\Apps\bin\protoc.exe
3>------ Build started: Project: Org.Apache.REEF.Client, Configuration: Debug x64 ------
2>  Restoring NuGet packages...
2>  To prevent NuGet from downloading packages during build, open the Visual Studio Options dialog, click on the Package Manager node and uncheck 'Allow NuGet to download missing packages'.
2>  All packages listed in packages.config are already installed.
2>  Org.Apache.REEF.Tang.Tests -> C:\src\reef\lang\cs\bin\x64\Debug\Org.Apache.REEF.Tang.Tests\Org.Apache.REEF.Tang.Tests.dll
3>  Restoring NuGet packages...
3>  To prevent NuGet from downloading packages during build, open the Visual Studio Options dialog, click on the Package Manager node and uncheck 'Allow NuGet to download missing packages'.
3>  All packages listed in packages.config are already installed.
3>  Org.Apache.REEF.Client -> C:\src\reef\lang\cs\bin\x64\Debug\Org.Apache.REEF.Client\Org.Apache.REEF.Client.exe
4>------ Build started: Project: Org.Apache.REEF.Tests, Configuration: Debug x64 ------
5>------ Build started: Project: Org.Apache.REEF.Examples.HelloREEF, Configuration: Debug x64 ------
6>------ Build started: Project: Org.Apache.REEF.Network.Examples.Client, Configuration: Debug x64 ------
5>  Org.Apache.REEF.Examples.HelloREEF -> C:\src\reef\lang\cs\bin\x64\Debug\Org.Apache.REEF.Examples.HelloREEF\Org.Apache.REEF.Examples.HelloREEF.exe
6>  Org.Apache.REEF.Network.Examples.Client -> C:\src\reef\lang\cs\bin\x64\Debug\Org.Apache.REEF.Network.Examples.Client\Org.Apache.REEF.Network.Examples.Client.exe
4>  Restoring NuGet packages...
4>  To prevent NuGet from downloading packages during build, open the Visual Studio Options dialog, click on the Package Manager node and uncheck 'Allow NuGet to download missing packages'.
4>  All packages listed in packages.config are already installed.
4>  Org.Apache.REEF.Tests -> C:\src\reef\lang\cs\bin\x64\Debug\Org.Apache.REEF.Tests\Org.Apache.REEF.Tests.dll
========== Build: 3 succeeded, 3 failed, 16 up-to-date, 0 skipped ==========
{noformat}

It tells me that 3 builds failed, but not which ones.

I just tested with the final Version of VS 2015. The code doesn't compile in VS 2015. I checked commit {{06898622f61f197187ecc0dd799f849b4e8c8ff6}}:

{noformat}
Severity	Code	Description	Project	File	Line
Error		Metadata file 'C:\src\reef\lang\cs\bin\x64\Debug\Org.Apache.REEF.Examples.HelloCLRBridge\Org.Apache.REEF.Examples.HelloCLRBridge.exe' could not be found	Org.Apache.REEF.Tests	C:\src\reef\lang\cs\Org.Apache.REEF.Tests\CSC	
Error	CS0103	The name 'ClrBridgeClient' does not exist in the current context	Org.Apache.REEF.Tests	C:\src\reef\lang\cs\Org.Apache.REEF.Tests\Functional\Bridge\TestBridgeClient.cs	66
{noformat}

However, the code does compile just fine using the command line tools of VS 2015. Hence, the failure might have more to do with the flaky VS builds I encounter than the upgrade to VS 2015. The tests also pass from the command line.

I just did some more testing using Visual Studio 2015 on Windows 10. The machine only has Visual Studio 2015 installed, nothing else.

The *good* news: Importing the project into Visual Studio 2015 worked fine. I allowed it to convert our C++ project to the new version. Building from the command line works just fine using those converted build files.

The *bad* news is that the situation seems to have gotten worse since I last checked for building within VS 2015. On first build, I got similar errors to the above about our client DLL not availabe when building IMRU. Sorry, I did not copy the error and now can't reproduce it anymore. After a clean, I now get 1294 error messages about namespaces in dependencies not being available. This makes me believe that NuGet is broken for us in VS 2015. Oddly, it works from the command line.

Now, on to the *weird* news: I can actually run most of the tests (452 to be precise) when I build from the command line and then go to VS to test it. The build before the tests fails, but VS then offers to run tests using the last successful build, which in this case is the command line build. The remaining 4 tests all fail with the same message:

{noformat}
Test Name:	CanInjectAndExecuteTask
Test FullName:	Org.Apache.REEF.Evaluator.Tests.EvaluatorTests.CanInjectAndExecuteTask
Test Source:	D:\src\reef\lang\cs\Org.Apache.REEF.Evaluator.Tests\EvaluatorTests.cs : line 44
Test Outcome:	Failed
Test Duration:	0:00:00.0370995

Result StackTrace:	
at Microsoft.Hadoop.Avro.Container.StreamReader`1.MoveNext()
   at Microsoft.Hadoop.Avro.Container.SequentialReader`1.<get_Objects>d__0.MoveNext()
   at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)
   at Org.Apache.REEF.Tang.Formats.AvroConfigurationSerializer.AvroDeseriaizeFromFile(String fileName) in D:\src\reef\lang\cs\Org.Apache.REEF.Tang\Formats\AvroConfigurationSerializer.cs:line 182
 --- End of inner exception stack trace ---
    at Org.Apache.REEF.Utilities.Diagnostics.Exceptions.Throw(Exception exception, String message, Logger logger) in D:\src\reef\lang\cs\Org.Apache.REEF.Utilities\Diagnostics\Exceptions.cs:line 54
   at Org.Apache.REEF.Tang.Formats.AvroConfigurationSerializer.AvroDeseriaizeFromFile(String fileName) in D:\src\reef\lang\cs\Org.Apache.REEF.Tang\Formats\AvroConfigurationSerializer.cs:line 191
   at Org.Apache.REEF.Evaluator.Tests.EvaluatorTests.CanInjectAndExecuteTask() in D:\src\reef\lang\cs\Org.Apache.REEF.Evaluator.Tests\EvaluatorTests.cs:line 51
Result Message:	
Test method Org.Apache.REEF.Evaluator.Tests.EvaluatorTests.CanInjectAndExecuteTask threw exception: 
System.ApplicationException: Cannot deserialize the file: evaluator.conf ---> System.Runtime.Serialization.SerializationException: Synchronization marker defined in the header does not match the read one.
{noformat}

Why would we get a warning from {{System.Runtime.Serialization}}? I thought we always used Avro?

I've done all the testing I can think off.

Those tests above seem to fail because of the issue found in [REEF-652]. Which in a way is good news: REEF builds using the SDK shipped with VS 2015 and passes tests. Just not when building *in* VS 2015.

