For ReplicationLoadSink, the constructor is marked as IA.Private, so this is not a break change. See

https://github.com/apache/hbase/commit/b5b286d793f00ec8b9ed02f51fd9324e46f29c86

For RSGroupInfo.getServers, change the return value from Set to SortedSet is not allowed for a patch release but I think it is OK for a minor release, we do not expect users to extend the RSGroupInfo class, so a recomplie can fix the incompatible problem, we do not guarantee drop-in replacement for a minor release.

For RandomRowFilter, maybe we could keep the random object there but marked it as deprecated.

Let me also take a look on the table descriptor changes later.

Thanks [~apurtell] for the careful work!

The related issue is HBASE-25986. Seems we moved the default values to hbase-default.xml?

[~vjasani] PTAL.

The API tool marked the constructor change as a break. It was trivial to make it public again, so I changed it.

We don't allow the Set to SortedSet change for a minor release, not without deprecation. We can discuss this as part of the RC, though, if it's going to be an issue. The only impact I noticed was a flaky test had to be removed; which is virtuous to me, because the test was flaky. This should be addressed in a followup issue though for sure. 

I put the random field back in RandomRowFilter, it was not a big deal. 

I also put back the DEFAULT_NORMALIZER_ENABLED fields; this is trivial.

I committed them to both branch-2.5 and branch-2 so the code will be consistent in both places. We can make further changes to branch-2. 

After committing this change I am now spinning 2.5.0RC0. The compat report after this shows no HIGH priority issues that are against policy (we can add but not remove or rename, etc.). The overall report shows ~95.9% binary compatibility and 90.7% source compatibility. Although the other changes seem to be per policy we probably will end up discussing some of them during the RC evaluation process.

{quote}
The API tool marked the constructor change as a break. It was trivial to make it public again, so I changed it.
{quote}

Please see this commit

https://github.com/apache/hbase/commit/b5b286d793f00ec8b9ed02f51fd9324e46f29c86

The constructor is marked as IA.Private and the comment says to introduce a Builder. So we introduce a builder and change the constructor to private. It will be strange that we have a Builder but still have a public constructor.

{quote}
We don't allow the Set to SortedSet change for a minor release, not without deprecation.
{quote}

If you do not extend a class, changing the return value from Set to SortedSet does not break anything if you recompile your code. And I do not think it is good idea to remove a UT, as the feature is already there so at least let's keep the UT there and mark it as disabled. For the sorted set problem, just new a TreeSet is enough to fix the problem if we still want to keep the return value as Set.

But I still need to point out that, this is what we have in our ref guide, it says that drop-in replacement is not a must have.

{quote}
A minor upgrade requires no application/client code modification. Ideally it would be a drop-in replacement but client code, coprocessors, filters, etc might have to be recompiled if new jars are used.
{quote}

{quote}
I also put back the DEFAULT_NORMALIZER_ENABLED fields; this is trivial.
{quote}

For this I think we need to know what we want to do in HBASE-25986. I'm afraid adding these fields back may introduce strange behavior if we also have something in hbase-default.xml. Let's wait for [~vjasani]'s input.

Thanks.

Unfortunately all of these points are up for interpretation and the tool is giving us findings that have to be addressed. So I have made changes based on the tools findings and the policy. I will not claim this is perfect but this is what we have. Feel free to contribute improvements or start discussions about the tool or the policy. 

Just had a glance at the compat report. As for HBASE-25986, putting DEFAULT_NORMALIZATION_ENABLED back as false should be fine because hbase-default.xml has new config introduced as part of the Jira and it represents whether any table for the given cluster should have normalizer enabled/disabled if the tableDes doesn't have NORMALIZATION_ENABLED defined. Removal of DEFAULT_NORMALIZATION_ENABLED was mostly meant to simplify the code so it's fine putting it back. [~apurtell], the commit looks good from this Jira's viewpoint.

FYI [~mnpoonia] if you would like to add/correct anything.

Because this is a new minor, I have sent an email to dev@ titled "[DISCUSS] First release candidate for 2.5.0 (RC0) is available for evaluation". Personally I don't think any of these issues are settled. This RC is my proposal to you, the PMC. Let's evaluate it and discuss. 

Tool is not the final rule.

We already know that the tool can not recognize the annotation on methods. It needs some manual checks, this is the duty of the RM.

So in general, I’m -1 on changing ReplicationLoadSink’s constructor to public. We do not need to do this.

On the RSGroupInfo I’m OK with restoring the return value but I’m-1 on just simply removing a UT. For this one I could help providing a PR to fix it.

And on the field in TableDescriptorBuilder and HTableDescriptor, I’m -1 on restoring them until we hear the voice from the author or the committer, or someone else can explain what is really going on for that issue.

Thanks.

Ah, haven't seen [~vjasani]'s reply while typing the response...

Change me opinion to +1 on the fields in HTableDescriptor and TableDescriptor according to [~vjasani]'s comment.

The duty of the RM is to make a call. That’s what I have done here. My rule was if the finding is flagged as HIGH priority and is a trivial change like a removed constant or a changed visibility modifier or a trivial field change, then I would revert it. This not the final word, it’s only my proposal for the vote. In this case anticipating people may find issues with RCO it is only a DISCUSS not a VOTE yet. Happy to review and merge proposals such as the unit test fix.

I believe no matter what choices I made here, even leaving it alone, someone would raise an issue. And that’s fine. 

On the return value of RSGroupInfo.getServers, it is changed to SortedSet in HBASE-25682 on branch-2, and HBASE-22819 on master.

For me I think the risk here is very very low, because the constructors of RSGroupInfo require you to pass a SortedSet in, and I do not think it is a common usage to extend RSGroupInfo.

But anyway, let me put up a PR to restore it back to Set if you stick on it.

Thanks.

It’s changed to Set in branch-2 and branch-2.5 now but can he changed back. I have no strong opinion either way fwiw

Results for branch branch-2
	[build #554 on builds.a.o|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2/554/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2/554/General_20Nightly_20Build_20Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2/554/JDK8_20Nightly_20Build_20Report_20_28Hadoop2_29/]


(/) {color:green}+1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2/554/JDK8_20Nightly_20Build_20Report_20_28Hadoop3_29/]


(/) {color:green}+1 jdk11 hadoop3 checks{color}
-- For more information [see jdk11 report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2/554/JDK11_20Nightly_20Build_20Report_20_28Hadoop3_29/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch branch-2.5
	[build #131 on builds.a.o|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2.5/131/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2.5/131/General_20Nightly_20Build_20Report/]




(/) {color:green}+1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2.5/131/JDK8_20Nightly_20Build_20Report_20_28Hadoop2_29/]


(/) {color:green}+1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2.5/131/JDK8_20Nightly_20Build_20Report_20_28Hadoop3_29/]


(/) {color:green}+1 jdk11 hadoop3 checks{color}
-- For more information [see jdk11 report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2.5/131/JDK11_20Nightly_20Build_20Report_20_28Hadoop3_29/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


