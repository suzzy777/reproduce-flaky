Add Apache license header to StealJobQueue.java
Should this class be in util package ? It can be used by other components.
Add annotation for stability.
{code}
* the take/pool(long,TimeUnit) methods would also check whether there are jobs in the steal-from queue if this queue is
{code}
'pool(' : did you mean poll() ?
Please wrap long line above - limit to 100 characters per line.

what does "annotation for stability" mean?

Updated per Ted's comments.

For TestStealJobQueue.java, please remove author information and add Apache license.

w.r.t. "annotation for stability" , I suggest the following:
{code}
import org.apache.hadoop.hbase.classification.InterfaceAudience;
import org.apache.hadoop.hbase.classification.InterfaceStability
@InterfaceAudience.Public
@InterfaceStability.Evolving
{code}

minor changes in comments

author information has been removed and for the stability annotation.
For the stability annotation I use private for now until somebody requests it as suggested by Elliott.

{code}
37	@Category({RegionServerTests.class, SmallTests.class})
{code}
After being moved to util package, this is no longer regionserver test, right ?

good catch!.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12736199/queuestealwork-v6.patch
  against master branch at commit e0cf811b33d19d9aa6cd94298aea13d8ce981b14.
  ATTACHMENT ID: 12736199

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 4 new or modified tests.

    {color:green}+1 hadoop versions{color}. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 protoc{color}.  The applied patch does not increase the total number of protoc compiler warnings.

    {color:red}-1 javadoc{color}.  The javadoc tool appears to have generated 3 warning messages.

    {color:green}+1 checkstyle{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:green}+1 findbugs{color}.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.client.TestReplicasClient
                  org.apache.hadoop.hbase.regionserver.TestCompaction
                  org.apache.hadoop.hbase.regionserver.TestCompactionWithCoprocessor

     {color:red}-1 core zombie tests{color}.  There are 4 zombie test(s): 	at org.apache.hadoop.hbase.master.snapshot.TestSnapshotFileCache.testSnapshotTempDirReload(TestSnapshotFileCache.java:161)
	at org.apache.hadoop.hbase.TestAcidGuarantees.testScanAtomicity(TestAcidGuarantees.java:352)
	at org.apache.hadoop.hbase.regionserver.wal.TestWALReplay.testReplayEditsAfterRegionMovedWithMultiCF(TestWALReplay.java:246)
	at org.apache.hadoop.hbase.namespace.TestNamespaceAuditor.testStatePreserve(TestNamespaceAuditor.java:584)

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/14238//testReport/
Release Findbugs (version 2.0.3) 	warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/14238//artifact/patchprocess/newFindbugsWarnings.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/14238//artifact/patchprocess/checkstyle-aggregate.html

  Javadoc warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/14238//artifact/patchprocess/patchJavadocWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/14238//console

This message is automatically generated.

looking at the unit failure.

fix the unit test

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12736362/queuestealwork-v7.patch
  against master branch at commit ee30d050dc9112bc74eb02452bd9b3699d278f07.
  ATTACHMENT ID: 12736362

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 8 new or modified tests.

    {color:green}+1 hadoop versions{color}. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 protoc{color}.  The applied patch does not increase the total number of protoc compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 checkstyle{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:green}+1 findbugs{color}.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
     

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/14245//testReport/
Release Findbugs (version 2.0.3) 	warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/14245//artifact/patchprocess/newFindbugsWarnings.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/14245//artifact/patchprocess/checkstyle-aggregate.html

  Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/14245//console

This message is automatically generated.

The failing test org.apache.hadoop.hbase.master.TestDistributedLogSplitting seems to be flaky for a while.

https://builds.apache.org/job/PreCommit-HBASE-Build/14245/testReport/junit/TEST-org.apache.hadoop.hbase.master.TestDistributedLogSplitting/xml/_init_/history/

{code}
497	    //prevent large compaction thread pool stealing job from small compaction queue.
498	    cst.shutdownLongCompactions();
{code}
Can you explain the above change a little more ? In production, large compaction thread pool would always be running (as long as region server is running), right ?

it should always be running. That's only for unit test purpose because originally the test was to verify the small compaction queue, and the newly introduced change would make large thread pool steal the jobs and will break this test. So this line is to disable the large compaction thread pool so that it won't steal jobs.


I also have to change the below logic to allow a small job be taken by large thread pool.

{code}

-        if (this.parent != pool) {
+
+        // Long compaction pool can process small job
+        // Short compaction pool should not process large job
+        if (this.parent == shortCompactions && pool == longCompactions) {

{code}

The test was introduced by HBASE-8665

Please take a look at that issue.


The test was introduced by HBASE-8665

Please take a look at that issue.


The test was introduced by HBASE-8665

Please take a look at that issue.


I think the test is still valid. We just need to shutdown one of the thread pool after the change introduced by this issue.


I think the test is still valid. We just need to shutdown one of the thread pool after the change introduced by this issue.


is there anything else I need to work on this patch?

ping. Anything else I need to work on this?

Sorry missed this since HadoopQA bot didn't come around. Let me try and get it to run.
Other than a clean test run I think this has all that it needs.

Kicking hbase's pre-commit build.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12738925/HBASE-13560.patch
  against master branch at commit 0f93986015122a517e1a0c949e159bf8fb218092.
  ATTACHMENT ID: 12738925

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 8 new or modified tests.

    {color:green}+1 hadoop versions{color}. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 protoc{color}.  The applied patch does not increase the total number of protoc compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 checkstyle{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:green}+1 findbugs{color}.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.TestRegionRebalancing

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/14372//testReport/
Release Findbugs (version 2.0.3) 	warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/14372//artifact/patchprocess/newFindbugsWarnings.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/14372//artifact/patchprocess/checkstyle-aggregate.html

  Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/14372//console

This message is automatically generated.

+1 from me. I'll commit later unless there are other review comments.

{code}
497	    //prevent large compaction thread pool stealing job from small compaction queue.
498	    cst.shutdownLongCompactions();
{code}
Should there be a config which disables this feature ?

In production, large compaction thread pool is always running. Meaning, with this feature on, the invariant testCompactionQueuePriorities() tries to test no longer holds.

The test still pass if we shutdown the short compaction thread pool instead. So the test is really focus about the priority of jobs, not about which pool is processing it. 
This change is similar to make the minimal threads number of short compaction pool  to be 2 which will also break the test without manually blocking one of them.

bq.Should there be a config which disables this feature ?
Please no more configs.

Thanks for the patch.

FAILURE: Integrated in HBase-1.2 #146 (See [https://builds.apache.org/job/HBase-1.2/146/])
HBASE-13560 large compaction thread pool will steal jobs from small compaction pool when idle (eclark: rev abf1aa603cbab69ea5a2cb6628a699899cf2e4ef)
* hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestStealJobQueue.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/util/StealJobQueue.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompaction.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompactSplitThread.java


FAILURE: Integrated in HBase-TRUNK #6564 (See [https://builds.apache.org/job/HBase-TRUNK/6564/])
HBASE-13560 large compaction thread pool will steal jobs from small compaction pool when idle (eclark: rev 9d3422ed16004da1b0f9a874a98bd140b46b7a6f)
* hbase-server/src/main/java/org/apache/hadoop/hbase/util/StealJobQueue.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompaction.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompactSplitThread.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestStealJobQueue.java


