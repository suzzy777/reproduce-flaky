and fall out for the replication system

I definitely have some thoughts on this. I'll try to summarize and put it here, but in general making the interface as basic as possible would be the easiest to work with IMO.

Old request is reexamination of the WALEdit/WALKey entities because they are fat objects that duplicate attributes. Would be sweet if these got a review as part of this work (maybe its out of scope).

Also, lets aim for low friction (a 'soft' target, I know). There is too much here as it is (needs digging). Recently I tried multiwal with the new asyncfs expecting two WALs to go close to 2x the throughput or > 1.5 but no, its more like 1.1 x the throughput.

Will multiwal be supported?

{quote}I definitely have some thoughts on this. I'll try to summarize and put it here, but in general making the interface as basic as possible would be the easiest to work with IMO.
{quote}
+1
{quote}Old request is reexamination of the WALEdit/WALKey entities because they are fat objects that duplicate attributes. Would be sweet if these got a review as part of this work (maybe its out of scope).
{quote}
Can try to lob this in, too.
{quote}There is too much here as it is (needs digging).
{quote}
Yeah, this is my biggest worry. We have a very basic {{WAL.Reader}} interface now, but I worry about the implementation details pushed into AbstractFSWal
{quote}Will multiwal be supported?
{quote}
My hope would be that we can make WAL-per-Region work as that will simplify recovery code greatly (and MTTR as you stated earlier). If that's the case, I wouldn't expect multiwal to give much benefit here.

We'll have to visit multiwal anyways (to update for API), but, right now, my gut is telling me that it wouldn't have much relevance for the Ratis LogService wal.

{quote}and fall out for the replication system
{quote}
Thanks Sean. Forgot to mention this (and others) in the description.

Talked through this a little bit today with [~ankit@apache.org], trying to break it down into consumable pieces.
 * Look at prior art (e.g. Apache Kafka and DistributedLog) to come up with ideal API (e.g. RATIS-272)
 * Go through each "system" in HBase to document how they use WALs, and try to find an "ideal" HBase API
 ** Replication
 ** Backup and restore
 ** write path
 ** .. other?

Other tenets we called out:
 * Asynchronous API is desired
 * Easily supporting group-commit/multiple writers being batched into one "sync"
 * Must provide "tail" (hard part will be implementing this for FSHLog/AsyncFSWal – maybe two interfaces would be good, an extension that supports tailing?)

Some other things here:
 * Look at WALEdit/WALKey as Stack asked

Once we have these pieces written down, I think we should be able to start finding a middle ground between it all.

We also have ProcWAL for use by the Pv2 state machine

{quote}We also have ProcWAL for use by the Pv2 state machine
{quote}
Oh! That was something else I wanted to mention here. [~stack] had mentioned in HBASE-18152 about switching pv2 over to using FSHLog instead of the custom WAL implementation since there are some concurrency problems in that implementation (and we know FSHLog is good). That may also impact consumers.

This would have been better if I could think of everything at once instead of posting tweet-sized comments, but we might also have to revisit some of the StreamCapability enforcement stuff for this too...

Deferred would be good to support again; i.e. fire the edit but client doesn't wait on it. In background we sync edits on a configurable periodiciit. We used to have this but distruptor messed it up.

Don't forget read/recovery API.

Currently WALs are grouped by server and/or by multiwal policy/count. You might want to add metadata on WALs to support queries by server or wal-group. Cool would be an API that allowed adding arbitrary metadata about a WAL on the fly. Imagine being able to mark regions seen as WAL metadata and then being able to query before replay, what regions have edits in a particular WAL. Other metadata might be oldest/newest sequenceid and/or timestamp.

So taking a very rough stab at this based on a few thoughts, but at the most basic level, what functionality do we need from the WAL?

 

Absolutely Necessary:

append/put/write/etc

getEditsForRegion(Region) - This let's the implementation handle the mess - WALSplitter, multi-wal, etc

Probably some sort of delete of edits before a threshold

 

Nice to have:

onRegionFlush() - This would be kinda like a coprocessor hook which could add implementation specific logic (rolling file logs, adding some sort of lastFlushed functionality, or any of the things that [~stack] was talking about in his comment)

 

In general, I would like to start from what we truly need, not what we currently have :) . I don't want the interface polluted by implementation specific methods. I'm sure I'm over simplifying things, but I wanted to get the conversation started.

What do we need in terms of durability guarantees? Is sync-after-write necessary?

bq. In general, I would like to start from what we truly need, not what we currently have

Agree.

Would suggest starting review of existing implementations. Just reading https://bookkeeper.apache.org/docs/latest/api/distributedlog-api/ is interesting ("Single writer!") or namespaces -- is a namespace a "region" in our work -- in here https://bookkeeper.apache.org/distributedlog/docs/latest/user_guide/api/core

It has stuff like:

add
add // bulk add
flush
flushAndSync

... and then async versions.

All sounds good...




{quote}Would suggest starting review of existing implementations. Just reading [https://bookkeeper.apache.org/docs/latest/api/distributedlog-api/] is interesting ("Single writer!") or namespaces – is a namespace a "region" in our work – in here [https://bookkeeper.apache.org/distributedlog/docs/latest/user_guide/api/core]
{quote}
FYI, I know that [~chrajeshbabu32@gmail.com] is looking at BookKeeper/DistributedLog specifically as a part of RATIS-272. Plan is to converge that work with this one here.

[~ankit@apache.org] is looking at WAL API changes for Replication (and I believe working towards something that can actually compile/test). I've created HBASE-21020 to track this.

 

{quote}What do we need in terms of durability guarantees? Is sync-after-write necessary?
{quote}
[~mdrob] you mean having to do a manual 'sync' from HBase's perspective (like I think we do now) or from the WAL perspective. I think a WAL needs to be durable and consistent (from a read after create standpoint). That's more of an implementation detail of the specific WAL backend I would think (not something that would find it's way into the high level interface). Or maybe I'm misunderstanding what piece you're talking about.

AIUI hbase can block it's writes pending an acknowledgement from the storage implementation. This makes sense if we want to give operators the ability to gain some performance in exchange for some durability risk (flush v sync). I'm not actually sure what my intent was anymore, maybe it will come back to me later.

Will the old FB's hydrabase impl help here in determining the APIs needed here?

{quote}Will the old FB's hydrabase impl help here in determining the APIs needed here?
{quote}
Good question! I haven't looked closely enough to say for sure. I looked through the patch previously, but I don't recall if there was a clear notion of an API. I'll have to take a look.

I know that [~yuzhihong@gmail.com], [~ankit@apache.org], and [~sergey.soldatov] have been iterating on this. I was hoping that we would have an initial patch posted this past Friday, but that obviously didn't happen :)

The mega patch would be the aggregate diff for all the work in wal-refactor repository. 

I can attach it here but wonder what format would be easier for the community to review.

Sergey has some work outside the wal-refactor repo.

bq. Will the old FB's hydrabase impl help here in determining the APIs needed here?

If we are talking about HBASE-12259, than nope. Actually, most of the work for Hydrabase was made for the consensus protocol implementation and only a few attempts to apply that to the WAL system itself ( that were successfully dropped due to not accept for hbase-consensus module). We don't want to add our own implementation for quorum based consensus protocol. We want to make current WAL system flexible enough to build a new  WAL implementation based whether on some 3rd party consensus protocol implementation (RAFT/Paxos/etc) or any existing Distributed Log implementations (Apache Kafka, Apache BookKeeper, etc). The interfaces should be simple with a meaningful public contract and the number of interfaces to implement should be reasonable as well. 

Just need to see the API. Would like to have some provenance on what informed the choice made -- what was studied, what implementations were considered, that sort of thing. Thanks.

{quote}Just need to see the API. Would like to have some provenance on what informed the choice made – what was studied, what implementations were considered, that sort of thing. Thanks.
{quote}
Yup, that's what's coming here.

[~yuzhihong@gmail.com] wanna put this on reviewboard? I'm expecting significant feedback :)

Also, patch needs an explanation covering:
 * What is the "new API"?
 * What was the reasoning behind this API?
 * What's this "ListWAL" thing?

Thanks.

For those watching who didn't see the link update (like me :)): reviewboard is up! https://reviews.apache.org/r/68617/

I want a write-up before reviewing, one that covers the above. Was hoping that we'd have more than a fat patch for discussion.

I took a cursory look. It looks heavily polluted by current implementation -- figures, to some degree -- but was hoping for something a little more 'exciting' let us say. I do see stuff I'd thought we'd have dropped like "location" in filesystem and/or "directories" and was thinking that "size" across different implementations would have some extra color that seems absent.

Didn't spend long at it though...

Updated description section of https://reviews.apache.org/r/68617/  with our design goals.

On the writeup attached to an rb textbox

 * Should be a doc. attached here to this issue. It'll be lost if just a comment in rb.
 * The first sentence is just wrong .... "This patch aims to refactor WAL related classes in order to facilitate introduction of a non-FS based WAL implementation." Ratis doesn't have an FS? The WAL will hang on skyhooks? When the target is so inspecifically described, how we have a hope of knowing when we've hit it?
 * A sentence like, "Before making code changes, we studied Apache Kafka, Apache BookKeeper and Apache Ratis.", is usually followed by a summary of what was learned.
 * "Some design considerations:" begs the question of what design questions are not listed.
 * This is incorrect too... right: "The refactoring of WAL related code is to decouple WAL from FileSystem so that other consensus protocols can be accommodated to back different WAL implementations." BooKeeper, for instance, a purported target, is not consensus based... nor Kafka.
 * This is confusing => "metadata provider, FS based and non-FS based, provides metadata for given Id (represented by WALInfo) of any particular WAL" ... 'Id' is introduced w/o explanation. WALInfo represents 'Id' but is called WALInfo?
* Why is a class that identifies a WAL called WALInfo and not WALIdentifier or WAL_ID? "WALInfo : identification of any particular WAL" ... Info is effete.
* Why so many classes FSWALInfo, AbstractWAL, then AbstractFSWAL ... ? And why we even have an FS version of anything? I'd think we'd have ClassicWAL, KafkaWAL, rather than an attempt at a generic "FSWAL"... 
* There is a AbstractWALEntryStream.... How many implementations has it be used with? Classic HBase WAL and?
 * What is this? "FSRecoveredReplicationSource : FS based implementation for RecoveredReplicationSource"  And we just have an FS based one?
* Why is it ListWal but everywhere else WAL is capitalized?

Where is discussion of how to use the new API?

Where do I even go to look for the new WAL API? Presuming WAL is the place, looking at it, the only change is removal of roll writer?  So now the implmentation is responsible for rolling? Even when trouble syncing? Can we have discussion on how this will be in the new implementation along w/ any other change in mechanics?

Thats enough for now.


{quote}Ratis doesn't have an FS? The WAL will hang on skyhooks? When the target is so inspecifically described, how we have a hope of knowing when we've hit it?
{quote}
Of course Ratis is storing data somewhere, but with HBase using this Ratis-backed LogService *shouldn't* know what the underlying filesystem is. In other words, we don't _want_ to have to know. In an ideal world, we can use a datastructure and let the API hide the details for us.
{quote} * A sentence like, "Before making code changes, we studied Apache Kafka, Apache BookKeeper and Apache Ratis.", is usually followed by a summary of what was learned.{quote}
That's a good suggestion. I can say that a significant portion of the direction was strongly influenced by Apache DistributedLog. The architecture/abstraction they presented seems to jive naturally with what we want from HBase.
{quote}"The refactoring of WAL related code is to decouple WAL from FileSystem so that other consensus protocols can be accommodated to back different WAL implementations." BooKeeper, for instance, a purported target, is not consensus based... nor Kafka.
{quote}
I'm not sure how to interpret this to make a positive change. We are all in agreement that we don't want to be shoe-horned into a specific WAL implementation with this work (per the original "design" discussion). I think Ted was just trying to capture this. We just need a re-wording? I hope this is not a surprising statement.
{quote}WALInfo represents 'Id' but is called WALInfo?
{quote}
Yeah, agreed confusing. WALInfo is a unique identifier to a one WAL in HBase, regardless of the WAL implementation. That's it.
{quote}Why is a class that identifies a WAL called WALInfo and not WALIdentifier or WAL_ID?
{quote}
That is a great suggestion. I'm glad you made it. Which do you think is better?
{quote}And why we even have an FS version of anything? I'd think we'd have ClassicWAL, KafkaWAL, rather than an attempt at a generic "FSWAL"...
{quote}
Ted and Ankit were trying to consolidate some of the logic which is spread across FSHWal and AsyncFSWal, given their approach of: WALProvider, WALMetaDataProvider, and WALInfo interfaces. Are you suggesting that think there should be a brand-new naming convention and get rid of the "provider" notion completely? I'm struggling to peel away a suggestion from the criticism.
{quote}Where do I even go to look for the new WAL API?
{quote}
So, what would help? A Java package in which WAL API is encapsulated? A smaller review in which *only* the new WAL API is provided?
{quote}the only change is removal of roll writer? So now the implmentation is responsible for rolling? Even when trouble syncing?
{quote}
I think we need to tease this apart. How much of "log rolling" is due to HDFS-isms and how much is how HBase intrinsically operates? We know we want to do size-based "rolling" (new WAL file over a certain size), but is that relevant for all potential implementations? (e.g. I would think that a Kafka-backed WAL would not have any notion of rolling).

Do you have something in mind in how this abstraction should work? Do we create some sort of API which gives WAL impls the ability to "tell us" when their implementation isn't working well? Or, should HBase be completely agnostic of that?

As asked-for above, we need a write-up on how this work goes against the high-level design including learnings, decisions (why), cons, and todos. Asking us to deduce this info, the model, and intent, by trying to parse a four-pager patch is a lot to ask. The rb text doesn't satisfy my request above nor yours that followed after mine. For an example of what I'm after, see the write-up on HBASE-20708 (https://docs.google.com/document/d/1_872oHzrhJq4ck7f6zmp1J--zMhsIFvXSZyX1Mxg5MA/edit#), a doc. I've since gone back to a few times trying to ensure that any changes to the affected area align w/ the architects' intent.

On your comments:

 * On the lead-off, thanks for starting to fill in what should have been there but the point was an imprecise lead-of colors the reading of what follows.
 * If the implementation is informed by "Apache DistributedLog", I'd like to learn how. Do I have to read DL code and then this patch and compare to figure it? How I figure if DL namespace'ing was mapped to hbase regions or not? Any other learnings from this review of the outstanding literature?
 * "I think Ted was just trying to capture this." <= The comment is about consensus based WAL implementations... Which is an exclusive club. IIRC, the high-level design was more ecumenical. Are we dropping target impls?
* "Which do you think is better?" <= Either.
* "I'm struggling to peel away a suggestion from the criticism." <= This area of the codebase has seen heavy accretion. It is overladen w/ Interface, Abstracts, Impls, and Utils. I see an opportunity for nice cleanup via application of a strong design. From review of the commentary (only!), it looks like we are being freighted with a new set or Infos, Abstracts, and Interfaces, with an "FS" dimension thrown-in. On "Provider" being a core concept already, I'd forgotten. A write-up that talked up how existing Provider notion is being doubled-down on would help with navigation.
* "A smaller review in which only the new WAL API is provided?" <= I'd think this is how we'd lead off? In a write-up. The shiny new WAL interface that has had all FS/Path/File purged from it. Tah-dah!
* "I think we need to tease this apart." <= Does the patch say this anywhere? This is a TODO? Follow-on? No sense from the rb comment.
*  "Do you have something in mind in how this abstraction should work?" <= I have ideas but ideas are cheap ("API has an append that returns a sequence id. Also has a replay that takes an sequenceid and it gives you back all edits at and after the sequence id. Ideally, could do sequence id by region or group of regions and ask for replay by group or region."). I defer to you fellows that are doing the hard work. I'd like to benefit from what you've learned though from reviewing existing implementations. I don't think I will get this reading a fat patch only.



{quote}I'd think this is how we'd lead off? In a write-up. The shiny new WAL interface that has had all FS/Path/File purged from it. Tah-dah!
{quote}
 
{quote}A write-up that talked up how existing Provider notion is being doubled-down on would help with navigation.
{quote}
 
{quote}the high-level design was more ecumenical
{quote}
 
{quote}I defer to you fellows that are doing the hard work. I'd like to benefit from what you've learned though from reviewing existing implementations. I don't think I will get this reading a fat patch only.
{quote}
Fantastic. Thanks much, Stack, for penning this. I think this is all "in vision". We can draw a better line between things that we need to build in HBase and things that a WAL would provide.

FYI, had the pleasure of spending some time talking this through with Ted today. He has a new draft doc he's working on, incorporating some of the already given feedback, and working on splitting up the current patch to make the "core changes" to the API more clear (leaving the rest of the changes in a subsequent patch). The plan is to get something up the first half of next week.

Reviewers, hold tight, please! Appreciate the interest from all.

This is the google doc :

https://docs.google.com/document/d/141FDNSKHIY0DZeIWQd1Dc1QOw-3zlZxUB4Jqabch24c/edit?usp=sharing

This is the condensed version of the review request:

https://reviews.apache.org/r/68672/

The condensed version closely matches the googledoc in terms of key interfaces / classes.

Reading doc. (comments nor copy/paste allowed -- please fix... add reference here and author), the study of other logging systems resulted in "...no significant influence on HBase WAL API design." though above Josh says " I can say that a significant portion of the direction was strongly influenced by Apache DistributedLog".

Then we have a listing of the classes involved writing the WAL with stuff like this:

{{WAL implements WALFileLengthProvider}}

Nothing on "What was the reasoning behind this API?"[Josh] or what it is -- its the WAL we have already? (Why even have a WALFileLengthProvider and not just add a length method on the WAL Interface? Does Replication just need lengths to work? If so, discussion?).

Then comes 'design considerations'. #1 is not a design consideration but a note that code has been refactored. #2 is that we should be able to choose WAL via Configuration. #3 is an aspirational, abstract classes should not be tied to fs implementation, and #4 is a note on WAL metadata capability, a concept first mentioned here but unexplained/justified till later.

I see no discussion of 'region' entity in here.







Thanks for helpful comments.

bq. comments nor copy/paste allowed

Googledoc interface changed recently. I have given everyone the "comment" permission.

Let me study / think about every point raised above.

Will update the doc.

bq. the study of other logging systems resulted in "...no significant influence on HBase WAL API design." though above Josh says " I can say that a significant portion of the direction was strongly influenced by Apache DistributedLog".

I figure I should handle this one directly: to be honest, I shouldn't have dropped this comment here in HBase. That one is relevant for the Ratis LogService API. In that lengthy design doc that I put up and worked with a number of you on, it was a primary goal to design the HBase WAL API *only* to what HBase needs. This was to avoid the trap of trading one hard-dependency (HDFS) for another.

There was lots of chatter over on RATIS-272 (for those who want to be a part of that), and we got an initial API from that. The first wag at how we think the LogService should be implemented mimics the structure of how DistributedLog does things, which ultimately pushes us towards an API which looks like DL. Granted, I think what we have is more clean than DL, but that's where my comment came from.

I'd be remiss if I didn't at least acknowledge: of course we want to be aware of how general distributed log (the concept, not the project) APIs look like (otherwise, how do we know if what we're building would work generically). However, we still want to approach this initially by understanding what the requirements are inside of HBase, and then finding a happy medium between the systems we know we want to support.

The design doc does not help, it is just like pseudo-code. What I want to know is that, how do we deal with several key problems if we want to remove the direct dependency on FileSystem. There is a simple list that comes immediately to my mind:

1. How do we do fencing when RS crashes? Now we need to rename the wal directory for a RS, and then call recoverLease for all the files to confirm that they are all closed. And at RS side, when creating a wal write, we use createNonRecursive intentionally, so that if the wal directory has been renamed, we can not create wal writers any more. How do we want to abstract these operations in the new WAL API? How does other log systems, such as ratis, deal with this?

2. For sync replication, we have a config called remote wal directory, which exposes the file system to user. As it is implemented by us at Xiaomi, we can help to find a work around on this. And the sync replication also replies on the rename operation to do fencing.

3. The replication related stuffs. I have been asking this from long long ago, but no one gives an overall solution. And looking at the code on the RB, we have already started to change the stuffs in replication? And for RecoveredReplicationSource, we make it abstract and introduce a new FSRecoveredReplicationSource? Then where is the FSReplicationSource?

I always say, we should have an overall solution first, i.e., we should know what the system looks like when we finish. Then we start to work things out.

Thanks.

Good questions! Thanks for taking the time to write them, Duo.
{quote}How do we do fencing when RS crashes? Now we need to rename the wal directory for a RS, and then call recoverLease for all the files to confirm that they are all closed. And at RS side, when creating a wal write, we use createNonRecursive intentionally, so that if the wal directory has been renamed, we can not create wal writers any more. How do we want to abstract these operations in the new WAL API? How does other log systems, such as ratis, deal with this?
{quote}
This is good; I hadn't thought about abstracting out fencing. We should have API which pushes this fencing impl down into the Provider. For the Ratis LogService, we designed api to be able to {{close()}} a Log; make it read-only. In the context of HBase, we would close the Log before we start recovery/re-assignment, and have the net-effect of preventing any half-dead RS from continuing to try to add more edits to the Log. This effectively would work like recoverLease() does now for the HDFS case.
{quote}For sync replication, we have a config called remote wal directory, which exposes the file system to user. As it is implemented by us at Xiaomi, we can help to find a work around on this.
{quote}
Ok. I'm definitely dense here :). Do you have a pointer to some code to look at? Or, based on my previous, is a solution obvious to you?
{quote}looking at the code on the RB, we have already started to change the stuffs in replication? And for RecoveredReplicationSource, we make it abstract and introduce a new FSRecoveredReplicationSource? Then where is the FSReplicationSource?
{quote}
There is a second RB open which has a much-reduced version of that original patch. Looks like this might not have gotten attached to this Jira issue (oops, will make sure that's linked).

[https://reviews.apache.org/r/68672]

This should help give a much smaller view of API only. Trying to make some of the other "systems" using WALs work with a new API was a good exercise to make sure we didn't miss something obvious. Totally in agreement that we want a good API before we start throwing out implementation.

API is not the first thing to decide. As I said above, the first thing is we need to know the overall solution. You can see our design doc for serial replication and sync replication

https://docs.google.com/document/d/1LHC3IRUc5i2V4_roNw8BDAOKGM4bEapR_hefpZxDT00/edit

https://docs.google.com/document/d/193D3aOxD-muPIZuQfI4Zo3_qg6-Nepeu_kraYJVQkiE/edit#heading=h.e8l9k556m3wi

There is no API design in it, but we try our best to describe how we plan to do it in HBase.

{quote}
This is good; I hadn't thought about abstracting out fencing. We should have API which pushes this fencing impl down into the Provider. For the Ratis LogService, we designed api to be able to close() a Log; make it read-only. In the context of HBase, we would close the Log before we start recovery/re-assignment, and have the net-effect of preventing any half-dead RS from continuing to try to add more edits to the Log. This effectively would work like recoverLease() does now for the HDFS case.
{quote}

Yes this is what I really want to discuss, not something like whether we should use WALInfo or WALIdentity.

The information you described is still not enough to solve all the problems. In the old time we will roll the wal writer, and it is done by RS, so closing the wal file is not enough, as the RS will try to open a new one and write to it. That's why we need to rename the wal directory. In your words above, it seems to me that we will only have one stream opened forever for a RS, then how do we drop the old edits after flush? And how do we setup the wal stream? Only once at the RS start up? And if there are errors later, we just abort? Without trying to recover or open a new stream? Or it will be handled by ratis? And for the FileSystem, we will use multi wal to increase the performance, and the logic is messed up with WALProvider. Does ratis still need multi wal to increase the performance? And if not, what's the plan? We need to refactor the multi wal related code, to not work against the WALProvider but something with the FileSystem related stuffs directly?

For the sync replication thing, it is just a DualAsyncWriter, which writes to two HDFS clusters at once, I think it is possible to write to other log systems, such as ratis, if you still share the AsyncWriter interface. The problem here is that how to describe the place where we write the remote wals. For FileSystem based wals, it is just a directory on a remote cluster, for example, "hdfs://cluster-name/path". We need to find a way to describe other log systems.

Where is the 'design doc' that we're talking about? Is it the google doc attached in middle of this JIRA? The overview? If so, I was wondering if this doc was going to get a revision? Seems like plenty of questions and back-and-forth above that might get consideration and that might have an impact on the API and on general subsystem thinking? (Lets add link to this doc up at the top of this issue)

I like the [~Apache9] questions. Is it that he's done more homework that he has these questions or that he just has a better understanding of how the system works? IMO, it tends to be easier working through concerns in a design than in comments in JIRA/RB and or in code review; the latter tends to get distributed all over and moving code without the high-level figured can bring on myopia. Is the 'design doc' we talk of above the place to work through his concerns or is that somewhere else?

Thanks

{quote}Yes this is what I really want to discuss, not something like whether we should use WALInfo or WALIdentity.
{quote}
We're in agreement... API just gives something tangible to look at when thinking about requirements of the system. I think it's helpful, that's fine if you don't :). Having a pissing match about the name of a class at this point is a waste of time.
{quote}it seems to me that we will only have one stream opened forever for a RS, then how do we drop the old edits after flush
{quote}
No, the plan would be to mimic the RS "rolling" logs in Ratis as well. This was discussed over on the Ratis side. Seems to not have made it here – sorry.
{quote}In the old time we will roll the wal writer, and it is done by RS, so closing the wal file is not enough, as the RS will try to open a new one and write to it. That's why we need to rename the wal directory
{quote}
Crap. The current vision has a half-fix for this: just like we can do for the Log used by one RS, we can list all Logs used by this RS and force them closed. We don't (presently) have a mechanism spec'ed out in the LogService to prevent a client from creating new Logs. We will have a "centralized" service that manages the metadata for the Ratis logs in the system, so I think we _could_ do something equivalent in the LogService (prevent a specific client from creating a new Log). Need to think about that some more.
{quote}And for the FileSystem, we will use multi wal to increase the performance, and the logic is messed up with WALProvider.
{quote}
Tell me more, please.
{quote}Does ratis still need multi wal to increase the performance? And if not, what's the plan? We need to refactor the multi wal related code, to not work against the WALProvider but something with the FileSystem related stuffs directly?
{quote}
It's a goal that MultiWAL can work with any other WAL implementation, but not a "priority 0" kind of concern to me.
{quote} For FileSystem based wals, it is just a directory on a remote cluster, for example, "hdfs://cluster-name/path". We need to find a way to describe other log systems.
{quote}
Got it. Yeah, this is another hole right now. [~rajeshbabu] and [~sergey.soldatov] would probably be interested in this one; they've been thinking about what logic we'll need to build in LogService (generic) and what logic we'll have to build in HBase (specific).

Probably the biggest open question around this is how HBase will find the LogService "metadata" service (e.g. the aforementioned piece that gives DDL operations around Logs). Should the LogService provide some mechanism to publish this? Or just leave it as an example to the implementation (e.g. HBase master handles it)?

Thinking through the basics: an HDFS URI is logically equivalent to what we'd be using in the LogService: HDFS UI gives us a nameservice and the unique name of a file. For the LogService, we'd have the Raft quorum for the discovery service and the name of the log to create. Needs some more thought around a more elegant abstraction, I think...

{quote}If so, I was wondering if this doc was going to get a revision? (Lets add link to this doc up at the top of this issue)
{quote}
It's been receiving updates already. I think GDocs will let you see that? Will link that sucker as well if not already done.
{quote}Is it that he's done more homework that he has these questions or that he just has a better understanding of how the system works?
{quote}
Well, he's obviously an expert at the brand new sync replication stuff. I'll happily admit my ignorance around that. The fencing was me missing the importance of the directory rename. Good outcome from review.
{quote}Is the 'design doc' we talk of above the place to work through his concerns or is that somewhere else?
{quote}
My assumption was that we would be able to capture this information in the design doc, and any others that people see as a gap. [~sergey.soldatov] had mentioned offline yesterday that he thinks some gaps still exist around WAL splitting – do you understand that well enough to suggest what needs to be addressed in the doc which is not already there?

{quote}In the old time we will roll the wal writer, and it is done by RS, so closing the wal file is not enough, as the RS will try to open a new one and write to it. That's why we need to rename the wal directory.
{quote}
For the WAL provider that doesn't depend on the HDFS directory structure, there should be a manager that keeps information about existing logs. Internals are implementation specific (i.e. for Kafka wal provider it may be a separate topic or some internal DB. For consensus-based logs like Ratis LogService that might be a separate state machine), But any new log should be registered there. Adding a new method to WALProvider like 'disable'/'decommission' that would tell the manager to reject new logs for particular RS (or even region if we consider wal per region schema) is not a problem. For the existing wal providers, that method may rename the wal directory.
{quote}In your words above, it seems to me that we will only have one stream opened forever for a RS, then how do we drop the old edits after flush? And how do we setup the wal stream? Only once at the RS start up? And if there are errors later, we just abort?
{quote}
Not necessary. There is no problem to have wal per region. Actually, in some cases, it would be preferable. For example Kafka topic per region. Any kind of recovery would be a simple subscribe/replay the particular topic. No log splits, less offline time. For a regular case, we are not talking about streams. It's just a WAL implementation that supports the append operation. For replication/recovery we should be able to get a stream and read from the particular ID/offset. Error handling should be hidden by the implementation. A simple example for quorum based implementation. We have 3 nodes quorum for log 'RS1.1' (RS1, RS2,RS3). RS2, RS3 went down due some reason, so we lost the majority and this quorum becomes read-only. A new log 'RS1.2' is created with the quorum (RS1, RS4, RS5) and all writes are going there. But if we speak about reading stream it would provide a single instance that iterates through RS1.1 and RS1.2 continuously. The same approach may be applied to the existing wal files as well.
{quote}And for the FileSystem, we will use multi wal to increase the performance, and the logic is messed up with WALProvider. Does ratis still need multi wal to increase the performance? And if not, what's the plan? We need to refactor the multi wal related code, to not work against the WALProvider but something with the FileSystem related stuffs directly?
{quote}
That might be done in the further refactoring of multiwal. At the moment the approach is that we may specify 3rd party wal provider class in WALFactory. So if it's there, multiwal would not be used at all as it's the provider class. In other hands, it could be refactored to something like 'wal strategy' and works with any kind of providers.
{quote}had mentioned offline yesterday that he thinks some gaps still exist around WAL splitting – do you understand that well enough to suggest what needs to be addressed in the doc which is not already there?
{quote}
WALSplitter is a separate topic for the discussion. The current implementation has a bunch of dependencies on file operations such as temporary files, list of corrupted files, etc. From HBase perspective, it would be much easier to keep it as is and make log splitter an interface that should take log and create list of recovery logs. But from the perspective of 3rd party wal developer that would be a nightmare to handle all possible cases and fit into the split log chore logic. In other hands for the 1st iteration, this may be hidden by the schema where 3rd party wal may not use the splitter at all and recovery would be reading a stream of records provided by the WALProvider for a particular region

{quote}The current implementation has a bunch of dependencies on file operations such as temporary files, list of corrupted files, etc. From HBase perspective, it would be much easier to keep it as is and make log splitter an interface that should take log and create list of recovery logs.
{quote}
 
{quote}In other hands for the 1st iteration, this may be hidden by the schema where 3rd party wal may not use the splitter at all and recovery would be reading a stream of records provided by the WALProvider for a particular region
{quote}
Thanks for your assessment, Sergey. Your take makes sense to me (e.g. let WAL implementation decide if it needs splitting). This concern and assessment is something that should be captured in the design doc, [~yuzhihong@gmail.com].

A few of my personal thoughts that are based on previous experience of implementing such kind of functionality in HBase (C5, non-stop hbase, hydrabase). It would be better to perform atomic meaningful changes that address a particular problem without breaking the existing functionality and without adding an additional complexity. We need a 'pluggable'  WALProvider that will be agnostic to file system structure. Fine. Let's make it configurable and remove the dependency on file systems (introducing WALIdentity or whatever we call it). It doesn't work with the current implementation of replication? Not good, but we may mention that it in the Limitation section. All we need is an understanding that it's possible to implement even if it would require a lot of efforts. Possible the replication itself requires a new Jira 'Revisit Replication approach' especially if we are talking about different kind of wal providers. Possible someone would love to have a setup with replication between on-prem cluster that is using regular WAL and another in AWS using Bookeeper wal. And that would require another layer of abstraction for replication itself. Should it be done under this jira? Honestly speaking I don't think so. 

{quote}Possible the replication itself requires a new Jira 'Revisit Replication approach' especially if we are talking about different kind of wal providers
{quote}
 
{quote}And that would require another layer of abstraction for replication itself. Should it be done under this jira? Honestly speaking I don't think so. 
{quote}
When it comes to implementation, I think that's a good point. Playing with an implementation can be helpful, but (largely to what I think Duo is worried about) building an API based on such hacking never gives the correct product.

That said, I think we must include all systems in the design doc up-front. I, at least, learned something new about sync replication which is a good example of why this process is beneficial.

First ,WALSplitter is not a separated topic, it is the core of HBase. You can disable replication but you can not disable wal splitting...

And I think your approach sound good, there is a register method(or initialize? Or just do it in the constructor, not critical), when RS starts we will call it to get the permit to write to the log system. In the FileSystem based log system, it is just a creating of a directory, and for other log systems it is  And when master think the RS is die, then we call a disable method, which prevent further appending. For FileSystem this is done by renaming and recoverLease, and for other log systems I think there are ways to do this.

And I agree that, we should have different wal splitter for different wal systems. For FileSystem, this maybe done by splitting wal files into several recovered edits into the region directory, and for other log systems, we could use different ways. But the key point here is that, we need to know there are recovered edits when opening a region and scanning it to reconstruct the memstore. So I think we should add another method to the WAL system, which is used to get the recovered edits for a region when opening a region. IIRC [~zyork] is working on deploy HBase on S3 and was fighting with the recovered edits directory should be on S3 or HDFS, do not know what's the final solution but after the discussion here, I think it should be on HDFS, not S3?

So I think here we will add two methods to the wal system. One is for splitting wal for a region server, and the other is for getting recovered edits for a region. If the implementation is wal per region, then the split method is just a dummy one that does nothing, otherwise you still need to do something to make separated wals for different regions. And if split is too heavy, you can do filtering when getting recovered edits? Not sure, maybe.

And for replication, the above word 'subscribe/replay' inspires me. The replication is just another subscriber of the wals, right? It receives the wals for specific tables(regions), and then sends it to the remote clusters. So I think we could introduce the subscribe/consume style APIs for the wal system, then the implementation of replication will be straight-forward. I do not care whether they are wal files or some topics on Kafka, just give me the stream to read! And the FileSystem related code in the replication framework will also be moved into the wal system. You can see the code, we just use zookeeper to record the unconsumed wal files, and try to locate it on the FileSystem as it may be moved to oldWALs. It is just a basic subscribe/consume framework I think.

And for sync replication, I think we should make it work with different wal implementations. This is another story and I will keep tracking it. To be honest I do not know the solution yet, but I'm optimistic.

So in general, I think the problem for the current wal abstraction is that, the line is too low, we should cut it at a higher place, where fencing, log splitting, and reading recovered edits should all be included in it, but now lots of the code are outside the wal system. Thanks [~sergey.soldatov], your post really helps.

I believe now the discussion is coming to a good conclusion. +1 to what Duo said..  We can have this clear cut abstraction as the 1st step.. 

{quote}First ,WALSplitter is not a separated topic, it is the core of HBase. You can disable replication but you can not disable wal splitting...
{quote}
I think this got lost in text: Sergey's point was that this _could_ be made optional. In the current HDFS-based style, you are obviously correct that this is not optional. However, when we think about hypothetical log systems, we could see an optimization where the filtering of _just one Region's_ edits from a log can be pushed down into the log system itself. Such a feature would remove the need for WAL splitting to happen universally in HBase.
{quote}So I think we should add another method to the WAL system, which is used to get the recovered edits for a region when opening a region
{quote}
Yup! We're on the same page. In other words, WAL splitting is a function of getting the recovered edits for a region, not necessarily an invariant for HBase.
{quote}working on deploy HBase on S3 and was fighting with the recovered edits directory should be on S3 or HDFS, do not know what's the final solution but after the discussion here, I think it should be on HDFS, not S3?
{quote}
Yeah, I think they were co-locating the recovered edits on the same FS that WALs were put on.
{quote}The replication is just another subscriber of the wals, right?
{quote}
Yup. We put a simple "Listener" style interface into the Ratis LogService specifically around this. I think the difficult part around this for HBase is getting the implementation right, but definitely the architecture is simple.
{quote}And for sync replication, I think we should make it work with different wal implementations. This is another story and I will keep tracking it. To be honest I do not know the solution yet, but I'm optimistic.
{quote}
Ok! Sounds good for now. This is obviously a long way from hitting any "main" branches (still a long way from a feature branch). I'll spin off an issue on the parent issue to revisit sync-replication.
{quote}the line is too low, we should cut it at a higher place, where fencing, log splitting, and reading recovered edits should all be included in it, but now lots of the code are outside the wal system
{quote}
+1 that's a nice phrasing. Let me work with Ted and get some of this doc'ed.

bq. However, when we think about hypothetical log systems, we could see an optimization where the filtering of _just one Region's_ edits from a log can be pushed down into the log system itself. Such a feature would remove the need for WAL splitting to happen universally in HBase.

That's exactly I wanted to say. There are some cases where we don't need to split WALs (WAL per RS model, streams with filters, etc). And the question is whether we need to make any significant refactoring in this area (i.e., make WALSplitter working with abstract WALs and creating new WALs). Or we may live with the case where WALProvider has an interface to get recovered edits for the particular region and for the current providers the result of the WALSplitter will be returned, but for custom providers that would be implementation specific. 

{quote}That's exactly I wanted to say. There are some cases where we don't need to split WALs (WAL per RS model, streams with filters, etc). And the question is whether we need to make any significant refactoring in this area (i.e., make WALSplitter working with abstract WALs and creating new WALs). Or we may live with the case where WALProvider has an interface to get recovered edits for the particular region and for the current providers the result of the WALSplitter will be returned, but for custom providers that would be implementation specific. 
{quote}
I agree [~sergey.soldatov]. That's why I suggested something like the following in the interface:

 

getEditsForRegion(Region) - This let's the implementation handle the mess - WALSplitter, multi-wal, etc

Thanks for the patience.

I have modified the google doc link above for a high level design.

Thanks to Josh and Sergey for internal reviews.

[~stack], [~Apache9], (and others!) I know you are all super busy. If you get a chance to look at the new doc that I Ted and I worked on, that'd be greatly appreciated: [https://docs.google.com/document/d/1o552MkKq9wF3BXY2nVcsCXBAImUH6r132Cxv9WHL3D8/edit]

My hope is that this will make the high-level picture a bit clearer. Great review would be if we missed any implementation specific details in HBase WRT WALs and how they're used, or if we have any architectural goals in mind which we didn't state. After that, My hope would be to start making iterative changes in a feature branch to work towards this vision.

Finally, I do think it would be good to define a checkpoint on that feature branch with iterative changes to avoid the "mega-patch" pain we often find ourselves in. I'd be curious to hear if you have any ideas as to how we can get some good peer review without being too intrusive/heavy on your lives.

[~stack], [~Apache9], ping, just in case this got lost over the weekend. I think this is in a good state – am itching to start iterating on this.

[~reidchan], [~zyork], also, FYI if you'd like to see the latest on the approach and give some feedback.

If there are no immediate concerns, we'll start moving ahead with changes on a feature branch.

I have no other concerns by now. The design doc is fine for me.

Thanks for the explicit ack, Duo!

bq. If you get a chance to look at the new doc that I Ted and I worked on, that'd be greatly appreciated: 

Thanks for the ping [~elserj]. I read the doc. IMO, it gives little to no inkling as to how hbase will be changed. I left some comments. Thanks.

Results for branch HBASE-20952
	[build #1 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/1/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/1//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/1//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/1//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


{quote}IMO, it gives little to no inkling as to how hbase will be changed. I left some comments. Thanks.
{quote}
Yes, that was intentional. The point of this doc was to make sure we had a clear picture of all "WAL-related" things in HBase and what their roles & responsibilities were.

bq. The point of this doc was to make sure we had a clear picture of all "WAL-related" things in HBase and what their roles & responsibilities were.

Sorry. I did not get that that was the point reading the doc. The preamble drops just when it is about to make the point of what the doc is for. It is followed by three sections: "Components of WAL System", "Evolving individual WAL system components", and "Limitation". The first seems to be for the 'WAL-related' listing you suggest. The second's section implies a listing of how hbase will be changed ('Evolving') but it seems to be just a continuation of the listing ...

Yeah, sorry, I'm lost on what the doc is supposed to be doing.

I also made notes on imprecision and stuff I thought incorrect.

Thanks.

{quote}Yeah, sorry, I'm lost on what the doc is supposed to be doing.
{quote}
From the chatter above on this issue, the request was that a document first be presented which outlines how HBase uses WALs and idiosyncrasies/gotchas around that usage. The premise being: if we don't understand how we use WALs, we can't make a proposal around what "ideal" is.

The structure of the document was that, for each section, we covered how it works now and then made a proposal if there was something obvious that should be done instead. Obviously, emphasis is more on the former than the latter (given the immediately above acknowledgements)

Thanks for reviewing.

bq. From the chatter above on this issue, the request was that a document first be presented which outlines how HBase uses WALs and idiosyncrasies/gotchas around that usage.

Makes sense. Can't change something if you don't know what it entails. I'd think any "revisit" would have such a preface.

bq. ....and then made a proposal if there was something obvious that should be done instead. 

This aspect is thin to absent (IMO).

{quote}This aspect is thin to absent (IMO).
{quote}
That's fair. It's hard to get this all correct and down on paper without sending a (literal) book out for review. I see Ted is already on making some modifications, and I'll make some passes over the comments too. Appreciate your input, boss.

I'll be focusing on your review points around "how things work now" to polish that up. Will make it easier to then shift into beefing up the parts on "what to change".

I find that I am responding to Ted Yu up on the doc. I've stopped commenting. I do not, by choice, want to work with him. Generally, I only review his work when it looks like something of his is about to be committed. IMO, he does more damage than good in the project and so for the good of the project, I review his work when I can. Thanks.

Results for branch HBASE-20952
	[build #2 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/2/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/2//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/2//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/2//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #3 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/3/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/3//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/3//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/3//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #4 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/4/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/4//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/4//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/4//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #5 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/5/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/5//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/5//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/5//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #6 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/6/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/6//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/6//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/6//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(x) {color:red}-1 client integration test{color}
--Failed when running client tests on top of Hadoop 3. [see log for details|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/6//artifact/output-integration/hadoop-3.log]. (note that this means we didn't check the Hadoop 3 shaded client)


[~stack], spent the majority of the last three days with Ted working on the doc [https://docs.google.com/document/d/1o552MkKq9wF3BXY2nVcsCXBAImUH6r132Cxv9WHL3D8/edit#.]

By no means does it go into exact method signatures for every single case, but I hope the detail we've gone into is sufficient to paint a picture as to what needs to change. Of course, please feel free to ask for more info/details/clarity. Thanks in advance if you find the time to give it another review.

Results for branch HBASE-20952
	[build #7 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/7/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/7//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/7//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/7//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #8 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/8/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/8//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/8//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/8//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #9 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/9/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/9//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/9//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/9//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #10 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/10/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/10//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/10//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/10//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #12 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/12/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/12//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/12//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/12//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


One more gentle ping for addt'l reviews. Doc got a lot more love since the last round of reviews. Hope things are more clear now.

To avoid stalling out development further, I intend to start landing branches on the feature branch (per the dev-list note I sent a few weeks ago). Happy to keep iterating on design doc if folks want more details. My gut-feeling is that seeing some concrete (compiling) code might help and this is low-risk since it's going into a feature branch.

Would prefer to start showing "intent" via real code in the branch (and figure out how to slice/dice API & impl to make sure all folks are happy).

Results for branch HBASE-20952
	[build #13 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/13/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/13//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/13//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/13//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #14 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/14/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/14//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/14//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/14//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #15 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/15/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/15//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/15//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/15//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #16 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/16/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/16//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/16//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/16//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #17 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/17/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/17//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/17//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/17//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #19 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/19/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/19//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/19//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/19//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #20 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/20/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/20//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/20//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/20//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #21 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/21/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/21//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/21//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/21//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #22 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/22/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/22//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/22//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/22//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #23 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/23/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/23//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/23//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/23//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #24 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/24/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/24//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/24//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/24//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #25 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/25/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/25//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/25//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/25//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #26 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/26/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/26//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/26//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/26//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #27 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/27/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/27//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/27//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/27//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #28 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/28/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/28//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/28//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/28//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #29 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/29/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/29//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/29//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/29//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #30 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/30/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/30//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/30//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/30//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #32 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/32/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/32//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/32//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/32//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #34 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/34/]: (x) *{color:red}-1 overall{color}*
----
details (if available):









(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #35 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/35/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/35//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/35//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/35//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #36 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/36/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/36//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/36//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/36//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #37 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/37/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/37//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/37//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/37//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #38 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/38/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/38//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/38//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/38//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #39 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/39/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/39//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/39//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/39//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Don't see much movement on the feature branch for this. I'd like to disable the nightly test job for it until development picks up again.

Please shout if you'd prefer it stay on. If so, please plan to clean up failures.

{quote}
Don't see much movement on the feature branch for this. I'd like to disable the nightly test job for it until development picks up again.

Please shout if you'd prefer it stay on. If so, please plan to clean up failures.
{quote}

"Shout". Will refresh from master.
 

Results for branch HBASE-20952
	[build #40 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/40/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/40//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/40//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/40//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #41 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/41/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/41//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/41//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/41//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


From https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/41// , we can see that TestIncrementalBackupWithBulkLoad failed for hadoop3 build.
This is known issue - see HADOOP-15850.

Other than that, the build in HBASE-20952 branch is quite normal.

Results for branch HBASE-20952
	[build #42 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/42/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/42//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/42//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/42//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


{quote}
From https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/41// , we can see that TestIncrementalBackupWithBulkLoad failed for hadoop3 build.
This is known issue - see HADOOP-15850.

Other than that, the build in HBASE-20952 branch is quite normal.
{quote}

Please do what it takes to get passing builds. If there is a known cause of failure, can a JUnit Assume be used to disable the test on known-bad versions? does the branch require a particular version of Hadoop? If so, why doesn't it have that expressed in the pom?

bq. Please do what it takes to get passing builds. If there is a known cause of failure, can a JUnit Assume be used to disable the test on known-bad versions? does the branch require a particular version of Hadoop? If so, why doesn't it have that expressed in the pom?

[~busbey], in case it isn't clear, there's nothing committed to this branch. It's a copy of master presently...

Can we wait to make the branch until there are commits for it? Or wait to run the tests until then?

Results for branch HBASE-20952
	[build #43 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/43/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/43//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/43//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/43//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #44 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/44/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/44//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/44//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/44//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #45 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/45/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/45//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/45//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/45//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #46 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/46/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/46//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/46//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/46//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #47 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/47/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/47//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/47//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/47//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #48 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/48/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/48//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/48//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/48//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


How about if I move the job to only run weekly? Since my last comment this job has run 5 times, which means for about 20 hours of testing that has gotten us no new information.

OOO for personal reasons. No access to official emails during this period.


Results for branch HBASE-20952
	[build #49 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/49/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/49//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/49//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/49//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #50 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/50/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/50//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/50//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/50//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #51 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/51/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/51//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/51//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/51//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


I pushed a commit to move this branch to weekly tests.

Results for branch HBASE-20952
	[build #52 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/52/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/52//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/52//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/52//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #53 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/53/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/53//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/53//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/53//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #54 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/54/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/54//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/54//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/54//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


{quote}I pushed a commit to move this branch to weekly tests.
{quote}
Belated +1. Thanks [~busbey].

Results for branch HBASE-20952
	[build #55 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/55/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/55//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/55//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/55//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #56 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/56/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/56//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/56//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/56//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #57 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/57/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/57//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/57//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/57//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #58 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/58/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/58//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/58//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/58//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #59 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/59/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/59//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/59//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/59//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #60 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/60/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/60//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/60//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/60//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #61 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/61/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/61//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/61//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/61//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #62 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/62/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/62//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/62//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/62//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #63 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/63/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/63//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/63//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/63//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #64 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/64/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/64//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/64//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/64//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #65 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/65/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/65//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/65//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/65//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #66 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/66/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/66//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/66//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/66//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #67 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/67/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/67//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/67//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/67//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #68 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/68/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/68//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/68//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/68//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #69 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/69/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/69//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/69//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/69//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #70 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/70/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/70//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/70//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/70//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #72 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/72/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/72//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/72//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/72//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #73 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/73/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/73//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/73//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/73//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #74 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/74/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/74//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/74//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/74//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #75 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/75/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/75//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/75//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/75//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #76 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/76/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/76//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/76//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/76//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #78 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/78/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/78//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/78//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/78//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #79 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/79/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/79//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/79//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/79//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #80 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/80/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/80//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/80//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/80//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #81 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/81/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/81//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/81//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/81//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #82 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/82/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/82//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/82//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/82//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #83 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/83/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/83//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- Something went wrong running this stage, please [check relevant console output|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/83//console].


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- Something went wrong running this stage, please [check relevant console output|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/83//console].


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #84 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/84/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/84//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/84//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/84//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #85 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/85/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/85//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/85//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/85//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #86 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/86/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/86//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/86//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/86//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #87 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/87/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/87//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/87//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/87//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #88 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/88/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/88//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/88//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/88//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #89 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/89/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/89//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/89//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/89//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #90 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/90/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/90//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/90//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/90//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #91 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/91/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/91//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/91//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/91//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #92 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/92/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/92//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/92//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/92//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #93 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/93/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/93//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/93//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/93//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #94 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/94/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/94//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/94//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/94//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #95 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/95/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/95//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/95//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/95//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #96 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/96/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/96//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/96//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/96//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #97 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/97/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/97//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/97//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/97//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #98 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/98/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/98//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/98//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/98//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #99 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/99/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/99//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/99//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/99//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Should I remove this branch? No progress being made here? Thanks.

Been working on stuff upstream in Ratis lately. Intent is to come back to this.

If we want to drop the branch (to keep Jenkins from caching builds), that's fine. Can we make a tag with its current HEAD though?

we can stop jenkins builds and build caching by dropping the Jenkinsfile from the repo, we don't need to remove the entire branch.

bq. Been working on stuff upstream in Ratis lately. Intent is to come back to this.

Sweet.

bq. we can stop jenkins builds and build caching by dropping the Jenkinsfile from the repo, we don't need to remove the entire branch.

The one in the branch? Thanks [~busbey]

{quote}
bq. we can stop jenkins builds and build caching by dropping the Jenkinsfile from the repo, we don't need to remove the entire branch.

The one in the branch? Thanks Sean Busbey
{quote}

Yes, the files jenkins uses to determine if it needs jobs for a particular branch are:

* dev-support/Jenkinsfile
* dev-support/flaky-tests/flaky-reporting.Jenkinsfile
* dev-support/flaky-tests/run-flaky-tests.Jenkinsfile

If you just delete these three files from a particular branch then that branch is ignored by Jenkins AFAIK.

oh and then tell the jenkins multibranch job to scan the repository afterwards.

Results for branch HBASE-20952
	[build #100 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/100/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/100//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/100//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/100//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #101 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/101/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/101//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/101//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/101//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #102 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/102/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/102//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/102//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/102//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch HBASE-20952
	[build #103 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/103/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/103//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/103//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/HBASE-20952/103//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Disabled build with a sub-issue, HBASE-22885. Just run the revert to reenable building.

[~elserj] Is there any further work planned on this? I'm going to be touching the WAL and want to try to refactor some of the current structures. I think a lot of what I was going to do was orthogonal to this, but should this be kept in mind?

The old one has been archived...

Attach a doc for decoupling WAL and Replication so it will be much easier to have new WAL implementation.

Please start a new jira and attach the doc there.

Fine. Will do when I have enough time to actually work on this big work. The watchers of this issue can take a look at the design doc first.

[~zhangduo] I've added my initial thoughts to the doc. I'm interested in your work because I'll be touching and refactoring these parts of code in the coming months. So I'd like to collaborate in terms of design / code-reviews / code. I've tried going through the history of this jira and there is a lot of information to process. I kind of got the gist of it but there are a lot of subtle details that I don't fully understand. I'll spend more time on it the coming weeks. 

bq. Fine. Will do when I have enough time to actually work on this big work. The watchers of this issue can take a look at the design doc first.

Will do! Thanks for the ping.

The WAL code really digs in deep. I'm not sure if there is a "easy" abstraction to start with because of a lot of the work around sequenceId's, but that's not to say it's unworthy.

The original work has taken a back-burner for me. Not to say I wouldn't come back to it, just that it's not priority number 1.

