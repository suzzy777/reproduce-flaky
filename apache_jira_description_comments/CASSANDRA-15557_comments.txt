So I started this test in a while loop, and forgot about it over the long (US) weekend.  The net effect is I ran this _many_ thousands of times without failure on java 8.  Is this still an issue?

Don't have a lot of history on trunk in CI, but of the history I can look at I have not seen it fail normally; the only sample I see is that Circle CI run.

Here is the test in question

{code}
@Test
    public void testDropListAndAddListWithSameName() throws Throwable
    {
        createTable("CREATE TABLE %s (id text PRIMARY KEY, content text, myCollection list<text>);");
        execute("INSERT INTO %s (id, content , myCollection) VALUES ('test', 'first test', ['first element']);");
        execute("ALTER TABLE %s DROP myCollection;");
        execute("ALTER TABLE %s ADD myCollection list<text>;");

        assertRows(execute("SELECT * FROM %s;"), row("test", "first test", null));
        execute("UPDATE %s set myCollection = ['second element'] WHERE id = 'test';");
        assertRows(execute("SELECT * FROM %s;"), row("test", "first test", list("second element")));
    }
{code}

I am hesitant to say to close since the type of error is data correctness; if this was a time out I would be fine closing if stable so frequently.

The other annoying thing is nothing stands out in the logs https://482-209217594-gh.circle-artifacts.com/1/logs/TEST-org.apache.cassandra.cql3.validation.operations.AlterTest.log. We don't log the select so hard to say what happened before and after that block (even if we did timing isn't perfect).  Also when I search for cql_test_keyspace.table_11 I see that we didn't flush the table, so this should be local to memtable and not sstable.

Seems real as I've been able to reproduce a failure in a few environments  just running the testsuite in a loop, it varies how frequently it happens. So far it seems the slower the env (fewer cores, less ram, etc) the more likely it happens.

Using _while ant test -Dtest.name=AlterTest; do :; done_

{{[junit-timeout] DEBUG [PerDiskMemtableFlushWriter_0:1] 2020-03-02 09:39:35,759 Memtable.java:483 - Completed flushing /home/debian/code/cassandra/build/test/cassandra/data:0/system_schema/keyspaces-abac5682dea631c5b535b3d6cffd0fb6/na-194-big-Data.db (0.035KiB) for commitlog position CommitLogPosition(segmentId=1583141964092, position=7807)}}
 {{[junit-timeout] DEBUG [MemtableFlushWriter:2] 2020-03-02 09:39:35,764 ColumnFamilyStore.java:1144 - Flushed to [BigTableReader(path='/home/debian/code/cassandra/build/test/cassandra/data:0/system_schema/keyspaces-abac5682dea631c5b535b3d6cffd0fb6/na-194-big-Data.db')] (1 sstables, 4.830KiB), biggest 4.830KiB, smallest 4.830KiB}}
 {{[junit-timeout] ------------- ---------------- ---------------}}
 {{[junit-timeout] Testcase: testDropListAndAddListWithSameName(org.apache.cassandra.cql3.validation.operations.AlterTest): FAILED}}
 {{[junit-timeout] Invalid value for row 0 column 2 (mycollection of type list<text>), expected <null> but got <[first element]>}}
 {{[junit-timeout] junit.framework.AssertionFailedError: Invalid value for row 0 column 2 (mycollection of type list<text>), expected <null> but got <[first element]>}}
 {{[junit-timeout] at org.apache.cassandra.cql3.CQLTester.assertRows(CQLTester.java:1070)}}
 {{[junit-timeout] at org.apache.cassandra.cql3.validation.operations.AlterTest.testDropListAndAddListWithSameName(AlterTest.java:91)}}
 {{[junit-timeout] }}
 {{[junit-timeout] }}
 {{[junit-timeout] Test org.apache.cassandra.cql3.validation.operations.AlterTest FAILED}}
 {{ [delete] Deleting directory /home/debian/code/cassandra/build/test/cassandra/commitlog:0}}
 {{ [delete] Deleting directory /home/debian/code/cassandra/build/test/cassandra/data:0}}
 {{ [delete] Deleting directory /home/debian/code/cassandra/build/test/cassandra/saved_caches:0}}
 {{ [delete] Deleting directory /home/debian/code/cassandra/build/test/cassandra/hints:0}}
 {{[junitreport] Processing /home/debian/code/cassandra/build/test/TESTS-TestSuites.xml to /tmp/null291777528}}
 {{[junitreport] Loading stylesheet jar:[file:/usr/share/ant/lib/ant-junit.jar!/org/apache/tools/ant/taskdefs/optional/junit/xsl/junit-frames.xsl|file:///usr/share/ant/lib/ant-junit.jar!/org/apache/tools/ant/taskdefs/optional/junit/xsl/junit-frames.xsl]}}
 {{[junitreport] Transform time: 483ms}}
 {{[junitreport] Deleting: /tmp/null291777528}}{{BUILD FAILED}}
 {{/home/debian/code/cassandra/build.xml:1930: The following error occurred while executing this line:}}
 {{/home/debian/code/cassandra/build.xml:1831: Some test(s) failed.}}

It would fit if this was a timestamp issue like the previous failing of this test (see  https://issues.apache.org/jira/browse/CASSANDRA-12997) but I'd expect to see it more on the faster machines than on the slower ones that I've been able to repro this quickly with.

bq. So far it seems the slower the env (fewer cores, less ram, etc) the more likely it happens.

Makes sense, CI tends to run with limited resources; by default ~4 cores and ~4gb memory

[PR|[https://github.com/rssvihla/cassandra/pull/1]][Code|[https://github.com/rssvihla/cassandra/tree/failing-test-15557]]

Ran the tests all night on two different servers and had no issues (whereas before on the same hardware I had 30 or 40 failures usually within 5 to 10 minute).

The theory I have is this test got broken when the schema management changed in https://issues.apache.org/jira/browse/CASSANDRA-13426 and the test no longer was relying on client query state to set a timestamp as it was [here|[https://github.com/pcmanus/cassandra/commit/020960d727b882349aff00c17a1c46bf3c7f7a24#diff-43b2d530031e2f7ad4286bd05fed4ca0R253]|https://github.com/pcmanus/cassandra/commit/020960d727b882349aff00c17a1c46bf3c7f7a24#diff-43b2d530031e2f7ad4286bd05fed4ca0R253]and this logic appears to not have made it back in [here|[https://github.com/apache/cassandra/commit/207c80c1fd63dfbd8ca7e615ec8002ee8983c5d6#diff-50a7bf78bc4f943f42ce60c8768484a6R400]] which meant an occasional tie, but maybe I'm misreading it all, lots of code to go through in that PR.

The fix I used was one of the two proposed in 12997 (ie just using manual time stamp).

It seems that something is wrong on your github {{here}} github links. They bring me back to this page.

Not sure what's going on there, maybe some Jira macro run amok. Take 2

Code as it was when the test was originally fixed

[https://github.com/pcmanus/cassandra/commit/020960d727b882349aff00c17a1c46bf3c7f7a24#diff-43b2d530031e2f7ad4286bd05fed4ca0R253]

EDIT dunno why the highlight isn't being added to the links..[src/java/org/apache/cassandra/cql3/statements/AlterTableStatement.java|https://github.com/pcmanus/cassandra/commit/020960d727b882349aff00c17a1c46bf3c7f7a24#diff-43b2d530031e2f7ad4286bd05fed4ca0] line 253

Change below that I think stripped out the client state timestamp

[https://github.com/apache/cassandra/commit/207c80c1fd63dfbd8ca7e615ec8002ee8983c5d6#diff-50a7bf78bc4f943f42ce60c8768484a6R400]

EDIT ( [src/java/org/apache/cassandra/cql3/statements/schema/AlterTableStatement.java|https://github.com/apache/cassandra/commit/207c80c1fd63dfbd8ca7e615ec8002ee8983c5d6#diff-50a7bf78bc4f943f42ce60c8768484a6] line 400)

 

 

 

 

I believe that the test is fine and should not be changed. The {{DroppedColum}} should filter out every row with a timestamp less or equal to the {{DroppedColum.timestamp}}. So even if the row and the {{DroppedColum}} have the same timestamp, it should be ignored.
Now the interesting question is why if you fix the timestamps for the row and the dropped column, the test is not failing anymore? 


Yes silly me, easy enough to prove when setting the timestamps to the same value the tests still pass, and just to totally eliminate weird side effects, setting the timestamp in reverse breaks the test as expected so I don't think there is anything specific about setting the timestamp to any value that makes it pass. 

So I'm not sure I have a good theory as to why breaks in the first place. It does then act as if somehow the drop is happening "before" the insert. I'll keep digging thanks for the review.

In 4.0 we get the timestamp from {{FBUtilities.timestampMicros()}} unless it's been set explicitly by the user, so yes, the test can be racy as it used to be before CASSANDRA-12997. Sylvain's explanation why in the first comment is still the most likely one. We derive {{timestampMicros()}} from {{System.currentTimeMillis()}}, and that *can* walk back between the two statements' executions.

Now, it's tricker to reimplement the same logic in 4.0, so going for the second option of explicit timestamp would be my preferred way to resolve this issue.

Yep makes sense. I'd feel better if I had some proof why it's happening now (logging more or copying out the dropped columns table makes it not happen on the boxes I've replicated it with), but either way it can definitely happen with System.currentTimeMillis() and clock skew, and we'd need to protect against that.

I reopened my PR and restored my branch with the client side timestamp, simple fix: https://github.com/rssvihla/cassandra/pull/1

{quote}Now, it's tricker to reimplement the same logic in 4.0, so going for the second option of explicit timestamp would be my preferred way to resolve this issue.{quote}

It seems to me that we should be able to re-implement the same logic in {{AlterTableStatement.Raw.prepare}} no?

So digging into the actual failure, this took a few tries as wrapping logging, or flushing sstables seemed to make it hard to reproduce, I've confirmed it's time based errors at least in this case:

row ts:             1583753957613001

dropped time: {{1583753957613000}}

{{[junit-timeout] Testcase: testDropListAndAddListWithSameName(org.apache.cassandra.cql3.validation.operations.AlterTest): FAILED }}
 {{[junit-timeout] Dropped column: {java.nio.HeapByteBuffer[pos=0 lim=12 cap=12]=DroppedColumn{column=mycollection, droppedTime=1583753957613000}} Row timestamp: 1583753957613001 }}
 {{[junit-timeout] junit.framework.AssertionFailedError: Dropped column: {java.nio.HeapByteBuffer[pos=0 lim=12 cap=12]=DroppedColumn{column=mycollection, droppedTime=1583753957613000}} Row timestamp: 1583753957613001}}
 {{[junit-timeout] at org.apache.cassandra.cql3.validation.operations.AlterTest.testDropListAndAddListWithSameName(AlterTest.java:102) }}
 {{[junit-timeout] at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) }}
 {{[junit-timeout] at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) }}
 {{[junit-timeout] at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) }}
 {{[junit-timeout] Caused by: java.lang.AssertionError: Invalid value for row 0 column 2 (mycollection of type list<text>), expected <null> but got <[first element]> }}
 {{[junit-timeout] at org.apache.cassandra.cql3.CQLTester.assertRows(CQLTester.java:1070)}}
 {{[junit-timeout] at org.apache.cassandra.cql3.validation.operations.AlterTest.testDropListAndAddListWithSameName(AlterTest.java:98) }}
 {{[junit-timeout]}}
 {{[junit-timeout]}}

 

 

So looking at the alter schema logic more:
[https://github.com/apache/cassandra/blob/08b2192da0eb6deddcd8f79cd180d069442223ae/src/java/org/apache/cassandra/cql3/statements/schema/AlterTableStatement.java#L398]

and 
[https://github.com/apache/cassandra/blob/08b2192da0eb6deddcd8f79cd180d069442223ae/src/java/org/apache/cassandra/cql3/statements/schema/AlterTableStatement.java#L411-L426]

it does seem (naively) reasonable to have it using the ClientState's getTimestamp() method in the AlterTableStatement since the ClientState is already there, but I'm sure I'm missing lots of background. 

Will wait for more experience people to weigh in.

New [PR|https://github.com/apache/cassandra/pull/465] 

Note: I think this also happens to fix this behavior in CASSANDRA-15303 and made a new Jira for the issue this causes with dropped columns and precision https://issues.apache.org/jira/browse/CASSANDRA-15626

The patch looks good to me.

LGTM as well.

Sorry, there is an issue with the patch as pointed out by [~jasonstack] in  CASSANDRA-15303. The timestamp need to be set during the {{execution}} phase and not during the {{prepare}} one. Otherwise if the statement is prepared by the user it will reuse the same timestamp everytime it is executed. 

I borrowed the code from 15303 and updated the PR. Some notes:
 * There is an additional fix in there which is related to comparison of relations. This doesn't appear to be related to either Jira, but it makes sense at a glance, either way [~jasonstack] added it and he can comment
 * Made ClientState.getTimestatmp() static and call it directly instead of FBUtilities.timestampMicros()

But I'm also ok with someone first merging in 15303, then I can do another PR based on that code base just with the changes that use ClientState.getTimetamp() instead of FBUtilities.timestampMicros(). 

Schema DDL statements aren't really meant to be prepared, as they don't even support bound variables, and there is no benefit to doing so, so I'm not sure how much of an issue this is. But I guess one still could do that, sure.

Committed in trunk at 61b8a14a59e824854f87b54afc08289a3278942c

Should we change {{QueryState#getTimestamp()}} to use class {{ClientState}} instead of object {{clientState}}?

I got some exception when running dtest locally...

{code}
ERROR [main] 2020-03-20 15:43:21,360 CassandraDaemon.java:789 - Exception encountered during startup
java.lang.IncompatibleClassChangeError: Expecting non-static method org.apache.cassandra.service.ClientState.getTimestamp()J
	at org.apache.cassandra.service.QueryState.getTimestamp(QueryState.java:71)
	at org.apache.cassandra.cql3.QueryOptions.getTimestamp(QueryOptions.java:199)
	at org.apache.cassandra.cql3.statements.ModificationStatement.executeInternalWithoutCondition(ModificationStatement.java:630)
	at org.apache.cassandra.cql3.statements.ModificationStatement.executeLocally(ModificationStatement.java:624)
	at org.apache.cassandra.cql3.QueryProcessor.executeOnceInternal(QueryProcessor.java:358)
	at org.apache.cassandra.db.SystemKeyspace.persistLocalMetadata(SystemKeyspace.java:457)
	at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:228)
	at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:650)
	at org.apache.cassandra.service.CassandraDaemon.main(CassandraDaemon.java:767)

{code}

[~jasonstack] {{java.lang.IncompatibleClassChangeError}} is normally thrown when some client of a jar has not been recompiled while the jar has changed. Could you make sure that everything has been recompiled?

[~blerer]  "ant realclean && ant jar" solves it.. thanks

