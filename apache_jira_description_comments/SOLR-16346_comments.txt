I spent some time recently [playing with this a bit|https://github.com/gerlowskija/solr/tree/openapi-generation-spike].  That branch has a gradle 'resolve' task generate the OpenAPI spec, and an 'openApiGenerate' task generate a Python client in turn.  One v2 API ({{/node/logging}}) was updated with OpenAPI annotations.

In terms of difficulty, I was pleasantly surprised.  I'm not a gradle expert by any means, but the gradle integration seemed suspiciously straightforward.

It took a good bit more effort to take an existing v2 API and surround it with the right annotations so that it was represented correctly in the generated spec (and Python client).  The plugin (swagger-core's [swagger-gradle-plugin|https://github.com/swagger-api/swagger-core/blob/master/modules/swagger-gradle-plugin/README.md]) seems to be built with JAX-RS-style APIs in mind.  By default, it treats method inputs as API inputs, and return values as the response body.  This default doesn't work super well with the method signatures used in our current v2 API framework; these defaults can all be overridden, but the annotations to do this end up getting pretty verbose.  Covering all our APIs would be much easier if they were defined in JAX-RS (or at least using similar conventions).  But of course, it's all still possible as things are now.

I've opened a PR [here|https://github.com/apache/solr/pull/1024] to integrate the gradle-swagger-plugin into our gradle build to generate an OpenAPI spec from our API definitions.  Probably targeting the end of the week to commit.

That'll still leave the second piece of this ticket unaddressed: actually using the generated spec in some way.  But that can be handled separately.

Commit ddb2b94e7607bcb365224056438e8acafcd5e00b in solr's branch refs/heads/main from Jason Gerlowski
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=ddb2b94e760 ]

SOLR-16346: Generate OpenAPI spec (#1024)

This commit introduces the 'swagger-gradle-plugin' build-plugin to
Solr's gradle build.  Currently, it's invoked through a new task,
'resolve', that scans the solr-core classpath and generates an OpenAPI
spec based on any detected JAX-RS APIs.

This spec (located in the 'core' module's `build/generated/openapi`
directory) can be used out of the box by any OpenAPI compatible
tooling, such as the code-generator offered by 'swagger' or the web UI
offered by 'Redocly'.  Closer integration with some of this tooling,
particularly as it relates to code-generation, should come in upcoming
commits.

{noformat}
Bisecting: 0 revisions left to test after this (roughly 0 steps)

running  './gradlew' ':solr:core:analyzeClassesDependencies'
ddb2b94e7607bcb365224056438e8acafcd5e00b is the first bad commit 

* What went wrong:
Execution failed for task ':solr:core:analyzeClassesDependencies'.
> Dependency analysis found issues.
  usedUndeclaredArtifacts
   - com.fasterxml.jackson.core:jackson-annotations:2.13.3@jar
   - com.fasterxml.jackson.core:jackson-core:2.13.3@jar
   - com.fasterxml.jackson.core:jackson-databind:2.13.3@jar
   - io.swagger.core.v3:swagger-annotations:2.2.2@jar
   - org.apache.commons:commons-lang3:3.12.0@jar
   - org.slf4j:slf4j-api:1.7.36@jar{noformat}
 

Interestingly - I don't see what [~mdrob] is seeing in the build :/ I added `--info` to see what was going on and doesn't give a ton more insight.

{code:java}
./gradlew :solr:core:analyzeClassesDependencies --info
...
> Task :solr:core:analyzeClassesDependencies
Caching disabled for task ':solr:core:analyzeClassesDependencies' because:
  Build cache is disabled
Task ':solr:core:analyzeClassesDependencies' is not up-to-date because:
  Output property 'logFilePath' file /Users/risdenk/repos/apache/solr/solr/core/build/reports/dependency-analyze/analyzeClassesDependencies.log has been removed.
Analyzing dependencies of main classesDirs for [require: [configuration ':solr:core:compileClasspath'], allowedToUse: [configuration ':solr:core:permitUsedUndeclared'], allowedToDeclare: [configuration ':solr:core:permitUnusedDeclared']]
Built artifact class map with 0 hits and 116 misses; cache size is 116
:solr:core:analyzeClassesDependencies (Thread[Execution worker for ':' Thread 3,5,main]) completed. Took 1.428 secs.

BUILD SUCCESSFUL in 18s
12 actionable tasks: 10 executed, 2 up-to-date
Watched directory hierarchies: [/Users/risdenk/repos/apache/solr]
{code}


I also haven't been able to reproduce yet.  The 'check' and 'analyzeClassesDependencies' tasks run successfully for me with both Java 11 and 17.  Will work with Mike offline to try and figure out what the difference between our environments are... 

Still not sure why Mike sees this behavior, but it seems patently wrong.

Taking the Jackson deps as an example, we declare jackson-core, jackson-annotations, and jackson-databind right [here|https://github.com/apache/solr/blob/main/solr/core/build.gradle#L147].  (Unless I've been misunderstanding what "usedUndeclared" means each time I've seen it.)

Commit bf7b86ac23a09acc147092d330cc78d651253409 in solr's branch refs/heads/main from Jason Gerlowski
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=bf7b86ac23a ]

SOLR-16346: Fix intermittent 'check' error (#1043)

A previous commit for SOLR-16346 introduced a usedUndeclared 'check'
error that only showed up in some limited environments.

This commit fixes that check error by declaring the correct dep:
switching 'swagger-core' out for 'swagger-annotations'.

Thanks to Mike for helping me debug this.  It looks like my prior commit had added a dependency on {{swagger-core}}, when the only thing our code actually used were a few classes in the smaller {{swagger-annotations}} dep.  On updating that, all the other errors resolve as well.  I've merged a PR to fix this on {{main}} (thanks for the review Kevin!).

One lingering question that I never got to the bottom of is why our {{analyzeClassesDependencies}} task behaves nondeterministically.  I tried a variety of JVMs and even machines, but was never able to reproduce "locally".  Flakiness in our test suite is at least understandable, but flakiness in our static linting tools is just odd.  Something to keep an eye on going forward I guess.

{quote}One lingering question that I never got to the bottom of is why our {{analyzeClassesDependencies}} task behaves nondeterministically.  I tried a variety of JVMs and even machines, but was never able to reproduce "locally".  Flakiness in our test suite is at least understandable, but flakiness in our static linting tools is just odd.  Something to keep an eye on going forward I guess.{quote}

I have no idea what is happening here either. I'm 90% sure its deterministic - but who knows :(

Commit 4711e21834284552a501d5992df78398d2df4492 in solr's branch refs/heads/branch_9x from Jason Gerlowski
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=4711e218342 ]

SOLR-16346: Generate OpenAPI spec

This commit introduces the 'swagger-gradle-plugin' build-plugin to
Solr's gradle build.  Currently, it's invoked through a new task,
'resolve', that scans the solr-core classpath and generates an OpenAPI
spec based on any detected JAX-RS APIs.

This spec (located in the 'core' module's `build/generated/openapi`
directory) can be used out of the box by any OpenAPI compatible
tooling, such as the code-generator offered by 'swagger' or the web UI
offered by 'Redocly'.  Closer integration with some of this tooling,
particularly as it relates to code-generation, should come in upcoming
commits.


Commit a257915675a41e3d89689bee4e4c2dad6203fa71 in solr's branch refs/heads/branch_9x from Jason Gerlowski
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=a257915675a ]

SOLR-16346: Fix intermittent 'check' error

A previous commit for SOLR-16346 introduced a usedUndeclared 'check'
error that only showed up in some limited environments.

This commit fixes that check error by declaring the correct dep:
switching 'swagger-core' out for 'swagger-annotations'.


I backported this to 9.x earlier this morning.

bq. That'll still leave the second piece of this ticket unaddressed: actually using the generated spec in some way. But that can be handled separately.

This is still true - nothing uses the API spec generated by {{./gradlew resolve}}.  But the more I think about this, the more this seems like it might be good to split into a separate ticket, as any of our possible uses (generating ref-guide sections, client bindings for (e.g.) Python, etc.) would be pretty sizable tickets in their own right.

I'm going to rename the ticket to reflect this tighter scope and close out.

Commit 637f3705e87510dfb3ef2bca8625a184982bb1e7 in solr's branch refs/heads/main from Houston Putman
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=637f3705e87 ]

Fix version parsing in dev-tools

Relates to a change created by SOLR-16346

Commit 2c44644ee1df19943a44f4cb6e01bef34a8a93bc in solr's branch refs/heads/branch_9x from Houston Putman
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=2c44644ee1d ]

Fix version parsing in dev-tools

Relates to a change created by SOLR-16346

Commit 0c5fd050f34186ec70d3f3a2de7a6f5b573e4293 in solr's branch refs/heads/branch_9_2 from Houston Putman
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=0c5fd050f34 ]

Fix version parsing in dev-tools

Relates to a change created by SOLR-16346

Closing after the 9.2.0 release

Why is the task named "resolve"?  Shouldn't it have a name reflective of OpenAPI?

"resolve" was/is the default that comes with the swagger-gradle-plugin that gives us this functionality; no particular reason beyond that.  Definitely change-able if you want to go with something more intuitive.

