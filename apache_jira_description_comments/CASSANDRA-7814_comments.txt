[~jbellis]: 
\\
\\
* We can add {{DESCRIBE INDEX <table_name> <idx_name>}} which will output the index CQL. Is this all that's required? To omit the table name would probably require a change in the python driver as it currently attaches the index metadata to the tables. If we speficy the table name we should be able to only change cqlsh.
* Note that {{DESCRIBE TABLE <table_name>}} already outputs the indexes CQL, at least in 3.0: 
\\
{code}
cqlsh:test> DESCRIBE TABLE users;

CREATE TABLE test.users (
    user_id text PRIMARY KEY,
    age int,
    first_name text,
    last_name text
) WITH bloom_filter_fp_chance = 0.01
    AND caching = '{"keys":"ALL", "rows_per_partition":"NONE"}'
    AND comment = ''
    AND compaction = {'min_threshold': '4', 'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32'}
    AND compression = {'sstable_compression': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99.0PERCENTILE';
CREATE INDEX age_idx ON test.users (age);
{code}
* Are you happy with the fix in 3.0 only or do you want it in 2.1 or 2.0 as well?

In consistency with {{DROP INDEX}}, {{DESCRIBE INDEX}} should also only take the index name, even though it's just a cqslh command.

2.1 and 3.0 C* versions.

Can we drop the TABLE/INDEX/FUNCTION and just make a plain DESCRIBE return the appropriate definition?  (If we have separate namespaces for all three, I suppose we may need to retain these optionally in case of ambiguity.)

As mentioned in the comment, this is hard when you have many tables or even many indices, you end up describing the keyspace and searching for the index. Describe index is more helpful in some cases.

The development is pretty much complete, I should be able to submit the patch early next week after I've reviewed it one more time myself and double checked the tests.

The code (based on 2.1) is here:
patch: https://github.com/stef1927/cassandra/tree/7814
python driver: https://github.com/stef1927/python-driver/tree/7814
dtests: https://github.com/stef1927/cassandra-dtest/tree/7814

We should be able to do things like:

{code}
  DESCRIBE KEYSPACE myks;
  DESCRIBE myks;
  DESCRIBE TABLE myks.mytable;
  DESCRIBE myks.mytable;
  DESCRIBE INDEX myks.myindex;
  DESCRIBE myks.myindex;

  USE myks;
  DESCRIBE TABLE mytable;
  DESCRIBE mytable;
  DESCRIBE INDEX myindex;
  DESCRIBE myindex;
{code}

See the dtest for more details.

For the python driver, I've created a ticket linking it to my branch:
https://datastax-oss.atlassian.net/browse/PYTHON-241

It's not that this functionality cannot be done without changing the driver,
it's just that at the moment it is not very efficient since we need to loop
on all keyspace tables and then for each table we need to loop on all columns
in order to find the index metadata. The same is true for existing functionality
like {{DROP INDEX idxname}} and all the time we complete on commands that expect an
index name. So I added a dictionary that maps index names to index metadata.

The patch assumes this new python driver version, for this reason in the patch I commented
out the part of the code that loads the driver from the zip file (to be reverted before committing).

So we should not commit until the driver has been updated. If driver ticket is rejected or is not ready in time
we can always rework the patch to loop on tables and columns.

Sure I understand! :)

bq. So we should not commit until the driver has been updated. If driver ticket is rejected or is not ready in time we can always rework the patch to loop on tables and columns.

We usually build an "internal" version of the driver with the changes and commit with that version 

Thanks Mikhail, I am aware of the internal driver zip file and we certainly need to commit it with everything else.

However, I don't quite understand, do we have a git branch we can use to commit the changes to the driver even if the official driver version has not implemented the ticket yet or do we need to wait?

[~thobbs], [~iamaleksey] - can you clarify the process a bit more?

Thanks!

Hi [~blerer], this is ready for review. Thanks!

So far the process for updating the bundled python driver has been a bit adhoc.  If possible, we prefer to use versions of the python driver in this order:
* official releases
* commits on the master branch (in between releases)
* master + uncommitted changes (i.e. some other branch)

Although we haven't been perfect about this in the past, we should only use a non-release version if there's a critical bugfix that's needed.  The only exception to that is for supporting new features in trunk, which may not have official support in the driver for quite some time (although we should bundled a released version before releasing C*, when possible).

To build the driver zip file, run the following command from a checkout of the driver:

{noformat}
python setup.py sdist --formats=zip
{noformat}

This will create a zip under the {{dist/}} directory.  So far, when bundling a non-release version of the driver, I have simply commented on JIRA to indicate the sha1 hash of the commit that was used.  However, it seems like it would be reasonable to include the hash (at least a prefix) in the version portion of the filename.  For example, {{cassandra-driver-internal-only-2.1.4.post.f7e014a1fb.zip}}.

Thanks for the detailed explanation [~thobbs].

I merged my python driver feature branch into my master (after pulling from the official driver repository) and then updated the patch with a zip file built on my python master branch by following your instructions:

https://github.com/apache/cassandra/commit/9abe6b451d715faca8ee792dba1379cedca39619

I hope that's OK.

After removing the existing driver that was on my System path I ran into the following error:
{quote}Python Cassandra driver not installed, or not on PYTHONPATH.
You might try "pip install cassandra-driver".{quote}

I printed out the the path that cqlsh was using to load the cassandra driver and found: 
{{myPathToTheBinDirectory..\lib\cassandra-driver-internal-only-2.1.4.post.3d578f9b69.zip\cassandra-driver-2.1.4.post.3d578f9b69}}

I looked into the zip file and found out that the root directory was: {{cassandra-driver-2.1.4.post0}} which explain why the driver could not be loaded. 

So sorry [~blerer] I tested the zip file without realizing I still had the python driver installed. Please try again.

I changed the python driver {{setup.py}} to append the git hash to the root directory as well as the file name, and then I rebuilt the driver at 5f06ec5. [~thobbs] please check commit 2671917 in https://github.com/stef1927/python-driver/commits/7814 and let us know if this seems reasonable. My doubt is because the official python driver won't have this commit in all likelihood, unless there is a way to tell python sdist to only optionally add the git hash, in which case I can open another python ticket to ask them to pick it up. At the moment, when we pick up an official release or build on the official master branch it will still work, just without the git hash. The alternative is to manually add the hash to the file name like I did the first time round and then to enhance cqlsh to remove the hash when it calculates the root directory .

+1

Since this is a low-priority improvement for cqlsh, I would prefer to wait for the python driver changes to be included in an official release before upgrading the bundled python driver.  If the driver changes don't get merged, we can commit the more expensive version in cqlsh.

[~Stefania] can you go ahead and open a pull request for the python driver?  (Make sure to use a branch other than master for that.)

As for automatically including the hash in the zip filename, I agree that that would probably not be committed unless it was controlled by an optional flag.  You could add support for a flag similarly to the existing {{--no-extensions}}, {{--no-murmur3}}, and {{--no-libev}} flags.  I would make those changes in a second pull request to make them easier to exclude, if needed.

Thank you for your review [~blerer] and [~thobbs]

Here are the python driver pull request and ticket:

https://github.com/datastax/python-driver/pull/263
https://datastax-oss.atlassian.net/browse/PYTHON-241

Here is the --tag-build cmd line option pull request:
https://github.com/datastax/python-driver/pull/262

I will keep track of PYTHON-241 to see when we can rebuild the driver and commit.

It turns out the special --tag-build command line option is not required, here is the command to add the git tag to the zip file name and root directory:

{code}
python setup.py egg_info -b-`git rev-parse --short HEAD` sdist --formats=zip
{code}

[~thobbs], [PYTHON-241|https://datastax-oss.atlassian.net/browse/PYTHON-241] has been resolved with fix version 2.6, not yet released. Shall I bundle the python driver from the master branch so we can close this ticket or wait for 2.6 to be released?

This is fairly low priority, and 2.6 should be released in roughly a week, so let's just wait for 2.6.

[~thobbs], I've rebased and bundled the 2.6c1 driver.

The dtests pull request is [here|https://github.com/riptano/cassandra-dtest/pull/343].

CI is still running and will be available [here|http://cassci.datastax.com/view/Dev/view/stef1927/job/stef1927-7814-dtest/] and [here|http://cassci.datastax.com/view/Dev/view/stef1927/job/stef1927-7814-testall/].

CI for the 2.2 patch:

http://cassci.datastax.com/view/Dev/view/stef1927/job/stef1927-7814-2.2-testall/lastCompletedBuild/testReport/
http://cassci.datastax.com/view/Dev/view/stef1927/job/stef1927-7814-2.2-dtest/lastCompletedBuild/testReport/

committed

Thanks

Is it a requirement that the output of DESCRIBE should sort things lexicographically? For example, if keyspace test has tables test and users, do we require that the output of DESCRIBE KEYSPACE test should show the test table before the users table?

I ask because the dtest for this ticket is very flaky and fails frequently. It's written to expect a specific sort order in the tables and indexes for the output of DESCRIBE KEYSPACE. The root cause is in the cassandra Python driver in cassandra.metadata, because of the implementation of export_as_string() in the KeyspaceMetadata and TableMetadata classes. They visit their child objects in the order returned by the Python dict values() function, which is arbitrary and unsorted.

If lexicographic sorting is a requirement, a modification to the Python driver will be needed. If lexicographic sorting is not a requirement, then I could modify the test_describe() dtest to stop caring about the order of objects in the DESCRIBE output.

This is coming up in CASSANDRA-10190 (adding Python 3 compatibility to cqlsh).

[~ptbannister] If you narrowed in on the cause of a flaky test (it sounds like you indeed have), please do open a new Jira with a patch for such. Thanks for bringing this up, regardless. 

