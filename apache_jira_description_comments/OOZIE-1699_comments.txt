Do find many uncaught exceptions from oozie captured in the catalina.out file.

{code}
>>> Exception in thread "pool-2-thread-22" java.lang.OutOfMemoryError: GC overhead limit exceeded
>>> Exception in thread "pool-2-thread-19" java.lang.IllegalMonitorStateException
   ...
           at org.apache.oozie.util.PollablePriorityDelayQueue.poll(PollablePriorityDelayQueue.java:80)
   ...
>>> Exception in thread "pool-2-thread-24" java.lang.IllegalStateException: queueElement already in a queue
            at org.apache.oozie.util.PriorityDelayQueue.offer(PriorityDelayQueue.java:347)
{code}

Looks like these threads have died and the ThreadPoolExecutor has created new threads to make good for these.

Debugging this further, able to identify that there is an Exception in CallableWrapper::run() before removeFromUniqueCallables() is invoked, leaving command behind in uniqueCallables list. This prevents this item from getting added again into the queue and since the earlier run() failed, the command never gets executed till a server restart.

The core issue is before XCommand is added to the workerQueue within BlockingQueue of the ThreadPoolExecutor, it is added to the uniqueCallables in CallableQueueService. If however while XCommand isn't added to the BlockingQueue due to any exception (as below), the item remains in uniqueCallables preventing further execution of the command.

{code}
        if (queueElement == null) {
            throw new NullPointerException("queueElement is NULL");
        }
        if (queueElement.getPriority() < 0 || queueElement.getPriority() >= priorities) {
            throw new IllegalArgumentException("priority out of range: " + queueElement);
        }
        if (queueElement.inQueue) {
            throw new IllegalStateException("queueElement already in a queue: " + queueElement);
        }
{code}

Testing JIRA OOZIE-1699

Cleaning local git workspace

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------

Patch does seem to apply alright. Am I missing something ?

{code}
sriksun:oozie-trunk sriksun$ git pull -v --all
Fetching origin
From https://git-wip-us.apache.org/repos/asf/oozie
 = [up to date]      master     -> origin/master
 = [up to date]      ap-pages   -> origin/ap-pages
 = [up to date]      branch-3.1 -> origin/branch-3.1
 = [up to date]      branch-3.1.4 -> origin/branch-3.1.4
 = [up to date]      branch-3.2 -> origin/branch-3.2
 = [up to date]      branch-3.3 -> origin/branch-3.3
 = [up to date]      branch-4.0 -> origin/branch-4.0
 = [up to date]      hcat-intre -> origin/hcat-intre
Already up-to-date.

sriksun:oozie-trunk sriksun$ curl "https://issues.apache.org/jira/secure/attachment/12630002/OOZIE-1699.patch" | git apply -v --check
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 10948  100 10948    0     0   4635      0  0:00:02  0:00:02 --:--:--  4637
Checking patch core/src/main/java/org/apache/oozie/service/CallableQueueService.java...
Checking patch core/src/main/java/org/apache/oozie/util/PollablePriorityDelayQueue.java...
Checking patch core/src/main/java/org/apache/oozie/util/PriorityDelayQueue.java...
Checking patch core/src/test/java/org/apache/oozie/service/TestCallableQueueService.java...
{code}

Attaching patch with --no-prefix as suggested by [~shwethags]. Thanks

Testing JIRA OOZIE-1699

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1390
.    Tests failed: 0
.    Tests errors: 1

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/1065/

Verified the failed test multiple times and there doesn't seem to be any regression. I am guessing that this test is generally flaky, based on what I saw with other test-patches

https://builds.apache.org/job/oozie-trunk-precommit-build/1066/testReport/ (OOZIE-1698)
https://builds.apache.org/job/oozie-trunk-precommit-build/1044/testReport/ (OOZIE-1681) 
...

Testing JIRA OOZIE-1699

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1391
.    Tests failed: 0
.    Tests errors: 1

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/1069/

The test in focus is  org.apache.oozie.event.TestEventGeneration.testCoordinatorActionEvent



This was a nasty bug. Thanks for the find Srikanth
+1..Committed to trunk

Thanks for finding and fixing this.  
We recently ran into a similar issue (described on the [mailing list here|http://mail-archives.apache.org/mod_mbox/oozie-dev/201402.mbox/%3cCAHz+ZFeaTx3OFEWFZZbDejT9F=RTbexgHUvBeWPyAqEkoY2N7g@mail.gmail.com%3e]) and it looks like OOZIE-1699 fixed it too!

We noticed that this fix is causing congestion. Queue operation were talking longer time than expected.

There are two lock being used for queuing commands, which is causing delay.

First, all queue command function of CallableQueueService is synchronized.

{code}

public synchronized boolean queue(XCallable<?> callable, long delay) {
    if (callable == null) {
        return true;
    }
    boolean queued = false;
    if (Services.get().getSystemMode() == SYSTEM_MODE.SAFEMODE) {
        log.warn("[queue] System is in SAFEMODE. Hence no callable is queued. current queue size " + queue.size());
    }
    else {
        checkInterruptTypes(callable);
        queued = queue(new CallableWrapper(callable, delay), false);
        if (queued) {
            incrCounter(INSTR_QUEUED_COUNTER, 1);
        }
        else {
            log.warn("Could not queue callable");
        }
    }
    return queued;
}

public synchronized boolean queueSerial(List<? extends XCallable<?>> callables, long delay) {
    boolean queued;
    if (callables == null || callables.size() == 0) {
        queued = true;
    }
    else if (callables.size() == 1) {
        queued = queue(callables.get(0), delay);
    }
    else {
        XCallable<?> callable = new CompositeCallable(callables);
        queued = queue(callable, delay);
        if (queued) {
            incrCounter(INSTR_QUEUED_COUNTER, callables.size());
        }
    }
    return queued;
}
{code}

Second, add function of PriorityDelayQueue need to acquire ReentrantLock
lock, which was added as part of this patch.
{code}

+        boolean accepted;
+        lock.lock();
+        try {
+            accepted = queues[queueElement.getPriority()].offer(queueElement);
+            debug("offer([{0}]), to P[{1}] delay[{2}ms] accepted[{3}]", queueElement.getElement().toString(),
+                  queueElement.getPriority(), queueElement.getDelay(TimeUnit.MILLISECONDS), accepted);
+            if (accepted) {
+                if (currentSize != null) {
+                    currentSize.incrementAndGet();
+                }
+                queueElement.inQueue = true;
             }
-            queueElement.inQueue = true;
+        } finally {
+            lock.unlock();
         }
		{code}
Acquiring two lock for queueing a single command  was slowing down the system.
Server was taking more than 4 sec, just to queue a command.


After we rollback this patch and server was back to normal.

lock was added in offer() to avoid the following error:
>>> Exception in thread "pool-2-thread-24" java.lang.IllegalStateException: queueElement already in a queue
            at org.apache.oozie.util.PriorityDelayQueue.offer(PriorityDelayQueue.java:347)
From PriorityDelayQueue perspective, lock is required at offer() as it internally does offer and set inQueue. If the 2 queue()s are called in parallel for the same command, one will fail with the above exception(without lock). But from CallableQueueService perspective, I don't see how the same command can be queued in parallel as CallabeQueueService.queue() is synchronised and filterDuplicates will remove the 2nd queue().

Anyways, the lock in offer() can be removed. But the rest of the patch is important as it addresses the correctness issue

{quote}
But from CallableQueueService perspective, I don't see how the same command can be queued in parallel as CallabeQueueService.queue() is synchronised and filterDuplicates will remove the 2nd queue().
{quote}

The problem we notice was not with queuing same command in parallel, but system congestion because of acquiring two lock for a queue command.

{quote}
Anyways, the lock in offer() can be removed.
{quote}

Other option could be is to keep lock in offer(), so that peek() and offer() uses same lock. We can remove synchronized keyword for CallableQueueService.queue() and queueSerial.

[~puru]
I understand the issue that you faced. I was just explaining the reason why we added lock in offer(): to solve parallel enqueues. But I don't know how parallel enqueues can happen though

We can't remove synchronised in CallableQueueService.queue(CallableWrapper wrapper, boolean ignoreQueueSize) as it also adds to unique callables(adding to internal queue and unique callables have to be in a transaction). So, we can remove lock in offer()

Since this is already committed, should I put up a patch to just remove lock in offer() or create another jira?

Delay in queueing tracked in https://issues.apache.org/jira/browse/OOZIE-1886

