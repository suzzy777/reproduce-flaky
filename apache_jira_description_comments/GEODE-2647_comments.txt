This failure is intermittent, but I don't see evidence of it being flakiness in the test. 

It looks to me like region.getEntry(KEY1).getValue() should return non-null entry and value to the thread that immediately before that invoked region.put(KEY1, VALUE1).
{noformat}
    Cache cache = (Cache) clientCache;
    Region<String, String> region = cache.getRegion(Region.SEPARATOR + REGION_NAME);

    region.put(KEY1, VALUE1);
    assertThat(region.getEntry(KEY1).getValue()).isEqualTo(VALUE1); <-- throws NPE!
{noformat}

From Darrel Schneider <dschneider@pivotal.io>, Mar 15, to dev:

The problem with this test is that is does register interest. The first
client that calls the put method does 2 puts, then a clear, then 2 puts,
then a clear. All of those ops get sent async to the other client. So when
you call the same put method on the second client it can be receiving the
events from the first client. When you see the "null" right after client 2
did a put it is because you processed one of the clears from client1.

From looking at this test it is unclear to me why is does puts and clears.
For the health stats it is trying to verify I would not think any of these
ops are needed. Or you could add some type of listener on client2 and wait
for it to see 2 clears before you have it execute the put task.

Hope this helps

Commit ed300c5d282f90434ea37d1dc7a09eace3557879 in geode's branch refs/heads/develop from [~apache@the9muses.net]
[ https://git-wip-us.apache.org/repos/asf?p=geode.git;h=ed300c5 ]

GEODE-2647: remove unnecessary client puts from ClientHealthStatsDUnitTest

This removes the puts from the clients which was unnecessary for the
tests. By removing the puts, the race condition caused by async puts
and clears for the subscription enabled test is gone.


