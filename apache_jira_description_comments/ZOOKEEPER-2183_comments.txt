We've had some prior discussion of this topic on the dev mailing list:

http://mail-archives.apache.org/mod_mbox/zookeeper-dev/201505.mbox/%3CCANLc_9K69jkAzHx2xdh-GPhDTMJtLsUCn5zTcWbg1cj09ugNiQ%40mail.gmail.com%3E

I'm attaching a patch.  Here is a summary of the changes:
# build.xml: Add support for concurrent execution of tests.  The default is still a single JUnit process (same as today), but you can override it by passing a command line argument.  This would require everyone to upgrade to Ant 1.9.4.  I don't know what version Jenkins runs, so if it fails on this, then I'll provide another patch without the build.xml change.  On my fairly wimpy CentOS VM, I can do a full test run with {{ant -Dtest.junit.threads=8 -Dtest.output=yes clean test-core-java}} in ~10-15 minutes, down from ~60 minutes.
# {{PortAssignment}}: I rewrote this to assign ports by binding to an ephemeral port temporarily.  I documented that there is still a very small race condition risk, but it's going to be much better than the current situation where multiple JUnit processes starting from the same base port number could collide.  I did explore trying to bootstrap test servers with port 0 to eliminate this race condition completely, but that would have required intrusive changes in product code and tests that expect to know all their port numbers upfront before running anything.
# Multiple test suites are updated to skip starting {{JettyAdminServer}}, so that we don't get a {{BindException}} when they all try to use the same port.  All test suites that inherit from {{ZKTestCase}} already do this.
# Multiple tests are updated to remove "+ 1000" logic from their port assignments.  This looks like it was an attempt to offset port numbers a bit in certain tests to try to increase the probability of uniqueness.  This is no longer necessary with the new {{PortAssignment}}.  Also, the logic is incorrect, because it could inadvertently cause a port collision or overflow past the valid range for port numbers.

I've tried multiple concurrent test runs with this patch, and there are no signs of a {{BindException}}, so I think this covers the changes we need in port assignments.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12732068/ZOOKEEPER-2183.001.patch
  against trunk revision 1678645.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 35 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2686//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2686//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2686//console

This message is automatically generated.

"StandaloneDisabledTest.startSingleServerTest" was flaky in this case -- I run that single test successfully in local.

Let me run again the entire test suite...

Jenkins didn't fail in ant on the addition of the {{threads}} attribute, so that tells me we have Ant 1.9.4.  Cool!

I'm curious to find out what Jenkins thinks of a multi-threaded run.  I'm uploading patch v002, which just changes the default value of {{test.junit.threads}} to 8.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12732275/ZOOKEEPER-2183.002.patch
  against trunk revision 1678645.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 35 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2687//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2687//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2687//console

This message is automatically generated.

The multi-threading change is very speedy. But I wonder if the test failures are caused by the change of multi-threading or port assignment?

Yeah, that brought the pre-commit job run down from 43 minutes to 8 minutes!

I'll investigate the failures more.  {{LocalSessionRequestTest}} in particular shows a bind exception, so maybe I missed a hard-coded port number.  I don't have a repro of {{StandaloneDisabledTest}} yet, but I'll keep trying.

Oh, I see you tried a test run of only the build.xml change.  I expect that's going to have a lot of failures on {{BindException}}, because we'll have 8 concurrent JUnit processes, all starting from the static 11211 base port assignment.  I had tried this before starting the Java changes.

I see. That's why we need to change the port assignment at the same time.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12732283/threads-change.patch
  against trunk revision 1678645.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 1 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2688//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2688//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2688//console

This message is automatically generated.

There wasn't anything wrong with the code of {{LocalSessionRequestTest}}.  I was assuming that each concurrent test process wouldn't bind and release ephemeral ports so often that they could recycle quickly enough to cause a collision.  Unfortunately, that turned out to be a false assumption.  I analyzed the console output and saw a few instances of the same port getting handed out at roughly the same time.  This is made worse by the fact that several tests stop and start a server while holding onto the same port for a few seconds.  (These are by design for covering things like client reconnect logic.)  During that downtime, the OS sees it as a free ephemeral port, and we might hand it out elsewhere.

I'm attaching patch v003 with a different port assignment algorithm.  This is like the old monotonically increasing strategy, but it's aware of how many total test threads are running concurrently and what is the thread index (i.e. 3 of 8) of the current test process.  It uses that information to split the available ports into N disjoint ranges, and each concurrent test process only assigns ports from its own range.  For extra resiliency, we still try to bind to the port and keep retrying until we find a good one.  Unfortunately, the total threads and the thread index are not accessible through easy APIs, so we need to jump through some hoops to get them.  (See comments in the code for details.)

I'm still getting some intermittent failures in reconfig related tests, like {{ReconfigRecoveryTest}} and {{StandaloneDisabledTest}}.  The problems don't appear to be related to network ports.  I see stuff like this in the logs:

{code}
    [junit] 2015-05-12 15:42:54,246 [myid:] - ERROR [Thread-7:QuorumPeerTestBase$MainThread@243] - unexpected exception in run
    [junit] org.apache.zookeeper.server.quorum.QuorumPeerConfig$ConfigException: Error processing /home/cnauroth/git/zookeeper/build/test/tmp/test940684720756473639.junit.dir/zoo.cfg.dynamic
    [junit] 	at org.apache.zookeeper.server.quorum.QuorumPeerConfig.parse(QuorumPeerConfig.java:162)
    [junit] 	at org.apache.zookeeper.server.quorum.QuorumPeerMain.initializeAndRun(QuorumPeerMain.java:110)
    [junit] 	at org.apache.zookeeper.server.quorum.QuorumPeerTestBase$MainThread.run(QuorumPeerTestBase.java:240)
    [junit] 	at java.lang.Thread.run(Thread.java:745)
    [junit] Caused by: java.lang.IllegalArgumentException: standaloneEnabled = false then number of participants should be >0
    [junit] 	at org.apache.zookeeper.server.quorum.QuorumPeerConfig.parseDynamicConfig(QuorumPeerConfig.java:537)
    [junit] 	at org.apache.zookeeper.server.quorum.QuorumPeerConfig.setupQuorumPeerConfig(QuorumPeerConfig.java:504)
    [junit] 	at org.apache.zookeeper.server.quorum.QuorumPeerConfig.parse(QuorumPeerConfig.java:157)
    [junit] 	... 3 more
{code}

That makes me think the reconfig tests are hitting a conflict on some other shared resource in the runtime environment, like maybe the config directories.  I'm still investigating.

+1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12732427/ZOOKEEPER-2183.003.patch
  against trunk revision 1678645.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 35 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2689//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2689//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2689//console

This message is automatically generated.

The last build took 13 minutes to execute, and it got the full +1.  I'm going to submit a few more rebuilds of this same patch to see if any other problems surface.  (Apologies for the Jenkins spam this will cause.)

Thanks Chris!

I'm reviewing the patch now. No worry about the Jenkins flood. That's what it's used for...

Thanks Chris!

I'm reviewing the patch now. No worry about the Jenkins flood. That's what it's used for...

+1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12732427/ZOOKEEPER-2183.003.patch
  against trunk revision 1678645.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 35 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2690//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2690//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2690//console

This message is automatically generated.

PortAssignment seems to make assumptions on ant running time.

Do you think it's better to write the code like:
{code}
public synchronized static int unique() {
  if (!initialized) {
    setupPortRange()
  }
}
{code}
A test is highly recommended for setupPortRange() too :)

[~hdeng], thank you for reviewing.

bq. PortAssignment seems to make assumptions on ant running time.

Unfortunately, I didn't see any other programmatic way to access the thread ID so that we can determine a port range.  The thread ID is only available on the command line.

If the code is running outside the context of Ant and these properties aren't present, then the default behavior is to use the full port range, very similar to the existing logic.

bq. A test is highly recommended for setupPortRange() too 

That's a good idea!  :-)  Here is patch v004 adding a test.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12732658/ZOOKEEPER-2183.004.patch
  against trunk revision 1678645.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 37 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2692//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2692//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2692//console

This message is automatically generated.

{code}

53	                new Object[] { null, null, 11221, 65535 },
54	                new Object[] { null, null, 11221, 65535 },
55	                new Object[] { "", "", 11221, 65535 },
56	                new Object[] { "", "", 11221, 65535 });
{code}

These are duplicated :)

Other than that, +1, LGTM.

Some test failures said "Address already in bind". I think this can be done by setting SO_REUSEADDR or something in network socket.

I think this can be "dealt with"...

There was a {{BindException}} in that last run.  It looks like we hit a collision with the OS assigning an ephemeral port to a client socket connection.  {{SO_REUSEADDR}} only allows re-binding to a port that was recently closed but is still in TIME_WAIT state, so it wouldn't help with this.  Thinking about this some more, {{PortAssignment}} really ought to stay away from the ephemeral port range for exactly this reason.  There is no way to guarantee that an ephemeral port returned from {{PortAssignment}} won't be consumed by a client before our test code gets an opportunity to bind.

I'm attaching patch v005 to make that change.  I changed {{PortAssignment#GLOBAL_MAX_PORT}} from 65535 to 32767 and added a comment describing the typical ephemeral port ranges used by common OSes.  I also added the property to disable {{JettyAdminServer}} in {{WatchEventWhenAutoResetTest}}, a test that was recently fixed in ZOOKEEPER-2182.

bq. These are duplicated 

Oops, good catch!  I fixed this too.

I have one more question.  Shall we go ahead with the current patch setting the default {{test.junit.threads}} value to 8?  One downside of the concurrent runs is that log output gets interleaved from all 8 threads, which might make it more difficult for a developer to troubleshoot.  Another way to go would be to use a default of 1, but override it to 8 in the ant call from test-patch.sh.  Developers can always override it too to make things fast if they don't mind the interleaved logs.

What's your opinion on this?

I prefer "8".
The threads is per class. So the test report is still clear. What's more, if it's constant failure developers can reproduce it; if flaky, I doubt the logs help...

+1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12732713/ZOOKEEPER-2183.005.patch
  against trunk revision 1678645.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 40 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2695//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2695//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2695//console

This message is automatically generated.

[~rakeshr] [~rgs] [~michim] [~shralex]
Any other committer would like to review this? I will commit it once it gets another +1. Thanks!

BTW, StandaloneDisabledTest.startSingleServerTest() fails intermittently on the following lines:

{code}
        //reconfigure out leader and follower 1. Remaining follower
        //2 should elect itself as leader and run by itself
        reconfigServers.clear();
        reconfigServers.add(Integer.toString(leaderId));
        reconfigServers.add(Integer.toString(follower1));
        testReconfig(follower2, false, reconfigServers);
{code}

I think the logic isn't correct because
{code}
        ReconfigTest.testServerHasConfig(zkHandles[id], servers, null);
{code}
is testing the leaving servers as the joining servers, right? [~shralex]

looks like you're right, I wonder why it doesn't fail all the time

I separate it into another JIRA: ZOOKEEPER-2190
Let's go fix it there.

+1 Thanks Chris, this is a great patch!

+1 — thanks [~cnauroth]!

Committed:

trunk:
https://github.com/apache/zookeeper/commit/1d9265e76f69a9a5384ef077b185da37b50e87d3

branch-3.5:
https://github.com/apache/zookeeper/commit/6383df881b72ece77c4524c550390b12942dc6df

Made mistake on "CHANGES.txt" when switching branches...

Committed another fix to branch-3.5:
https://github.com/apache/zookeeper/commit/419756a3ff3be986d3bbcef12ebdfba5c1b68412

Feeling guilty for it. Will be careful on future commits.

Everyone, thank you for the reviews and the commit!

[~cnauroth], thanks for the great work!

I've few observation related to running time shows in our {{PreCommit-ZOOKEEPER-Build}}. Today, I was referring the [pre-commit build|https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2699]. I've the understanding that, it [Took 13 min|https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2699] for the overall time, but the testReport UI is showing [Took 39 min|https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2699/testReport/], am I missing anything?

FAILURE: Integrated in ZooKeeper-trunk #2692 (See [https://builds.apache.org/job/ZooKeeper-trunk/2692/])
ZOOKEEPER-2183 Concurrent Testing Processes and Port Assignments (Chris Nauroth via hdeng) (hdeng: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1679400)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/build.xml
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/PortAssignment.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/PortAssignmentTest.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/ZxidRolloverTest.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/quorum/CommitProcessorTest.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/quorum/WatchLeakTest.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/quorum/Zab1_0Test.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/HierarchicalQuorumTest.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/NettyNettySuiteBase.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/NioNettySuiteBase.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/QuorumBase.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/QuorumUtil.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/TruncateTest.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/WatchEventWhenAutoResetTest.java


Hi [~rakeshr].

Unfortunately, the times on the Jenkins /testReport URLs won't be an accurate indicator of wall clock time.  The Jenkins report works by parsing the JUnit output for the lines that show the elapsed time of each test suite.  This goes into the Duration column for each test suite.  Then, at the package level, Duration is calculated as the sum of all suite durations in the package.  Finally, the total time for the whole test run is calculated as the sum of all.  Jenkins is not aware that the test suites were distributed across multiple JUnit processes, so each of these sum operations accidentally double-counts the actual clock time.  (Actually, it can be as much as 8x-counts the clock time when you consider we chose 8 concurrent processes.)

For example, assuming 2 test suites that each need 1 minute to run, and we use 2 JUnit processes, Jenkins will report the time as 2 minutes, even though you and I looking at a wall clock know it finished in 1 minute.

You're correct that looking at the overall job execution time still shows the benefit of this change, 13 minutes in your example.  That's because this is a raw measurement of the Jenkins job execution time.

Ok, its pretty clear now. Thanks [~cnauroth] for the detailed explanation:) 

