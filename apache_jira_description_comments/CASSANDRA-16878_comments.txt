The proposed patch uses an {{OpOrder}} to guarantee the ordering of the replayed mutations:
||PR||CI||
|[3.0|https://github.com/apache/cassandra/pull/1165]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/792/workflows/bfd8ea56-02e7-4280-a60d-ff29a7424b1b]|
|[3.11|https://github.com/apache/cassandra/pull/1166]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/791/workflows/8643004d-e29f-4454-b9dd-7eed069637d6]|
|[4.0|https://github.com/apache/cassandra/pull/1167]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/794/workflows/b5efb584-923f-4533-be16-4554c2778970] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/794/workflows/faca9ef5-a2cd-402c-8053-1bad21c6d2e3]|
|[trunk|https://github.com/apache/cassandra/pull/1168]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/793/workflows/f0c242f5-74eb-46c5-89ef-cafc9d4ea7f2] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/793/workflows/04976837-6c7c-4eb2-9945-19cdf95ba4d9]|
|[dtest|https://github.com/apache/cassandra-dtest/pull/155]|

All praise and glory to [~fcofdezc], who is the original author of the patch.

I have just rebased the patches without conflicts and CI is running again:
||PR||CI||
|[3.0 |https://github.com/apache/cassandra/pull/1165]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1164/workflows/82c45d1c-60f8-4bc4-9ba8-03fe7afc0793]|
|[3.11 |https://github.com/apache/cassandra/pull/1166]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1162/workflows/cd14e755-213d-4f22-bccb-e7f1c4194a63]|
|[4.0 |https://github.com/apache/cassandra/pull/1167]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1163/workflows/2f1c293b-e698-4d2c-9324-807b7d91aa4c] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1163/workflows/e81f9459-483e-4ca3-8866-43bb38fad565]|
|[trunk|https://github.com/apache/cassandra/pull/1168]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1165/workflows/a2ee0d11-7b07-476a-b9a6-017135a6eec2] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1165/workflows/55e9c986-07b6-4953-bd39-fcd42107f4f3]|
|[dtest|https://github.com/apache/cassandra-dtest/pull/155]|

CI contains repeated runs of the new dtest.

It's very possible that I'm missing something, but it feels to me like this only covers one side of the process. There are no ordering guarantees for writing schema/data mutations to the commit log in the first place, so you could easily write a data mutation first, and only then the schema one that would make that mutation parseable in the first place. Then enforce that incorrect order on replay with this patch. Again, could be missing something here, these are just some thoughts off the top of my head.

bq. There are no ordering guarantees for writing schema/data mutations to the commit log in the first place

This seems salient to me.  Ordering on only replay seems incorrect to me too.

The patch is only correct with the precondition that the mutations in the commit logs are ordered (equivalently, i.e. required schema changes are logged before the mutations). Looking at the code, I think a mutation won't appear _before_ this related schema change in the commit log. 
- If a mutation is added to the commit log, it means it has passed the validation, which indicates the required schema change is present, and the corresponding mutations should be allocated earlier. 
- For a mutation that contains non-existing schema arriving before the schema change, the mutation is rejected during validation, and it does not appear in the commit log. 

I also think that the mutations are written in order.

[~yifanc] your test is quite useful for this, is it ok if I add it to the PR setting you as coauthor? It seems that the test is flaky because the last assert doesn't wait for the asynchronous processing of the replayed mutations. This can be seen in [this|https://app.circleci.com/pipelines/github/adelapena/cassandra/1263/workflows/30d3db98-77d3-458b-b800-c22777c94305/jobs/11946] 1000-iteration run in the multiplexer, which hits 123 failures. This can be easily fixed by just using [{{spinAssertEquals}}|https://github.com/adelapena/cassandra/commit/9845b39ede623d840ef8ed6233ac6f7cd8e57047] to wait until the 99 mutations are applied. This makes the 1000 iterations [pass|https://app.circleci.com/pipelines/github/adelapena/cassandra/1265/workflows/6910b8f2-1fd0-42bf-b67a-6e6c1d83ec77/jobs/11951]. Alternatively, we can call [{{CommitLogReplayer#blockForWrites}}|https://github.com/adelapena/cassandra/commit/c3c156f021085c046d6631f042e9b54534ecfc2f] to wait for all the mutations, which also makes the repeated run [pass|https://app.circleci.com/pipelines/github/adelapena/cassandra/1266/workflows/f950bf46-af27-4f38-81ce-bc35186e6309/jobs/11955].

bq. is it ok if I add it to the PR

Please feel free. The test commit I made was hacky and dirty. Need to tidy it up, if we want to checkin that change.

Great, thanks. I have made some changes in the test, mainly to changes on visibility in non-test classes, unneeded changes on {{{}MigrationManager{}}}, and adding the wait for replayed mutations. I haven't added the extra test to 3.0 nor 3.11 because the code for schema diff is quite different and we already have the dtest.

Here are the updated and rebased patches, CI is running with repeated runs for the new tests:
||PR||CI||
|[3.0 |https://github.com/apache/cassandra/pull/1165]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1271/workflows/32fa0fe2-d37c-481c-803c-21782d8f2496]|
|[3.11 |https://github.com/apache/cassandra/pull/1166]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1269/workflows/ff3d8348-4c95-40b2-ba21-1ca439e72b91]|
|[4.0 |https://github.com/apache/cassandra/pull/1167]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1270/workflows/a48d355d-cd6b-4d1b-a3da-2be3b5fa6d99] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1270/workflows/16d2a281-823b-4419-b54c-19c22676f855]|
|[trunk|https://github.com/apache/cassandra/pull/1168]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1268/workflows/aef1c703-c816-40f8-8e07-9055027d6403] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1268/workflows/b325cc10-87f7-420c-a6a1-2bab576ea601]|
|[dtest|https://github.com/apache/cassandra-dtest/pull/155]|

[~Bereng], [~jlewandowski] please let me know if this looks good to you.

LGMT +1. I am only weary of the jvm repair test failure on j8/trunk but it could well be just the current noise on trunk.

[~bereng] thanks for the review.

That failing in-JVM dtest ([{{testNoSuchRepairSessionAnticompaction}}|https://app.circleci.com/pipelines/github/adelapena/cassandra/1268/workflows/aef1c703-c816-40f8-8e07-9055027d6403/jobs/12000]) also seems to fail in trunk, as it's shown by [this repeated run|https://app.circleci.com/pipelines/github/adelapena/cassandra/1280/workflows/8a4e04cb-64cc-46a3-9e1e-c946dfafc7fa/jobs/12114]. It only hits 18 failures in 500 iterations, so it can have been missed by Butler. I have created CASSANDRA-17335 to address it.

bq. If a mutation is added to the commit log, it means it has passed the validation, which indicates the required schema change is present, and the corresponding mutations should be allocated earlier

I'm not sure that is always the case. Consider the following scenario:
0. table1 exists
1. A mutation m1 for table1 comes in and gets validated for the commit log write successfully
2. {{DROP TABLE table1}} happens, gets written to the commit log before m1 gets written to the commit log
3. Mutation m1 is written to the commit log

If you replay these in commit log order, you won't be able to deserialize mutation m1, as the table will have been dropped.

Only ensuring order on one side of the process is a half-measure that will help in some cases and hurt in others. But, again, I might be missing something.

Thanks for the example... I agree with you that the scenario can happen. 

During schema [transform|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/schema/Schema.java#L644-L646], applying the schema change mutations and adding to the commit log happens before merging the diff to update the schema instance. It is possible that a mutation is created with the correct table metadata, but the DropTable mutation has just been added to the commit log. (And appears before the regular mutation in the commit log)

What do you think about merging before applying the schema change mutations?

bq. What do you think about merging before applying the schema change mutations?

Doesn't that just flip the issue? Now the following scenario is possible:

0. Table table1 does NOT exist
1. {{CREATE TABLE table1}} happens in memory, the schema mutation isn't written yet
2. Mutation m1 for table table1 validates successfully and is written to the commit log
3. Schema mutation for {{CREATE TABLE table1}} gets written to the commit log

If you replay these in commit log order, you won't be able to deserialize mutation m1, as the table will not have been created yet.

Again, you are right :D

The related mutations and the schema change (i.e. persist and update in-memory) needs to be linearized. The related mutations are the ones contain updates to the changed schema. Before applying the schema change, it creates a barrier and waits for all related pending mutations to complete. No related mutations arriving after the barrier can be created until the schema change completes. Maybe use a readwrite lock to implement. It could result into write timeouts during schema change.

Alternatively, maybe we can reorder the mutations when replaying. But it would require to serialize the schema version, and change the commit log format. Group the mutations belongs to the same schema version and replay each group.

Might be better to backlog it for now, perhaps until a transactional metadata implementation lands, and work from there.

