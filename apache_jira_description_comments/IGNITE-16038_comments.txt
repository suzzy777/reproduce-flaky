[~ashapkin], this change will break compatibility (as already mentioned in IEP). For example, if the server was configured with PDS and default binary configuration (compact footer = true), and the client was configured with default binary configuration (compact footer = false), after upgrading to the new Ignite version thin client will get server's settings and can't read keys stored by old thin client version.

[~alex_pl] 

 

Yes, that's correct, it is a potential compatibility break. I also find the case when a client can't read a value inserted by a thick client or vice versa counterintuitive. We just don't have any warnings or reasons that explain the problem with having different compact footers.

 

Consider this: 
 * a user starts a vanilla server node and performs cache#put(myKey, myVal) [compactFooter=true]
 * then it starts a default thin client and is trying to get a value with thinCache.get(myKey) [compactFooter=false]
 * ??? why there is no value found, seems like Ignite is broken...

 

In a very safe implementation, we might yield a WARN in a client's  (java version don't have it yet if I remember correctly) or server's logs with respect to the binary configuration mismatch and provide a user with the right direction on how to fix that. But I'd say we need to implement the change just like it's written in IEP and set compactFooter=serverValue. Well, we might add just another Ignite property to disable this feature and some announcements in release docs are welcome.

 

Anyway, my biggest concern is that - it's very confusing for the end-users. WDYT?

 

As far as I remember, changing compactFooter to true as a default value for java thin client is already planned for the next release with breaking compatibility changes (some 2.x release). But WARN in case of server and client configuration mismatch until that release also sounds good.  

Wow, that sounds good. Could you please share a ticket number with the planned compactFooter change? If it has not been created yet, we might use this ticket for that change. 

Here is a ticket about this problem: IGNITE-10960. Changing compact footer to true is discussed in dev-list, but I can't find the thread now. I've added ticket IGNITE-10960 to IEP-80 (IEP about breaking changes release). 

Aleksey, thanks a lot for sorting this out!

[~alex_pl] [~ashapkin] I propose to do the following:
* Apply server-side binary configuration by default.
* Add *ClientConfiguration#autoBinaryConfigurationEnabled*, default *true* - as a way to fall back to the old behavior when required.
* List this as a potentially breaking change in the release notes.

Here is a draft PR: https://github.com/apache/ignite/pull/10076

Please have a look and let me know your thoughts. If there are no objections, I'll finalize the changes next week.

PR is ready for review.
[~isapego] [~ashapkin] [~alex_pl] please have a look.

{panel:title=Branch: [pull/10076/head] Base: [master] : Possible Blockers (12)|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1}
{color:#d04437}Cassandra Store{color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=6627293]]
* IgniteCassandraStoreTestSuite: IgnitePersistentStoreTest.directPersistenceConfigTest - Test has low fail rate in base branch 0,0% and is not flaky

{color:#d04437}Calcite SQL{color} [[tests 0 TIMEOUT , Exit Code |https://ci.ignite.apache.org/viewLog.html?buildId=6627366]]

{color:#d04437}SPI (Discovery){color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=6627358]]
* IgniteSpiDiscoverySelfTestSuite: TcpDiscoverySegmentationPolicyTest.testStopOnSegmentation - Test has low fail rate in base branch 0,0% and is not flaky

{color:#d04437}ZooKeeper (Discovery) 1{color} [[tests 1 TIMEOUT , Exit Code |https://ci.ignite.apache.org/viewLog.html?buildId=6627331]]
* ZookeeperDiscoverySpiTestSuite1: ZookeeperDiscoverySegmentationAndConnectionRestoreTest.testConnectionRestore1 - Test has low fail rate in base branch 0,0% and is not flaky

{color:#d04437}Examples{color} [[tests 0 Exit Code |https://ci.ignite.apache.org/viewLog.html?buildId=6627338]]

{color:#d04437}Java Client{color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=6627861]]
* IgniteClientTestSuite: ClientTcpSslDirectMultiNodeSelfTest.testTopologyListener - Test has low fail rate in base branch 0,0% and is not flaky

{color:#d04437}Queries 1 (lazy=true){color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=6627362]]
* IgniteBinaryCacheQueryLazyTestSuite: DynamicIndexServerCoordinatorBasicSelfTest.testCreateIndexWithParallelismPartitionedTransactional - Test has low fail rate in base branch 0,0% and is not flaky

{color:#d04437}Platform C++ CMake (Linux Clang){color} [[tests 1 JVM CRASH |https://ci.ignite.apache.org/viewLog.html?buildId=6627340]]
* IgniteCoreTest: ComputeTestSuite: IgniteBroadcastRemoteError - Test has low fail rate in base branch 0,0% and is not flaky

{color:#d04437}Compute (Grid){color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=6627292]]
* IgniteBinaryObjectsComputeGridTestSuite: GridMultinodeRedeployIsolatedModeSelfTest.testIsolatedMode - Test has low fail rate in base branch 0,0% and is not flaky

{color:#d04437}Continuous Query 1{color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=6627296]]
* IgniteCacheQuerySelfTestSuite3: CacheContinuousQueryBufferLimitTest.testContinuousQueryPendingBufferLimit[cacheMode=REPLICATED, atomicityMode=ATOMIC] - Test has low fail rate in base branch 0,0% and is not flaky

{panel}
{panel:title=Branch: [pull/10076/head] Base: [master] : New Tests (5)|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}
{color:#00008b}Thin Client: Java{color} [[tests 5|https://ci.ignite.apache.org/viewLog.html?buildId=6627481]]
* {color:#013220}ClientTestSuite: BinaryConfigurationTest.testAutoBinaryConfigurationEnabledOverridesExplicitClientSettings - PASSED{color}
* {color:#013220}ClientTestSuite: BinaryConfigurationTest.testCustomMapperOnServerCustomMapperOnClientDoesNotThrow - PASSED{color}
* {color:#013220}ClientTestSuite: BinaryConfigurationTest.testAutoBinaryConfigurationDisabledKeepsClientSettingsAsIs - PASSED{color}
* {color:#013220}ClientTestSuite: BinaryConfigurationTest.testCustomMapperOnServerDefaultMapperOnClientThrows - PASSED{color}
* {color:#013220}ClientTestSuite: BinaryConfigurationTest.testAutoBinaryConfigurationEnabledRetrievesValuesFromServer - PASSED{color}

{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=6627367&amp;buildTypeId=IgniteTests24Java8_RunAll]

[~ptupitsyn] looks good to me.

Merged to master: afd4884bbea9600e2fa1f15e449857e534c60860

