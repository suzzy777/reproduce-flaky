This is proving to be a major headache, failing almost every other build. Two things:
1. We definitely need a better way to ensure that a job has finished. I propose this:
In {{JobClient}}, there is a {{if-else}} block for
{code}
if (answer instanceof JobManagerMessages.JobResultSuccess) {
    LOG.info("Job execution complete");
    ...
}
{code}
We can simply add this:
{code}
    if (sysoutLogUpdates) {
        System.out.println("Job execution complete.");
    }
{code}
and check for this string in the result.

2. Why do we actually need this check in these two tests? None of the other tests in {{ScalaShellITSuite}} verify this exact line. We can just have the usual tests which are:
{code}
output should not include "Error"
output should not include "ERROR"
output should not include "Exception"
output should not include "failed"
{code}

1 is not a very major issue, and not very important. If this needs to be fixed, it should be in a separate jira. To fix this flaky test, we can just remove the check, as if the execution ever failed, one of the four checks will fail.
Also, 
{code}
val input: String = "val els = env.fromElements(\"a\",\"b\");\nels.print\nError\n:q\n"
{code}
is somewhat poorly written [in both Scala shell integration tests]. I fail to understand why the {{Error}} is left in there. Perhaps it was for debugging purposes, but it should've been removed before committing. We should fix this also under this jira.

[~till.rohrmann], if you're busy with something else, I can push a quick fix for the 2nd point now. We can decide on 1st later.

I was working on a fix. Here's the code: https://github.com/sachingoel0101/flink/tree/flink-2852
If you haven't worked on it yet, I can open a PR from my branch.

Hi [~sachingoel0101], you're right that the test is not robust. I've reworked and pushed a commit which should hopefully solve the problem.

Fixed in 630798d

