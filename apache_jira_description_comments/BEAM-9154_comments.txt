cc: [~tvalentyn] [~udim]

How did you run the example?
I'm trying this (having copied the 2 tasks from py2 to the py37/build.gradle file):
{code}
./gradlew :sdks:python:test-suites:dataflow:py37:chicagoTaxiExample -PgcsRoot=gs://BUCKET/chicago-taxi
{code}

FWIW, my attempt fails on a KeyError as well (different key though): https://gradle.com/s/ktg53cqhztbaq

I use this command (copied chicago tasks from py2 to the py37/build.gradle file too):

 
{code:java}
./gradlew :sdks:python:test-suites:portable:py37:chicagoTaxiExample -PgcsRoot=gs://BUCKET -PpipelineOptions="--environment_type=\"DOCKER\" --environment_config=\"DOCKER_REGISTRY/python3.7_sdk:latest\" --parallelism=\"5\" --job_endpoint=\"localhost:8099\" --execution_mode_for_batch=\"BATCH_FORCED\""

{code}
This requires SDK harness image and running Flink cluster (here are the instructions and a setup script: https://github.com/apache/beam/blob/master/.test-infra/dataproc/flink_cluster.sh)

 

Which version of TFT is being used? I can ask TFT folks to take a look if this is still an issue.

TFT 0.13, alongside with Tensorflow 1.14

I'm afraid we cannot reproduce this issue before investigating another error that has appeared recently, causing https://builds.apache.org/job/beam_PostCommit_Python_Chicago_Taxi_Dataflow to be flaky.

I see, once you have time feel free to let me know if this is still an issue and if it is reproducible in newer versions of TFT. Thanks.

This issue is P2 but has been unassigned without any comment for 60 days so it has been labeled "stale-P2". If this issue is still affecting you, we care! Please comment and remove the label. Otherwise, in 14 days the issue will be moved to P3.

Please see https://beam.apache.org/contribute/jira-priorities/ for a detailed explanation of what these priorities mean.


This issue was marked "stale-P2" and has not received a public comment in 14 days. It is now automatically moved to P3. If you are still affected by it, you can comment and move it back to P2.

We are removing Py2.7 support in Dataflow in the next release (Beam removes Python 2.7 after one more release), we will need to migrate this test to Python 3 or disable it.
Is the error still reproducible?

As fas as I remember, yes, it still affects us.

[~tvalentyn] Do you have contact with the TFX team? If so, could you ask them what's their opinion on how to approach the problem? I saw something called "Beam orchestrator", which is, I think, a new way of running chicago taxi (there's also a ticket: https://issues.apache.org/jira/browse/BEAM-8892). Should we take this into account?

Yes, we work closely with TFX team. Before I escalate the issue to them - is this reproducible on newer versions of TFT + Tensorflow? It could be a bug that is already fixed. Is there a way TFT team can reproduce the error?

> is this reproducible on newer versions of TFT + Tensorflow?

To be honest, I have no idea. I tried tensorflow 1.15.3 (the latest 1.x version), but that version depends on tfx-bsl, which depends on an older version of Beam, which leads us to a circular dependency. I suppose tensorflow 2.x won't work either, since the code was written with tensorflow 1.x in mind.

> Is there a way TFT team can reproduce the error?

Yes. Steps to reproduce:

1. Have python 3.7 (3.5 and 3.6 might work as well) and the latest version of Beam from the master branch
 2. Have a GCP project configured
 3. Execute gradle task: ./gradlew :sdks:python:test-suites:dataflow:py2:chicagoTaxiExample -PgcsRoot=gs://GCS_BUCKET -PpipelineOptions="-num_workers=5 --autoscaling_algorithm=NONE" -PpythonVersion=3.7

By the way, now I had a different error when running the example on Python 3.7:
{code:java}
apache_beam.typehints.decorators.TypeCheckError: Type hint violation for 'ParDo(_SeparateMetricsAndPlotsFn)': requires Tuple[Union[Tuple[Tuple[str, Union[bytes, float, int]], ...], Tuple[]], List[Any]] but got Tuple[Union[Tuple[Tuple[str, Union[bytes, float, int]], ...], Tuple[]], Dict[str, Any]] for element
Full type hint:
IOTypeHints[inputs=((Tuple[Union[Tuple[Tuple[str, Union[bytes, float, int]], ...], Tuple[]], List[Any]],), {}), outputs=((Any,), {})]
strip_iterable()based on:
  IOTypeHints[inputs=((Tuple[Union[Tuple[Tuple[str, Union[bytes, float, int]], ...], Tuple[]], List[Any]],), {}), outputs=((Any,), {})]
  from_callable(process)
    signature: (element: Tuple[Union[Tuple[()], Tuple[Tuple[str, Union[bytes, int, float]], ...]], List[Any]])
    File "/Users/kamilwasilewski/.pyenv/versions/beam-chicago/lib/python3.7/site-packages/tensorflow_model_analysis/evaluators/aggregate.py", line 493
{code}

Typehint mismatch may be bug (incorrect annotations) in the pipeline. But a type inference issue is also possible. We will have to disable these tests if they cannot run on Py3, since Beam is dropping Py2 support.

Can we migrate the code to TF2?   

> Can we migrate the code to TF2? 

I don't know. IIRC, the example was copy-pasted from the tfx repo without any major changes (the example doesn't exist now, see: https://github.com/tensorflow/tfx/pull/741). The tfx team may know the answer.

Let's disable these tests until we know what to do next. I can prepare a pull request. 

https://github.com/apache/beam/pull/12886

Thank you, [~kamilwu]!

> To be honest, I have no idea. I tried tensorflow 1.15.3 (the latest 1.x version), but that version depends on tfx-bsl, which depends on an older version of Beam, which leads us to a circular dependency. I suppose tensorflow 2.x won't work either, since the code was written with tensorflow 1.x in mind

If the test scenario downgrades the version of Beam, then it does not make sense to run this against Beam HEAD. Depending on the purpose of the test, we could pick the latest released version of the TFX libraries, or use some TFX library version that does set an upper bound on Beam.

[~altay] Do you know who are the stakeholders for this test and what was the motivations to add it to Beam? It sounds this test is misconfigured and may not add much value.

> It sounds this test is misconfigured and may not add much value.

I agree. It would be nice to hear what others think.

Discussed this offline with [~altay], [~yifanmai], [~zhitao]. The purpose of these tests is to identify regressions in Beam code on  TFX-related scenarios. These tests should be using a stable version of TFX and Beam code at head. TFX version should be configurable, and it makes sense to periodically switch to newer version, but using the latest version of TFX is not a goal for these benchmarks.

We should fix current failure in these benchmarks by upgrading to a newer version of TFX stack. Recent TFX libraries do not set an upper bound on Beam. Given that we will likely update TFX later and there were Py3 changes in TFX code, I suggest to try a newer version of TFX stack and see if the Py3 error is reproducible. 

We should migrate the benchmark code to be compatible with TF 2.0. It sounds like these benchmarks use Chicago Taxi example. I imagine we have a newer version of the example that is compatible TF 2.0. 

cc: [~tysonjh]


If you still encounter typing issues in Beam + new version of TFX on Python3, please let me and [~yifanmai] know and we will try to help unblock this.

Thanks, it looks like we have a course of action. Unfortunately, I can't work on this at the moment due to other stuff I'm currently involved in. I'll leave the ticket unassigned so that someone can pick it up.

This Jira ticket has a pull request attached to it, but is still open. Did the pull request resolve the issue? If so, could you please mark it resolved? This will help the project have a clear view of its open issues.

This issue has been migrated to https://github.com/apache/beam/issues/19973

