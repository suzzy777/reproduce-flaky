I agree these kinds of changes make sense. Why add dependency for something that's builtin. One note to be careful about is that base64 translation is not a standard, so the two implementations could produce different results. This might matter in the case of serialization, persistence, or client server different versions.

Ahmed,
if you can pull this off, it will be huge. I don't think we as a community had given a deep thought about removing guava. It would still be great if you can trim most of guava usage, even if not all.

In the past, I think the Future related usage gave us more headache.

sounds like a good goal and a well given scope.

Thanx [~ahussein] for initiating this, Shall be great if this can be done. Let me know for any help on this

Thanks you everyone for the feedback.

{quote}Thanx Ahmed Hussein for initiating this, Shall be great if this can be done. Let me know for any help on this{quote}

I am going to need help definitely especially for reviewing and committing the subtasks. I am not sure what is the best way to coordinate the reviews moving forward.
I was thinking about creating Google sheet, but I am reluctant that it will add more overhead on reviewers. Let me know if you have any suggestions.

Please feel free to create subtasks or assign any of the tasks to other developers as well.
Some tasks can be suitable for onboarding and newbies. There is a lot of work to be done here anyway.

What is the relationship between this JIRA and HADOOP-17288? I think with the latter we can avoid most of the Guava issues no?

bq. What is the relationship between this JIRA and HADOOP-17288? I think with the latter we can avoid most of the Guava issues no?

[~csun], I am sorry I haven't seen your comment.
Shading Guava in HADOOP-17288 solves the conflicts of Guava library in Hadoop upstream, downstreams, and the other projects (hbase,etc..).
The Guava byte code will still be loaded and be part of the runtime.
This Jira (when complete) gets rid of the Guava byte code which has the following benefits:

* reduce memory fooprint. (less classes to load)
* better code management: Guava will likely has security updates that forces Hadoop to adopt new releases and dealing with compatibilities.
* avoid struggles analyzing guava performance

I see [~ahussein]. Thanks this makes sense.

Going through these changes. Looks ok to do, if in the end we eliminate guava and that does some wonders.

But. Is there any benchmarking done once we replace the stuff. Though trivial aren't they creating any negative performance impact. This touches the entire code base.

Well, sharing thoughts, I thought on similar lines as [~csun] thought. I think the major problem that Guava use to cause is due to conflicting versions, as it wasn't backward compatible. Post shading that problem got solved. Now this is some additional stuff, trying to solve the similar problem, now with different assertions.
{quote}reduce memory fooprint. (less classes to load)
{quote}
We would load our new classes now? How much impact the replacement will have. Wouldn't this be true for all 3rd Party Libraries 
{quote}better code management: Guava will likely has security updates that forces Hadoop to adopt new releases and dealing with compatibilities.
{quote}
Now we have implemented these and that too on similar lines, now if there is a problem. now we will be also responsible. Along with core hadoop stuff, we have to manage this as well.
{quote}avoid struggles analyzing guava performance
{quote}
On a lighter note: Does this mean the code we write doesn't need performance analysis?

In case someone has pointers about the organisation or other Apache projects who did such an exercise. 

This exercise isn't very specific to Hadoop, all other projects can use these utils irrespective whether they depend on hadoop or not. Might have found some place in Apache Commons or some related place, especially the new classes which are written.

 

Just an FYI.

The original Guava jar we can't eliminate, that is there for downstream projects relying on it.

--Not blocking anyone nor denying the idea, Please don't take this otherwise.

Thanks [~ayushtkn],
I completely understand your point.
There is one important factor that is not mentioned here, which is that lots of the features became part of the JDK. This is an unnecessary redundancy.
Also, based on what I have seen in the code, usage of Guava library became the norm (maybe due to coding style and copy-paste).
For example, I saw hundreds of places that were initializing lists and sets through Guava for no apparent reason. 

bq. We would load our new classes now? How much impact the replacement will have. Wouldn't this be true for all 3rd Party Libraries 

It is true that we had to add wrappers to match the API. However, those new wrappers are using JDK features instead of Guava classes. 
Regarding 3rd party libraries, this would not be tru if the library is adding a value to the code. If a library provides an API that is already in the JDK, then we should revisit and question the usage of that library.
The problem with Guava usages that are really unnecessary in many places and they provided almost nothing after JDK8+.

bq. Now we have implemented these and that too on similar lines, now if there is a problem. now we will be also responsible. Along with core hadoop stuff, we have to manage this as well.

I do not see that Guava really did any better regarding security. Upgrading Guava dependency is always a pain and HAdoop gets stuck with a vulnerable Guava release for quite sometime.
We implemented very basic wrappers that call JDK classes (Preconditions, Supplier, Predicate..etc). If there is a security issue, then it is most probably a JDK related issue.
 
bq. On a lighter note: Does this mean the code we write doesn't need performance analysis?

OF course we need to evaluate the code to identify the hot paths. This will enable us to improve the execution time and the space usage as needed.
For example, optimizing a loop, pool-allocation, replace lambda, ..etc.
With Guava, it is a different story because it provides entire package. For example, we will have: Guava collections which are different than Java collections and can give you completely different performance. In addition, we will still have the same evaluation of the code structure.
There won't be fine grained control over Guava. 


