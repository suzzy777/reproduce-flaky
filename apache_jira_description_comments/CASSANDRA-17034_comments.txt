Patch uploaded here: [branch|https://github.com/blambov/cassandra/tree/CASSANDRA-17034]Â [pull request|https://github.com/apache/cassandra/pull/1295]

For reviewers it will be better to look at the individual commits. The first one is sizeable but trivial, adding the flush reason to all places that request a flush. The second is the bulk of the work, which splits {{Memtable}} into an interface and hierarchy of classes that add pieces of memtable functionality, ending in {{SkipListMemtable}} which is the current implementation; flushing functionality is moved outside of {{ColumnFamilyStore}}, and new functionality to write temporary sstables for streaming from long-lived memtables is added. The rest of the commits add a mechanism for providing shard boundaries that split the owned space equally, and a basic common interface for reading memtables and sstables.

Usages of the API, i.e. alternative memtable implementations, will be provided soon.

The [CEP-19 discussion|https://lists.apache.org/thread/fdvf1wmxwnv5jod59jznbnql23nqosty] raised some good points on the memtable configuration, paraphrased below:
 - Per-node configuration: this is already supported in the form of memtable "templates", which are specified in the yaml and can be referenced by the schema.
 - Priority of schema over yaml: it is a potential operational problem that the schema can specify a configuration that is not controllable per node.
 - Default templates: it may be a good idea to have multiple default templates that can be overridden if necessary.
 - Template fallback: with multiple templates, let the yaml have the option of remapping one template to another.

I personally prefer to not complicate the solution too much, and am leaning towards implementing the following:
 - Renaming "memtable_template" to "memtable_configuration".
 - A "default" configuration is always defined and is used if the schema does not specify one.
 - The default configuration can be overridden in the yaml.
 - The yaml can specify any number of memtable configurations, and they can inherit properties (e.g. {{{}extends: default, shards: 32{}}}).
 - The table schema can only specify the memtable configuration to use and is not allowed to modify its properties.

Let's continue the discussion here.

SGTM. I agree there's no point overcomplicating this, and this achieves every goal that has been raised.

[~blambov] Not quite done with my review pass, but just wanted to clarify something about the pieces of the Memtable API that are in this Jira but only used by CASSANDRA-17240. (ex. {{ShardBoundaries}} and friends) Assuming we can resolve this issue before the 4.1 freeze, is the reason we want these items included *now* that we want to be able to plug in CASSANDRA-17240 to 4.1 builds even though it doesn't land in-tree until 5.0?

At the end of the day, CASSANDRA-17240 is going to happen, and as long as the bits we're committing up-front here aren't destabilizing, it doesn't really matter. Just doing my due diligence to make sure the patch isn't any larger than it has to be. Thoughts?

Done with my first pass at review. I've left a ton of nits and questions inline in the PR. Aside from what I mentioned above in my previous comment, the only thing I'm really worried about in terms of the impact on 4.1 is [this|https://github.com/apache/cassandra/pull/1295/files#r848687665]. Overall, things look pretty good, and the copious inline documentation made most things easy to reason about.

I've gone back and forth mentally about the depth of the hierarchy under {{Memtable}}, specifically whether composition would have made sense (i.e. having strategies for allocation, commitlog stuff, etc.). Perhaps the fact that either we'll control these implementations pretty tightly or there won't be too many external ones makes this unimportant. (I'll also ignore for the moment the divergence this might create for public/non-public forks, lol)

I had initially left the sharding bits out of this ticket in 17240 and moved them in because of comments in the discussion thread which indicated interest in some form of support.

+1

Committed as [e4e19e33faf9ac7cf27a9779c8083a7f5c5b865a|https://github.com/apache/cassandra/commit/e4e19e33faf9ac7cf27a9779c8083a7f5c5b865a].

Thank you [~maedhroz] and [~adelapena] for the detailed review and quick responses.

dtest changes committed as [bd5e29c7ca8e0d6987ba9d180d97766cb30eb0fa|https://github.com/apache/cassandra-dtest/commit/bd5e29c7ca8e0d6987ba9d180d97766cb30eb0fa].

