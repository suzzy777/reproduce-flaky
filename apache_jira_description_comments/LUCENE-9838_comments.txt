I attached a patch. You have to run compile/tests with java 16 to use it: pass something like {{-Pruntime.java.home=/home/rmuir/Downloads/jdk-16}} to gradle. If you are running with java manually you must add {{--add-modules jdk.incubator.vector}} to commandline flags (javac too). 

Performance improvements are large for big vectors (e.g. up to 6x faster than master)

{noformat}
Benchmark                 (size)   Mode  Cnt    Score   Error   Units

DotProduct.dotProductOld       1  thrpt   15  185.520 ± 0.649  ops/us
DotProduct.dotProductNew       1  thrpt   15  155.562 ± 0.460  ops/us

DotProduct.dotProductOld       4  thrpt   15  134.033 ± 0.622  ops/us
DotProduct.dotProductNew       4  thrpt   15  113.170 ± 0.754  ops/us

DotProduct.dotProductOld       6  thrpt   15  127.956 ± 0.554  ops/us
DotProduct.dotProductNew       6  thrpt   15   92.949 ± 0.260  ops/us

DotProduct.dotProductOld       8  thrpt   15   95.313 ± 0.600  ops/us
DotProduct.dotProductNew       8  thrpt   15   84.722 ± 0.340  ops/us

DotProduct.dotProductOld      13  thrpt   15   71.914 ± 0.323  ops/us
DotProduct.dotProductNew      13  thrpt   15   70.842 ± 0.132  ops/us

DotProduct.dotProductOld      16  thrpt   15   67.188 ± 0.204  ops/us
DotProduct.dotProductNew      16  thrpt   15   64.332 ± 0.444  ops/us

DotProduct.dotProductOld      25  thrpt   15   45.503 ± 0.188  ops/us
DotProduct.dotProductNew      25  thrpt   15   39.183 ± 2.068  ops/us

DotProduct.dotProductOld      32  thrpt   15   40.592 ± 0.162  ops/us
DotProduct.dotProductNew      32  thrpt   15   60.468 ± 0.426  ops/us

DotProduct.dotProductOld      64  thrpt   15   23.123 ± 0.136  ops/us
DotProduct.dotProductNew      64  thrpt   15   52.654 ± 0.346  ops/us

DotProduct.dotProductOld     100  thrpt   15   14.325 ± 0.077  ops/us
DotProduct.dotProductNew     100  thrpt   15   36.043 ± 0.678  ops/us

DotProduct.dotProductOld     128  thrpt   15   12.313 ± 0.061  ops/us
DotProduct.dotProductNew     128  thrpt   15   44.195 ± 0.218  ops/us

DotProduct.dotProductOld     207  thrpt   15    7.776 ± 0.045  ops/us
DotProduct.dotProductNew     207  thrpt   15   22.242 ± 0.155  ops/us

DotProduct.dotProductOld     256  thrpt   15    6.367 ± 0.031  ops/us
DotProduct.dotProductNew     256  thrpt   15   29.054 ± 0.108  ops/us

DotProduct.dotProductOld     300  thrpt   15    5.069 ± 0.022  ops/us
DotProduct.dotProductNew     300  thrpt   15   20.143 ± 0.327  ops/us

DotProduct.dotProductOld     512  thrpt   15    3.235 ± 0.018  ops/us
DotProduct.dotProductNew     512  thrpt   15   18.042 ± 0.132  ops/us

DotProduct.dotProductOld     702  thrpt   15    2.373 ± 0.009  ops/us
DotProduct.dotProductNew     702  thrpt   15   11.626 ± 0.026  ops/us

DotProduct.dotProductOld    1024  thrpt   15    1.615 ± 0.005  ops/us
DotProduct.dotProductNew    1024  thrpt   15   10.290 ± 0.084  ops/us
{noformat}

This is cool - [~rcmuir]. 

I played with this a little on my MacBook Pro (2019, *Memory*: 32 GB 2667 MHZ DDR4; *Processor*:  2.6 GHz 6-Core Intel Core i7) after downloading *OpenJDK build 16+36-2231* and setting up a standalone [JMH benchmark|https://github.com/openjdk/jmh] project.

I copied over the old dotProduct implementation and the new one from your patch to _MyBenchmark.java_ in the JMH project space. Here are the results I got
{code:java}
Benchmark                  (size)   Mode  Cnt    Score   Error   Units
MyBenchmark.dotProductOld      16  thrpt    5   90.896 ± 5.302  ops/us
MyBenchmark.dotProductNew      16  thrpt    5  100.901 ± 5.105  ops/us

MyBenchmark.dotProductOld      32  thrpt    5   53.563 ± 2.378  ops/us
MyBenchmark.dotProductNew      32  thrpt    5   97.610 ± 5.393  ops/us

MyBenchmark.dotProductOld      64  thrpt    5   29.792 ± 1.246  ops/us
MyBenchmark.dotProductNew      64  thrpt    5   73.499 ± 3.640  ops/us

MyBenchmark.dotProductOld     128  thrpt    5   16.906 ± 0.751  ops/us
MyBenchmark.dotProductNew     128  thrpt    5   65.068 ± 3.986  ops/us

MyBenchmark.dotProductOld     256  thrpt    5    8.360 ± 0.125  ops/us
MyBenchmark.dotProductNew     256  thrpt    5   42.595 ± 2.958  ops/us

MyBenchmark.dotProductOld     512  thrpt    5    4.231 ± 0.158  ops/us
MyBenchmark.dotProductNew     512  thrpt    5   26.283 ± 0.640  ops/us

MyBenchmark.dotProductOld    1024  thrpt    5    2.104 ± 0.093  ops/us
MyBenchmark.dotProductNew    1024  thrpt    5   14.389 ± 0.720  ops/us

{code}
 

These benchmarks were run after adding annotations to disable TieredCompilation and vector bounds check. Looks like for small vector size (*16 elements*) we see *10%* improvement but for large vectors (*128 or more* elements) the improvement is *_4X or higher._*

[~goankur] Thanks for testing! FWIW I ran my benchmarks on a 2-core i5. I didn't pass any non-default options except the minimal {{add-modules jdk.incubator.vector}}.

I attached "standalone" patch (no logic changes) for convenience to see the whole function. I used it to generate the hacky pull request.

Unfortunately, this vector api does not look to be something serious, e.g. coming out any time before we all retire.

Rob, is the concern that it'll be forever before Lucene requires JDK 16 or later?  Yeah.  I think there are ways to mitigate that.  Lucene could have a module containing functionality that has different implementations for different JVMs.  It could be published as either a multi-release JAR file or separate JAR files that are compatible.  There's [a blog post on gradle.com|https://blog.gradle.org/mrjars] discussing these techniques.  Today, Lucene has FutureArrays and FutureObjects classes which are kind of a baby step to these ideas.

CC [~uschindler]

No mr-jar cannot be used here. I was the one that originally added the FutureArrays stuff :)

The problem here is the incubating module (cannot compile or run without special flags). And now it is undergoing another incubation round: https://openjdk.java.net/jeps/8261663

So it may seriously be java 21 or something like that before it can be used.

Hi David,
The problem is mainly that this only works exactly with JDK16 and only when you pass a command line parameter. In JDK17 it may not work anymore as the API is in incubator. Once it gets out of incubator Apis will change again. So you can only do it fully dynamic. Mr Jars won't work because of module system and the instability of api.
The same applies to mmap2 directory v2, but this one will likely be available soon, as api will possibly be released with JDK17. But mmap2 is simpler: we can ship it as a separate jar file (like lucene-mmap2-incubator-jdk16.jar). This works for mmap2, as there's an abstract interface in lucene. So it's easy to plugin and compile completely separate.

This issue was moved to GitHub issue: [#10877|https://github.com/apache/lucene/issues/10877].

