Do you see this issue in 0.96.0 or 0.96.1?

0.96.1, as of last Tuesday

Though we see this issue in the latest 0.96 code, it seems should happen in 0.96.0 code base from the code.

In step 2, do you mean the whole cluster restarts (both master + rs)? Is it easy to add a unit test?

I mean whole cluster(master + rs). I'll add a unit test to cover this.  Thanks.

That's a little weird since the region state is transient.  If the master also restarts, it should not know it's offline previously. I need to think it through.

The offline state was in ZK before master restarted.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12617100/hbase-10085.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 hadoop1.0{color}.  The patch compiles against the hadoop 1.0 profile.

    {color:green}+1 hadoop2.0{color}.  The patch compiles against the hadoop 2.0 profile.

    {color:red}-1 javadoc{color}.  The javadoc tool appears to have generated 1 warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

    {color:red}-1 site{color}.  The patch appears to cause mvn site goal to fail.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
     

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/8058//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8058//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8058//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8058//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8058//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8058//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8058//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8058//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8058//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8058//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/8058//console

This message is automatically generated.

If the region is offline based on ZK, the region is about to re-assign.  In meta, the region should still have the old server name. That means it should be assigned by SSH in handling the old dead server, right?

I see. The old dead server SSH skips this region since it is in transition.

+1. Offline is also kind of pending open if the region is in transition. If you can add a unit test, it will be great. If it is hard to do, I am fine to go without one.

[~jeffreyz], I thought it again and think we should not fix as in this patch. I think it is better to fix AM#processRegionsInTransition(RegionTransition, HRegionInfo, int) so that if the server is offline, instead of forcing offline the region, we can just restore its state based on the EventType. If the EventType is offline, set the region to pending_open.  What do you think?

I created a unit test case for this issue and verified the fix.

Just reset to PENDING_OPEN may not work in processRegionsInTransition. The assignment was indeed triggered while the issue is that the state stored in ZK cause the assignment skipped because assignment think the SSH would cover it later(this is expected). 

Later the two old server SSHs both started as expected while both of them skippped the region assignment: 
The source server SSH thought the region was already in RIT state so skipped it(this is expected) while the destination server SSH thought the RIT is in unexpected state so skipping it which I think it's problematic as there are several scenarios that RITs could be in offline state during region assignment.


{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12617308/hbase-10085.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified tests.

    {color:green}+1 hadoop1.0{color}.  The patch compiles against the hadoop 1.0 profile.

    {color:green}+1 hadoop1.1{color}.  The patch compiles against the hadoop 1.1 profile.

    {color:red}-1 javadoc{color}.  The javadoc tool appears to have generated 1 warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 2 new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

    {color:red}-1 site{color}.  The patch appears to cause mvn site goal to fail.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/8069//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8069//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8069//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8069//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8069//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8069//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8069//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8069//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8069//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/8069//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/8069//console

This message is automatically generated.

+1 on the new patch. This is the other fix I thought about too.  My original concern about this fix is that it changed the state machine a little.  I think it is fine since state offline + in-transition is kind of pending open.


[~jeffreyz], before you commit it, could you fix the format a little bit? For example:
{noformat}
+            || !(regionState.isFailedClose() || regionState.isPendingOpenOrOpening() || regionState
+                .isOffline())) {
{noformat}
to something like
{noformat}
+            || !(regionState.isFailedClose() || regionState.isPendingOpenOrOpening()
+                 || regionState.isOffline())) {
{noformat}

By the way, the new test is a little flaky.  Instead of restarting the whole mini cluster, can we just restart the master? Also increase the timeout a little?

Thanks.

Thanks [~jxiang] for the reviews! I've integrated the fix into trunk, 0.98 and 0.96 branch. The javadoc and findbug warnings are not related to this patch. Thanks. 

Never mind about my previous comment. I can address it in HBASE-10090. Thanks. 

I checked in at the same time as your comments. The committed patch has updated format which is from our Apache template auto formatting. 

The reason to restart whole cluster is that I need to trigger SSH on both old RSs(source RS and dst RS in a region assignment) to repro the exact issue to verify the fix.

bq. The reason to restart whole cluster is that I need to trigger SSH on both old RSs(source RS and dst RS in a region assignment) to repro the exact issue to verify the fix.
That's my understanding too. But sometimes, it takes a while to restart the cluster. Let me think about it.

[~jeffreyz], I filed an issue on the test: HBASE-10101. Do you want to take a look?

ok. Let me check it. Thanks.

FAILURE: Integrated in hbase-0.96 #217 (See [https://builds.apache.org/job/hbase-0.96/217/])
HBASE-10085: Some regions aren't re-assigned after a master restarts (jeffreyz: rev 1548728)
* /hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java
* /hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java
* /hbase/branches/0.96/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestAssignmentManagerOnCluster.java


SUCCESS: Integrated in HBase-TRUNK #4715 (See [https://builds.apache.org/job/HBase-TRUNK/4715/])
HBASE-10085: Some regions aren't re-assigned after a master restarts (jeffreyz: rev 1548726)
* /hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java
* /hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java
* /hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestAssignmentManagerOnCluster.java


FAILURE: Integrated in hbase-0.96-hadoop2 #143 (See [https://builds.apache.org/job/hbase-0.96-hadoop2/143/])
HBASE-10085: Some regions aren't re-assigned after a master restarts (jeffreyz: rev 1548728)
* /hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/master/AssignmentManager.java
* /hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java
* /hbase/branches/0.96/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestAssignmentManagerOnCluster.java


Released in 0.96.1.  Issue closed.

