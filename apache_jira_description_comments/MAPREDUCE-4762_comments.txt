Be very careful because I seem to remember a problem caused by the tests registering the custom token renewer.  The believe the test jar is by default in the CLASSPATH, so deploys will load the custom renewer and cause problems.

The patch is applicable to all the main branches: trunk, branch-2, branch-0.23.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12551723/MAPREDUCE-4762-trunk.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient:

                  org.apache.hadoop.mapred.TestClusterMRNotification

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2975//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2975//console

This message is automatically generated.

The test org.apache.hadoop.mapred.TestClusterMRNotification.testMR appears to be flaky: history of pre-commit builds shows that it was failing also in many previous builds.
Re-submitting the patch to try again.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12551823/MAPREDUCE-4762-trunk.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 2 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient:

                  org.apache.hadoop.mapred.TestClusterMRNotification

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2984//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/2984//console

This message is automatically generated.

I'm not a class loader expert so the code looks mildly spooky.  Is there an easier way to just inject the class into the service loader?  If not, I'd consider adding a {{Token.setRenewer(Text, Class)}} to make it easier for other tests too.

Hi, Daryn,
unfortunately there is no way to directly inject implementations into java.util.ServiceLoader. There is ServiceLoader#reload() method, but it also reloads the implementations with the *same* classloader that was cached upon the ServiceLoader object creation. Also ServiceLoader is declared final, so there is no way to subclass it. 

So, besides the way initially suggested in the suggested patch, we can consider 2 alternative implementations:
1) Provide protected static setter org.apache.hadoop.security.token.Token.setTokenRenewerServiceLoader(ServiceLoader<TokenRenewer>) like this:
{noformat}  
  protected static void setTokenRenewerServiceLoader(ServiceLoader<TokenRenewer> newTokenRenewerServiceLoader) {
    renewers = newTokenRenewerServiceLoader;
  }
{noformat} 
  , and in the test create a new renewer service loader (with the help of our artificially constructed class-loader), and set it using the provided setter:
{noformat} 
  @Test
  public void testDTRenewal() throws Exception {
    final ClassLoader myCl = new MyRenewerClassLoader(getClass().getClassLoader());
    final ServiceLoader<TokenRenewer> newSl = ServiceLoader.load(TokenRenewer.class, myCl);
    MyToken.setTokenRenewerServiceLoader(newSl); // this is a static delegate to make the protected Token#setTokenRenewerServiceLoader() visible
    ...
{noformat} 
Main drawback of this option is that it requires the protected static setter that can be mistakely used somewhere in non-test code, what is dangerous.
Though, I think, this way is also spooky a little bit. :)

2) Direct injection of "renewer" non-static field into the MyToken or Token object (as probably suggested by you) -- this also requires a new setter, but what is worse, that will not correctly test the method org.apache.hadoop.security.token.Token.getRenewer() --  the Renewer object will not be searched in using org.apache.hadoop.security.token.TokenRenewer.handleKind(Text), but will be used directly. One of our goals is to improve coverage of the code by the tests, so it would be better if we force the test to pass through Token.getRenewer() in the same way as it goes in the production.

So, what implementation do you prefer?

There are other places in the code that do things similar to #1.  They tend to inject a TokenRenewer implementation instead of injecting a ServiceLoader, so I would prefer to see something like that.

{code}
  private static ServiceLoader<TokenRenewer> renewers =
      ServiceLoader.load(TokenRenewer.class);

  private static TokenRenewer testRenewer = null;

  @VisibleForTesting
  static void setTestRenewer(TokenRenewer test) {
    synchronized (renewers) {
      testRenewer = test;
    }
  }

  private synchronized TokenRenewer getRenewer() throws IOException {
    if (renewer != null) {
      return renewer;
    }
    renewer = TRIVIAL_RENEWER;
    synchronized (renewers) {
      if (testRenewer != null && testRenewer.handleKind(this.kind)) {
        renewer = testRenewer;
        return renewer;
      }
      for (TokenRenewer canidate : renewers) {
        if (canidate.handleKind(this.kind)) {
          renewer = canidate;
          return renewer;
        }
      }
    }
    LOG.warn("No TokenRenewer defined for token kind " + this.kind);
    return renewer;
  }
{code}

SecurityUtil.java does something very similar for SecurityInfo but with an array of SecurityInfo's instead, which might be preferable.

Hi, Robert,
the attached patches "MAPREDUCE-4762-branch-0.23--b.patch" and "MAPREDUCE-4762--b.patch" implement your suggestion. 
Patch "MAPREDUCE-4762--b.patch" targeted to branches "trunk" and "branch-2". 

{color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12554983/MAPREDUCE-4762--b.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3071//testReport/
Console output: https://builds.apache.org/job/PreCommit-MAPREDUCE-Build/3071//console

This message is automatically generated.

The class DelegationTokenRenewal as well as corresponding test were removed in trunk and branch-2 as a result of fix MAPREDUCE-4861 .
So, the patches for trunk and branch-2 are no longer valid.
The patch for branch-0.23 is still valid, though.

The class DelegationTokenRenewal was completely removed from all the branches as a result of fix MAPREDUCE-4861 . So, closing this request.

