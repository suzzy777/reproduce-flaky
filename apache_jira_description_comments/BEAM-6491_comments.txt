Recent PRs for the test file:
https://github.com/apache/beam/commit/2bf5eadff02f9effdd299c867d6e476594ddeb22#diff-9a483e071fce83aa7be513e8b8ffdba1

There are a lot of sleeps in this test, and its using multiple threads. perhaps it needs to use some tools to coordinate them

I don't fully understand the "writer Thread" in testMatchWatchForNewFiles

I think that the join in this test should moved up?

 

In this test we are tryiong to access the file and its modified time when populating the "expected" values, but there is no guarantee that the file exists yet, or is done being modified.

his PR introduces the threading style (no problem yet, since we aren't trying to access the file in the expected check)
https://github.com/apache/beam/commit/910d02fb464d8a91c7149f214419964cb834639b

 

However, the check for the last modified time is added in this PR which introduces the race condition
https://github.com/apache/beam/commit/410d6c7b5f933dcb0280894553c1e576ee4e4884

Though, simply moving the writer.join() statement upward, may defeat the purpose of the test, which seems to intend to see what happens while the pipeline is running and new files are written.

I am wondering if there is a more clever AssertThat which can be used to add custom code which runs inside the pipeline in order to populate the expected values inside a function? Then it can run after the test finishes and insert its check after the pipeline has finished (and extracting the modified times as well)

I wonder if this is related to BEAM-6352

Just as an update, I made a PR setting the test to be ignored until this flake is fixed. 

