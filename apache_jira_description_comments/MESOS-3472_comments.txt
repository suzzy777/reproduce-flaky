[~hartem], are you working on this? If not, I'd like to contribute this.

I added a bit more logging, which yields the following:

{noformat}
Clock::now.secs = 1.48397e+09; long = 1483973693
Days(365).secs = 3.1536e+07; long = 31536000
expirySecs: 1.45244e+09; long = 1452437693
stringify(expirySecs): 1.45244e+09
claimsJsonString = {"access"       :[         {           "type":"repository",           "name":"library/busybox",           "actions":["pull"]}],           "aud":"registry.docker.io",           "exp":1.45244e+09,           "iat":1438887166,           "iss":"auth.docker.io",           "jti":"l2PJDFkzwvoL7-TajJF7",           "nbf":1438887166,           "sub":""          }
token string = eyAgICAgICAiYWxnIjoiRVMyNTYiLCAgICAgICAidHlwIjoiSldUIiwgICAgICAgIng1YyI6WyJ0ZXN0Il0gICAgIH0=.eyJhY2Nlc3MiICAgICAgIDpbICAgICAgICAgeyAgICAgICAgICAgInR5cGUiOiJyZXBvc2l0b3J5IiwgICAgICAgICAgICJuYW1lIjoibGlicmFyeS9idXN5Ym94IiwgICAgICAgICAgICJhY3Rpb25zIjpbInB1bGwiXX1dLCAgICAgICAgICAgImF1ZCI6InJlZ2lzdHJ5LmRvY2tlci5pbyIsICAgICAgICAgICAiZXhwIjoxLjQ1MjQ0ZSswOSwgICAgICAgICAgICJpYXQiOjE0Mzg4ODcxNjYsICAgICAgICAgICAiaXNzIjoiYXV0aC5kb2NrZXIuaW8iLCAgICAgICAgICAgImp0aSI6ImwyUEpERmt6d3ZvTDctVGFqSkY3IiwgICAgICAgICAgICJuYmYiOjE0Mzg4ODcxNjYsICAgICAgICAgICAic3ViIjoiIiAgICAgICAgICB9.eyIifQ==
../../mesos/src/tests/containerizer/provisioner_docker_tests.cpp:265: Failure
Value of: token.isError()
  Actual: false
Expected: true
{noformat}

Weird: Clock::now.secs of 1483973693 is a time in 2017.

Looking into this, the problem seems to be that every time we run the test suite, we {{Clock::advance}} by about 4 weeks. So if you run the entire test suite with {{gtest_repeat}} set to ~12 or more, we'll eventually move the clock forward one year, which means the token we create in {{RegistryTokenTest.ExpiredToken}} will no longer be expired and the test will fail.

Possible fixes:

1. Have {{RegistryTokenTest.ExpiredToken}} use an offset of more than 1 year. Obviously this is kludgy.
2. Have {{RegistryTokenTest.ExpiredToken}} use a fixed time in the past, rather than picking one relative to {{Clock::now}}. Again, somewhat kludgy, although better than #1.
3. Have {{MesosTest::TearDown}} reset the clock (via {{Clock::update}}) to some "initial" value. Right now we don't capture an appropriate initial value, however.
4. Introduce {{Clock::resetAdvance()}} which clears the effect of any {{Clock::advance}} calls, and then invoke this in {{MesosTest::TearDown}}.

I'm inclined to do #4.

\#4 may be difficult to do without some weird side-effects.
I implemented some clock cleanup here: [MESOS-3882].  But rolling back the clock could potentially leave some timers active.

Ideally, we'd want to clean up all of libprocess's state in between tests that reset the clock.  You can look through some of the reviews out for doing just that: [MESOS-3820].

Good point -- some initial experiments seem to confirm that moving the clock backwards in {{MesosTest::TearDown}} will not be trivial. I guess we should do #1 or #2 for now.

https://reviews.apache.org/r/42208/

commit d7daf708f2f4751f18439968d84dbb40b7195fa4
Author: Neil Conway <neil.conway@gmail.com>
Date:   Tue Jan 12 15:17:48 2016 -0800

    Fixed flakiness in RegistryTokenTest.ExpiredToken.


