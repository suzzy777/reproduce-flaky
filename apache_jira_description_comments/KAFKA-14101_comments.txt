cc [~ChrisEgerton]

Thanks, [~mimaison]. I believe this is due to a bug that I've now fixed in that PR; we should be using {{consumeAll}} instead of {{consume}} in the test [here|https://github.com/C0urante/kafka/blob/466a59df2d02de16d285325be4d44c99b24eee4d/connect/runtime/src/test/java/org/apache/kafka/connect/integration/ExactlyOnceSourceIntegrationTest.java#L408-L410] in order to guarantee that we've collected records from every partition of the topic that the connector produces to instead of just consuming until we get at least 100 from one or more topic partitions.

Please let me know if you see this issue come up again on the branch for [https://github.com/apache/kafka/pull/12429] now that I've pushed a change that should fix this.

Apologies for all the flakiness, and thank you for quickly finding and reporting all of it. Really hoping we can iron out all the kinks before we start producing 3.3.0 RCs ðŸ¤ž

[~ChrisEgerton] I wonder whether we should rename {{consume}} to {{consumeSome}} to make the semantics a little more obvious.

[~tombentley] Yeah, a renaming would help here. Given that the contract of the method is that it consumes from the topic until it has read at least the given number of records in the given duration, and throws an exception if it's unable to, what do you think about {{{}consumeAtLeast{}}}?

A note on the Javadocs about out-of-order consumption of records probably wouldn't hurt either, right?

Both those seem reasonable to me [~ChrisEgerton]. Thanks.

Resolving since [https://github.com/apache/kafka/pull/12429] has been merged. The follow-up to make our internal API for consuming from an embedded Kaka cluster is still open, but can be given lower priority.

