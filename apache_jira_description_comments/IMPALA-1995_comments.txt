Another one: http://sandbox.jenkins.cloudera.com/view/Impala/view/Build/job/impala-CDH5-nightly-data-load/682/testReport/junit/com.cloudera.impala.planner/PlannerTest/testHbase/
{noformat}
section SCANRANGELOCATIONS of query:
select * from functional_hbase.alltypessmall
where id < 5
actual result doesn't match expected result:
  HBASE KEYRANGE port=16201 <unbounded>:<unbounded>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
NODE 0:

expected:
  HBASE KEYRANGE port=16201 <unbounded>:3
  HBASE KEYRANGE port=16202 3:7
  HBASE KEYRANGE port=16203 7:<unbounded>
NODE 0:
{noformat}

Is this a duplicate of IMPALA-2801?

Tim, IMPALA-2801 is a different problem that is fixed now.

Ok, updated the title so that it can be distinguished from the other one.

I hit this again http://sandbox.jenkins.cloudera.com/job/impala-external-gerrit-verify-merge/1837/testReport/junit/com.cloudera.impala.planner/PlannerTest/testHbase/

Have we seen this recently?

[~tarmstrong], don't think we've seen it recently, but this bug is definitely real. Just a matter of time until we hit it again.

{noformat}
org.apache.impala.planner.PlannerTest.testHbase
Failing for the past 1 build (Since Failed#476 )
Took 15 sec.
add description
Error Message

section SCANRANGELOCATIONS of query:
select * from functional_hbase.alltypessmall
where id < 5
Actual does not match expected result:
  HBASE KEYRANGE port=16201 7:<unbounded>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  HBASE KEYRANGE port=16201 <unbounded>:3
  HBASE KEYRANGE port=16202 3:7
NODE 0:

Expected:
  HBASE KEYRANGE port=16201 <unbounded>:3
  HBASE KEYRANGE port=16202 3:7
  HBASE KEYRANGE port=16203 7:<unbounded>
NODE 0:

Stacktrace

java.lang.AssertionError: section SCANRANGELOCATIONS of query:
select * from functional_hbase.alltypessmall
where id < 5
Actual does not match expected result:
  HBASE KEYRANGE port=16201 7:<unbounded>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  HBASE KEYRANGE port=16201 <unbounded>:3
  HBASE KEYRANGE port=16202 3:7
NODE 0:

Expected:
  HBASE KEYRANGE port=16201 <unbounded>:3
  HBASE KEYRANGE port=16202 3:7
  HBASE KEYRANGE port=16203 7:<unbounded>
NODE 0:

	at org.junit.Assert.fail(Assert.java:88)
	at org.apache.impala.planner.PlannerTestBase.runPlannerTestFile(PlannerTestBase.java:770)
	at org.apache.impala.planner.PlannerTestBase.runPlannerTestFile(PlannerTestBase.java:775)
	at org.apache.impala.planner.PlannerTest.testHbase(PlannerTest.java:89)
{noformat}

Happened again: https://jenkins.impala.io/job/gerrit-verify-dryrun/2300/
{noformat}
java.lang.AssertionError: section SCANRANGELOCATIONS of query:
select * from functional_hbase.stringids
where id > '5'
and tinyint_col = 5
Actual does not match expected result:
  HBASE KEYRANGE port=16201 7:<unbounded>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  HBASE KEYRANGE port=16202 5\0:7
NODE 0:

Expected:
  HBASE KEYRANGE port=16202 5\0:7
  HBASE KEYRANGE port=16203 7:<unbounded>
NODE 0:
section SCANRANGELOCATIONS of query:
select * from functional_hbase.stringids
where id >= '5'
and tinyint_col = 5
Actual does not match expected result:
  HBASE KEYRANGE port=16201 7:<unbounded>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  HBASE KEYRANGE port=16202 5:7
NODE 0:

Expected:
  HBASE KEYRANGE port=16202 5:7
  HBASE KEYRANGE port=16203 7:<unbounded>
NODE 0:
section SCANRANGELOCATIONS of query:
select * from functional_hbase.stringids
where id < '5'
and tinyint_col = 5
Actual does not match expected result:
  HBASE KEYRANGE port=16202 3:5
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  HBASE KEYRANGE port=16203 <unbounded>:3
NODE 0:

Expected:
  HBASE KEYRANGE port=16201 <unbounded>:3
  HBASE KEYRANGE port=16202 3:5
NODE 0:
section SCANRANGELOCATIONS of query:
select * from functional_hbase.alltypesagg
where bigint_col is not null and bool_col = true
Actual does not match expected result:
  HBASE KEYRANGE port=16201 7:<unbounded>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  HBASE KEYRANGE port=16202 3:7
  HBASE KEYRANGE port=16203 <unbounded>:3
NODE 0:

Expected:
  HBASE KEYRANGE port=16201 <unbounded>:3
  HBASE KEYRANGE port=16202 3:7
  HBASE KEYRANGE port=16203 7:<unbounded>
NODE 0:

	at org.junit.Assert.fail(Assert.java:88)
	at org.apache.impala.planner.PlannerTestBase.runPlannerTestFile(PlannerTestBase.java:816)
	at org.apache.impala.planner.PlannerTestBase.runPlannerTestFile(PlannerTestBase.java:821)
	at org.apache.impala.planner.PlannerTest.testHbase(PlannerTest.java:89)

{noformat}


Happened again:
{noformat}
section SCANRANGELOCATIONS of query:
select * from functional_hbase.stringids
where id > '5'
and tinyint_col = 5
Actual does not match expected result:
  HBASE KEYRANGE port=16202 5\0:9
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  HBASE KEYRANGE port=16203 9:<unbounded>
NODE 0:
...{noformat}

This has happened several times recently.

Downgrading since it's a test-only issue that only happens occasionally.

[~joemcdonnell] what are the next steps here? Does IMPALA-7039 help at all?

[~tarmstrong] I think this is addressed by IMPALA-7061, so I was planning on resolving it as a duplicate of that.

Happened again:

{code}
section SCANRANGELOCATIONS of query:
select * from functional_hbase.alltypesagg
where bigint_col is not null and bool_col = true
Actual does not match expected result:
  HBASE KEYRANGE 3:5
^^^^^^^^^^^^^^^^^^^^
  HBASE KEYRANGE 5:7
  HBASE KEYRANGE 7:9
  HBASE KEYRANGE 9:<unbounded>
  HBASE KEYRANGE <unbounded>:3
NODE 0:

Expected:
  HBASE KEYRANGE 3:7
  HBASE KEYRANGE 7:<unbounded>
  HBASE KEYRANGE <unbounded>:3
NODE 0:
{code}


 Reopening the JIRA.

Again: https://master-02.jenkins.cloudera.com/job/impala-asf-master-core/1575/testReport/junit/org.apache.impala.planner/PlannerTest/testHbase/

Recently hit this again: [https://master-02.jenkins.cloudera.com/job/impala-asf-master-exhaustive/876/testReport/org.apache.impala.planner/PlannerTest/testHbase/]

Are the keyranges for HBase supposed to be deterministic? I think I am seeing a trend here where these tests fails from time to time and I guess we keep adjusting the keyranges and so I am wondering if maybe we should filter these keyranges when matching with expected result, unless this is a real bug and we expect these to be deterministic?

yeah, there's an attempt to split HBase ranges in a deterministic way with data loading. Maybe [~joemcdonnell] knows more>

Happened again in https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/9590/

We have seen a similar failure recently.
{code:java}
Error Message
section SCANRANGELOCATIONS of query:
select * from functional_hbase.stringids
where id < '5'
and tinyint_col = 5
Actual does not match expected result:
  HBASE KEYRANGE 1:3
^^^^^^^^^^^^^^^^^^^^
  HBASE KEYRANGE 3:5
  HBASE KEYRANGE <unbounded>:1
NODE 0:

Expected:
  HBASE KEYRANGE 3:5
  HBASE KEYRANGE <unbounded>:3
NODE 0:
Stacktrace
java.lang.AssertionError: 
section SCANRANGELOCATIONS of query:
select * from functional_hbase.stringids
where id < '5'
and tinyint_col = 5
Actual does not match expected result:
  HBASE KEYRANGE 1:3
^^^^^^^^^^^^^^^^^^^^
  HBASE KEYRANGE 3:5
  HBASE KEYRANGE <unbounded>:1
NODE 0:

Expected:
  HBASE KEYRANGE 3:5
  HBASE KEYRANGE <unbounded>:3
NODE 0:

	at org.junit.Assert.fail(Assert.java:88)
	at org.apache.impala.planner.PlannerTestBase.runPlannerTestFile(PlannerTestBase.java:924)
	at org.apache.impala.planner.PlannerTestBase.runPlannerTestFile(PlannerTestBase.java:839)
	at org.apache.impala.planner.PlannerTest.testHbaseNoKeyEstimate(PlannerTest.java:211)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:272)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:236)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:386)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:323)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:143)
{code}


Happened again on 2 recent builds. 

[https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/10021/testReport/junit/org.apache.impala.planner/PlannerTest/testHbaseNoKeyEstimate/]

Happened again in a recent build. 

section SCANRANGELOCATIONS of query:
select * from functional_hbase.stringids
where id > '5'
and tinyint_col = 5
Actual does not match expected result:
 HBASE KEYRANGE 5\0:9
^^^^^^^^^^^^^^^^^^^^^^
 HBASE KEYRANGE 9:<unbounded>
NODE 0:

Expected:
 HBASE KEYRANGE 5\0:7
 HBASE KEYRANGE 7:<unbounded>
NODE 0:

 

Seen again in a recent build:
h3. Error Message

section SCANRANGELOCATIONS of query:
select * from functional_hbase.stringids
where id > '5'
and tinyint_col = 5
Actual does not match expected result:
 HBASE KEYRANGE 5\0:7
 HBASE KEYRANGE 7:9
^^^^^^^^^^^^^^^^^^^^
 HBASE KEYRANGE 9:<unbounded>
NODE 0:
h3. Stacktrace

java.lang.AssertionError: 
section SCANRANGELOCATIONS of query:
select * from functional_hbase.stringids
where id > '5'
and tinyint_col = 5
Actual does not match expected result:
 HBASE KEYRANGE 5\0:7
 HBASE KEYRANGE 7:9
^^^^^^^^^^^^^^^^^^^^
 HBASE KEYRANGE 9:<unbounded>
NODE 0:

 
{noformat}
at org.junit.Assert.fail(Assert.java:88)
 at org.apache.impala.planner.PlannerTestBase.runPlannerTestFile(PlannerTestBase.java:929)
 at org.apache.impala.planner.PlannerTestBase.runPlannerTestFile(PlannerTestBase.java:844)
 at org.apache.impala.planner.PlannerTest.testHbaseNoKeyEstimate(PlannerTest.java:227)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:498)
 at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
 at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
 at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
 at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
 at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
 at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
 at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
 at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
 at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
 at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
 at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
 at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
 at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
 at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
 at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
 at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
 at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
 at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
 at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:272)
 at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:236)
 at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
 at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:386)
 at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:323)
 at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:143)
{noformat}

Seen this error on a recent build
{code:java}

section SCANRANGELOCATIONS of query:
select * from functional_hbase.stringids
where id > '5'
and tinyint_col = 5
Actual does not match expected result:
  HBASE KEYRANGE 5\0:7
  HBASE KEYRANGE 7:9
^^^^^^^^^^^^^^^^^^^^
  HBASE KEYRANGE 9:<unbounded>
NODE 0:

Expected:
  HBASE KEYRANGE 5\0:7
  HBASE KEYRANGE 7:<unbounded>
NODE 0:
section SCANRANGELOCATIONS of query:
select * from functional_hbase.stringids
where id >= '5'
and tinyint_col = 5
Actual does not match expected result:
  HBASE KEYRANGE 5:7
  HBASE KEYRANGE 7:9
^^^^^^^^^^^^^^^^^^^^
  HBASE KEYRANGE 9:<unbounded>
NODE 0:

Expected:
  HBASE KEYRANGE 5:7
  HBASE KEYRANGE 7:<unbounded>
NODE 0:
section SCANRANGELOCATIONS of query:
select * from functional_hbase.stringids
where id < '5'
and tinyint_col = 5
Actual does not match expected result:
  HBASE KEYRANGE 1:3
^^^^^^^^^^^^^^^^^^^^
  HBASE KEYRANGE 3:5
  HBASE KEYRANGE <unbounded>:1
NODE 0:

Expected:
  HBASE KEYRANGE 3:5
  HBASE KEYRANGE <unbounded>:3
NODE 0:
section SCANRANGELOCATIONS of query:
select * from functional_hbase.stringids
where id > '4' and id <= '5'
and tinyint_col = 5
Actual does not match expected result:
  HBASE KEYRANGE 4\0:5
^^^^^^^^^^^^^^^^^^^^^^
  HBASE KEYRANGE 5:5\0
NODE 0:

Expected:
  HBASE KEYRANGE 4\0:5\0
NODE 0:
section SCANRANGELOCATIONS of query:
select * from functional_hbase.stringids
where id >= '4' and id <= '5'
and tinyint_col = 5
Actual does not match expected result:
  HBASE KEYRANGE 4:5
^^^^^^^^^^^^^^^^^^^^
  HBASE KEYRANGE 5:5\0
NODE 0:

Expected:
  HBASE KEYRANGE 4:5\0
NODE 0:
section SCANRANGELOCATIONS of query:
select * from functional_hbase.stringids
where string_col = '4' and tinyint_col = 5 and id >= '4' and id <= '5'
Actual does not match expected result:
  HBASE KEYRANGE 4:5
^^^^^^^^^^^^^^^^^^^^
  HBASE KEYRANGE 5:5\0
NODE 0:

Expected:
  HBASE KEYRANGE 4:5\0
NODE 0:
section SCANRANGELOCATIONS of query:
select * from functional_hbase.stringids
where string_col = '4' and tinyint_col = 5
  and id >= concat('', '4') and id <= concat('5', '')
Actual does not match expected result:
  HBASE KEYRANGE 4:5
^^^^^^^^^^^^^^^^^^^^
  HBASE KEYRANGE 5:5\0
NODE 0:

Expected:
  HBASE KEYRANGE 4:5\0
NODE 0:{code}

Saw this error on my recent build. The test that failed was the same as what is posted in the above comment.

Saw this again in https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/16464/

Saw this again:
https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/16513
https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/16522

I think one solution is always moving the regions to the expected RegionServers using
{code:java}
hbase> move 'ENCODED_REGIONNAME', 'SERVER_NAME'
{code}
[https://learnhbase.wordpress.com/2013/03/02/hbase-shell-commands/]
|*move*|Move a region. Optionally specify target regionserver else we choose one
at random. NOTE: You pass the encoded region name, not the region name so
this command is a little different to the others. The encoded region name
is the hash suffix on region names: e.g. if the region name were
TestTable,0094429456,1289497600452.527db22f95c8a9e0116f0cc13c680396. then
the encoded region name portion is 527db22f95c8a9e0116f0cc13c680396
A server name is its host, port plus startcode. For example:
host187.example.com,60020,1289493121758
Examples:hbase> move ‘ENCODED_REGIONNAME’
*hbase> move ‘ENCODED_REGIONNAME’, ‘SERVER_NAME’*|

Take the "functional_hbase.alltypesagg" table as an example, we can first list all the regions of it. The output is ordered by the start key. Then we just need to move every 2 regions to one RegionServer.

{code}
hbase:001:0> list_regions "functional_hbase.alltypesagg"
                   SERVER_NAME |                                                                    REGION_NAME |  START_KEY |    END_KEY |  SIZE |    REQ |   LOCALITY |
 ----------------------------- | ------------------------------------------------------------------------------ | ---------- | ---------- | ----- | ------ | ---------- |
 localhost,16020,1653261458193 |  functional_hbase.alltypesagg,,1653265020292.89f28ad00353462786ce54d89553c1ff. |            |          1 |     1 |     90 |        1.0 |
 localhost,16020,1653261458193 | functional_hbase.alltypesagg,1,1653265020292.5cc7f766115d323c9bbdf6592e3a2d1c. |          1 |          3 |     1 |      0 |        1.0 |
 localhost,16022,1653261459394 | functional_hbase.alltypesagg,3,1653265020292.bdd4d0417627790951f61623798b6ec5. |          3 |          5 |     1 | 126348 |        1.0 |
 localhost,16022,1653261459394 | functional_hbase.alltypesagg,5,1653265020292.43a339608bc7da153a7ef2fe61a5d4ce. |          5 |          7 |     1 | 130135 |        1.0 |
 localhost,16023,1653261460504 | functional_hbase.alltypesagg,7,1653265020292.46c00822bd24a69709b10fad4055363a. |          7 |          9 |     1 |  81468 |        1.0 |
 localhost,16023,1653261460504 | functional_hbase.alltypesagg,9,1653265020292.61fd266060bc61909db0440c84b0d703. |          9 |            |     1 |  81477 |        1.0 |
 6 rows
Took 0.4263 seconds                                                                                                                                                                                                                    
hbase:002:0> move "89f28ad00353462786ce54d89553c1ff", "localhost,16020,1653261458193"
Took 0.0214 seconds
hbase:003:0> move "5cc7f766115d323c9bbdf6592e3a2d1c", "localhost,16020,1653261458193"
Took 0.0060 seconds                                                                                                                                                                                                                    
hbase:004:0> move "bdd4d0417627790951f61623798b6ec5", "localhost,16022,1653261459394"
Took 0.0057 seconds                                                                                                                                                                                                                    
hbase:005:0> move "43a339608bc7da153a7ef2fe61a5d4ce", "localhost,16022,1653261459394"
Took 0.0017 seconds                                                                                                                                                                                                                    
hbase:006:0> move "46c00822bd24a69709b10fad4055363a", "localhost,16023,1653261460504"
Took 0.0058 seconds                                                                                                                                                                                                                    
hbase:007:0> move "61fd266060bc61909db0440c84b0d703", "localhost,16023,1653261460504"
Took 0.0022 seconds
{code}

Note that on my desktop, the regions are assigned as expected. So the move commands don't change anything. 

I ran into this on https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/16704/.

Saw this again: https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/16917/

