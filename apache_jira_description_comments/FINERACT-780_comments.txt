The api should be mocked. 

What exactly does this test do? I do not know about this feature.

 

{quote}What exactly does this test do? I do not know about this feature.{quote}

No clue. Perhaps you can "reverse engineer" it, just from looking at the test? I also find that checking {{git log}} of tests, and its code under test, often helps. Searching this Jira and the Fineract Confluence Wiki may also have some references. Or just ask on the mailing list "hey does anyone have any pointers what the ... functionality actually does" is fair game I guess.

Sure, thanks.
But this api call should be mocked anyways.

[~mohitsinha] I'm not entirely sure that that (external) echo server actually really does, but through some git archology found https://github.com/apache/fineract/commits/c5b56dae8fc93986628301bf1b2c7f4a96fa880b/mifosng-provider/src/integrationTest/java/org/mifosplatform/integrationtests/HookIntegrationTest.java which seems to show that there is some prior history re. this particular test being flacky, and that my old friend [~avikganguly010] originally introduced it...

http://www.jamesward.com/2014/06/11/testing-webhooks-was-a-pain-so-i-fixed-the-glitch explains what it is - just somebody's test server, source code on https://github.com/jamesward/echo-webhook, where anyone can POST anything you like to, and then get it back via a GET.

{quote}What someone probably could do is to instead start some sort of Echo Server written in Java in-process as part of that test. Something like this may already exist as a library somewhere, or otherwise it probably wouldn't be terribly hard to write it.{quote}

Actually, couldn't we just write a very simple thing in Spring  within Fineract for this? Perhaps even simpler than echo-webhook.herokuapp.com, and just.. a super simple hard-coded class? I guess it's a little bit ugly to have it as part of fineract production code (if we put this class under {{src/main/java}}, because it won't be the WAR and run for the IT if it's elsewhere), but to me that would not be the end of the world an acceptable. After FINERACT-764 is done, such a class could perhaps be moved from {{src/main/java}} to {{src/integrationTest}}, if Spring Boot picks up from there when it runs ITs (but it would then not be in the final WAR).

Can't it be done in a much more simpler way, as per the blog, the url to be called is https://echo-webhook.herokuapp.com/SOMETHING_UNIQUE

Currently that unique value is hardcoded in our test. I can try with generating it uniquely everytime the test runs.

Should I try that?

It depends why exactly the test fails sometimes. My assumption, which I have not fully verified (but you could have a closer look at the TravisCI build failure logs from the two PRs mentioned above), is that, for some reason, sometimes echo-webhook.herokuapp.com is not up / reachable / fast enough (this is IMHO quite likely to, occassionally, happen). In that case, "generating it uniquely everytime the test runs" would make no difference - do you agree?

If I'm misinterpreting what's going on here (which is totally possible!) and this is e.g. some sort of concurrency problem where tests running in parallel, or on some developer's workstations, change this value which supposed to be unique, then what you suggest could be a great idea. But I haven't looked at the details of the test or the failure to be able to say that it would. If you have, then perhaps just briefly explain here what you've analysed to be the real root cause, and go for it!

Looking at https://api.travis-ci.org/v3/job/518404770/log.txt

The only relevant logs I could find were 
`01:16:34.706 [Retrofit-Idle] INFO  o.a.f.i.h.processor.ProcessorHelper - URL : http://echo-webhook.herokuapp.com:80/Z7RXoCBdLSFMDrpn?	Status : 200
org.apache.fineract.integrationtests.HookIntegrationTest > shouldSendOfficeCreationNotification FAILED
    java.lang.AssertionError at HookIntegrationTest.java:79
`

Maybe, it means that there wasn't a connection issue, but rather an issue regarding the unique id. When somebody runs the tests simultaneously, that is going to affect these tests.

Can you find out what exactly was the assertion error?

Hi [~vorburger] and [~mohitsinha],

 

I googled and found a mock server. Maybe this will help:

[https://github.com/wiremock/wiremock-webhooks-extension]

[https://dzone.com/articles/mocking-rest-api-with-wiremock-using-recording-mod]

 

[~awasum] We don't need a mock server. We need an echo server.

> Maybe, it means that there wasn't a connection issue, but rather an issue regarding the unique id. When somebody runs the tests simultaneously, that is going to affect these tests.

if you think that's a possibility, and have an idea how to impreove it, then you could always raise a PR already doing that (I have not looked at the code closely enough).

> Can you find out what exactly was the assertion error?

Unfortunately not.

> Awasum Yannick We don't need a mock server. We need an echo server.

I think the idea may be that with a mock server it would be possible to write an echo server?

[~vorburger] We have a few approaches to tackle this problem.

> We can @Ignore the test
> We can try with an uninque Id, generated each time the test runs.
> I can create an echo API on Fineract, that just returns in response the request body received. ( Although I would prefer solution 1 instead of this).

https://github.com/apache/fineract/pull/623 merged.  I'm not entirely sure it will fix this, but let's try! At the very least, I guess this cannot hurt.

Thanks. Let's observe.

PS: The {{HookIntegrationTest}} failures are NOT always "flaky" (arbitrary), but e.g. in FINERACT-1241 a PR really breaks it.

