Partial Fix: https://reviews.apache.org/r/40667/

Still does not answer why the test kept looping for 300 minutes. There might be some future that was never ready and we invoked a .get() blocking forever or a deadlock somewhere else. Would keep digging for the root cause and for future failures on the ASF CI leading to more clues.

{noformat}
commit 457e536e93326abddbfcb35437c3280dda5bb0ac
Author: Anand Mazumdar <mazumdar.anand@gmail.com>
Date:   Thu Dec 3 03:47:49 2015 -0500

    Fixed flakiness in reservation endpoint tests.

    (1) Fixed some flakiness in the reservation tests around `resourceOffers`
        expectation being set after `driver.start()` leading to a race condition
        sometimes.

        ```
        GMOCK WARNING:
        Uninteresting mock function call - returning directly.
            Function call: resourceOffers(...)
        ```

    (2) Added `AWAIT_READY` for the returned future from (1).
    (3) Removed the initial call to `reviveOffers` after `driver.start()` since that
        was extraneous.

    Review: https://reviews.apache.org/r/40667
{noformat}

[~anandmazumdar]: I took a look at this today and figured out the issue and found that your patch is actually the full fix :)

{code}
driver.start();

Future<vector<Offer>> offers;
EXPECT_CALL(sched, resourceOffers(&driver, _))
  .WillOnce(FutureArg<1>(&offers));

driver.reviveOffers();

ASSERT_EQ(1u, offers.get().size());
{code}

The forever hanging scenario:

# The offer generated at the end of {{driver.start()}} is sent to the framework *before* the {{EXPECT_CALL}} for {{resourceOffers}} is set-up, resulting in the "Uninteresting mock function call" gmock warning.
# The {{EXPECT_CALL}} for {{resourceOffers}} is set-up.
# {{driver.reviveOffers()}} does not generate an offer, since all resources have been offered from the {{driver.start()}} call, therefore the {{offers}} future is *unsatisfied*.
# The {{offers.get()}} hiding in {{ASSERT_EQ(1u, offers.get().size());}} blocks us forever.

An {{AWAIT_READY(offers);}} statement would've prevented us from blocking forever, which you've added.
You also fixed the race between {{driver.start()}} and the {{EXPECT_CALL}} set-up for {{resourceOffers}}.

Thank you!

There are two more case where the .get() can block forever:
https://reviews.apache.org/r/44227/

