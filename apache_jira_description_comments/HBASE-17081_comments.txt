Just clarifying the context. This code is a building block for the default compaction policy that has been suggested before. 

We already have the patch for this against trunk. We were waiting for ur test results before creating this jira1. We would like to give a patch for this.

+1 for the task

So [~anastas] - can I take this up. 

Hi Guys,

We didn't know you were working on this. We actually had the code written before we opened this jira and thus before we understood you have the patch. We didn't publish the patch so far as we have some tests not passing, but as we have this issue of two implementations, I am going to publish our patch, which is still *work in progress*. Generally our idea is to add a snapshot which is a collection of immutable segments (one or more). I believe you were going the same direction as well. Are there any major differences? Please feel free to publish your implementation on review board as well.

RB: https://reviews.apache.org/r/53732/

Thanks,
Anastasia

I thought we had already presented about pipeline flush and it's perf numbers. Lets discuss with the patch that we publish too. No problem.

Had a quick review of the patch in RB link.. It is almost same as what Ram made.   I had a look at that before.  Added some comments/Qs there in RB.. Overall the direction seems good to me.

Hey Again!

I have answered all the comments in the RB. Please take a look and comment if you do not agree with my answers. 

If you have already presented about pipeline flush and it's perf numbers, please show us where (JIRA?), because we are not aware. I am OK to proceed with your patch, but please upload it now for our review. Otherwise, I am going to proceed with developing this patch and I do not want to spend my time.

As am out, I did not check the patch. Since you asked as where we have talked about it. Pls see this 
https://issues.apache.org/jira/browse/HBASE-16608?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=15585971#comment-15585971.

Pls go ahead with the patch. 


Just few comments in RB. Also attaching my version of patch for your reference. Incase you find something useful there.

Attaching the improved patch. I have answered all of the RB comments.

The new patch is also on the RB. And I am copy-pasting one of my RB answers here to make it more clear:

    So here is how index-compaction now works:

        1. THRESHOLD_PIPELINE_SEGMENTS is now set to 10
        2. Till we reach this number of segment in the pipeline we will keep flattening only and if there is snapshot request we will flush everything
        3. There is a big chance we never reach THRESHOLD_PIPELINE_SEGMENTS segments in the pipeline 
        4. Actually once the first segment is flattened, we will always flush everything upon snapshot request (pay attention that none reverse the boolean once it is set)

    Regarding what to do the same in data-compaction case, Eshcar is currently running the benchmarks with all possibilities and we can decide what is better to do based on her experiments.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 13s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 4 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 2m 46s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 35s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 43s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 16s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 54s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 30s {color} | {color:green} master passed {color} |
| {color:red}-1{color} | {color:red} mvninstall {color} | {color:red} 0m 25s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:red}-1{color} | {color:red} compile {color} | {color:red} 0m 27s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:red}-1{color} | {color:red} javac {color} | {color:red} 0m 27s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 48s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 15s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 1m 4s {color} | {color:red} The patch causes 20 errors with Hadoop v2.6.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 2m 9s {color} | {color:red} The patch causes 20 errors with Hadoop v2.6.2. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 3m 15s {color} | {color:red} The patch causes 20 errors with Hadoop v2.6.3. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 4m 21s {color} | {color:red} The patch causes 20 errors with Hadoop v2.6.4. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 5m 25s {color} | {color:red} The patch causes 20 errors with Hadoop v2.6.5. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 6m 33s {color} | {color:red} The patch causes 20 errors with Hadoop v2.7.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 7m 37s {color} | {color:red} The patch causes 20 errors with Hadoop v2.7.2. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 8m 37s {color} | {color:red} The patch causes 20 errors with Hadoop v2.7.3. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 9m 36s {color} | {color:red} The patch causes 20 errors with Hadoop v3.0.0-alpha1. {color} |
| {color:red}-1{color} | {color:red} findbugs {color} | {color:red} 0m 18s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 26s {color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 0m 23s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 9s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 20m 3s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.11.2 Server=1.11.2 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12840243/HBASE-17081-V02.patch |
| JIRA Issue | HBASE-17081 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux 7a7a1e9c486a 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / 8204337 |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
| mvninstall | https://builds.apache.org/job/PreCommit-HBASE-Build/4634/artifact/patchprocess/patch-mvninstall-hbase-server.txt |
| compile | https://builds.apache.org/job/PreCommit-HBASE-Build/4634/artifact/patchprocess/patch-compile-hbase-server.txt |
| javac | https://builds.apache.org/job/PreCommit-HBASE-Build/4634/artifact/patchprocess/patch-compile-hbase-server.txt |
| findbugs | https://builds.apache.org/job/PreCommit-HBASE-Build/4634/artifact/patchprocess/patch-findbugs-hbase-server.txt |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/4634/artifact/patchprocess/patch-unit-hbase-server.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/4634/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/4634/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



Please note that this feature is part of both BASIC and EAGER compaction policies, as described in https://docs.google.com/document/d/16XOiOuG9e0l6D_mD-oM5JHcSVmKC8rpIVJGH239gWsQ (see HBASE-16851). 
As such, Index and Data merge are both parts of the EAGER policy; only index flattening happens in BASIC. 
The whole pipeline is flushed to disk, in both policies. 

{code}
[ERROR] /testptch/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SegmentFactory.java:[105,26] cannot find symbol
  symbol:   variable USEMSLAB_KEY
  location: class org.apache.hadoop.hbase.regionserver.SegmentFactory
[ERROR] /testptch/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SegmentFactory.java:[105,40] cannot find symbol
  symbol:   variable USEMSLAB_DEFAULT
  location: class org.apache.hadoop.hbase.regionserver.SegmentFactory
{code}
Please fix the compilation errors.

[~ram_krish], in your review comments you are saying:

bq. So you arrived at 10 after some experiments? When I did experiments with > 6 I found things to be performing lesser. I will get those reports if I have with me.

We actually didn't try something between 1 and 10... So are you saying that you have seen a performance degradation from having more than 6 segments in the compacting pipeline? Do you really have reports? Do you remember any numbers?

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 13s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 4 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 2m 54s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 36s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 43s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 41s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 25s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 40s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 36s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 36s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 43s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 25m 15s {color} | {color:green} Patch does not cause any errors with Hadoop 2.6.1 2.6.2 2.6.3 2.6.4 2.6.5 2.7.1 2.7.2 2.7.3 or 3.0.0-alpha1. {color} |
| {color:red}-1{color} | {color:red} findbugs {color} | {color:red} 1m 51s {color} | {color:red} hbase-server generated 1 new + 0 unchanged - 0 fixed = 1 total (was 0) {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 26s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 90m 40s {color} | {color:green} hbase-server in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 16s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 127m 44s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| FindBugs | module:hbase-server |
|  |  Synchronization on CompactionPipeline.pipeline in futile attempt to guard it  At CompactionPipeline.java:attempt to guard it  At CompactionPipeline.java:[line 85] |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.12.3 Server=1.12.3 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12840589/HBASE-17081-V03.patch |
| JIRA Issue | HBASE-17081 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux cf7b1c9bb20c 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / 8204337 |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
| findbugs | https://builds.apache.org/job/PreCommit-HBASE-Build/4636/artifact/patchprocess/new-findbugs-hbase-server.html |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/4636/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/4636/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



Folks, would you please consider for commit. 

bq.We actually didn't try something between 1 and 10... 
Regarding this I actually went thro my reports. What I found was that with only flushing the tail anything more than 6 we had problems like
{code}
 Waited 91573ms on a compaction to clean up 'too many store files'; waited long enough... proceeding with flush of TestTable,00000000000000000000943713,1478010005795.a63d191e8dcef46c598dd2db6bd1425d.
{code}
But when we do entire pipeline I think it should be fine. I have not gone above 6. 
The one thing that could be a problem is that when we have scans then we need to scan 10 segments but if say the threshold was 5 then those 5 segments would have been merged to one and that scan need to check for all the 5.
One question - What prompted you to ensure that flushing the entire pipeline is better than flushing only the tail as you were doing earlier? I think  our concern was more on flusing tail only will create lot of small files mainly. Do you observe anyother thing when flushing only tail?



Copying this comment from RB
A new type of Composite ImmutableSegment is created and we use that for the snapshot state.. But 80% this new type is not used it as a real Segment type.. I mean methods are not implemented but we get the individual segments from the composite segment, and act on those.  So my Q is this.. why to have the new type.  A List<ImmutableSegment> as snapshot type will work?  Am in favor of having new composite type.. That will be cleaner.. But with current way of implementation I feel it is not good at all..  In that sense I prefer List way.  Am I making my comment clear?



Thank you for your insights [~ram_krish]!

bq. What I found was that with only flushing the tail anything more than 6 

Do you mean with merges? Merging every 6 segments in pipeline and flushing tail (?) 
It is reasonable that you got "too many store files" then. It should not happen with composite snapshot. 
In average, every 4 in-memory-flushes there need to be flush-to-disk. Thus if THRESHOLD_PIPELINE_SEGMENTS is higher than 5, the merges should be rare, unless the entire system is in stress.

bq. The one thing that could be a problem is that when we have scans then we need to scan 10 segments

This JIRA is intended to provide a *mechanism of composite snapshot* without *optimizing the THRESHOLD_PIPELINE_SEGMENTS*. Under HBASE-16417, Eshcar is running experiments with infinite THRESHOLD_PIPELINE_SEGMENTS. We want to set THRESHOLD_PIPELINE_SEGMENTS to be infinite here if it doesn't cause any performance degradation. Then under HBASE-16417 we should come with really optimal policy, which is going to play with all the parameters.

bq. What prompted you to ensure that flushing the entire pipeline is better than flushing only the tail as you were doing earlier? I think our concern was more on flusing tail only will create lot of small files mainly. Do you observe anyother thing when flushing only tail?

Initially, with flattening only, we had too many open files, as you saw it yourself. When we introduced merge, you had reported some GC problems due to too many small indexes floating around. Additionally without composite snapshot the CompositeMemStore is never cleared upon single flush-to-disk, unless its active segment is empty since the previous flush-to-disk. Pay attention that without composite snapshot, upon flush-to-disk request you are pushing active to the pipeline and flushing the pipeline's tail only. So active is not flushed, unless it is empty. Thus in order to flush the entire CompositeMemStore to disk you need multiple flushes resulting in multiple files on disk, which is not desirable. So indeed the idea of truly emptying the store upon flush-to-disk looks good to us.

Thanks..
When we were commenting abt flushing all segments at flush time, we were also meaning to do it in one go. Like having a composite segment for snapshot so that we can do flush in one go.  Thanks for the continued effort.

Hi [~anoop.hbase],

Thanks for your review and comments! 
I understand your concern that CompositeImmutableSegment is not truly some new type of Segment, but actually a wrap around a list of ImmutableSegments. However, this way we can (in majority of cases) encapsulate the composition of segments inside the snapshot. The CompactingMemStore (or any MemStore) should not be aware how exactly snapshot is implemented. I know this is not always true, and this is due to getCellSet(), because to create a single CellSet out of N segments will be too costly. But it would be wrong, to not to encapsulate at all just because we cannot encapsulate it always.

So what you suggest is just to define snapshot as a List<ImmutableSegment> in the CompactingMemStore and then to deal with this list in the memstore code?
We believe it would be a bad engineering practice.
Or do I understand you wrongly?

IMO also having  an extension of ImmutableSegment, like COmpositeImmutableSegment is ideal and perfect..   But then it has to act like a Segment. But we dont. At usage places, we rely on getter to retrieve all individual ImmutableSegments..  So what I was wondering is  List<ImmutableSegment> way will be better than this..  Am not saying List is good..  But better :-)
getCellSet() ideally why an ImmutableSegment has to expose this?  May be after some other clean up we will be able to do this Composite way.
So I will leave it to you all.. If all others feel it is ok, am not opposing it..  I can work on that later to make the CompositeImmutableSegment to be a real Segment.. (Or Ram or any of you if you wish)

It would be wrong to move the responsibility for the list of segments to memstore. Memstore should not be aware of this.
The method getAllSegments() is required since memstore has a public method which returns list of all segments.

The CompositeSegment is an implementation of the [composite pattern|https://en.wikipedia.org/wiki/Composite_pattern] where ImmutableSegment is the component and CompositeSegment is the composite which inherits from component and has a collection of components.
To make this pattern complete we need a leaf. 
This means making ImmutableSegment an abstract class, add LeafSegment class to inherit from ImmutableSegment. All common code will be in ImmutableSegment, while LeafSegment and CompositeSegment implement different behaviour.
Then we can also make the adjustments in SegmentFactory so it creates either CompositeSegment or LeafSegment based on the context and parameters (list or a single segment).

The use of getAllSegments() within the method getNextRow() is indeed cumbersome  but this is due to historical reasons which can be fixed in a different Jira. Anyway getAllSegments() method is needed and will not be removed.


Am not sure why the current way is problematic. The only thing is that cellSet will be null in this impl. And where ever we have the need for cellSet I think the Composite impl is not going to use it directly. So it is fine IMHO.
If getCellSet() is the problem then I think it can be easily avoided because the only place it is exposed in the Memstore and its subclasses is in getNextRow() and that is only for test cases. Rest if you see it is only used in Segments and in subclasses for which we don't need that getter and directly we could access the cellSet in its subclasses.

Good day everybody! :-)

I think the way it is implemented now is quite OK. However I am going to publish the new patch today where CompositeImmutableSegment is going to work (and has interfaces) which is even more close to the Segment. 
Let take a look on it soon and you will tell me your opinion then. I think we are quite close to an optimal solution and it is going to be good! :)

Hey!

I think that with the last patch (V04) there should be no concerns at all. CompositeImmutableSegment works strictly according to the Composite Design Pattern. CompositeImmutableSegment lets memstores treat individual immutable segment and compositions of segments uniformly. The getAllSegments() is used only in the tests and marked as visible for tests. For me it looks really smooth :) Please take a look! Let us finish with it, we have many other things to do here! :)

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 12s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 4 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 2m 45s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 35s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 43s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 40s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 27s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 40s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 35s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 35s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 43s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 14s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 25m 14s {color} | {color:green} Patch does not cause any errors with Hadoop 2.6.1 2.6.2 2.6.3 2.6.4 2.6.5 2.7.1 2.7.2 2.7.3 or 3.0.0-alpha1. {color} |
| {color:red}-1{color} | {color:red} findbugs {color} | {color:red} 1m 49s {color} | {color:red} hbase-server generated 1 new + 0 unchanged - 0 fixed = 1 total (was 0) {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 26s {color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 109m 12s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 17s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 146m 7s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| FindBugs | module:hbase-server |
|  |  Synchronization on CompactionPipeline.pipeline in futile attempt to guard it  At CompactionPipeline.java:attempt to guard it  At CompactionPipeline.java:[line 85] |
| Failed junit tests | hadoop.hbase.regionserver.TestPerColumnFamilyFlush |
|   | hadoop.hbase.client.TestBlockEvictionFromClient |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.12.3 Server=1.12.3 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12840876/HBASE-17081-V04.patch |
| JIRA Issue | HBASE-17081 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux 3b79da65e5eb 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / 7bcbac9 |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
| findbugs | https://builds.apache.org/job/PreCommit-HBASE-Build/4683/artifact/patchprocess/new-findbugs-hbase-server.html |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/4683/artifact/patchprocess/patch-unit-hbase-server.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-HBASE-Build/4683/artifact/patchprocess/patch-unit-hbase-server.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/4683/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/4683/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



Looking at patch:

215	  public List<KeyValueScanner> getScanners(long readPoint, long order) {
216	    List<KeyValueScanner> scanners = new ArrayList<KeyValueScanner>(this.pipeline.size());
217	    for (Segment segment : this.pipeline) {
218	      scanners.add(segment.getScanner(readPoint, order));
219	      order--;
220	    }
221	    return scanners;
222	  }

How does order work in the above? Should we stop if it goes negative? Can it go negative? We do the above pattern in another place at least in the patch.


Change

70	  public List<Segment> getAllSegments() {
71	    List<Segment> res = new LinkedList<Segment>(segments);
72	    return res;
73	  }

to return new LinkedList<Segment>(segments);  No need to park in the local res variable (This is done in a few places in the patch).

Why KeyValueScanner instead of SegmentScanner? CellScanner?

If we pass true for empty in below though all is zero, is it not-empty?

40	  public MemstoreSize(boolean isEmpty) {
41	    dataSize = 0;
42	    heapOverhead = 0;
43	    this.isEmpty = isEmpty;
44	  }

Should emptyness be derivative of dataSize?

In other contstructor, what if the passed in dataSize is empty, is the size not empty?

this.dataSize = dataSize;

Remove these rather than comment them out:

213	//    assertTrue("\n<<< The memstore scanners with one snapshot are: \n" + memstorescanners
214	//        + "\n",false);
215	


Otherwise, patch looks good to me. What you fellows thing, [~ram_krish] and [~anoop.hbase]?









Thank you [~stack] for your review! Hereby are my answers.

bq. How does order work in the above? Should we stop if it goes negative? Can it go negative? We do the above pattern in another place at least in the patch.

So each scanner in the list of scanners should have an order number according to which one has the newer data. For example, the active segment has the highest order (biggest number) because its data is the freshest one. Then pipeline segments have the decreasing order from head to tail. If snapshot is represented as a single segment its order is 0. If this is a composite snapshot, then again the decreasing order from head to tail. The order shouldn't get to negative as it is initialized exactly according to the amount of segments in the memstore. However, I am adding a check for that to me on the safe side. This is not something new, we had this loop with decreasing order when dealing with pipeline segments before this patch.

bq. to return new LinkedList<Segment>(segments); No need to park in the local res variable (This is done in a few places in the patch).

Fixed. In multiple places.

bq. Why KeyValueScanner instead of SegmentScanner? CellScanner?

Just to make MemStoreScanner and SegmentScanner to be from the same type as we are now interchange between them. I have now taken a look on CellScanner interface and it is much more lean interface than KeyValueScanner.

Ok. Now you mention it, I remember what 'order' is... the Segment ordinal. Maybe add a note or javadoc explaining or pointing at explanation.

CellScanner is good because it is lean. That is also why it might be insufficient.

Thanks.

[~stack], thank you! All your comments were applied. I'll publish new patch later today.

[~ram_krish] and [~anoop.hbase], thank you as well! I have addressed all your comments in the RB.
I know you are not getting notifications upon my answer/comments on RB. I do not know how to fix this. Please take this as a notification.
New patch is coming.

[~ram_krish], I am copying your concern from the RB here, so we can answer one another in the real time :)

bq. Ok now i got it. Actually in my opinion you could just call segment.getScanner only. That is enough.

This is exactly what I am doing. In Line 88, I am calling segment.getScanner on each segment in the composite segment, then combining a MemStoreScanner from those scanners.

bq. Once you return MemstoreScanner nothing is going to change and you don't need this flushingScanner. Pls do consider changing this.

I need flushingScanner in order to close it later. Or do you mean the close() need to be called anywhere else, but not here?

bq. Also for the actual bug I think you can raise a JIRA to fix it so that we can unify all. There is no need for getKEyvalueScanner itself and can be removed. If you are busy let me know I can fix it for you.

I would prefer to leave this JIRA as is (and to commit it asap :) ) and if you can take it please fix the snapshot scanner count everywhere.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 14s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 4 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 3m 12s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 42s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 47s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 15s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 51s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 28s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 45s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 40s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 40s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 45s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 15s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 29m 27s {color} | {color:green} Patch does not cause any errors with Hadoop 2.6.1 2.6.2 2.6.3 2.6.4 2.6.5 2.7.1 2.7.2 2.7.3 or 3.0.0-alpha1. {color} |
| {color:red}-1{color} | {color:red} findbugs {color} | {color:red} 2m 4s {color} | {color:red} hbase-server generated 1 new + 0 unchanged - 0 fixed = 1 total (was 0) {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 32s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 95m 32s {color} | {color:green} hbase-server in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 14s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 138m 4s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| FindBugs | module:hbase-server |
|  |  Synchronization on CompactionPipeline.pipeline in futile attempt to guard it  At CompactionPipeline.java:attempt to guard it  At CompactionPipeline.java:[line 85] |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.12.3 Server=1.12.3 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12841283/HBASE-17081-V05.patch |
| JIRA Issue | HBASE-17081 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux ccf0a38dc0ba 3.13.0-93-generic #140-Ubuntu SMP Mon Jul 18 21:21:05 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / 540ede3 |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
| findbugs | https://builds.apache.org/job/PreCommit-HBASE-Build/4746/artifact/patchprocess/new-findbugs-hbase-server.html |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/4746/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/4746/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



bq.I would prefer to leave this JIRA as is (and to commit it asap  ) and if you can take it please fix the snapshot scanner count everywhere.
Ok can do this in follow up JIRA. I will leave to other to review before this get committed.

[~anoop.hbase] and [~ram_krish] You ok w/ commit? I am but after doing my review saw your comments up on rb which seem more substantial than mine. Thanks.

Am ok with the commit. The clean up of getKVScanner can be done in another JIRA. ANd I can take it up. Rest am fine. 

Sorry for the delay.. Am doing a final pass over RB..  Have some minor comments/Qs..  Ya many of the items we can do in follow up issues.  Will complete today.

Hi All!

There happened some delay here due to traveling to SFO and giving a small talk there about what we are doing here with memory flushes and compaction. I attach the presentation here, you might be interested to look on the last read performance graphs. Hereby (and on RB), I attach the last (really last) patch! :-)

I have referenced all the comments in the RB. As I know you are not getting updated on my answers there, I take this to encourage you to take a look on my answers there. The important difference in the last patch is that the composite snapshot is turned to be always true (both for IC and DC). This is because we have seen a great improvement in read latencies, after combining also DC with the composite snapshot.
Any other changes can go in a different JIRA, please commit this one!

Thanks,
Anastasia

Triggered a new QA run.
Previous one (#4880) mysteriously stopped:
{code}
HBASE-17081 patch is being downloaded at Mon Dec 12 10:28:51 UTC 2016 from
  https://issues.apache.org/jira/secure/attachment/12842776/HBaseMeetupDecember2016-V02.pptx -> Downloaded
ERROR: Unsure how to process HBASE-17081.
{code}

Paste your slides up on the meetup page [~anastas]?

Published slides on the meetup page. Thanks, [~stack]!

| (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 11s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 4 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 3m 0s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 34s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 45s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 42s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 27s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 40s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 34s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 34s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 44s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 25m 19s {color} | {color:green} Patch does not cause any errors with Hadoop 2.6.1 2.6.2 2.6.3 2.6.4 2.6.5 2.7.1 2.7.2 2.7.3 or 3.0.0-alpha1. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 49s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 27s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 88m 56s {color} | {color:green} hbase-server in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 14s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 126m 7s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.12.3 Server=1.12.3 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12842871/HBASE-17081-V06.patch |
| JIRA Issue | HBASE-17081 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux 0c9e31c5ecb3 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / adb319f |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/4884/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/4884/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



*Whoo-Hoo!* *Green +1!!* :-)
[~anoop.hbase], [~ram_krish], [~stack], who is going to be the lucky one to commit the patch? :-) :-)

I can commit this if Anoop has no other comments and ready for commit.
+1 from my side.

[~anastas]

Are we going to have an if/else per flush policy

      if (compositeSnapshot) {


Can you presize the Array?

82	    LinkedList<ImmutableSegment> result = new LinkedList<ImmutableSegment>();

As said before, this is expensive... 

  private final TimeRangeTracker timeRangeTracker;

Its needed?

Skimmed the patch. LGTM. +1. Would wait on [~anoop.hbase] blessing. What follow-ons do we have?


Previous patch had a test case compilation issue. I will check with Anoop on one of his comments and after that will go for the commit.
Thanks [~saint.ack@gmail.com] for your +1.

Re/ [~stack]'s question about what's next: 
1. HBASE-17294 configuration (Eshcar) - committed, thanks [~stack]. 
2. HBASE-16851 documentation (me) - need to complete 3 blog posts: (1) user manual - complete, give or take, (2) performance eval, and (3) programmer's manual. Where should we post all those? Apache blog? 
3. HBASE-16417 (Eshcar) automated policy for figuring out whether the BASIC or the EAGER algorithm is to be used. Small refactoring the internal API for future policies. 

Independent on in-memory compaction per se: 
1. HBASE-16421 CellChunkMap implementation (Anastasia) - starting now, need to coordinate with [~anoop.hbase] and [~ram_krish]. 
2. JIRA TBD Memstore-First Get (Eshcar) - Big value demonstrated by benchmarks in HBASE-16851, we should try to implement & push before 2.0 closes. 

Sounds like a plan (smile) ?

[~stack], thank you for your comments, here are my answers:

bq. Are we going to have an if/else per flush policy

We would prefer to leave the if-else statement whether to flush everything or not. Although currently we always flushing everything (using composite snapshot). Under HBASE-16417, Eshcar is still running more experiments to find the best policy. So maybe it will be needed there. If not, it can be removed as part of HBASE-16417.

bq. Can you presize the Array?

Yes, I can presize the Array. However it would be a pity, to create now a new patch just for that. Please let me add this in using my next JIRA.

bq. As said before, this is expensive... 

TimeRangeTracker is requested by MemStoreSnapshot and is later used by the DefaultMobStoreFlusher. Maybe it can be anyhow avoided, but I didn't look so deep. As TimeRangeTracker was initially part of the snapshot, I left it there. It can be removed by another JIRA if indeed unneeded...

[~anoop.hbase], it looks like everybody are waiting for your blessing! :)


| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 13s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 4 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 2m 34s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 31s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 40s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 12s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 31s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 25s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 37s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 32s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 32s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 40s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 12s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 23m 15s {color} | {color:green} Patch does not cause any errors with Hadoop 2.6.1 2.6.2 2.6.3 2.6.4 2.6.5 2.7.1 2.7.2 2.7.3 or 3.0.0-alpha1. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 41s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 24s {color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 90m 44s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 10s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 124m 44s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.hbase.regionserver.TestHRegionWithInMemoryFlush |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.12.3 Server=1.12.3 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12843165/HBASE-15787_8.patch |
| JIRA Issue | HBASE-17081 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux ab464132823e 4.4.0-43-generic #63-Ubuntu SMP Wed Oct 12 13:48:03 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build@2/component/dev-support/hbase-personality.sh |
| git revision | master / a73b0b3 |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/4909/artifact/patchprocess/patch-unit-hbase-server.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-HBASE-Build/4909/artifact/patchprocess/patch-unit-hbase-server.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/4909/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/4909/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



I didn't submitted HBASE-15787_8.patch patch here... ?! 
Is it any error? 
[~ram_krish] did you intentionally added it here?

Oops sorry. I was having both JIRAs opened and had a server glitch and so added in a wrong one. 

Apache blog and refguide would be great places for blog and operator/dev doc.

Sorry for being late. I was out of work for last 3 days.
And +1 for the latest patch :-)

[~anastas]
I tried committing the latest patch attached here. But there are some conflicts now - may be [~eshcar]'s new patch. Could  you rebase it? I will commit after that. Thanks.

[~ram_krish], I published new patch (07) after re-base and fixing last Stack's comment. Hope it all is going to be well now.

Pushed to master. thanks for the patch [~anastas].
Thanks all for the reviews.

[~ram_krish], and everybody! Thank you so much! :)

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 12s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 3 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 2m 50s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 36s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 44s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 45s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 27s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 42s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 36s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 36s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 43s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 14s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 25m 31s {color} | {color:green} Patch does not cause any errors with Hadoop 2.6.1 2.6.2 2.6.3 2.6.4 2.6.5 2.7.1 2.7.2 2.7.3 or 3.0.0-alpha1. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 53s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 27s {color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 91m 23s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 13s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 128m 48s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.12.3 Server=1.12.3 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12843429/HBASE-17081-V07.patch |
| JIRA Issue | HBASE-17081 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux a50f78535a43 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / 401e83c |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/4933/artifact/patchprocess/patch-unit-hbase-server.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/4933/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/4933/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



[~anastas] Please take a look at the test result, seems to be related: 

Flaked tests: 
org.apache.hadoop.hbase.regionserver.TestHRegionWithInMemoryFlush.testWritesWhileScanning(org.apache.hadoop.hbase.regionserver.TestHRegionWithInMemoryFlush)
  Run 1: TestHRegionWithInMemoryFlush>TestHRegion.testWritesWhileScanning:3979 expected null, but was:<org.apache.hadoop.hbase.RegionTooBusyException: Above memstore limit, regionName=testWritesWhileScanning,,1481820962447.8fd5b513170578bb6bd9ab48e627cb19., server=unknown, memstoreSize=536883850, blockingMemStoreSize=536870912>


FAILURE: Integrated in Jenkins build HBase-Trunk_matrix #2137 (See [https://builds.apache.org/job/HBase-Trunk_matrix/2137/])
HBASE-17081 Flush the entire CompactingMemStore content to disk (ramkrishna: rev a2a7618d261bfe121f05821d89242d770cd7b7ec)
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/AbstractMemStore.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ImmutableSegment.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultMemStore.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompactionPipeline.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/DefaultMemStore.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MemStoreCompactor.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompactingMemStore.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SegmentFactory.java
* (add) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompositeImmutableSegment.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Segment.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestWalAndCompactingMemStoreFlush.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MemstoreSize.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompactingMemStore.java


If you have an addendum, we can get it in... else we can revert till fixed. Thanks [~anastas] (FYI [~ram_krish])

Reopen till we ellicit failure not related or fixed. Thanks.

Thanks [~ebortnik].
From where did you see this flaky test?
If you see the last pre commit build 
https://builds.apache.org/job/PreCommit-HBASE-Build/4933/testReport/org.apache.hadoop.hbase.regionserver/TestHRegionWithInMemoryFlush/. It seems to have passed.

And in the jenkins test result
https://builds.apache.org/job/HBase-Trunk_matrix/2137/. I could not spot any of the Large tests in the test result.
I back tracked upto build #2135 - I cannot see some of the tests in the report like TestHRegion, TestHRegionWithInMemoryFlush etc in any of them. So I think the report is not displaying the LargeTests.
[~saint.ack@gmail.com]- FYI.

You can see it in here that it fails pretty frequently: https://builds.apache.org/job/HBASE-Find-Flaky-Tests/lastSuccessfulBuild/artifact/dashboard.html



Any progress on the regression?
In HBASE-17323 we found that the failure of TestAsyncGetMultiThread relates to the patch here.

Thanks.

Busy these days so I do not have much time to help debugging the bugs directly.

In TestAsyncGetMultiThread, we will put 1000 rows to a table with 9 regions. And then use several background threads to get the values and do some split and move works. The failure is NPE when getting from a Result object which means the row is missing so I think the problem maybe the flush when splitting or moving. Hope this could help.

Thanks.

Hey,

When running regression on my machine tests TestHRegionWithInMemoryFlush and TestAsyncLogRolling are passing successfully.
Test TestAsyncGetMultiThread indeed fails on null pointer exception in the Hbase Client, but it looks to me not related to the fix suggested in this JIRA and I can hardly debug this part of the HBase code.
I will re-base once again and create a new patch hoping that the problem will be resolved in the base code.

Any other suggestion what else I can do to promote the commit?
BTW [~ram_krish], [~stack], was the previous commit finally reverted? Or was there a commit at all?

It looks like the patch is already in as I can not get a difference between my patch and the master.
Please clarify what the status is, I am bit confused. Thanks!

Hi @anastasia . I have not reverted the patch. Stack only reopened to see the failure. Am havung some fever and not active with my laptop. So expect delays in replying.

I suggest reverting the patch for now so that we can have ample time to investigate various test failures.

Agree. And as [~anastas] said above, it is not easy for her to get a difference between the current master and the new patch.
Let me revert it.

[~anastas] I've reverted the commit. Could you please try if your new patch can apply to the master cleanly now?

Thanks.



Before committing the next patch, please run TestAsyncGetMultiThread and see if it passes.
This test exposed certain bug in previous patch.

Ok. I can see that now. Thanks Stack.

bq.but it looks to me not related to the fix suggested in this JIRA and I can hardly debug this part of the HBase code.
I can help you [~anastas]. Your point is valid though because your changes are not directly on the Default memstore but may be there is a side effect or there is something that this change brings to the front.


The problem was due to HBASE-17294.
{code}
    String className = conf.get(MEMSTORE_CLASS_NAME, DefaultMemStore.class.getName());
    HColumnDescriptor.MemoryCompaction inMemoryCompaction = family.getInMemoryCompaction();
    if(inMemoryCompaction == null) {
      inMemoryCompaction = HColumnDescriptor.MemoryCompaction.valueOf(conf.get
          (CompactingMemStore.COMPACTING_MEMSTORE_TYPE_KEY,
              CompactingMemStore.COMPACTING_MEMSTORE_TYPE_DEFAULT));
    }
    switch (inMemoryCompaction) {
      case BASIC :
      case EAGER :
        className = CompactingMemStore.class.getName();
        this.memstore = new CompactingMemStore(conf, this.comparator, this,
            this.getHRegion().getRegionServicesForStores(), inMemoryCompaction);
        break;
      case NONE :
      default:
          this.memstore = ReflectionUtils.instantiateWithCustomCtor(className, new Class[] {
          Configuration.class, CellComparator.class }, new Object[] { conf, this.comparator });
    }
    LOG.info("Memstore class name is " + className);
{code}
Why is that we are running with Compacting Memstore always?  Even if the family is not configured for in memory compaction. It has to be changed. This came as part of HBASE-17294.
But one good thing is that it exposes some issues with Async client, which we need to dig in.

Thanks [~ram_krish] for discovering. 

Compacting Memstore (basic configuration) became default as of HBASE-17294, the documentation indicates that. The family can be configured for a different type of in-memory compaction (NONE/EAGER). So I guess the issue is with the other test that the nee configuration exposed. 

The commit should be re-applied. The problem has been exposed by the new configuration HBASE-17294 as [~ram_krish] indicated.  Maybe a new Jira should be filed. 

I see. Compacting memstore is now the default? I could see that [~eshcar] wanted BASIC as default and hence she has explicitly set the type to NONE in other testcases. Then either as Anoop says we should make NONE as default (which I think was not the intent of Compacting memstore) or we should have a config for enabling globally and then have a default config if there needs to be one.

We have filed a new JIRA HBASE-17333.

I was not reading the other jira discussion fully then.  I dont think we can make COmpacting memstore as default now.. We are not yet reached to that state. -1 for that

Just some clarification w.r.t. which memstore is running:
First we look at the in_memory_compaction property at the cf level (no default choice here);
if it is not set we look at the global properties set by hbase-site.xml, with Basic compaction being the default (as agreed);
if the property is set to None then we set memstore to the class defined by memstore_class_name, with default memstore being the default.

[~anoop.hbase] why do you say we are not ready for basic compaction being the default?
This is the intention for 2.0, and all tests seem  to pass (at least they did).
If there is still some problem with a specific test that requires being run with no compaction, this can be easily set with 
{code}
    conf.set(CompactingMemStore.COMPACTING_MEMSTORE_TYPE_KEY,
        String.valueOf(HColumnDescriptor.MemoryCompaction.NONE));
{code}

FAILURE: Integrated in Jenkins build HBase-Trunk_matrix #2158 (See [https://builds.apache.org/job/HBase-Trunk_matrix/2158/])
Revert "HBASE-17081 Flush the entire CompactingMemStore content to disk (zhangduo: rev d53f012bb750a9a5970a33a29b685fa078e3568c)
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompactingMemStore.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultMemStore.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ImmutableSegment.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestWalAndCompactingMemStoreFlush.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SegmentFactory.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Segment.java
* (delete) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompositeImmutableSegment.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/DefaultMemStore.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MemstoreSize.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompactingMemStore.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompactionPipeline.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/AbstractMemStore.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MemStoreCompactor.java


bq.If there is still some problem with a specific test that requires being run with no compaction, t
This is one simple reason why we think we cannot enable by default. Also enabling BASIC by default for all cases am not sure if that is what is going to happen when there is really no duplicates in the actual user workload.

Specific test can be corrected with this config. But what if this test fail indicate some issue?  Am not saying there might be issues but what if?
HBASE-17294 says this is an easier way for configuring the in memory compaction feature.. Ya the release notes contain basic being the default.. What I got is when Compacting memstore in place, basic is the default. But it seems even in any case compacting memstore is in place as default now.  

That will be a big change and better do it in its own jira. Single test failing with default config is not acceptable.  also it is been asked abt whether we ran IT tests with this. (I forgot where it was asked).. Before truning ON this feature as the default, have to consider all these.

bq.First we look at the in_memory_compaction property at the cf level (no default choice here);
You refer to which config/setter here?  We had a HCD boolean based setter to enable compacting memstore.  Now that is removed against this new Enum type setter no? Am I missing some thing?

bq. enabling BASIC by default for all cases am not sure if that is what is going to happen when there is really no duplicates in the actual user workload

Basic does not eliminate duplication. It flattens to cell array map and flushes all segments to disk in one cut.

bq. But what if this test fail indicate some issue?
Obviously if there is a bug in a test then it needs to be fixed. 
In the cases that I found the test failed due to assertion failure. For example, when expecting specific number of items or bytes either in memory or on disk. Since basic compaction behaves differently the layout in memory or on disk is different and therefore the assertion fails. In these cases I suggest to set compaction to none, as this was the initial intention of the test.

bq. But it seems even in any case compacting memstore is in place as default now.

Since Basic is the default, compacting memstore is the default. But as explained this could be set by setting one of the properties above.
bq. You refer to which config/setter here? We had a HCD boolean based setter to enable compacting memstore. Now that is removed against this new Enum type setter no? Am I missing some thing?

Yes. The boolean flag was replaced with an enum NONE | BASIC | EAGER. 

I dont mean bug in test.. I mean still an issue with the Compacting memstore..  Am not saying we have.  But a failure in a test when Compacting memstore is used, suggest  us to have a look. But what you say is that make the test  to pass by configuring the NONE as type.  But still users will get default as BASIC.   Memstore is a very key component.  Changing the default impl of that should not be done this way.  (As a side effect of another jira).. That jira not at all telling abt change in memstore impl is what its intent. Again saying am clearly -1 for changing the default memstore impl this way.  We can change it..  In fact better we change it in 2.0.   But not at this point.

[~anoop.hbase], indeed neither the current jira nor HBASE-17294 were intended to discuss the configuration. It has been discussed extensively in HBASE-16851. The current jira is about the flush of the full pipeline to disk, which is a basic mechanism, and IMHO there is no reason to revert it. 

If you are suggesting to re-open the decision to set the default for in-memory compaction, please substantiate your concerns, and how you intend to resolve them. We conducted a very thorough and transparent benchmarking process, and published the results. BASIC compaction showed no side effects, only advantages. EAGER compaction can indeed pose tradeoffs alongside larger gains, that's why it is not default. In any case, appreciate if we could run that discussion at HBASE-16851. It's very hard to track discussions when the jira is changing all the time. Definitely, we are -1 for reverting the change in HBASE-17294 without discussing the implications. 

The intent behind introducing the default is that otherwise nobody would use the option, as [~stack] rightfully noted. That's why we invested in testing, benchmarking, and simplicity of configuration so much. We are prepared to handle the issues that arise with this change in behavior. We value your perspective a lot, however let's build the discussion around what gaps exist on the ground, and how they can be mediate them without killing the feature. Thanks [~anoop.hbase].  

[~ebortnik]
Considering that exposing this as the default MS impl and we get test failures I think it is not right to reapply the patch unless the problem is solved. Thanks.

1.  The comments I made here as replies to comments added here.  Am ok move the discussion to  correct place.
2. I agree to the point of making CompactingMemstore as default for 2.0.  And I also back it.  But my only point is the way the change was made. This is a big impacting change and should have been done in a special jira titled like "Make Compacting memstore as default for 2.0".. That will bring attention of many devs and users to that jira.  But this is done in a jira where the jira title/decription not at all say abt such a big change.  We noticed this change only after seeing some tests to fail.  There also u can see no one was sure.  
3. After compacting memstore being made default, seeing a test fail is enough to revert the patch. I did not do the commit of that patch and no going to revert also. In fact Ram raised another bug and provided patch so as to make DefaultMemstore as the default back again.
4. We are trying to help in all way possible either by code reviews/tests/patches.  And then no point in thinking that am trying to kill the feature. Then why should I invest this much of my time?

Good Day Amazing Team!

I think quite a big mess is going here and I didn’t say anything about it yet! How come? :)
No big problems, everything is under control, we will manage it all greatly! :)

So let insert some order here and redirect the discussions to the correct JIRAs as all recent discussions are not related to this JIRA.
Here are the facts:
1. Making the default MemStore to be CompactingMemStore with the BASIC mode was *not* introduced in this JIRA, but in HBASE-17294. At least, denying the commit of this JIRA won’t help you to resolve the problem of BASIC CompactingMemStore being the default.

As a (big) side node, BASIC CompactingMemStore means flattening of the immutable segments and flushing everything to disk upon snapshot request. No merges and no compactions are made with BASIC CompactingMemStore. So it works similarly to DefaultMemStore just little better. The decision about that was pronounced in HBASE-16851 and then implemented in HBASE-17294. I agree with Anoop that it wasn’t pronounced loudly enough so may be some people missed those two JIRAs. So let us return to those JIRAs and discuss it all there. At least, this JIRA is not about that. Now continuing with the facts:

2. Let assume that the problem with TestAsyncGetMultiThread was introduced with this JIRA and not with HBASE-17294 and not in any other commit. We don’t have clear evidences for that, but let assume it is so. So after this JIRA’s commit was reverted everything should be fine, isn’t it? We (with your help) are going to debug it and then resubmit the patch.
3. HBASE-17333 was opened in order to revert the changes done by HBASE-17294 and make the DefaultMemStore default again. First, it can be done easily just by changing two lines in the switch that Ram presented above. This will bring the situation to as it was prior to HBASE-17294. If you want to change the configuration to work with some other property in hbase-site let discuss is prior to your commit.

So bottom line, this patch is reverted, no tests fail, we are all good so far. Let continue to discuss all the issues on the related JIRAs. 
And of course big thanks to all those involved in the current investigation. 

Happy Holidays!
Anastasia

Anastasia:
Thanks for your patience.

I have run TestAsyncGetMultiThread 6 times based on d53f012bb750a9a5970a33a29b685fa078e3568c (i.e. without your patch).
They all passed.

So it is very likely that your patch introduced the regression (in TestHRegion\* as well) 

bq. No big problems, everything is under control, we will manage it all greatly! 

Agree.

bq.  I agree with Anoop that it wasn’t pronounced loudly enough so may be some people missed those two JIRAs. So let us return to those JIRAs and discuss it all there.

Agree. Lets fix.

bq. We (with your help) are going to debug it and then resubmit the patch.

I can help.

Thanks for the nice summary.
Ya seem TestAsyncGetMultiThread  fail is not by this patch. It seems to be because we changed the default memstore to be CompactingMS.
But TestHRegionWithInMemoryFlush seems failing?  That should be related to this patch.  Pls run all tests with applying ur patch. So am fine committing this patch again (if no new test fails).  Lets handle the other issue in the jira that Ram raised/new one today raised.


bq. ...and IMHO there is no reason to revert it.

[~ebortnik] Edward. FYI. Devs are perfectly within-their-rights reverting patches that introduce test failures. Failing tests hinder progress as devs need to track if their patch introduced the new failures. That this patch caused UT failures indirectly and that perhaps the dev could have done the revert in a less radical way is not for them to figure; the burden is upon the contributor whose patch is causing failing tests.

Sometimes it takes a few cycles of revert/commit to land an awkward patch. No harm done.

Actually I can see related test failure in QA here with the patch that I committed. Infact I did not see that report because I actually went for the commit with patch - V06 and was waiting for final +1 from Anoop. And since when I wanted to commit V07 did not apply cleanly I just waited for the updated patch and just commited. So had I seen the QA build of it I would not have committed it. My bad. Did not know that the rebase on top of HBASE-17294 will have this implication. I was just thinking it was a simple rebase. 
bq.Ya seem TestAsyncGetMultiThread fail is not by this patch. It seems to be because we changed the default memstore to be CompactingMS.
Yes.
bq.TestHRegionWithInMemoryFlush seems failing? 
This again has got something to do with it I believe. Because V06 came clean. 

If after HBASE-17333, all tests can pass this patch,  pls commit again. +1 for that

All - 

Thanks for chiming in. Apologies for possible misunderstanding - distributed dev processes charge their toll :) . We are starting to suffer from the fact that the Compacting Memstore project split into many small jira's, and it's hard to track the full picture. 

No problem at all with reverting specific patches if potential destabilization suspected. My concern was scrapping or delaying the whole project without a good reason, hence the suggestion to improve the discussion process and manage it in a well-defined space. 

Might be that the instability follows from the reverse order in which this Jira and HBASE-17294 were checked in. The latter was supposed to be the concluding chord, finalizing the configuration syntax and setting the new default. Although we cannot reproduce the failures in problematic tests locally, how about the following plan: 
1. Revert both HBASE-17081 and HBASE-17294, and see if the regression is stable. 
2. Rebase and checkin HBASE-17081. 
3. Rebase and checkin HBASE-17294. 
4. Move the external documentation to HBASE-14918 (top-level JIRA), to improve the visibility of the new definitions. 

Thanks, again, for all the assistance identifying the problems so far. 

[~anoop.hbase], [~ram_krish], TestAsyncGetMultiThread doesn't fail with HBASE-17294 only. HBASE-17294 was committed after it passed all tests including TestAsyncGetMultiThread. Also now when Eshcar is trying TestAsyncGetMultiThread on her patch solely it passes. So it must be some specific interleaving between HBASE-17294 and HBASE-17081 that causes the problem.

[~yuzhihong@gmail.com], when you see TestAsyncGetMultiThread passing without my patch is it with HBASE-17294 or without?



bq.  HBASE-17294 was committed after it passed all tests including TestAsyncGetMultiThread. 

Yep. All was good at time of the HBASE-17294 commit but with HBASE-17081 it fails. We need both HBASE-17081 and HBASE-17294 in so lets figure what the issue is. TestAsyncGetMultiThread seems to bring on the failure about 50% of the time.

bq. when you see TestAsyncGetMultiThread passing without my patch is it with HBASE-17294 or without

The commit hash I cited would answer the above question: HBASE-17294 was in.

I think before checking in the next patch for this JIRA, regardless of which mode is the default, we should make sure that TestAsyncGetMultiThread passes 100% of the time.
This can be done by parameterizing TestAsyncGetMultiThread with both NONE and BASIC modes.

So shall we commit this patch again and close this issue?
[~anoopsamjohn], [~saint.ack@gmail.com], [~tedyu]?

Hey!

We found the problem with TestAsyncGetMultiThread. This was a rare concurrent scenario where the segments were hidden for a very very short moment. When requested to flush to disk the segments are first removed from the pipeline to a local variable, then added to the snapshot. So there is a short moment when CompactingMemStore's segments are not seen to the scanners/getters. We created HBASE-17373 to resolve this issue and also to add 3 variants of TestAsyncGetMultiThread test for NONE/BASIC/EAGER MemStores. 

Anyway this problem wasn't introduced by this JIRA and TestAsyncGetMultiThread is not failing now when after HBASE-17333 the default was set to be NONE. Please consider committing the latest patch once again. I think the re-base is yet not necessary and the last patch can still be committed. Please contact me if re-base is still needed.

I think the fix for HBASE-17373 should be committed first - otherwise we would see TestAsyncGetMultiThread fail again.

As I explained, you won't see TestAsyncGetMultiThread fail again, as you do not see TestAsyncGetMultiThread failing now. This JIRA completely doesn't change the status of the TestAsyncGetMultiThread.

I agree to [~anastas]. Now what about TestHRegionWithInMemoryFlush - that was also flakey. Again due to HBASE-17373?

Thank you [~ram_krish]. Yes, TestHRegionWithInMemoryFlush should be the same problem. Currently I run TestHRegionWithInMemoryFlush 4 times and it didn't fail, but if it fails it should be the same problem.

Whoever commits this patch, please watch TestHRegion\* in subsequent QA runs.

I still think fix for HBASE-17373 should be committed first which should stabilize test result.

So is it possible for you to add the fix of HBASE-17373 as part of this JIRA only? As this is not committed we could use update the patch here as it was having some issues?

This JIRA is quite an old JIRA with quite a big fix. 
HBASE-17373 should also be not small, as we plan to improve the testing under HBASE-17373 as well.
HBASE-17081 and HBASE-17373 are unrelated.
Why to put it all together?

As we have seen many times, it is better to treat separate issues separately.

I have just tried to submit the newly re-based patch...

In order to see Hadoop QA results should I change the status back to to 'Patch Available'?

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 14s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 3 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 3m 32s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 41s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 45s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 18s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 51s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 27s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 40s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 34s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 34s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 45s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 27m 21s {color} | {color:green} Patch does not cause any errors with Hadoop 2.6.1 2.6.2 2.6.3 2.6.4 2.6.5 2.7.1 2.7.2 2.7.3 or 3.0.0-alpha1. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 2m 3s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 27s {color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 97m 5s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 15s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 137m 34s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.11.2 Server=1.11.2 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12844679/HBASE-17081-V10.patch |
| JIRA Issue | HBASE-17081 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux 2da1680ec94c 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / 8fa5b0b |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/5048/artifact/patchprocess/patch-unit-hbase-server.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/5048/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/5048/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



There is one failure. But the tests TestAsyncTableGetMultiThreaded and TestHRegionWithInMemoryFlush are passing.

Pushed the V10 patch once again to the trunk. Thanks [~anastas].

SUCCESS: Integrated in Jenkins build HBase-Trunk_matrix #2203 (See [https://builds.apache.org/job/HBase-Trunk_matrix/2203/])
HBASE-17081 [Recommit]Flush the entire CompactingMemStore content to (ramkrishna: rev 463ffa792a23799d8cf2406321d1c8a3acacded1)
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompactionPipeline.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Segment.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SegmentFactory.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompactingMemStore.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/DefaultMemStore.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MemstoreSize.java
* (add) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompositeImmutableSegment.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MemStoreCompactor.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompactingMemStore.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestWalAndCompactingMemStoreFlush.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/AbstractMemStore.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultMemStore.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ImmutableSegment.java


The QA build after the commit looks green. So all fine now I believe.

Thanks!

TestHRegionWithInMemoryFlush still fails occasionally.
This is tracked by HBASE-17379

Reopen due to reproducible test failure in TestHRegionWithInMemoryFlush

Reverted so that we can have ample time figuring how to deal with the concurrency issue exposed by TestHRegionWithInMemoryFlush

FAILURE: Integrated in Jenkins build HBase-Trunk_matrix #2217 (See [https://builds.apache.org/job/HBase-Trunk_matrix/2217/])
HBASE-17081 Flush the entire CompactingMemStore content to disk - revert (tedyu: rev 79e5efd35c9f3660b8c58364f25816581fb84d7a)
* (delete) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompositeImmutableSegment.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MemstoreSize.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/AbstractMemStore.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestWalAndCompactingMemStoreFlush.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompactingMemStore.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDefaultMemStore.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompactionPipeline.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/DefaultMemStore.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompactingMemStore.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MemStoreCompactor.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ImmutableSegment.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Segment.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SegmentFactory.java


Looks like there is non-trivial amount of work on top of the latest patch.

How about creating HBASE-17081 branch and commit the latest patch there ?
Follow on work can be reviewed and committed afterwards.

When we are confident for the final solution, we can merge the branch to master.

Hey Everybody,

I was out for about ten days due to hard personal reasons, I wasn’t connected to what was going on here with the compacting pipeline synchronization and etc. 
Now I am back to business.

I am not yet familiar with all the details, but I read all the JIRAs briefly and I have a sense of what is going on.
I see that HBASE-17081 was taken out again and I think that again it was wrong decision to do.
The problem of synchronization of getScanners() in CompactionPipeline indeed exist, but 17081 just opened a bigger problem of synch issues in CompactionPipeline which is now being fixed under HBASE-17434.

I want to stress that *we need HBASE-17081 in!*
We have seen *tremendous performance difference* in the performance, when we working with and without CompositeSnapshot! 
This is the game changer! 
The nice graphs you have seen in the attached presentation (50% improvement in the median in the read latency(!)) are so nice only when with composite snapshot.

The two times this commit was reverted the revert could be avoided.
But anyway we are where we are and I wasn’t there on time to defend 17081.
Anyway, currently I do not want to compete with re-bases and concurrent changes of the Compaction Pipeline done under HBASE-17434.
Currently I am taking my hands of composite snapshot and I will try to return after HBASE-17434 will be in.
No need to take it into any separate branch.

Now, as we know the compacting pipeline synchronization issue, let us get its fix in first and then apply this patch.. U might need a rebase then :-(  I know it is hard as the patch size here is big.
For the compacting pipeline synchronization issue, there are 2 jiras and patches there.  Which one is the correct one?  Lets aim at getting that fix in..  I dont know which jira to look at.!

I started working on HBASE-17379 to fix the synchronization issue around Xmas time.
I have gone through several iterations to make TestHRegionWithInMemoryFlush pass (over 1000 iterations have been run across the different patches).
I think my patch is cleaner.
Please review.

As [~anoop.hbase] has mentioned I see both HBASE-17434 and HBASE-17379 are trying to improve the synchronization of the CompactionPipeline.
I am going to comment on each of them separately, but without entering into the details of each of the solutions, it is clear that such a "competition" is not a healthy way to move toward our mutual goal which is *fast and correct HBase*.
We are all very valuable engineers and each can code some kind of solution that will work. Let us join forces on one JIRA and make its solution acceptable on each of us.

Generally, just because Eshcar has written the CompactionPipeline code in the first place, and she is very much aware about all CompactingMemStore synchronization invariants I would take her solution as a base and I would make it till the satisfaction of all our concerns. Her code is explained and open in the review board. We are here to review.

This is just my opinion of course, but this is how I see it from a side.

Published new patch updated on top of all recent CompactionPipeline (and other) changes. The patch can also found on the same review board. Please take a look.

This is rebased patch after the CompactionPipeline fixes right?  No other logic change or so.? If so +1 for commit after QA report..
Did u run the previous failed tests many times?


Yes, this is rebased. I run the tests 4-5 times locally and they were OK. But some times QA shows results different from what I see on my machine, so let's see...

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 14s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red} 0m 0s {color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 2m 49s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 35s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 44s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 44s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 27s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 40s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 35s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 35s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 44s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 25m 30s {color} | {color:green} Patch does not cause any errors with Hadoop 2.6.1 2.6.2 2.6.3 2.6.4 2.6.5 2.7.1 2.7.2 2.7.3 or 3.0.0-alpha1. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 49s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 27s {color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 86m 43s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 15s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 124m 1s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.hbase.regionserver.TestHRegionWithInMemoryFlush |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.12.3 Server=1.12.3 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12847534/HBASE-17081-V13.patch |
| JIRA Issue | HBASE-17081 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux 7fd17a6fc698 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / 4cb09a4 |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/5275/artifact/patchprocess/patch-unit-hbase-server.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-HBASE-Build/5275/artifact/patchprocess/patch-unit-hbase-server.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/5275/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/5275/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



Created one more patch after another re-base and fixing all review comments.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 12s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red} 0m 0s {color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 3m 3s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 36s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 45s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 44s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 27s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 39s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 35s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 35s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 45s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 25m 46s {color} | {color:green} Patch does not cause any errors with Hadoop 2.6.1 2.6.2 2.6.3 2.6.4 2.6.5 2.7.1 2.7.2 2.7.3 or 3.0.0-alpha1. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 50s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 26s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 83m 11s {color} | {color:green} hbase-server in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 15s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 120m 58s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.12.3 Server=1.12.3 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12847625/HBASE-17081-V14.patch |
| JIRA Issue | HBASE-17081 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux cb66ce12bc1f 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / 4cb09a4 |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/5278/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/5278/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



What is there in the updated patch now. Was about to check it and saw _v13 had caused a test case issue. 

_v13 was out of sync with trunk (QA ran 1 day after submission). Rebase solved the problem. 

Because CompositeSnapshot is now "on" by default, all the previous tests are actually now working with CompositeSnapshot and testing it. However, because the QA was complaining, I added a test working with previous way of snapshot, meaning flushing only the tail of the compacting pipeline to the disk. The updated patch is attached (V15). 

| (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 10s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 2m 53s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 35s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 45s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 45s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 32s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 41s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 34s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 34s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 46s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 14s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 25m 54s {color} | {color:green} Patch does not cause any errors with Hadoop 2.6.1 2.6.2 2.6.3 2.6.4 2.6.5 2.7.1 2.7.2 2.7.3 or 3.0.0-alpha1. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 52s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 28s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 83m 25s {color} | {color:green} hbase-server in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 15s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 121m 21s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.12.3 Server=1.12.3 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12847770/HBASE-17081-V15.patch |
| JIRA Issue | HBASE-17081 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux f67f10abaff2 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / 9b38c1a |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/5294/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/5294/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



OK, at least the QA looks good. Please consider to commit.

+1 for committing :)

+1

One minor comment, in CompositeImmutableSegment  see if we can unify getSnapshotScanner and getScanner by passing the corresponding readPt and order. Because both gets created on the list of segments only?
[~ted_yu], [~saint.ack@gmail.com] any other comments before we commit this?

Will commit this unless objections. [~anastas] -  you will fix this minor comment in this JIRA?

This is what will commit. Just unified getScanner and getSnapshotScanner in CompositeImmutableSegment passing Long.MAX_VALUE for order and readpt.

Pushed again to master. Thanks all for the reviews and [~anastas] for reworking and rebasing this patch.

[~ram_krish], thank you sooooo much! I am fine with your final fix. Really hope we are done with this long saga.... :)

FAILURE: Integrated in Jenkins build HBase-Trunk_matrix #2340 (See [https://builds.apache.org/job/HBase-Trunk_matrix/2340/])
HBASE-17081 Flush the entire CompactingMemStore content to disk - (ramkrishna: rev b779143fdcfb1ae3bfe04f2434d6ca3d5f11b587)
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Segment.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompactingMemStore.java
* (add) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompositeImmutableSegment.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MemstoreSize.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestWalAndCompactingMemStoreFlush.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompactionPipeline.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SegmentFactory.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ImmutableSegment.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MemStoreCompactor.java


