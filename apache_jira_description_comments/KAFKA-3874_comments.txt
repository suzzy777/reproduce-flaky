Seems like other test cases local state store was co-located with this test case and hence causing multiple over-counting. [~damianguy] Is it still possible after the latest updates? Could you take a look?

This should be fixed with the commit yesterday. I'll keep an eye on it to make sure.

[~damianguy], if it should be fixed, then feel free to close it. We can always reopen if it happens again.

Should be fixed by:
https://github.com/apache/kafka/commit/44c8308ab1a6b950c5b12386d7864881b5d052a0

I think this one is still pretty flaky. I see this (https://builds.apache.org/job/kafka-pr-jdk8-scala2.12/2032/) kind of failure a lot locally and on Jenkins.
Should we reopen this one maybe? Or add a new JIRA since the way it fails appears to have changed to:

{code}
Error Message

java.lang.AssertionError: Condition not met within timeout 30000. Expecting 3 records from topic output-topic-2 while only received 0: []
Stacktrace

java.lang.AssertionError: Condition not met within timeout 30000. Expecting 3 records from topic output-topic-2 while only received 0: []
	at org.apache.kafka.test.TestUtils.waitForCondition(TestUtils.java:257)
	at org.apache.kafka.streams.integration.utils.IntegrationTestUtils.waitUntilMinKeyValueRecordsReceived(IntegrationTestUtils.java:206)
	at org.apache.kafka.streams.integration.utils.IntegrationTestUtils.waitUntilMinKeyValueRecordsReceived(IntegrationTestUtils.java:175)
	at org.apache.kafka.streams.integration.KStreamKTableJoinIntegrationTest.shouldCountClicksPerRegion(KStreamKTableJoinIntegrationTest.java:297)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
{code}

