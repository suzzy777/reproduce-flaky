I'm going to move this out of migration blockers and into BEAM-4045. I don't think this is specifically caused by Gradle; it sounds like this test has assumptions about its execution environment which are not compatible with parallelization.

Scott, this test illustrate that gradle test setup is wrong in respect of the tests isolation. Must be fixed to ensure build is deterministic ans reliable. See the list thread about it.

Thanks, I've responded to the thread: [https://lists.apache.org/thread.html/f8c377b7a722218b28217bb11f456b5addc20a90a8ffb17b2077bf8a@%3Cdev.beam.apache.org%3E]

I recommend first debugging to understand exactly why this test fails. Perhaps Gradle's execution environment is uncovering a real issue in the code.

The first step should be to see if the test can be implemented with greater built-in isolation. This will help ensure our tests are reliable in a variety of contexts, including IDE's.

If the test can't be improved, feel free to change the Gradle test configuration for the project with a comment why it's necessary.

After some investigations, it appears to be a timing problem in the test. If we bloc until the end of the threads in metricsExecutorService before the ThreadLeakTracker rule is exectuted, then the test passes in gradle (no leaks detected). I guess we were lucky with the other build runs that the threads had time to finish before the rule gets executed.
 
I also added a blackbox test with a real pipeline with a metrics DoFn and it passes with no leaks with Romain's fix.
 
Finally I ran these 2 tests on the actual master without Romain's fix and they fail.
 
So I'll update Romain's PR and merge it.

Reopen this ticket because the timeout waiting for the shutdown of the metrics thread is too low (10s) in the test. In some cases, it is not stopped after 10s and thus appears leaking

If this is really just a timeout thing, I'm pretty happy giving this a 10 minute timeout or some other "effectively forever" amount to work around the execution environment where the test is flaky. The test seems to fail pretty regularly.

This test has failed in 9 of the past 10 builds, and has been reliably red for a while now. I'm ignoring it until it's reliable.

Thanks [~tgroh] for deactivating this flaky test while I was on holidays. FYI I had a PR ([https://github.com/apache/beam/pull/5280)] to add some logs to figure out why it is (often) failing.

This issue is P2 but has been unassigned without any comment for 60 days so it has been labeled "stale-P2". If this issue is still affecting you, we care! Please comment and remove the label. Otherwise, in 14 days the issue will be moved to P3.

Please see https://beam.apache.org/contribute/jira-priorities/ for a detailed explanation of what these priorities mean.


This issue was marked "stale-P2" and has not received a public comment in 14 days. It is now automatically moved to P3. If you are still affected by it, you can comment and move it back to P2.

This Jira ticket has a pull request attached to it, but is still open. Did the pull request resolve the issue? If so, could you please mark it resolved? This will help the project have a clear view of its open issues.

[~kenn] still disabled not fixed

This issue has been migrated to https://github.com/apache/beam/issues/18950

