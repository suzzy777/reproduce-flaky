Hitting a weird issue.  There's a unit test that goes from Date to Timestamp that is failing.  It seems that the Timestamp value and the toString do not agree with each other:

 
{code:java}
  public static void main(String[] args) throws IOException, URISyntaxException
  {
    DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();
    // Date and time parts
    builder.append(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
    // Fractional part
    builder.optionalStart().appendFraction(ChronoField.NANO_OF_SECOND, 0, 9, true).optionalEnd();
    DateTimeFormatter PRINT_FORMATTER = builder.toFormatter();

    int daysSinceEpoch = -1133938638;
    
    LocalDate localDate = LocalDate.ofEpochDay(daysSinceEpoch);
    long epochMillis = localDate.atStartOfDay().toInstant(ZoneOffset.UTC).toEpochMilli();
    
    LocalDateTime localDateTime = LocalDateTime.ofInstant(Instant.ofEpochMilli(epochMillis), ZoneOffset.UTC);
    
    System.out.println(epochMillis);
    System.out.println(localDate);
    System.out.println(localDateTime);
    System.out.println(localDateTime.format(PRINT_FORMATTER));
  }
{code}

It's a big negative number.  It should be a negative date, however,:

{code:none}
-97972298305200000
-3102649-06-17
-3102649-06-17T05:00
+3102650-06-17 05:00:00
{code}

For some reason, the print formatted date is different that the toString value.  Hmmm.

Latest:

{code:java}
  public static void main(String[] args) throws IOException, URISyntaxException
  {
    DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();
    // Date and time parts
    builder.append(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
    // Fractional part
    builder.optionalStart().appendFraction(ChronoField.NANO_OF_SECOND, 0, 9, true).optionalEnd();
    builder.appendZoneOrOffsetId();
    DateTimeFormatter PRINT_FORMATTER = builder.toFormatter();

    int daysSinceEpoch = -1133938638;

    LocalDate localDate = LocalDate.ofEpochDay(daysSinceEpoch);
    long epochMillis = localDate.atStartOfDay(ZoneOffset.UTC).toInstant().toEpochMilli();
    ZonedDateTime localDateTime = ZonedDateTime.ofInstant(Instant.ofEpochMilli(epochMillis), ZoneOffset.UTC);
    
    System.out.println(epochMillis);
    System.out.println(localDate);
    System.out.println(localDateTime);
    System.out.println(localDateTime.format(PRINT_FORMATTER));
  }
{code}

{code}
-97972298323200000
-3102649-06-17
-3102649-06-17T00:00Z
+3102650-06-17 00:00:00Z
{code}

Ok, date formater does not handle negative years.  needs to be {{uuuu}} instead of {{yyyy}}.  Ouch.  This never worked.

[~belugabehr] Per the the Wiki, Hive can handle years 0001-9999. However it doesn't really complain about years outside of that range. I once tried to get Hive to enforce this range but didn't get very far. FYI :)

BTW let me know if/when you want a review!

[~klcopp] That may be the case, but there was a unit test that was generating negative dates.  That's what broke my work. Ugh.

https://github.com/apache/hive/pull/1938

In working on this ticket, I learned something interesting:

{code:java|title=Timestamp.java}
private static final DateTimeFormatter PARSE_FORMATTER = new DateTimeFormatterBuilder()
      // Date
      .appendValue(YEAR, 1, 10, SignStyle.NORMAL).appendLiteral('-').appendValue(MONTH_OF_YEAR, 1, 2, SignStyle.NORMAL) ...

private static final DateTimeFormatter PRINT_FORMATTER = new DateTimeFormatterBuilder()
      // Date and Time Parts
      .append(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")) ...
{code}

When the *PARSING* code is built, it uses *YEAR*.  However the *FORMATTER* code is using *yyyy*.  The equivalence should be:

{{ChornoField.YEAR}} = "uuuu"
{{ChronoField.YEAR_OF_ERA}} = "yyyy"

So, what I ran into in my work on skipping the timestamp parsing is that I stumbled on the fact that Hive is reading YEAR but displaying YEAR_OF_ERA, which are not the same things.  YEAR has negative dates, YEAR_OF_ERA does not usually have negative dates, for example a "negative date" in YEAR_OF_ERA would be +2000 BCE whereas YEAR would be -2000.  So, Hive is kinda whacky and out of sync currently for negative years.

Pushed to master.  Thanks [~pgaref] for the review!

