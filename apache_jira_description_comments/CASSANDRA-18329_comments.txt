As a more-actively-maintained alternative to jamm, Lucene has this: https://lucene.apache.org/core/9_5_0/core/org/apache/lucene/util/RamUsageEstimator.html

Thank you[~jbellis]! I didn’t know about this one. Appreciate you shared it! I took a very quick look and it seems to me it cannot be a direct replacement? It seems jamm is handling more than it.
We are working on having Jamm ready for JDK17 and applying fixes for previous JDK versions. It should be back on track with new release soon.  CC[~blerer] 
We also need it fixed for 4.0 and 4.1 where we anyway would not be allowed to make full replacement of libraries in a released version. 

We have heavily worked on Jamm and at this point its outcome will be more correct than the results provided by {{RamUsageEstimator}} for the different JVM versions. Jamm is also able to measure things that {{RamUsageEstimator}} will fail to measure like (module protected fields, hidden classes or records).
Jamm provides also some features used by C* that  {{RamUsageEstimator}} does not provide (the ability to ignore some classes, advanced filtering to avoid scanning large portion of the JVM internals ...).
One thing that {{RamUsageEstimator}} has and that we did not provide is caching when crawling a graph of object but we can add that feature.

This ticket is blocked on [https://github.com/jbellis/jamm/pull/50] right?

Correct + new release after the pull request is closed

Jamm 0.4.0 was released yesterday. Already working on this PR to integrate it in Cassadra.

[https://github.com/apache/cassandra/pull/2488]

Just started CI here while I am looking into the latest changes applied:

[https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=18329-review]

Checkstyle failed the builds for unused imports. Fixed those imports, second try #2429:

[https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=18329-review]

 

It seems that the change in  MemtableSizeTestBase#testSize was missed, and the test was not looped in CircleCI, perhaps because the test class name does not end with *Test.

I will loop it separately.

The test was not run at all at CI. Checkstyle did not catch it being in a non-*Test class because MemtableSizeTestBase is abstract.

I applied a fix. - [https://github.com/apache/cassandra/commit/4f8808b6c70d8bab9e3cb9121c73d82b98db044e] Now it should run in CI plus CircleCI caught the applied change to all test classes as expected. I will rerun only unit tests and the repeated job as the rest was not touched, only test fixes. [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=18329-review] - #2430

Also, the previous run shows no new failures; the known jamm-related failures are fixed, and the rest are known and unrelated from the table in CASSANDRA-16895. 

All repeated runs were completed successfully, with no flakiness and errors anymore, and I can see in the unit tests run the test that was skipped before was run now.

I also ran the ComparisonReadBench test with the current trunk and then with this patch. Results seem similar (potentially some noise here and there, running them on my machine but good for preliminary verification).  I ran the test with JDK11. JDK17 (with the patch) shows it outperforms J11 most of the time.

All my comments from the first round of review were addressed, just some  nits to be applied on commit. 

+1

JMH results with the patch:
{code:java}
     [java] 
     [java] Benchmark                                   (bufferType)   (count)     (map)  (type)  Mode  Cnt       Score       Error  Units
     [java] ComparisonReadBench.consumeEntries               ON_HEAP      1000  TREE_MAP    LONG  avgt    3       0.006 ±     0.003  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP      1000      CSLM    LONG  avgt    3       0.004 ±     0.003  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP      1000      TRIE    LONG  avgt    3       0.086 ±     0.115  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP    100000  TREE_MAP    LONG  avgt    3       3.829 ±     3.657  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP    100000      CSLM    LONG  avgt    3       2.783 ±     1.333  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP    100000      TRIE    LONG  avgt    3      15.372 ±    30.642  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP  10000000  TREE_MAP    LONG  avgt    3     351.757 ±   116.538  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP  10000000      CSLM    LONG  avgt    3     305.437 ±   322.601  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP  10000000      TRIE    LONG  avgt    3    3538.012 ±  4923.608  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP      1000  TREE_MAP    LONG  avgt    3       0.005 ±     0.002  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP      1000      CSLM    LONG  avgt    3       0.003 ±     0.001  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP      1000      TRIE    LONG  avgt    3       0.043 ±     0.149  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP    100000  TREE_MAP    LONG  avgt    3       3.506 ±     1.106  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP    100000      CSLM    LONG  avgt    3       2.580 ±     1.818  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP    100000      TRIE    LONG  avgt    3       7.315 ±     4.989  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP  10000000  TREE_MAP    LONG  avgt    3     336.351 ±    59.986  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP  10000000      CSLM    LONG  avgt    3     322.197 ±    81.052  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP  10000000      TRIE    LONG  avgt    3    2922.359 ±   521.063  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP      1000  TREE_MAP    LONG  avgt    3       0.252 ±     0.103  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP      1000      CSLM    LONG  avgt    3       0.186 ±     0.005  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP      1000      TRIE    LONG  avgt    3       2.572 ±     1.572  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP    100000  TREE_MAP    LONG  avgt    3      51.488 ±    29.596  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP    100000      CSLM    LONG  avgt    3      57.212 ±    52.832  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP    100000      TRIE    LONG  avgt    3     602.728 ±   564.412  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP  10000000  TREE_MAP    LONG  avgt    3   15738.894 ±  8916.213  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP  10000000      CSLM    LONG  avgt    3   27782.944 ±  6282.575  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP  10000000      TRIE    LONG  avgt    3  105485.173 ± 67999.349  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP      1000  TREE_MAP    LONG  avgt    3       0.085 ±     0.044  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP      1000      CSLM    LONG  avgt    3       0.105 ±     0.134  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP      1000      TRIE    LONG  avgt    3       0.095 ±     0.112  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP    100000  TREE_MAP    LONG  avgt    3      22.352 ±    27.851  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP    100000      CSLM    LONG  avgt    3      47.468 ±    20.676  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP    100000      TRIE    LONG  avgt    3      15.905 ±    17.082  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP  10000000  TREE_MAP    LONG  avgt    3   10502.977 ±  2475.524  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP  10000000      CSLM    LONG  avgt    3   22517.705 ±  2533.039  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP  10000000      TRIE    LONG  avgt    3    4142.192 ±  1781.579  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP      1000  TREE_MAP    LONG  avgt    3       0.005 ±     0.002  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP      1000      CSLM    LONG  avgt    3       0.003 ±     0.001  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP      1000      TRIE    LONG  avgt    3       0.082 ±     0.031  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP    100000  TREE_MAP    LONG  avgt    3       3.400 ±     5.983  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP    100000      CSLM    LONG  avgt    3       2.103 ±     2.106  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP    100000      TRIE    LONG  avgt    3      14.271 ±    40.734  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP  10000000  TREE_MAP    LONG  avgt    3     329.635 ±   119.967  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP  10000000      CSLM    LONG  avgt    3     335.175 ±   279.334  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP  10000000      TRIE    LONG  avgt    3    3382.302 ±   336.170  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP      1000  TREE_MAP    LONG  avgt    3       0.005 ±     0.001  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP      1000      CSLM    LONG  avgt    3       0.003 ±     0.001  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP      1000      TRIE    LONG  avgt    3       0.052 ±     0.008  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP    100000  TREE_MAP    LONG  avgt    3       2.724 ±     1.750  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP    100000      CSLM    LONG  avgt    3       2.213 ±     5.102  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP    100000      TRIE    LONG  avgt    3       6.159 ±     2.508  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP  10000000  TREE_MAP    LONG  avgt    3     329.722 ±   108.448  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP  10000000      CSLM    LONG  avgt    3     306.260 ±    67.555  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP  10000000      TRIE    LONG  avgt    3    2936.597 ±   587.773  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP      1000  TREE_MAP    LONG  avgt    3       0.002 ±     0.001  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP      1000      CSLM    LONG  avgt    3       0.002 ±     0.001  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP      1000      TRIE    LONG  avgt    3       0.021 ±     0.002  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP    100000  TREE_MAP    LONG  avgt    3       0.510 ±     0.380  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP    100000      CSLM    LONG  avgt    3       0.369 ±     0.198  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP    100000      TRIE    LONG  avgt    3       2.335 ±     0.761  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP  10000000  TREE_MAP    LONG  avgt    3      83.703 ±     3.288  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP  10000000      CSLM    LONG  avgt    3      71.753 ±    13.685  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP  10000000      TRIE    LONG  avgt    3     718.953 ±   265.261  ms/op
     [java] 
{code}
 

JMH results on current trunk:

  
{code:java}
  [java] Benchmark                                   (bufferType)   (count)     (map)  (type)  Mode  Cnt      Score      Error  Units
     [java] ComparisonReadBench.consumeEntries               ON_HEAP      1000  TREE_MAP    LONG  avgt    3      0.007 ±    0.004  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP      1000      CSLM    LONG  avgt    3      0.005 ±    0.002  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP      1000      TRIE    LONG  avgt    3      0.126 ±    0.069  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP    100000  TREE_MAP    LONG  avgt    3      3.801 ±    1.102  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP    100000      CSLM    LONG  avgt    3      2.440 ±    6.467  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP    100000      TRIE    LONG  avgt    3     14.378 ±   20.257  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP  10000000  TREE_MAP    LONG  avgt    3    322.404 ±  178.398  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP  10000000      CSLM    LONG  avgt    3    318.176 ±   86.663  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP  10000000      TRIE    LONG  avgt    3   3346.840 ±  539.550  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP      1000  TREE_MAP    LONG  avgt    3      0.005 ±    0.001  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP      1000      CSLM    LONG  avgt    3      0.003 ±    0.001  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP      1000      TRIE    LONG  avgt    3      0.052 ±    0.004  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP    100000  TREE_MAP    LONG  avgt    3      3.759 ±    8.373  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP    100000      CSLM    LONG  avgt    3      2.386 ±    3.927  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP    100000      TRIE    LONG  avgt    3      6.894 ±    6.775  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP  10000000  TREE_MAP    LONG  avgt    3    338.219 ±   86.311  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP  10000000      CSLM    LONG  avgt    3    313.307 ±   46.362  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP  10000000      TRIE    LONG  avgt    3   2922.610 ±  935.152  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP      1000  TREE_MAP    LONG  avgt    3      0.183 ±    0.035  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP      1000      CSLM    LONG  avgt    3      0.191 ±    0.042  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP      1000      TRIE    LONG  avgt    3      2.568 ±    1.924  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP    100000  TREE_MAP    LONG  avgt    3     44.012 ±   16.225  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP    100000      CSLM    LONG  avgt    3     55.048 ±   46.835  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP    100000      TRIE    LONG  avgt    3    535.577 ±  403.218  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP  10000000  TREE_MAP    LONG  avgt    3  13063.919 ±  983.949  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP  10000000      CSLM    LONG  avgt    3  23865.232 ± 1538.876  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP  10000000      TRIE    LONG  avgt    3  85621.808 ± 4859.866  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP      1000  TREE_MAP    LONG  avgt    3      0.082 ±    0.032  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP      1000      CSLM    LONG  avgt    3      0.108 ±    0.133  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP      1000      TRIE    LONG  avgt    3      0.087 ±    0.067  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP    100000  TREE_MAP    LONG  avgt    3     25.977 ±   11.886  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP    100000      CSLM    LONG  avgt    3     48.737 ±   45.785  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP    100000      TRIE    LONG  avgt    3     16.910 ±   17.745  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP  10000000  TREE_MAP    LONG  avgt    3  10730.367 ± 1046.014  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP  10000000      CSLM    LONG  avgt    3  23147.479 ± 1628.040  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP  10000000      TRIE    LONG  avgt    3   4252.809 ± 1610.705  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP      1000  TREE_MAP    LONG  avgt    3      0.005 ±    0.001  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP      1000      CSLM    LONG  avgt    3      0.003 ±    0.001  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP      1000      TRIE    LONG  avgt    3      0.077 ±    0.022  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP    100000  TREE_MAP    LONG  avgt    3      3.250 ±    6.868  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP    100000      CSLM    LONG  avgt    3      1.865 ±    3.384  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP    100000      TRIE    LONG  avgt    3     14.047 ±   32.400  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP  10000000  TREE_MAP    LONG  avgt    3    335.046 ±   94.953  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP  10000000      CSLM    LONG  avgt    3    325.417 ±   46.952  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP  10000000      TRIE    LONG  avgt    3   3380.039 ±  541.558  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP      1000  TREE_MAP    LONG  avgt    3      0.005 ±    0.002  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP      1000      CSLM    LONG  avgt    3      0.003 ±    0.001  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP      1000      TRIE    LONG  avgt    3      0.051 ±    0.030  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP    100000  TREE_MAP    LONG  avgt    3      3.309 ±    4.661  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP    100000      CSLM    LONG  avgt    3      2.153 ±    2.346  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP    100000      TRIE    LONG  avgt    3      6.662 ±   14.535  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP  10000000  TREE_MAP    LONG  avgt    3    338.759 ±  133.155  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP  10000000      CSLM    LONG  avgt    3    328.910 ±  179.533  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP  10000000      TRIE    LONG  avgt    3   2973.136 ±  462.486  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP      1000  TREE_MAP    LONG  avgt    3      0.001 ±    0.001  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP      1000      CSLM    LONG  avgt    3      0.002 ±    0.001  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP      1000      TRIE    LONG  avgt    3      0.016 ±    0.001  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP    100000  TREE_MAP    LONG  avgt    3      0.567 ±    1.287  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP    100000      CSLM    LONG  avgt    3      0.346 ±    0.021  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP    100000      TRIE    LONG  avgt    3      2.011 ±    0.076  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP  10000000  TREE_MAP    LONG  avgt    3     83.109 ±   16.299  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP  10000000      CSLM    LONG  avgt    3     77.960 ±   28.393  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP  10000000      TRIE    LONG  avgt    3    719.192 ±  181.425  ms/op
{code}
 

Also JDK17 with this patch:

 
{code:java}
    [java] 
     [java] Benchmark                                   (bufferType)   (count)     (map)  (type)  Mode  Cnt      Score      Error  Units
     [java] ComparisonReadBench.consumeEntries               ON_HEAP      1000  TREE_MAP    LONG  avgt    3      0.005 ±    0.001  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP      1000      CSLM    LONG  avgt    3      0.004 ±    0.001  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP      1000      TRIE    LONG  avgt    3      0.086 ±    0.021  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP    100000  TREE_MAP    LONG  avgt    3      0.938 ±    1.428  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP    100000      CSLM    LONG  avgt    3      0.327 ±    0.187  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP    100000      TRIE    LONG  avgt    3     24.561 ±    4.844  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP  10000000  TREE_MAP    LONG  avgt    3    207.455 ±   47.875  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP  10000000      CSLM    LONG  avgt    3    136.281 ±   39.373  ms/op
     [java] ComparisonReadBench.consumeEntries               ON_HEAP  10000000      TRIE    LONG  avgt    3   3295.923 ±  751.870  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP      1000  TREE_MAP    LONG  avgt    3      0.006 ±    0.001  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP      1000      CSLM    LONG  avgt    3      0.004 ±    0.002  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP      1000      TRIE    LONG  avgt    3      0.056 ±    0.046  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP    100000  TREE_MAP    LONG  avgt    3      1.441 ±    0.405  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP    100000      CSLM    LONG  avgt    3      0.441 ±    0.293  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP    100000      TRIE    LONG  avgt    3     12.191 ±    8.170  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP  10000000  TREE_MAP    LONG  avgt    3    285.528 ±  108.565  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP  10000000      CSLM    LONG  avgt    3    135.929 ±    8.145  ms/op
     [java] ComparisonReadBench.consumeValues                ON_HEAP  10000000      TRIE    LONG  avgt    3   2922.988 ±  214.629  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP      1000  TREE_MAP    LONG  avgt    3      0.326 ±    0.055  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP      1000      CSLM    LONG  avgt    3      0.197 ±    0.027  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP      1000      TRIE    LONG  avgt    3      2.670 ±    0.953  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP    100000  TREE_MAP    LONG  avgt    3     62.233 ±   29.317  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP    100000      CSLM    LONG  avgt    3     50.657 ±   19.576  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP    100000      TRIE    LONG  avgt    3    543.235 ±  311.025  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP  10000000  TREE_MAP    LONG  avgt    3  13136.224 ± 1075.603  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP  10000000      CSLM    LONG  avgt    3  27418.657 ±  328.972  ms/op
     [java] ComparisonReadBench.getByIterateValueSlice       ON_HEAP  10000000      TRIE    LONG  avgt    3  87091.885 ± 8617.250  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP      1000  TREE_MAP    LONG  avgt    3      0.081 ±    0.050  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP      1000      CSLM    LONG  avgt    3      0.094 ±    0.081  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP      1000      TRIE    LONG  avgt    3      0.107 ±    0.046  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP    100000  TREE_MAP    LONG  avgt    3     22.542 ±   13.113  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP    100000      CSLM    LONG  avgt    3     35.404 ±   20.260  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP    100000      TRIE    LONG  avgt    3     18.771 ±   57.363  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP  10000000  TREE_MAP    LONG  avgt    3   9542.849 ±  851.270  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP  10000000      CSLM    LONG  avgt    3  26054.125 ± 1101.253  ms/op
     [java] ComparisonReadBench.getRandom                    ON_HEAP  10000000      TRIE    LONG  avgt    3   4632.176 ±  892.863  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP      1000  TREE_MAP    LONG  avgt    3      0.006 ±    0.003  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP      1000      CSLM    LONG  avgt    3      0.003 ±    0.001  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP      1000      TRIE    LONG  avgt    3      0.096 ±    0.332  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP    100000  TREE_MAP    LONG  avgt    3      1.038 ±    0.438  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP    100000      CSLM    LONG  avgt    3      0.307 ±    0.179  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP    100000      TRIE    LONG  avgt    3     22.867 ±   10.021  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP  10000000  TREE_MAP    LONG  avgt    3    216.209 ±    2.450  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP  10000000      CSLM    LONG  avgt    3    130.276 ±   33.587  ms/op
     [java] ComparisonReadBench.iterateEntries               ON_HEAP  10000000      TRIE    LONG  avgt    3   3413.127 ± 2469.704  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP      1000  TREE_MAP    LONG  avgt    3      0.005 ±    0.001  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP      1000      CSLM    LONG  avgt    3      0.003 ±    0.001  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP      1000      TRIE    LONG  avgt    3      0.042 ±    0.010  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP    100000  TREE_MAP    LONG  avgt    3      0.971 ±    0.226  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP    100000      CSLM    LONG  avgt    3      0.326 ±    0.499  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP    100000      TRIE    LONG  avgt    3      6.708 ±    3.828  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP  10000000  TREE_MAP    LONG  avgt    3    215.951 ±    5.391  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP  10000000      CSLM    LONG  avgt    3    131.619 ±   71.281  ms/op
     [java] ComparisonReadBench.iterateValues                ON_HEAP  10000000      TRIE    LONG  avgt    3   2900.923 ±  370.803  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP      1000  TREE_MAP    LONG  avgt    3      0.002 ±    0.001  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP      1000      CSLM    LONG  avgt    3      0.002 ±    0.001  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP      1000      TRIE    LONG  avgt    3      0.016 ±    0.006  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP    100000  TREE_MAP    LONG  avgt    3      0.295 ±    0.123  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP    100000      CSLM    LONG  avgt    3      0.173 ±    0.075  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP    100000      TRIE    LONG  avgt    3      2.145 ±    1.717  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP  10000000  TREE_MAP    LONG  avgt    3     61.328 ±    1.336  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP  10000000      CSLM    LONG  avgt    3     40.018 ±    1.015  ms/op
     [java] ComparisonReadBench.iterateValuesLimited         ON_HEAP  10000000      TRIE    LONG  avgt    3    737.945 ±  255.199  ms/op
{code}
 

[~mck], [~brandon.williams] , can anyone of you take a look at the benchmark results and the test patch, in case I might be missing something - [https://github.com/apache/cassandra/commit/4f8808b6c70d8bab9e3cb9121c73d82b98db044e]

 

In case you don't see anything, we are ready to squash and commit on behalf of [~blerer] as he gave his permission to me in Slack before leaving for vacation.

Patch looks good to me.  The only thing I see in the benchmarks is the error is higher with J11 and the patch, but all the scores are similar.

Thanks!

I just got reminded I have to remove the eclipse warnings fixes commit, which is not reviewed and not part of this work. Shouldn’t be committed. I will take care tomorrow.

Those can be checked in another ticket, they are also not failing our builds as far as I know. I will double-check before commit, to be on the safe side

I noticed you edited to error rate being higher with and not without patch.

I looked at that again and it seems to me at some places it is, at others it is not and it seems to me it is probably just noise. WDYT?

I don't feel it's anything that should block merging this.

Eyeballing it looks better with the patch.
The only outlier I saw was this error margin in jdk17:
{noformat}
     [java] ComparisonReadBench.iterateEntries               ON_HEAP  10000000      TRIE    LONG  avgt    3   3413.127 ± 2469.704  ms/op
{noformat}
I don't consider that a blocker or a problem for this ticket.

+1 to https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:18329-review

Thank you both!

I also reviewed the eclipse problems patch at the end, as it was a pretty non-controversial patch, and we already ran it through CI anyway.

Starting commit soon.

eclipse warnings: [3bf9bd6831..b41e2f5b80|https://github.com/apache/cassandra/commit/b41e2f5b80187ac0923d3822a279b1608fb9c1d2]  trunk -> trunk

tests fix: [b41e2f5b80..6b885a44c3|https://github.com/apache/cassandra/commit/6b885a44c39ff3abcd5cb6c6c44eaa4004979aa7]  trunk -> trunk

jamm upgrade and fixes: [6b885a44c3..600f4d9a69|https://github.com/apache/cassandra/commit/600f4d9a690dbd887d5e6298fe67e6bba982033d]  trunk -> trunk

Thank you all!

Looking with fresh eyes, I don't think we need the fix for MemtableSizeTestBase. That test is run already with all needed configurations (heap buffers, offheap buffers, offheap objects, and unslabbed) by the extended classes, and they are all parameterized - skiplist, skiplist sharded, and tries. This will now be just one more parameterized run with the default config under MemtableSizeTest. I believe the class was left abstract correctly. [~brandon.williams], [~mck], I will revert the change if you agree. 


I see what you are saying, that makes sense. +1 to revert.

This is unit tests run to show that those are run as before after a revert - https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2437/workflows/3d0fb61c-c074-4bc6-952b-64d2e62007f1/jobs/32862/artifacts
To https://github.com/apache/cassandra
   bbee4c87c4..d08fd1ebd8  trunk -> trunk
https://github.com/apache/cassandra/commit/d08fd1ebd83edc4730316c9630e60b8c0b0be89d

