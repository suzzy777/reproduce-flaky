Looks like this is still an issue after my statistics changes have been committed, I'll take a look.

This is because the double returned from Clock::now() does not go through the Seconds constructor that multiplied into a double representing nanoseconds.

Notice how we lose precision at the microsecond precision level.

double _now:                1361844790.21959590911865234375
Seconds(_now).secs():  1361844790.2195961475372314453125
older.secs():                 1361844790.2195961475372314453125

There are a few ways to fix this:
1. We've been meaning to push Duration into clock.hpp, but I don't know if I like that, given we're losing precision at the microsecond level!!
2. Modify Duration to use int64_t (which should have been done in the first place, I don't like that ev_time returns double!). This can represent upwards of 292 years precisely. Even so, people can call secs() on duration and get an imprecise value!! Seems to me that Duration should resemble Bytes, where discrete values are used throughout the file.

The largest integral value x that can be stored in a double, for which x+1 cannot be stored precisely is 2^53 [1].

This means if using doubles to represent the time in nanoseconds, we're no longer able to do so precisely after 104.25 days since the epoch. Likewise for microseconds (precision returned by Clock::now), the point at which we start losing precision is 285.427 years. This means we would be likely be ok if not for the conversion into nanoseconds and back.

It's hard to see how Duration should be using a double of nanoseconds as the base value, another solution could be:

3. Continue to use a double in Duration, but use a base unit of seconds.

[1] http://stackoverflow.com/questions/1848700/biggest-integer-that-can-be-stored-in-a-double

I missed this here https://reviews.apache.org/r/6755. :( We should definitely not be multiplying to nanoseconds in Duration. I think Vinod might have been inspired by what John Sirois had done in Twitter commons, but they probably didn't use a double there.

Given all the options (or lack there of) IMHO using a double with a base unit of seconds is actually very powerful given that most C/C++ APIs expect seconds this gives libev a lot more fine-grained information with the added bonus of getting "easy" conversion when calling functions that expect seconds without the need for multiplication or division.

They also used a double! https://github.com/twitter/commons/blob/master/src/java/com/twitter/common/quantity/Time.java

I'm debating whether to use a base double value of seconds, or a base int64_t value of nanoseconds. I'm still leaning towards the latter, which can be done without compromising the Duration interface (by exporting doubles, but internally using an int64_t).

Went with the simple solution of just using seconds as the base value.
https://reviews.apache.org/r/9765/

