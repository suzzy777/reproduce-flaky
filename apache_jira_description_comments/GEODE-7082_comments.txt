Here's one more thread that looked interesting to me, but I'm not sure if it's really involved or not:
{noformat}
"ResourceManagerRecoveryThread 1" #2371 daemon prio=5 os_prio=0 tid=0x00007f2acc0ac800 nid=0x19f8 waiting on condition [0x00007f2be01ae000]
   java.lang.Thread.State: TIMED_WAITING (parking)
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait for  <0x00000000e1f9f458> (a java.util.concurrent.Semaphore$NonfairSync)
        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedNanos(AbstractQueuedSynchronizer.java:1037)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(AbstractQueuedSynchronizer.java:1328)
        at java.util.concurrent.Semaphore.tryAcquire(Semaphore.java:582)
        at org.apache.geode.internal.cache.partitioned.rebalance.ParallelBucketOperator.waitForOperations(ParallelBucketOperator.java:154)
        at org.apache.geode.internal.cache.partitioned.rebalance.model.PartitionedRegionLoadModel.waitForOperations(PartitionedRegionLoadModel.java:783)
        at org.apache.geode.internal.cache.partitioned.rebalance.SatisfyRedundancy.nextStep(SatisfyRedundancy.java:52)
        at org.apache.geode.internal.cache.partitioned.rebalance.CompositeDirector.nextStep(CompositeDirector.java:100)
        at org.apache.geode.internal.cache.partitioned.PartitionedRegionRebalanceOp.execute(PartitionedRegionRebalanceOp.java:230)
        at org.apache.geode.internal.cache.PRHARedundancyProvider$1.run2(PRHARedundancyProvider.java:1500)
        at org.apache.geode.internal.cache.partitioned.RecoveryRunnable.run(RecoveryRunnable.java:60)
        at org.apache.geode.internal.OneTaskOnlyExecutor$DelegatingRunnable.run(OneTaskOnlyExecutor.java:142)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:748)

   Locked ownable synchronizers:
        - <0x00000000e1f9f690> (a java.util.concurrent.ThreadPoolExecutor$Worker)
{noformat}


Hit this again -

https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-develop-main/jobs/DistributedTestOpenJDK11/builds/1040

Commit fc20f2fa07fc2e6534bad0046b05dd7f0941e06d in geode's branch refs/heads/develop from Kirk Lund
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=fc20f2f ]

GEODE-4187: Fix PersistentColocatedPartitionedRegionDistributedTest

Fix flakiness in PersistentColocatedPartitionedRegionDistributedTest:
* GEODE-4187 testRebalanceDuringRecovery hang
* GEODE-5175 inline PersistentPartitionedRegionTestBase
* GEODE-6499 AsyncInvocation timeout
* GEODE-7082 testReplaceOfflineMemberAndRestartCreateColocatedPRLate
  hang

Changes to fix flakiness:
* Clean up uses of AsyncInvocation
* Replace sleep with Mockito.verify using timeout()
* Replace sleep with CountDownLatch
* Use GeodeAwaitility timeout consistently

Extract integration tests:
* PersistentColocationIntegrationTest
* ModifyColocationIntegrationTest

Changes to product code:
* Move ColocationLogger to internal.cache.partitioned.colocation
* Extract factory and interfaces from ColocationLogger
* Create unit tests for ColocationLogger and factory
* Pass ColocationLoggerFactory into PartitionedRegion constructor
* Use ColocationLogger via interfaces instead of implementations
* Add getLogger(Class) to LogService

Clean up PersistentColocatedPartitionedRegionDistributedTest
* Fix uses of ArgumentCaptor and Mockito timeout
* Improve readability
* User TemporaryFolder Rule for all files
* Use RestoreSystemProperties Rule instead of try-finally blocks
* Use tearDown instead of try-finally blocks
* Update to non-deprecated APIs
* Replace try-catch blocks with AssertJ catchThrowable
* Use lambdas instead of SerializableRunnable instances

Other test file changes:
* Clean up PartitionedRegionTest
* Delete MockAppender


Commit fc20f2fa07fc2e6534bad0046b05dd7f0941e06d in geode's branch refs/heads/feature/GEODE-7507 from Kirk Lund
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=fc20f2f ]

GEODE-4187: Fix PersistentColocatedPartitionedRegionDistributedTest

Fix flakiness in PersistentColocatedPartitionedRegionDistributedTest:
* GEODE-4187 testRebalanceDuringRecovery hang
* GEODE-5175 inline PersistentPartitionedRegionTestBase
* GEODE-6499 AsyncInvocation timeout
* GEODE-7082 testReplaceOfflineMemberAndRestartCreateColocatedPRLate
  hang

Changes to fix flakiness:
* Clean up uses of AsyncInvocation
* Replace sleep with Mockito.verify using timeout()
* Replace sleep with CountDownLatch
* Use GeodeAwaitility timeout consistently

Extract integration tests:
* PersistentColocationIntegrationTest
* ModifyColocationIntegrationTest

Changes to product code:
* Move ColocationLogger to internal.cache.partitioned.colocation
* Extract factory and interfaces from ColocationLogger
* Create unit tests for ColocationLogger and factory
* Pass ColocationLoggerFactory into PartitionedRegion constructor
* Use ColocationLogger via interfaces instead of implementations
* Add getLogger(Class) to LogService

Clean up PersistentColocatedPartitionedRegionDistributedTest
* Fix uses of ArgumentCaptor and Mockito timeout
* Improve readability
* User TemporaryFolder Rule for all files
* Use RestoreSystemProperties Rule instead of try-finally blocks
* Use tearDown instead of try-finally blocks
* Update to non-deprecated APIs
* Replace try-catch blocks with AssertJ catchThrowable
* Use lambdas instead of SerializableRunnable instances

Other test file changes:
* Clean up PartitionedRegionTest
* Delete MockAppender


Commit fc20f2fa07fc2e6534bad0046b05dd7f0941e06d in geode's branch refs/heads/feature/GEODE-7507 from Kirk Lund
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=fc20f2f ]

GEODE-4187: Fix PersistentColocatedPartitionedRegionDistributedTest

Fix flakiness in PersistentColocatedPartitionedRegionDistributedTest:
* GEODE-4187 testRebalanceDuringRecovery hang
* GEODE-5175 inline PersistentPartitionedRegionTestBase
* GEODE-6499 AsyncInvocation timeout
* GEODE-7082 testReplaceOfflineMemberAndRestartCreateColocatedPRLate
  hang

Changes to fix flakiness:
* Clean up uses of AsyncInvocation
* Replace sleep with Mockito.verify using timeout()
* Replace sleep with CountDownLatch
* Use GeodeAwaitility timeout consistently

Extract integration tests:
* PersistentColocationIntegrationTest
* ModifyColocationIntegrationTest

Changes to product code:
* Move ColocationLogger to internal.cache.partitioned.colocation
* Extract factory and interfaces from ColocationLogger
* Create unit tests for ColocationLogger and factory
* Pass ColocationLoggerFactory into PartitionedRegion constructor
* Use ColocationLogger via interfaces instead of implementations
* Add getLogger(Class) to LogService

Clean up PersistentColocatedPartitionedRegionDistributedTest
* Fix uses of ArgumentCaptor and Mockito timeout
* Improve readability
* User TemporaryFolder Rule for all files
* Use RestoreSystemProperties Rule instead of try-finally blocks
* Use tearDown instead of try-finally blocks
* Update to non-deprecated APIs
* Replace try-catch blocks with AssertJ catchThrowable
* Use lambdas instead of SerializableRunnable instances

Other test file changes:
* Clean up PartitionedRegionTest
* Delete MockAppender


