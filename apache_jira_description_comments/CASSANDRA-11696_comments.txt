figured I should post a progress report on this as it is critical

Difficult part is handling snapshot repairs in 2.2+ since when we do repairs without anticompaction we take a new snapshot for every range repaired. With this we need to take a single snapshot when we start and reuse that over the repair session. Hoping to have a patch for review tomorrow.

branches are below, I will go over them again tomorrow and add a few tests and comments.

Patch for 2.1 is very different from the ones for 2.2+ due to the fact that we support incremental repair with snapshot ({{-seq}}) repairs there

||branch||testall||dtest||
|[marcuse/11696|https://github.com/krummas/cassandra/tree/marcuse/11696]|[testall|http://cassci.datastax.com/view/Dev/view/krummas/job/krummas-marcuse-11696-testall]|[dtest|http://cassci.datastax.com/view/Dev/view/krummas/job/krummas-marcuse-11696-dtest]|
|[marcuse/11696-2.2|https://github.com/krummas/cassandra/tree/marcuse/11696-2.2]|[testall|http://cassci.datastax.com/view/Dev/view/krummas/job/krummas-marcuse-11696-2.2-testall]|[dtest|http://cassci.datastax.com/view/Dev/view/krummas/job/krummas-marcuse-11696-2.2-dtest]|
|[marcuse/11696-3.0|https://github.com/krummas/cassandra/tree/marcuse/11696-3.0]|[testall|http://cassci.datastax.com/view/Dev/view/krummas/job/krummas-marcuse-11696-3.0-testall]|[dtest|http://cassci.datastax.com/view/Dev/view/krummas/job/krummas-marcuse-11696-3.0-dtest]|
|[marcuse/11696-3.7|https://github.com/krummas/cassandra/tree/marcuse/11696-3.7]|[testall|http://cassci.datastax.com/view/Dev/view/krummas/job/krummas-marcuse-11696-3.7-testall]|[dtest|http://cassci.datastax.com/view/Dev/view/krummas/job/krummas-marcuse-11696-3.7-dtest]|
|[marcuse/11696-trunk|https://github.com/krummas/cassandra/tree/marcuse/11696-trunk]|[testall|http://cassci.datastax.com/view/Dev/view/krummas/job/krummas-marcuse-11696-trunk-testall]|[dtest|http://cassci.datastax.com/view/Dev/view/krummas/job/krummas-marcuse-11696-trunk-dtest]|

for 2.1 it marks sstables as repairing once, when the first validation request is received.

For 2.2+ we do the same as in 2.1 for normal non-snapshot repairs and for snapshot repairs we make sure we only snapshot once, and then reuse that snapshot during the repair. We also need to do anticompaction on the 'real' sstables, not the snapshotted ones, so when it is time for anticompaction the snapshotted sstables are 'translated' into real sstables (for the ones that still exist)

a dtest update is pushed [here|https://github.com/krummas/cassandra-dtest/commits/marcuse/11696] - it makes sure we run all incremental repair tests both with {{-seq}} and without.

Overall, the patches look good to me and the logic of the fix seems sound. One exceedingly minor nit - on the 3.0 and up patches, the comment beginning with "this means the parent repair session" in {{doValidationCompaction}} has had its ending removed. One small question - is there a reason {{marked}} needs to be a map in {{ParentRepairSession}}? It seems to only ever be a map from UUID to {{true}}, in which case we might as well use a set.

Tests are less clean - the 3.7-testall failed to run entirely. Otherwise, the testall runs look good. The 2.1 dtests have failures in incremental_repair_test - these could be because your dtest branch appears to be lacking your fix from [CASSANDRA-11436]. The 3.0 run has a lot of failures in repair_tests that look linked to a mismatch between CCM and your dtest branch. This has been fixed in latest dtest, so you should rebase.

If you don't have time to mess with the test stuff [~krummas], let me know and I can rebase the dtest branch and rerun the sets I need before I'm comfortable +1ing. Let me know.

I've rebased the branches and run dtests for [2.1|http://cassci.datastax.com/view/Dev/view/jkni/job/jkni-11696-2.1-dtest/], [2.2|http://cassci.datastax.com/view/Dev/view/jkni/job/jkni-11696-2.2-dtest/], [3.0|http://cassci.datastax.com/view/Dev/view/jkni/job/jkni-11696-3.0-dtest/], and [trunk|http://cassci.datastax.com/view/Dev/view/jkni/job/jkni-11696-trunk-dtest/].

They all look clean relative to upstream, so all that remains is the few nits above.

nits fixed and new tests triggered:
||branch||testall||dtest||
|[marcuse/11696|https://github.com/krummas/cassandra/tree/marcuse/11696]|[testall|http://cassci.datastax.com/view/Dev/view/krummas/job/krummas-marcuse-11696-testall]|[dtest|http://cassci.datastax.com/view/Dev/view/krummas/job/krummas-marcuse-11696-dtest]|
|[marcuse/11696-2.2|https://github.com/krummas/cassandra/tree/marcuse/11696-2.2]|[testall|http://cassci.datastax.com/view/Dev/view/krummas/job/krummas-marcuse-11696-2.2-testall]|[dtest|http://cassci.datastax.com/view/Dev/view/krummas/job/krummas-marcuse-11696-2.2-dtest]|
|[marcuse/11696-3.0|https://github.com/krummas/cassandra/tree/marcuse/11696-3.0]|[testall|http://cassci.datastax.com/view/Dev/view/krummas/job/krummas-marcuse-11696-3.0-testall]|[dtest|http://cassci.datastax.com/view/Dev/view/krummas/job/krummas-marcuse-11696-3.0-dtest]|
|[marcuse/11696-trunk|https://github.com/krummas/cassandra/tree/marcuse/11696-trunk]|[testall|http://cassci.datastax.com/view/Dev/view/krummas/job/krummas-marcuse-11696-trunk-testall]|[dtest|http://cassci.datastax.com/view/Dev/view/krummas/job/krummas-marcuse-11696-trunk-dtest]|


+1.

All your testall/dtest runs looked clean with the exception of dtests on trunk. Trunk had some known flaky failures and failures on four tests that were not tagged as flaky. Some of these have failed on trunk recently - the failures looked like [CASSANDRA-12072] and all seemed related to timeouts on driver connections/cluster setup, so I'm not too concerned. They all passed locally. I triggered one more trunk dtest run - this time, two different tests failed in comparable ways, so I'm pretty sure it is part of some larger environmental problem. Again, the untagged failing tests passed locally. I'm comfortable with these test results.

and committed, thanks

