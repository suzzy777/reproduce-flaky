| (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  1m 57s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} dupname {color} | {color:green}  0m  0s{color} | {color:green} No case conflicting files found. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 6 new or modified test files. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 23m 17s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 32s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 22s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 37s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 17m 43s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 33s{color} | {color:green} trunk passed {color} |
| {color:blue}0{color} | {color:blue} spotbugs {color} | {color:blue}  1m 27s{color} | {color:blue} Used deprecated FindBugs config; considering switching to SpotBugs. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 24s{color} | {color:green} trunk passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 35s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 18s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 36s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 16m 21s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 31s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 29s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  9m  6s{color} | {color:green} hadoop-hdfs-rbf in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 29s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 77m 47s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | ClientAPI=1.40 ServerAPI=1.40 base: https://builds.apache.org/job/PreCommit-HDFS-Build/29244/artifact/out/Dockerfile |
| JIRA Issue | HDFS-15340 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/13002247/HDFS-15340.001.patch |
| Optional Tests | dupname asflicense compile javac javadoc mvninstall mvnsite unit shadedclient findbugs checkstyle |
| uname | Linux 1f60015af5ac 4.15.0-74-generic #84-Ubuntu SMP Thu Dec 19 08:06:28 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | personality/hadoop.sh |
| git revision | trunk / 99840aaba66 |
| Default Java | Private Build-1.8.0_252-8u252-b09-1~18.04-b09 |
|  Test Results | https://builds.apache.org/job/PreCommit-HDFS-Build/29244/testReport/ |
| Max. process+thread count | 3794 (vs. ulimit of 5500) |
| modules | C: hadoop-hdfs-project/hadoop-hdfs-rbf U: hadoop-hdfs-project/hadoop-hdfs-rbf |
| Console output | https://builds.apache.org/job/PreCommit-HDFS-Build/29244/console |
| versions | git=2.17.1 maven=3.6.0 findbugs=3.1.0-RC1 |
| Powered by | Apache Yetus 0.12.0 https://yetus.apache.org |


This message was automatically generated.



Upload v02, using HashCodeBuilder and EqualsBuilder for hashCode() and equals().

| (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 51s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} dupname {color} | {color:green}  0m  1s{color} | {color:green} No case conflicting files found. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 6 new or modified test files. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 19m  4s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 36s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 27s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 40s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 15m  5s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 34s{color} | {color:green} trunk passed {color} |
| {color:blue}0{color} | {color:blue} spotbugs {color} | {color:blue}  1m  8s{color} | {color:blue} Used deprecated FindBugs config; considering switching to SpotBugs. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  7s{color} | {color:green} trunk passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 33s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 28s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 28s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 17s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 30s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 13m 44s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 30s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 14s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  8m  3s{color} | {color:green} hadoop-hdfs-rbf in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 33s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 65m 32s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | ClientAPI=1.40 ServerAPI=1.40 base: https://builds.apache.org/job/PreCommit-HDFS-Build/29258/artifact/out/Dockerfile |
| JIRA Issue | HDFS-15340 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/13002490/HDFS-15340.002.patch |
| Optional Tests | dupname asflicense compile javac javadoc mvninstall mvnsite unit shadedclient findbugs checkstyle |
| uname | Linux 13c3c2d8d828 4.15.0-58-generic #64-Ubuntu SMP Tue Aug 6 11:12:41 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | personality/hadoop.sh |
| git revision | trunk / c784ba370ee |
| Default Java | Private Build-1.8.0_252-8u252-b09-1~18.04-b09 |
|  Test Results | https://builds.apache.org/job/PreCommit-HDFS-Build/29258/testReport/ |
| Max. process+thread count | 3501 (vs. ulimit of 5500) |
| modules | C: hadoop-hdfs-project/hadoop-hdfs-rbf U: hadoop-hdfs-project/hadoop-hdfs-rbf |
| Console output | https://builds.apache.org/job/PreCommit-HDFS-Build/29258/console |
| versions | git=2.17.1 maven=3.6.0 findbugs=3.1.0-RC1 |
| Powered by | Apache Yetus 0.12.0 https://yetus.apache.org |


This message was automatically generated.




In {{HDFSJournal.java}}

In saveJob(BalanceJob job) 

 can use directly {{new Path(jobFile + TMP_TAIL);}} for tmpJobFile


{code:java}
      if (out != null) {
        try {
          out.close();
        } catch (IOException e) {
        }
      }

{code}
Exceptions shouldn't be silently ignored, better use IOUtils.closeStream(out)

In {{recoverJob(BalanceJob job)}}
    assert job.getId() != null;
If this fails, this would surface, it won't be caught in {{BalancerProcedureScheduler#run}} and the job won't be removed. Not pretty sure when this exception will trigger. Give a check if it can be smoothlly handled.

In {{listAllJobs()}} :

Can add a debug log for FNF exception.

{{new Path(workUri.getPath())}} this is used multiple times, can refactor as single variable.

We are using listStatus and getFileStatus both on the same path, getFileStatus to check directory exists, can we use only listStatus. listStatus also returns FNF if directory isn't there. Can save one rpc call?

In {{BalanceJob.java}}
     In {{nextProcedure()}}
Either reuse {{procedures.size()}} by refactoring to variable else check {{isEmpty()}}

In {{execute}} method :
      {{while (!jobDone && scheduler.isRunning() && !quit)}} : quit is a local variable, this can be checked before {{scheduler.isRunning}}

For  quit = true; better to add a debug log too here, if in future things don't work, this may help then. Better to know it got exited abnormally.

In BalanceProcedure.java we can have a toString() too returning the name, so we can directly use the procedure in Logs, StringBuilders and relevant places

BalanceJob.java and BalanceProcedureConfigKeys.java both have private empty constructors, give a check if you would need them?

In BalanceProcedureScheduler.java 

      final BalanceJob job = runningQueue.take();
In case of any code/enviornment issue later, this take can get stuck infinitely, as a preventive measure I think we should have a timeout here for safety. {{DFSStripedOutputStream}} has a example {{takeWithTimeout}} implemented, Can give a check. Similarly in {{Recover#run}}

     {{LOG.info("Start job. job={}", job);}}
This won't work if job doesn't have a toString implemented, either use .name/.id or implement toString in BalanceJob. Give a check to the logs below too they are using ID, either use ID for all or name or both everywhere in logs.

Haven't checked the tests line by line, but they doesn't seams flaky atleast, in multiple runs. All are working fine.

[~elgoiri] can you too have  a look once.

Haven't taken the deep review, but some initial review comments for the readable of this patch:

*BalanceJob.java*
{noformat}
+ public static final Logger LOG =
+ LoggerFactory.getLogger(BalanceJob.class.getName());
{noformat}
{{BalanceJob.class.getName()}} can be simplified to {{BalanceJob.class}}
{noformat}
private BalanceJob() {}
{noformat}
I don't think this is necessary since we already define {{private BalanceJob(Iterable<T> procedures, boolean remove)}}.

In BalanceJob#toString, can we add missed comma character in string builder when doing the new append operation?

*BalanceProcedure.java*
{noformat}
public static final Logger LOG =
 + LoggerFactory.getLogger(BalanceProcedure.class.getName());
{noformat}
BalanceProcedure.class.getName() --> BalanceProcedure.class

It will look better if we could add some necessary comments for these variables.
{noformat}
+  private String nextProcedure;
+  private String name;
+  private long delayDuration;
+  private BalanceJob job;

{noformat}
Don't need I think and I don't find he place that will invoke following construct method.
{noformat}
public BalanceProcedure() {  }
{noformat}
*BalanceProcedureScheduler.java*
{noformat}
+  private ConcurrentHashMap<BalanceJob, BalanceJob> jobSet;
+  private LinkedBlockingQueue<BalanceJob> runningQueue;
+  private DelayQueue<DelayWrapper> delayQueue;
+  private LinkedBlockingQueue<BalanceJob> recoverQueue;
+  private Configuration conf;
+  private BalanceJournal journal;
+
+  private Thread reader;
+  private ThreadPoolExecutor workersPool;
+  private Thread rooster;
+  private Thread recoverThread;
+  private AtomicBoolean running = new AtomicBoolean(true);
{noformat}
Two suggestions for above lines:
 * Can we add some necessary comments for these variables?
 * Can we unified the naming pattern of thread names, like reader -> readerThread, rooster -> roosterThread?

*HDFSJournal.java*
{noformat}
+/**
+ * Journal based on HDFS.
+ */
+public class HDFSJournal implements BalanceJournal {
{noformat}
The class HDFSJournal looks a little confused, can we rename this to a more readable name like BalanceJournalInfo?

In addition, please add more description for this java doc description.

Can we print some tracking log in saveJob/recoverJob/listAllJobs/clear methods? It will let users known detailed operation of Balancer job journal operations.

*MultiPhaseProcedure.java*
 * LOG.info("phase {}", currentPhase); --> LOG.info("Current phase {}", currentPhase);
 * Not needed: {{public MultiPhaseProcedure() {}}}

*RecordProcedure.java*
 Not needed: {{public RecordProcedure() {}}}

*RetryProcedure.java*
 Not needed: {{public RetryProcedure() {}}}

I will give my further detailed review comments soon.

Hi [~ayushtkn] [~linyiqun], thanks your nice review, comments and suggestions ! Upload v03.

 
{quote}BalanceJob.java and BalanceProcedureConfigKeys.java both have private empty constructors, give a check if you would need them?
{quote}
The empty constructor of BalanceJob is useless, I'll remove it.   The private empty constructor in BalanceProcedureConfigKeys.java is because of checkstyle.  Something like: tool class must not have public constructor. I'll keep it to pass checkstyle.

 
{quote}Don't need I think and I don't find the place that will invoke following construct method.
{quote}
The empty constructor for BalanceProcedure, MultiPhaseProcedure, RecordProcedure and RetryProcedure a
re used for deserialization. It uses reflection and needs a standard empty constructor. The deserialization code is at BalanceJob.readFields().

 

A small reminder is the HDFSJournal is renamed to BalanceJournalInfoHDFS in v03.

| (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  1m 55s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} dupname {color} | {color:green}  0m  1s{color} | {color:green} No case conflicting files found. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 6 new or modified test files. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 20m 40s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 35s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 27s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 35s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 14m 38s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 33s{color} | {color:green} trunk passed {color} |
| {color:blue}0{color} | {color:blue} spotbugs {color} | {color:blue}  1m 11s{color} | {color:blue} Used deprecated FindBugs config; considering switching to SpotBugs. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  9s{color} | {color:green} trunk passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 33s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 29s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 29s{color} | {color:green} the patch passed {color} |
| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  0m 17s{color} | {color:orange} hadoop-hdfs-project/hadoop-hdfs-rbf: The patch generated 1 new + 0 unchanged - 0 fixed = 1 total (was 0) {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 31s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 13m 42s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 30s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 12s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  8m 10s{color} | {color:green} hadoop-hdfs-rbf in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 32s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 67m 47s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | ClientAPI=1.40 ServerAPI=1.40 base: https://builds.apache.org/job/PreCommit-HDFS-Build/29263/artifact/out/Dockerfile |
| JIRA Issue | HDFS-15340 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/13002576/HDFS-15340.003.patch |
| Optional Tests | dupname asflicense compile javac javadoc mvninstall mvnsite unit shadedclient findbugs checkstyle |
| uname | Linux 09cbeea788d0 4.15.0-58-generic #64-Ubuntu SMP Tue Aug 6 11:12:41 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | personality/hadoop.sh |
| git revision | trunk / aab9e0b16ec |
| Default Java | Private Build-1.8.0_252-8u252-b09-1~18.04-b09 |
| checkstyle | https://builds.apache.org/job/PreCommit-HDFS-Build/29263/artifact/out/diff-checkstyle-hadoop-hdfs-project_hadoop-hdfs-rbf.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HDFS-Build/29263/testReport/ |
| Max. process+thread count | 3084 (vs. ulimit of 5500) |
| modules | C: hadoop-hdfs-project/hadoop-hdfs-rbf U: hadoop-hdfs-project/hadoop-hdfs-rbf |
| Console output | https://builds.apache.org/job/PreCommit-HDFS-Build/29263/console |
| versions | git=2.17.1 maven=3.6.0 findbugs=3.1.0-RC1 |
| Powered by | Apache Yetus 0.12.0 https://yetus.apache.org |


This message was automatically generated.



Upload v04, fix checkstyle.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 40s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} dupname {color} | {color:green}  0m  0s{color} | {color:green} No case conflicting files found. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 6 new or modified test files. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 18m 58s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 35s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 27s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 40s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 14m 59s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 34s{color} | {color:green} trunk passed {color} |
| {color:blue}0{color} | {color:blue} spotbugs {color} | {color:blue}  1m 13s{color} | {color:blue} Used deprecated FindBugs config; considering switching to SpotBugs. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 11s{color} | {color:green} trunk passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 28s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 28s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 18s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 13m 46s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 13s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:red}-1{color} | {color:red} unit {color} | {color:red}  8m  6s{color} | {color:red} hadoop-hdfs-rbf in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 31s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 65m 17s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.hdfs.server.federation.router.TestRouterRpcMultiDestination |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | ClientAPI=1.40 ServerAPI=1.40 base: https://builds.apache.org/job/PreCommit-HDFS-Build/29264/artifact/out/Dockerfile |
| JIRA Issue | HDFS-15340 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/13002587/HDFS-15340.004.patch |
| Optional Tests | dupname asflicense compile javac javadoc mvninstall mvnsite unit shadedclient findbugs checkstyle |
| uname | Linux ddb8f9e31add 4.15.0-58-generic #64-Ubuntu SMP Tue Aug 6 11:12:41 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | personality/hadoop.sh |
| git revision | trunk / aab9e0b16ec |
| Default Java | Private Build-1.8.0_252-8u252-b09-1~18.04-b09 |
| unit | https://builds.apache.org/job/PreCommit-HDFS-Build/29264/artifact/out/patch-unit-hadoop-hdfs-project_hadoop-hdfs-rbf.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HDFS-Build/29264/testReport/ |
| Max. process+thread count | 3001 (vs. ulimit of 5500) |
| modules | C: hadoop-hdfs-project/hadoop-hdfs-rbf U: hadoop-hdfs-project/hadoop-hdfs-rbf |
| Console output | https://builds.apache.org/job/PreCommit-HDFS-Build/29264/console |
| versions | git=2.17.1 maven=3.6.0 findbugs=3.1.0-RC1 |
| Powered by | Apache Yetus 0.12.0 https://yetus.apache.org |


This message was automatically generated.



Thanks for addressing the comments, [~LiJinglun].

Some places are confused to understand, also you need to take care for some typos, :).

Some more review comments:

*BalanceJob.java*
 Typo: {{Each procedure need}} --> {{Each procedure needs}}
 Typo: jos -> job

Can you rewrite this:
{noformat}
Start procedure {}. The last procedure is ... -- > Start procedure {}, last procedure is 
{noformat}
How about adding sleep interval time when curProcedure.execute returning false that means curProcedure executed failed? It can avoid frequently executing failed procedure.
{noformat}
if (curProcedure.execute(lastProcedure)) {
+            lastProcedure = curProcedure;
+            curProcedure = next();
+          }
{noformat}
The balancer job is same, why we always write its journal info to HDFS? Only once time is enough I think.
{noformat}
if (!scheduler.writeJournal(this)) {
+            quit = true; // Write journal failed. Simply quit because this job
+                         // has already been added to the recoverQueue.
+            LOG.debug("Write journal failed. Quit and wait for recovery.");
+          }
{noformat}
I see this is also used for testing, can you add @VisibleForTesting annotation for this?
{noformat}
+  public boolean removeAfterDone() {
+    return removeAfterDone;
+  }{noformat}
It would be better to add comment for this method, we don't know why we pass exception here.
{code:java}
private synchronized void finish(Exception exception)
{code}
*BalanceJournalInfoHDFS.java*
 Found many minor grammar rule issues, can you have a quick fix?
 * "list all jobs from journal"; – > "List all jobs from journal"
 * Need to leave one white space: builder.append(",") -> builder.append(", ");
 * clear journal of job - > Clear journal of job

*BalanceProcedure.java*
{code:java}
+  /**
+   * The main process. This is called by the ProcedureScheduler.
+
+   * Make sure the process quits fast when it's interrupted and the scheduler is
+   * shut down.
+   *
+   * @param lastProcedure the last procedure.
+   * @throws RetryException if this procedure needs delay a while then retry.
+   * @return true if the procedure has done and the job will go to the next
+   *         procedure, otherwise false.
+   */
+  public abstract boolean execute(T lastProcedure)
+      throws RetryException, IOException;
{code}
lastProcedure here is only used for testing, I suggest to remove this as an input parameter. It seems too confused that we pass lastProcedure but do nothing in actual BalanceProcedure class. The major function methods need be clear for others to understand, :).

*BalanceProcedureScheduler.java*
 For the elapse time calculation on Hadoop world, we will use Time.monotonicNow() not Time.now or System.currentTimeMillis(). Can you update for this?
{noformat}
this.time = Time.now() + delayInMilliseconds;
long delay = time - System.currentTimeMillis();
{noformat}
*UnrecoverableProcedure.java*
{code:java}
+  @Override
+  public boolean execute(BalanceProcedure lastProcedure) throws RetryException,
+      IOException {
+    if (handler != null) {
+      return handler.execute(lastProcedure);
+    } else {
+      return true;
+    }
+  }
{code}
We could use mock to throw exception, not depend on BalanceProcedure passed to throw exception. So lastProcedure can completely removed in execute method.

 

*MultiPhaseProcedure.java*

Not addressed in last review comments:

LOG.info("phase {}", currentPhase); --> LOG.info("Current phase {}", currentPhase);

Additional comments for the unit test:
{code:java}
+    CONF.setBoolean("dfs.namenode.acls.enabled", true);
{code}
Use DFSConfigKeys.DFS_NAMENODE_ACLS_ENABLED_KEY instead of.

Method *testShutdownScheduler*
{code:java}
    builder.nextProcedure(new WaitProcedure("wait", 1000, 30 * 1000));
+    BalanceJob job = builder.build();
+
+    scheduler.submit(job);
+    Thread.sleep(1000); // wait job to be scheduled.
+    scheduler.shutDownAndWait(30 * 1000);
{code}
For the testing, we don't have to use 30s to wait. It's so long time, 5s is same.
  
 Method *testGetJobAfterRecover*
{code:java}
+      assertNull(recoverJob.error());
+      assertNotSame(job, recoverJob);
+      assertEquals(job, recoverJob)
{code}
We need verify more detail info of recovered job, like firstProcedure, curProcedure and lastProcedure in this BalanceJob. This can completely check that the job is correctly recovered.
 So we should be make adjustment in {{BalanceJob#equal}}
{code:java}
  @Override
  public boolean equals(Object obj) {
    if (obj == null) {
      return false;
    }
    if (obj == this) {
      return true;
    }
    if (obj.getClass() != getClass()) {
      return false;
    }
    BalanceJob bj = (BalanceJob) obj;
    return new EqualsBuilder()
        .append(id, bj.id)
        .append(procedureTable, bj.procedureTable)
        .append(jobDone, bj.jobDone)
        .append(firstProcedure, bj.firstProcedure)
        .append(curProcedure, bj.curProcedure)
        .append(lastProcedure, bj.lastProcedure)
        .isEquals();
  }
{code}
Method *testSchedulerDownAndRecoverJob*
  
{code:java}
int len = fs.listStatus(parent).length;
+      assertTrue(len > 0 && len < 10);
+      // restart scheduler, test recovering the job.
+      scheduler = new BalanceProcedureScheduler(CONF);
+      scheduler.init(true);
+      scheduler.waitUntilDone(job);
{code}
Can we also verify the recovered job here?

Method *testRetry*
 Use Time.monotonicNow() to replace Time.now().

Additional two minor comments for method naming in BalanceJob:
 * public boolean removeAfterDone() --> shouldRemoveAfterDone()
 * public Exception error() --> gerError()

 

Hi [~linyiqun], thanks your great comments !  Upload v05.
{quote}How about adding sleep interval time when curProcedure.execute returning false that means curProcedure executed failed? It can avoid frequently executing failed procedure.
The balancer job is same, why we always write its journal info to HDFS? Only once time is enough I think.
{quote}
One procedure may have many phases and all the phases share the same member variables. Each time execute() returns, the journal is saved. User should
 serialize the current phase in write(DataOutput) so the job can continue with the last unfinished phase after it is recovered. The return value indicates whether the job should go to the next procedure. Return true after all the phases finish.
 Take DistCpProcedure for example, it actually has 5 phases. Each phase needs to be written out to journal so it can be recovered correctly. It returns true after all the phases finish.
 If the procedure needs a retry then it should throw a BalanceProcedure.RetryException. The job would be added to the delay queue. We shouldn't sleep in the job or the procedure because it will block the worker thread and affect other pending jobs.
{quote}lastProcedure here is only used for testing, I suggest to remove this as an input parameter. It seems too confused that we pass lastProcedure but do nothing in actual BalanceProcedure class. The major function methods need be clear for others to understand, .
{quote}
The reason passing the lastProcedure is having a context between upstream and downstream. For example supposing we have a topology below, A might go to either B1 or B2. With the last procedure C can have different behaviors.  Let me know your thoughts.

I'm also ok to remove it, in v05 I removed the lastProcedure.
{quote}Job:
Procedure A(start) ---> Procedure B1 ---> Procedre C --> end
                                     ---> Procedure B2 --->
{quote}

| (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  2m 12s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} dupname {color} | {color:green}  0m  0s{color} | {color:green} No case conflicting files found. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 6 new or modified test files. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 28m 14s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 41s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 26s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 45s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 19m  5s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 35s{color} | {color:green} trunk passed {color} |
| {color:blue}0{color} | {color:blue} spotbugs {color} | {color:blue}  1m 35s{color} | {color:blue} Used deprecated FindBugs config; considering switching to SpotBugs. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 32s{color} | {color:green} trunk passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 37s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 37s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 37s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 19s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 38s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 18m  8s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 33s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 38s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  9m 43s{color} | {color:green} hadoop-hdfs-rbf in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 34s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 87m 55s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | ClientAPI=1.40 ServerAPI=1.40 base: https://builds.apache.org/job/PreCommit-HDFS-Build/29270/artifact/out/Dockerfile |
| JIRA Issue | HDFS-15340 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/13002786/HDFS-15340.005.patch |
| Optional Tests | dupname asflicense compile javac javadoc mvninstall mvnsite unit shadedclient findbugs checkstyle |
| uname | Linux c2cc5445cd50 4.15.0-74-generic #84-Ubuntu SMP Thu Dec 19 08:06:28 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | personality/hadoop.sh |
| git revision | trunk / d60496e6c66 |
| Default Java | Private Build-1.8.0_252-8u252-b09-1~18.04-b09 |
|  Test Results | https://builds.apache.org/job/PreCommit-HDFS-Build/29270/testReport/ |
| Max. process+thread count | 3121 (vs. ulimit of 5500) |
| modules | C: hadoop-hdfs-project/hadoop-hdfs-rbf U: hadoop-hdfs-project/hadoop-hdfs-rbf |
| Console output | https://builds.apache.org/job/PreCommit-HDFS-Build/29270/console |
| versions | git=2.17.1 maven=3.6.0 findbugs=3.1.0-RC1 |
| Powered by | Apache Yetus 0.12.0 https://yetus.apache.org |


This message was automatically generated.



Hi [~linyiqun], thanks your nice  comments ! Upload v06.
{quote}We need verify more detail info of recovered job, like firstProcedure, curProcedure and lastProcedure in this BalanceJob. This can completely check that the job is correctly recovered.
So we should be make adjustment in {{BalanceJob#equal}}
{quote}
I think comparing job id, procedureTable and firstProcedure would be enough because they are immutable. The other infos like curProcedure, lastProcedure and jobDone change while the job runs. The initial job object might have different curProcedure, lastProcedure and jobDone with the recovered job object. But they are representing the same job.

So in v06 I only add firProcedure to the EqualsBuilder in BalanceJob#equal.  Let me know your thoughts.

| (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  1m 31s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} dupname {color} | {color:green}  0m  0s{color} | {color:green} No case conflicting files found. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 6 new or modified test files. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 21m 58s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 32s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 21s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 34s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 16m 19s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 30s{color} | {color:green} trunk passed {color} |
| {color:blue}0{color} | {color:blue} spotbugs {color} | {color:blue}  1m  7s{color} | {color:blue} Used deprecated FindBugs config; considering switching to SpotBugs. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  5s{color} | {color:green} trunk passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 31s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 26s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 26s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 16s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 29s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 15m 30s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 27s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 11s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  8m  5s{color} | {color:green} hadoop-hdfs-rbf in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 28s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 71m 31s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | ClientAPI=1.40 ServerAPI=1.40 base: https://builds.apache.org/job/PreCommit-HDFS-Build/29271/artifact/out/Dockerfile |
| JIRA Issue | HDFS-15340 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/13002809/HDFS-15340.006.patch |
| Optional Tests | dupname asflicense compile javac javadoc mvninstall mvnsite unit shadedclient findbugs checkstyle |
| uname | Linux 548c8b480e9d 4.15.0-74-generic #84-Ubuntu SMP Thu Dec 19 08:06:28 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | personality/hadoop.sh |
| git revision | trunk / 743c2e9071f |
| Default Java | Private Build-1.8.0_252-8u252-b09-1~18.04-b09 |
|  Test Results | https://builds.apache.org/job/PreCommit-HDFS-Build/29271/testReport/ |
| Max. process+thread count | 3214 (vs. ulimit of 5500) |
| modules | C: hadoop-hdfs-project/hadoop-hdfs-rbf U: hadoop-hdfs-project/hadoop-hdfs-rbf |
| Console output | https://builds.apache.org/job/PreCommit-HDFS-Build/29271/console |
| versions | git=2.17.1 maven=3.6.0 findbugs=3.1.0-RC1 |
| Powered by | Apache Yetus 0.12.0 https://yetus.apache.org |


This message was automatically generated.



The comment makes sense to me, thanks [~LiJinglun]. And the latest parch almost looks good now.
{quote}The reason passing the lastProcedure is having a context between upstream and downstream. For example supposing we have a topology below, A might go to either B1 or B2. With the last procedure C can have different behaviors. Let me know your thoughts.
 I'm also ok to remove it, in v05 I removed the lastProcedure.
{quote}
In current fed discp balance scenario, we don't really need to have a context with upstream I think. So I'm +1 to remove lastProcedure.
{quote}I think comparing job id, procedureTable and firstProcedure would be enough because they are immutable. The other infos like curProcedure, lastProcedure and jobDone change while the job runs. The initial job object might have different curProcedure, lastProcedure and jobDone with the recovered job object. But they are representing the same job
{quote}
Yes, I agree that comparing with job id, procedureTable and firstProcedure should enough. Here my point is that we need to verify that the job is correctly be recovered from HDFS journal, including last stage info that job has finished successfully. Then the recovered job can continue to next stage to run.

In current ut, following check is not enough, we need to add last procedure stage assert check as well.
{code:java}
assertNotSame(job, recoverJob);
assertEquals(job, recoverJob)
{code}
 
 In addition, can you add some necessary comment for method BalanceJournalInfoHDFS#saveJob to describe about hdfs journal file layout? This can let us quickly know how job journal files are organized in HDFS. It takes me some time to understand this :D. 

Can you rename these two method names as well?
 private Path getNextJob(BalanceJob job) -> getNewStateJobPath
 private Path getLatestJob(BalanceJob job) -> getLatestStateJobPath

Hi [~linyiqun], thanks your great comments  !  Address all the comments and upload v07.

| (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  1m 35s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} dupname {color} | {color:green}  0m  1s{color} | {color:green} No case conflicting files found. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 6 new or modified test files. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 22m 10s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 33s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 20s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 36s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 16m 34s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 31s{color} | {color:green} trunk passed {color} |
| {color:blue}0{color} | {color:blue} spotbugs {color} | {color:blue}  1m 19s{color} | {color:blue} Used deprecated FindBugs config; considering switching to SpotBugs. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 17s{color} | {color:green} trunk passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 37s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 39s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 39s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 23s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 42s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 17m 51s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 34s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 32s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  9m 45s{color} | {color:green} hadoop-hdfs-rbf in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 37s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 78m  4s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | ClientAPI=1.40 ServerAPI=1.40 base: https://builds.apache.org/job/PreCommit-HDFS-Build/29277/artifact/out/Dockerfile |
| JIRA Issue | HDFS-15340 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/13002889/HDFS-15340.007.patch |
| Optional Tests | dupname asflicense compile javac javadoc mvninstall mvnsite unit shadedclient findbugs checkstyle |
| uname | Linux d58cb0541668 4.15.0-74-generic #84-Ubuntu SMP Thu Dec 19 08:06:28 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | personality/hadoop.sh |
| git revision | trunk / 0918433b4da |
| Default Java | Private Build-1.8.0_252-8u252-b09-1~18.04-b09 |
|  Test Results | https://builds.apache.org/job/PreCommit-HDFS-Build/29277/testReport/ |
| Max. process+thread count | 3108 (vs. ulimit of 5500) |
| modules | C: hadoop-hdfs-project/hadoop-hdfs-rbf U: hadoop-hdfs-project/hadoop-hdfs-rbf |
| Console output | https://builds.apache.org/job/PreCommit-HDFS-Build/29277/console |
| versions | git=2.17.1 maven=3.6.0 findbugs=3.1.0-RC1 |
| Powered by | Apache Yetus 0.12.0 https://yetus.apache.org |


This message was automatically generated.



Thanks, [~LiJinglun].

{code}
+      for (int i = 0; i < recoverIndex; i++) {
+        // All procedures before recoverProcedure shouldn't be executed.
+        assertFalse(recoveredProcedures.get(i).getExecuted());
+      }
+      for (int i = recoverIndex; i < procedures.length; i++) {
+        // All procedures start from recoverProcedure should be executed.
+        assertTrue(recoveredProcedures.get(i).getExecuted());
+      }
{code}
Not fully get this. Here we have procedures like this
1st procedure -> 2nd procedure -> .. ->  recoveredProcedure -> .. ->.

Why not is following? Maybe I am missing something, : ).
{code}
+      for (int i = 0; i < recoverIndex; i++) {
+        assertTrue(recoveredProcedures.get(i).getExecuted());
+      }
+      for (int i = recoverIndex; i < procedures.length; i++) {
+        assertFalse(recoveredProcedures.get(i).getExecuted());
+      }
{code}

I catch one place seems not correct.
{code}
+    if (currentProcedureName.equals(NEXT_PROCEDURE_NONE)) {
+      curProcedure = null;
+    } else {
+      curProcedure = procedureTable.get(currentProcedureName);
+    }
+    String lastProcedureName = Text.readString(in);
+    if (lastProcedureName.equals(NEXT_PROCEDURE_NONE)) {
+      lastProcedure = null;
+    } else {
+      lastProcedure = procedureTable.get(currentProcedureName);  <-- should be lastProcedureName I think
+    }
{code}

Others looks good to me. 
[~ayushtkn], [~elgoiri], would you mind doing additional review for this?
 I will hold off the commit for few days. Thanks.

Hi [~linyiqun], thanks your nice comments !

 

A tricky problem when testing the 'the last stage is recovered successfully' is I can't catch the moment the job is recovered by the scheduler. After the job is recovered it will be scheduled immediately and the curProcedure, lastProcedure will change.

So I choose to do the test after the recovered job finishes.  The last stage is recovered successfully is equivalent to the recovered job continues with the last unfinished procedure. In the test I do all the verification after the recovered job is done.

The recoverProcedures is fetched from the recovered job. If the job continues from the recoverProcedure, then all the procedures before the recoverProcedure shouldn't be executed again. And the procedures after the recoverProcedure(including the recoverProcedure) should all be  executed.

The member WaitProcedure#executed is not serialized/deserialized, so after the job is recovered the WaitProcedure#executed will be false. Only the procedures that are executed after the recovery have the WaitProcedure#executed=true.

 
+      lastProcedure = procedureTable.get(currentProcedureName);  <-- should be lastProcedureName I think
Yes, your are right ! Thanks for pointing it out ! Fix it and upload v08.

| (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  1m 29s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} dupname {color} | {color:green}  0m  0s{color} | {color:green} No case conflicting files found. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 6 new or modified test files. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 21m 28s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 32s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 20s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 35s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 16m 26s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 29s{color} | {color:green} trunk passed {color} |
| {color:blue}0{color} | {color:blue} spotbugs {color} | {color:blue}  1m  8s{color} | {color:blue} Used deprecated FindBugs config; considering switching to SpotBugs. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m  5s{color} | {color:green} trunk passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 30s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 26s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 26s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 16s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 28s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 15m 25s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 27s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  1m 12s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  8m  5s{color} | {color:green} hadoop-hdfs-rbf in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 30s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 71m  3s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | ClientAPI=1.40 ServerAPI=1.40 base: https://builds.apache.org/job/PreCommit-HDFS-Build/29279/artifact/out/Dockerfile |
| JIRA Issue | HDFS-15340 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/13002931/HDFS-15340.008.patch |
| Optional Tests | dupname asflicense compile javac javadoc mvninstall mvnsite unit shadedclient findbugs checkstyle |
| uname | Linux c2062d628682 4.15.0-74-generic #84-Ubuntu SMP Thu Dec 19 08:06:28 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | personality/hadoop.sh |
| git revision | trunk / 6ce295b7873 |
| Default Java | Private Build-1.8.0_252-8u252-b09-1~18.04-b09 |
|  Test Results | https://builds.apache.org/job/PreCommit-HDFS-Build/29279/testReport/ |
| Max. process+thread count | 3359 (vs. ulimit of 5500) |
| modules | C: hadoop-hdfs-project/hadoop-hdfs-rbf U: hadoop-hdfs-project/hadoop-hdfs-rbf |
| Console output | https://builds.apache.org/job/PreCommit-HDFS-Build/29279/console |
| versions | git=2.17.1 maven=3.6.0 findbugs=3.1.0-RC1 |
| Powered by | Apache Yetus 0.12.0 https://yetus.apache.org |


This message was automatically generated.



Get it, thanks for the explanation, [~LiJinglun].

+1 from me.

BTW, I am thinking one further thing that rbf federation balancer can be separate into a common independent module (will both make sense to rbf cluster balance or normal independent cluster balance). Now, I see the code change is made in hdfs rbf project but actually this can completely separate into fed balance module. Not have to make this refactor now, just from my personal thought.

Hi [~ayushtkn], could you have time to review the latest patch to see if it has addressed your review comments?

I will commit this next week once after you confirmed that.

Thanx [~linyiqun] for holding, I had a quick look on it, my comments are addressed.  

+1 on  [^HDFS-15340.008.patch].

[~ayushtkn], [~elgoiri], thanks for your confirmation. 

Committed this to trunk.  Thanks [~LiJinglun]  for the hard working on this.

Since this is a little huge change, we can do the quick fix once we find we missing something in follow-up subtasks.

SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #18278 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/18278/])
HDFS-15340. RBF: Implement BalanceProcedureScheduler basic framework. (yqlin: rev 1983eea62def58fb769f44c1d41dc29690274809)
* (add) hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/procedure/BalanceJournalInfoHDFS.java
* (add) hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/procedure/RetryProcedure.java
* (add) hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/procedure/WaitProcedure.java
* (add) hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/procedure/BalanceJournal.java
* (add) hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/procedure/MultiPhaseProcedure.java
* (add) hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/procedure/BalanceProcedureScheduler.java
* (add) hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/procedure/BalanceJob.java
* (add) hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/procedure/BalanceProcedure.java
* (add) hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/procedure/RecordProcedure.java
* (add) hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/procedure/BalanceProcedureConfigKeys.java
* (add) hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/procedure/package-info.java
* (add) hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/procedure/UnrecoverableProcedure.java
* (add) hadoop-hdfs-project/hadoop-hdfs-rbf/src/test/java/org/apache/hadoop/hdfs/procedure/TestBalanceProcedureScheduler.java


