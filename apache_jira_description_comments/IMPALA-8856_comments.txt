Looking at the Kudu master log, there has been two DeleteTable requests for table "test_drop_managed_kudu_table_a82c250c.foo". Because the drop HMS table took more than 10s to finish, the first request timed out and the client issued a retry. The retry failed because the table has been already deleted by the first request.

{noformat}
W0812 14:49:59.766089 29240 hms_client.cc:275] Time spent drop HMS table: real 13.625s	user 0.000s	sys 0.000s
W0812 14:49:59.766505 29179 rpcz_store.cc:253] Call kudu.master.MasterService.DeleteTable from 127.0.0.1:42892 (request call id 3) took 13631 ms (13.6 s). Client timeout 9999 ms (10 s)
{noformat}

The end result is the table has been deleted in Kudu and the HMS. And as Kudu depends on the HMS, the client can receive 'Not Found' error even though the table has already been deleted with a default timeout config. So I don't think this is a blocker, rather it is a test flakiness.

[~hahao] we still need to fix the test though so we can have consistently clean builds. How would we make the test more robust?

I think there are two options 1) increase the Kudu client time out config via setting the kudu_client_rpc_timeout_ms flag; 2) catch the exception and check if it is a 'NotFound' error. If so, then move on with the test.  I am leaning towards the first option as it is not only DeleteTable RPC can time out. Does that sound good to you? If so, I can post a patch using the first option.

[~hahao] yeah that sounds good to me. 

Commit d5d3ace6c27123f788dc292a651f1df0c8620686 in impala's branch refs/heads/master from Hao Hao
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=d5d3ace ]

IMPALA-8856: Deflake TestKuduHMSIntegration

Tests for Kudu's integration with the Hive Metastore can be flaky.
Since Kudu depends on the HMS, create/drop table requests can timeout
when creation/deletion in the HMS take more than 10s, and the following
retry will fail as the table has been already created/deleted by the
first request.

This patch increases the timeout of individual Kudu client rpcs to
avoid flakiness cause by such cases.

Change-Id: Ib98f34bb831b9255e35b5ef234abe6ceaf261bfd
Reviewed-on: http://gerrit.cloudera.org:8080/14067
Reviewed-by: Tim Armstrong <tarmstrong@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Thanks [~hahao] !

