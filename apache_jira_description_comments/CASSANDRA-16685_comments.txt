Managed to repro with the {{RepeatableRunner}} locally on 500 iterations. Basically there is a small window where the task signals completion on a count down latch but the pool executor is still tidying up the environment. Hence a new submission is rejected. The fix is to wait for the pool to be ready to accept new tasks.

The underlying root problem seems to stem from java's {{ThreadPool}} and {{SynchronousQueue}} interactions. The queue will fail {{offer()}} calls if there is no thread ready to read. At the same time the TP can be bouncing and spinning threads around internally. If you happen to submit a task during that window you will get false rejections. Other people have hit this, it can be googled easily, and it seems to be an internal Java thing.

Reproduction is easy with the {{RepeteableRunner}} for the single test method where it fails around 10%. 500 runs is a good start, you'll have to rename the KS on each iteration though. I am providing a pure java test, with no C* code involved, as proof this is a generic issue and not related to our codebase

{code:java}
    @Test
    public void testTP() throws InterruptedException
    {
        ExecutorService validationExecutor = null;
        try
        {
            ThreadPoolExecutor executor = new ThreadPoolExecutor(1,
                                                                 2,
                                                                 1,
                                                                 TimeUnit.HOURS,
                                                                 new SynchronousQueue<>(),
                                                                 new NamedThreadFactory("Repair-Task"));
            executor.setRejectedExecutionHandler(new ThreadPoolExecutor.AbortPolicy());
            executor.prestartAllCoreThreads();
            validationExecutor = executor;
            Condition blocked = new SimpleCondition();
            CountDownLatch completed = new CountDownLatch(2);
            //Thread.sleep(100);
            validationExecutor.submit(new Task(blocked, completed));
            //Thread.sleep(100);
            validationExecutor.submit(new Task(blocked, completed));
            blocked.signalAll();
            completed.await(11, TimeUnit.SECONDS);
        }
        finally
        {
            validationExecutor.shutdownNow();
        }
    }
{code}

The solution is to add a {{Thread.sleep()}} to give the TP time to sort itself before accepting new tasks. It's ugly but I can't come up with a better idea.

In the PR 1K CI repeats can be found.

+1 

+1

Thx for the review guys!

