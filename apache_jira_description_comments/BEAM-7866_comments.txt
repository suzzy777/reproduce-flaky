Thanks for looking into this, I'll try to address them asap.

Thanks Eugene for pointing out these issues.

 

Seems like, in the Java implementation, we build splits with specific IDs. Probably we can do something similar for Python ? 

[https://github.com/apache/beam/blob/master/sdks/java/io/mongodb/src/main/java/org/apache/beam/sdk/io/mongodb/MongoDbIO.java#L519]

 

BTW is it correct to assume that the source will be correct if that MongoDB instance stays static (without any data insertion/deletion/update) for the duration of the execution of the read step ? (I understand that this might be improbable for many applications of the Database).

Seems like elements will have the same order for different find() calls if the database is static since MongoDB defaults to natural sort order.

[https://docs.mongodb.com/manual/reference/glossary/#term-natural-order]

Yes, splitting by range of id is the right thing to do. And the range of ids has to be captured during split() rather than during constructor - constructor can not do any IO.

I don't see anything in MongoDB documentation saying that the natural order is deterministic; https://stackoverflow.com/questions/15467099/mongodb-store-and-select-order says that it is not.

I looked into the split key methods using splitVector in java previously, and found no documentation of how to use python client to do the same thing.

After many trial and errors I figure out how to call the same api, and will change the split to using splitVector. 

Any ETA on this? [~yichi]

PR is under review, hopefully I can get this done this week.

The PR got merged. I mark this ticket as resolved.

