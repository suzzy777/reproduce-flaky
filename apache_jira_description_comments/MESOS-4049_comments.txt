+100

It would be great to add such intelligent feature. BTW: It might be more align with linux concept if we can name the transaction task state as "ZOMBIE".

I'm not sure {{ZOMBIE}} accurately describes the intended behavior -- for example, in Unix a zombie process cannot come back to life. A zombie process is definitely dead (it just hasn't been properly cleaned up), whereas in this case the true state of the task is not known (to the master/framework).

I like {{replacement task}} feature :). Just want to confirm: in this JIRA, Mesos only provide a new state about connection glitch ({{UNKNOWN}} or {{WANDERING}}); "replacement task" is handled by framework.

Yes.

[~neilc]Got it, thanks! Then I think that we may need to consider the case if a UNKNOW or WANDERING task got killed? Shall we mark this as ZOMBIE and when the host come back, just mark the ZOMBIE as TASK_FINISH.

And which timepoint would you like to report the new state to framework? Ping failed or configurable e.g. after # ping failed (< max_slave_ping_times)?

Looks like use case one "Some users might want to aggressively start a new replacement task" would require MESOS-4048 but we can start with this ticket relying on {{max_slave_ping_timeouts * slave_ping_timeout}}.

Initial design doc for this feature: https://docs.google.com/document/d/1AYoF5HZPRdQN2TsRpPOliGC6oHen6aHVc0FBOo30rLQ

https://reviews.apache.org/r/50699/
https://reviews.apache.org/r/50700/
https://reviews.apache.org/r/50701/
https://reviews.apache.org/r/50702/
https://reviews.apache.org/r/50703/
https://reviews.apache.org/r/50704/
https://reviews.apache.org/r/50705/
https://reviews.apache.org/r/50706/
https://reviews.apache.org/r/50707/


commit 5220f77582a14d4cdd0a907ba8af6e9db87d8ab7
Author: Neil Conway <neil.conway@gmail.com>
Date:   Fri Aug 5 16:41:41 2016 -0700

    Future-proofed some slave removal tests.
    
    These tests relied on the implementation detail that when an agent is
    removed from the list of registered agents, the master sends a
    ShutdownSlaveMessage to the agent. That will change in the future
    (MESOS-4049). To prepare for this future planned behavior, adjust these
    tests to be more robust by instead checking for the invocation of the
    `slaveLost` scheduler callback.
    
    Review: https://reviews.apache.org/r/50422/

commit 8a0b17a11560f482628e890094e83400fa805a80
Author: Neil Conway <neil.conway@gmail.com>
Date:   Fri Aug 5 16:41:35 2016 -0700

    Cleaned up comments in fault tolerance tests.
    
    Review: https://reviews.apache.org/r/50418/

commit 5de96fa4b3e603553dbae3f06aff6621b268a7be
Author: Neil Conway <neil.conway@gmail.com>
Date:   Fri Aug 5 16:41:28 2016 -0700

    Improved consistency of test code for partitioning an agent.
    
    Removed unnecessary `Clock::settle` calls: `Clock::settle` should
    typically only be used when a test case does not have an easy way to
    wait for a _specific_ event to occur. In this case, `Clock::settle` was
    unnecessary because the test code immediately proceeded to `AWAIT_READY`
    for a more specific event.
    
    Also fixed up some whitespace.
    
    Review: https://reviews.apache.org/r/50417/

commit 60dbd347b409c788776760a8270965d943b6806e
Author: Neil Conway <neil.conway@gmail.com>
Date:   Fri Aug 5 16:41:18 2016 -0700

    Added more assertions to master code.
    
    Review: https://reviews.apache.org/r/50416/
commit 29925658291be60bda7af7f83225d743e8d24870
Author: Neil Conway <neil.conway@gmail.com>
Date:   Fri Aug 5 16:41:10 2016 -0700

    Added more expectations to TASK_LOST test cases.
    
    Check the reason and source of TASK_LOST status updates, replaced
    ASSERT_ with EXPECT_ in various places where EXPECT_ is more
    appropriate.
    
    Review: https://reviews.apache.org/r/50235/


Author: Neil Conway <neil.conway@gmail.com>
Date:   Fri Aug 26 14:48:47 2016 -0700

    Made a few minor tweaks to comments.
    
    Review: https://reviews.apache.org/r/50704/

commit 0b90cccaca0069a2e2fff54d1424d205659346a3
Author: Neil Conway <neil.conway@gmail.com>
Date:   Fri Aug 26 14:48:39 2016 -0700

    Removed a no-longer-relevant test.
    
    The behavior this test is trying to validate (slaves receive a
    `ShutdownMessage` if they attempt to reregister after failing health
    checks) will be changed shortly. Moreover, the new behavior is already
    covered by other test cases.
    
    Review: https://reviews.apache.org/r/50703/

commit 93016d37bf8833d7a78ada9c4ec59a374419ba35
Author: Neil Conway <neil.conway@gmail.com>
Date:   Fri Aug 26 14:48:16 2016 -0700

    Renamed metrics from "slave_shutdowns" to "slave_unreachable".
    
    The master will shortly be changed to no longer shutdown unhealthy
    agents, so the previous metric name is no longer accurate. The old
    metric names have been kept for backwards compatibility, but they
    are no longer updated (i.e., they will always be set to zero).
    
    Review: https://reviews.apache.org/r/50702/

commit af496f3a80da9a8e7961fb62f839aacf1658222e
Author: Neil Conway <neil.conway@gmail.com>
Date:   Fri Aug 26 14:48:07 2016 -0700

    Added registrar operations for marking agents (un-)reachable.
    
    Review: https://reviews.apache.org/r/50701/

commit 540591407729ae9eaf81f68cb025b181782c5b99
Author: Neil Conway <neil.conway@gmail.com>
Date:   Fri Aug 26 14:48:03 2016 -0700

    Added a list of "unreachable" agents to the registry.
    
    These are agents that have failed health checks.
    
    Review: https://reviews.apache.org/r/50700/

commit c3268cad3621a6373ff331d882393b2ada064f4b
Author: Neil Conway <neil.conway@gmail.com>
Date:   Fri Aug 26 14:47:53 2016 -0700

    Added new TaskState values and PARTITION_AWARE capability.
    
    TASK_DROPPED, TASK_UNREACHABLE, TASK_GONE, TASK_GONE_BY_OPERATOR, and
    TASK_UNKNOWN. These values are intended to replace the existing
    TASK_LOST state by offering more fine-grained information on the
    current state of a task. These states will only be sent to frameworks
    that opt into this new behavior via the PARTITION_AWARE capability.
    
    Note that this commit doesn't add a master metric for the TASK_UNKNOWN
    status, because this is a "default" status reported when the master has
    no knowledge of a particular task/agent ID. Hence the number of
    "unknown" tasks at any given time is not a well-defined metric.
    
    Review: https://reviews.apache.org/r/50699/


commit 29236068f23b6cfbd19d7a4b5b96be852818a356
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:49:38 2016 -0700

    Removed use of "--registry_strict" master flag.
    
    The flag will remain for a few more months per the deprecation policy,
    but we no longer need to set it in the unit tests. Providing an
    extensive usage summary in "--help" output also doesn't seem useful.
    
    Review: https://reviews.apache.org/r/51958/

commit 6280299bf78f42929daecd271cbdad4e6ce24f62
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:49:34 2016 -0700

    Removed "strictness" parameter from RegistrarTest and PartitionTest.
    
    This parameter should no longer result in any difference in behavior.
    
    Review: https://reviews.apache.org/r/51957/

commit 89a78b873f5751714fefc7e97e1249e094d1e68a
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:49:29 2016 -0700

    Squelched GMock warning in MasterTest.RecoveredSlaveCanReregister.
    
    After the slave reregisters, the framework might receive an offer for
    the resources on that slave.
    
    Review: https://reviews.apache.org/r/51956/

commit 905204e54748c5842f96997db41f9ff14d9246ab
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:49:23 2016 -0700

    Removed dependency on "registry_strict" in master failover.
    
    When the master fails over, agents have `agent_reregister_timeout` to
    reregister with the new master. Any agents that fail to reregister
    within the timeout will be marked unreachable in the registry.
    Previously, frameworks would only receive a `slaveLost` callback for
    such agents if the master was running in "registry_strict" mode. This
    commit changes the master to always inform frameworks about lost agents,
    regardless of the "registry_strict" flag.
    
    Review: https://reviews.apache.org/r/51955/

commit ef9211f0e1a77896f0c5cee032dc032e9d3a0c5c
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:49:19 2016 -0700

    Removed the "strict" flag from the registry operation interface.
    
    This flag is now ignored by all registry operations, so this should
    not result in a functional change.
    
    Review: https://reviews.apache.org/r/51954/

commit 9fa99618eec85624f44b026804c89be509e18f26
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:49:13 2016 -0700

    Changed registrar operations to no longer depend on "strict" flag.
    
    Registrar operations to admit and remove slaves now behave the same way,
    regardless of the value of the "strict" flag.
    
    This commit changes the behavior of these operations by enabling the
    previous "strict" behavior. For example, removing a slave that is not
    registered results in an `Error`, rather than silently ignoring the
    problem. However, the master should never attempt to remove a slave that
    is not registered, so this is a useful invariant to check. Similarly,
    attempting to admit a slave that is already admitted will now result in
    an `Error`; this should only occur when there is a slave ID collision,
    so again it seems appropriate to produce an error rather than ignoring
    the problem.
    
    Review: https://reviews.apache.org/r/51953/

commit d9d6f7ccf4dbd3826a687fc1c348a8e2f952ed58
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:49:07 2016 -0700

    Ignored agent registrations with duplicate agent IDs.
    
    If an agent attempts to register and is assigned an agent ID that
    already appears in the registry, the likely cause is a UUID collision:
    slave IDs are prefixed with master IDs, and master IDs are randomly
    generated UUIDs. UUID collisions are extremely unlikely, so in practice
    this should never happen.
    
    This commit updates the comments to clarify how unlikely this situation
    is. Furthermore, when it does happen, the master now just ignores the
    registration attempt, rather than trying to shutdown the agent. This is
    simpler; the agent will eventually try to register again and be assigned
    a new agent ID. Finally, it is unclear that shutting down the agent is
    actually appropriate: the previous coding added the duplicate ID to
    `slaves.removed`, which will interfere with the activity of the other
    slave whose ID we collided with.
    
    Review: https://reviews.apache.org/r/51913/
commit aae819684f61f4cb811e0629731a57bdd6f8f3fe
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:49:04 2016 -0700

    Added benchmarks for new registry operations.
    
    These benchmarks cover:
    
      1. The time taken to make all registered agents unreachable and then
         reachable. This is similar to what happens during a severe network
         partition.
    
      2. The time taken to GC a significant fraction (50%) of the
         unreachable list from the registry.
    
    Review: https://reviews.apache.org/r/51909/

commit 47bd3e458b8cfcfd1ca0114419e56069da15453f
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:48:54 2016 -0700

    Added test case for registry GC race condition.
    
    If GC occurs concurrently with another operation that changes the
    registry (e.g., reregistration of an agent that is also going to be
    removed by the GC operation), the GC might not be able to prune as
    many entries as expected from the registry.
    
    Along the way, this commit updates the master's logging to emit
    a warning in this situation. It also corrects an inaccuracy: we
    should report the number of agents we actually pruned from the
    registry, not the number we _attempted_ to reclaim.
    
    Review: https://reviews.apache.org/r/51891/

commit 6172da93d883cf2bafb7cf195ad119d480434329
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:48:48 2016 -0700

    Improved SlaveTest.HealthCheckUnregisterRace.
    
    Now that the MockRegistrar has been introduced, we can assert
    that the master doesn't do a registry operation in certain
    situations.
    
    Review: https://reviews.apache.org/r/51845/

commit fac32e4d7f430d612b9ffc985e4c55a0ae3312fc
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:48:42 2016 -0700

    Updated master to send TASK_UNREACHABLE task state.
    
    When a task launched by a partition-aware framework is running on an
    agent that becomes partitioned from the master, the framework will now
    receive TASK_UNREACHABLE, not TASK_LOST.
    
    Similarly, when a partition-aware framework does explicit reconciliation
    for an agent ID that appears in the "unreachable" list in the registry,
    the master will now return TASK_UNREACHABLE rather than TASK_LOST.
    
    Review: https://reviews.apache.org/r/51805/

commit 81fe779b46e48eff2fde51e8d21402cb7eee006b
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:48:36 2016 -0700

    Fixed races between "unreachable" and "unregister" slave transitions.
    
    Now that we update the registry before updating the master's state when
    performing these transitions, it is possible for the master to already
    be marking a slave unreachable when an `UnregisterSlaveMessage` is
    received, or vice versa. Detect these situations and ignore whichever
    transition is triggered second.
    
    Review: https://reviews.apache.org/r/51707/

commit 5e66002cec7855055245e328c34a783a55c542f6
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:48:30 2016 -0700

    Handled agents failing health checks multiple times.
    
    Now that we wait for the agent to be removed from the registry before
    stopping the SlaveObserver, it is possible for an agent to fail health
    checks multiple times if the registry operation takes longer than
    `agent_ping_timeout`.
    
    This commit updates the master logic to handle this by ignoring health
    check failures while the registry operation to mark the agent
    unreachable is still in progress.
    
    Review: https://reviews.apache.org/r/51653/

commit 0d85e7eb4b2da50ebd79f4ef53183745eba42f48
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:48:23 2016 -0700

    Tweaked logging for UnregisterSlaveMessage handler.
    
    Remove a redundant log line: rather than logging when we receive
    an UnregisterSlaveMessage, it is sufficient to log how we handle
    that message. Also ensure that we log when ignoring an agent
    unregister message for an unknown agent, and do some minor code
    cleanup.
    
    Review: https://reviews.apache.org/r/51706/

commit 9dad0b034c99403cab43cab0a6ea8a55e99e71fa
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:48:16 2016 -0700

    Added GC of unreachable agent metadata from the registry.
    
    Information about agents that have been marked unreachable is stored
    in the registry. Since the number of unreachable agents can grow without
    bound, this commit implements a garbage collection scheme. The current
    leading master will periodically examine the registry and discard
    information about unreachable agents according to two criteria:
    `registry_max_agent_age` and `registry_max_agent_count`. The frequency
    with which the master examines the registry is controlled by a third
    parameter, `registry_gc_interval`.
    
    Review: https://reviews.apache.org/r/51021/

commit 592da1edc2a5279f8851a8f30a1425229e8fbaca
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:48:11 2016 -0700

    Added test for HTTP endpoints during slave removal.
    
    When a slave is being removed but before the registry operation to
    remove it has completed, querying the HTTP endpoints at the master
    should not indicate that the slave has been removed yet. This is
    important because the registry update might fail; if the master
    fails over, the new master will not have removed the slave.
    
    Review: https://reviews.apache.org/r/51377/

commit 87b94314b1490ef7035e9ec5e8e071dfc1f12309
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:48:06 2016 -0700

    Adjusted existing tests to use MockRegistrar.
    
    This means that `Master::_reregisterSlave` can be made private.
    
    Review: https://reviews.apache.org/r/51376/

commit 80993da4cefa88a60a63134fadbc2a3f183dfd46
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:48:02 2016 -0700

    Introduced MockRegistrar.
    
    This allows test cases to inspect how the master interacts with
    the registry.
    
    This commit changes `tests::cluster::Master` to use `MockRegistrar`
    exclusively, even for test cases that aren't interested in mocking
    aspects of the master <-> registrar interaction. However, this should be
    harmless, since by default `MockRegistrar` behaves identically to the
    normal registrar.
    
    Review: https://reviews.apache.org/r/51375/

commit 88b2533a72ff5897bc6cc5d7861a313c6fd7ea28
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:47:53 2016 -0700

    Change registry update order on removal, mark-unreachable.
    
    This commit changes the master so that we always update the registry
    for an important change (e.g., removing an agent or marking an agent
    unreachable), before updating the important parts of the master's
    in-memory state (e.g., the in-memory list of registered agents).
    Previously, the registry was updated first for registration and
    reregistration, but second for removal and marking unreachable.
    Updating the registry first is simpler, and also avoids possibly
    leaking inaccurate information (e.g., via HTTP endpoints) if the
    registry operation fails.
    
    Review: https://reviews.apache.org/r/51374/

commit 0cb248044c23ff702a1099e724474fe5c1a5c17e
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:47:48 2016 -0700

    Fixed flakiness in MasterAuthorizationTest.SlaveDisconnected.
    
    The goal of this test is to check this interleaving:
    
      task launch: block on authorization
      slave terminates gracefully: removed by master
      auth succeeds: we expect the task launch to fail
    
    However, the test neglected to ensure that slave removal was completed
    before allowing authorization to succeed.
    
    Review: https://reviews.apache.org/r/51371/

commit df037de65facd02ac179cecd7dc5c62243694fc5
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:47:41 2016 -0700

    Clarified a log message.
    
    Review: https://reviews.apache.org/r/51020/

commit 3cecdbdd4b727567c621f999fb8df45116f0a979
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:47:33 2016 -0700

    Added more assertions to the master.
    
    Review: https://reviews.apache.org/r/50846/

commit ac26919329cb137e09b1a6c8ef500dea2aa908eb
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:47:26 2016 -0700

    Added `unreachable_time` to TaskStatus.
    
    This field contains the time at which the master marked an agent as
    unreachable. It will only be set for status updates (including
    reconciliation updates) that describe tasks running on unreachable
    (e.g., partitioned) agents.
    
    The intent is to help frameworks decide how to handle tasks running on
    partitioned agents: since the framework might have missed the initial
    TASK_LOST/TASK_UNREACHABLE status update (e.g., due to framework
    downtime/failover), it might otherwise be difficult for frameworks to
    determine how long an agent has been partitioned.
    
    This unreachable timestamp is stored in the registry and loaded as part
    of master recovery.
    
    Review: https://reviews.apache.org/r/50845/

commit 06506faea2b9ead713907e8dd19ab53505dc93cf
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:47:19 2016 -0700

    Fixed outdated comment.
    
    Review: https://reviews.apache.org/r/50844/

commit 504e05ee60c3648a4bf2d7433f1380731db8999f
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:47:14 2016 -0700

    Added test for race between health checks and agent unregistration.
    
    This test tries to simulate a race between marking an agent unhealthy
    and receiving an `UnregisterSlaveMessage` for that agent.
    
    Unfortunately, this test is a little fragile (we need to manually
    dispatch an event to the master process to simulate the action that
    would be taken by the slave observer).
    Review: https://reviews.apache.org/r/50707/

commit 9ba79daead85cb84759582e1aacf41eea0d43054
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:47:09 2016 -0700

    Added test cases for PARTITION_AWARE behavior.
    
    Review: https://reviews.apache.org/r/50706/

commit 937c85f2f6528d1ac56ea9a7aa174ca0bd371d0c
Author: Neil Conway <neil.conway@gmail.com>
Date:   Mon Sep 19 15:47:01 2016 -0700

    Changed master to allow partitioned slaves to reregister.
    
    The previous behavior was to shutdown partitioned agents that attempt to
    reregister---unless the master has failed over, in which case the
    reregistration is allowed (when running in "non-strict" mode).
    
    The new behavior is always to allow partitioned agents to reregister.
    This is part of a longer-term project to allow frameworks to define
    their own policies for handling tasks running on partitioned agents.
    
    In particular, if a framework has the PARTITION_AWARE capability, any
    tasks running on the partitioned agent will continue to run after
    reregistration. If the framework is not PARTITION_AWARE, any tasks that
    were running on such an agent will be killed after the agent reregisters
    (unless the master has failed over). This is for backward compatibility
    with the previous ("non-strict") behavior. Note that regardless of the
    PARTITION_AWARE capability, the agent will not be shutdown, which is a
    change from the previous Mesos behavior.
    
    This commit also changes the master so that if an agent is removed and
    then the master receives a message from that agent, the master will no
    longer attempt to shutdown the agent. This is consistent with the goal
    of getting the master out of the business of shutting down agents that
    we suspect are unhealthy. Such an agent will eventually realize it is
    not registered with the master (e.g., because it won't receive any pings
    from the master), which will cause it to reregister.
    
    Review: https://reviews.apache.org/r/50705/



