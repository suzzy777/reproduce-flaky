I noticed this test only started to appear (and fail) after CASSANDRA-18262, perhaps due to running checkstyle for both j8 and j11?  I reverted it and ran a build [here|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2410/] where the test did not fail.

I tested my theory by changing checkstyle to only run on j8 [here|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2412/] and indeed, that solves it.

[~brandon.williams] I'll take a look at the cause. 

Thanks for raising the ticket, I just linked it in Butler for reference

[~mmuzaf] , did you have any chance to look into this?

In another ticket we have a checkstyle check that fails only with 17 due to the way it is implemented now. Depending on how we move on here, we can take one or another direction with the mentioned ticket. Also, I still do not believe it was ok to dismiss a reviewer's feedback and the agreement we had as a community to run it only with the default JDK but that is another topic...

[~e.dimitrova],

I am trying to cover the last mile with another ticket and get back here soon. Can you share details for the issue you mentioned (logs)?

Please don't get me wrong, I'm not against your feedback, I just don't understand what exactly I did wrong in trying to help move the jdk17 activities forward :-) Should we start a discussion on the dev-list and reflect an agreed commitment for source code checks on our confluence wiki?

{quote}I am trying to cover the last mile with another ticket and get back here soon.
{quote}
Ok, thanks
{quote}Can you share details for the issue you mentioned (logs)?
{quote}
That is a separate issue in a patch in-progress. It is not related at all to what you tackle here. Just I need to know whether this will be reverted or not.
{quote}I just don't understand what exactly I did wrong in trying to help move the jdk17 activities forward :)
{quote}
I do not believe this is what I said that you did not help or that I dismiss the part you solved important problem. I am always thankful for any work you do, I really want you to know that. It was about where we run checkstyle, that particular change.
{quote}Should we start a discussion on the dev-list and reflect an agreed commitment for source code checks on our confluence wiki?
{quote}
SGTM, I already mentioned it on the other ticket

[~e.dimitrova] No worries,  I'll prepare the points for discussion to find common ground on the dev-list!

I think I need to share some intermediate results as I have spent a few days investigating the cause.
 - I can confirm the issue, but the scope is a bit wider. In fact, all the tests with the {{.jdk11}} postfix are not run as they are stuck on the first one {{testLargeIndexSummary}} with an error {{{}Forked Java VM exited abnormally.{}}}.
 - I have failed to reproduce the issue locally using the {{testclasslist}} build step (or I also tried creating a new ant target to emulate the environment);
 - There are no logs for the failed suite on Jenkins (see the link), so it is difficult to find out the cause of failed tests. The error {{Forked Java VM exited abnormally.}} is just the tip of the iceberg, the real cause is hidden and alive in the agent logs (I have no access to them);
[https://nightlies.apache.org/cassandra/devbranch/Cassandra-devbranch/]

 

I have reproduced the same stack trace limiting the maximum heap size on the local JVM running the tests just to be sure of the possibility of such a scenario. The easiest way to find the real cause is to find the full log or fetch it from the build agent. I'll continue the investigation.

Thanks, [~mmuzaf] for all the investigations!
{quote} - I can confirm the issue, but the scope is a bit wider. In fact, all the tests with the {{.jdk11}} postfix are not run as they are stuck on the first one {{testLargeIndexSummary}} with an error {{Forked Java VM exited abnormally}}{quote}
I guess you mean all the tests with jdk11 only on the specific split?

In any case, I would like to suggest to revert the patch that caused it until the root cause is found. Running all tests is very important for releasing on time and catching quickly regressions.

 

About the logs - [~mck], [~brandon.williams] , is that something you can advise about? 

Something else I noticed... I found a run from today - jdk 11 on trunk with another patch - [https://app.circleci.com/pipelines/github/driftx/cassandra/1040/workflows/37004408-718c-4833-8cc3-9227b6cd7648/jobs/27957/parallel-runs/24?filterBy=ALL]

All tests are green; the IndexSummaryTest artifact does not exist. Looking into the CircleCI steps - we can find the test under Determine Unit Tests to Run.

I do not see any test run failing in any of the containers. I haven't seen this behavior before, and logs do not point me in any direction in CircleCI. 

Regarding the logs, I created CASSANDRA-18565 because it seems like something is wrong there.

As far as this ticket goes, since we know that CASSANDRA-18435 wants to run checkstyle on only the lowest supported JDK and that also solves the problem here, let's just commit [this|https://github.com/driftx/cassandra/commit/8479d4a15df618fbae96421b650eb798a429e0cf] earlier patch I tested?

[~e.dimitrova],

I guess the reason that the CircleCI tests are green is that in fact Jenkins and the CircleCI tests configuration differ a bit:
 - the checkstyle is skipped for the CircleCI before building and running tests: https://issues.apache.org/jira/browse/CASSANDRA-18000
 - the same for the checkstyle on Jenkins is not true: https://issues.apache.org/jira/browse/CASSANDRA-18017

I think CASSANDRA-18017 might help in this case to solve the issue (I'm also not able to test that patch), but Michael said he had another solution for that. My theory is that because the new version of checkstyle needs more heap to do all the checks, the JVM is unable to allocate enough memory and that's why it fails, but I'll have to check this to be sure.

{quote}As far as this ticket goes, since we know that CASSANDRA-18435 wants to run check style on only the lowest supported JDK, which also solves the problem here, let's commit [this|https://github.com/driftx/cassandra/commit/8479d4a15df618fbae96421b650eb798a429e0cf] earlier patch I tested.
{quote}
I am all in to commit it, thanks. We still need to fix and run checkstyle with 11 to drop 8. 

Thank you both for looking into this!

 
{quote} - the check style is skipped for the CircleCI before building and running tests: https://issues.apache.org/jira/browse/CASSANDRA-18000{quote}
That is a good point, we do the check style in the build step, so there is no need to repeat it, but unfortunately, that doesn't explain why the test is not run in CircleCI. :( 


bq. We still need to fix and run checkstyle with 11 to drop 8. 

Here it is with only j11:

||Branch||CI||
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18423-trunk-j11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1045/workflows/f9a80079-a191-4307-8398-3939b5b18d19], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1045/workflows/1eae97ea-6dd8-4fa8-875b-062cc992c7c2], [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/2504/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/2504/pipeline]
|


I am afraid this does not solve the problem as we keep on running with the new checkstyle version on JDK11 and nothing has changed there. The test still failed in the run too. 

It was worth a shot.  I committed the change to only run on j8 so that the test coverage is fixed.

{quote}I committed the change to only run on j8 so that the test coverage is fixed.
{quote}
Thanks!

Thanks for the fix.

Would you mind keeping this issue open to find the root cause of such an issue once CASSANDRA-18565 is resolved? Just to avoid having to deal with the same issue again and again in the future.

Not at all, I've left it open intentionally so we can properly solve this.

{quote}Thanks for the fix.
{quote}
Unfortunately, this was not a fix but a revert of the original patch from CASSANDRA-18262 (at least the part where we run checkstyle only with J8), so we still need to fix checkstyle for JDK11. This becomes a blocker to drop JDK8.

In the meantime, I am wondering whether we can't play with the CircleCI config to try to reproduce the problem. We use the same image and config there. 
We can try to revert CASSANDRA-18000 and if that does not help to reproduce the problem, we can play also with the heap. 

bq. find the root cause of such an issue once CASSANDRA-18565 is resolved
[~mck], can we test CASSANDRA-18017, please? If it fixes this problem that will unblock us.

It seem CASSANDRA-18618 proved that not running checkstyle with the test target solves the problem. I believe we can close this ticket.

Closing as the issue was solved in CASSANDRA-18618

