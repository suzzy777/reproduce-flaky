Rebuild operation is now resumable, shortly I'll add a new dtest.

Working dtest available: https://github.com/riptano/cassandra-dtest/compare/master...kdmu:jira-10810 
[~pauloricardomg] or [~yukim] could you take a look?
I've tested that it behaves as expected, but there're still two problems:
# After execution, node3.log that is supposed to be saved in logs/last/ is not present or partial content is lost, could you double-check it?
# You can see that I insert 10k data into node1 and another 10k into node2 with {{insert_c1c2}} which inserts data with a key from 0 to 10k-1, therefore there will be always two data with same key. When we use {{query_c1c2}} to check if data is available on node3 after rebuild, we only can ensure that 10k data is present since {{query_c1c2}} works with previous keys, the remaining 10k could be there or not. It's simple to solve, I think we only need to create a new {{insert_c1c2_from(key)}} and {{query_c1c2_from(key)}} would be enough, but I don't know if it's necessary.

Thanks for the patch.

> 1.

It can be the test was terminated before the logs were flushed to disk.
By default, dtest generates logs when test fails for debugging purpose, so no big deal.

> 2.

{{insert_c1c2}} can take {{keys}} argument instead of {{n}} to specify keys.
Please look at the source in {{tools.py}}.

Other than that, you need to add some {{ignore_log_patterns}}.

It would be nice if you could execute the query before the successful rebuild to make sure it will fail. Also, change the read query {{CL}} to {{LOCAL_ONE}} to make sure it's being queried from the local dc only, otherwise the query might go to dc1 if you use {{CL=ALL}}.

A new patch is available: https://github.com/riptano/cassandra-dtest/compare/master...kdmu:jira-10810?expand=1




Thanks for the update.
Just two more things:

* Can you add {{@since('2.2')}} to the test method? Since resuming functionality was introduced in that version and we can't run it in 2.1.
* Related to above, 2.2 doesn't have function to specify keyspace in rebuild command. Can you revert it back to simple {{rebuild}} command? I know it can fail sometimes for {{system_auth}} keyspace, so you need to add something like in https://github.com/riptano/cassandra-dtest/pull/1133 (see CASSANDRA-11687).

After fixing above, feel free to file pull request to riptano/cassandra-dtest.

Pull request created. https://github.com/riptano/cassandra-dtest/pull/1145/files
Thanks.

The test is failing locally with:
{noformat}
======================================================================
ERROR: resumable_rebuild_test (rebuild_test.TestRebuild)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/paulo/Workspace/cassandra/cassandra-dtest/tools.py", line 290, in wrapped
    f(obj)
  File "/home/paulo/Workspace/cassandra/cassandra-dtest/rebuild_test.py", line 194, in resumable_rebuild_test
    node3.byteman_submit(script)
  File "/home/paulo/Workspace/cassandra/ccm/ccmlib/node.py", line 1845, in byteman_submit
    byteman_cmd.append(os.path.join(os.environ['JAVA_HOME'],
  File "/usr/lib/python2.7/UserDict.py", line 23, in __getitem__
    raise KeyError(key)
KeyError: 'JAVA_HOME'
{noformat}
which works if {{$JAVA_HOME}} is defined, so I think it's not a big deal.

I submitted a [CI run|http://cassci.datastax.com/view/Dev/view/paulomotta/job/pauloricardomg-2.2-10810-dtest/1/] to check if this will work, as well as a [multiplexer 50x run|https://cassci.datastax.com/view/Parameterized/job/parameterized_dtest_multiplexer/216/] to verify the test is not flaky.

CI tests are failing, so this probably needs a rebase to latest riptano/master to address those.

Closing this after issues were addressed and [PR|https://github.com/riptano/cassandra-dtest/pull/1145] was merged. Not setting fixversion since no C* code changes were necessary, since this was already supported only test was missing. Thanks all!

[~pauloricardomg] What's the doc impact? Do we simply run "nodetool bootstrap resume" to resume from interrupted rebuild session, or we use "nodetool rebuild resume"?

Good call, I will tag this as docs-impacting. You basically run {{nodetool rebuild}} again and it will start rebuild from where it left off.

