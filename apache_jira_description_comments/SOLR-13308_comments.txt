In particular, IDK whether doing this in the base class will also reset values in the subclasses.

[~hossman@fucit.org] It looks like you already did something like this, but it's specific to RevertDefaultThreadHandlerRule. WDYT about taking that restriction away? Mostly I'm curious about why you made it so specific, do you see problems with making it more general or is this simply being cautious?

I'm a little nervous about RestoreRule affecting all tests. Would it make more sense to add a @BeforeClass that made a list of all the sysvars and then an @AfterClass that failed if the lists weren't identical? I don't particularly like adding that overhead, but it does seem safer.

[~hossman] think I used the wrong link to ping you before.

bq. It looks like you already did something like this, but it's specific to RevertDefaultThreadHandlerRule. WDYT about taking that restriction away? 

I don't understand the question ... what restriction are you talking about? 

(are you perhaps missunderstanding the use of RuleChain? ... that doesn't "restrict" when SystemPropertiesRestoreRule or RevertDefaultThreadHandlerRule are used relative to eachother -- it just dictates that they will be evaluated in a predictable order, which would be undefined if they were declared as independent {{\@ClassRule public static TestRule ...}} variables in the same (base) class)

Why would new BeforeClass/AfterClass methods work better then using SystemPropertiesRestoreRule? what sitaution?

I think in general this jira can just be resolved as DONE? .... do you have any examples/evidence of system properties leaking from one test _class_ run to another since this change was made in f549ee353530fcd48390a314aff9ec1723b47346 ?


For what it's worth, the overhead of a rule vs. before/after class is pretty much the same.

Chris:
You nailed it, I didn't understand how "around" works

I wasn't clear about Before/AfterClass I was thinking of adding a check in SolrTestCase to verify that the system vars were the same before as after as an alternative to a rule. I vastly prefer the rule, but was just thinking of possibilities if the Rule wasn't viable for some reason.

So I'll just resolve this as done. I suppose theoretically we could now go through all the tests that have SolrTestCase in their ancestry and remove all the clearing/resetting for sysvars, but frankly I don't see enough tangible benefit to bother.

[~dweiss] Thanks, what Chris put in allows us to not have to remember either one ;)

A rule is pretty simple, really. Look at the interface:

[https://junit.org/junit4/javadoc/4.12/org/junit/rules/TestRule.html]

Â 

There is essentially a Statement you wrap with your code (typically before-after).

As for restoring *all* properties - this works in most cases but the rule's code would have to have a permission to enumerate (and set) all properties. In Lucene code the security manager prevents that so only a subset of properties can be set/ reset (and you need to know these by name).

