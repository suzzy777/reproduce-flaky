[~ascherbakov]Â Can you, please, take a look at this issue?

{panel:title=Branch: [pull/7507/head] Base: [master] : No blockers found!|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=5115514&amp;buildTypeId=IgniteTests24Java8_RunAll]

[~ilyak] [~ascherbakov] Folks, can you please take a look?

[~irakov] Unfortunately I do not have expertise to review this change. I think we should ask [~agoncharuk].

What is the scope of this problem?

[~ivan.glukos]

The changes look good to me.

To summarize a root cause: in the current implementation we can own a lock for another candidate version during scan of thread chain. In this case thread chain for another candidate will not be processed, but it should.

My comments on PR:

1. For better clarity I suggest a change
{code}
boolean lockedByThreadChainVer = owner != null && owner.hasCandidate(ver);

// If locked by the thread chain version no need to do recursive thread chain scans for the same chain.
// This call must be made outside of synchronization.
checkOwnerChanged(prev, owner, val, lockedByThreadChainVer);

return !lockedByThreadChainVer;
{code}

2. Newly added test should be executed @WithSystemProperty(key = "IGNITE_TO_STRING_MAX_LENGTH", value = "100000"), otherwise txs will be truncated in output on assertion.

3. I've noticed the enlisted keys are printed in wrong order. This is because of a bug in org.apache.ignite.internal.processors.cache.transactions.IgniteTxStateImpl#allEntriesCopy.
We should use ArrayList here. 
Can you fix it ?





[~ilyak]
> What is the scope of this problem?
It's rare concurrent scenario which is possible with optimistic transactions (putAll to transactional cache works as optimistic + read_commited transaction).
Here's the flow that leads to the deadlock:
1) TX 1 adds MVCC candidates on primary node for keys 1, 3 and 5 (addLocal call on prepare phase)
2) TX 2 adds MVCC candidates on primary node for keys 2, 3 and 6 (addLocal call on prepare phase, XID 1 is first in candidates queue for key 3)
3) TX 2 acquires lock for key 2 (readyLocks call on prepare phase)
4) TX 1 acquires lock for key 1 (readyLocks call on prepare phase)
5) TX 2 tries to acquire lock for 3 (unsuccessfully: TX 1 becomes an owner instead: it's first in the queue and its previous chain item [key 1] in the thread chain was concurrently owned by TX 1) 
6) Neither TX 1 nor TX 2 continues processing of its thread chain

[~ascherbakov] 
I agree with all of your propositions. I guess I need a fresh TC visa then.

[~ivan.glukos]

This bug affects pessimistic txs as well.
I also suggest to add the same test in pessimistic mode.

{panel:title=Branch: [pull/7507/head] Base: [master] : No blockers found!|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=5115514&amp;buildTypeId=IgniteTests24Java8_RunAll]

[~ascherbakov], agreed. Test added.
Merged to master.

Cherry-picked to 2.8.1: 8246bd8427a93c3a3706c4e24b46d1c8758579b1

