@Roy
Provide all we need to reproduce this issue.
What's exactly wrong in the report files?

In my pom file, I have a profile called parallel that defines some options for failsafe to run parallely:
{code:xml}
 <profile>
            <id>parallel</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <reuseForks>false</reuseForks>
                            <threadCountSuites>2</threadCountSuites>
                            <threadCountClasses>2</threadCountClasses>
                            <threadCountMethods>6</threadCountMethods>
                            <forkCount>${parallel.forkcount}</forkCount>
                            <threadCount>${parallel.threadcount}</threadCount>
                            <parallel>all</parallel>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
{code}

When I run the tests without this profile, I get a flakyFailure tag in the testcase as defined [here|http://maven.apache.org/surefire/maven-failsafe-plugin/examples/rerun-failing-tests.html]:
{code:xml}
  <testcase name="loginWithGoodUserDontRememberThenLogout" classname="com.mycompany.testing.backstage.general.login.LoginTest" time="6.297">
    <flakyFailure message="Expected to be able to login, but got back to login page&#10;Expected: an instance of com.mycompany.testing.pages.backstage.MainPage&#10;     but: &lt;com.mycompany.testing.pages.backstage.login.LoginPage@1df95673&gt; is a com.mycompany.testing.pages.backstage.login.LoginPage" type="java.lang.AssertionError"><![CDATA[java.lang.AssertionError: Expected to be able to login, but got back to login page
Expected: an instance of com.mycompany.testing.pages.backstage.MainPage
     but: <com.mycompany.testing.pages.backstage.login.LoginPage@1df95673> is a com.mycompany.testing.pages.backstage.login.LoginPage
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
	at org.junit.Assert.assertThat(Assert.java:865)
	at com.mycompany.testing.backstage.general.login.LoginTest.loginWithGoodUserDontRememberThenLogout(LoginTest.java:60)
]]>
      <system-out><![CDATA[17:08:08.011 [INFO] Created dir: target/screenshots/
[[ATTACHMENT|c:\workspace\products\automation-testing\backstage-test-suite\target\logs\LoginTest.loginWithGoodUserDontRememberThenLogout.log]]
Unable to obtain hostname of webdriver node, assuming localhost
17:08:08.029 [INFO] Selenium Node: ROY-DESKTOP.office.mycompany.com
17:08:09.675 [INFO] Logging in user: login_user
17:08:09.810 [INFO] Entering text [login_user] to User Name located by [[[ChromeDriver: chrome on XP (45adbb70264e3dde486c0fc57eadbb1f)] -> id: j_username]]
17:08:10.049 [INFO] Entering text [change121] to Password located by [[[ChromeDriver: chrome on XP (45adbb70264e3dde486c0fc57eadbb1f)] -> id: j_password]]
17:08:10.365 [WARN] Got empty URL path, validating on page using sign out button
17:08:10.533 [ERROR] Failed logging in user: login_user. Got error: [The username or password you entered is incorrect]
17:08:10.540 [INFO] Test Failed
17:08:10.543 [INFO] Current URL: http://qa-fe-auto4-backstage.mycompany.com/backstage/login#
17:08:10.549 [ERROR] Error in test: LoginTest_loginWithGoodUserDontRememberThenLogout, Taking screenshot
 Current URL: http://qa-fe-auto4-backstage.mycompany.com/backstage/login#
17:08:10.549 [INFO] Taking screenshot with name: LoginTest_loginWithGoodUserDontRememberThenLogout
[[ATTACHMENT|c:\workspace\products\automation-testing\backstage-test-suite\target\screenshots\LoginTest_loginWithGoodUserDontRememberThenLogout.png]]
]]></system-out>
      <system-err><![CDATA[Starting ChromeDriver 2.12.301325 (962dea43ddd90e7e4224a03fa3c36a421281abb7) on port 14466
Only local connections are allowed.
]]></system-err>
    </flakyFailure>
  </testcase>
{code}

When I run the tests with the parallel option, this is the testcase tag:
{code:xml}
 <testcase name="loginWithGoodUserDontRememberThenLogout" classname="com.mycompany.testing.backstage.general.login.LoginTest" time="9.744"/>
{code}

The test is a simple selenium test that has been changed by me to only succeed on the 2nd run.
I've also attached a simple project with a single test, that you can reproduce the bug on - simply run once with the -Pparallel option, and once without - check out the the resulting xml file.

There is also another issue when running with the parallel profile -  the number of tests in the test output xml file does not match the number of tests actually run.
If you try running the test program with the -Pparallel option, you should notice only one testcase in the resulting output xml file, and not 2 as it should have been.
If you require anything else, please let me know.


I had some time to burn, so I modified the test project - simply run mvn test, and you should see 4 test cases - 2 fail with the parallel option, and 2 succeed without it. 
One tests that the output xml file contains a flakyFailure tag, the other that the file contains 2 testscases.
They are pretty simple, got too lazy to use an xml parser so just used contains string :).
Otherwise, they run the same code - clean verify on the test project.

You are using failsafe plugin. Thus keep the naming convention of test classes *IT.java.
Don't mix parallel and forkCount. Decide for one concurrency mechanism but not for both.
Let us know new results.

@Tibor
I tried all the things you suggested:
* Changing the test names to *IT (not that I see why that would matter) - no effect
* Commenting out <parallel>all</parallel> and using only forkcount - xml is fine, but tests don't run parallely.
* Commenting out forkCount and using only parallel - no effect.

@Tibor I checkout out the source for failsafe to see if I could maybe submit a patch.
From what I saw, it seems that report is generated twice - once when the first run of all tests is complete, and then again after the flaky test is completed.
So the file is generated twice, the second time containing only the test that was run again.
The line that is called twice is in ForkClient.java:
{code:java}
case ForkingRunListener.BOOTERCODE_TESTSET_COMPLETED:
    getOrCreateReporter( channelNumber ).testSetCompleted( createReportEntry( remaining ) );
break;
{code}

No idea how to fix this though, as this seems like a difficult issue - the testSetCompleted event I'm assuming should only be fired once per test run no?

@Roy
AFAIK Andreas will take over this week. If you have a fix, feel free to commit it in GitHub and discuss with Andreas.
We would like to release 2.18.1 next week, and we would be glad to have this fixed as well.

@Tibor
Just an update - I tried running the test from my home, as I wanted to try debugging it there.
The issue does not reproduce at home. Tried with JDK 8 and JDK 6 (we use 6 at work). I can't connect to my work computer now, but I'll try reproducing the issue tomorrow and provide more information.

@Tibor
Actually sorry, scratch that - it was an error on my part, forgot a config in the failsafe-plugin :)

Please retest again and make sure that the open bug is relevant for you.
You don't need to be in hurry, but we of course need several days or a week to fix before starting the release process.

I tested again and it still fails, as I said, I had an error with my configuration, as I removed the <parallel> tag from failsafe, which cause it to not actually run parallely.


[~hellspam], your test case is really good. 

Just to let you know, I've boiled it down to using just the surefire-plugin, forkCount=0, parallel=classes (with only one class to execute, there is nothing actually done in parallel) - and I can see the same result as you. Without parallel=..., but still with hard-configured Junit47 provider, the report looks fine.

I need to dig in some more, but won't have much more time today. I'll still try to get it done for the bugfix release that Tibor wants to roll next week.

@agudian, thanks.
I've tried to debug the issue myself, but had a tough time.
I mean, I see that the testCompleted and testStarting are fired twice, just can't figure out why :).
Would have loved to fix it myself, is there some wiki on getting started with contributing? 


Contributions in form of bug-fixes are always welcome :) - As for a documentation, we have the pages on maven.apache.org, such as http://maven.apache.org/guides/development/guide-m2-development.html - just that for most parts of maven, including the surefire plugin, patches are best submitted via GitHub pull-requests.

Other than that, we don't have any guide on how to get started with Surefire development - most parts of the code are not that hard to understand. But I must admit: this one here is tricky.

Got it. Fixed it. The StatelessXmlReporter wasn't that stateless anymore, but ogt re-created for each new thread and each test class execution in the concurrent run listener. The flaky-rerun acts like rerunning the test class from the outside, so the StatelessXmlReporter got instantiated again and forgot what it knew about the previous run of that class. The map containing that information was now pulled out of that reporter to make it stateless again (that's easier than renaming the class, right? ;) ).

I'll commit it tomorrow after creating a nice IT out of Roys test case... :)

Awesome, Thanks! :)

Commit is pushed. 

Roy, you can give 2.19-SNAPSHOT a try, if you like.

