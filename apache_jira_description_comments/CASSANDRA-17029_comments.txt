[~subkanthi] if you are looking for a low hanging fruit this ticket is a relatively simple one :-) 

Thanks [~blerer], really appreciate it, will check the info and when Im confident, will assign it to myself.

Hi [~blerer], is it OK to create PRs in github [https://github.com/apache/cassandra] against the trunk branch, confused because I see some documentation referring to patches.

Thanks in advance.

PRs are perfectly fine, [~subkanthi].  You can generally treat "patch" and "PR" as being interchangeable in our docs.

[~blerer], there are functions for toDate which takes in the TemporalType, trying to understand TemporalTypes, is BigInteger not included in TemporalType?

Also is there a process to get included in the slack channel, Im kind of used to asking questions in slack for Airflow. 

You should be able to just join #cassandra-dev after signing up at https://theasf.slack.com/ If you need an invite send me an email at driftx at gmail.com

Thanks Brandon, unfortunately I dont have an apache email address, I have sent you an email to driftx@gmail.com, please send the invite

[https://github.com/apache/cassandra/pull/1275]

Apologize, I know its a simple task, but [~brandon.williams] or [~blerer], can you please check if Im on the right direction, will change all the functions.

Circle-CI tests are [here|https://app.circleci.com/pipelines/github/blerer/cassandra/236/workflows/f4f49814-ed6e-46f6-93c1-f25eebeece89]

Sorry Im fairly new, should I be monitoring the circle-ci tests, please let me know.

No, I kept an eye on them. Unfortunately, some test failed due to the new functions as the signature are the same as some old ones. I have to look at that to see what is really the issue.

[~blerer], looks like those tests were fixed in trunk, rebased and pushed this branch, tests run fine locally.

 

cc: [~brandon.williams]

[~blerer] Actually nvm the comment above, the rebase only fixes the first timestamp test, I was able to reproduce the ambiguous function in the validations test, trying to fix it.

org.apache.cassandra.exceptions.InvalidRequestException: Ambiguous call to function maxtimeuuid (can be matched by following signatures: system.maxtimeuuid : (timestamp) -> timeuuid, system.maxtimeuuid : (bigint) -> timeuuid): use type casts to disambiguateorg.apache.cassandra.exceptions.InvalidRequestException: Ambiguous call to function maxtimeuuid (can be matched by following signatures: system.maxtimeuuid : (timestamp) -> timeuuid, system.maxtimeuuid : (bigint) -> timeuuid): use type casts to disambiguate
 at org.apache.cassandra.cql3.statements.RequestValidations.invalidRequest(RequestValidations.java:217) at org.apache.cassandra.cql3.functions.FunctionResolver.pickBestMatch(FunctionResolver.java:187) at org.apache.cassandra.cql3.functions.FunctionResolver.get(FunctionResolver.java:85) at org.apache.cassandra.cql3.functions.FunctionCall$Raw.prepare(FunctionCall.java:159) at org.apache.cassandra.cql3.SingleColumnRelation.toTerm(SingleColumnRelation.java:123) at org.apache.cassandra.cql3.SingleColumnRelation.newSliceRestriction(SingleColumnRelation.java:231) at org.apache.cassandra.cql3.Relation.toRestriction(Relation.java:147) at org.apache.cassandra.cql3.restrictions.StatementRestrictions.<init>(StatementRestrictions.java:188) at org.apache.cassandra.cql3.restrictions.StatementRestrictions.<init>(StatementRestrictions.java:135) at org.apache.cassandra.cql3.statements.SelectStatement$RawStatement.prepareRestrictions(SelectStatement.java:1134) at org.apache.cassandra.cql3.statements.SelectStatement$RawStatement.prepare(SelectStatement.java:1004) at org.apache.cassandra.cql3.statements.SelectStatement$RawStatement.prepare(SelectStatement.java:994) at org.apache.cassandra.cql3.statements.SelectStatement$RawStatement.prepare(SelectStatement.java:969) at org.apache.cassandra.cql3.QueryProcessor.getStatement(QueryProcessor.java:591) at org.apache.cassandra.cql3.QueryProcessor.parseStatement(QueryProcessor.java:276) at org.apache.cassandra.cql3.QueryProcessor.prepareInternal(QueryProcessor.java:324) at org.apache.cassandra.cql3.QueryProcessor.executeInternal(QueryProcessor.java:334) at org.apache.cassandra.cql3.CQLTester.executeFormattedQuery(CQLTester.java:1156) at org.apache.cassandra.cql3.CQLTester.execute(CQLTester.java:1144) at org.apache.cassandra.cql3.validation.entities.TimeuuidTest.testTimeuuid(TimeuuidTest.java:67) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.base/java.lang.reflect.Method.invoke(Method.java:566) at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) at org.junit.runners.ParentRunner.run(ParentRunner.java:363) at org.junit.runner.JUnitCore.run(JUnitCore.java:137) at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69) at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235) at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)

{code:java}
// code placeholder
case INTEGER:

    switch (nt)

    {

        case BIGINT:

        case COUNTER:

        case DATE:

        case DECIMAL:

        case DOUBLE:

        case DURATION:

        case FLOAT:

        case INT:

        case SMALLINT:

        case TIME:

        case TIMESTAMP:

        case TINYINT:

        case VARINT:

            return AssignmentTestable.TestResult.WEAKLY_ASSIGNABLE;
{code}
Looks like both bigint and timestamp gets the WEAKLY_ASSIGNABLE when the parameter is integer.

[~blerer], it works fine if the parameter passed is long, should I update the test case?
{code:java}
// code placeholder
select maxTimeUuid(1564830182000) from emp; system.maxtimeuuid(1564830182000)
--------------------------------------
 42d31e0f-b5de-11e9-7f7f-7f7f7f7f7f7f

{code}

Fixed the unit test to pass a long to maxTimeUUid

[~blerer] can u please check.

The patch looks good to me. CI results are [here|https://app.circleci.com/pipelines/github/blerer/cassandra/239/workflows/32b4bc10-685a-4719-ac6c-950e76cd9533]. Failing tests are unrelated to the change.

+1 from me.  I opened CASSANDRA-17120 for the flaky test.

Committed into trunk at 8ddcd43b0cfcebfda882a238532d00905fe85eb8

Thanks a lot for the patch [~subkanthi]

