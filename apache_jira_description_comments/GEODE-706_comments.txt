Flaky: time sensitive, expiration, waitForDestroy, EXPIRY_MS_PROPERTY, short timeout

Commit a3bd256648e30b0bf04c565a8f21d00868c29806 in incubator-geode's branch refs/heads/develop from [~hitesh.khamesra]
[ https://git-wip-us.apache.org/repos/asf?p=incubator-geode.git;h=a3bd256 ]

GEODE-706 Fixed race condition between expiry thread and put thread.

There was possibility that expiry thread destroying the entry and
another thread doing update on same key. In this case expiry thread
cancel's existing task and update thread adds expiry task. But this
tasks are refer by regionEntry, which is same for both the threads.
So in this case if expiry thread cancel's task after update thread
then that entry will never expire.


Commit 24a72040cba3afe96da8ef752aa1f07c10dd1fa1 in incubator-geode's branch refs/heads/develop from [~hitesh.khamesra]
[ https://git-wip-us.apache.org/repos/asf?p=incubator-geode.git;h=24a7204 ]

GEODE-706 Fixed race condition between expiry thread and user thread.

ExpirationManager tracks the regionEntry as reference to expiryTask. It
assumes, it is unique for that key. But consistency check mechanism
keeps that regionEntry around and that enforces re-use of that for new
update. That introduces the race condition between expiry thread and
user thread, it endup not scheduling the entry for expiration. As a fix,
now "consistency check mechanism" unschedules the expiry task to avoid
this race condition.

Unmarked flaky from testEntryIdleDestroy test


Commit 24a72040cba3afe96da8ef752aa1f07c10dd1fa1 in incubator-geode's branch refs/heads/feature/GEODE-1985 from [~hitesh.khamesra]
[ https://git-wip-us.apache.org/repos/asf?p=incubator-geode.git;h=24a7204 ]

GEODE-706 Fixed race condition between expiry thread and user thread.

ExpirationManager tracks the regionEntry as reference to expiryTask. It
assumes, it is unique for that key. But consistency check mechanism
keeps that regionEntry around and that enforces re-use of that for new
update. That introduces the race condition between expiry thread and
user thread, it endup not scheduling the entry for expiration. As a fix,
now "consistency check mechanism" unschedules the expiry task to avoid
this race condition.

Unmarked flaky from testEntryIdleDestroy test


Seen in [distributed-test-openjdk8 #1247|https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-develop-mass-test-run/jobs/distributed-test-openjdk8/builds/1247] ... see [test results|http://files.apachegeode-ci.info/builds/apache-develop-mass-test-run/1.15.0-build.0406/test-results/distributedTest/1628946920/] or download [artifacts|http://files.apachegeode-ci.info/builds/apache-develop-mass-test-run/1.15.0-build.0406/test-artifacts/1628946920/distributedtestfiles-openjdk8-1.15.0-build.0406.tgz].

Reopening and editing the ticket name as this failure was seen again recently in a mass test run. The artifacts in the above comment also include an unrelated failure inÂ PartitionedRegionCqQueryDUnitTest.

