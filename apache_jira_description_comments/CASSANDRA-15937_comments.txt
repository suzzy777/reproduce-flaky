Here's the before & after with the patch.
{code:java}
                          current trunk             current w/port               patched                     patched w/port

 AllEndpointStates        /127.0.0.3\n...           127.0.0.1:7000\n             /127.0.0.1                  /127.0.0.3:7000
 SimpleStates             /127.0.0.1=UP             127.0.0.1:7000=UP            /127.0.0.1=UP               /127.0.0.2:7000=UP
 LargeMessagePendingTasks /127.0.0.1=0              127.0.0.1:7000=0             /127.0.0.1=0                /127.0.0.1:7000=0
 TimeoutsPerHost          /127.0.0.1=0              127.0.0.1:7000=0             /127.0.0.1=0                /127.0.0.1:7000=0
 SchemaVersions          {...=[127.0.0.1,...]}      {...=[127.0.0.1:7000,...]    {...=[127.0.0.1,...]}       {...=[127.0.0.1:7000,...]}

 TokenToEndpointMap      -92...8=127.0.0.1          -92..8=127.0.0.1:7000        -92..08=127.0.0.1           -92..08=127.0.0.1:7000
 EndpointToHostId        127.0.0.1=e06...7e         127.0.0.1:7000=e0..7e        127.0.0.1=e04..5            127.0.0.1:7000=e0..b5
 HostIdToEndpoint        e06..7e=127.0.0.1          e06..7e=127.0.0.1:7000       e0..b5=127.0.0.1            e0..b5=127.0.0.1:7000
 LoadMap                 127.0.0.1:7000=106.08 KiB  127.0.0.1=106.08 KiB         127.0.0.1=106.12 KiB        127.0.0.1:7000=106.12 KiB
 LiveNodes               127.0.0.1                  127.0.0.1:7000               127.0.0.1                   127.0.0.1:7000
 Ownership               /127.0.0.1=0.0             127.0.0.1:7000=0.0           /127.0.0.1=0.333333         /127.0.0.1:7000=0.333333

{code}
I checked the name resolution also works by adding some additional aliases to /etc/hosts
{code:java}
127.0.0.1	localhost local0-i1
255.255.255.255	broadcasthost
::1             localhost
127.0.0.2 local0-i2
127.0.0.3 local0-i3
{code}
Which gives
{code:java}
     "SimpleStates": "{local0-i3/127.0.0.3=UP, localhost/127.0.0.1=UP, local0-i2/127.0.0.2=UP}",
      "SimpleStatesWithPort": "{localhost/127.0.0.1:7000=UP, local0-i2/127.0.0.2:7000=UP, local0-i3/127.0.0.3:7000=UP}",
{code}
 
 If a reviewer is feeling adventurous and wants to test with IPv6, you can create a cluster with
{code:java}
# macOS aliases, YMMV
sudo ifconfig lo0 inet6 alias 0:0:0:0:0:0:0:1
sudo ifconfig lo0 inet6 alias 0:0:0:0:0:0:0:2
sudo ifconfig lo0 inet6 alias 0:0:0:0:0:0:0:3

ccm create -n3 --install-dir=. --ip-format="::%d" c15937ipv6
{code}

[Branch|https://github.com/jonmeredith/cassandra/tree/c15937]
 [PR|https://github.com/apache/cassandra/pull/692]
 [CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=c15937] - looks there's an issue with the TopologyChangeTest I need to investigate.

This patch looks to be a few things
* refactor to centralize logic (toString(true), hostAndPortForJmx, etc.)
* bug fixes for JMX (InetAddressAndPort, Guava collections, etc.)
* check output to match 3.x output

Overall I am good with this patch, but would like to see tests enforcing the behavioral changes; mostly looks like updating existing tests impacted (like repair tests).

I will need to do another pass again as this is large, but looks good so far.

Sorry it's taken a while to get to the feedback on this.

Your comment about better JavaDocs nudged me to look at the {{InetAddress.toString()}} method more closely, and I've realized the first draft of the {{InetAddressAndPort.toString}} would trigger name resolution.  I've rewritten it to have the same behavior with respect to side-effects (by directly parsing the output from {{InetAddress.toString}} instead). Tests updated with your suggestion to show resolved/non-resolved (and pathalogical) cases.

Thanks for the nudge on testing.  I've gone through and extended the {{GossipSettlesTest}} to check both the gossip related and some other {{WithPort}} functions.  Ideally this would be in it's own test, but pragmatically everything is set up as we need it and this saves runtime on the dtests.  I can break it out if you'd strongly prefer.

Lastly I spotted another use of {{toString}} that should be {{getHostNameAndPort}} in the repair history {{participants_v2}}, which I fixed.


Pushed a separate [rebased branch|https://github.com/jonmeredith/cassandra/tree/c15937-rebased] to move past the {{TopologyChangeTest}} issues that have been fixed. [CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=c15937-rebased] is running.

Overall LGTM, left a few small comments in the PR.

Assuming the comments are addressed then +1 from me.

Thanks for looking at it again, I've pushed the nits up to the rebased branch.

LGTM +1

Tested out the merge but there were python dtest failures; can you take a look [~jmeredithco]?  https://app.circleci.com/pipelines/github/dcapwell/cassandra/422/workflows/012cfc82-ec1b-4bdc-92db-3f4c4721882a

CI build: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-15937-trunk-3013A0E9-A2D8-4D27-8CD2-B653FEAB0931
branch: https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-15937-trunk-3013A0E9-A2D8-4D27-8CD2-B653FEAB0931
patch: https://github.com/dcapwell/cassandra/commit/e00a0a0b4f1db4e35eaf7844f8762af440587b6d.patch

Will do - looks like regexes in tests need to be updated for the toString vs getHostByAddressAndPort formats.  I'm pleasantly suprrised they're being tested.

Thanks for prepping. The failures look genuine and related to reverting some of the formatting changes in CASSANDRA-7544. Fixing requires updates to both Dtest and the cassandra-dtest branch of CCM. Not sure how they should get merged or run through CI as you need the rebased Cassandra branch, the updated dtest branch with the ccm branch checked out inside it.

[Dtest changes|https://github.com/jonmeredith/cassandra-dtest/tree/CASSANDRA-15937] 
[CCM changes |https://github.com/jonmeredith/ccm/tree/CASSANDRA-15937]

This is what I see in circle ci

{code}
  clone_dtest:
    steps:
    - run:
        name: Clone Cassandra dtest Repository (via git)
        command: |
          git clone --single-branch --branch $DTEST_BRANCH --depth 1 $DTEST_REPO ~/cassandra-dtest
  create_venv:
    parameters:
      python_version:
        type: enum
        default: "3.6"
        enum: ["3.6", "3.7", "3.8"]
    steps:
    - run:
        name: Configure virtualenv and python Dependencies
        command: |
          # note, this should be super quick as all dependencies should be pre-installed in the docker image
          # if additional dependencies were added to requirmeents.txt and the docker image hasn't been updated
          # we'd have to install it here at runtime -- which will make things slow, so do yourself a favor and
          # rebuild the docker image! (it automatically pulls the latest requirements.txt on build)
          source ~/env<<parameters.python_version>>/bin/activate
          export PATH=$JAVA_HOME/bin:$PATH
          pip3 install --exists-action w --upgrade -r ~/cassandra-dtest/requirements.txt
          pip3 uninstall -y cqlsh
          pip3 freeze
{code}

So, looks like we need the dtest branch to update ~/cassandra-dtest/requirements.txt to point to the ccm branch?  https://github.com/apache/cassandra-dtest/blob/master/requirements.txt#L3

[~mck] does this sound right to you?  Know a different process?


[~jmeredithco] ill test this tomorrow, will update my scripts to link those two in with circle ci.

bq. So, looks like we need the dtest branch to update ~/cassandra-dtest/requirements.txt to point to the ccm branch? https://github.com/apache/cassandra-dtest/blob/master/requirements.txt#L3


That's correct [~dcapwell]. Usually by adding a "throw away" commit that contains the requirements.txt hack, and a note on the jira about it and the necessary merge order.

Thanks, working on a script to make this easier for me; launched the build here https://app.circleci.com/pipelines/github/dcapwell/cassandra/431/workflows/2fd8cab6-5af3-4260-8acd-5239fbc56b6d

Great, https://app.circleci.com/pipelines/github/dcapwell/cassandra/433/workflows/f52b094c-61a8-4465-a03d-d997d590c2e8 is green again...

Going to test the dtest changes on older branches...

ccm was merged, going to rebase and start the commits now.

Can with ci multiple times.  There were multiple failures but they were flaky tests or issues with recent changes outside of this change.

https://app.circleci.com/pipelines/github/dcapwell/cassandra/450/workflows/bdad1231-c6f5-4ffc-ab7f-1c1a9895e3e3

https://app.circleci.com/pipelines/github/dcapwell/cassandra/451/workflows/e4a1c41d-9a3a-4bc1-8b5d-2e5cf9584852

