Also observed in:
https://jenkins.impala.io/job/ubuntu-16.04-dockerised-tests/4915/testReport/junit/metadata.test_load/TestAsyncLoadData/

Saw it again here:
[https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/15706/testReport/junit/metadata.test_load/TestAsyncLoadData/]Â 

Saw it again here: https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/15847/

Saw a failure of this test, but with a different error message: [https://jenkins.impala.io/job/ubuntu-16.04-dockerised-tests/5353/]. Probably a different issue.

Stacktrace
{code:java}
metadata/test_load.py:197: in test_async_load
    assert(exec_end_state == finished_state)
E   assert 'RUNNING_STATE' == 'FINISHED_STATE'
E     - RUNNING_STATE
E     + FINISHED_STATE
{code}
Standard Error
{code:java}
SET client_identifier=metadata/test_load.py::TestAsyncLoadData::()::test_async_load[enable_async_load_data_execution:False|protocol:hs2|exec_option:{'batch_size':0;'num_nodes':0;'disable_codegen_rows_threshold':0;'disable_codegen':False;'abort_on_error':1;'exec_single_node_row;
-- connecting to: localhost:21000
-- connecting to localhost:21050 with impyla
-- 2022-03-03 01:53:45,393 INFO     MainThread: Closing active operation
-- connecting to localhost:28000 with impyla
-- 2022-03-03 01:53:45,412 INFO     MainThread: Closing active operation
SET client_identifier=metadata/test_load.py::TestAsyncLoadData::()::test_async_load[enable_async_load_data_execution:False|protocol:hs2|exec_option:{'batch_size':0;'num_nodes':0;'disable_codegen_rows_threshold':0;'disable_codegen':False;'abort_on_error':1;'exec_single_node_row;
SET sync_ddl=False;
-- executing against localhost:21000

DROP DATABASE IF EXISTS `test_async_load_931cdbf9` CASCADE;

-- 2022-03-03 01:53:45,425 INFO     MainThread: Started query 8743893bd81a4d63:1591d8f500000000
SET client_identifier=metadata/test_load.py::TestAsyncLoadData::()::test_async_load[enable_async_load_data_execution:False|protocol:hs2|exec_option:{'batch_size':0;'num_nodes':0;'disable_codegen_rows_threshold':0;'disable_codegen':False;'abort_on_error':1;'exec_single_node_row;
SET sync_ddl=False;
-- executing against localhost:21000

CREATE DATABASE `test_async_load_931cdbf9`;

-- 2022-03-03 01:53:50,938 INFO     MainThread: Started query cb4623bf93ee5f8e:962a7a8d00000000
-- 2022-03-03 01:53:50,993 INFO     MainThread: Created database "test_async_load_931cdbf9" for test ID "metadata/test_load.py::TestAsyncLoadData::()::test_async_load[enable_async_load_data_execution: False | protocol: hs2 | exec_option: {'batch_size': 0, 'num_nodes': 0, 'disable_codegen_rows_threshold': 0, 'disable_codegen': False, 'abort_on_error': 1, 'exec_single_node_rows_threshold': 0} | table_format: text/none]"
-- connecting to localhost:21050 with impyla
-- 2022-03-03 01:53:51,005 INFO     MainThread: Closing active operation
-- executing against localhost:21000

create table test_async_load_931cdbf9.test_load_nopart_hs2_False like functional.alltypesnopart         location '/test-warehouse/test_load_staging_hs2_False';

-- 2022-03-03 01:53:54,753 INFO     MainThread: Started query 2e43b424099880fb:6fa0871500000000
-- getting log for operation: <tests.common.impala_connection.OperationHandle object at 0x7f893738e690>
-- getting runtime profile operation: <tests.common.impala_connection.OperationHandle object at 0x7f893738e690>
-- closing query for operation handle: <tests.common.impala_connection.OperationHandle object at 0x7f893738e690>
-- 2022-03-03 01:53:54,876 INFO     MainThread: Closing active operation
-- getting log for operation: <tests.common.impala_connection.OperationHandle object at 0x7f893738e650>
-- getting runtime profile operation: <tests.common.impala_connection.OperationHandle object at 0x7f893738e650>
-- closing query for operation handle: <tests.common.impala_connection.OperationHandle object at 0x7f893738e650>
-- 2022-03-03 01:53:54,880 INFO     MainThread: Closing active operation
-- executing against Impala at localhost:21050

load data inpath '/test-warehouse/test_load_staging_hs2_False'           into table test_async_load_931cdbf9.test_load_nopart_hs2_False;

Started query 4b488fd194d4ffcb:bf2b035800000000
-- getting state for operation: <tests.common.impala_connection.OperationHandle object at 0x7f893738e690>
-- getting state for operation: <tests.common.impala_connection.OperationHandle object at 0x7f893738e690>
-- getting state for operation: <tests.common.impala_connection.OperationHandle object at 0x7f893738e690>
-- getting state for operation: <tests.common.impala_connection.OperationHandle object at 0x7f893738e690>
-- closing query for operation handle: <tests.common.impala_connection.OperationHandle object at 0x7f893738e690>
-- 2022-03-03 01:53:58,981 INFO     MainThread: Closing active operation
-- closing connection to: localhost:21050
 {code}

A patch is under review here:
https://gerrit.cloudera.org/c/18268/

Commit 2d6300ac59918d6e8a45a5d4669e252f177d6fcc in impala's branch refs/heads/master from Qifan Chen
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=2d6300a ]

IMPALA-10999 Flakiness in TestAsyncLoadData.test_async_load

This patch addresses the flakness by allowing RUNNING state to be a
legit exec state returned from execute_query_async_using_client() in
python. This call submits the load query to Impala backend.

The corresponding Impala backend code for the beewax protocol is
ImpalaServer::query() which utilizes a wait thread executing
ClientRequestState::Wait() to set the exec state from RUNNING to
FINISH. Sometime, when this wait thread does not run fast to do so,
the returned state from the main thread is RUNNING.

The fix is purely a modification to the test itself.

Testing:
  1. ran core test successfully

Change-Id: Ic2ac954b0494b7413ce0ec405718fcc354dba9e0
Reviewed-on: http://gerrit.cloudera.org:8080/18268
Reviewed-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


