A few notes from CASSANDRA-17992:
When using JDK provider and not OpenSSL, the class cast exception is there with JDK17, no matter of Netty Version. We do not see the issue in Python DTests as they seem to rely on OpenSSL.

For the record, comment by [~benedict] on CASSANDRA-17992:
{quote}Yes, the GaloisCounterMode appears to make about DirectBuffer and their attachments here.

bq.Â Looking again at the rest of the JDK, I'm not actually sure attachments can be accessed publicly, so this is probably our problem rather than the JDK's. However, we might be able to fix it by simply having Chunk implement DirectBuffer, and having it return its address.
{quote}
To be investigated further

I just noticed that in the latest trunk runs with JDK17 the test fails with:
{code:java}
14:15:18,910 Connection.java:1327 - Connection[/127.0.0.1:9042-1, inFlight=0, closed=false] connection error com.datastax.shaded.netty.handler.codec.DecoderException: javax.net.ssl.SSLException: Received fatal alert: internal_error at com.datastax.shaded.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:461) at com.datastax.shaded.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:335) at com.datastax.shaded.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1304) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:921) at com.datastax.shaded.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:135) at com.datastax.shaded.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:646) at com.datastax.shaded.netty.channel.nio.NioEventLoop.processSelectedKeysPlain(NioEventLoop.java:546) at com.datastax.shaded.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:500) at com.datastax.shaded.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:460) at com.datastax.shaded.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:131) at com.datastax.shaded.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.base/java.lang.Thread.run(Thread.java:833) Caused by: javax.net.ssl.SSLException: Received fatal alert: internal_error at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:133) at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:117) at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:358) at java.base/sun.security.ssl.Alert$AlertConsumer.consume(Alert.java:293) at java.base/sun.security.ssl.TransportContext.dispatch(TransportContext.java:204) at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:172) at java.base/sun.security.ssl.SSLEngineImpl.decode(SSLEngineImpl.java:736) at java.base/sun.security.ssl.SSLEngineImpl.readRecord(SSLEngineImpl.java:691) at java.base/sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:506) at java.base/sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:482) at java.base/javax.net.ssl.SSLEngine.unwrap(SSLEngine.java:679) at com.datastax.shaded.netty.handler.ssl.SslHandler$SslEngineType$3.unwrap(SslHandler.java:283) at com.datastax.shaded.netty.handler.ssl.SslHandler.unwrap(SslHandler.java:1205) at com.datastax.shaded.netty.handler.ssl.SslHandler.decodeJdkCompatible(SslHandler.java:1108) at com.datastax.shaded.netty.handler.ssl.SslHandler.decode(SslHandler.java:1151) at com.datastax.shaded.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:491) at com.datastax.shaded.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:430) ... 16 common frames omitted DEBUG [cluster1-nio-worker-0] <main> 2023-03-17 14:15:18,911 Connection.java:601 - Defuncting Connection[/127.0.0.1:9042-1, inFlight=0, closed=false] because: [localhost/127.0.0.1:9042] Unexpected exception triggered (com.datastax.shaded.netty.handler.codec.DecoderException: javax.net.ssl.SSLException: Received fatal alert: internal_error) DEBUG [cluster1-nio-worker-0] <main> 2023-03-17 14:15:18,911 ConvictionPolicy.java:118 - [localhost/127.0.0.1:9042] preventing new connections for the next 1000 ms DEBUG [cluster1-nio-worker-0] <main> 2023-03-17 14:15:18,911 ConvictionPolicy.java:102 - [localhost/127.0.0.1:9042] Connection[/127.0.0.1:9042-1, inFlight=0, closed=false] failed, remaining = 0 DEBUG [cluster1-nio-worker-0] <main> 2023-03-17 14:15:18,911 Connection.java:892 - Connection[/127.0.0.1:9042-1, inFlight=0, closed=true] closing connection DEBUG [cluster1-nio-worker-0] <main> 2023-03-17 14:15:18,912 Connection.java:950 - Not terminating Connection[/127.0.0.1:9042-1, inFlight=0, closed=true]: there are still pending requests DEBUG [main] <main> 2023-03-17 14:15:18,912 ControlConnection.java:285 - [Control connection] error on localhost/127.0.0.1:9042 connection, no more host to try com.datastax.driver.core.exceptions.TransportException: [localhost/127.0.0.1:9042] Connection has been closed at com.datastax.driver.core.Connection$ConnectionCloseFuture.force(Connection.java:1458) at com.datastax.driver.core.Connection$ConnectionCloseFuture.force(Connection.java:1439) at com.datastax.driver.core.Connection.defunct(Connection.java:622) at com.datastax.driver.core.Connection$Dispatcher.exceptionCaught(Connection.java:1361) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:280) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:259) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireExceptionCaught(AbstractChannelHandlerContext.java:251) at com.datastax.shaded.netty.channel.ChannelInboundHandlerAdapter.exceptionCaught(ChannelInboundHandlerAdapter.java:131) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:280) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:259) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireExceptionCaught(AbstractChannelHandlerContext.java:251) at com.datastax.shaded.netty.channel.ChannelHandlerAdapter.exceptionCaught(ChannelHandlerAdapter.java:88) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:280) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:259) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireExceptionCaught(AbstractChannelHandlerContext.java:251) at com.datastax.shaded.netty.channel.ChannelInboundHandlerAdapter.exceptionCaught(ChannelInboundHandlerAdapter.java:131) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:280) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:259) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireExceptionCaught(AbstractChannelHandlerContext.java:251) at com.datastax.shaded.netty.channel.ChannelHandlerAdapter.exceptionCaught(ChannelHandlerAdapter.java:88) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:280) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:259) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireExceptionCaught(AbstractChannelHandlerContext.java:251) at com.datastax.shaded.netty.channel.ChannelInboundHandlerAdapter.exceptionCaught(ChannelInboundHandlerAdapter.java:131) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:280) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:259) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireExceptionCaught(AbstractChannelHandlerContext.java:251) at com.datastax.shaded.netty.channel.ChannelInboundHandlerAdapter.exceptionCaught(ChannelInboundHandlerAdapter.java:131) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:280) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:259) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireExceptionCaught(AbstractChannelHandlerContext.java:251) at com.datastax.shaded.netty.channel.ChannelHandlerAdapter.exceptionCaught(ChannelHandlerAdapter.java:88) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:280) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:259) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireExceptionCaught(AbstractChannelHandlerContext.java:251) at com.datastax.shaded.netty.channel.ChannelInboundHandlerAdapter.exceptionCaught(ChannelInboundHandlerAdapter.java:131) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:280) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:259) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireExceptionCaught(AbstractChannelHandlerContext.java:251) at com.datastax.shaded.netty.handler.ssl.SslHandler.exceptionCaught(SslHandler.java:979) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:280) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.notifyHandlerException(AbstractChannelHandlerContext.java:843) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:358) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:335) at com.datastax.shaded.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1304) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:921) at com.datastax.shaded.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:135) at com.datastax.shaded.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:646) at com.datastax.shaded.netty.channel.nio.NioEventLoop.processSelectedKeysPlain(NioEventLoop.java:546) at com.datastax.shaded.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:500) at com.datastax.shaded.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:460) at com.datastax.shaded.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:131) at com.datastax.shaded.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.base/java.lang.Thread.run(Thread.java:833) DEBUG [main] <main> 2023-03-17 14:15:18,913 Cluster.java:1915 - Shutting down WARN 14:15:18 Unknown exception in client networking io.netty.handler.codec.DecoderException: javax.net.ssl.SSLException: Fail to unwrap network record at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:478) at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365) at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357) at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365) at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919) at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166) at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:719) at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:655) at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:581) at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493) at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989) at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.base/java.lang.Thread.run(Thread.java:833) Caused by: javax.net.ssl.SSLException: Fail to unwrap network record at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:133) at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:371) at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:314) at java.base/sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:522) at java.base/sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:482) at java.base/javax.net.ssl.SSLEngine.unwrap(SSLEngine.java:679) at io.netty.handler.ssl.SslHandler$SslEngineType$3.unwrap(SslHandler.java:282) at io.netty.handler.ssl.SslHandler.unwrap(SslHandler.java:1387) at io.netty.handler.ssl.SslHandler.decodeJdkCompatible(SslHandler.java:1282) at io.netty.handler.ssl.SslHandler.decode(SslHandler.java:1329) at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:508) at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:447) ... 17 common frames omitted Caused by: java.lang.ClassCastException: class org.apache.cassandra.utils.concurrent.Ref cannot be cast to class sun.nio.ch.DirectBuffer (org.apache.cassandra.utils.concurrent.Ref is in unnamed module of loader org.apache.cassandra.distributed.shared.InstanceClassLoader @2a0ce342; sun.nio.ch.DirectBuffer is in module java.base of loader 'bootstrap') at java.base/com.sun.crypto.provider.GaloisCounterMode$GCMEngine.overlapDetection(GaloisCounterMode.java:865) at java.base/com.sun.crypto.provider.GaloisCounterMode$GCMDecrypt.doFinal(GaloisCounterMode.java:1502) at java.base/com.sun.crypto.provider.GaloisCounterMode.engineDoFinal(GaloisCounterMode.java:447) at java.base/javax.crypto.Cipher.doFinal(Cipher.java:2500) at java.base/sun.security.ssl.SSLCipher$T12GcmReadCipherGenerator$GcmReadCipher.decrypt(SSLCipher.java:1659) at java.base/sun.security.ssl.SSLEngineInputRecord.decodeInputRecord(SSLEngineInputRecord.java:239) at java.base/sun.security.ssl.SSLEngineInputRecord.decode(SSLEngineInputRecord.java:196) at java.base/sun.security.ssl.SSLEngineInputRecord.decode(SSLEngineInputRecord.java:159) at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:111) at java.base/sun.security.ssl.SSLEngineImpl.decode(SSLEngineImpl.java:736) at java.base/sun.security.ssl.SSLEngineImpl.readRecord(SSLEngineImpl.java:691) at java.base/sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:506) ... 25 common frames omitte{code}
Now I see:
{code:java}
(org.apache.cassandra.utils.concurrent.Ref is in unnamed module of loader org.apache.cassandra.distributed.shared.InstanceClassLoader @2a0ce342; sun.nio.ch.DirectBuffer is in module java.base of loader 'bootstrap') atÂ {code}
in [this run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2321/workflows/de1f521d-c5cb-4ddd-bc45-9ec71b577bf3/jobs/19932/tests]

But I did not find the previous class cast exception... to be investigated

Running Â {{SSTableLoaderEncryptionOptionsTest}}Â locally, I am seeing the same result as the first error mentioned in the previous comment, specifically:
{code:java}
Caused by: java.lang.ClassCastException: class org.apache.cassandra.utils.memory.BufferPool$Chunk cannot be cast to class sun.nio.ch.DirectBuffer (org.apache.cassandra.utils.memory.BufferPool$Chunk is in unnamed module of loader org.apache.cassandra.distributed.shared.InstanceClassLoader @4b34fff9; sun.nio.ch.DirectBuffer is in module java.base of loader 'bootstrap')
Â  Â  at java.base/com.sun.crypto.provider.GaloisCounterMode$GCMEngine.overlapDetection(GaloisCounterMode.java:865)
Â  Â  at java.base/com.sun.crypto.provider.GaloisCounterMode$GCMDecrypt.doFinal(GaloisCounterMode.java:1502)
Â  Â  at java.base/com.sun.crypto.provider.GaloisCounterMode.engineDoFinal(GaloisCounterMode.java:447)
Â  Â  at java.base/javax.crypto.Cipher.doFinal(Cipher.java:2500)
Â  Â  at java.base/sun.security.ssl.SSLCipher$T12GcmReadCipherGenerator$GcmReadCipher.decrypt(SSLCipher.java:1659)
Â  Â  at java.base/sun.security.ssl.SSLEngineInputRecord.decodeInputRecord(SSLEngineInputRecord.java:239)
Â  Â  at java.base/sun.security.ssl.SSLEngineInputRecord.decode(SSLEngineInputRecord.java:196)
Â  Â  at java.base/sun.security.ssl.SSLEngineInputRecord.decode(SSLEngineInputRecord.java:159)
Â  Â  at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:111)
Â  Â  at java.base/sun.security.ssl.SSLEngineImpl.decode(SSLEngineImpl.java:736)
Â  Â  at java.base/sun.security.ssl.SSLEngineImpl.readRecord(SSLEngineImpl.java:691)
Â  Â  at java.base/sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:506)
Â  Â  ... 25 common frames omitted
{code}
Considering the comment made here on this ticket from 18/Jan/2023 about {{GaloisCounterMode}} and {{DirectBuffer}} attachments, do we consider this within the scope of CASSANDRA-17992, or as something separate?

Â 

Thank you for looking into this!

The comment on this ticket from 18/Jan/2023Â was made to provide additional context. The problem you managed to reproduce is about what we do in regards to JDK and we hit in JDK17, it is not about Netty.

I hope that helps and I did not misunderstand your question.

Please ping me in Slack if I can help with anything. Thank you

{quote}I think you meant the comment on this ticket from 18/Jan/2023, not onÂ CASSANDRA-17992.
{quote}
Yes, that was my intent - I've update the comment to try and make it more clear :)
{quote}It was made to provide additional context. The problem you managed to reproduce is about what we do in regards to JDK and we hit in JDK17, it is not about Netty.
{quote}
Ok, thanks, this helps clarify it for me - I will try and address the {{ClassCastException}} here with this ticket then.

Â 

I created a patch that implements {{sun.nio.ch.DirectBuffer}} in {{BufferPool$Chunk}} and {{Ref}} - doing this resolves the {{ClassCastException}} coming from {{GaloisCounterMode.overlapDetection}}.

Since {{DirectBuffer}} is not publicly exposed, to make compilation work for JDK11/17 it's necessary to add exports for {{java.base/jdk.internal.ref}} and {{java.base/sun.nio.ch}}.

There is also a change to how {{TestNameCheckTask}} is invoked by {{build.xml}}. Since {{TestNameCheckTask}} uses {{Reflections}} to get the methods annotated with {{@Test}}, and that involves loading classes with the ClassLoader it also needs to pass jvm args for jdk11/17 to avoid {{IllegalAccessError}} to {{sun.nio.ch.DirectBuffer}} (not exported by {{java.base}}). To accomplish this, the {{checktestnameshelper}} ant task in {{build.xml}} is replaced with a java task, passing the necessary jvm args.

Note: these changes are not compatible with JDK8.
Â 
||Branch||CI||
|[trunk|https://github.com/djatnieks/cassandra/tree/CASSANDRA-18180]|[java 11|https://app.circleci.com/pipelines/github/djatnieks/cassandra/3/workflows/7ba8f619-835e-4464-b5a0-6c828352e3d0] [java 17|https://app.circleci.com/pipelines/github/djatnieks/cassandra/3/workflows/86cc2e85-e718-4d09-aa55-fbec0c399733]|

Â 

Thank you for the update,Â [~djatnieks]Â !

I just pushed CI run with my paid CircleCI account.

I created the configuration by running in the .circleci folder
{code:java}
./generate_11_and_17.sh -p{code}
We can check the results later [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=CASSANDRA-18180]

The CI looks good. If we opt in to this solution we still need to justify why we cannot workaround the access to internals and what would be the solution without opening them. Is it too involved to be implemented, do we plan to do it later, etc?

Recap:Â  The {{attachment}} field of {{ByteBuffer}} is being used to store the related {{BufferPool}} {{Chunk}} object that is associated with the buffer. Since -JDK11- JDK16 some crypto overlap detection code in {{GaloisCounterMode}} expects that any object attached to a {{ByteBuffer}} implements {{{}DirectBuffer{}}}, and if it does not, will cause a {{{}ClassCastException{}}}.

Since we see this {{ClassCastException}} in tests using encryption, it seems it's triggered by a supported TLS setting rather than some unintended default.

The patch I provided uses the suggestion made by [~benedict] in this comment in CASSANDRA-17992, which is to have {{Chunk}} (and also {{{}Ref{}}}) implement {{{}DirectBuffer{}}}.

The main downside to this is that two additional {{--add-exports}} are required to be able to access JDK internal class {{{}DirectBuffer{}}}.

Access to this internal class also has a secondary impact on {{TestNameCheckTask}} as it uses reflection and tries to load all related classes of tests being checked. This led to replacing the {{checktestnameshelper}} ant task in {{build.xml}} with a java target so that it is possible to pass the needed jvm args to {{{}TestNameCheckTask{}}}.

An alternative approach that avoids accessing jdk internals would, I think, still need to associate {{ByteBuffer}} objects to {{Chunk}} objects. I experimented with using a map for this, but ended up learning that {{{}ByteBuffer{}}}'s are not suited to being used as map keys, as the docs state:
{noformat}
because buffer hash codes are content-dependent, it is inadvisable to use buffers as keys in hash maps or similar data structures unless it is known that their contents will not change.{noformat}
So, you can put a {{ByteBuffer}} into a map, but if the contents change you won't be able to retrieve/find it again.

I'm not sure what other workaround solution to propose that doesn't negatively affect complexity and/or performance, but am happy to look into other ideas.

-There is another aspect of this that I don't fully understand that's somewhat bothersome - this test only fails with JDK17 even though the same {{GaloisCounterMode}} overlap detection code is present in JDK11; for some reason the same code path is not executed and the tests pass with JDK11. I wonder why that is?-

-I did check the enabled cipher suites for internode messaging and native transport that I found looking at test run output - and those are the same with 11 and 17. So I guess it's a result of some change in the JDK? If I could be due to something else, I don't know what that might be.-

My mistake - {{GaloisCounterMode}} overlap detection was only added in JDK16 with [JDK-8253821|https://bugs.openjdk.org/browse/JDK-8253821], so it does make sense that this issue happens with JDK17 and not with JDK11.

I think enough due diligence has been done here that we should probably accept the exports at this point, and we can open a ticket in the future if this becomes a higher priority.

{quote}I experimented with using a map for this, but ended up learning that {{{}ByteBuffer{}}}'s are not suited to being used as map keys
{quote}
Just a note that it was pointed out to me that {{IdentityHashMap}} could work for this, however it would need to be made thread safe and performance would need to be verified.

Thanks [~djatnieks]Â !

I talked in Slack with [~benedict]Â 

He looked into the patch and he also agreed with your approach.

He has only one suggestion which is more about how to make it a bit more clear maybe and not a correctness issue or so:
He thinks it might be nicer to have a wrapper class around the Ref. As that case matters only for testing purposes or if some DEBUG_ENABLED is active. (For reference - BufferPool.setAttachment)
Â 
In this case we could set it to some object that contains the Ref and also implements DirectBuffer, so that we donât leak these details intoÂ {{Ref}}Â  which probably shouldnât know of themÂ and the extra indirection is only going to be incurred by hosts already paying a very high cost for managing the lifecycle
I think both me and him are ok also with the current approach, so it will be up to the authorÂ whetherÂ to consider that suggestion
Â 

I think that's a good suggestion. So the idea I have for that is to add a class like:
{noformat}
DirectBufferRef<T extends DirectBuffer> extends Ref<T> implements DirectBuffer
{noformat}
Â 
This can use used in {{BufferPool.setAttachment}} , like so:
{noformat}
MemoryUtil.setAttachment(buffer, new DirectBufferRef<>(this, null));
{noformat}
Here's a patch with that approach; let me know if it matches the suggestion or I could try something else: [^cassandra-18180-directbufferref.diff]

Â 

I also noticed that {{MerkleTree}} has some similar code that sets a {{Ref}} as a {{ByteBuffer}} attachment, and in fact, I think any caller of {{MemoryUtil.setAttachment}} probably needs to ensure that the attachment object implements {{DirectBuffer}} in case it gets used with encryption enabled.

The {{MerkleTree}} case is a bit easier than {{BufferPool}} because it only uses a {{null}} referent, so it's enough just to use something like the {{DirectBufferRef}} mentioned above (no need to implement {{DirectBuffer}} in {{MerkleTree}} afaict). [This is not included yet in the patch]

Â 

I thought that perhaps it would be a good idea to even enforce it in {{{}MemoryUtil{}}}, something like:
{noformat}
    public static <T extends DirectBuffer> void setAttachment(ByteBuffer instance, T next)
{noformat}
Â 

However, then I found that {{SyncUtil.force}} uses {{MemoryUtil.getAttachment}} and expects that the attachment may be {{{}Runnable{}}}. I'm not sure yet how that gets set though - I didn't any other {{setAttachment}} calls with {{Runnable}} except in a unit test. Right now I'm not sure what to do about this one - and I'm concerned that when encryption is being used, this could again lead to a {{{}ClassCastException{}}}.

Â 

Thanks, [~djatnieks]Â , I will try to take a look at this tomorrow afternoon. CC [~benedict]Â 

I added a commit for {{MerkleTree}} - here is the latest branch and comparison:

[CASSANDRA-18180-trunk|https://github.com/djatnieks/cassandra/tree/CASSANDRA-18180-trunk]

[compare with trunk|https://github.com/apache/cassandra/compare/trunk...djatnieks:cassandra:CASSANDRA-18180-trunk]

Btw, the reason I put {{DirectBufferRef}} in {{Ref.java}} is not to change the package protected variable {{referent}}. And having {{DirectBufferRef}} makes it simple to replace any use of {{Ref}} as a {{ByteBuffer}} attachment, such as in {{MerkleTree}}.


It seems there is a build failure for j8: https://app.circleci.com/pipelines/github/adelapena/cassandra/2942/workflows/029d1542-7559-435e-b006-2e9a309ba434/jobs/49191

bq. It seems there is a build failure for j8

That's expected as this patch works only for jdk11 and jdk17 and merging will be blocked until jdk8 is dropped.
I added a link to CASSANDRA-18255 to indicate this.


Ah, I see. Thanks for the explanation and the link.

I am still looking into this, but I wanted to ask [~djatnieks]Â to open a PR with the latest branch where we can add comments and keep things in one place. Thank you in advance. I also mentioned some addition needed for Intellij to work with the new exports [here|https://github.com/djatnieks/cassandra/commit/9b2e993e11dc5905843fa1f4c52ea5f5437b301e#r118268304]

I realized that [~djatnieks] is away these days so I decided to help and open PR where I also pushed a commit to fix IntelliJ IDEA. I will push there also my review comments - https://github.com/apache/cassandra/pull/2421

I left comments in the PR already, but also here for completeness:

I still have to dig into the GaloisCounterMode, but I wanted to give you the first review comments that you can think about when you are back, [~djatnieks]:

1) I tested check-test-names by running the ant build-test with wrong test names, and it seems the ant task no longer works as expected. I suggested a workaround in the comments for you.
2) I am not sure it is a good idea to make Ref not final anymore
3) Did some archeology and talked to [~dcapwell] about:
{quote}However, then I found that SyncUtil.force uses MemoryUtil.getAttachment and expects that the attachment may be Runnable. I'm not sure yet how that gets set though - I didn't any other setAttachment calls with Runnable except in a unit test.Â 
{quote}
It is only used in tests, and if they pass, it is okâmore in the PR plus suggestions to update comments for the future generations of Cassandra developers.

4) I also ran CI, and I did not find any new failures [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2378/workflows/cfb2f852-1a68-4a7f-8b61-c49efc5403f6]

More next week

From [~e.dimitrova]'s 3rd point from me...

org.apache.cassandra.io.filesystem.ListenableFileSystem relies on attachment as a way to allow the file system to implement flush when performing mmap (see org.apache.cassandra.io.filesystem.ListenableFileSystem.ListenableFileChannel#map)

{code}
// with real files the FD gets copied so the close of the channel does not block the BB mutation
                // from flushing...  it's possible to support this use case, but kept things simplier for now by
                // failing if the backing channel was closed.
                Runnable forcer = () -> {
                    ByteBuffer local = bb.duplicate();
                    local.position(0);
                    long pos = position;
                    try
                    {
                        while (local.hasRemaining())
                        {
                            int wrote = write(local, pos);
                            if (wrote == -1)
                                throw new EOFException();
                            pos += wrote;
                        }
                    }
                    catch (IOException e)
                    {
                        throw new UncheckedIOException(e);
                    }
                };
                MemoryUtil.setAttachment(bb, forcer);
{code}

So, if you are making changes and org.apache.cassandra.io.filesystem.ListenableFileSystem is working with mmap support, then you are fine in this case... force does not require Runnable, but allows Runnable

{code}
// org.apache.cassandra.utils.SyncUtil#force(java.nio.MappedByteBuffer)
Object attachment = MemoryUtil.getAttachment(buf);
        if (attachment instanceof Runnable)
        {
            ((Runnable) attachment).run();
            return buf;
        }
{code}

There are a few reasons for this

1) when doing jvm-dtest, you may have the same FileSystem shared cross multiple instances (simulator does this), this means that the FileSystem is in app class loader, and the users are in InstanceClassLoader... so the only type possible are primitive JDK types
2) our force checks are hard to mock out due to the reliance of java.nio.MappedByteBuffer#force and a FileDescriptor; 2 types that can't be created by tests...


So yeah, the runnable is kinda a hack, but as long as you make sure its still hitting the mmap case, then your patch doesn't break this relationship...  Simulator tests this, so if those tests are run and passing, should be fine

{quote}The simulator tests this, so it should be fine if those tests are run and pass.
{quote}
Thank you,Â [~dcapwell], this was valuable.Â Simulator tests are run only with JDK11, no JDK 17 tests.

The focus before the freeze is on main Cassandra.

But I will try running the simulator tests now with Java 17 to see where we stand. Thanks again!

Ok, I pushed a fix for the simulator and all tests pass with and without the patch with Java17. I will push the changes soon and also open a ticket for the simulator where those can be separately reviewed :)Â 

Simulator patch pushed inÂ CASSANDRA-18616. With and without the current patch here the tests pass with JDK17 so we are good regarding what [~dcapwell]Â mentioned. Thank you!

New commits pushed by [~djatnieks]Â to the PR to address some of the current feedback. I will continue reviewing tomorrowÂ 

- Pushed new CI run with the latest changes -Â [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=CASSANDRA-18180-trunk]
There are two tests that I haven't seen failing before. Tests in discussion:Â Â 

 * [test_move_backwards_and_cleanup|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2386/workflows/e604ddb5-85fb-4828-b6d5-aae56ba6e6a6/jobs/26557/tests#failed-test-0]Â - Python DTest
 * [testTruncationReleasesLogSpace-oa.jdk11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2386/workflows/ec4aaa50-acea-4c9d-bb20-5d139a6962ab/jobs/26575/tests#failed-test-0]Â - unit test

I managed to reproduce the test_move_backwards_and_cleanup on current trunk [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2390/workflows/719ea674-1f0f-4165-92ba-785469e1bb2f/jobs/27021/tests].Â I did not manage to reproduce the other one in 1000 runs but it seems it could be just something random. (file not available)
 - I ran the simulator tests with JDK17 again (locally until we get the JDK 17 simulator tests job to CircleCI, CASSANDRA-18616)
 - I tested the check-test-names task. It works as expected.
 - The JDK change we address here affects only GCM, as per the JEP [~djatnieks]Â  pointed to. The wrapper looks ok to me and it is used only in debugging/testing.
 - I did not find any other places where we might be hitting this problem.
 - I also ran test_simple_bootstrap_with_ssl and sslnodetonode_test Python DTests with Netty version that uses by default JDK provider (netty 4.1.73, I also had at that branch netty-tcnative-boringssl-static - 2.0.51 but I do not think that matters here) and it was hitting this problem before. The tests pass with this patch, no new problems observed.
Â 
Let's see if [~adelapena]Â will find something we are missing here, but I am personally +1 on the current work. (On squash, rebase and final CI ofc pre-commit)

I don't have anything else to add, changes look good to me.

As for [the failure onÂ {{testTruncationReleasesLogSpace}}|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2386/workflows/ec4aaa50-acea-4c9d-bb20-5d139a6962ab/jobs/26575/tests#failed-test-0], I have managed to [reproduce it on {{trunk}}|https://app.circleci.com/pipelines/github/adelapena/cassandra/2976/workflows/0427ff5b-b283-4c5e-bfaf-83d600626eaf/jobs/53102/tests], so it seems the failure is not related to the changes. Actually, that test can fail on trunk also in [a different way|https://app.circleci.com/pipelines/github/adelapena/cassandra/2973/workflows/dd6e237b-ae4f-4230-94b9-eb48c49d8642/jobs/52884/tests]. So it's definitively a now-known flaky.

Thank you [~adelapena]Â !

I will leave the ticket in ReadyToCommit until we close the other few drop JDK8 blockers.
{quote}As for [the failure onÂ {{testTruncationReleasesLogSpace}}|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2386/workflows/ec4aaa50-acea-4c9d-bb20-5d139a6962ab/jobs/26575/tests#failed-test-0], I have managed to [reproduce it on {{trunk}}|https://app.circleci.com/pipelines/github/adelapena/cassandra/2976/workflows/0427ff5b-b283-4c5e-bfaf-83d600626eaf/jobs/53102/tests], so it seems the failure is not related to the changes. Actually, that test can fail on trunk also in [a different way|https://app.circleci.com/pipelines/github/adelapena/cassandra/2973/workflows/dd6e237b-ae4f-4230-94b9-eb48c49d8642/jobs/52884/tests]. So it's definitively a now-known flaky.
{quote}
Great, thanks! We should open follow-up tickets for the two flaky tests.Â 

Rebased and running final CI: https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2432/workflows/61555395-8882-4e11-bfa0-140797bef9d6
Tested the check for test names locally; it fails properly when it has to. 




CI looks great. All java distributed tests pass now. The failing unit tests are known from the table in the description of CASSANDRA-16895.
Pending commit on ensuring Jenkins accepted the drop from CASSANDRA-18225 as expected.

In regards to the flaky tests we wanted open tickets for:
 - testTruncationReleasesLogSpace - it had already a ticket in triage, I moved it to open and posted the second possible way to fail for reference. CASSANDRA-18274.

- [test_move_backwards_and_cleanup|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2386/workflows/e604ddb5-85fb-4828-b6d5-aae56ba6e6a6/jobs/26557/tests#failed-test-0]Â  I just opened ticket CASSANDRA-18686

CommittedÂ to https://github.com/apache/cassandra

Â Â  02f6353e1f..fe8a6eb70fÂ  trunk -> trunk

Thank you all!

