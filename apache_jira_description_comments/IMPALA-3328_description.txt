This test
{noformat}
query_test.test_mem_usage_scaling.TestTpchMemLimitError.test_low_mem_limit_q9[mem_limit: 450 | exec_option: {'disable_codegen': False, 'abort_on_error': 1, 'exec_single_node_rows_threshold': 0, 'batch_size': 0, 'num_nodes': 0} | table_format: parquet/none]
{noformat}

Is failling in the ASAN builds with:

{noformat}
query_test/test_mem_usage_scaling.py:154: in test_low_mem_limit_q9
    self.low_memory_limit_test(vector, 'tpch-q9', self.MIN_MEM_FOR_TPCH['Q9'])
query_test/test_mem_usage_scaling.py:94: in low_memory_limit_test
    self.run_test_case(tpch_query, new_vector)
common/impala_test_suite.py:269: in run_test_case
    result = self.__execute_query(target_impalad_client, query, user=user)
common/impala_test_suite.py:470: in __execute_query
    return impalad_client.execute(query, user=user)
common/impala_connection.py:161: in execute
    return self.__beeswax_client.execute(sql_stmt, user=user)
beeswax/impala_beeswax.py:163: in execute
    handle = self.__execute_query(query_string.strip(), user=user)
beeswax/impala_beeswax.py:329: in __execute_query
    self.wait_for_completion(handle)
beeswax/impala_beeswax.py:349: in wait_for_completion
    raise ImpalaBeeswaxException("Query aborted:" + error_log, None)
E   ImpalaBeeswaxException: ImpalaBeeswaxException:
E    Query aborted:
E   Memory limit exceeded

E   Query(684e18da97b28f20:16245e7729a8e587) Limit: memory limit exceeded. Limit=450.00 MB Consumption=453.13 MB
E     Block Manager: Limit=350.00 MB Consumption=297.03 MB
E     Fragment 684e18da97b28f20:16245e7729a8e58a: Consumption=26.26 MB
E       SORT_NODE (id=12): Consumption=24.00 MB
E       AGGREGATION_NODE (id=19): Consumption=2.25 MB
E       EXCHANGE_NODE (id=18): Consumption=0
E       DataStreamRecvr: Consumption=0
E       DataStreamSender: Consumption=3.20 KB
E     Fragment 684e18da97b28f20:16245e7729a8e58c: Consumption=421.91 MB
E       AGGREGATION_NODE (id=11): Consumption=1.25 MB
E       HASH_JOIN_NODE (id=10): Consumption=552.56 KB
E       HASH_JOIN_NODE (id=9): Consumption=153.53 MB
E       HASH_JOIN_NODE (id=8): Consumption=1.27 MB
E       HASH_JOIN_NODE (id=7): Consumption=138.02 MB
E       HASH_JOIN_NODE (id=6): Consumption=1.34 MB
E       HDFS_SCAN_NODE (id=2): Consumption=121.79 MB
E       EXCHANGE_NODE (id=13): Consumption=0
E       DataStreamRecvr: Consumption=0
E       EXCHANGE_NODE (id=14): Consumption=0
E       DataStreamRecvr: Consumption=4.15 MB
E       EXCHANGE_NODE (id=15): Consumption=0
E       DataStreamRecvr: Consumption=0
E       EXCHANGE_NODE (id=16): Consumption=0
E       DataStreamRecvr: Consumption=0
E       EXCHANGE_NODE (id=17): Consumption=0
E       DataStreamRecvr: Consumption=0
E       DataStreamSender: Consumption=6.39 KB
{noformat}

query:

{noformat}
use tpch_parquet;

SET batch_size=0;
SET num_nodes=0;
SET disable_codegen=False;
SET abort_on_error=1;
SET mem_limit=450m;
SET exec_single_node_rows_threshold=0;
MainThread: Query Name: 
TPCH-Q9

-- executing against localhost:21000
select
  nation,
  o_year,
  sum(amount) as sum_profit
from(
  select
    n_name as nation,
    year(o_orderdate) as o_year,
    l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
  from
    part,
    supplier,
    lineitem,
    partsupp,
    orders,
    nation
  where
    s_suppkey = l_suppkey
    and ps_suppkey = l_suppkey
    and ps_partkey = l_partkey
    and p_partkey = l_partkey
    and o_orderkey = l_orderkey
    and s_nationkey = n_nationkey
    and p_name like '%green%'
  ) as profit
group by
  nation,
  o_year
order by
  nation,
  o_year desc;
{noformat}

http://sandbox.jenkins.cloudera.com/view/Impala/view/Evergreen-cdh5-trunk/job/impala-cdh5-trunk-core-asan/369/