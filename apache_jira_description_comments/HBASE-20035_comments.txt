Failed again here: https://builds.apache.org/job/HBASE-Flaky-Tests-branch2.0//2437

Looks to me like the MasterQuotaManager isn't getting initialized (given the Master also never does so). The test is ultimately waiting 30s for the presence of the hbase:quota table and some data which should be written in there.

Will try to look at the logs today and see if anythign else jumps out at me. Else, I can try to make some logging changes for the future.

bq. The test is ultimately waiting 30s for the presence of the hbase:quota table and some data which should be written in there.

What is interesting about the second exception is that we've just decided to make the hbase:quota table...  and are making progress but then do NPE. I was thinking this renders a body blow to startup. I've not spent much time at it.

For the first exception, it looks like I pasted the wrong-one. There is another RuntimeException making its way out which seems to be related to unexpected Scan accounting math brought on by quota.

Should if you don't have time boss and I'll spend more time on it. Thanks [~elserj]


Looks like the test itself is just "wrong" now due to size of serialized data on disk.

This is the perceived amount of data ingestion for this test from the first run
{noformat}
2018-02-21 07:16:00,077 INFO  [Time-limited test] quotas.TestQuotaStatusRPCs$4(225): Table snapshot after initial ingest: SpaceQuotaSnapshot[policy=SpaceQuotaStatus[policy=NO_INSERTS, inViolation=true], use=47.69 KB/10 KB]
2018-02-21 07:16:00,081 DEBUG [Time-limited test] quotas.TestQuotaStatusRPCs$5(239): Namespace snapshot after initial ingest: SpaceQuotaSnapshot[policy=SpaceQuotaStatus[policy=null, inViolation=false], use=207.46 KB/8.00 EB]
{noformat}

Then, on a second ingest, we didn't actually increase the size of the table since it was already in violation. So, the condition could never be true because we didn't actually get to ingest more data.

{code}
snapshot.getUsage() > nsUsage.get()
{code}

Let me try to tweak.

{noformat}
2018-02-21 16:04:51,934 INFO  [Time-limited test] quotas.TestQuotaStatusRPCs$4(225): Table snapshot after initial ingest: SpaceQuotaSnapshot[policy=SpaceQuotaStatus[policy=NO_INSERTS, inViolation=true], use=21.50 KB/10 KB]
2018-02-21 16:04:51,939 DEBUG [Time-limited test] quotas.TestQuotaStatusRPCs$5(239): Namespace snapshot after initial ingest: SpaceQuotaSnapshot[policy=SpaceQuotaStatus[policy=null, inViolation=false], use=181.28 KB/8.00 EB]
....
2018-02-21 16:04:53,386 INFO  [Time-limited test] quotas.TestQuotaStatusRPCs$6(259): Table snapshot after second ingest: SpaceQuotaSnapshot[policy=SpaceQuotaStatus[policy=NO_INSERTS, inViolation=true], use=47.69 KB/10 KB]
2018-02-21 16:04:53,388 DEBUG [Time-limited test] quotas.TestQuotaStatusRPCs$7(272): Namespace snapshot after second ingest: SpaceQuotaSnapshot[policy=SpaceQuotaStatus[policy=null, inViolation=false], use=207.46 KB/8.00 EB]
{noformat}

This is from a successful run on my laptop. I think the test is failing when the Master actually notices the updated utilization from the RegionServer too quickly :)

I knew you'd be able to figure it [~elserj] !

+1 Try it.

I don't get this bit sir:

203	    // As of 2.0.0-beta-2, this 1KB of data size actually results in about 15KB on disk
204	    final long tableSize = 1024L * 1; // 1KB

Does the comment mean the tableSize should be 15? Maybe clear up on commit.

bq. Does the comment mean the tableSize should be 15? Maybe clear up on commit.

Essentially trying to explain the difference in writing 1KB of "Cells" and what the resultant HFile space would be for the same. Will clarify it.

Do we have a bloat problem in hbase2? [~elserj]

| (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 14s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  1s{color} | {color:blue} Findbugs executables are not available. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green}  0m  0s{color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
|| || || || {color:brown} branch-2 Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  3m  4s{color} | {color:green} branch-2 passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 38s{color} | {color:green} branch-2 passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 54s{color} | {color:green} branch-2 passed {color} |
| {color:green}+1{color} | {color:green} shadedjars {color} | {color:green}  4m 31s{color} | {color:green} branch has no errors when building our shaded downstream artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 25s{color} | {color:green} branch-2 passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  3m  4s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 38s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 38s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 54s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedjars {color} | {color:green}  3m 37s{color} | {color:green} patch has no errors when building our shaded downstream artifacts. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 13m 10s{color} | {color:green} Patch does not cause any errors with Hadoop 2.6.5 2.7.4 or 3.0.0. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 24s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}108m  3s{color} | {color:green} hbase-server in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 22s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black}135m 41s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hbase:9f2f2db |
| JIRA Issue | HBASE-20035 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12911436/HBASE-20035.001.branch-2.patch |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  shadedjars  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux 7d48724cb4f4 4.4.0-43-generic #63-Ubuntu SMP Wed Oct 12 13:48:03 UTC 2016 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | branch-2 / baec532aa2 |
| maven | version: Apache Maven 3.5.2 (138edd61fd100ec658bfa2d307c43b76940a5d7d; 2017-10-18T07:58:13Z) |
| Default Java | 1.8.0_151 |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/11605/testReport/ |
| Max. process+thread count | 5504 (vs. ulimit of 10000) |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/11605/console |
| Powered by | Apache Yetus 0.7.0   http://yetus.apache.org |


This message was automatically generated.



Pushed with some extra comments to explain the funky looking "math"

FAILURE: Integrated in Jenkins build HBase-Trunk_matrix #4631 (See [https://builds.apache.org/job/HBase-Trunk_matrix/4631/])
HBASE-20035 Stabilize the flaky TestQuotaStatusRPCs (elserj: rev 4cf846d08570256115ac8c2787d0f7fbf162be23)
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/quotas/TestQuotaStatusRPCs.java


