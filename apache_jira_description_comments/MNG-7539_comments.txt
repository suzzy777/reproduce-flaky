You should try to fiddle with the repo policy for updating metadata. That might be too short for you.

We tried that, but it does not work. Right now, the update for SNAPSHOT is {*}always{*}. The reason why it will not work is the following:
 * let's say we change the policy *every 15 minutes*
 * project A builds, uploads new SNAPSHOT artifacts
 * project B builds (and it depends on A, and it did run {*}11 minutes ago{*}), and the timeout is not reached, it sees the previous version of the artifact, and the build fails

Finding the correct update policy is tricky, and depending on the build speed, it introduces flaky behaviors.

I thought of writing an extension to download SNAPSHOTS once, but I feel it should be built in. We have the following policies:
 * always - always check when Maven is started for newer versions of snapshots
 * never - never check for newer remote versions. Once off manual updates can be performed.
 * daily (default) - check on the first run of the day (local time)
 * interval:XXX - check every XXX minutes

A new option can be added "once - check once per build"

Using *daily* or *interval:XX* works fine if your project depends (temporarily) on some open source project ... your build will get a new copy once in a while...but in-house projects which depend on each other and are triggered one after each other by the build pipeline, need to see the latest version of a dependency to avoid failures. The dependency needs to be validated, but only once per build cycle.

If your update of the SNAPSHOT's is always it means you have either configured that in your {{settings.xml}} ([Update Policy|https://maven.apache.org/settings.html#repositories]) or you are using {{-U}} during your build..The update intervall can already being defined via {{settings.xml}} (see updatePolicy)... 

Furthermore:
{quote}Maven Repository (a local Nexus instance), and artifact resolution could slow down the build 2x-3x.{quote}

That sounds like if your repository manager has not enough power to handle such simple load... Also the question is: Does the build of your multi module build (30-40 modules) takes really 10-15 minutes? 

From my point of view you could solve the whole issue by using releases of the needed components in your projects... and test updates (new release versions) on a separate branch... and hopefully having appropriate tests to verify ... ... The other question might be if your project heavily relies on other componenets  (high coupling) it might be an option to reconsider to integrate those components in your multi modules builds... 

*Always* is configured on purpose to make sure it has the latest version.

Indeed, the slow resolution of artifacts does point to a problem in Nexus. Unfortunately, there is no apparent issue with OS (CPU, I/O), and the Java profiler did not highlight anything that stands out. My problem is not with Nexus, even when it's at its best, it still loses time doing all those roundtrips.

I know the recommendation is to use {*}interval:XX{*}, but downloading SNAPSHOTs once would be the most logical thing to do (and as a side effect, it will speed build everywhere the project is set to Always policy). It makes sense to see the same SNAPSHOT at time 00:05s in the build and at 01m:20s ... why would project A have modules built with different versions of a library (we presume a build happened in the middle)? It should present the same artifact version between all modules.

And a final yes, ideally, each project will be released independently. However, all these projects are independent, built on each other, and released as one (under another project) every 3-4 weeks. There are fixes/improvements across multiple projects, and we do not _stop_ and _release_ them individually. Thye is building on commit, running tests, etc., and when the time comes, we move to GA all at once and move to the next release cycle.

If Maven developers find the request wrong, I'll build an extension and share it with those who might have this particular need (and problem :)). Sometimes you might build things in a way that is _not by the book_ , but they are working for you :) 

 

 

Practically it sounds like you need a mono-repo.

As to the request, I find myself flip-flopping as I think about this. Is the underlying issue that a snapshot artifact can change over time although the version number stays the same in the repo? In that case, this is probably working as intended. 

We are using a mono-repo...that's not the problem. Projects are independent, but they build on each other (and a gazillion of open-source projects, of course). 

Anyway, it seems only logical that a build of a multi-module project would see the same version of a snapshot from the first resolve of the dependency to the last, caching the SNAPSHOT for the duration of the current build. I will probably build an extension to intercept repository requests and server the same SNAPSHOT to all modules.

