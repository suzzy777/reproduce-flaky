One known cause in dunit tests is when creation of a persistent region fails and DiskStoreImpl.lambda$handleDiskAccessException forks a new Thread to close the Cache which succeeds in closing the Cache before the main test thread (which is invoking Cache.close()) closes it. The main test thread then early-outs because the DiskStore thread is already closing the Cache. The main test thread then tries to create a Cache which collides with the DiskStore thread which is still closing the Cache and is about to disconnect the DistributedSystem.

{noformat}
java.lang.Throwable: KIRK GemFireCacheImpl closed 632230948
	at org.apache.geode.internal.cache.GemFireCacheImpl.close(GemFireCacheImpl.java:2365)
	at org.apache.geode.internal.cache.GemFireCacheImpl.close(GemFireCacheImpl.java:1917)
	at org.apache.geode.internal.cache.DiskStoreImpl.lambda$handleDiskAccessException$2(DiskStoreImpl.java:3380)
	at java.lang.Thread.run(Thread.java:748)
{noformat}
{noformat}
java.lang.Throwable: KIRK InternalDistributedSystem closed 306674056
	at org.apache.geode.distributed.internal.InternalDistributedSystem.disconnect(InternalDistributedSystem.java:1637)
	at org.apache.geode.distributed.internal.InternalDistributedSystem.disconnect(InternalDistributedSystem.java:1225)
	at org.apache.geode.internal.cache.GemFireCacheImpl.close(GemFireCacheImpl.java:2351)
	at org.apache.geode.internal.cache.GemFireCacheImpl.close(GemFireCacheImpl.java:1917)
	at org.apache.geode.internal.cache.DiskStoreImpl.lambda$handleDiskAccessException$2(DiskStoreImpl.java:3380)
	at java.lang.Thread.run(Thread.java:748)
{noformat}
{noformat}
java.lang.Throwable: KIRK DiskStoreImpl closing cache 1555793073
	at org.apache.geode.internal.cache.DiskStoreImpl.handleDiskAccessException(DiskStoreImpl.java:3376)
	at org.apache.geode.internal.cache.PartitionedRegion.createAndValidatePersistentConfig(PartitionedRegion.java:956)
	at org.apache.geode.internal.cache.PartitionedRegion.initPRInternals(PartitionedRegion.java:999)
	at org.apache.geode.internal.cache.PartitionedRegion.initialize(PartitionedRegion.java:1179)
	at org.apache.geode.internal.cache.GemFireCacheImpl.createVMRegion(GemFireCacheImpl.java:3043)
	at org.apache.geode.internal.cache.GemFireCacheImpl.basicCreateRegion(GemFireCacheImpl.java:2931)
	at org.apache.geode.internal.cache.GemFireCacheImpl.createRegion(GemFireCacheImpl.java:2918)
	at org.apache.geode.cache.RegionFactory.create(RegionFactory.java:755)
	at org.apache.geode.cache.CacheFactoryRecreateRegressionTest.createCacheAndColocatedPRs(CacheFactoryRecreateRegressionTest.java:109)
	at org.apache.geode.cache.CacheFactoryRecreateRegressionTest.lambda$recreateDoesNotThrowDistributedSystemDisconnectedException$0(CacheFactoryRecreateRegressionTest.java:62)
	at org.assertj.core.api.ThrowableAssert.catchThrowable(ThrowableAssert.java:62)
	at org.assertj.core.api.AssertionsForClassTypes.catchThrowable(AssertionsForClassTypes.java:786)
	at org.assertj.core.api.Assertions.catchThrowable(Assertions.java:1200)
	at org.apache.geode.cache.CacheFactoryRecreateRegressionTest.recreateDoesNotThrowDistributedSystemDisconnectedException(CacheFactoryRecreateRegressionTest.java:62)
{noformat}

Commit e519de92c2d0dfd31f8e7297a62ba93b98f7a0db in geode's branch refs/heads/develop from Kirk Lund
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=e519de9 ]

GEODE-7503: Rename GemFireCacheImplEmergencyCloseDistributedTest

Rename from GemfireCacheImplDUnitTest.


Commit ba3d49d557b37cf15a4f8ba90de1f9388d824206 in geode's branch refs/heads/develop from Kirk Lund
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=ba3d49d ]

GEODE-7503: Add new unit tests for GemFireCacheImpl

Inject dependencies into GemFireCacheImpl constructor.


Commit e519de92c2d0dfd31f8e7297a62ba93b98f7a0db in geode's branch refs/heads/feature/GEODE-7556 from Kirk Lund
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=e519de9 ]

GEODE-7503: Rename GemFireCacheImplEmergencyCloseDistributedTest

Rename from GemfireCacheImplDUnitTest.


Commit ba3d49d557b37cf15a4f8ba90de1f9388d824206 in geode's branch refs/heads/feature/GEODE-7556 from Kirk Lund
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=ba3d49d ]

GEODE-7503: Add new unit tests for GemFireCacheImpl

Inject dependencies into GemFireCacheImpl constructor.


Commit 0345938538b34fc1e8948c7e9a57755bdd8b16ee in geode's branch refs/heads/develop from Kirk Lund
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=0345938 ]

GEODE-7503: Cleanup GemFireCacheImpl (#4436)

* Move inner-classes to bottom of outer class

* Move fields to top of class

* More fields

* Fixup

* Fix IJ inspection warnings

* Remove bug system ticket numbers

* Cleanup javadocs, toString, and comments

* Use @VisibleForTesting annotation

* Move toString method and backupFiles field

* Pull javadocs up to interfaces.
Define VisibleForTesting methods in InternalCacheForTesting.
Identify more methods as VisibleForTesting.

* Fixup javadocs and minor warnings in Cache interfaces.

* Move unchecked util methods to UncheckedUtils inner class

* Move static constants and fields to top of class.
Rename FIVE_HOURS to FIVE_HOURS_MILLIS.
Review older TODOs.

* Move volatile fields above non-final fields

* Move non-final fields below volatile and final fields

* Move final fields above volatile fields

* wip

* Adjust whitespace and line feeds.
Remove more TODOs and comments.
Fix spelling typo.

* Import various static methods and constants
Adjust more line feeds
Adjust more white space

* Weaken declared types where it makes sense
Add more static imports

* Remove unnecessary uses of final on local vars

* Remove uncessary uses of final on local vars

* Fixup unchecked types
Restore return types to match the interfaces

* Minor cleanup

* Change Consumer<Void> to Runnable (duh)

* Adjust line feeds of large if-statement

* Remove SuppressWarnings

* Fix AssemblyContentsIntegrationTest

* Fixup GemFireCacheImpl


I closed the main PR (https://github.com/apache/geode/pull/4410) and this ticket after Anil and I discussed it further. The main concern is that the current behavior is expected by users and is de facto correct. Changing it would change the behavior and result in long-time users being surprised by the new behavior.

The rest of the PRs involved cleaning up GemFireCacheImpl and adding lots of new unit tests. Those changes were merged to develop since they didn't change behavior.

upthewaterspout commented on issue #4963:
URL: https://github.com/apache/geode/pull/4963#issuecomment-618527691


   > … so far, I’m not convinced that it’s safe to remove the 1st early out. Are you sure it’s safe to invoke these calls more than once? The current behavior never invokes them more than once.
   
   It looks like it might be ok to have a second thread go in there? If DistributedSystem.disconnect() is safe to call twice, it should be ok. It looks like that method also synchronizes on GemFireCacheImpl and also has some interesting wait logic to wait until other threads have finished disconnecting. Hmm.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


kirklund commented on pull request #4963:
URL: https://github.com/apache/geode/pull/4963#issuecomment-620709035


   I'm currently running a lot of manual tests against this change (ie hydra tests).


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


Commit c12e8cc7221ba79aa60dfdee02059b847a4c787c in geode's branch refs/heads/develop from Kirk Lund
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=c12e8cc ]

GEODE-7503: Block Cache.close() until everything is disconnected (#4963)

Subsequent calls to GemFireCacheImpl close will now block until the
first call to close completes instead of returning from early-outs.

Use boolean argument to skip await if cache close is invoked from
the DisconnectListener in InternalLocator.

Additional changes:
* Make cache close reentrant
* Fixup GemFireCacheImplCloseTest flakiness
* Remove unused class

Commit c12e8cc7221ba79aa60dfdee02059b847a4c787c in geode's branch refs/heads/mass-test-run from Kirk Lund
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=c12e8cc ]

GEODE-7503: Block Cache.close() until everything is disconnected (#4963)

Subsequent calls to GemFireCacheImpl close will now block until the
first call to close completes instead of returning from early-outs.

Use boolean argument to skip await if cache close is invoked from
the DisconnectListener in InternalLocator.

Additional changes:
* Make cache close reentrant
* Fixup GemFireCacheImplCloseTest flakiness
* Remove unused class

Commit c12e8cc7221ba79aa60dfdee02059b847a4c787c in geode's branch refs/heads/mass-test-run from Kirk Lund
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=c12e8cc ]

GEODE-7503: Block Cache.close() until everything is disconnected (#4963)

Subsequent calls to GemFireCacheImpl close will now block until the
first call to close completes instead of returning from early-outs.

Use boolean argument to skip await if cache close is invoked from
the DisconnectListener in InternalLocator.

Additional changes:
* Make cache close reentrant
* Fixup GemFireCacheImplCloseTest flakiness
* Remove unused class

Commit c12e8cc7221ba79aa60dfdee02059b847a4c787c in geode's branch refs/heads/mass-test-run from Kirk Lund
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=c12e8cc ]

GEODE-7503: Block Cache.close() until everything is disconnected (#4963)

Subsequent calls to GemFireCacheImpl close will now block until the
first call to close completes instead of returning from early-outs.

Use boolean argument to skip await if cache close is invoked from
the DisconnectListener in InternalLocator.

Additional changes:
* Make cache close reentrant
* Fixup GemFireCacheImplCloseTest flakiness
* Remove unused class

Commit c12e8cc7221ba79aa60dfdee02059b847a4c787c in geode's branch refs/heads/mass-test-run from Kirk Lund
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=c12e8cc ]

GEODE-7503: Block Cache.close() until everything is disconnected (#4963)

Subsequent calls to GemFireCacheImpl close will now block until the
first call to close completes instead of returning from early-outs.

Use boolean argument to skip await if cache close is invoked from
the DisconnectListener in InternalLocator.

Additional changes:
* Make cache close reentrant
* Fixup GemFireCacheImplCloseTest flakiness
* Remove unused class

Commit c12e8cc7221ba79aa60dfdee02059b847a4c787c in geode's branch refs/heads/mass-test-run from Kirk Lund
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=c12e8cc ]

GEODE-7503: Block Cache.close() until everything is disconnected (#4963)

Subsequent calls to GemFireCacheImpl close will now block until the
first call to close completes instead of returning from early-outs.

Use boolean argument to skip await if cache close is invoked from
the DisconnectListener in InternalLocator.

Additional changes:
* Make cache close reentrant
* Fixup GemFireCacheImplCloseTest flakiness
* Remove unused class

