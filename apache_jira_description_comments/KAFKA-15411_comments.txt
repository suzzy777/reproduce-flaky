Ran a loop and couldn't get it to fail after 25 iterations.

A doc change which ran all the tests also did not uncover it: https://ci-builds.apache.org/blue/organizations/jenkins/Kafka%2Fkafka-pr/detail/PR-14318/1/tests

Are we still seeing this issue?

> Are we still seeing this issue?

Yes, you can monitor the test flakiness rate for trunk at [https://ge.apache.org/scans/tests?search.relativeStartTime=P28D&search.rootProjectNames=kafka&search.tags=trunk&search.timeZoneId=Europe/Berlin&tests.container=kafka.api.DelegationTokenEndToEndAuthorizationWithOwnerTest] 

You can also find the failure rate across all PR builds at [https://ge.apache.org/scans/tests?search.relativeStartTime=P28D&search.rootProjectNames=kafka&search.timeZoneId=Europe/Berlin&tests.container=kafka.api.DelegationTokenEndToEndAuthorizationWithOwnerTest] 

Moving it to 3.7.0 as we are near code freeze and it is not a blocker.

After trying for a week, I have yet to see the error both locally and with PRs.
Please link a Jenkins job if you see this issue again.

Here are the examples from Jenkins job failures in last 24 hours:
[https://ci-builds.apache.org/job/Kafka/job/kafka-pr/view/change-requests/job/PR-14345/lastBuild/testReport/junit/kafka.api/DelegationTokenEndToEndAuthorizationWithOwnerTest/Build___JDK_17_and_Scala_2_13___testCreateTokenForOtherUserFails_String__quorum_kraft/] 

[https://ci-builds.apache.org/job/Kafka/job/kafka/job/trunk/2177/testReport/junit/kafka.api/DelegationTokenEndToEndAuthorizationWithOwnerTest/Build___JDK_11_and_Scala_2_13___testDescribeTokenForOtherUserPasses_String__quorum_kraft/] 

[https://ci-builds.apache.org/job/Kafka/job/kafka/job/trunk/2175/testReport/junit/kafka.api/DelegationTokenEndToEndAuthorizationWithOwnerTest/Build___JDK_17_and_Scala_2_13___testDescribeTokenForOtherUserFails_String__quorum_kraft/] 

You can find these yourself from the links I posted in my previous comment

[~satish.duggana] may I understand why isn't this considered a regression from 3.5 and hence, a blocker for 3.6?

For context, there is a strong correlation with the new delegation token feature being added for kraft and these tests starting to fail. See: [https://github.com/apache/kafka/pull/14083#issuecomment-1691583678] or [https://ge.apache.org/scans/tests?search.relativeStartTime=P28D&search.rootProjectNames=kafka&search.tags=trunk&search.timeZoneId=Europe/Berlin&tests.container=kafka.api.DelegationTokenEndToEndAuthorizationWithOwnerTest] for latest data.

We can say that it is a test related problem and we are sure that it is not a code regression, hence, not a blocker, but I am not sure if we know that yet.

> [~satish.duggana] may I understand why isn't this considered a regression from 3.5 and hence, a blocker for 3.6?

Scratch that. This is a new functionality added in 3.6 and is not a regression over 3.5 since the tests fail for newly introduced support for kraft mode only. I will rephrase this as a potential bug in the newly added functionality.

[~mumrah] [~omkreddy] [~rndgstn] since you reviewed this PR, would you consider this bug as a release blocker? 

I am sure it isn't a code regression because none of these tests were enabled in 3.5 for KRaft. Delegation Token support for KRaft is new to 3.6 and as part of this work I enabled the KRaft versions of these tests.

I am also sure it isn't an issue with the new code. It is instead an interaction with the setup of the test but I'm not sure where it is happening.

The clue I have is the following exception:

{code:java}
Failed to load SSL keystore /tmp/truststore17536420407968839333.jks
{code}

Why it is happening on these few tests and not the dozen or so other Delegation Token tests in the same test file that starts the test harness the exact same way is the mystery.


[~omkreddy] [~mumrah] any ideas why the test setup is failing?

This could be related to the recent MetadataLoader changes. We saw some issues with MetadataPublishers getting an empty image on startup which was addressed https://github.com/apache/kafka/pull/14282, but possibly there is some other case we missed. I'll try to take a look at this soon.

The error
{code:java}
[2023-09-08 11:11:28,426] ERROR [StandardAuthorizer 1000] Failed to complete initial ACL load process. (org.apache.kafka.metadata.authorizer.StandardAuthorizerData:96)	
java.util.concurrent.TimeoutException	
	at kafka.server.metadata.AclPublisher.close(AclPublisher.scala:98)	
	at org.apache.kafka.image.loader.MetadataLoader.closePublisher(MetadataLoader.java:568)	
	at org.apache.kafka.image.loader.MetadataLoader.lambda$removeAndClosePublisher$7(MetadataLoader.java:528)	
	at org.apache.kafka.queue.KafkaEventQueue$EventContext.run(KafkaEventQueue.java:127)	
	at org.apache.kafka.queue.KafkaEventQueue$EventHandler.handleEvents(KafkaEventQueue.java:210)	
	at org.apache.kafka.queue.KafkaEventQueue$EventHandler.run(KafkaEventQueue.java:181)	
	at java.lang.Thread.run(Thread.java:750)
{code}
just means that the authorizer never received an initial MetadataImage from AclPublisher. I think [~pprovenzano] is on the right track with the keystore error.

Taking one example from a failed test
{code:java}
Caused by: org.apache.kafka.common.KafkaException: Failed to load SSL keystore /tmp/truststore5892229881277678824.jks of type JKS	
	at org.apache.kafka.common.security.ssl.DefaultSslEngineFactory$FileBasedStore.load(DefaultSslEngineFactory.java:374)	
	at org.apache.kafka.common.security.ssl.DefaultSslEngineFactory$FileBasedStore.<init>(DefaultSslEngineFactory.java:346)	
	at org.apache.kafka.common.security.ssl.DefaultSslEngineFactory.createTruststore(DefaultSslEngineFactory.java:319)	
	at org.apache.kafka.common.security.ssl.DefaultSslEngineFactory.configure(DefaultSslEngineFactory.java:168)	
	at org.apache.kafka.common.security.ssl.SslFactory.instantiateSslEngineFactory(SslFactory.java:140)	
	at org.apache.kafka.common.security.ssl.SslFactory.configure(SslFactory.java:97)	
	at org.apache.kafka.common.network.SaslChannelBuilder.configure(SaslChannelBuilder.java:180)	
	... 25 more	
Caused by: java.io.EOFException	
	at java.io.DataInputStream.readInt(DataInputStream.java:392)	
	at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:661)	
	at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:57)	
	at sun.security.provider.KeyStoreDelegator.engineLoad(KeyStoreDelegator.java:224)	
	at sun.security.provider.JavaKeyStore$DualFormatJKS.engineLoad(JavaKeyStore.java:71)	
	at java.security.KeyStore.load(KeyStore.java:1445)	
	at org.apache.kafka.common.security.ssl.DefaultSslEngineFactory$FileBasedStore.load(DefaultSslEngineFactory.java:371)	
	... 31 more
{code}
It looks like the keystore file exists, but maybe doesn't have data in it? Perhaps there is some test setup race condition that we haven't hit before, but with the addition of so many new tests that use this code we are now seeing it? Unfortunately, I don't know enough about the authz tests to really suggest where to look.

I would suggest creating a branch that modifies the Jenkinsfile to run a single test class N times without parallelism and increase the relevant log4j loggers to DEBUG.

Another instance: https://ci-builds.apache.org/job/Kafka/job/kafka-pr/job/PR-14458/3/testReport/junit/kafka.api/DelegationTokenEndToEndAuthorizationWithOwnerTest/Build___JDK_21_and_Scala_2_13___testDescribeTokenForOtherUserFails_String__quorum_kraft/

Another failure: [https://ci-builds.apache.org/blue/organizations/jenkins/Kafka%2Fkafka-pr/detail/PR-14699/21/tests]

 
{code:java}
Build / JDK 8 and Scala 2.12 / [2] quorum=kraft, isIdempotenceEnabled=false – kafka.api.DelegationTokenEndToEndAuthorizationWithOwnerTest10s
 
Error
java.util.concurrent.ExecutionException: org.apache.kafka.common.errors.SaslAuthenticationException: Authentication failed during authentication due to invalid credentials with SASL mechanism SCRAM-SHA-256
Stacktrace
java.util.concurrent.ExecutionException: org.apache.kafka.common.errors.SaslAuthenticationException: Authentication failed during authentication due to invalid credentials with SASL mechanism SCRAM-SHA-256
at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:357)
at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1908)
at org.apache.kafka.common.internals.KafkaFutureImpl.get(KafkaFutureImpl.java:165)
at kafka.api.DelegationTokenEndToEndAuthorizationTest.createDelegationTokens(DelegationTokenEndToEndAuthorizationTest.scala:165)
at kafka.api.DelegationTokenEndToEndAuthorizationTest.createDelegationTokens(DelegationTokenEndToEndAuthorizationTest.scala:157)
at kafka.api.DelegationTokenEndToEndAuthorizationTest.configureSecurityAfterServersStart(DelegationTokenEndToEndAuthorizationTest.scala:100)
at kafka.api.DelegationTokenEndToEndAuthorizationWithOwnerTest.configureSecurityAfterServersStart(DelegationTokenEndToEndAuthorizationWithOwnerTest.scala:76)
at kafka.integration.KafkaServerTestHarness.setUp(KafkaServerTestHarness.scala:125)
at kafka.api.IntegrationTestHarness.doSetup(IntegrationTestHarness.scala:134)
at kafka.api.IntegrationTestHarness.setUp(IntegrationTestHarness.scala:114)
at kafka.api.EndToEndAuthorizationTest.setUp(EndToEndAuthorizationTest.scala:166)
at kafka.api.DelegationTokenEndToEndAuthorizationTest.setUp(DelegationTokenEndToEndAuthorizationTest.scala:135)
at sun.reflect.GeneratedMethodAccessor37.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:728)
at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
at org.junit.jupiter.engine.extension.TimeoutExtension.interceptLifecycleMethod(TimeoutExtension.java:128)
at org.junit.jupiter.engine.extension.TimeoutExtension.interceptBeforeEachMethod(TimeoutExtension.java:78)
at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeMethodInExtensionContext(ClassBasedTestDescriptor.java:521)
at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$synthesizeBeforeEachMethodAdapter$23(ClassBasedTestDescriptor.java:506)
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeBeforeEachMethods$3(TestMethodTestDescriptor.java:175)
at {code}

Changing target fix version to 3.8 since this is not a blocker and we are cutting a 3.7 RC

 

 

