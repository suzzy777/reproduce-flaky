This can be reproduced reliably by fixing the seed to the same seed that failed on Jenkins: 2080431860597L. I've also reproduced it another couple of times locally, it seems on average we have one failure every 100 to 150 runs.

For seed 2080431860597L, despite inserting 50 corrupt bytes at position 112 of sstable no. 24, the sstable still gets compacted. This is because we read through the corrupted bytes without complaining: vint encoding assume a positive byte is a valid int, flags don't particularly raise problems, neither do ascii types.

I've replaced Ascii types with Long types, which are fixed size types and should have a better chance at detecting corrupted bytes, and I've doubled the corruption size. I've already run the test locally 100 times and I've launched another multiplex of 250 times on Jenkins:

[3.9 patch|https://github.com/stef1927/cassandra/commits/12359-3.9]
[multiplexed results|http://cassci.datastax.com/view/Dev/view/stef1927/job/stef1927-testall-multiplex/16/]

Alternatively we could fix the corrupted bytes to zero or -1, and only leave the corruption position as random.

The multiplexed tests ran with the wrong commit, restarted [here|http://cassci.datastax.com/job/stef1927-testall-multiplex/17/].

[~Stefania] - I think this is supposed to be Patch Available. If so, consider me +1 and feel free to commit. Multiplexed run looks good.

Thanks. 

I am going to run the multiplexed tests one more time [here|http://cassci.datastax.com/job/stef1927-testall-multiplex/18/] and if the results are still good I will commit this.

Second multiplex run also good, committed to 3.0 as f5c9d6e49c2bec23d0eace78c64866fa3dafaac1 and merged upwards.

