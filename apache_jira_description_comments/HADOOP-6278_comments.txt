Now that the project has split, should this include generating and promoting updated jars up the dependency line?  That's not always getting done.

Sounds great!   Some questions:

> 1) For non-trivial patches, code reviews must be done by another committer.

Does it mean that non-committers can review trivial patches?  Then, does a committer require to review the trivial patch when committing it?

BTW, it may be hard to decide whether a patch is trivial or not.

> 5) A -1 from Hadoop QA for core and contrib unit tests means the patch must not be committed until these are fixed (else every subsequent patch will get -1 on these)

What if an existing unit test fails, which is not related to the patch?  An example is TestBackupNode (HDFS-192), which keeps failing in 6 months.

Nicholas, you're correct, 1 should be:
1) For all patches, code reviews must be done by another committer.

For number 5, what do you suggest?  Do you think a broken build should stop further commits?  Do you think a broken build is the highest priority for the community to fix?   Do you think flaky unit tests should be pulled out or put into a separate 'category'?

> Do you think a broken build should stop further commits?

Ideally, yes.  But it may slow down our development.

> Do you think a broken build is the highest priority for the community to fix?

Definitely yes, especially for the one who has "contributed" to the broken build.

> Do you think flaky unit tests should be pulled out or put into a separate 'category'?

I think the correct approach is to revert the committed patch which breaks the build.  However, this may be hard when the patch has got in for a long time.  How about we set a time limit, say a week, for fixing the build?


Closing this as won't fix.

Do we really need a *jira* to update the *wiki*?

