[~boroknagyz] it looks like there's an occasional flake with the test you added as part of IMPALA-8742. I wasn't able to reproduce locally - I think it probably depends on the file layout somehow.

I hit this again here: https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/8899/testReport/junit/query_test.test_scanners/TestScannerReservation/test_scanners_protocol__beeswax___exec_option____batch_size___0___num_nodes___0___disable_codegen_rows_threshold___0___disable_codegen___False___abort_on_error___1___exec_single_node_rows_threshold___0____table_format__text_none_/

Hit this here: https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/9400/

Encounter this again here: [https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/9206]

The error is the same:
{code}
query_test/test_scanners.py:1438: in test_scanners
    self.run_test_case('QueryTest/scanner-reservation', vector)
common/impala_test_suite.py:715: in run_test_case
    update_section=pytest.config.option.update_results)
common/test_result_verifier.py:612: in verify_runtime_profile
    actual))
E   AssertionError: Did not find matches for lines in runtime profile:
E   EXPECTED LINES:
E   row_regex:.*ParquetRowGroupIdealReservation.*Avg: 3.50 MB.*
...
{code}

The actual amount is:
{code}
- ParquetRowGroupIdealReservation: (Avg: 3.88 MB (4063232) ; Min: 3.88 MB (4063232) ; Max: 3.88 MB (4063232) ; Number of samples: 1)
{code}

[~boroknagyz] Can you triage this and let me know if this is something that we should fix in Impala 3.4?

Unfortunately I couldn't reproduce it. Seems like the test is flawed in some way. I don't think it should be a blocker for the release.

Commit f2f4c9891a652be35212aba95d1149e4a79db030 in impala's branch refs/heads/master from Zoltan Borok-Nagy
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=f2f4c98 ]

IMPALA-9091: Fix flaky query_test.test_scanners.TestScannerReservation.test_scanners

query_test.test_scanners.TestScannerReservation.test_scanners was flaky.
It checks the average value of ParquetRowGroupIdealReservation which is
almost always 3.50 MB. However, very rarely it's a bit different than
that, e.g. 3.88 MB, or 4.12 MB, and so on. I wasn't able to reproduce
this problem, probably it is due to some randomness during data loading.

I modified the test to accept any value between 3.0 and 4.99. I think
values in this range are acceptable for this test.

Change-Id: I668d0ccd77a62059284e76fee51efb08bef580eb
Reviewed-on: http://gerrit.cloudera.org:8080/15923
Reviewed-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


