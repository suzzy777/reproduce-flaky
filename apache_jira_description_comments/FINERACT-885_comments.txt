This just happened again on https://travis-ci.org/github/apache/fineract/builds/679658883 for (trivial, README only change) https://github.com/apache/fineract/pull/779.  As per our policy (new , proposed in https://github.com/apache/fineract/pull/782), I'm therefore proposing https://github.com/apache/fineract/pull/784.

The previous comment was about testLoanScheduleWithInterestRecalculation_WITH_REST_DAILY_INTEREST_COMPOUND_INTEREST_FEE_STRATEGY_WITH_OVERDUE_CHARGE().

In https://travis-ci.org/github/apache/fineract/builds/679673069 for https://github.com/apache/fineract/pull/785, it was the loanWithCahargesOfTypeAmountPercentageAndPeriodicAccrualAccountingEnabled() that failed. I've therefore added a 2nd commit to #785 (which was originally FINERACT-899) to ignore that one as well.

If we get more than 2 test methods failing in a test class, then should we just ignore the entire test class instead?

https://travis-ci.org/github/apache/fineract/builds/679684395 for (the same) https://github.com/apache/fineract/pull/785 now failed due to loanWithCahargesOfTypeAmountPlusInterestPercentageAndPeriodicAccrualAccountingEnabled() which I'm also disabling.

It's possible that these tests are not as "isolated" as they should be; if one of them relies on something which another one set up, then ignoring one could make others fail. This is wrong of course, and should be fixed as part of addressing this issue. (JUnit @Test methods must each always be completely independent one of another.)

https://travis-ci.org/github/apache/fineract/builds/679738977 for https://github.com/apache/fineract/pull/779 now failed due to loanWithFlatCahargesAndPeriodicAccrualAccountingEnabled, so I've raised new https://github.com/apache/fineract/pull/786 for that.

Re. test isolation, FTR that's not it, note that https://github.com/apache/fineract/pull/785 was green when I merged it, so loanWithFlatCahargesAndPeriodicAccrualAccountingEnabled is truly "flaky" (not "dependant").

Yesterday and today testLoanRefundByCashCashBasedAccounting (and other ...refund... tests) are also failing.

I looked into this, and as far as I can see the reason is that February has less days than May :)

The tests create a loan that starts four calendar months ago on the same day: when the test is ran on 31st May, the loan starts on 31st Jan. 

The test expects that the 4th instalment is due today ie 31st May. 
But given February has 29 days this year, the instalment date gets reset to 29th and stays there:

31st Jan disbursement
29th Feb instalment #1
29th Mar instalment #2
29th Apr instalment #3
29th May instalment #4 <--- this breaks the test, as now the 4th instalment is in the past rather than today

Need to think how to best fix this... but the good news is that it should work again tomorrow (and then for another 28 days)

[~ptuomola] interesting. I've just sent a DM to someone with great functional knowlege about the project who may have a suggestion.

FTR: This probably hit us on several PRs raised at the very end of May, e.g. on https://travis-ci.org/github/apache/fineract/builds/693369488 for https://github.com/apache/fineract/pull/948 for FINERACT-965 and https://travis-ci.org/github/apache/fineract/builds/692944271 for https://github.com/apache/fineract/pull/951 for FINERACT-840.

Also note https://github.com/apache/fineract/pull/956 (which is totally unrelated to the problem on 28/29th; we probably have (at least?) two completely separate issues in this test - one scheduler test infra related, and one date related.

[https://github.com/apache/fineract/pull/1129] should hopefully now fix the date issue that breaks the integration test on the last couple of days every month

FINERACT-1244 has a possibly related follow-up.

