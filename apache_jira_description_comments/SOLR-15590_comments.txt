Note that the first candidate for extraction is the admin features, and the current PR has a stub for that which served as a foil, but should be removed before commit.

Possibly related is SOLR-14903

Updated PR, for second round of review. Removed stuff that's not meant to go in with this change. If no major comments will look to push it in next weekend

Commit 5b6d9dbb3472088be2043b8942bc7b54c25b7305 in solr's branch refs/heads/main from Gus Heck
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=5b6d9db ]

SOLR-15590 - Start CoreContainer with Context Listener (#416)



Pushed this since it seems not to *obviously* affect test failure rates, though I realize that one can't have good confidence in such a statement without 100+ iterations of testing which is not practical. Will watch [http://fucit.org/solr-jenkins-reports/failure-report.html] thought that's on fire with hdfs stuff anyway... if no excitement ensues I'll close this ticket.

This breaks SSL b/c the keystore password isn't initialized before the CoreContainer tries to initialize:
{code}
2021-11-30 20:19:11.636 ERROR (main) [] o.a.s.c.SolrCore null => org.apache.solr.common.SolrException: Error instantiating shardHandlerFactory class [HttpShardHandlerFactory]: java.security.UnrecoverableKeyException: Get Key failed: null
	at org.apache.solr.handler.component.ShardHandlerFactory.newInstance(ShardHandlerFactory.java:56)
org.apache.solr.common.SolrException: Error instantiating shardHandlerFactory class [HttpShardHandlerFactory]: java.security.UnrecoverableKeyException: Get Key failed: null
	at org.apache.solr.handler.component.ShardHandlerFactory.newInstance(ShardHandlerFactory.java:56) ~[solr-core-9.0.0-SNAPSHOT.jar:9.0.0-SNAPSHOT 470b7fbff96aec0bd1120634f3f8a8241484f6f7 [snapshot build, details omitted]]
	at org.apache.solr.core.CoreContainer.load(CoreContainer.java:712) ~[solr-core-9.0.0-SNAPSHOT.jar:9.0.0-SNAPSHOT 470b7fbff96aec0bd1120634f3f8a8241484f6f7 [snapshot build, details omitted]]
	at org.apache.solr.servlet.CoreContainerProvider.createCoreContainer(CoreContainerProvider.java:353) ~[solr-core-9.0.0-SNAPSHOT.jar:9.0.0-SNAPSHOT 470b7fbff96aec0bd1120634f3f8a8241484f6f7 [snapshot build, details omitted]]
	at org.apache.solr.servlet.CoreContainerProvider.init(CoreContainerProvider.java:214) ~[solr-core-9.0.0-SNAPSHOT.jar:9.0.0-SNAPSHOT 470b7fbff96aec0bd1120634f3f8a8241484f6f7 [snapshot build, details omitted]]
	at org.apache.solr.servlet.CoreContainerProvider.contextInitialized(CoreContainerProvider.java:108) ~[solr-core-9.0.0-SNAPSHOT.jar:9.0.0-SNAPSHOT 470b7fbff96aec0bd1120634f3f8a8241484f6f7 [snapshot build, details omitted]]
...
Caused by: java.lang.NullPointerException
	at sun.security.pkcs12.PKCS12KeyStore$RetryWithZero.run(Unknown Source) ~[?:?]
	at sun.security.pkcs12.PKCS12KeyStore.engineGetKey(Unknown Source) ~[?:?]
	at sun.security.util.KeyStoreDelegator.engineGetKey(Unknown Source) ~[?:?]
	at java.security.KeyStore.getKey(Unknown Source) ~[?:?]
	at sun.security.ssl.SunX509KeyManagerImpl.<init>(Unknown Source) ~[?:?]
	at sun.security.ssl.KeyManagerFactoryImpl$SunX509.engineInit(Unknown Source) ~[?:?]
	at javax.net.ssl.KeyManagerFactory.init(Unknown Source) ~[?:?]
	at org.eclipse.jetty.util.ssl.SslContextFactory.getKeyManagers(SslContextFactory.java:1249) ~[jetty-util-9.4.44.v20210927.jar:9.4.44.v20210927]
	at org.eclipse.jetty.util.ssl.SslContextFactory.load(SslContextFactory.java:373) ~[jetty-util-9.4.44.v20210927.jar:9.4.44.v20210927]
	at org.eclipse.jetty.util.ssl.SslContextFactory.doStart(SslContextFactory.java:244) ~[jetty-util-9.4.44.v20210927.jar:9.4.44.v20210927]
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73) ~[jetty-util-9.4.44.v20210927.jar:9.4.44.v20210927]
	at org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:169) ~[jetty-util-9.4.44.v20210927.jar:9.4.44.v20210927]
	at org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:117) ~[jetty-util-9.4.44.v20210927.jar:9.4.44.v20210927]
	at org.eclipse.jetty.client.HttpClient.doStart(HttpClient.java:255) ~[jetty-client-9.4.44.v20210927.jar:9.4.44.v20210927]
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:73) ~[jetty-util-9.4.44.v20210927.jar:9.4.44.v20210927]
	at org.apache.solr.client.solrj.impl.Http2SolrClient.createHttpClient(Http2SolrClient.java:237) ~[solr-solrj-9.0.0-SNAPSHOT.jar:9.0.0-SNAPSHOT 470b7fbff96aec0bd1120634f3f8a8241484f6f7 [snapshot build, details omitted]]
	at org.apache.solr.client.solrj.impl.Http2SolrClient.<init>(Http2SolrClient.java:158) ~[solr-solrj-9.0.0-SNAPSHOT.jar:9.0.0-SNAPSHOT 470b7fbff96aec0bd1120634f3f8a8241484f6f7 [snapshot build, details omitted]]
	at org.apache.solr.client.solrj.impl.Http2SolrClient$Builder.build(Http2SolrClient.java:872) ~[solr-solrj-9.0.0-SNAPSHOT.jar:9.0.0-SNAPSHOT 470b7fbff96aec0bd1120634f3f8a8241484f6f7 [snapshot build, details omitted]]
	at org.apache.solr.handler.component.HttpShardHandlerFactory.init(HttpShardHandlerFactory.java:263) ~[solr-core-9.0.0-SNAPSHOT.jar:9.0.0-SNAPSHOT 470b7fbff96aec0bd1120634f3f8a8241484f6f7 [snapshot build, details omitted]]
	at org.apache.solr.handler.component.ShardHandlerFactory.newInstance(ShardHandlerFactory.java:51) ~[solr-core-9.0.0-SNAPSHOT.jar:9.0.0-SNAPSHOT 470b7fbff96aec0bd1120634f3f8a8241484f6f7 [snapshot build, details omitted]]
	... 52 more
2021-11-30 20:19:11.671 INFO  (main) [] o.a.s.u.c.SSLConfigurations Setting javax.net.ssl.keyStorePassword
2021-11-30 20:19:11.671 INFO  (main) [] o.a.s.u.c.SSLConfigurations Setting javax.net.ssl.trustStorePassword
{code}

Notice how the {{SSLConfigurations.init}} stuff happens after the CC tries to initialize.

To reproduce, you need to configure SSL and start Solr via the {{bin/solr}} script (I don't think a unit test will catch this type of breakage). The {{bin/solr}} script exports the {{SOLR_SSL_KEY_STORE_PASSWORD}} and the {{SSLConfigurations.init}} code will read the value from that env var (via {{EnvSSLCredentialProvider}}) and then set the {{javax.net.ssl.keyStorePassword}} system property used during Http2SolrClient construction needed by the shard handler factory

What is the motivation behind allowing "multiple filters and servlets that depend on SolrCore and CoreContainer, while still only having one CoreContainer per instance of solr."? Do you intend to break up the SolrDispatchFilter into multiple servlets/filters?

bq. possibly to split out some features from SolrDispatchFilter into servlets or separate filters
I think we need a broader discussion for this.

[~thelabdude] After reading code a bit more, reproducing your problem locally and thinking a bit I decided it was not right for any part of core container startup code to know anything about SSL, which should be orthogonal, so rather than the solution we discussed on slack, so I moved the call to SSLConfigurationsFactory.current().init() into the jetty-ssl.xml config since that ensures that no matter what context listener, filter, servlet or other code decides to create an HTTP client, it will not need to rely on some other class being set up first.

[~ichattopadhyaya] Yes I would like to split out some of our request-wrapping features into distinct filters with a clear and easy to understand configuration/layering. The possibility of creating servlets or other similar things like JAX-RS also becomes less difficult, though clearly this is not the only problem to solve to enable that.

Commit 6fdbe171284bfac22da42c1c23a03decab79336b in solr's branch refs/heads/main from Gus Heck
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=6fdbe17 ]

SOLR-15590 Fix SSL, init order misplaced by prior commit for this ticket. (#445)

Moves init into jetty-ssl.xml to ensure ssl is ready before any of our https request related code needs it, and remove such concerns from solr request related classes.

Ok this has been in for a while and hasn't  disrupted anything else, I think this can be closed now. 

Don't think it needs a Changes entry since it should be (hopefully) transparent to all but those coding in our depths. 

I'm all for avoiding ceremony but this JIRA was a big deal to the internals.  I'd prefer to see something added to CHANGES.txt; could be vague.

Ok np will add.

[~gus] this Jira has merges to main but is still not resolved. Think it just needs a CHANGES.txt entry? 

[~gus] has the Changes.txt been added? If so this should be closed.

ping

My research shows that this was merged before branch_9_0 was cut so it should go tin 9.0 changes.

I put up a PR with a changes entry [https://github.com/apache/solr/pull/761] - is it ok?

Yes that looks fine, sorry I keep not getting to this, last few weeks have been increasingly busy with almost no time to contribute, (this time of year is often crazy for me, should improve in a week or two). 

Commit 7bd8a82df05984c5dbb008911fb957ea1804eb99 in solr's branch refs/heads/main from Jan Høydahl
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=7bd8a82 ]

SOLR-15590: Changes entry for 9.0 (#761)



Commit 04a210c2b56fd196628ce924da3142b6b4f19088 in solr's branch refs/heads/branch_9x from Jan Høydahl
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=04a210c ]

SOLR-15590: Changes entry for 9.0 (#761)

(cherry picked from commit 7bd8a82df05984c5dbb008911fb957ea1804eb99)


Commit f9fd674d147f516cb0673fdd9052066e8a29701b in solr's branch refs/heads/branch_9_0 from Jan Høydahl
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=f9fd674 ]

SOLR-15590: Changes entry for 9.0 (#761)

(cherry picked from commit 7bd8a82df05984c5dbb008911fb957ea1804eb99)


No problem Gus. We all have different seasons of availability.

Put in the changes line and resolved this.

Closing after the 9.0.0 release

