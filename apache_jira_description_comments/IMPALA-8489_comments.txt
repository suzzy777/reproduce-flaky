Commit a2c5d953b0fa6d69aa34eccaa13fa9aacd31ad10 in impala's branch refs/heads/master from Tim Armstrong
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=a2c5d95 ]

IMPALA-8121: part 2: use local catalog in containers

This enables "modern" catalog features including the
local catalog and HMS notification support in the
dockerised minicluster by default.

The flags can be overridden if needed.

Skip tests affected by these bugs:
* IMPALA-8486 (LibCache invalidations)
* IMPALA-8458 (alter column stats)
* IMPALA-7131 (data sources not supported)
* IMPALA-7538 (HDFS caching DDL not supported)
* IMPALA-8489 TestRecoverPartitions.test_post_invalidate fails with
  IllegalStateException
* IMPALA-8459 (cannot drop Kudu table)
* IMPALA-7539 (insert permission checks)

Fix handling of table properties in _get_properties()
to avoid including properties from unrelated sections.
This caused problems becase of additional properties
added by metastore event processing.

Rewrite test_partition_ddl_predicates() to change file formats rather
than use HDFS caching DDL.

Update the various test_kudu_col* tests to not expect staleness of
Kudu metadata for catalog V2.

Fix IMPALA-8464 so that testMetaDataGetColumnComments() allows the
table comment to be present, which is the new behaviour. Add a
new end-to-end test test_get_tables() that tests the precise
behaviour for different catalog versions so as to not lose
coverage.

Change-Id: I900d4b718cca98bcf86d36a2e64c0b6a424a5b7c
Reviewed-on: http://gerrit.cloudera.org:8080/13226
Reviewed-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


I'm having trouble reproducing this. Was this flaky for you? Or consistently failing? Were you using Hive 2 or Hive 3 for this test?

I was using hive 2. It reproduced locally for me on both the dockerized and non-dockerized miniclusters the first time I ran it on each.

Here's a one-liner I used to repro on my dev environment - branched off 3567a2b5d4f797d0d48e37efc0126d022cb6a189.
{noformat}
start-impala-cluster.py --impalad_args=--use_local_catalog=true --catalogd_args="--catalog_topic_mode=minimal -hms_event_polling_interval_s=1" && impala-py.test tests/metadata/test_recover_partitions.py -k post_invalidate
{noformat}

Ah, it seems this is due to --hms_event_polling_interval_s=1 rather than local catalog (I can repro with polling enabled, but if I turn off polling and keep localcatalog, it passes). Taking a look.

I can reproduce this by just enabling polling (and not LocalCatalog). Updated the title appropriately.

The issue seems to be in CatalogOpExecutor.updateCatalog handling of partitions that were touched by an insert. It comes up with a list of partition IDs that were modified by the insert, then calls loadTableMetadata() which refreshes those partitions. Because the partition was added by ALTER TABLE RECOVER PARTITIONS, it got marked as "dirty" which means that the refresh ends up dropping and reloading it with a new partition ID. Then, createInsertEvents looks for the partitions by ID, but they've since been assigned new IDs, so they aren't found.

Digging into this a bit more to see if I can see why this affects this code path but not others that also use the "dirty partition" hack

I think Vihang was going to look at this? If not, feel free to bounce back to me

[~bharathv] - As per your gerrit comments, I reproduced this locally and here is the sequence of steps to reproduce.
{code:java}
CREATE TABLE foo (c int) PARTITIONED BY (i int, p string);

INSERT INTO TABLE foo PARTITION(i=1, p='p1') VALUES(1);

-- Create a partition (i=002, p='p2') directory manually and add a file there --

ALTER TABLE foo RECOVER PARTITIONS;

INVALIDATE METADATA;

INSERT INTO TABLE test_recover_partitions PARTITION(i=002, p='p2') VALUES(4);{code}
The final insert throws the exception as the partition ids have changed after a drop + recreate of partition (i=002, p='p2'). Catalogd logs below:
{code:java}
I0718 13:52:47.996079 20026 jni-util.cc:288] java.lang.IllegalArgumentException: no such partition id 6
at org.apache.impala.catalog.HdfsTable.loadPartitions(HdfsTable.java:343)
at org.apache.impala.service.CatalogOpExecutor.createInsertEvents(CatalogOpExecutor.java:3885)
at org.apache.impala.service.CatalogOpExecutor.updateCatalog(CatalogOpExecutor.java:3843)
at org.apache.impala.service.JniCatalog.updateCatalog(JniCatalog.java:322)
I0718 13:52:48.129122 20026 status.cc:124] IllegalArgumentException: no such partition id 6{code}

Commit 2551a873a0ab5636b3693711de11e2a91474d86a in impala's branch refs/heads/master from Anurag Mantripragada
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=2551a87 ]

IMPALA-8489: Partitions created by RECOVER PARTITIONS fail to create
insert events with IllegalStateException.

createInsertEvents() uses partition ids to keep track of the files
added to the partitions by the insert by finding the delta of files
in a partition before and after load() call. However, if partitions
are marked dirty (for eg.: partitions created by RECOVER PARTITIONS),
load() will drop and re-create them which will change the partition
ids. createInsertEvents() then cannot find these parittions and fails
with exception.

In this patch, partitions are tracked by partition names instead of
partition ids so drop + reload will not affect the logic.

Testing:
1. Ran TestRecoverPartitions.test_post_invalidate() which was
   failing.
2. Ran MetastoreEventProcessorTest FE tests.

Change-Id: Idef7f6aadff2868047c861ebfcc05d65f080eab9
Reviewed-on: http://gerrit.cloudera.org:8080/13860
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Reviewed-by: Vihang Karajgaonkar <vihang@cloudera.com>


Committed to master.

