PR available [here.|https://github.com/apache/cassandra/pull/2554]

There's implications to what we do in CASSANDRA-18594 and other CI work from this here; in my opinion our CI structure should be based on a decoupled root like this so new job additions and env changes can be done in one place and these changes cascade down to all potential CI implementations in the ecosystem (ASF CI w/JenkinsFile, .circleci, etc).

ping [~edimitrova], [~adelapena], [~mck], and [~dcapwell]. I know all of you have done quite a bit of work in the CI space and probably have great insight / opinions to share here. Any of you have cycles for review / collab on this?

Not a full review, but I skimmed through the patch and left some comments on the patch.
I have a question - this layer is where the descriptions will be, but there should be scripts that take the config from the yamls and create a config for pipelines for whatever software we use - CircleCI, Jenkins... Is this correct? Something similar to what [~dcapwell] was suggesting in CASSANDRA-17600? 

For example, the config_template for CircleCI will be populated by checking what pipelines are described; it will populate some default CircleCI parameters, and the rest of the C* specific options will be pulled from this pipeline and jobs config? Do I understand correctly? Like having a default template with parameters populated based on this layer, and the pipelines will be multiplicated again based on the pipelines described here(pre-commit, etc)? 

Today, our 5.0+ requirements to the CI pre-commit pipeline are
- artifacts, deb, redhat, checks (jdk11+17, amd+arm)
- stress, fqltool, burn, test, test-cdc, test-compression, test-oa, test-trie, test-system-keyspace-directory, long-test, (jdk11+17)
- simulator-dtest (only jdk11)
- cqlsh (jdk11+17, multiple pythons, and cpython)
- jvm-dtest, jvm-dtest-novnode, dtest, dtest-large, dtest-novnode, dtest-offheap, dtest-large-novnode (jdk11+17)
- jvm-dtest-upgrade, jvm-dtest-upgrade-novnode, dtest-upgrade, dtest-upgrade-large, dtest-upgrade-novnode, dtest-upgrade-novnode-large (jdk11*)
- repeated runs



Notes:
- test-trie and dtest-offheap will be replaced with test-latest and dtest-latest (see CASSANDRA-18753),
- long-test should also have the cdc,compression,oa,latest,system-keyspace-directory variations,
- upgrade tests can use different jdks, only tests with an upgrade path that have a common overlapping jdk are run, i.e only jdk17 can used for 5.0-5.1 updates and would have to be used for any forward upgrades to a 6.0 that didn't support jdk11 – yes there are forward upgrades) 
- circleci also does a build-jdk11-run-jdk17, which does not appear to be of much additional value despite it being a more common use-case (see slack discussion)
- simulator-dtest isn't running jdk17 because that's currently broken, ref CASSANDRA-18616
- redhat has almalinux and centos7 variants

{quote}Today, our 5.0+ requirements to the CI pre-commit pipeline are...
{quote}
I think we should revisit this on the dev ML; I don't fully agree w/what you've outlined above and this is something we should discuss as a project community, not mandate on a comment in a JIRA.

[~e.dimitrova] made the excellent point that as the JDK authors keep tightening down what's allowed in terms of unsafe and reflection-based access, we're more likely to see failures on the highest supported JDK version rather than the lowest for example, meaning the python dtest suites and jvm-dtest-upgrade should likely be calibrated to "highest supported and down", vs. "lowest supported and up".

Further, I don't agree with (and we've discussed) the need to run test-cdc (or it existing at all vs. it just being enabled for all tests), the compression, oa, or trie suites as pre-commit smoke suites, etc. I have a strong belief that we should expect very infrequent test failures on non-default configurations vs. the base; that functionality is supposed to be API compatible and if it works on one configuration, it works on all. While there will no doubt be flakes, the amount of compute required to run all those pre-commit as a smoke suite effectively removes the "smoke" aspect of it and just makes pre-commit a vast majority of the cost of a full run.

Same for testing everything in no-vnode and vnode combination; that's so terribly wasteful that I just can't agree with doing that for everything pre-commit (in any env, circle, new, or ASF-CI). I would very much prefer we take the approach you enumerated on the dev ML:
{quote}Can we get these tests temporarily annotated as skipped while all the subtickets to 19055 are being worked on ?
{quote}
We have the current example of the TCM merge on CASSANDRA-19055 to immediately inspect as to whether this approach is sufficient or not. With an _incredibly large_ patch in the form of TCM (88k+ LoC, 900+ files touched), we have less than a .002% test failure injection rate using the above restricted smoke heuristic, and many of them look to be circle ci env specific and not asf ci. (Of note - the artifact building bit definitely needs to be resolved; we should consider extending an "artifact build only" target on ASF CI people can parameterize with feature branches to make sure they haven't broken the various builds?)

And for repeated runs, we discussed the fact that not having support for repeated runs in ASF CI meant we also didn't want to put down a hard blocker on requiring those runs on other pre-commit environments. Has your position changed on that? Regardless, that's just a question of prioritization; it's relatively trivial to finish up support for that if we deem it an immediate priority.

bq. Today, our 5.0+ requirements …

Was only a comment to what it is today.  It can evolve…

bq. Ekaterina Dimitrova made the excellent point that as the JDK authors keep tightening down what's allowed in terms of unsafe and reflection-based access

If we're confident that CI on the latest JDK is better, sure.  But I'm not sold yet, because there are failures when only coding and testing on highest JDK beyond the simple compile/classpath type.

bq. I don't agree with (and we've discussed) the need to run test-cdc (or it existing at all vs. it just being enabled for all tests), the compression, oa, or trie suites as pre-commit smoke suites, etc

AFAIK a number of the breakages TCM created were because tries and vnodes were not also run.  This is the proof.  We need to improve it (more selective to what tests are applicable and to be run within each variation, etc), but we gotta work with what we know catches failures today.

bq. Of note - the artifact building bit definitely needs to be resolved;

These all come from in-tree scripts, which must be the shared basis for any CI system.  Moving forward there should not be any excuse that any CI system doesn't do the artifacts, deb+rpm packaging, and checks.  

bq. many of them look to be circle ci env specific and not asf ci

ASF CI was just as _broken_.  Including the 5.0 branch from TCM.

bq. And for repeated runs, we discussed the fact that not having support for repeated runs in ASF CI meant we also didn't want to put down a hard blocker on requiring those runs on other pre-commit environments. Has your position changed on that? 

We have a ticket to add it to ASF CI (in-tree scripts), and it was only put on hold because this ticket was proposing a better approach.

--
We should be using the TCM merge as a valuable use-case to what standard we need from a CI system.  

I am entirely in support of TCM merging when it did – improving every chance of a release with TCM and Accord in it before the Summit is a trade-off in favour of temporary CI headaches I'll take, and TCM devs have been _very_ quick to restore CI.  Right trade-off, very temporary pain, pragmatic.  The Summit is an important opportunity to get TCM+Accord into more hands and user testing.  The very real (AFAIK) concerns with CI is a) it does deteriorate over time if we're not hyper vigilant, and b) evaluating CI for patches is very time consuming the more flakies and failures from elsewhere there are to wade through.  It's right that folk make noise and express their frustration – there is collateral damage. It's also worth repeating that there was one green CI system pre-commit, but we gotta improve this to all CI systems green, painful that those CI systems are currently very much in-flux.

The biggest priority I see here is that the apple internal ci system is not using the in-tree scripts.  We can live with the ci infra being blackbox (given what this ticket is otherwise solving), but the scripts need to be transparent and shared/standard among all CI systems.  If we can prioritise evolving the in-tree scripts that would be appreciated, maybe separating it into a new ticket (blocking this one).  The CI declaration that this ticket brings is the next priority after that IMO (and requires some broader discussions as we've both mentioned^^).



bq. AFAIK a number of the breakages TCM created were because tries and vnodes were not also run. This is the proof. 

I think this might be a reference to something I might have said. What I _intended_ to say was that most of breakages are _related to_ tries and vnodes, not "created because". One has to focus on one subset of tests before moving to the next one (think: stabilise utests, then in-jvm dtests, then python dtests, then vnodes, etc.) 

{quote} - simulator-dtest isn't running jdk17 because that's currently broken, ref CASSANDRA-18616{quote}
For the record it is {*}not broken{*}, it *does not support* JDK17, there is a difference. 
{quote}I think we should revisit this on the dev ML; I don't fully agree w/what you've outlined above and this is something we should discuss as a project community, not mandate on a comment in a JIRA.
{quote}
Agreed, let's revise it after the release and the summit. Also, there are currently breakages in Jenkins and CircleCI and they take a priority. 
{quote}meaning the python dtest suites and jvm-dtest-upgrade should likely be calibrated to "highest supported and down", vs. "lowest supported and up".
{quote}
I am not sure I understand here what you meant [~jmckenzie] , so I would reiterate what I had in mind. 

I think we should do at least JDK11 build and JDK17 build, then runtime for tests should be JDK11 and JDK17 with the JDK11 build. This is also what we ship to users and what they use - JDK11 build and they can use JDK11/17 runtime. Of course 11 and 17 will be substituted with next JDK versions when we shift, this is just for the sake of the example. 
{quote}Further, I don't agree with (and we've discussed) the need to run test-cdc (or it existing at all vs. it just being enabled for all tests), the compression, oa, or trie suites as pre-commit smoke suites, etc. I have a strong belief that we should expect very infrequent test failures on non-default configurations vs. the base; that functionality is supposed to be API compatible and if it works on one configuration, it works on all. While there will no doubt be flakes, the amount of compute required to run all those pre-commit as a smoke suite effectively removes the "smoke" aspect of it and just makes pre-commit a vast majority of the cost of a full run.
{quote}
I think it was already agreed not to run cdc, oa, keyspaces, tries pre-commit? The only reason we have some of those in the pre-commit runs in CircleCI now is that they were not added until recently in Jenkins. So if we do not run them pre-commit, we will not run them also post-commit. Now when that has changed I will open a ticket not to be mandatory pre-commit in CircleCI. *Disclaimer:* pre-commit workflow in CircleCI just points to what should be the minimum expectation of job suites to be run pre-commit. Though my understanding is it is part of the committers responsibility to judge during the reviews whether more tests is good to be run. Example - I can see upgrade tests being run for TCM pre-commit as it is obvious that patch can break upgrades. So the authors/reviewers ensured those tests are not broken pre-commit. (I believe there was some glitch, but it was something small and overall they were cleaned)
{quote}These all come from in-tree scripts, which must be the shared basis for any CI system. Moving forward there should not be any excuse that any CI system doesn't do the artifacts, deb+rpm packaging, and checks.
{quote}
Agreed, that was the idea behind the repeatable CI project - one source of truth. Even before those, when we worked on preparing CircleCI to be source of truth for releases due to Jenkins instability - I was personally checking and aligning that cassandra-builds and the CircleCI scripts run the same commands. 
{quote}We have a ticket to add it to ASF CI (in-tree scripts), and it was only put on hold because this ticket was proposing a better approach.
{quote}
That is also my understanding - [~Bereng] had already a patch a few weeks ago
{quote}Same for testing everything in no-vnode and vnode combination; that's so terribly wasteful that I just can't agree with doing that for everything pre-commit (in any env, circle, new, or ASF-CI). I would very much prefer we take the approach you enumerated on the dev ML:
{quote}
That should be discussed on the ML too
{quote}And for repeated runs, we discussed the fact that not having support for repeated runs in ASF CI meant we also didn't want to put down a hard blocker on requiring those runs on other pre-commit environments.
{quote}
[~jmckenzie] , where was this agreed? 
{quote}using the above restricted smoke heuristic, and many of them look to be circle ci env specific and not asf ci.
{quote}
[~jmckenzie] , I am not sure I understand what you mean? I saw there was a full CircleCI run pre-commit for TCM. Mick ran all possible tests and Sam opened tickets for them. Also, I was triaging the trunk test failures last night, bisecting and checking what is TCM-related and what is not - there was like 1 or 2 OOMs and I do not see any environment related failures. Maybe you had a different run in mind?
{quote}If we're confident that CI on the latest JDK is better, sure. But I'm not sold yet, because there are failures when only coding and testing on highest JDK beyond the simple compile/classpath type.
{quote}
[~mck] , I am not sure I understand correctly this point and what Josh mentioned about JDKs, but please check what I suggested at the beginning of this post. I do not advocate for anything being run *only* on the top JDK version. 
{quote}AFAIK a number of the breakages TCM created were because tries and vnodes were not also run. This is the proof. We need to improve it (more selective to what tests are applicable and to be run within each variation, etc), but we gotta work with what we know catches failures today.
{quote}
Patches of the calibre of TCM that touch almost everything should be expected to be committed after running all possible tests, IMHO. I did the same when I was adding the configuration changes which were touching everywhere. JDK-migration also ensured all tests are checked pre-commit. I think there is a difference between a tiny patch that we are clear there is no way it will affect upgrades for example and huge patches like TCM, storage engine etc. which are expected to shake everything.
{quote}I am entirely in support of TCM merging when it did – improving every chance of a release with TCM and Accord in it before the Summit is a trade-off in favour of temporary CI headaches I'll take, and TCM devs have been _very_ quick to restore CI. Right trade-off, very temporary pain, pragmatic. The Summit is an important opportunity to get TCM+Accord into more hands and user testing. 
{quote}
*I do not share the sentiment.* I already expressed my opinion on the ML during the TCM merge and release discussions so I am not going to repeat it here. 

Yep, had a jenkins multiplexer almost ready for review but it was decided to stop that in favor keeping things stable when approaching a release and CASSANDRA-18594.

bq. the amount of compute required to run all those pre-commit as a smoke suite effectively removes the "smoke" aspect of it and just makes pre-commit a vast majority of the cost of a full run.

I couldn't agree more. I have been saying this for over a year and it could bring our CI cost down dramatically. The 4.0 days with test failures all over the screen are over fortunately. The ROI doesn't work anymore imo. We'd be far better off now running vanilla confs and let jenkins catch the other super-rare occurrences. Only mamooth patches such as TCM, TTL, Accord,... should run the full suite before the merge.

