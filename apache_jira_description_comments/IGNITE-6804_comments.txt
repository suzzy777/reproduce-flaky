[~dmagda],  I've changed description from HashMap to any not SortedMap, there can be a tons of maps provided into api. I suggest to check condition: not instanceof SortedMap. Are you agree?

[~dpavlov], yes thanks for clarifying the description.

Do we need to check for RemoveAll with HashSet? :)

Do we also need to check invokeAll?

[~ptupitsyn] please check if my additions to C# doc are well formed and correct. Can we issue warning from C# too? We would like to throttle it, i.e., only display once. Is it doable in C#? Any examples?

[~isapego] please check if my additions to C++ doc are well formed and correct.

[~ilyak] 

# I've fixed collection class references in the docs (generic specification is mandatory there), pushed the branch (hope it's ok for you).
# "will lead to deadlock" is not technically correct, I would change it to "may lead to deadlock".
# Yes, we can do it in C# the same way as in Java. But I don't see how the warning is "throttled" - looks like it will be displayed on every operation, am I missing something?

 

{panel:title=Branch: [pull/6976/head] Base: [master] : Possible Blockers (1)|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1}
{color:#d04437}Platform .NET (Inspections)*{color} [[tests 0 Failure on metric |https://ci.ignite.apache.org/viewLog.html?buildId=4698855]]

{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=4697381&amp;buildTypeId=IgniteTests24Java8_RunAll]

Failure not related to my change.

[~dmagda] please review proposed documentation changes and developer warnings.

[~ptupitsyn] There's practically no way to not cause deadlock with HashMap so it makes sense to write "will".

It's like with gets() function whose documentation starts with "+Never use this function.+"

[~ilyak] C++ changes looks good to me.

[~ilyak] if you add items to a new empty hashtable, the resulting order is going to be the same every time. And, I guess, this is the most common scenario (e.g. I have a list of Persons, I want to put them all to cache - I have to create and populate a Map).
This also indicates a problem with the API. We waste CPU time populating HashMap or SortedMap, when Ignite only iterates over the result, throwing away all the hash-related stuff.

Anyway, you can keep "will" if you like, but it is better to be technically correct (the best kind of correct).

[~ptupitsyn]If you have exactly the same number of same keys every time, it will work. If you have different sets of keys, deadlock.

[~ilyak], thanks for taking over this task. I suggested some edits in PR.

{panel:title=Branch: [pull/6976/head] Base: [master] : Possible Blockers (3)|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1}
{color:#d04437}Start Nodes{color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=4697296]]
* IgniteStartStopRestartTestSuite: IgniteProjectionStartStopRestartSelfTest.testStartOneNode - Test has low fail rate in base branch 0,0% and is not flaky

{color:#d04437}Platform .NET (Inspections)*{color} [[tests 0 Failure on metric |https://ci.ignite.apache.org/viewLog.html?buildId=4698855]]

{color:#d04437}~Build Apache Ignite~{color} [[tests 0 Exit Code |https://ci.ignite.apache.org/viewLog.html?buildId=4704733]]

{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=4704848&amp;buildTypeId=IgniteTests24Java8_RunAll]

{panel:title=Branch: [pull/6976/head] Base: [master] : Possible Blockers (3)|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1}
{color:#d04437}Start Nodes{color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=4697296]]
* IgniteStartStopRestartTestSuite: IgniteProjectionStartStopRestartSelfTest.testStartOneNode - Test has low fail rate in base branch 0,0% and is not flaky

{color:#d04437}Platform .NET (Inspections)*{color} [[tests 0 Failure on metric |https://ci.ignite.apache.org/viewLog.html?buildId=4698855]]

{color:#d04437}~Build Apache Ignite~{color} [[tests 0 Exit Code |https://ci.ignite.apache.org/viewLog.html?buildId=4705081]]

{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=4705196&amp;buildTypeId=IgniteTests24Java8_RunAll]

Hello, [~ilyak].

Any progress on that issue?
As far as I know, users still stumble with this issue.
It a very confusing Ignite behaviour, let's fix it!

Folks, 
A warning will be ignored.
Javadoс will be ignored too.

We should just perform instanceOf check inside the putAll() method if pessimistic.
Such check will not drop overall performance since it will be evaluated on the client node.

BTW, Can we perform same check by some annotation-based contract using static analysis?


[~avinogradov]

Maybe we should deprecate putAll(Map) and introduce putAll(SortedMap) instead?

[~nizhikov]
This will affect atomics and optimistic transactions, which are resistant to this issue.

Hello [~nizhikov], [~avinogradov],

> Maybe we should deprecate putAll(Map) and introduce putAll(SortedMap) instead?
I don't think that {{putAll(Map)}} can be deprecated just because it is a part of JSR-107.

> We should just perform instanceOf check inside the putAll() method if pessimistic.
-The user can use any kind of implementation of Map interface. It does not seem a reliable solution.- Looks like this comment does not make sense (parameter must extend/implement {{SortedMap}})

> This will affect atomics and optimistic transactions, which are resistant to this issue.
It must be done for the atomic cache as well. Please take a look at {{GridDhtAtomicCache.updateAllAsyncInternal0}}
{code:java}
            // If batch store update is enabled, we need to lock all entries.
            // First, need to acquire locks on cache entries, then check filter.
            List<GridDhtCacheEntry> locked = lockEntries(req, req.topologyVersion());;
{code}


{panel:title=Branch: [pull/6976/head] Base: [master] : No blockers found!|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=4936570&amp;buildTypeId=IgniteTests24Java8_RunAll]

[~nizhikov] please review proposed fix.

I have also fixed a few tests to not produce warnings, but far more exist.

[~agura] thank you for review! Please review amended changes in PR.
Either way I'm going to re-run for visa.

{panel:title=Branch: [pull/6976/head] Base: [master] : No blockers found!|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=4947337&amp;buildTypeId=IgniteTests24Java8_RunAll]

[~ilyak] Please take a look on my comments in provided PR. 

[~agura] I have also added detection of transactional getAll().

Please review amended fix. Tests are running, will be checked before merge.

{panel:title=Branch: [pull/6976/head] Base: [master] : No blockers found!|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=4973988&amp;buildTypeId=IgniteTests24Java8_RunAll]

[~agura] I have fixed the remaining javadocs, please review.

[~agura] I have fixed on most of your comments.

I don't think that `implicit' is a problem, this just means we will consider any implicit transaction non-detecting, will issue a warning. Can you show examples where this is not correct?

[~ilyak] Two concurrent {{invokeAll()}} on transactional cache will start optimistic repeatable read transactions implicitly and they could be deadly locked.

[~agura] I have just checked this use case, warning was issued. Are we good now?

[~ilyak] Ok. I think the logic is too overwhelmed. Moreover, it doesn't matter whether deadlock detection enabled or not. Unsafe API usage is still could lead to deadlocks and performance degradation. So we can simplify conditions under which warning about deadlocks possibility tested. Let's just remove this check.

[~agura] please check amended fix (you can just look at the last commit) - logic is simplified, extra method removed, it should now be very obvious.

{panel:title=Branch: [pull/6976/head] Base: [master] : No blockers found!|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=4990981&amp;buildTypeId=IgniteTests24Java8_RunAll]

[~ilyak] It seems you missed the following comment:

{quote}
@alamar It seems we call checkKeysOrdered before syncOp method. But implicit transactions always start in syncOp method. So curTxDeadlockDetecting will always return false for any implicit transaction.
{quote}

[~ilyak] It us unimportant after removal of deadlock detection related logic. One cosmetic comment: {{Map}} and {{Collection}} parameters in {{warnIfUnordered}} should be declared as {{Map<?, ?>}} and {{Collection<?>}} respectively.

LGTM. Please proceed with merge.

[~agura] thank you for review and help, I have merged this improvement.

