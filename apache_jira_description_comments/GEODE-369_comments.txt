The current line numbers for this failure are

{noformat}
RedundancyLevelPart1DUnitTest
      doPuts();
      verifyDeadServers(1);
      verifyRedundantServersContain(SERVER3);       -- line 514

and

RedundancyLevelTestBase
    DistributedTestCase.waitForCriterion(wc, 60 * 1000, 2000, true);  -- line 275
{noformat}


I ran this test for 9 hours with no failures, both from eclipse and using gradle.  This failure also does not show up in any of the Apache Jenkins runs or in Pivotal's Jenkins runs.

Commit 53e85e7d769c82ff87f1d5056db080725c9147c8 in incubator-geode's branch refs/heads/develop from [~bschuchardt]
[ https://git-wip-us.apache.org/repos/asf?p=incubator-geode.git;h=53e85e7 ]

GEODE-369: RedundancyLevelPart1DUnitTest.testRedundancySpecifiedNonPrimaryEPFailsDetectionByPut fails intermittently with assertion

This disables the assertion that server3 is in the redundant-servers list.
It's sufficient to verify that there is a redundant server assigned to
the client.


Fixed in http://git-wip-us.apache.org/repos/asf/incubator-geode/commit/53e85e7d

Removed the assertion that server3 is in the redundant-servers list.  This assertion was followed by an assertion that there is a redundant server, which is sufficient for the public API.

Commit 53e85e7d769c82ff87f1d5056db080725c9147c8 in incubator-geode's branch refs/heads/feature/GEODE-715 from [~bschuchardt]
[ https://git-wip-us.apache.org/repos/asf?p=incubator-geode.git;h=53e85e7 ]

GEODE-369: RedundancyLevelPart1DUnitTest.testRedundancySpecifiedNonPrimaryEPFailsDetectionByPut fails intermittently with assertion

This disables the assertion that server3 is in the redundant-servers list.
It's sufficient to verify that there is a redundant server assigned to
the client.


Reoccurred on:

Build #2659 (May 20, 2016 7:14:01 PM)
Revision: ea19e3caeccbc01f61acd6d84734d8c136ee52a5

https://brazil.gemstone.com:8080/job/Geode_develop_DistributedTests/2659/testReport/junit/com.gemstone.gemfire.internal.cache.tier.sockets/RedundancyLevelPart1DUnitTest/testRedundancySpecifiedNonPrimaryEPFailsDetectionByPut/

junit.framework.AssertionFailedError
	at junit.framework.Assert.fail(Assert.java:55)
	at junit.framework.Assert.assertTrue(Assert.java:22)
	at junit.framework.Assert.assertTrue(Assert.java:31)
	at junit.framework.TestCase.assertTrue(TestCase.java:201)
	at com.gemstone.gemfire.internal.cache.tier.sockets.RedundancyLevelPart1DUnitTest.testRedundancySpecifiedNonPrimaryEPFailsDetectionByPut(RedundancyLevelPart1DUnitTest.java:506)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:252)
	at junit.framework.TestSuite.run(TestSuite.java:247)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:112)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:56)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:66)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
	at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:109)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:360)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54)
	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

Reopening this ticket, have seen this pop up in a few private builds.

Seen again in https://concourse.apachegeode-ci.info/teams/main/pipelines/develop/jobs/DistributedTest/builds/385

Attaching the result page for the failed test.

Commit 8e00202d7e91685ba68c55b2ad0f872d3c776050 in geode's branch refs/heads/develop from mhansonp
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=8e00202 ]

GEODE-369: wait for primary to be available when going from 0 to 1 server (#2482)

* wait for primary to be available when going from 0 to 1 server
* added argument checking
* connectedServers (count) must be > 0 in order to test it via API
* Turns out the get is safer than getentry

Co-Authored-By: Bill Burcham <bburcham@pivotal.io>


