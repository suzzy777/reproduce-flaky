I think we can just the lower the mem limit. I'll also experiment with changing the expected error message to be more specific than "Mem limit exceeded" so we can make sure we're testing the right path (i.e. this is supposed to be testing the buffer allocation path, so we don't want to exceed the mem limit somewhere else).


IMPALA-2484: make array allocation failure test less flaky

This query was occasionally succeeding. This patch lowers the mem
limit so it's is less likely to succeed. It also adds the specific
"Failed to allocate buffer" message to the expected error so we don't
accidentally lose coverage. This test could still become flaky in the
future (I'm not sure 4mb is guaranteed to work every time, plus it
could change in the future), but I can't think of a better solution
than to continue adjusting it or only rely on more targetted unit
tests.

Change-Id: Id585f0e3b2c77a0279efffe9dd8b8b4472225730
Reviewed-on: http://gerrit.cloudera.org:8080/1207
Reviewed-by: Skye Wanderman-Milne <skye@cloudera.com>
Tested-by: Internal Jenkins

Looks like this test failed again, although with an empty error message. I'll leave this closed for now, but I think if we see it again we should reopen this issue.

{code}
query_test.test_nested_types.TestNestedTypes.test_tpch[exec_option: {'disable_codegen': False, 'abort_on_error': 1, 'exec_single_node_rows_threshold': 0, 'batch_size': 0, 'num_nodes': 0} | table_format: parquet/none] (from pytest)
Failing for the past 1 build (Since Failed#146 )
Took 2 min 35 sec.
add description
Error Message

query_test/test_nested_types.py:63: in test_tpch     self.run_test_case('QueryTest/nested-types-tpch', vector) common/impala_test_suite.py:218: in run_test_case     assert expected_str in str(e) E   assert "Memory limit exceeded\nFailed to allocate buffer for collection 'tpch_nested_parquet.customer.c_orders.item.o_lineitems'." in 'ImpalaBeeswaxException:\n Query aborted:\nMemory limit exceeded\n\n\n\nMemory Limit Exceeded\nQuery(3b4bafeeb9b7da46:...=0\nWARNING: The following tables are missing relevant table and/or column statistics.\ntpch_nested_parquet.customer\n' E    +  where 'ImpalaBeeswaxException:\n Query aborted:\nMemory limit exceeded\n\n\n\nMemory Limit Exceeded\nQuery(3b4bafeeb9b7da46:...=0\nWARNING: The following tables are missing relevant table and/or column statistics.\ntpch_nested_parquet.customer\n' = str(ImpalaBeeswaxException())

Stacktrace

query_test/test_nested_types.py:63: in test_tpch
    self.run_test_case('QueryTest/nested-types-tpch', vector)
common/impala_test_suite.py:218: in run_test_case
    assert expected_str in str(e)
E   assert "Memory limit exceeded\nFailed to allocate buffer for collection 'tpch_nested_parquet.customer.c_orders.item.o_lineitems'." in 'ImpalaBeeswaxException:\n Query aborted:\nMemory limit exceeded\n\n\n\nMemory Limit Exceeded\nQuery(3b4bafeeb9b7da46:...=0\nWARNING: The following tables are missing relevant table and/or column statistics.\ntpch_nested_parquet.customer\n'
E    +  where 'ImpalaBeeswaxException:\n Query aborted:\nMemory limit exceeded\n\n\n\nMemory Limit Exceeded\nQuery(3b4bafeeb9b7da46:...=0\nWARNING: The following tables are missing relevant table and/or column statistics.\ntpch_nested_parquet.customer\n' = str(ImpalaBeeswaxException())

Standard Error

-- connecting to: localhost:21000
-- executing against localhost:21000
use functional_parquet;

SET disable_codegen=False;
SET abort_on_error=1;
SET exec_single_node_rows_threshold=0;
SET batch_size=0;
SET num_nodes=0;
-- executing against localhost:21000
use tpch_nested_parquet;

MainThread: No results found. Skipping verification
-- executing against localhost:21000
select count(*)
from tpch_nested_parquet.customer c, c.c_orders o, o.o_lineitems i
where c_custkey in (1, 2) and o_orderkey in (4808192, 1374019);

-- executing against localhost:21000
select count(*)
from tpch_nested_parquet.customer c, c.c_orders o, o.o_lineitems i;

-- executing against localhost:21000
select count(l_linenumber)
from tpch_nested_parquet.customer.c_orders.o_lineitems i;

-- executing against localhost:21000
select count(*)
from tpch_nested_parquet.customer.c_orders.o_lineitems i;

-- executing against localhost:21000
select count(l_linenumber) from tpch_parquet.lineitem;

-- executing against localhost:21000
select c_custkey, count(*)
from tpch_parquet.customer join tpch_parquet.orders on c_custkey = o_custkey
where c_custkey < 10
group by c_custkey
order by c_custkey;

-- executing against localhost:21000
select c_custkey from tpch_nested_parquet.customer c left anti join c.c_orders
where c_custkey < 10 order by c_custkey;

-- executing against localhost:21000
select c_custkey, c_name, o_orderkey, o_orderpriority
from tpch_nested_parquet.customer c, c.c_orders o
where c_custkey < 100
order by o_orderpriority, o_orderkey
limit 10;

-- executing against localhost:21000
SELECT t2.s_name
FROM tpch_nested_parquet.customer t1
INNER JOIN tpch_nested_parquet.supplier t2
  ON t2.s_phone = t1.c_phone AND t2.s_acctbal = t1.c_acctbal,
t2.s_partsupps t3
WHERE t2.s_suppkey > t2.s_nationkey;

-- executing against localhost:21000
SELECT STRAIGHT_JOIN r_regionkey, p_retailprice
FROM (SELECT p1.p_partkey, p2.p_retailprice, p2.p_mfgr
      FROM part p1 INNER JOIN part p2 ON p1.p_partkey = p2.p_partkey
      WHERE p1.p_partkey < 100 AND p2.p_partkey < 100) t2
RIGHT JOIN (SELECT r_name, r_regionkey
            FROM region r, r.r_nations
            WHERE r_name = 'AFRICA') t1
  ON t1.r_regionkey = t2.p_partkey;

-- executing against localhost:21000
SELECT COALESCE(t2.p_size, t4.pos, o_orderkey) AS int_col, COUNT(*)
FROM customer t1
LEFT JOIN part t2 ON t1.c_custkey = t2.p_partkey,
t1.c_orders t3,
t3.item.o_lineitems t4
WHERE t1.c_custkey < 100 AND t2.p_partkey < 100
GROUP BY 1
HAVING int_col <= 5
ORDER BY 1;

-- executing against localhost:21000
SELECT o_orderkey, r FROM
  (SELECT o2.o_orderkey, COUNT(o1.pos) OVER (ORDER BY o2.o_orderkey DESC) r
   FROM tpch_nested_parquet.customer c
   JOIN c.c_orders o1
   JOIN c.c_orders o2 ON (o1.pos = o2.pos)) v
ORDER BY o_orderkey LIMIT 1;

-- executing against localhost:21000
set mem_limit=4m;

MainThread: No results found. Skipping verification
-- executing against localhost:21000
select max(cnt) from customer c,
(select count(l_returnflag) cnt from c.c_orders.o_lineitems) v;
{code}

Looks like this is still happening.

http://sandbox.jenkins.cloudera.com/job/impala-CI-rhel7/228/testReport/junit/query_test.test_nested_types/TestNestedTypes/test_tpch_exec_option____disable_codegen___False___abort_on_error___1___exec_single_node_rows_threshold___0___batch_size___0___num_nodes___0____table_format__parquet_none_/

{code}
Regression

query_test.test_nested_types.TestNestedTypes.test_tpch[exec_option: {'disable_codegen': False, 'abort_on_error': 1, 'exec_single_node_rows_threshold': 0, 'batch_size': 0, 'num_nodes': 0} | table_format: parquet/none] (from pytest)
Failing for the past 1 build (Since Unstable#228 )
Took 2 min 7 sec.
add description
Error Message

query_test/test_nested_types.py:64: in test_tpch     self.run_test_case('QueryTest/nested-types-tpch', vector) common/impala_test_suite.py:265: in run_test_case     assert expected_str in str(e) E   assert "Memory limit exceeded\nFailed to allocate buffer for collection 'tpch_nested_parquet.customer.c_orders.item.o_lineitems'." in 'ImpalaBeeswaxException:\n Query aborted:\nMemory limit exceeded\n\n\n\nMemory Limit Exceeded\nQuery(9049282e4b48e876:...=0\nWARNING: The following tables are missing relevant table and/or column statistics.\ntpch_nested_parquet.customer\n' E    +  where 'ImpalaBeeswaxException:\n Query aborted:\nMemory limit exceeded\n\n\n\nMemory Limit Exceeded\nQuery(9049282e4b48e876:...=0\nWARNING: The following tables are missing relevant table and/or column statistics.\ntpch_nested_parquet.customer\n' = str(ImpalaBeeswaxException())

Stacktrace

query_test/test_nested_types.py:64: in test_tpch
    self.run_test_case('QueryTest/nested-types-tpch', vector)
common/impala_test_suite.py:265: in run_test_case
    assert expected_str in str(e)
E   assert "Memory limit exceeded\nFailed to allocate buffer for collection 'tpch_nested_parquet.customer.c_orders.item.o_lineitems'." in 'ImpalaBeeswaxException:\n Query aborted:\nMemory limit exceeded\n\n\n\nMemory Limit Exceeded\nQuery(9049282e4b48e876:...=0\nWARNING: The following tables are missing relevant table and/or column statistics.\ntpch_nested_parquet.customer\n'
E    +  where 'ImpalaBeeswaxException:\n Query aborted:\nMemory limit exceeded\n\n\n\nMemory Limit Exceeded\nQuery(9049282e4b48e876:...=0\nWARNING: The following tables are missing relevant table and/or column statistics.\ntpch_nested_parquet.customer\n' = str(ImpalaBeeswaxException())

Standard Error

-- executing against localhost:21000
use functional_parquet;

SET disable_codegen=False;
SET abort_on_error=1;
SET exec_single_node_rows_threshold=0;
SET batch_size=0;
SET num_nodes=0;
-- executing against localhost:21000
use tpch_nested_parquet;

-- executing against localhost:21000
select count(*)
from tpch_nested_parquet.customer c, c.c_orders o, o.o_lineitems i
where c_custkey in (1, 2) and o_orderkey in (4808192, 1374019);

-- executing against localhost:21000
select count(*)
from tpch_nested_parquet.customer c, c.c_orders o, o.o_lineitems i;

-- executing against localhost:21000
select count(l_linenumber)
from tpch_nested_parquet.customer.c_orders.o_lineitems i;

-- executing against localhost:21000
select count(*)
from tpch_nested_parquet.customer.c_orders.o_lineitems i;

-- executing against localhost:21000
select count(l_linenumber) from tpch_parquet.lineitem;

-- executing against localhost:21000
select c_custkey, count(*)
from tpch_parquet.customer join tpch_parquet.orders on c_custkey = o_custkey
where c_custkey < 10
group by c_custkey
order by c_custkey;

-- executing against localhost:21000
select c_custkey from tpch_nested_parquet.customer c left anti join c.c_orders
where c_custkey < 10 order by c_custkey;

-- executing against localhost:21000
select c_custkey, c_name, o_orderkey, o_orderpriority
from tpch_nested_parquet.customer c, c.c_orders o
where c_custkey < 100
order by o_orderpriority, o_orderkey
limit 10;

-- executing against localhost:21000
SELECT t2.s_name
FROM tpch_nested_parquet.customer t1
INNER JOIN tpch_nested_parquet.supplier t2
  ON t2.s_phone = t1.c_phone AND t2.s_acctbal = t1.c_acctbal,
t2.s_partsupps t3
WHERE t2.s_suppkey > t2.s_nationkey;

-- executing against localhost:21000
SELECT STRAIGHT_JOIN r_regionkey, p_retailprice
FROM (SELECT p1.p_partkey, p2.p_retailprice, p2.p_mfgr
      FROM part p1 INNER JOIN part p2 ON p1.p_partkey = p2.p_partkey
      WHERE p1.p_partkey < 100 AND p2.p_partkey < 100) t2
RIGHT JOIN (SELECT r_name, r_regionkey
            FROM region r, r.r_nations
            WHERE r_name = 'AFRICA') t1
  ON t1.r_regionkey = t2.p_partkey;

-- executing against localhost:21000
SELECT COALESCE(t2.p_size, t4.pos, o_orderkey) AS int_col, COUNT(*)
FROM customer t1
LEFT JOIN part t2 ON t1.c_custkey = t2.p_partkey,
t1.c_orders t3,
t3.item.o_lineitems t4
WHERE t1.c_custkey < 100 AND t2.p_partkey < 100
GROUP BY 1
HAVING int_col <= 5
ORDER BY 1;

-- executing against localhost:21000
SELECT o_orderkey, r FROM
  (SELECT o2.o_orderkey, COUNT(o1.pos) OVER (ORDER BY o2.o_orderkey DESC) r
   FROM tpch_nested_parquet.customer c
   JOIN c.c_orders o1
   JOIN c.c_orders o2 ON (o1.pos = o2.pos)) v
ORDER BY o_orderkey LIMIT 1;

-- executing against localhost:21000
set mem_limit=4m;

-- executing against localhost:21000

select max(cnt) from customer c,
(select count(l_returnflag) cnt from c.c_orders.o_lineitems) v;

-- executing against localhost:21000
SET MEM_LIMIT=0;;

{code}

This is IMPALA-2993. I committed a fix to the 5.7 branch but it looks like it hasn't been picked up by all the jobs (probably needs to be cherry-picked to trunk?).

