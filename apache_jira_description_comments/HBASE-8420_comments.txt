If it's not too big/invasive let's try for 0.94 as well.

Sure. The patch seems not too big.

In the 0.94 version, Scan is not touched since it breaks compatibility. So prefetching can be globally enabled or disabled.  I have ran all unit tests with prefetching enabled.  In the patch, it is disabled by default though.

The patch is a little different from the original one in 0.89-fb.  The reason is that we have coprocessor supports and the scanner logic is a little different.  We have pb too. 

The trunk patch was on RB: https://reviews.apache.org/r/10934/

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12581739/trunk-8420_v1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 12 new or modified tests.

    {color:green}+1 hadoop1.0{color}.  The patch compiles against the hadoop 1.0 profile.

    {color:green}+1 hadoop2.0{color}.  The patch compiles against the hadoop 2.0 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 lineLengths{color}.  The patch introduces lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/5553//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5553//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5553//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5553//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5553//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5553//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5553//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5553//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5553//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/5553//console

This message is automatically generated.

I find it hard to convince myself that the changed code behaves exactly like the exiting.

We probably should not do this in 0.94:
{code}
-        this.caching = conf.getInt("hbase.client.scanner.caching", 1);
+        this.caching = conf.getInt("hbase.client.scanner.caching", 100);
{code}

Lastly in 0.94, we could use scan attributes to indicate this per scanner in a backward compatible way.


You are right. It is not exactly the same as before. The difference is mostly in the ClientScanner and related, as I mentioned in the RB. The main reason for that is because how the ClientScanner moves to the next scanner: asking for a number of rows, moving to the next scanner/region if getting less. The existing logic is to cache exactly the "caching" number of rows.  This patch could caching 1-less or many more rows, instead. Not sure if it is ok. But I think it makes the logic more efficient.

bq. Lastly in 0.94, we could use scan attributes to indicate this per scanner in a backward compatible way.
Cool, we can use scan attributes to indicate prefetching instead of a global flag. I will update the 0.94 patch.

As to the caching size, for 0.94, should we leave it as before (1), to make it the same as the trunk (100)?

Thanks Jimmy.

As for changing the caching default in 0.94, see discussion here: HBASE-7008.


I see.  Sounds like we should not touch 0.94 unless the behavior is the same as before if the feature is disabled. We can do that.

I reverted the caching default change.  Thinking about the number of rows to cache, do we have to cache exactly "caching" rows?

[~jxiang] Yeah, we should be caching a 'size', not a count of rows (old idea that I am just resusitating here)

Updated the patch a little, mostly for the 0.94 patch: reverted the caching default, using the scan attribute to specify prefetching instead of a global flag.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12581985/trunk-8420_v2.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 12 new or modified tests.

    {color:green}+1 hadoop1.0{color}.  The patch compiles against the hadoop 1.0 profile.

    {color:green}+1 hadoop2.0{color}.  The patch compiles against the hadoop 2.0 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 lineLengths{color}.  The patch introduces lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/5569//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5569//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5569//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5569//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5569//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5569//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5569//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5569//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5569//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/5569//console

This message is automatically generated.

I think we need a way to keep track of the total size of what's being pre-fetched, and make sure we can keep it under a certain size. I can totally see a badly behaving client opening a lot of scanners, pre-fetching enabled, and then we're stuck with a lot of garbage in memory. Sure, we're going to clean it in a minute, but I've also seen cases where hundreds of scanners are created per minute.

Else, this feature is a sure way to get users to DDOS themselves.

That's a good point.  I will come up a new patch.  It sounds like a good idea to have prefetching disabled by default.

-1 on prefetching disabled by default; hopefully the feature can be on so users get speedup but that it is also smart enough to avoid DDOS or OOME.

[~jdcryans] isn't the proper protection against that scenario to implement rate limiting, QOS configuration inside the RS?

[~ndimiduk], you could be in a situation where in/out traffic is ok but the memory used by pre-fetching is exploding, so yes you want some form of rate limiting and for this case it has to be at the pre-fetchers level.

Patch v3 added configuration to control the size of max number of prefetcher threads, and max prefetched result size.

Did some quick scan testing with YCSB on a same cluster: 1 master node + 4 region server nodes.  All are the same except the hbase jar file.
Total rows: 3,000,000.  Scan ops count: 3,000 (not that many).

With prefetching (v2):

throughput: 36.9 ops/sec, avg latency: 27.0 ms, 95th: 48 ms, 99th: 69 ms

Without prefetching (without the patch at all):

throughput: 32.8 ops/sec, avg latency: 30.4 ms, 95th: 50 ms, 99th: 227 ms

On average, the latency is about 10% shorter.


{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12582686/trunk-8420_v3.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 12 new or modified tests.

    {color:green}+1 hadoop1.0{color}.  The patch compiles against the hadoop 1.0 profile.

    {color:green}+1 hadoop2.0{color}.  The patch compiles against the hadoop 2.0 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 lineLengths{color}.  The patch introduces lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
     

     {color:red}-1 core zombie tests{color}.  There are 2 zombie test(s): 	at org.apache.hadoop.hbase.client.TestHCM.testDeleteForZKConnLeak(TestHCM.java:837)

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/5626//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/5626//console

This message is automatically generated.

The configurable max prefetched result size is set to 512 M by default. Whenever a scanner is called to fetch data, we will check if the caller thread is a prefetcher thread based on the thread name.  If it is a prefetcher thread, the result wire size is added to global atomic long variable (a counter).  After the prefetched result is retrieved, the same amount is reduced from the counter.  If the counter value is over the pre-configured threshold, the next prefetching will not be scheduled.  This is a rough control.  We don't do micro control, i.e. stop a prefetcher thread in the middle.

On the latest patch:

 - I think you have a leak if the client doesn't come back to get the prefetched data, at least you should decrement globalPrefetchedResultSize in RegionScannerHolder.closeScanner().
 - 512MB seems big, I'd be more comfortable with 128MB.
 - Is it possible to unit test this?
 - Have you run a concurrent workload against capped pre-fetching?
 - Should we report on the state of globalPrefetchedResultSize? I'm wondering what could be helpful to see when debugging scan slowness WRT this rate limiting. Maybe a TRACE every time we skip a prefetch and output totalPrefetchedResultSize?


bq.    I think you have a leak if the client doesn't come back to get the prefetched data, at least you should decrement globalPrefetchedResultSize in RegionScannerHolder.closeScanner().

Good catch.  I will fix this.

bq.    512MB seems big, I'd be more comfortable with 128MB.

How about 256 MB?  128MB is a little small.

bq.    Is it possible to unit test this?

For the memory cap, it's probably hard to unit test. I am doing some manual testing.

bq.    Have you run a concurrent workload against capped pre-fetching?

Will set the cap to a small number and do some manual testing.


bq.    Should we report on the state of globalPrefetchedResultSize? I'm wondering what could be helpful to see when debugging scan slowness WRT this rate limiting. Maybe a TRACE every time we skip a prefetch and output totalPrefetchedResultSize?

Sure.  Will do.


{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12583575/trunk-8420_v4.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 12 new or modified tests.

    {color:green}+1 hadoop1.0{color}.  The patch compiles against the hadoop 1.0 profile.

    {color:green}+1 hadoop2.0{color}.  The patch compiles against the hadoop 2.0 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 lineLengths{color}.  The patch introduces lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/5730//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/5730//console

This message is automatically generated.

Patch v4 changed the default prefetched result size cap from 512M to 256M; fixed a the prefetched result size counter leakage in closeScanner(); added some tests to make sure the cap is followed, i.e. prefetching only if the cap is not met; and added some stuff to make the new test possible.

Should we prefetch in multiples of the HDFS block size?

bq. Should we prefetch in multiples of the HDFS block size?

The cap is for the all the prefetchers, I'm not expecting to see each prefetcher to get more than a few MBs of data. 10 perfetchers at 128MB each would be a whole lot of data to keep in memory! :)

I will make a little change so that we don't leak the cached result size counter if the prefetcher is cancelled at a wrong time.

As to caching in multiple HDFS block size, it will cache things more and longer. It will be very helpful if there are not many scanners, probably not good as a general solution.

Attached v5.  In case a submitted task is interrupted by cancel(), the prefetched result size counter is reduced if it is already increased.  Also added some change to make the test not flaky by making sure the right region scanner holder is used to check prefetching flag/counter in the test.

There still could be racing issue in resetting the counter. Will keep it simple.

The latest patch looks good. Only thing I don't like so much is the handling of those exceptions since they would bubble up as-is to the client and the interrupt isn't reset:

{code}
      } catch (InterruptedException ie) {
        throw new IOException(ie);
      } catch (ExecutionException ee) {
        throw new IOException(ee);
      }
{code}

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12583891/trunk-8420_v5.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 12 new or modified tests.

    {color:green}+1 hadoop1.0{color}.  The patch compiles against the hadoop 1.0 profile.

    {color:green}+1 hadoop2.0{color}.  The patch compiles against the hadoop 2.0 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 lineLengths{color}.  The patch introduces lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.master.TestTableLockManager

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/5758//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5758//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5758//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5758//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5758//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5758//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5758//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5758//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5758//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/5758//console

This message is automatically generated.

bq. Only thing I don't like so much is the handling of those exceptions since they would bubble up as-is to the client and the interrupt isn't reset

I will address this in the next patch.  Thanks a lot.

Attached patch v5.1, similar to v5, changes are (1) synchronized the prefetching task cancellation in closeScanner and increasing the counter in the task, (2) changed the exception handling a little bit

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12584033/trunk-8420_v5.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 12 new or modified tests.

    {color:green}+1 hadoop1.0{color}.  The patch compiles against the hadoop 1.0 profile.

    {color:green}+1 hadoop2.0{color}.  The patch compiles against the hadoop 2.0 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 lineLengths{color}.  The patch introduces lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/5772//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5772//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5772//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5772//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5772//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5772//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5772//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5772//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5772//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/5772//console

This message is automatically generated.

Running into ClosedChannelException with patch v5.1.  We should be graceful in closeScanner.

Patch v6 is rebased to trunk latest, + a little change not to interrupt submitted prefetching task.  Haven't seen ClosedChannelException any more.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12584396/trunk-8420_v6.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 12 new or modified tests.

    {color:green}+1 hadoop1.0{color}.  The patch compiles against the hadoop 1.0 profile.

    {color:green}+1 hadoop2.0{color}.  The patch compiles against the hadoop 2.0 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 lineLengths{color}.  The patch introduces lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.security.access.TestAccessController

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/5788//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5788//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5788//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5788//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5788//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5788//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5788//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5788//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5788//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/5788//console

This message is automatically generated.

{code}
+        prefetchScanFuture.cancel(false);
+      }
+      prefetchScanFuture = null;
+      if (prefetchedResultSize > 0) {
+        globalPrefetchedResultSize.addAndGet(-prefetchedResultSize);
{code}
prefetchScanFuture.cancel() returns a boolean. I think the return value should be checked so that we know whether prefetchedResultSize should be deducted from globalPrefetchedResultSize.
{code}
+              return tmp; // Keep the prefetched results for late
{code}
'late' -> 'later'
{code}
+            // Reset rows for next prefetching
+            this.rows = rows;
{code}
What if tmp.results.size + scanResult.results.size() > this.rows ?
{code}
+        Thread.currentThread().interrupt();
+        throw new IOException("scan was interrupted", ie);
{code}
Please use InterruptedIOException above.
{code}
+            } catch (LeaseStillHeldException e) {
+              LOG.warn("THIS SHOULD NOT HAPPEN", e);
{code}
Looks like the log should be at error level.
{code}
+class ScanResult {
{code}
Maybe the above class can reside in HRegionServer ?

bq. I think the return value should be checked so that we know whether prefetchedResultSize should be deducted from globalPrefetchedResultSize.
prefetchedResultSize will be updated if the task is going on.  So, no matter what the cancel returns, as long as we deduct prefetchedResultSize, it will be good.

bq. What if tmp.results.size + scanResult.results.size() > this.rows ?
That will be ok.  ClientScanner can handle that with no problem.

bq. Maybe the above class can reside in HRegionServer ?
I put here since HRegionServer is too big.

I have fixed the other issues you pointed out.  Thanks.

bq. So, no matter what the cancel returns, as long as we deduct prefetchedResultSize, it will be good.
Looking at http://javasourcecode.org/html/open-source/jdk/jdk-6u23/java/util/concurrent/Future.java.html , starting line 73.
{code}
     * @param mayInterruptIfRunning <tt>true</tt> if the thread executing this
     * task should be interrupted; otherwise, in-progress tasks are allowed
     * to complete
{code}
Since false is passed to cancel(), by the time we reach:
{code}
+      if (prefetchedResultSize > 0) {
{code}
prefetchedResultSize may be 0 (yet to be filled by the running thread). We would miss the upcoming assignment to prefetchedResultSize.

bq. We would miss the upcoming assignment to prefetchedResultSize.
No, we won't, since before calling cancel, we set prefetcher#scannerClosing to true.  So after we are back from cancel(), prefetchedResultSize won't change any more.

JD found out that currentScanResultSize is not always updated.  Recall patch v6.

Patch for 0.94, almost the same as that for trunk, except that prefetching is disabled by default.

Patch v6.1, it fixed the currentScanResultSize counting, also modified the unit test a little to check if the prefetched result size counter is not always 0, in case currentScanResultSize is not calculated at all.

I'm not running into any issues with the latest patch and I like the small refactoring that was done. At this point I'd be +1 if we can benchmark the latest patch and see if there's an improvement.

Jimmy, can you get JD some numbers so we can get this in?

I have to explicitly ask for prefetch when I create my Scan object?  Make sure you have nice release note on this.  Good stuff.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12584724/trunk-8420_v6.1.patch
  against trunk revision .

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 12 new or modified tests.

    {color:green}+1 hadoop1.0{color}.  The patch compiles against the hadoop 1.0 profile.

    {color:green}+1 hadoop2.0{color}.  The patch compiles against the hadoop 2.0 profile.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 lineLengths{color}.  The patch introduces lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/5822//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5822//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5822//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5822//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5822//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5822//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5822//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5822//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/5822//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/5822//console

This message is automatically generated.

Did some testing with ycsb?  The scan throughput is improved by about 6.5% with the latest patch. One issue with this testing is that the client side doesn't do too much with the result, so the benefit of prefetching is not fully used.

By default, prefetching is enabled in the trunk version. To turn it of, users have to turn it off in the Scan object.

In the 0.94 version, however, prefetching is disabled so as not to change the existing behavior.

If no objection, I will push the trunk version in.  However, for the 0.94 version, I will wait for [~lhofhansl] to have a review.

+1 on commit now for 0.95.1

When you think it will shine through?  6.5% is for what kind of YCSB test?

6.5% is for YCSB scan with default max number of rows 1000, the number of rows are uniformly distributed between 1 and 1000, while the default Scan caching is 100.  I think it should be very helpful for those MR jobs which need to do something with the scanned results.

Integrated into trunk and 0.95. Special thanks to JD for reviewing and testing the patches, and catching several big issues.

Integrated in HBase-TRUNK #4142 (See [https://builds.apache.org/job/HBase-TRUNK/4142/])
    HBASE-8420 Port HBASE-6874 Implement prefetching for scanners from 0.89-fb (Revision 1486246)

     Result = SUCCESS
jxiang : 
Files : 
* /hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ClientScanner.java
* /hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/Scan.java
* /hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ScannerCallable.java
* /hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java
* /hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/util/Threads.java
* /hbase/trunk/hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/ClientProtos.java
* /hbase/trunk/hbase-protocol/src/main/protobuf/Client.proto
* /hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
* /hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
* /hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScannerHolder.java
* /hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestScannersFromClientSide.java
* /hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRowProcessorEndpoint.java
* /hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/protobuf/TestProtobufUtil.java
* /hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerMetrics.java


Integrated in hbase-0.95 #214 (See [https://builds.apache.org/job/hbase-0.95/214/])
    HBASE-8420 Port HBASE-6874 Implement prefetching for scanners from 0.89-fb (Revision 1486247)

     Result = SUCCESS
jxiang : 
Files : 
* /hbase/branches/0.95/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ClientScanner.java
* /hbase/branches/0.95/hbase-client/src/main/java/org/apache/hadoop/hbase/client/Scan.java
* /hbase/branches/0.95/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ScannerCallable.java
* /hbase/branches/0.95/hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java
* /hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/util/Threads.java
* /hbase/branches/0.95/hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/ClientProtos.java
* /hbase/branches/0.95/hbase-protocol/src/main/protobuf/Client.proto
* /hbase/branches/0.95/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
* /hbase/branches/0.95/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
* /hbase/branches/0.95/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScannerHolder.java
* /hbase/branches/0.95/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestScannersFromClientSide.java
* /hbase/branches/0.95/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRowProcessorEndpoint.java
* /hbase/branches/0.95/hbase-server/src/test/java/org/apache/hadoop/hbase/protobuf/TestProtobufUtil.java
* /hbase/branches/0.95/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerMetrics.java


I created a subtask for the 0.94. Let's continue the 0.94 discussion there.
I'll do closer review early next week.

Integrated in hbase-0.95-on-hadoop2 #111 (See [https://builds.apache.org/job/hbase-0.95-on-hadoop2/111/])
    HBASE-8420 Port HBASE-6874 Implement prefetching for scanners from 0.89-fb (Revision 1486247)

     Result = FAILURE
jxiang : 
Files : 
* /hbase/branches/0.95/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ClientScanner.java
* /hbase/branches/0.95/hbase-client/src/main/java/org/apache/hadoop/hbase/client/Scan.java
* /hbase/branches/0.95/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ScannerCallable.java
* /hbase/branches/0.95/hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java
* /hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/util/Threads.java
* /hbase/branches/0.95/hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/ClientProtos.java
* /hbase/branches/0.95/hbase-protocol/src/main/protobuf/Client.proto
* /hbase/branches/0.95/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
* /hbase/branches/0.95/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
* /hbase/branches/0.95/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScannerHolder.java
* /hbase/branches/0.95/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestScannersFromClientSide.java
* /hbase/branches/0.95/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRowProcessorEndpoint.java
* /hbase/branches/0.95/hbase-server/src/test/java/org/apache/hadoop/hbase/protobuf/TestProtobufUtil.java
* /hbase/branches/0.95/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerMetrics.java


Integrated in HBase-TRUNK-on-Hadoop-2.0.0 #542 (See [https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/542/])
    HBASE-8420 Port HBASE-6874 Implement prefetching for scanners from 0.89-fb (Revision 1486246)

     Result = FAILURE
jxiang : 
Files : 
* /hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ClientScanner.java
* /hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/Scan.java
* /hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ScannerCallable.java
* /hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java
* /hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/util/Threads.java
* /hbase/trunk/hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/ClientProtos.java
* /hbase/trunk/hbase-protocol/src/main/protobuf/Client.proto
* /hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
* /hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
* /hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScannerHolder.java
* /hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestScannersFromClientSide.java
* /hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRowProcessorEndpoint.java
* /hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/protobuf/TestProtobufUtil.java
* /hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerMetrics.java


Is this feature not check in or revert?

Hi [~aoxiang], any reasy you think it's not checked in?

It's marked as closed and fixed in  0.98.0, 0.95.1 .

Hi [~jmspaggi], because i do not see the related code and configuration in trunk and 0.98 version.

It's reverted since we don't see much performance gain. It is preferred to do something in the client side instead.

[~jxiang], thanks jimmy.

