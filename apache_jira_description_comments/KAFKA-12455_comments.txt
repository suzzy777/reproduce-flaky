With a 2-broker cluster that undergoes a series of 5 rolling restarts (which is what is happening here), in the Raft case, the consumers sometimes receive a `MetadataResponse` that has only a single broker since the other broker is restarting.  This never happens in the Zookeeper case -- every received `MetadataResponse` in that case always lists both brokers.  I'm not sure why this would be the case in the ZooKeeper configuration, but that is the fundamental difference between the two cases in this test scenario: in the Raft configuration the consumer sometimes sees `METADATA` responses with just a single broker, and in the ZooKeeper scenario this never happens.  The problem with the consumer seeing only a single broker in the `METADATA` response for the Raft configuration is that when that broker that it knows about goes down the consumer suddenly has no available brokers that it knows about, and we see messages in the consumer log saying `Give up sending metadata request since no node is available`.  It then takes a while before the only broker that the consumer knows about restarts, and by that time the consumer group has already moved to the `GroupCoordinator` on the other broker (the one that the consumer didn't know about), and that coordinator fails the consumer due to a lack of a heartbeat -- thus a rebalance happens, and this test is specifically checking to make sure no rebalances occur during the rolling restarts.

I looked at the brokers' metadata caches for the two separate configurations -- ZK vs. Raft -- to find out what percentage of the time they showed showed 1 alive broker instead of 2.  I was expecting the ZooKeeper configuration to show relatively little time with just 1 alive broker since the clients are never seeing that metadata situation, and I was expecting the Raft configuration to show a much higher percentage of time with just 1 alive broker since the clients do see that metadata situation.  I did not find what I was expecting to find.

The amounts of times where the brokers are advertising just 1 alive broker in their metadata cache as follows:

*ZooKeeper Configuration*:
    BrokerId=1: 37 seconds out of 61 seconds of that broker's availability during the test, or 61% of the time with just 1 alive broker in metadata cache
    BrokerId=2: 39 seconds out of 61 seconds of that broker's availability during the test, or 64% of the time with just 1 alive broker in metadata cache

*Raft Configuration*:
    BrokerId=1: 37 seconds out of 88 seconds of that broker's availability during the test, or 42% of the time with just 1 alive broker in metadata cache
    BrokerId=2: 52 seconds out of 88 seconds of that broker's availability during the test, or 59% of the time with just 1 alive broker in metadata cache

So the brokers in the Zookeeper configuration consider just 1 broker to be alive more often than the brokers in the Raft configuration consider just 1 broker to be alive!

It is still not clear why the consumers never see just a single alive broker in the ZooKeeper configuration.  From the above it does not appear to be due to any difference in metadata cache population -- if it were just that then we would see the test failing in the ZooKeeper configuration since that actually advertises a single alive broker more frequently in terms of percentage of test time.



The test is using the default value of metadata.max.age.ms=300000 (5 minutes).  When I explicitly turn it down to metadata.max.age.ms=5000 (5 seconds) the test passes for Raft but then fails for ZK (2 unexpected group rebalances in that case).

I increased it to 10 seconds and then the Raft configuration failed with 3 unexpected rebalances and the ZK configuration failed with 1 unexpected rebalance.

I decreased it to a very aggressive 1 second -- and they both passed.

We have historically seen some flakiness in the ZooKeeper version of this test, and the fact that the test suddenly failed if we set metadata.max.age.ms to 5 or 10 seconds indicates that the it is just plain luck that the test is passing today.

Given that the current client-side code doesn't fall back to the bootstrap brokers when it sees no brokers available, I think any test really needs to make it *impossible* for the client to see cluster metadata with just a single broker. Decreasing the metadata max age decreases the possibility of it happening but doesn't make it impossible.

Another experiment was to keep metadata.max.age.ms=300000 but define session.timeout.ms = 30000 instead of the 10000 it was setting before -- this is longer tyan the broker roll time, and in fact this change allows both configurations to pass.

A further experiment was to keep metadata.max.age.ms=300000 and session.timeout.ms = 10000 but expand to 3 brokers instead of just 2.  This should fix the issue since there would never be a situation where just 1 broker is available, and a METADATA response would always have at least 2 brokers for the consumer to use.  Both configurations pass.


