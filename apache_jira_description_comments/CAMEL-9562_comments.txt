Have anyone tried to test this by removing that part of the code, and see that your apps still runs in OSGi?


I doubt that it could be removed at this point.  I found the issue as I was moving between blueprint and the package scanner for route builders and found that when I ran it it was not proxying the private implementation of a service from another bundle.  The actual class was being used.  That means there are likely folks out there who have functioning code in place that functions due to a classloader leak.  The only reason I noticed it was some flakiness I was seeing when I would swap bundles.  I'd get exceptions due to the missing implementation.  After running a restart on the bundle it worked.

So a Boolean strictMode setting that could be set in the configuration file for future projects would likely be required so that already deployed code would not break.  By default the strictMode would be set to false and checked as follows.  The default would be Boolean.FALSE so all mechanics would work as they currently do.  For new projects that could be set to TRUE and breaks could be dealt with.

OSGiPackageScanClassResolver.
// if we did not find any new, then fallback to use regular non bundle class loading
if(strictMode.equals(Boolean.TRUE) throw new ClassNotFoundInOSGiRegistryException(clazz);
if (classes.size() == classesSize) {
// Using the non-OSGi classloaders as a fallback
// this is necessary when use JBI packaging for servicemix-camel SU
// so that we get chance to use SU classloader to scan packages in the SU
log.trace("Cannot find any classes in bundles, not trying regular classloaders scanning: {}", packageName);
for (ClassLoader classLoader : super.getClassLoaders()) {
if (!isOsgiClassloader(classLoader))
{ find(test, packageName, classLoader, classes); }

} 


I'd like to add that I probably had something misconfigured in one of the bundles.  But I'd want that to fail hard.

