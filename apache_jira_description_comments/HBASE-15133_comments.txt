I attached the patch.

lgtm

The patch naming convention is here:
https://yetus.apache.org/documentation/in-progress/precommit-patchnames/

Thank you [~tedyu].

I renamed the patch file.

Then values like storeLimit and storeOffset can also be changed to long?
Because 
bq.    this.storeLimit = scan.getMaxResultsPerColumnFamily();
So in your type of use cases you can even set Integer.MAX_VALUE or even more than that for getMaxResultsPerColumnFamily().
Just out of curiousity 
How long does it take to scan such a wide row?

Thank you [~ram_krish].

I attached new patch.

> How long does it take to scan such a wide row?
The compaction time is about 4 hours.

Get and Scan are annotated Stable.

Thank you [~tedyu].

What should I do?

I wonder if there is backward compatible way of fixing this. 

I think changing Scan and Get APIs is not going to easy considering they are public and stable APIs. Patch V1 should work then if it is solving your issue. 
What do others think here?

So how you fetch this row? Provided the storeLimit and offset being int,  not using those?

I think for scans atleast you could control the number of columns being fetched by batching but while doing compactions we may have to rely on this countPerRow only and that cannot overflow. I think that is why they are able to live with the existing scan APIs.

We fetch at most 100 columns at once. We are not using the storeLimit and offset currently.


+1 for the V1 patch then.  Let us solve the problem of data loss and/or compaction issue.
For the limit offset change in public APIs, we will need deprecation and addition of new APIs. PB client-server comparability also another thing to make sure. So may be in a major version only we might change that (if needed)

[~tedyu@apache.org]
You want to commit this - the v1 version ?

By v1, you mean the first patch, right ?

The second is named v1.

Yes the 1st patch that was attached.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red} 0m 0s {color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 2m 52s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 51s {color} | {color:green} master passed with JDK v1.8.0 {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 33s {color} | {color:green} master passed with JDK v1.7.0_79 {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 4m 32s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 18s {color} | {color:green} master passed {color} |
| {color:red}-1{color} | {color:red} findbugs {color} | {color:red} 2m 4s {color} | {color:red} hbase-server in master has 1 extant Findbugs warnings. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 35s {color} | {color:green} master passed with JDK v1.8.0 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 38s {color} | {color:green} master passed with JDK v1.7.0_79 {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 47s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 54s {color} | {color:green} the patch passed with JDK v1.8.0 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 54s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 35s {color} | {color:green} the patch passed with JDK v1.7.0_79 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 35s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 4m 46s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 17s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} Patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 23m 27s {color} | {color:green} Patch does not cause any errors with Hadoop 2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.1 2.6.2 2.6.3 2.7.1. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 2m 11s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 38s {color} | {color:green} the patch passed with JDK v1.8.0 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 38s {color} | {color:green} the patch passed with JDK v1.7.0_79 {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 117m 28s {color} | {color:red} hbase-server in the patch failed with JDK v1.8.0. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 120m 7s {color} | {color:red} hbase-server in the patch failed with JDK v1.7.0_79. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 14s {color} | {color:green} Patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 284m 48s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| JDK v1.8.0 Failed junit tests | hadoop.hbase.master.balancer.TestStochasticLoadBalancer |
| JDK v1.7.0_79 Failed junit tests | hadoop.hbase.master.balancer.TestStochasticLoadBalancer |
\\
\\
|| Subsystem || Report/Notes ||
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12783755/HBASE-15133.patch |
| JIRA Issue | HBASE-15133 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux asf900.gq1.ygridcore.net 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / b6f091e |
| findbugs | v3.0.0 |
| findbugs | https://builds.apache.org/job/PreCommit-HBASE-Build/247/artifact/patchprocess/branch-findbugs-hbase-server-warnings.html |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/247/artifact/patchprocess/patch-unit-hbase-server-jdk1.8.0.txt |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/247/artifact/patchprocess/patch-unit-hbase-server-jdk1.7.0_79.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-HBASE-Build/247/artifact/patchprocess/patch-unit-hbase-server-jdk1.8.0.txt https://builds.apache.org/job/PreCommit-HBASE-Build/247/artifact/patchprocess/patch-unit-hbase-server-jdk1.7.0_79.txt |
| JDK v1.7.0_79  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/247/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Max memory used | 192MB |
| Powered by | Apache Yetus 0.1.0   http://yetus.apache.org |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/247/console |


This message was automatically generated.



TestStochasticLoadBalancer test failure was not related - the test is flaky.

Thanks for the patch, Toshihiro

Thanks for the reviews.

SUCCESS: Integrated in HBase-1.2-IT #408 (See [https://builds.apache.org/job/HBase-1.2-IT/408/])
HBASE-15133 Data loss after compaction when a row has more than (tedyu: rev 936203684fe2c4751d9e4d3aaf232bed1d896198)
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java


FAILURE: Integrated in HBase-Trunk_matrix #652 (See [https://builds.apache.org/job/HBase-Trunk_matrix/652/])
HBASE-15133 Data loss after compaction when a row has more than (tedyu: rev b1df2f8c881d418bb47e15a88c09d964ca89d2e2)
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java


FAILURE: Integrated in HBase-1.3 #508 (See [https://builds.apache.org/job/HBase-1.3/508/])
HBASE-15133 Data loss after compaction when a row has more than (tedyu: rev 17b5f04270c341634e0005cd76d74a500ae858a1)
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java


SUCCESS: Integrated in HBase-1.2 #518 (See [https://builds.apache.org/job/HBase-1.2/518/])
HBASE-15133 Data loss after compaction when a row has more than (tedyu: rev 936203684fe2c4751d9e4d3aaf232bed1d896198)
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java


SUCCESS: Integrated in HBase-1.3-IT #453 (See [https://builds.apache.org/job/HBase-1.3-IT/453/])
HBASE-15133 Data loss after compaction when a row has more than (tedyu: rev 17b5f04270c341634e0005cd76d74a500ae858a1)
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java


FAILURE: Integrated in HBase-0.98-matrix #295 (See [https://builds.apache.org/job/HBase-0.98-matrix/295/])
HBASE-15133 Data loss after compaction when a row has more than (apurtell: rev e18b62cb9d5f522d1f86fe9af17f747677e32c19)
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java


FAILURE: Integrated in HBase-0.98-on-Hadoop-1.1 #1169 (See [https://builds.apache.org/job/HBase-0.98-on-Hadoop-1.1/1169/])
HBASE-15133 Data loss after compaction when a row has more than (apurtell: rev e18b62cb9d5f522d1f86fe9af17f747677e32c19)
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java


