Now the question is. Do I just change pom.xml to always include the security files like this:
{code}
+              <execution>
+                <id>add-source</id>
+                <goals>
+                  <goal>add-source</goal>
+                </goals>
+                <configuration>
+                  <sources>
+                    <source>${project.basedir}/security/src/main/java</source>
+                  </sources>
+                </configuration>
+              </execution>
{code}

or do I move the security files into place under src? The former is less disruptive, the latter is cleaner.


Talked to Mr. [~jesse_yates]. I will just move the add-source portion from build under the secure profile into the global build. Running all tests now. So far so good.
Will post patch once I confirmed the test suite passing.

Ran all tests: 
{code}
Results :
Tests run: 728, Failures: 0, Errors: 0, Skipped: 0
...
Results :
Tests run: 1482, Failures: 0, Errors: 0, Skipped: 13

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] -----------------------------------------------------
{code}

Notice that we now run 1482 (instead of 1422). Those are all the security related ones.

Here's the simple patch. (as described above I opted for the maven trickery rather than moving all the files into place under the src directory).

[~stack], [~apurtell], [~ghelmling], [~jesse_yates], please have a quick look. Thanks.

Wouldn't using this: http://maven.apache.org/plugins/maven-resources-plugin/examples/include-exclude.html be cleaner?

Nm, I was wrong. thanks [~lhofhansl]] for calling me on it.

+1 maybe add a comment, on commit, for why they are separate

I don't think we actually need {{security/src/test/resources/hbase-site.xml}} without the security profile.  The only thing it was doing was setting {{SecureRpcEngine}} to be used for tests.  Which raises the question: should {{SecureRpcEngine}} or {{WritableRpcEngine}} be used for running the tests if security is integrated into the main build?

It would be using the secure engine for all tests now (I think... Since we're overriding the rpc enging config with the hbase-site.xml in security/...), and they all still pass. So I could change src/test/resources/hbase-site.xml instead.

I plan a followup jira to remove the WritableRpcEngine (or at least make the SecureRpcEngine the default).

Do you think this is an issue?


There is a lot of duplication between security/src/test/resources/hbase-site.xml and src/test/resources/hbase-site.xml, so my only concern would be changes made to one but not the other if they both stay in place.  So +1 to removing the security/src/test/resources version and moving the "hbase.rpc.engine" setting to src/test/resources.

I also think moving to SecureRpcEngine as the default would make sense, but also agree it merits a separate issue for discussion.  There may be impact to other project like AsyncHBase?

The rest of the patch looks good to me.

+1  Minimal disturbance.

How about this?
* added comment as requested by Jesse
* removes security test resources
* adds the SecureRpcEngine to the testing hbase-site.xml


Thats fine.  Anyway to pass args and run tests on insecure?  No biggie if not.

I could default to the insecure engine (WritableRpcEngine) and tweak all the security tests to use SecureRpcEngine. You think that'd be better so we keep coverage for the WritableRpcEngine?


I guess now we cover WritableRcpEngine in the non-secure builds and SecureRpcEngine in the secure builds. Alas, no free lunch :)

You always keep the secure configs around and add them (switch out the
standard one?) for something like a -Dsecure-tests flag

A little more work, but means not changing every test



Not sure that would do. We'd then only run the secure tests with the SecureRpcEngine.
The way I see it: The SecureRpcEngine is more general (by definition). It can run a secure and non-secure setting. It's the one we should switch to and the one that gets the testing.

Maybe another option is to now have a non-secure profile, just for testing. It would exclude the the secure tests and the secure resources (with some maven trickery). That way we could still two jenkins build.

Yet another option is run a select set of with the both RpcEngines. TestFromClientSide comes to mind, as well as some of the bulkload and M/R tests. So almost all tests would run with the SecureRpcEngine, and some would also run with the WritableRpcEngine.
I think I'd favor this latter option.


After reading above, if asynchbase works against secure rpc and no (or little perf degradation), just go secure all the time (as you suggest).

I think that'd be for another ticket with more discussion. Now sure - now thinking about it more - if folks would rely on anything specific from WritableRcpEngine.

For this ticket I'd like to:
# Default to the secure build, but with WritableRpcEngine still by default
# Get rid of the secure jenkins build, run all tests including the secure ones as part of one run
# Allow the secure artifacts in maven

The sticky part is the testing as mentioned above. If we do not want to run two full builds anymore we'll have to accept decreased coverage for one of the Rpc Egnines. Many tests do not use RPC anyway. So I think it might be best to switch to SecureRpcEngine for tests now and run TestFromClientSide and TestTableInputFormat (and others?) with both Rpc Engines.


It turns out that asynchbase does not work out of the box with the SecureRpcEngine. So we cannot just change it (and maybe that would be a little radical at this point in 0.94, anyway).

So new plan: Default tests back to WritableRpcEngine, but all run all secure tests with the SecureRpcEngine and also run TestFromClientSide twice, once with each engine.


OK... Here's my "final" proposal.
* Pull security code into the normal build
* Run tests with normal WritableRpcEngine
* All the security tests already configure themselves to run with the SecureRpcEngine
* Add a TestFromClientSideWithSecureRpcEngine
* _Rename_ the security profile to security-test and keep the secure test resources
* Keep the -security jenkins build and run it with the secure-test profile

That way we get some test coverage for SecureRpcEngine with just the normal build, and full coverage for both WritableRpcEngine and SecureRpcEngine among the two jenkins runs. The default HBase build will ship with all the security code.


Patch that does this.

lgtm

Thanks Stack. Unless there are further comments I will commit this in a bit. (I might force TestFromClientSide to use the WritableRpcEngine - that we get a one test run with that rpc engine even when the secure-test profile is selected).

+1

This seems like a good approach.  TestFromClientSideWithSecureRpcEngine should give us most of the coverage we need, but we still have the security-test profile to back that up.

Thanks for taking this up, Lars!  Should simplify the packaging (and security) story for 0.94 quite a bit.

+1 lgtm

What I am going to commit.

Just fixes some typos and forces TestFromClientSide to run with WritableRpcEngine (which is not public, hence the string path to the class), since we have TestFromClientSideWithSecureRpcEngine, that will run with SecureRpcEngine unconditionally.



Committed to 0.94. I also changed the -security build to use the -security-test profile.
Watching the builds now.

FAILURE: Integrated in HBase-0.94-security #452 (See [https://builds.apache.org/job/HBase-0.94-security/452/])
HBASE-10847 0.94: drop non-secure builds, make security the default. (larsh: rev 1583480)
* /hbase/branches/0.94/pom.xml
* /hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java
* /hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSideWithSecureRpcEngine.java


SUCCESS: Integrated in HBase-0.94 #1335 (See [https://builds.apache.org/job/HBase-0.94/1335/])
HBASE-10847 0.94: drop non-secure builds, make security the default. (larsh: rev 1583480)
* /hbase/branches/0.94/pom.xml
* /hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java
* /hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSideWithSecureRpcEngine.java


The -security build failed with a known flaky test (need to look into that).


FAILURE: Integrated in HBase-0.94-on-Hadoop-2 #62 (See [https://builds.apache.org/job/HBase-0.94-on-Hadoop-2/62/])
HBASE-10847 0.94: drop non-secure builds, make security the default. (larsh: rev 1583480)
* /hbase/branches/0.94/pom.xml
* /hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java
* /hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSideWithSecureRpcEngine.java


FAILURE: Integrated in HBase-0.94-JDK7 #97 (See [https://builds.apache.org/job/HBase-0.94-JDK7/97/])
HBASE-10847 0.94: drop non-secure builds, make security the default. (larsh: rev 1583480)
* /hbase/branches/0.94/pom.xml
* /hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java
* /hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSideWithSecureRpcEngine.java


