The stack of the hung thread doing the clear along with some log statements around it:
{noformat}
[info 2016/09/03 01:59:36.437 PDT <Idle OplogCompactor> tid=0x11b] Closing oplog#37 early since it is empty. It is for disk store testNVPersistAndOverflowSyncConcurrency10.

[info 2016/09/03 01:59:36.437 PDT <Oplog Delete Task> tid=0x12d] Deleted oplog#37 crf for disk store testNVPersistAndOverflowSyncConcurrency10.

[info 2016/09/03 01:59:36.437 PDT <Idle OplogCompactor> tid=0x11b] Closing oplog#38 early since it is empty. It is for disk store testNVPersistAndOverflowSyncConcurrency10.

[info 2016/09/03 01:59:36.437 PDT <Oplog Delete Task> tid=0x12d] Deleted oplog#37 drf for disk store testNVPersistAndOverflowSyncConcurrency10.

[info 2016/09/03 01:59:36.437 PDT <Oplog Delete Task> tid=0x12d] Deleted oplog#38 crf for disk store testNVPersistAndOverflowSyncConcurrency10.

[info 2016/09/03 01:59:36.437 PDT <Idle OplogCompactor> tid=0x11b] Closing oplog#39 early since it is empty. It is for disk store testNVPersistAndOverflowSyncConcurrency10.

[info 2016/09/03 01:59:36.437 PDT <Oplog Delete Task> tid=0x12d] Deleted oplog#38 drf for disk store testNVPersistAndOverflowSyncConcurrency10.

[info 2016/09/03 01:59:36.466 PDT <Oplog Delete Task> tid=0x12d] Deleted oplog#39 crf for disk store testNVPersistAndOverflowSyncConcurrency10.

[info 2016/09/03 01:59:36.466 PDT <Oplog Delete Task> tid=0x12d] Deleted oplog#39 drf for disk store testNVPersistAndOverflowSyncConcurrency10.

[info 2016/09/03 01:59:43.601 PDT <Test worker> tid=0xa] HUNG THREAD

[info 2016/09/03 01:59:43.603 PDT <Test worker> tid=0xa] Thread=<Thread[ClearThread0,5,main]> stackDump:
	sun.misc.Unsafe.park(Native Method)
	java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)
	java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)
	java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:870)
	java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1199)
	java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock(ReentrantReadWriteLock.java:943)
	com.gemstone.gemfire.internal.cache.DiskStoreImpl.acquireCompactorWriteLock(DiskStoreImpl.java:2238)
	com.gemstone.gemfire.internal.cache.DiskStoreImpl.clear(DiskStoreImpl.java:2187)
	com.gemstone.gemfire.internal.cache.DiskRegion.clear(DiskRegion.java:603)
	com.gemstone.gemfire.internal.cache.LocalRegion.clearRegionLocally(LocalRegion.java:9775)
	com.gemstone.gemfire.internal.cache.LocalRegion.cmnClearRegion(LocalRegion.java:9659)
	com.gemstone.gemfire.internal.cache.LocalRegion.basicClear(LocalRegion.java:9650)
	com.gemstone.gemfire.internal.cache.LocalRegion.basicClear(LocalRegion.java:9646)
	com.gemstone.gemfire.internal.cache.AbstractRegion.clear(AbstractRegion.java:366)
	com.gemstone.gemfire.internal.cache.ConcurrentRegionOperationsJUnitTest.clear(ConcurrentRegionOperationsJUnitTest.java:745)
	com.gemstone.gemfire.internal.cache.ConcurrentRegionOperationsJUnitTest$DoesClear.run(ConcurrentRegionOperationsJUnitTest.java:865)
	java.lang.Thread.run(Thread.java:745)


[info 2016/09/03 01:59:43.845 PDT <Idle OplogCompactor> tid=0x11b] Created oplog#40 krf for disk store testNVPersistAndOverflowSyncConcurrency10.

[info 2016/09/03 01:59:43.845 PDT <Idle OplogCompactor> tid=0x11b] Closing oplog#41 early since it is empty. It is for disk store testNVPersistAndOverflowSyncConcurrency10.
{noformat}

This might be the thread that is holding the compactor lock:
{noformat}
"Idle OplogCompactor" tid=0x11b (in native)
    java.lang.Thread.State: RUNNABLE
	at sun.nio.ch.FileDispatcherImpl.force0(Native Method)
	at sun.nio.ch.FileDispatcherImpl.force(FileDispatcherImpl.java:76)
	at sun.nio.ch.FileChannelImpl.force(FileChannelImpl.java:387)
	at com.gemstone.gemfire.internal.cache.Oplog.krfClose(Oplog.java:4065)
	at com.gemstone.gemfire.internal.cache.Oplog.createKrf(Oplog.java:4168)
	-  locked java.util.concurrent.atomic.AtomicBoolean@60bc0593
	at com.gemstone.gemfire.internal.cache.Oplog$2.run(Oplog.java:3842)
	at com.gemstone.gemfire.internal.cache.DiskStoreImpl$6.run(DiskStoreImpl.java:4668)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)

	Number of locked synchronizers = 2
	- java.util.concurrent.ThreadPoolExecutor$Worker@40a7948a
	- java.util.concurrent.locks.ReentrantLock$NonfairSync@141e40f2
{noformat}

The clear thread is blocked waiting for the OplogCompactor thread to finish closing a krf is created. I think this test is flaky. It just needs to be changed to wait longer (it currently waits 10 seconds and that almost always works) for the concurrent threads to finish.


Commit 06436dba03b38c281a159a239fb84bd0c956ee81 in incubator-geode's branch refs/heads/develop from [~dschneider]
[ https://git-wip-us.apache.org/repos/asf?p=incubator-geode.git;h=06436db ]

GEODE-1860: change unit test to wait longer


