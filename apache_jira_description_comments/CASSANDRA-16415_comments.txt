Another recent failure here: https://app.circleci.com/pipelines/github/maedhroz/cassandra/227/workflows/c8f12d79-8f8c-420c-965c-d8188199822b/jobs/1301

I don't think this is actually flaky. It's just broken right now. I'm hoping to take a look at it this afternoon if I get time, and Jacek also indicated he could look into it next week.

Thanks for looking into it. Agree that it is broken ATM. 

A bit more info that the "digest mismatch" error only occurs in *v3X* and not in *v4*, although the patch is present in both versions. 

This problem does not affect 4.0 at all. The only reason we can see it in 4.0 tests is that the JVM upgrade distributed tests is different in for {{trunk}} and for {{cassandra-3.11}} branches. I don't remember why is it different, but we should make it look same. 

Also this is interesting problem - tests tied to 4.0 fail during upgrade because C* we upgrade from is broken...

I encountered a weird problem - see my PR for 3.11: https://github.com/apache/cassandra/pull/891

Basically there are no changes in the production code. I modified a little bit the mixed read test mostly by adding gossip and networking features to the cluster configuration (as gossiper is required for this test run). Apparently I did something wrong because the cluster does not run properly and it complains with the following exception (repeated many, many times):

{noformat}
[junit-timeout] ERROR 14:35:29 Unable to merge schema from /127.0.0.2
[junit-timeout] java.util.concurrent.RejectedExecutionException: ThreadPoolExecutor has shut down
[junit-timeout] 	at org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor$1.rejectedExecution(DebuggableThreadPoolExecutor.java:58) ~[dtest-3.11.11.jar:na]
[junit-timeout] 	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) [na:1.8.0_212]
[junit-timeout] 	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379) [na:1.8.0_212]
[junit-timeout] 	at org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.execute(DebuggableThreadPoolExecutor.java:162) ~[dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.db.ColumnFamilyStore.switchMemtable(ColumnFamilyStore.java:904) ~[dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.db.ColumnFamilyStore.switchMemtableIfCurrent(ColumnFamilyStore.java:885) ~[dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.db.ColumnFamilyStore.forceFlush(ColumnFamilyStore.java:954) ~[dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.schema.SchemaKeyspace.lambda$flush$1(SchemaKeyspace.java:310) ~[dtest-3.11.11.jar:na]
[junit-timeout] 	at java.lang.Iterable.forEach(Iterable.java:75) ~[na:1.8.0_212]
[junit-timeout] 	at org.apache.cassandra.schema.SchemaKeyspace.flush(SchemaKeyspace.java:310) ~[dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.schema.SchemaKeyspace.mergeSchema(SchemaKeyspace.java:1398) ~[dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.schema.SchemaKeyspace.mergeSchemaAndAnnounceVersion(SchemaKeyspace.java:1380) ~[dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.service.MigrationCoordinator.mergeSchemaFrom(MigrationCoordinator.java:367) ~[dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.service.MigrationCoordinator$Callback.response(MigrationCoordinator.java:404) [dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.service.MigrationCoordinator$Callback.response(MigrationCoordinator.java:393) [dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.net.ResponseVerbHandler.doVerb(ResponseVerbHandler.java:53) [dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.net.MessageDeliveryTask.run(MessageDeliveryTask.java:66) [dtest-3.11.11.jar:na]
[junit-timeout] 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_212]
[junit-timeout] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_212]
[junit-timeout] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_212]
[junit-timeout] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_212]
[junit-timeout] 	at org.apache.cassandra.concurrent.NamedThreadFactory.lambda$threadLocalDeallocator$0(NamedThreadFactory.java:84) [dtest-3.11.11.jar:na]
[junit-timeout] 	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_212]
[junit-timeout] ERROR [node1_InternalResponseStage:1] node1 2021-02-08 15:35:29,093 MigrationCoordinator.java:408 - Unable to merge schema from /127.0.0.2
[junit-timeout] java.util.concurrent.RejectedExecutionException: ThreadPoolExecutor has shut down
[junit-timeout] 	at org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor$1.rejectedExecution(DebuggableThreadPoolExecutor.java:58) ~[dtest-3.11.11.jar:na]
[junit-timeout] 	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830) [na:1.8.0_212]
[junit-timeout] 	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379) [na:1.8.0_212]
[junit-timeout] 	at org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor.execute(DebuggableThreadPoolExecutor.java:162) ~[dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.db.ColumnFamilyStore.switchMemtable(ColumnFamilyStore.java:904) ~[dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.db.ColumnFamilyStore.switchMemtableIfCurrent(ColumnFamilyStore.java:885) ~[dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.db.ColumnFamilyStore.forceFlush(ColumnFamilyStore.java:954) ~[dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.schema.SchemaKeyspace.lambda$flush$1(SchemaKeyspace.java:310) ~[dtest-3.11.11.jar:na]
[junit-timeout] 	at java.lang.Iterable.forEach(Iterable.java:75) ~[na:1.8.0_212]
[junit-timeout] 	at org.apache.cassandra.schema.SchemaKeyspace.flush(SchemaKeyspace.java:310) ~[dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.schema.SchemaKeyspace.mergeSchema(SchemaKeyspace.java:1398) ~[dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.schema.SchemaKeyspace.mergeSchemaAndAnnounceVersion(SchemaKeyspace.java:1380) ~[dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.service.MigrationCoordinator.mergeSchemaFrom(MigrationCoordinator.java:367) ~[dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.service.MigrationCoordinator$Callback.response(MigrationCoordinator.java:404) [dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.service.MigrationCoordinator$Callback.response(MigrationCoordinator.java:393) [dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.net.ResponseVerbHandler.doVerb(ResponseVerbHandler.java:53) [dtest-3.11.11.jar:na]
[junit-timeout] 	at org.apache.cassandra.net.MessageDeliveryTask.run(MessageDeliveryTask.java:66) [dtest-3.11.11.jar:na]
[junit-timeout] 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_212]
[junit-timeout] 	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_212]
[junit-timeout] 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_212]
[junit-timeout] 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_212]
[junit-timeout] 	at org.apache.cassandra.concurrent.NamedThreadFactory.lambda$threadLocalDeallocator$0(NamedThreadFactory.java:84) [dtest-3.11.11.jar:na]
[junit-timeout] 	at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_212]
{noformat}

Can someone help me a bit with this? (cc [~jwest], [~blerer])


[~jlewandowski], it seems the only difference in the new 'MixedModeReadTest' is the static column. The old test already had the gossip and networking features enabled. The test runs after reverting the table definition. 

Not sure whether the behavior is unexpected. It is a separate issue and should be tracked in a different ticket, if so. 

[~yifanc] thank you for checking that. Maybe I'm doing something wrong with how I run that test. All in all, I rewrote that test as Python dtest and it passed without making any changes in production code. However the new test was failing because there was a bug in {{ColumnFilter}}. I fixed the bug and run both tests, both passed.


:facepalm

You are absolutely right. I've blindly copied the test from trunk. That test does not use gossip. Let me fix that...

So, the problem was not visible, but it unfortunately affects 4.0 as well (in terms of upgrading from 3). It is not critical though.

The problem is still the same - {{ColumnFilter}} is buggy. Its structure and interpretation has changed in 3.0.14 (I guess), 3.4 and 4.0 significantly. Although we try to apply some adjustments while sending it to older nodes / receiving it from older nodes, there are some features which are not available for older nodes.

For example, fetch all regular columns and only queried static columns, while there is only a subset of queried regular columns - there is no way to convert the filter for 3.11 or 3.0 so that it gets interpreted in the same way as on 4.0, and thus, the data read on 4.0 will be different to the data read on 3.11 or 3.0, and therefore, the digest will be different as well. The differences are mostly with regard to which cells has skipped values and which cells are removed at all from the results

I'm going to add extra flag to {{ColumnFilter}} in 4.0, which will be set if there are 3.4+ nodes in the cluster, so that the filter can be interpreted on 4.0 in the most efficient way that is also available on 3.4+ nodes. Where there are < 3.4 nodes in the cluster, it is enough to set {{queried}} columns to null (as we try to do now).

 

trunk PR: [https://github.com/apache/cassandra/pull/892]

3.11 PR: [https://github.com/apache/cassandra/pull/891]

3.0 PR (just test) [https://github.com/apache/cassandra/pull/890]

 

Running CI:

* [3.0|https://app.circleci.com/pipelines/github/adelapena/cassandra/182/workflows/1eb6d43a-0a8a-40ff-8fb6-fa66806bf595]
* [3.11|https://app.circleci.com/pipelines/github/adelapena/cassandra/184/workflows/70b2942f-45f6-4f5d-8267-511aeef6c9b6]
* [trunk (j8)|https://app.circleci.com/pipelines/github/adelapena/cassandra/183/workflows/d363c206-0cbc-4208-a376-008a7f721d24]
* [trunk (j11)|https://app.circleci.com/pipelines/github/adelapena/cassandra/183/workflows/59f7ed8d-fdce-4054-a007-4aea99dfeb89]

It seems that for trunk there is a failure in {{InsertUpdateIfConditionTest.testConditionalDelete}}.

Thanks you [~jlewandowski] for the patches.

The review comments were put in the corresponding PRs. 

The approach/workaround sounds good. It fixes the wrong check and it can largely _reduce_ the occurrence of digest mismatches during upgrade. The gossip based cluster-wide version checking is still possible to produce small time windows that nodes involved in reads hold different knowledge about the Cassandra versions in the cluster, hence the digest mismatches. However, I cannot think of a better way to fully eliminate, since the semantics of the ColumnFilter has been changed multiple times without message version change and we cannot distinguish.

We should also change the title of the ticket. It is a bug fix instead of fixing a broken test. [~jlewandowski], please update with whatever you think is more suitable to describe the bug. 

thank you [~yifanc] for reviewing

 

All in all, I don't think messaging version change would help there. The problem is that we need to know the version upfront, when executing query locally. We do not know the version yet, because we do not know which replicas are going to be queried. On the other hand, I suppose that when we choose a node as a replica we want to query, we probably already have its endpoint state data populated, thus its version too (though, I'm not sure, I haven't followed the code carefully).

If it was just a messaging version, I could imagine that (since 4.0 is not yet released) we introduced a new version in 3.11 patch release and just incremented the messaging version in 4.0. This way we would fix it properly for 3.0 -> 3.11.new and for 3.11.new -> 4.0.

 

I'm going to fix that unit test mentioned by [~adelapena]. I don't think it will be just a unit test fix, I suppose it will be a change in production code :/

For the problem discovered by {{InsertUpdateIfConditionTest}} I must say it is probably caused by partial lack of CASSANDRA-13025 in {{trunk}}. I don't know if it was on purpose or it was a merge conflict or what - there were some changes in {{CASRequest}} in 3.0 and 3.11, but in {{trunk}} {{CASRequest}} became an interface and the actual implementation is in {{CQL3CASRequest}}. I assume that it could cause the merge conflict which was not solved properly. 

 

I updated tests a bit in the following ways:
 * so far, all the tests which do not touch {{Gossiper}} could run assuming the cluster is upgrading from null version - I've changed it so if the {{Gossiper}} is not started, we do not assume any upgrade
 * I've created a utility method to setup {{Gossiper}} to mimic upgrade from certain version
 * {{ColumnFilterTest}} and {{InsertUpdateIfConditionTest}} are now parameterized with the minimum version so we test all scenarios

 

Running CI again:

 * [3.0|https://app.circleci.com/pipelines/github/adelapena/cassandra/187/workflows/24f1480f-428f-4816-9af6-2cf751ee9cdc]
 * [3.11|https://app.circleci.com/pipelines/github/adelapena/cassandra/189/workflows/7acb9496-96a5-46b5-ace5-cb651ca2eb6c]
 * [trunk (j8)|https://app.circleci.com/pipelines/github/adelapena/cassandra/188/workflows/1730c947-cd63-4b8b-b4e9-7ba896a945c7]
 * [trunk (j11)|https://app.circleci.com/pipelines/github/adelapena/cassandra/188/workflows/1161f852-1570-420d-b8b3-2a9c6b88ac5d]

Matching CI runs on ci-cassandra:
- [3.0|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/389/pipeline]
- [3.11|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/390/pipeline]
- [trunk|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/391/pipeline]

New CI rounds for the last changes:

* [3.0|https://app.circleci.com/pipelines/github/adelapena/cassandra/192/workflows/7c49eee3-4e2b-4140-bc09-30d80eeb20f7]
* [3.11|https://app.circleci.com/pipelines/github/adelapena/cassandra/190/workflows/4941bf2b-fef2-4cda-aae9-7e2b3e8614a2]
* [trunk (j8)|https://app.circleci.com/pipelines/github/adelapena/cassandra/191/workflows/c5b5107d-70cc-4fcf-8794-fc3b2d903b22]
* [trunk (j11)|https://app.circleci.com/pipelines/github/adelapena/cassandra/191/workflows/0be9401d-a625-4fd8-9cb6-e43d8c181629]

I'd say the CI results look good. The upgrade test {{mixedModeReadColumnSubsetDigestCheck}} consistently fails on trunk, but I think that's because CI is picking a 3.11 version without the changes proposed here, so we'll have to trust the local runs.

+1 on all 3 patches.  

This is looking good to me too, there are only a few remaining nits in the 3.11 and trunk PRs. I have rebased the PRs in separate branches and run CI once again:
 * [CircleCI 3.0|https://app.circleci.com/pipelines/github/adelapena/cassandra/197/workflows/0ced7a12-0872-4b42-b828-e60033b18b47]
 * [CircleCI 3.11|https://app.circleci.com/pipelines/github/adelapena/cassandra/198/workflows/3f84c4e0-1bed-4bef-b832-4c7f39427d10]
 * [CircleCI trunk j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/196/workflows/962b06b5-a7e3-4b1d-8542-a9c0de9db236]
 * [CircleCI trunk j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/196/workflows/d0ffe732-0184-4639-af02-deabdb2627d9]
 * [ci-cassandra 3.0|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/413/pipeline]
 * [ci-cassandra 3.11|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/414/pipeline]
 * [ci-cassandra trunk|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/415/pipeline]

ci-cassandra is taking longer than usual, but I'd say the circle-ci results look good and the failures on it are not related.

Thank you for reviewing and testing. I've applied the remaining comments from Andres and squashed my commits

Thanks for the changes. There are still a few unneeded {{throws Exception}} on the column filter test for 3.11 and trunk that I can easily remove on commit, if that's ok for you. Other than this nit the changes look good to me.

It seems that the runs in ci-cassandra above took longer than usual which I think can produce some test failures, I have re-run those runs:
 * [ci-cassandra 3.0|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/418/pipeline]
 * [ci-cassandra 3.11|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/417/pipeline]
 * [ci-cassandra trunk|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/416/pipeline]

Curiously it seems that for 3.11 the tests {{SASIIndexTest#testIndexRedistribution/testPagination}} fail consistently, when they were occasionally flaky without the patch. Nevertheless the flakiness of these tests is being addressed in CASSANDRA-16444 so I think it's safe to consider the failures as not related.

[~yifanc] if the CI results above look good to you I can proceed to commit.

Thanks for running the test!

The test failures from [ci-cassandra 3.0|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/418/pipeline] do not look related.

The test failures from [ci-cassandra 3.11|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/417/pipeline] do not look related. The test {{SASIIndexTest#testIndexRedistribution/testPagination}} does not touch the {{ColumnFilter.Serializer#deserialize}} code path.

The test failures from [ci-cassandra trunk|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/416/pipeline] mostly look unrelated. There is one failure I need to point out, {{mixedModeReadColumnSubsetDigestCheck – org.apache.cassandra.distributed.upgrade.MixedModeReadTest}}. However, it cannot be reproduced by running the test repeatedly on my local. The dtest jars were built from all 3 patched branches. I think Jenkins built the v30/v3x jvm dtest jars from HEAD instead of the patched branches, which explains the failure.

So, +1 on proceed to commit.

Beside, I'd *strongly* suggest to update the title of the ticket, so it provides more clarity on what is the problem the patch to solve. As mentioned in the earlier comment, it is not just fixing the broken test.

Committed to 3.0 as [865b67b21d326728936f0b80681129c73a2e374a|https://github.com/apache/cassandra/commit/865b67b21d326728936f0b80681129c73a2e374a] and merged up to [cassandra-3.11|https://github.com/apache/cassandra/commit/0541c5199690757294c40d9adfd1b86419158675] and [trunk|https://github.com/apache/cassandra/commit/d1f3d40afc5d20bab70c6200508baa3cd9409458].

It looks to me like some changes here broke a couple of tests.
https://app.circleci.com/pipelines/github/aholmberg/cassandra/206/workflows/d1b3d7d4-5f4e-4485-9767-c2666aad86bd/jobs/2386

The test is failing because the statement is printing wrong in the slow query log:
{{<SELECT */* FROM ks.t_skinny WHERE  LIMIT 5000>}}

I haven't created a new ticket yet. Will do tomorrow if no one gets to it.

[~aholmber] CASSANDRA-16483 has already been created for this. I have an almost ready patch adding a new {{ColumnFilter#toCQLString}} method for query logging, so we can keep the changes in {{ColumnFilter#toString}} added in this ticket, although I still need to add some additional dtests. Probably it will be ready for review tomorrow.

got it. Sorry, I just noticed on the way out and didn't make the connection.

