Commit d96341ed537a3e321d5fa6a0235ab06b5d9169a2 in impala's branch refs/heads/master from Joe McDonnell
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=d96341ed5 ]

IMPALA-12393: Fix inconsistent hash for TimestampValue in DictEncoder

Currently, DictEncoder uses the default hash function for
TimestampValue, which means it is hashing the entire
TimestampValue struct. This can be inconsistent, because
TimestampValue contains some padding that may not be zero
in some cases. For TimestampValues that are part of a Tuple,
the padding is zero, so this is mainly present in test cases.

This was discovered when fixing a Clang Tidy performance-for-range-copy
warning by iterating with a const reference rather than
making a copy of the value. DictTest.TestTimestamps became
flaky with that change, because the hash was no longer
consistent. The copy must have had consistent content for
the padding through the iteration, but the const reference
did not.

This adds a template specialization of the Hash function
for TimestampValue. The specialization uses TimestampValue::Hash(),
which hashes only the non-padding pieces of the struct. This
also includes the change to dict-test.cc that uncovered the
issue. This fix is mostly to unblock IMPALA-12390.

Testing:
 - Ran dict-test in a loop for a few hundred iterations
 - Hand tested inserting many timestamps into a Parquet table
   with dictionary encoding and verified that the performance didn't
   change.

Change-Id: Iad86e9b0f645311c3389cf2804dcc1a346ff10a9
Reviewed-on: http://gerrit.cloudera.org:8080/20396
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Reviewed-by: Daniel Becker <daniel.becker@cloudera.com>
Reviewed-by: Michael Smith <michael.smith@cloudera.com>


Commit f563cce6b8eed4519772af06d89edc6e374839d3 in impala's branch refs/heads/master from Joe McDonnell
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=f563cce6b ]

IMPALA-12390 (part 1): Enable some clang-tidy performance related checks

This enables several Clang Tidy performance checks and fixes
the flagged code locations. The specific checks enabled are:
1. performance-faster-string-find
  "warning: 'find' called with a string literal consisting of a
   single character; consider using the more effective overload
   accepting a character"
  Fix: Use char literals rather than string literals
2. performance-for-range-copy
  "warning: loop variable is copied but only used as const reference;
   consider making it a const reference"
  Fix: Use const & for some locations of auto
3. performance-implicit-cast-in-loop
  "warning: the type of the loop variable '$VAR' is different from
   the one returned by the iterator and generates an implicit cast;
   you can either change the type to the correct one ('$TYPE' but
   'const auto&' is always an option) or remove the reference to make
   it explicit that you are creating a new value"
  Fix: Use the right type or const auto&
4. performance-inefficient-vector-operation
  "warning: 'push_back' is called inside a loop; consider pre-allocating
   the vector capacity before the loop"
  Fix: Call reserve() on the vector before the loop
5. performance-type-promotion-in-math-fn - not encountered in our code

This disables a few performance checks temporarily to keep the
change a reasonable size.

Testing:
 - Ran bin/run_clang_tidy.sh with the new checks
 - Ran GVO

Change-Id: I3d5dfe04ffb4ec6f156e268c31a356651410ce91
Reviewed-on: http://gerrit.cloudera.org:8080/20387
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Reviewed-by: Michael Smith <michael.smith@cloudera.com>


Commit f563cce6b8eed4519772af06d89edc6e374839d3 in impala's branch refs/heads/branch-4.3.0 from Joe McDonnell
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=f563cce6b ]

IMPALA-12390 (part 1): Enable some clang-tidy performance related checks

This enables several Clang Tidy performance checks and fixes
the flagged code locations. The specific checks enabled are:
1. performance-faster-string-find
  "warning: 'find' called with a string literal consisting of a
   single character; consider using the more effective overload
   accepting a character"
  Fix: Use char literals rather than string literals
2. performance-for-range-copy
  "warning: loop variable is copied but only used as const reference;
   consider making it a const reference"
  Fix: Use const & for some locations of auto
3. performance-implicit-cast-in-loop
  "warning: the type of the loop variable '$VAR' is different from
   the one returned by the iterator and generates an implicit cast;
   you can either change the type to the correct one ('$TYPE' but
   'const auto&' is always an option) or remove the reference to make
   it explicit that you are creating a new value"
  Fix: Use the right type or const auto&
4. performance-inefficient-vector-operation
  "warning: 'push_back' is called inside a loop; consider pre-allocating
   the vector capacity before the loop"
  Fix: Call reserve() on the vector before the loop
5. performance-type-promotion-in-math-fn - not encountered in our code

This disables a few performance checks temporarily to keep the
change a reasonable size.

Testing:
 - Ran bin/run_clang_tidy.sh with the new checks
 - Ran GVO

Change-Id: I3d5dfe04ffb4ec6f156e268c31a356651410ce91
Reviewed-on: http://gerrit.cloudera.org:8080/20387
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Reviewed-by: Michael Smith <michael.smith@cloudera.com>


Is there further work we need to get in for the 4.3.0 release? I'm preparing a release candidate this week.

There will be a couple more changes for this JIRA, but they are not critical for a specific release.

Commit 3614a6a776819a1e918ce7fe833cd9e916d6002a in impala's branch refs/heads/master from gaurav1086
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=3614a6a77 ]

IMPALA-12390 (part 2): Enable some clang-tidy performance related checks

This enables the clang tidy performance check:
performance-inefficient-string-concatenation
"warning: string concatenation results in allocation of unnecessary
temporary strings"
Fix: Use StrCat() to concatenate multiple strings

Testing:
 - Ran bin/run_clang_tidy.sh with the new checks
 - Ran GVO

Change-Id: Ibad8bd0f12aab92ad874f5a6b9ec922dce7f3190
Reviewed-on: http://gerrit.cloudera.org:8080/20445
Reviewed-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Commit 4d15558b5eaa69e872917c8bbf69dc1dc2146bc5 in impala's branch refs/heads/master from Michael Smith
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=4d15558b5 ]

IMPALA-12390 (part3): Enable unnecessary-copy-initialization

Enables the clang-tidy performance-unnecessary-copy-initialization check
and fixes any issues found with run_clang_tidy.sh.

Change-Id: I217df2598b21551fe21099c2caa5a39865010c20
Reviewed-on: http://gerrit.cloudera.org:8080/20492
Reviewed-by: Joe McDonnell <joemcdonnell@cloudera.com>
Tested-by: Michael Smith <michael.smith@cloudera.com>


This will mostly be addressed in the release after 4.3.0, so removing that version.

