[~mjacobs], feel free to reassign.

I'm actually not sure why this doesn't fail more frequently. It looks like this test was written when the sleep(1000) was getting evaluated during execution, but now it gets evaluated by the FE. I'm not sure when that changed, and haven't dug through git logs yet to track it down. My guess is that this query and maybe some others that run in the test no longer make sense given the sleeps are getting evaluated by the FE.

The test queries are:
{code}
  # These queries are chosen to have different plan roots in the coordinator's fragment.
  # The WHERE clause is carefully crafted to control when result rows become available at
  # the coordinator. The selected partition of 'functional.alltypestiny' has exactly
  # two rows stored in a single file. In the scan node we sleep one second for each
  # result row. Therefore, result rows can become available no earlier that after 2s.
  TABLE = 'functional.alltypestiny'
  WHERE_CLAUSE = 'where month = 1 and bool_col = sleep(1000)'
  QUERIES = ['select * from %s %s' % (TABLE, WHERE_CLAUSE),
             'select * from %s %s order by id limit 1' % (TABLE, WHERE_CLAUSE),
             'select * from %s %s order by id' % (TABLE, WHERE_CLAUSE),
             'select count(*) from %s %s' % (TABLE, WHERE_CLAUSE),
             'select 1 union all select count(*) from %s %s' % (TABLE, WHERE_CLAUSE),
             'select count(*) over () from %s %s' % (TABLE, WHERE_CLAUSE)]
{code}
We need to look at these queries and decide (a) what each of them is specifically testing and (b) if they need to be updated/removed.

One simple thought was to make the sleep reference the row so that it has to be evaluated at runtime. E.g. this wonky expression results in both rows (where id will be 0 and 1) sleeping for 1 second:
{code}
select id from functional.alltypestiny where month = 1 and bool_col = sleep (cast(ceil((id+0.1)/10) * 1000 as int))
{code}

Though this oddly doesn't seem to result in the sleeping happening before "Rows available" as I expected:
{code}
    Query Timeline: 2s016ms
       - Query submitted: 78.210us (78.210us)
       - Planning finished: 7.664ms (7.586ms)
       - Submit for admission: 8.066ms (401.521us)
       - Completed admission: 8.120ms (54.071us)
       - Ready to start on 1 backends: 8.312ms (192.728us)
       - All 1 execution backends (1 fragment instances) started: 8.993ms (680.450us)
       - Rows available: 9.858ms (865.233us)
       - First row fetched: 10.362ms (504.107us)
       - Unregister query: 2s015ms (2s004ms)
{code}

I'm not sure why rows became available immediately. (Empty row batch?) Either way, this seems to be a violation of the original issue that the test was written as a regression test for (IMPALA-924).

[~mjacobs] what makes you think sleep() is evaluated in the FE? That function is recognized as non-constant and not evaluated in the FE.

I'm thinking this issue might be IMPALA-4987

Hm, I thought that Impala previously wasn't capable of identifying such functions in predicates and just evaluated them in the FE by mistake. I may have made that up then.

So how about I close this as a dupe of IMPALA-4987 and update that to be more general, since this failure was observed on a gerrit-verify job IIRC.

