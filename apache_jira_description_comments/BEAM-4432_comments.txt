We already have a way to generate synthetic data in the code base in Nexmark, have you envisioned refactoring the current synthetic generator to benefit of your ongoing work? Notice that Nexmark's generator has a ton of interesting knobs + an UnboundedSource too.

I just quickly checked the PR but have you considered parametrizing the generation in a Supplier style like kind of fthing?

Hi Ismael!
I understand your concerns. The code for these sources has specific knobs that will allow us to do specific testing of different scenarios. As an example, we're looking to study GroupByKey performance in different runners (specially for batch), and this requires testing a uniform distribution, but also testing a distribution that is heavily weighted towards a few keys (Zipf, one-key). We'll also work on tests for Combine, CoGroupByKey, ParDo (to understand per-fused-step overhead), etc.

Later on, as we decide to test dynamic rebalancing, we may want to have steps that produce artifical cpu-based or sleep-based delays (`SyntheticStep`), to see how runners react to different unexpected per-element processing delays.

I'd like to go forward with this, and focus next on adding a robust suite of perf tests. WDYT?

