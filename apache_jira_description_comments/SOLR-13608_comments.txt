Commit 38a9afe0ce65a5f9970da9ec4953a399b2ea5101 in lucene-solr's branch refs/heads/jira/SOLR-13608 from Cao Manh Dat
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=38a9afe ]

SOLR-13608: Incremental backup for Solr


What remains to be done for this, [~caomanhdat]? Is it ready for us to start reviewing?

I'm going to take on this issue as a part of the [SIP-12|https://cwiki.apache.org/confluence/display/SOLR/SIP-12%3A+Incremental+Backup+and+Restore] work.  This changes some of the specifics that Dat wrote up in the description above to align better with the agreed-upon SIP-12 design.  I'll correct these shortly.

As written, SIP-12 proposes that support for creating non-incremental backups be removed at the same time as incremental-backup support is added i.e. there is no overlap where creating both formats are supported.  (Restoring the old format would still be supported through the next major release line.)

In spirit this is still what I'd like to do, but there's a testing issue with this approach - if you want to test out restoring a nonincremental backup, you need to be able to _create_ one first.  We could get around this by building a nonincremental backup offline and committing it to the repo, but this would be pretty hacky.  I could also restructure the nonincremental backup code into a utility that only test code can access.  But this would involve a lot of refactoring and would lose some fidelity in terms of testing (i.e. the code creating nonincremental backups in our tests wouldn't be the same code that created those backups for users).

So instead of removing support entirely for nonincremental backup creation, I'm leaning towards leaving it in until Solr drops support for restoring the old format entirely.  The incremental backup would be the default and the only one advertised in the ref-guide, but tests (and persistent users) could create snapshot-style backups by providing an undocumented flag parameter to the backup API.

I've uploaded a [PR|https://github.com/apache/lucene-solr/pull/2250] that's ready for review.

Of course, there's still a few loose ends for me to polish up, but on the whole this is pretty close to being ready to go, which is exciting since it's got the bulk of the SIP-12 functionality.

Commit 33d16b570c7630fde784552193ad495b63abd3e3 in lucene-solr's branch refs/heads/master from Jason Gerlowski
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=33d16b5 ]

SOLR-13608: Incremental backup file format (#2250)

This commit introduces a new way for Solr to do backups (with a new
underlying file structure).  This new "incremental" backup process
improves over the existing backup mechanism in several ways:

- multiple backups "points" can now be stored at a given backup
  location/name, allowing users to choose which point in time they want
  to restore
- subsequent backups skip over uploading files that were uploaded by
  previous backups, saving time and network time.
- files are checksumed as they're uploaded, ensuring that corrupted
  indices aren't persisted and accidentally restored later.

Incremental backups are now the default, and traditional backups
should now be considered 'deprecated' but can still be created by
passing an `incremental=false` parameter on backup requests.

Commit 7fd64aabcccf4f092567dc31814a9e2e4a5d8729 in lucene-solr's branch refs/heads/master from Jason Gerlowski
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=7fd64aa ]

CHANGES.txt entry for SOLR-13608


Commit aea29464f120feb6f5c3c9e3e7e6c5374770cccd in lucene-solr's branch refs/heads/master from Jason Gerlowski
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=aea2946 ]

SOLR-13608: Fix incremental-backup test failures

The initial incremental-backup commit introduced several test failures
on Windows test runs that I neglected to catch before committing.  Most
of these failures were the result of bad 'location' path handling in the
test logic itself, though there were a few tweaks made to Solr code
itself to better handle Windows paths as well.


Commit fd1af8f524d5d459188d755bdf8eb02b0e88f31f in lucene-solr's branch refs/heads/branch_8x from Jason Gerlowski
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=fd1af8f ]

SOLR-13608: Incremental backup file format

This commit introduces a new way for Solr to do backups (with a new
underlying file structure).  This new "incremental" backup process
improves over the existing backup mechanism in several ways:

- multiple backups "points" can now be stored at a given backup
  location/name, allowing users to choose which point in time they want
  to restore
- subsequent backups skip over uploading files that were uploaded by
  previous backups, saving time and network time.
- files are checksumed as they're uploaded, ensuring that corrupted
  indices aren't persisted and accidentally restored later.

Incremental backups are now the default, and traditional backups
should now be considered 'deprecated' but can still be created by
passing an `incremental=false` parameter on backup requests.

Commit f993c392f10eb8b145ebac5b103217308fa57fda in lucene-solr's branch refs/heads/master from Jason Gerlowski
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=f993c39 ]

SOLR-15101: Add list/delete APIs for incremental backups (#2336)

SOLR-13608 introduces a new "incremental" backup format, which allows
storage of multiple backup "points" in the same location. This
development introduces a need for APIs to manage these potentially
plural backups.

This commit introduces /admin/collections?action=LISTBACKUPS and
/admin/collections?action=DELETEBACKUP to handle these backups.

I merged this to master and branch_8x and the tests (after a little flakiness that needed sorted out) appear to be stable.

Going to close this out.

Commit 136408b03187c41b28b97e5118e4f945f1526a9e in lucene-solr's branch refs/heads/branch_8x from Jason Gerlowski
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=136408b ]

SOLR-15101: Add list/delete APIs for incremental backups (#2379)

SOLR-13608 introduces a new "incremental" backup format, which allows
storage of multiple backup "points" in the same location. This
development introduces a need for APIs to manage these potentially
plural backups.

This commit introduces /admin/collections?action=LISTBACKUPS and
/admin/collections?action=DELETEBACKUP to handle these backups.

Commit 86d2672e72db7b856aa0034a7ddf1f5cda9a501c in lucene-solr's branch refs/heads/branch_8x from Jason Gerlowski
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=86d2672 ]

SOLR-13608: Ensure backup tests avoid SimpleText codec


Commit 5fd420e00884bc2e4c8af066540edae79a7fea90 in solr's branch refs/heads/main from Jason Gerlowski
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=5fd420e ]

SOLR-13608: Ensure backup tests avoid SimpleText codec


Since committing the bulk of this work, there has been a bit of ongoing flakiness in the backup/restore tests that I've been digging into.  There are at least two types of failures I've run into.

The first is a ClassCastException in the {{TrackingBackupRepository}} test utility.  I haven't had any luck understanding or reproducing this yet.  I've noticed it mostly on 'main'.

The second failure is characterized by a CorruptIndexException thrown by the backup code that checks copied files for corruption.  This problem I understand and think I've fixed with the commits in the preceding 2 comments.  In short: backups compute a checksum of each file as it's being copied, and compares that checksum against an "expected" value that Lucene puts in the footer of most files.  The Solr backup code uses Lucene's {{CodecUtil}} to extract this expected checksum value, and CodecUtil assumes a particular footer format in each index file.  But it turns out that Solr's test randomization sometimes chooses SimpleTextCodec - an instructional codec that doesn't use the standard footer format.  CodecUtil isn't smart enough to recognize this, so {{CodecUtil.validateFooter}} throws a CorruptIndexException when given an inputstream for a SimpleTextCodec file.

I've "handled" this in the commits above by suppressing this codec in Solr's backup tests, which seemed acceptable since SimpleTextCodec doesn't really aim to be a fully compatible codec and there's already precedent for suppressing it based on that.  It'd be awesome down the road if CodecUtil was smart enough to detect these oddball codecs that don't contain the standard footer or if Lucene had some more general API to accomplish the same task, but I'm not going to take that on here.

I'm still working on the other ClassCast failure that occurs sporadically in various backup tests.  Hopefully this flakiness can be all knocked out soon!

Commit 06fad780dad915ff02008c55e12624bf882672af in solr's branch refs/heads/main from Jason Gerlowski
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=06fad78 ]

SOLR-13608: Sync on TrackingBackupRepo NL changes (#59)

BackupRepositoryFactory has a special case in its 'newInstance' method.
For 'TrackingBackupRepository' instances, BRF will modify a NamedList
representing the TBF config - adding references to the
SolrResourceLoader and to BRF itself.

In isolation this is innocuous, but becomes a problem when
BRF.newInstance is called concurrently from different threads.  Threads
can race to set these NamedList keys, corrupting the NamedList in the
process.  (i.e. NamedList values ended up in 'key' indices, and vice
versa)

This commit adds synchronization to this NL initialization, to ensure
that the NL values are only set by a single thread.

Commit a557f071ca405948d835c3f7b0ed8a05cfde0625 in lucene-solr's branch refs/heads/branch_8x from Jason Gerlowski
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=a557f07 ]

SOLR-13608: Sync on TrackingBackupRepo NL changes

BackupRepositoryFactory has a special case in its 'newInstance' method.
For 'TrackingBackupRepository' instances, BRF will modify a NamedList
representing the TBF config - adding references to the
SolrResourceLoader and to BRF itself.

In isolation this is innocuous, but becomes a problem when
BRF.newInstance is called concurrently from different threads. Threads
can race to set these NamedList keys, corrupting the NamedList in the
process.  (i.e. NamedList vals ended up in 'key' indices, and vice versa)

This commit adds synchronization to this NL initialization, to ensure
that the NL values are only set by a single thread.


Closing after the 8.9.0 release

