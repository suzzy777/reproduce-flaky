Stack
{code}
[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 67.384 s <<< FAILURE! - in org.apache.hadoop.fs.s3a.commit.staging.integration.ITestDirectoryCommitMRJob[ERROR] testMRJob(org.apache.hadoop.fs.s3a.commit.staging.integration.ITestDirectoryCommitMRJob) Time elapsed: 40.977 s <<< ERROR! java.io.FileNotFoundException: Path s3a://cloudera-dev-gabor-ireland/fork-0007/test/DELAY_LISTING_ME/testMRJob is recorded as deleted by S3Guard
 at org.apache.hadoop.fs.s3a.S3AFileSystem.innerGetFileStatus(S3AFileSystem.java:2369)
 at org.apache.hadoop.fs.s3a.S3AFileSystem.getFileStatus(S3AFileSystem.java:2343)
 at org.apache.hadoop.fs.contract.ContractTestUtils.assertIsDirectory(ContractTestUtils.java:559)
 at org.apache.hadoop.fs.contract.AbstractFSContractTestBase.assertIsDirectory(AbstractFSContractTestBase.java:327)
 at org.apache.hadoop.fs.s3a.commit.AbstractITCommitMRJob.testMRJob(AbstractITCommitMRJob.java:133)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:498)
 at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
 at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
 at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
 at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
 at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
 at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
 at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48)
 at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
 at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
 at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
 at java.util.concurrent.FutureTask.run(FutureTask.java:266)
 at java.lang.Thread.run(Thread.java:748)

{code}

could be more fundamental as in "I'm not sure the committers are correctly telling S3Guard about parent directories".

After each PUT is manifest, we call finishedWrite() , but that seems to do more about purging spurious deleted files, rather than adding dir entries into S3Guard. Provided mkdirs() is called 

Proposed: build a list of all directories which need to exist as part of a job commit, and only create those entries

The other strategy is for initiateMultipartUpload() to mkdir on the parent. That's a bit more expensive though. Better to not worry about whether it exists and do all this stuff during job commit only

I think this failure is not intermittent, It's happening all the time for me if I run parallel tests. This is actually a returning error when running the tests for HADOOP-16210, so I will refer to this ticket that we know about this and this is not something that the guava update causes.

FIx HADOOP-16184 and provided this is a non-auth test run, this will act as regression test to make sure the fix works in real situations

suspecting a race condition in >1 test. If we isolate paths this should go away

Working on this. Finally got a log. And (currently) /tmp/hadoop-yarn/staging/ doesn't exist.

Assumption: all the miniYarnClusters are sharing the same /tmp staging dir, so that when one is shutdown while another is running, the second one fails as all its staging files go away -in which case yes, it is a race condition. At least this time.

{code}
(TaskAttemptListenerImpl.java:fatalError(288)) - Task: attempt_1563401248365_0003_m_000000_0 - exited : java.io.FileNotFoundException: File file:/tmp/hadoop-yarn/staging/stevel/.staging/job_1563401248365_0003/job.split does not exist
	at org.apache.hadoop.fs.RawLocalFileSystem.deprecatedGetFileStatus(RawLocalFileSystem.java:666)
	at org.apache.hadoop.fs.RawLocalFileSystem.getFileLinkStatusInternal(RawLocalFileSystem.java:987)
	at org.apache.hadoop.fs.RawLocalFileSystem.getFileStatus(RawLocalFileSystem.java:656)
	at org.apache.hadoop.fs.FilterFileSystem.getFileStatus(FilterFileSystem.java:456)
	at org.apache.hadoop.fs.ChecksumFileSystem$ChecksumFSInputChecker.<init>(ChecksumFileSystem.java:153)
	at org.apache.hadoop.fs.ChecksumFileSystem.open(ChecksumFileSystem.java:354)
	at org.apache.hadoop.fs.FileSystem.open(FileSystem.java:917)
	at org.apache.hadoop.mapred.MapTask.getSplitDetails(MapTask.java:362)
	at org.apache.hadoop.mapred.MapTask.runNewMapper(MapTask.java:766)
	at org.apache.hadoop.mapred.MapTask.run(MapTask.java:347)
	at org.apache.hadoop.mapred.YarnChild$2.run(YarnChild.java:178)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:422)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1891)
	at org.apache.hadoop.mapred.YarnChild.main(YarnChild.java:172)
{code}

Staging problem is fixed by MAPREDUCE-6521, and as it only seems to surface when the cluster FS is local (unconfirmed) then its not likely to be the cause of the previous failures (when HDFS was used as the cluster FS)

And, given it seems to be a race condition, doesn't explain why we'd see failures during sequential test runs.

Seeing several MR job failures when running tests on HADOOP-16445.

{code}
[ERROR]   ITestMagicCommitMRJob>AbstractITCommitMRJob.testMRJob:146->AbstractFSContractTestBase.assertIsDirectory:327 » FileNotFound
[ERROR]   ITestDirectoryCommitMRJob>AbstractITCommitMRJob.testMRJob:146->AbstractFSContractTestBase.assertIsDirectory:327 » FileNotFound
[ERROR]   ITestPartitionCommitMRJob>AbstractITCommitMRJob.testMRJob:146->AbstractFSContractTestBase.assertIsDirectory:327 » FileNotFound
[ERROR]   ITestStagingCommitMRJob>AbstractITCommitMRJob.testMRJob:146->AbstractFSContractTestBase.assertIsDirectory:327 » FileNotFound
{code}
always fail when run with -Ds3guard -Ddynamo -Dauth (These fail when starting with a clean DDB table as well)

The test setup seems broken to me.
* Cluster set up happens with createCluster(new JobConf())
* After this, AbstractITCommitMRJob creates the MRJob with Job.getInstance(getClusterBinding().getConf() ... -> This will end up using the previously created JobConf
* JobConf will only read core-site.xml ... so the command line parameters -Ds3guard, -Ddynamo -Dauth don't make a difference.

Adding fs.s3a.metadatastore.authoritative=true, fs.s3a.metadatastore.impl=org.apache.hadoop.fs.s3a.s3guard.DynamoDBMetadataStore in auth-keys.xml or core-site.xml fixed all the test failures for me. (With the additions, the JobConf used by the cluster has these configs, and the tests do what they're supposed to).

That isn't the correct fix though. Making sure the test configuration is used to create the JobConf for the cluster and jobs would allow the test properties to work.

That said, I did see 3 empty (and marked as deleted) files - part_0000, part_0001, _SUCCESS in the s3guard table. I suspect this is a result of the committer trying to access a file on the client, getting a cached FileSystem instance (same UGI), and the getFileStatus (maybe) creates these S3Guard DDB entries?

Also, to run the tests in parallel - the jobs need to start using a different directory name. Currently, all of them use testMRJob (The method name in the common class that all tests inherit from).
The issue with the local dir conflict is a MR configuration afaik (Likely the MR tmp dir config property). YARN clusters should already be able to run in parallel (different ports, random dir names, etc)
I'd also be careful trying to run too many of these in parallel, given the amount of memory they consume. Maybe a different parallelism flag for any tests running on a cluster?
How about simplifying the code and letting the tests reside in the same class, which makes the code easier to read and allows sharing a cluster more easily. Haven't seen the WIP patch - but sharing a cluster across different tests, which may or may not trigger at the same time seems like it may cause problems.
The tests also use a 1 s sleep for the InconsistentFS to get into a consistent state. That can lead to flakiness in the tests. A higher sleep, unless InconsistentFS can be set up with an actual waitForConsistency method which is not time based.

-Attached a simple patch which fixes just the test failures. Doesn't do anything with parallelism, changing dir names to be different across tests etc. Can submit this in a separate jira, if this one is being used for parallelizing the tests.-
Switched to https://issues.apache.org/jira/browse/HADOOP-16591

Final patch replaces the committer-specific terasort and MR test jobs with parameterization
of the (now single tests) and use of file:// over hdfs:// as the cluster FS.

The parameterization ensures that only one of the specific committer tests
run at a time -overloads of the test machines are less likely, and so the
suites can be pulled back into the parallel phase.

There's also more detailed validation of the stage outputs of the terasorting;
if one test fails the rest are all skipped. This and the fact that job
output is stored under target/yarn-${timestamp} means failures should
be more debuggable.

 

We also have the s3guard  operations log enabled; on guarded runs this tracks all PUT/DELETE/TOMBSTONE calls made of a store, so acts as the log of what changes were made there. If we see intermittent issues here again (And after the HADOOP-16570 changes) then we are better positioned to understand the failures

SUCCESS: Integrated in Jenkins build Hadoop-trunk-Commit #17474 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/17474/])
HADOOP-16207 Improved S3A MR tests. (stevel: rev f44abc3e11676579bdea94fce045d081ae38e6c3)
* (delete) hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/commit/AbstractITCommitMRJob.java
* (delete) hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/commit/staging/integration/ITestPartitionCommitMRJob.java
* (delete) hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/commit/staging/integration/ITestStagingCommitMRJobBadDest.java
* (add) hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/commit/terasort/ITestTerasortOnS3A.java
* (delete) hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/commit/terasort/ITestTerasortMagicCommitter.java
* (edit) hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/commit/AbstractYarnClusterITest.java
* (delete) hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/commit/terasort/ITestTerasortDirectoryCommitter.java
* (delete) hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/commit/magic/ITestMagicCommitMRJob.java
* (delete) hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/commit/staging/integration/ITestDirectoryCommitMRJob.java
* (edit) hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/commit/staging/StagingCommitter.java
* (edit) hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/commit/AbstractCommitITest.java
* (edit) hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/commit/staging/StagingCommitterConstants.java
* (add) hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/commit/integration/ITestS3ACommitterMRJob.java
* (delete) hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/commit/terasort/AbstractCommitTerasortIT.java
* (edit) hadoop-tools/hadoop-aws/pom.xml
* (edit) hadoop-tools/hadoop-aws/src/test/resources/log4j.properties
* (delete) hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/commit/staging/integration/ITestStagingCommitMRJob.java


