Added segfault log  [^MasterAuthorizerTest_FilterStateEndpoint_CMake_mesos-ec2-centos-7.txt]  for {{MasterAuthorizerTest/1.FilterStateEndpoint}}. This crash happened after launching a test executor and attached its virtual path.

In all 4 observed crashes, the following log line also appeared right after the abort. Not sure if this is related:
{noformat}
W0503 06:31:48.019735 26587 process.cpp:2824] Attempted to spawn already running process version@172.16.10.183:34875
{noformat}

Updated the file names to reflect the configurations we used in our internal CI:
{noformat}
MasterAPITest.Subscribe: FLAG=SSL,label=mesos-ec2-centos-7
MasterTest.UnacknowledgedTerminalTask: FLAG=CMake,label=mesos-ec2-centos-7
ReconciliationTest.ImplicitTerminalTask: FLAG=CMake,label=mesos-ec2-centos-7
MasterAuthorizerTest/1.FilterStateEndpoint: FLAG=CMake,label=mesos-ec2-centos-7
{noformat}
Where the build configuration for {{SSL}} is:
{noformat}
--enable-install-module-dependencies
--enable-optimize
--enable-libevent
--enable-ssl
--disable-silent-rules
{noformat}
And the build configuration for {{CMake}} is just the default CMake build.

A likely culprit here seems to be {{TestContainerizer}} which mutates the shared and global process environment, long after e.g., other actors have spawned.

{code}
      // We need to save the original set of environment variables so we
      // can reset the environment after calling 'driver->start()' below.
      hashmap<string, string> original = os::environment();

      foreachpair (const string& name, const string& variable, environment) {
        os::setenv(name, variable);
      }

      // TODO(benh): Can this be removed and done exclusively in the
      // 'executorEnvironment()' function? There are other places in the
      // code where we do this as well and it's likely we can do this once
      // in 'executorEnvironment()'.
      foreach (const Environment::Variable& variable,
               containerConfig.executor_info()
                 .command().environment().variables()) {
        os::setenv(variable.name(), variable.value());
      }

      os::setenv("MESOS_LOCAL", "1");

      const Owned<ExecutorData>& executorData =
        executors.at(containerConfig.executor_info().executor_id());

      if (executorData->executor != nullptr) {
        executorData->driver = Owned<MesosExecutorDriver>(
            new MesosExecutorDriver(executorData->executor));
        executorData->driver->start();
      } else {
        shared_ptr<v1::MockHTTPExecutor> executor =
          executorData->v1ExecutorMock;
        executorData->v1Library = Owned<v1::executor::TestMesos>(
          new v1::executor::TestMesos(ContentType::PROTOBUF, executor));
      }

      os::unsetenv("MESOS_LOCAL");

      // Unset the environment variables we set by resetting them to their
      // original values and also removing any that were not part of the
      // original environment.
      foreachpair (const string& name, const string& value, original) {
        os::setenv(name, value);
      }

      foreachkey (const string& name, environment) {
        if (!original.contains(name)) {
          os::unsetenv(name);
        }
      }
{code}

Linking MESOS-3475 which should address this.

This is supposed to be resolved by MESOS-3475. Please reopen if it is not the case.

