You're right about the issue, but your proposed fix doesn't work.

As you noted, we currently assume == will yield the right result, and may not 
operate correctly on DOMs which don't guarantee that behavior. Known limitation.

equals() is not defined by the DOM API, so we can't rely on it. Even if it did 
work on DOM nodes, it really should compare their semantic content, not their 
object identity. In other words, given:
   <a><b>c</b><b>c</b></a>
the two <b> elements should report true when compared with equals(), which is 
definitely not a helpful when we're trying to establish node identity.

The == operator comes closer to being the correct semantic. It yields the 
correct answer in many DOMs, but not in all. Our own DOM proxy for DTM is one 
counterexample, so we're very aware of the issue.


The DOM Working Group is introducing the isSameNode() test in DOM Level 3 
precisely to address this issue; they recognized that this was an oversight in 
the DOM's design and are correcting it. The problem is, that correction is still 
only in a Working Draft version of the DOM, and even after it's released there 
will be a lot of DOMs which don't honor it.


It might make sense for us to implement a wrapper which uses isSameNode() if the 
DOM implementation in question supports it, and use == as a fallback when it 
doesn't -- on the assumption that if a DOM hasn't made the effort to support 
isSameNode, it must have mae the same assumption. Setting up that dual-pathed 
wrapper means dealing with Java reflection, which may have some performance 
implications.


(Footnote: There is a non-reflection solution involving trying to invoke the 
isSameNode method, failing, and using == thereafter. But that would require that 
we compile against DOM Level 3, and I'm not willing to have a compile-time 
requirement for a prerelease version of the DOM API unless we absolutely must.)

The thing is that with "==" xalan can not be used with DOM implementations which
do not comply.  This is a big issue, especially with Java 1.4 comming with xalan
integrated right in rt.jar. Maybe xalan should provide ability to subclass
DOM2DTM class to make it possible to adjust it's behaviour? Or even better to
provide version of DOMSource() constructor which accept some sort of comparator
object? 
 Using reflection to detect the fact that isSameNode is implemented is not a bad
idea.  It could be done once during first invocation so performance impact could
be minimal. And what about Node.isSupported()?  Could it be used to detect the
fact that isSameNode implemented?

>The thing is that with "==" xalan can not be used with DOM implementations
> which do not comply. 

We all agree on this. 

>And what about Node.isSupported()?  Could it be used to detect the
>fact that isSameNode implemented?

Test for DOM Core 3.0 and use isSameNode if that's available, else use == as the 
best available alternative.  Good suggestion, arguably better than reflection. 
Level 1 DOMs won't support isSupported() either, but we aren't currently 
accepting Level 1 DOMs as input anyway so that's not a new restriction.

Current plan: revisit when we look at architectural issues related to DOM L3.

I fail to see why equals() should compare semantic content.  In X-Hive/DB equals() compares node identity, == is not useful as the actual object instances are only proxies to the nodes stored in the database.

Anyway, as DOM Level 3 is now a W3C recommendation, this can now be fixed using isSameNode (although as noted it has to be called using reflection to keep supporting older DOMs).

See past discussion of this issue.

There is *no* portable way to test Level 1 DOM nodes for identity. However, most DOM1 implementations do use a single object per node, and thus == works as an identity test for those.

.equals(), semanticaly, ought to compare the *value* of two objects, not their identity. The concept of node value is not as clear as it should be -- note that an Element node officially has no node value -- but if it worked at all, node1.equals(node2) ought to mean the two subtrees were equivalent, not identitical -- so if anything it's inferior to == for our purposes.

The *right* answer, as discussed in the past, is to test the DOM in question to see if it implements the DOM Level 3 isSameNode() method. If so, we should use this method to test node identity. If not, see above; there is no good portable solution and we either need to find some way of recognizing and handling specific implementations or fall back on == as a last resort.

(Note that isSameNode() is *different* from isEqualNode(), also introduced in DOM3; that difference tracks the distinction I made above about identity versus equality.)

Yes, it's ugly. DOM1, and DOM2, should never have gone out the door without the isSameNode() test. All I can offer in our defense is that we honestly didn't realize this was an issue until someone (myself, in fact) started creating a DOM where node identity was *not* isomorphic with object identity.

That's the downside of developing in web-years; we all get to use the stuff sooner, but sometimes that's before it's really finished, and we have to deal with the fact that early versions may have gaps. Oh Well.

-- Joe Kesselman, DOM Working Group Alumnus

This is getting a bit off-topic, but I do not agree that equals() ought to compare the values of the objects.

For instance, I have frequently created a java.util.HashMap holding nodes where the desired equality was node identity.  But I have never needed a HashMap that compared node values.  So at least for me an equals() comparing node identity is much more useful.  (Yes, I realize this is not portable over DOM implementations.)

On a more theoretical line of reasoning, two nodes with the same value (i.e, isEqualNode() is true) are not necessarily "semantically equal".  They will usually have different parent nodes, sometimes different owner documents, will return different results from compareDocumentPosition(), etc.


