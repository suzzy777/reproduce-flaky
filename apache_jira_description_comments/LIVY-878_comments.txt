[~tinujose] you could try replacing the log4j jars in your deploy with [https://reload4j.qos.ch/]

Or you can replace the log4j jars in your deploy with log4j-1.2-api (a bit more complicated to set up - see https://logging.apache.org/log4j/2.x/manual/migration.html)

Due to the pending 0.8.0 release and reduced scope to dependency upgrades and security fixes as the first release by a renewed community, this issue has been moved to the 0.9.0 release as part of a bulk update. If you feel this is moved out inappropriately, feel free to provide justification and reset the Fix Version to 0.8.0.

Pulling back in to 0.8.0 per CVE checks. See LIVY-900

[~dacort] - do you have a sense of level of effort for this?

Is it something that we should consider breaking into separate tasks that others can help with, by any chance?

[~lmccay] Probably moderate level of effort. It's mostly just making the fixes, re-running dependency check, seeing if there are other compile-time inclusions of log4j. The time consuming part is figuring out how log4j is getting pulled in for some of the modules and if it's actually necessary or the can be excluded. I'm not familiar enough with the the project yet to make those calls quickly. :)

I still have the following modules to figure out based on a dependency check run on [this pr|https://github.com/apache/incubator-livy/pull/381]. 

*  livy-integration-test:compile
*  livy-coverage-report:compile
*  livy-assembly:compile
*  livy-server:compile

Additional thoughts on the approach for the current PR. I'd prefer not to do a wholesale upgrade to log4jv2 for the next release, so that leaves a couple options that I've been able to find. 

* [log4j 1.2 bridge|https://logging.apache.org/log4j/2.x/log4j-1.2-api/index.html] - A temporary solution to use Log4j 2 with minor API differences
* [reload4j|https://reload4j.qos.ch/] - A third-party (but written by the author of log4j 1) dropin replacement for log4j version 1.2.17.

It appears reload4j was built for folks to quickly and easily replace log4j in their applications. While still maintained, I chose the bridge route for the PR as we have the time to implement it and can then do a larger v2 upgrade later.

[~dacort] - this makes sense to me as well. Thank you for the insights!

I'd like to make sure others in the community (especially those that have had to address this in internal forks) have a chance to consider it and weigh in on the approach. Keeping in mind that this is an 0.8.0 release specific decision and as you said a later upgrade to v2 should still be considered. I believe there are some compatibility issues with trying to do this in a minor release.

[~irashid] ,  [~ggal] - FYI ^^^

In internal projects, we have replaced log4j1.x references with reload4j in pom files however we ended up doing a lot of exclusions because log4j1.x was still coming as a transient dependency (it wasn't pretty to say the least). Most of the Apache projects had not moved to log4j2 (ex: hadoop, zookeeper, kafka etc) last i checked so this is going to be a pain to manage for some time to come. Few additional datapoints to consider from other projects:
 # zookeeper community decided to suppress the owasp checker because SocketServer is not used. 
 # There were efforts on moving multiple open source projects to log4j2.x but they have been going on for several months and in worst case multiple years. Few listed below:

* [ZOOKEEPER-3677] owasp checker failing for - CVE-2019-17571 Apache Log4j 1.2 deserialization of untrusted data in SocketServer
* [ZOOKEEPER-2342] Migrate to Log4J 2. - ASF JIRA (apache.org) – open since Jan 2016, closed recently without resolution.
* [KAFKA-9366] Upgrade log4j to log4j2 - ASF JIRA (apache.org) – open since Jan 2020
* [HADOOP-16206] Migrate from Log4j1 to Log4j2 - ASF JIRA (apache.org) – open since Mar 2019
* [ZEPPELIN-3527] Upgrade log4j to log4j2 - ASF JIRA (apache.org) – open since Jun 2018

One hacky approach could be to replace log4j1.x jars with reload4j jars in the final generated build artifact and wait until dependencies move to log4j2 as well, thoughts?

[~ksumit] - thanks for the details. The way that I read this, it seems that we have a couple possible directions:
 # [~dacort]'s current direction which would help move Livy along upstream from internal versions and be on an official API bridge for log4j 2. This will necessarily tease out all of the transient dependencies where they will need to be excluded.
 # Another alternative would be to take the short term approach that others have done internally for the 0.8.0 release as a stop gap for this initial release with the rebooted community. It would require teasing out all of the same transient dependencies of log4j to be excluded.

[~dacort] - would the API bridge require any actual code changes? If so, simply excluding transient versions that are pulled in by other dependencies may not be sufficient?

Personally, I would like to see an approach that moves the upstream project farther along rather than just catch up with forks. This would however require little to no heavy lifting in order for this to be picked up by downstream consumers. Otherwise, it would be introducing risk.

It seems like we can probably continue down the API bridge path since it will require the same exclusions. If it turns out that we need to change it to reload4j then it should only require changing the poms to a different package and the exclusions should remain the same. Right?

I was also hinting that we could ignore this work until dependencies like zookeeper and hadoop move to log4j2 but just noticed that Spark has moved on in their recent 3.3.0 release (please see SPARK-37814). With this new datapoint, I am now thinking that eliminating log4j1.x dependency is more appropriate and will be helpful for production environments that use Spark on kubernetes or mesos. For those depending on hadoop and zookeeper, they will have to do additional work that they are already doing for those components.

Please see similar discussions and challenges the community faced for Spark in [https://github.com/apache/spark/pull/34877#issuecomment-994155205] and [https://github.com/apache/spark/pull/34895]

[~ksumit]  - okay, I see now. You were describing us ignoring it and then downstream consumers swapping out the log4j for reload4j jars?

I'd personally think that we shouldn't put out a new release that contains these vulnerabilities as the first one of the revived community. The most conservative route, IMO, would be to be on par with downstream projects now which seem to be on reload4j. Deployments with these changes are presumably in use and being tested already.

That said, if the difference between moving to reload4j and the official API bridge is trivial perhaps we go that far.

We could also target reload4j as the most conservative for 0.8.0 and follow up with an 0.8.1 that moves to the bridge.
{quote}I am now thinking that eliminating log4j1.x dependency is more appropriate and will be helpful for production environments that use Spark on kubernetes or mesos.
{quote}
Does this refer to moving to the API bridge or all the way to log4j v2?

Regarding downstreams consuming livy, are you aware of projects consuming livy as library dependency? That would be harder. I was suspecting most of the consumers would be on-prem or cloud deployments and in those cases, they would have their own custom deployment logic and might already be handling the vulnerability in some way.

That said I agree with your sentiments about not shipping with these vulnerabilities. May be we can do this in 2 phases:
1. With reload4j as drop in dependency replacement for log4j1.x
2. With log4j2 replacing reload4j.

We can avoid effort for api bridge in that case because there are few compatibility issues and it's anyways going to be temporary. Some of the work (like exclusions) will be same for the bridge as well as reload4j and will also be helpful when moving to log4j2. What do you think?

Yes for k8s and mesos deployments, I was suggesting that this vulnerability mitigation effort will be useful.

[~ksumit] - I can buy that.

[~dacort]  - what do you think about backing up to reload4j for this release then following up directly to log4j2 in a future release?

[~dacort]  - curious what your thoughts are on the above discussion.

Have you made any additional progress on PR [https://github.com/apache/incubator-livy/pull/381/files] ?

What do you think are the next steps here?

[~dacort] - have you had a chance to review the above discussion?

I'd like to nail down the approach for this release and unblock it by getting this issue resolved.

If we know which direction then we may have others that can help out.

cc. [~imranr] , [~ggal] 

I agree with [~ksumit] that in order to unblock the 0.8 release it may be better to go with reload4j for now and tackle the transition to Log4J2 in an upcoming release (when support for Spark 3.3 and above is added). My biggest concern would be compatibility with existing log4j properties files.

In our downstream Livy fork we use Spark 2 with reload4j and Spark 3.3 with log4j-1.2-api. Both are workable, but we had to replace the configuration files and fix some of the unit tests in the latter case.

The current upstream version of Livy only supports Spark 3.1 and below ([LivySparkUtils.scala|https://github.com/apache/incubator-livy/blob/45e07fec68f2b9ad1dc7ebce8db08ad8a778dddc/server/src/main/scala/org/apache/livy/utils/LivySparkUtils.scala#L44-L45]), so it seems like a safer option to stick with reload4j and the old log4j config file format.

Adding Spark 3.3+ support seems like a larger task and it may require us to move to Log4J2 anyway to prevent classpath and configuration conflicts. Please let me know your thoughts on this.

Yea, I think reload4j is a good approach to go with as well. There's more prior art there, especially as it relates to the other Apache projects. I'm going to try to tackle this today.

Awesome - thanks, [~ksumit] , [~gyogal] and [~dacort] - sounds like we have the safest path forward!

Let me know if I can help in any way.

 

Think I'm making some good progress on this. The biggest blocker for me has just been all the transitive dependencies. The versions spark-core, hadoop-common, and zookeper are all extremely out-of-date, but through an iterative process of {{mvn org.owasp:dependency-check-maven:aggregate -DskipSystemScope=true}} and {{mvn dependency:tree -Dincludes=log4j:log4j}} I think I'll have a PR open tomorrow.

Good to hear, [~dacort] !

 

New pull request open here: https://github.com/apache/incubator-livy/pull/392

I think we should merge LIVY-972 first as that has automated unit/integration test updates. https://github.com/apache/incubator-livy/pull/393

Sorry for the delay in responding here. [~dacort] - I think that if these PRs are ready to go as is that we should get them in.

There seems to be an outstanding comment on 392 about test dependencies - we can follow up for those separately.

Thoughts?

 

[https://github.com/apache/incubator-livy/pull/392] merged in! 🚀 

