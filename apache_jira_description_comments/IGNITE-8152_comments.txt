I am ready to take the IGNITE-8152 ticket to work

PR (Forbid empty sql schema name) from [Aleksei_Litsov@epam.com|mailto:Aleksei_Litsov@epam.com]

 

[~Aleksei_Litsov], the patch is not clear for me.

Disallow use empty string for schema is useful patch, but I guess the schema's name must be checked on the schema creation (see {{SchemaManager#createSchema}})

[Taras|https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tledkov-gridgain], thanks for the comments!


But if I correctly understood the current ticket, the user had the following problem:
using construction \{ new SqlFieldsQuery ("some sql"). setSchema (""); } 
the system throws an exception that "a scheme with an empty name cannot be used".

And that an empty scheme is really - just a user error, and he wanted to use the default scheme.
It is this problem that my patch solves - replacing "" to the default scheme.

Of course, I can add code that at the stage of creating the scheme(SchemaManager#createSchema) will check the name of the scheme for emptiness, 
but it seems to me it's a different task and it is probably more correct to create another ticket for this.

What do you think?

[~Aleksei_Litsov], sorry, but your changes looks harmful. You add a hidden behavior in SqlFieldsQuery. 
 # Run query with incorrect argument should lead to an error. User expects to get an error instead of using _"default"_ schema.
Empty schema usually treated as _"current"_ schema in some other DB engines, which is not the same as _"default"_ schema. _"Current"_ schema relates to a session, but you have no "session" when you start query via API.
 # Assume, user has two caches of similar structures, but for different purposes. If user run same query on both caches in a manner described below then he will got wrong results instead of error.

{code:java}
SqlFieldsQuery qry = new SqlFieldsQuery("...").setSchema("some_schema");
cache.query(qry);
qry.setSchema(" ");
cache.query(qry); // Will return results instead of error as query was started with schema "some_"schema".{code}
3. SqlFieldsQuery is Serializable. It is still possible to create SqlQueryFields with empty schema using old Ignite sources and start query on newer nodes.
Though Ignite doesn't allow old client nodes to connect to grid of newer version, but we must preserve public API compatibility while it is possible.

Let's avoid hidden behavior and either move this check to server side or throw e.g. meaningful IllegalAgrumentException and make additional check on server side.

[~amashenkov], thanks for the detailed answer. I will take a ticket for revision

PR (Forbid empty sql schema name) from [Aleksei_Litsov@epam.com|mailto:Aleksei_Litsov@epam.com]

[~tledkov-gridgain], [~amashenkov]

I corrected the code for the ticket

[~amashenkov], I corrected everything

[~Aleksei_Litsov], the patch is OK with me. Please fix minor codestyle:
1. {{H2ConnectionWrapper#connection(java.lang.String)}} empty string
2. javadoc for {{BaseSqlTest#executeFrom(java.lang.String, org.apache.ignite.Ignite, java.lang.String)}}

What about tests visa from TC Bot?

[~tledkov-gridgain], the code style has already been fixed. On TC tests passed

 

!image-2020-03-19-16-01-42-979.png|width=717,height=93!

Hi, I mean the run All status of TC.
See for example: IGNITE-12740
[TC Bot|https://mtcga.gridgain.com/]


{panel:title=Branch: [pull/7521/head] Base: [master] : Possible Blockers (1)|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1}
{color:#d04437}Cache 6{color} [[tests 0 Exit Code |https://ci.ignite.apache.org/viewLog.html?buildId=5139385]]

{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=5139431&amp;buildTypeId=IgniteTests24Java8_RunAll]

{panel:title=Branch: [pull/7521/head] Base: [master] : Possible Blockers (5)|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1}
{color:#d04437}Cache 6{color} [[tests 0 Exit Code |https://ci.ignite.apache.org/viewLog.html?buildId=5140139]]

{color:#d04437}Cache 5{color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=5140138]]
* IgniteCacheTestSuite5: IgniteCachePartitionLossPolicySelfTest.testReadWriteSafeAfterKillCrdWithPersistence[ATOMIC] - Test has low fail rate in base branch 0,0% and is not flaky

{color:#d04437}Platform .NET{color} [[tests 2|https://ci.ignite.apache.org/viewLog.html?buildId=5140155]]
* exe: CancellationTest.TestClosures - Test has low fail rate in base branch 0,0% and is not flaky
* exe: CacheTest.TestCacheWithExpirationDoesNotAffectKeepBinarySettings - Test has low fail rate in base branch 0,0% and is not flaky

{color:#d04437}MVCC Cache 1{color} [[tests 0 TIMEOUT |https://ci.ignite.apache.org/viewLog.html?buildId=5140169]]

{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=5139431&amp;buildTypeId=IgniteTests24Java8_RunAll]

h4. [Taras Ledkov|https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tledkov-gridgain], could you help me.

I don’t understand what’s wrong. All my tests work and do not affect the operation of other components of the application. Despite this, the TС shows some problems. This is normal? or do I need to run the assembly with some settings?

(I have done rebase, and I have actual repo)

Or I created a branch from an unstable version and get non-working tests of other components

{panel:title=Branch: [pull/7521/head] Base: [master] : No blockers found!|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}{panel}
[TeamCity *--&gt; Run :: Basic Tests* Results|https://ci.ignite.apache.org/viewLog.html?buildId=5141282&amp;buildTypeId=IgniteTests24Java8_RunBasicTests]

{panel:title=Branch: [pull/7521/head] Base: [master] : No blockers found!|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}{panel}
[TeamCity *-&gt; Run :: SQL* Results|https://ci.ignite.apache.org/viewLog.html?buildId=5141239&amp;buildTypeId=IgniteTests24Java8_RunAllSql]

[~Aleksei_Litsov], right way, great results!

[~Aleksei_Litsov], PR looks good, merged to master.

Thanks for contribution!

