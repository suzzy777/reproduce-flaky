The root cause of the confusing value for the {{resource}} column is located at {{org.apache.cassandra.auth.FunctionResource#fromName}}. The implementation assumes the special characters (i.e. /, [ and ]) are not used in the function name, and uses those characters to parse the encoded function name string read from role_permissions table. 
However, quoted text is allowed as function names. It is permitted to have those characters in the function names, which breaks the parsing logic. 

In addition to the example in the description, it is allowed to create a function with `/` in the name, as long as it is quoted. 
{code:java}
CREATE FUNCTION cql_test_keyspace."my/amazing/udf"(input int) RETURNS NULL ON NULL INPUT RETURNS int LANGUAGE java AS 'return 42;';
{code}
Once the UDF is created, listing permission on the role breaks since `/` is used to determine if a resource is valid or not. 

Basically there are 2 possible solutions. 
1. Reject at the UDF creation when its name contains any of the special character '/', '[' and ']'. Those characters should be rarely needed as part of the function names. It requires to update the disallowed characters list when a new special character is introduced in the future. 
2. Patch the {{FunctionResource#fromName}} implementation to first locate the last `[...]` segment (as the function's argument list) and treat whatever appears before it as the function name. Sounds error-prone. 

I'd lean towards the approach 1. 
[~samt] and [~bereng], wondering what is your preference since you both have touched the method in question. 

#1 is the obvious preference. The problem is going to be with backwards compatibility. I think we can safely and reasonably argue this is a bug and an accident waiting to happen that needs fixing. It might impact some users obviously but then again, it's a bug in my eyes. Happy to hear more opinions.

I agree, we should apply more strict validation when creating functions/aggregates to prevent this from happening. Unfortunately though, I'm afraid we also have to handle existing cases in the wild, so we may need to do (some of) both #1 and #2.

If actually using functions with these problematic names works, perhaps we can localise a custom parsing implementation to `ListPermissionsStatement`, leave `FunctionResource#fromName` as it is and tighten up the naming rules going forward?  On the other hand, if functions named this way are completely unusable, then backwards compatibility is not such an issue and #1 alone is probably sufficient.

The issue is on listing the permissions only. It either parses the stored function name incorrectly or fails to parse. Invoking/using those functions are allowed. 

For example, the below SELECT statement runs just fine (and returns 42 as defined in the function body). 

{code:java}
SELECT a, b, cql_test_keyspace."admin_created_udf[org.apache.cassandra.db.marshal.LongType]"(a, b) FROM cql_test_keyspace.tbl WHERE a = 1;
{code}

If Cassandra no longer permits creating function with the disallowed characters, the existing function should not be affected. They can still be used like the above example. However, it does not fix the broken output form listing permissions. 

So, as Sam said, we need to do both #1 and #2. 

bq. perhaps we can localise a custom parsing implementation to `ListPermissionsStatement`, leave `FunctionResource#fromName` as it is and tighten up the naming rules going forward?

I think `FunctionResource#fromName` is the right place to have the parsing logic. Maybe I am missing something? 

The patch could be like this [https://github.com/apache/cassandra/pull/1992]

I see you mentioned CI but maybe forgot to add the link to the run?

I originally wanted to only post the patch.

Here is the link to CI. [https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=CASSANDRA-17848%2Ftrunk]

Hi [~samt] and [~bereng] , can either of you review? 

[~yifanc] I looked into it when you posted the PRs and at the first pass It looked ok. But I am busy atm with some perf testing. I have not forgotten, I am just doing other suff but will come back.

+1 modulo a typo in the tests (I left a comment on the PR). We should backport as far as 3.0, though I think that will be trivial.

I have been looking at this one also. I would only add we'd need to run j11 CI as well, j8 is already green, but +1 otherwise.

||Branch||Source||Circle CI||
|cassandra-3.0|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17848-cassandra-3.0-CC2B132A-B8D3-4BFC-9DCC-56A4CEABCA33]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17848-cassandra-3.0-CC2B132A-B8D3-4BFC-9DCC-56A4CEABCA33]|
|cassandra-3.11|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17848-cassandra-3.11-CC2B132A-B8D3-4BFC-9DCC-56A4CEABCA33]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17848-cassandra-3.11-CC2B132A-B8D3-4BFC-9DCC-56A4CEABCA33]|
|cassandra-4.0|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17848-cassandra-4.0-CC2B132A-B8D3-4BFC-9DCC-56A4CEABCA33]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17848-cassandra-4.0-CC2B132A-B8D3-4BFC-9DCC-56A4CEABCA33]|
|cassandra-4.1|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17848-cassandra-4.1-CC2B132A-B8D3-4BFC-9DCC-56A4CEABCA33]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17848-cassandra-4.1-CC2B132A-B8D3-4BFC-9DCC-56A4CEABCA33]|
|trunk|[branch|https://github.com/yifan-c/cassandra/tree/commit_remote_branch/CASSANDRA-17848-trunk-CC2B132A-B8D3-4BFC-9DCC-56A4CEABCA33]|[build|https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=commit_remote_branch%2FCASSANDRA-17848-trunk-CC2B132A-B8D3-4BFC-9DCC-56A4CEABCA33]|

[~yifanc] I moved it back to 'review in progress'. AFAIK we only move it to 'ready to commit' once we have reviewed all branches, all CI is green and you get the +1 for all branches.

Regarding the circle runs it seems sthg went wrong failing most of your runs.

[~bereng], you are right. Thank you for updating the ticket state! I will take care of the CI runs. 

The CI runs of cssandra-4.1 and trunk based branches show green result.
The runs of the other branches have failures. Some of them are flaky, and some of them also appear in the Jenkins build results (on https://ci-cassandra.apache.org). 
All of the failures are not related with the changes added in this patch. Other pairs of eyes will appreciated! 

Regarding the changes, on the 4.x branches, they are identical. They are simply cherry-picked from the commits in the patch against trunk. 
On the 3.x branches, minimal change was made to check the functions names during `prepare` of the statements, instead of in the `apply` method in the trunk patch. I'd consider the commits are also identical to the original one. 
cc: [~bereng]

[~yifanc] 4.0 looks fishy I wouldn't expect so many failures at all. It's quite a stable branch and failures don't align at all with jenkins. Would it be ok to re-run or re-check all is ok? Also, why your circle runs don't show the 'pre-commit' and 'separate' group of tests the std circle files have? Otherwise I'd have to checked no test has been missed.

[~bereng], sure thing! I re-run the tests for 4.0. The result looks much better. The prior errors were probably due to resources. 

The CircleCI config was modified a bit. It is the equivalent of 'pre-commit'. 

Hi [~yifanc] The 4.0 CI run looks much better now. The compact storage failure is a known one. Also the PRs look ok.

But checking your CI runs I see they are not equivalent to the 'pre-commit' present in our circle files. You are missing all the j11 tests under the j8 section i.e. Could we stick to the provided circle file or are there any special needs you need to modify the file for? I am asking bc having to check the list of jobs matching the 'official' circle file is an eye watering exercise.

The circleCI config was modified for convenience and efficiency, e.g. no need to click to approve the workflows. Running j11 test with the j8 built artifacts is less concerning. However, I just restored the CI configs to the provided one in tree for all 4.x branches and triggered new runs. 

--- Update ---

[~bereng], the results are mostly green.  

Hi [~yifanc],

thanks for resubmitting it. Iirc you only need one approval for the pre-commit workflow. It's mostly green but for a few in 4.1 and trunk which really sound like flakies to me. I would still open a ticket for the {{test_cleanup}} one and any other one you might consider worth it. But otherwise LGTM +1.

Committed in to cassandra-3.0 as [473656c1d53|https://github.com/apache/cassandra/commit/473656c1d53edb998aa60d414221e397797de52b] and merged up to trunk.

Created a ticket CASSANDRA-18098 for `test_cleanup`

