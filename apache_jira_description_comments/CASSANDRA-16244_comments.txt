Thanks for picking this up [~adelapena]! :)

It seems that CASSANDRA-13944 added a descriptive error for this case. The JVM upgrade test in the PR shows how this works when the repair attempt is done for the node in 4.0 in a mixed cluster. However, if the repair is done in the not upgraded node of the same mixed cluster, then it seems that there isn't any specific error management and the used {{nodetool repair}} command doesn't end.

CI results for the patch:

* [https://app.circleci.com/pipelines/github/adelapena/cassandra/164/workflows/cab328e3-bf68-4214-a8c4-0eaa2c4bc03e]
* [https://app.circleci.com/pipelines/github/adelapena/cassandra/164/workflows/29cd8e67-4e95-4f32-bd30-4cd32c74e441]

Hi [~adelapena], 

looking at the patch it seems that we could hide the upgraded node behavior by timing out waiting for the message to show up each time.

Correct me if I misunderstood, but the current behavior is:
 * Loop through all nodes one after the other
 * Start a repair using nodetool which will timeout after 10s but is expected to fail with a specific error message on the upgraded node
 * If no exception was triggered, check that the logs contain the expected message
 * Catch the TimeoutException and assume we're dealing with a non upgraded node

Isn't it possible that the assumption we're dealing with a non upgraded node when we get a timeout could potentially hide some edge cases where the upgraded node doesn't behave as expected and goes into timeout? We could then possibly get the test to succeed although we're not getting the expected behavior.

Let me know if I'm missing something.

Hi [~adelapena], thanks for the patch. I left some feedback in the GH PR page. 

[~yifanc]  [~adejanovski] thanks for the feedback. I have tried to address the review comments in the PR.

CI is running:
[https://app.circleci.com/pipelines/github/adelapena/cassandra/165/workflows/88ff723a-3cdd-47b8-9ba3-def4b3f2bdab]
[https://app.circleci.com/pipelines/github/adelapena/cassandra/165/workflows/e2ff75e1-e2ed-48c6-bb79-7c3a0a937653]

Thanks for the update!

The test LGTM. +1

I also looped the test for over 20 times and no failures to make sure it is not flaky.  
{code:java}
➜ COUNTER=0 && while [[ "$(ant testclasslist -Dtest.classlistfile=<(echo test/distributed/org/apache/cassandra/distributed/upgrade/MixedModeRepairTest.java) | grep -c 'BUILD SUCCESSFUL')" == "1" ]]; do echo "It was a good run. $COUNTER"; ((COUNTER=COUNTER+1)) done                                                                                     
It was a good run. 0
It was a good run. 1
...
It was a good run. 24
It was a good run. 25
{code}

[~yifanc] thanks for the review. I have just rebased the PR without conflicts and run CI again:

* [circleci|https://app.circleci.com/pipelines/github/adelapena/cassandra/172/workflows/96fb6a4a-da0e-4892-ab34-9b0d38f3a217]
* [ci-cassandra|https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest-upgrade/206/]

[~adejanovski] if you agree with the changes I think we are ready to commit.

LGTM [~adelapena] (y)

Thanks!

Thanks, committed to {{trunk}} as [7cf35988f298a8ae4ce7ebab2c69e5e7abc28958|https://github.com/apache/cassandra/commit/7cf35988f298a8ae4ce7ebab2c69e5e7abc28958].

