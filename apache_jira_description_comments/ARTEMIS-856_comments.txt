Noting IRC discussion here:

 

 

[~gtully] and [~mattrpav] discussed that staying server-side w/ the exclusive consumer configuration is desirable, and that dropping support for client-side driven exclusive consumer settings on a destination basis would be deprecated as compared to ActiveMQ 5.x for the time being. Note: client-side exclusive consuming creates a race condition when trying to do message groups that is non-deterministic that can lead to becoming an anti-pattern.

If a user uncovers a client-side exclusive consumer use case, please create a JIRA!

Note: consumersBeforeDispatchStarts and timeBeforeDispatchStarts are still useful server-side settings to provide clients a warm-up period when doing exclusive consumers + message groups and working to provide some level of balancing across client connections

I think they only help with loadbalancing, the first exclusive consumer wins or gets replaced with a higher priority one.

 

The message group distribution is a good use case tho, unless there is already something that covers that in the code base.

GitHub user michaelandrepearce opened a pull request:

    https://github.com/apache/activemq-artemis/pull/2175

    ARTEMIS-856 - Support consumersBeforeDispatch and delayBeforeDispatch

    https://issues.apache.org/jira/browse/ARTEMIS-856
    
    This is equivalent to consumersBeforeDispatchStarts and timeBeforeDispatchStarts in ActiveMQ 5.x
    
    http://activemq.apache.org/message-groups.html
    
    This is addressing one of the items on the artemis roadmap: http://activemq.apache.org/activemq-artemis-roadmap.html

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/michaelandrepearce/activemq-artemis ARTEMIS-856

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/activemq-artemis/pull/2175.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2175
    
----
commit 4ffcd16bdb909554aac4f936674bb23c49f34866
Author: Michael André Pearce <michael.andre.pearce@...>
Date:   2018-07-06T06:44:15Z

    ARTEMIS-856 - Support consumersBeforeDispatch and delayBeforeDispatch
    
    https://issues.apache.org/jira/browse/ARTEMIS-856
    
    This is equivalent to consumersBeforeDispatchStarts and timeBeforeDispatchStarts in ActiveMQ 5.x
    
    http://activemq.apache.org/message-groups.html
    
    This is addressing one of the items on the artemis roadmap: http://activemq.apache.org/activemq-artemis-roadmap.html

----


Github user franz1981 commented on a diff in the pull request:

    https://github.com/apache/activemq-artemis/pull/2175#discussion_r201051073
  
    --- Diff: artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/QueueImpl.java ---
    @@ -270,6 +271,15 @@
     
        private final QueueFactory factory;
     
    +   private final AtomicBoolean dispatching = new AtomicBoolean();
    --- End diff --
    
    The logic that involves using dispatching and dispatchStartTime could be simplyfied using just dispatchStartTime? 
    I would use and AtomicLongFieldUpdater for that in case


Github user michaelandrepearce commented on a diff in the pull request:

    https://github.com/apache/activemq-artemis/pull/2175#discussion_r201073066
  
    --- Diff: artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/QueueImpl.java ---
    @@ -270,6 +271,15 @@
     
        private final QueueFactory factory;
     
    +   private final AtomicBoolean dispatching = new AtomicBoolean();
    --- End diff --
    
    I wanted that when dispatching the quickest eval is done, thus why the seperate boolean. As it is hot path. Agree could just use != -1 check, memory vs cpu cycle. Let me know your thought 
    
    Agree re atomic updater, i can make this change. 


Github user michaelandrepearce commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2175
  
    Fyi i go on annual leave 4pm tomorrow, so if youbcan comment before i can make changes before i leave else it will have to wait 2 weeks


Github user franz1981 commented on a diff in the pull request:

    https://github.com/apache/activemq-artemis/pull/2175#discussion_r201076355
  
    --- Diff: artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/QueueImpl.java ---
    @@ -270,6 +271,15 @@
     
        private final QueueFactory factory;
     
    +   private final AtomicBoolean dispatching = new AtomicBoolean();
    --- End diff --
    
    >  Agree could just use != -1 check, memory vs cpu cycle
    
    TBH to me are good enough both, but if we can just check !=-1 it would be welcome, even if less readable...
    I'm more worried about the writes cost then the reads :P 


Github user michaelandrepearce commented on a diff in the pull request:

    https://github.com/apache/activemq-artemis/pull/2175#discussion_r201392536
  
    --- Diff: artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/QueueImpl.java ---
    @@ -270,6 +271,15 @@
     
        private final QueueFactory factory;
     
    +   private final AtomicBoolean dispatching = new AtomicBoolean();
    --- End diff --
    
    @franz1981 so after going back to see if i could just use != -1, i remembered why i couldnt it would mean adding a System.currentMillis call on the hot path, which is very costly.
    
    I have though moved to using AtomicUpdaters , though :) 


Github user michaelandrepearce commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2175
  
    note: seems test failure is related to https://github.com/apache/activemq-artemis/pull/2173 


Github user michaelandrepearce commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2175
  
    @franz1981 @clebertsuconic can this be merged if no further comments.


Github user clebertsuconic commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2175
  
    Ohhh.. nice one.. I just looked at what was the semantics changed.. nice one!!!!
    
    
    it would be nice to add some docs.. a paragraph would do.
    
    If you don't have time to do it now I will merge it and do it later.. let me know.


Github user franz1981 commented on a diff in the pull request:

    https://github.com/apache/activemq-artemis/pull/2175#discussion_r205158077
  
    --- Diff: artemis-commons/src/main/java/org/apache/activemq/artemis/utils/AtomicBooleanFieldUpdater.java ---
    @@ -0,0 +1,154 @@
    +/*
    + * Licensed to the Apache Software Foundation (ASF) under one or more
    + * contributor license agreements. See the NOTICE file distributed with
    + * this work for additional information regarding copyright ownership.
    + * The ASF licenses this file to You under the Apache License, Version 2.0
    + * (the "License"); you may not use this file except in compliance with
    + * the License. You may obtain a copy of the License at
    + *
    + *     http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.activemq.artemis.utils;
    +
    +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
    +import sun.reflect.CallerSensitive;
    +
    +public class AtomicBooleanFieldUpdater<T> {
    +
    +   /**
    +    * Creates and returns an updater for objects with the given field.
    +    * The Class argument is needed to check that reflective types and
    +    * generic types match.
    +    *
    +    * @param tclass the class of the objects holding the field
    +    * @param fieldName the name of the field to be updated
    +    * @param <U> the type of instances of tclass
    +    * @return the updater
    +    * @throws IllegalArgumentException if the field is not a
    +    * volatile long type
    +    * @throws RuntimeException with a nested reflection-based
    +    * exception if the class does not hold field or is the wrong type,
    +    * or the field is inaccessible to the caller according to Java language
    +    * access control
    +    */
    +   @CallerSensitive
    +   public static <U> AtomicBooleanFieldUpdater<U> newUpdater(Class<U> tclass, String fieldName) {
    --- End diff --
    
    I know that is a sad that JDK isn't providing this class with a native implementation, but I would use directly `AtomicIntegerFiledUpdater` or `AtomicReferenceFieldUpdater` with `Boolean` values instead.
    The reason is that there is an implicit behaviour of any `SomethingFiledUpdater` that can't be enforced here: the declaration of a `volatile Something`.
    Instead, the real purpose of this class is to treat integer values like boolean ones so I suppose that using a plain statitc util class to convert boolean<->integer will make it simple while avoiding to provide a more complex concurrent util class.


Github user clebertsuconic commented on a diff in the pull request:

    https://github.com/apache/activemq-artemis/pull/2175#discussion_r205168250
  
    --- Diff: artemis-commons/src/main/java/org/apache/activemq/artemis/utils/AtomicBooleanFieldUpdater.java ---
    @@ -0,0 +1,154 @@
    +/*
    + * Licensed to the Apache Software Foundation (ASF) under one or more
    + * contributor license agreements. See the NOTICE file distributed with
    + * this work for additional information regarding copyright ownership.
    + * The ASF licenses this file to You under the Apache License, Version 2.0
    + * (the "License"); you may not use this file except in compliance with
    + * the License. You may obtain a copy of the License at
    + *
    + *     http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.activemq.artemis.utils;
    +
    +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
    +import sun.reflect.CallerSensitive;
    +
    +public class AtomicBooleanFieldUpdater<T> {
    +
    +   /**
    +    * Creates and returns an updater for objects with the given field.
    +    * The Class argument is needed to check that reflective types and
    +    * generic types match.
    +    *
    +    * @param tclass the class of the objects holding the field
    +    * @param fieldName the name of the field to be updated
    +    * @param <U> the type of instances of tclass
    +    * @return the updater
    +    * @throws IllegalArgumentException if the field is not a
    +    * volatile long type
    +    * @throws RuntimeException with a nested reflection-based
    +    * exception if the class does not hold field or is the wrong type,
    +    * or the field is inaccessible to the caller according to Java language
    +    * access control
    +    */
    +   @CallerSensitive
    +   public static <U> AtomicBooleanFieldUpdater<U> newUpdater(Class<U> tclass, String fieldName) {
    --- End diff --
    
    @franz1981 isn't that too much nit picking? :)
    
    I like the work as is.. as anything in life.. it can always be improved.. but the excellent is the enemy of the very good :)


Github user michaelandrepearce commented on a diff in the pull request:

    https://github.com/apache/activemq-artemis/pull/2175#discussion_r205174465
  
    --- Diff: artemis-commons/src/main/java/org/apache/activemq/artemis/utils/AtomicBooleanFieldUpdater.java ---
    @@ -0,0 +1,154 @@
    +/*
    + * Licensed to the Apache Software Foundation (ASF) under one or more
    + * contributor license agreements. See the NOTICE file distributed with
    + * this work for additional information regarding copyright ownership.
    + * The ASF licenses this file to You under the Apache License, Version 2.0
    + * (the "License"); you may not use this file except in compliance with
    + * the License. You may obtain a copy of the License at
    + *
    + *     http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.activemq.artemis.utils;
    +
    +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
    +import sun.reflect.CallerSensitive;
    +
    +public class AtomicBooleanFieldUpdater<T> {
    +
    +   /**
    +    * Creates and returns an updater for objects with the given field.
    +    * The Class argument is needed to check that reflective types and
    +    * generic types match.
    +    *
    +    * @param tclass the class of the objects holding the field
    +    * @param fieldName the name of the field to be updated
    +    * @param <U> the type of instances of tclass
    +    * @return the updater
    +    * @throws IllegalArgumentException if the field is not a
    +    * volatile long type
    +    * @throws RuntimeException with a nested reflection-based
    +    * exception if the class does not hold field or is the wrong type,
    +    * or the field is inaccessible to the caller according to Java language
    +    * access control
    +    */
    +   @CallerSensitive
    +   public static <U> AtomicBooleanFieldUpdater<U> newUpdater(Class<U> tclass, String fieldName) {
    --- End diff --
    
    @franz1981 using Boolean you might as well then just use atomic boolean, which you commented eadlier on and rightly so to use atomic updater. As the point is to save having object reference overheads.
    
    The point of the class is just to make it reusable if else where you want else you end up with lots of dupe code just for all the int to bool logic. 


Github user michaelandrepearce commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2175
  
    @clebertsuconic if could merge as is, ill get docs done in another pr but before release if ok


Github user franz1981 commented on a diff in the pull request:

    https://github.com/apache/activemq-artemis/pull/2175#discussion_r205195338
  
    --- Diff: artemis-commons/src/main/java/org/apache/activemq/artemis/utils/AtomicBooleanFieldUpdater.java ---
    @@ -0,0 +1,154 @@
    +/*
    + * Licensed to the Apache Software Foundation (ASF) under one or more
    + * contributor license agreements. See the NOTICE file distributed with
    + * this work for additional information regarding copyright ownership.
    + * The ASF licenses this file to You under the Apache License, Version 2.0
    + * (the "License"); you may not use this file except in compliance with
    + * the License. You may obtain a copy of the License at
    + *
    + *     http://www.apache.org/licenses/LICENSE-2.0
    + *
    + * Unless required by applicable law or agreed to in writing, software
    + * distributed under the License is distributed on an "AS IS" BASIS,
    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    + * See the License for the specific language governing permissions and
    + * limitations under the License.
    + */
    +package org.apache.activemq.artemis.utils;
    +
    +import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
    +import sun.reflect.CallerSensitive;
    +
    +public class AtomicBooleanFieldUpdater<T> {
    +
    +   /**
    +    * Creates and returns an updater for objects with the given field.
    +    * The Class argument is needed to check that reflective types and
    +    * generic types match.
    +    *
    +    * @param tclass the class of the objects holding the field
    +    * @param fieldName the name of the field to be updated
    +    * @param <U> the type of instances of tclass
    +    * @return the updater
    +    * @throws IllegalArgumentException if the field is not a
    +    * volatile long type
    +    * @throws RuntimeException with a nested reflection-based
    +    * exception if the class does not hold field or is the wrong type,
    +    * or the field is inaccessible to the caller according to Java language
    +    * access control
    +    */
    +   @CallerSensitive
    +   public static <U> AtomicBooleanFieldUpdater<U> newUpdater(Class<U> tclass, String fieldName) {
    --- End diff --
    
    I agree about the reasons but given that the JVM doesn't trust final fields you won't get the same performance you would have just using the int updater. Given that, I suppose that everything that let it works is ok for me: the PR is well done as always :)


Github user clebertsuconic commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2175
  
    @michaelandrepearce I created https://issues.apache.org/jira/browse/ARTEMIS-1991 to track the doc.
    
    Marked as blocker just so it appears on the top of the list before release. I'm using that as a marker on what needs to be finished before we release.


Github user clebertsuconic commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2175
  
    @michaelandrepearce this is broken... can you rebase and check what's happening?


Github user michaelandrepearce commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2175
  
    Ill rebase tomorrow 


Github user clebertsuconic commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2175
  
    this is so weird.. I have no idea what changed.. but I can't build on artemis-features.
    
    Probably the double xsd on tools? I 've tried debugging... and I can't figure out
    
    
    I will keep trying tomorrow. but if you know anything @michaelandrepearce  please let me know.


Github user michaelandrepearce commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2175
  
    @clebertsuconic ill close this as i dont have time today or monday to dedicate further on this, as coming off holiday have a bit of a full plate in work, and ill work offline to see whats going and re-open once i figured it out. 
    
    btw trying to ping you on IRC ;) 


Github user michaelandrepearce closed the pull request at:

    https://github.com/apache/activemq-artemis/pull/2175


Github user clebertsuconic commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2175
  
    Please don’t close it. If you don’t have time I will do it.  It’s just I wanted to figure out 
    
    
    Can you reopen please ?


Github user clebertsuconic commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2175
  
    I already know this is because of AtomicBooleanFieldUpdater. Something is causing confusion on OSGI.


GitHub user michaelandrepearce opened a pull request:

    https://github.com/apache/activemq-artemis/pull/2198

    ARTEMIS-856 - Support consumersBeforeDispatch and delayBeforeDispatch

    https://issues.apache.org/jira/browse/ARTEMIS-856
    
    This is equivalent to consumersBeforeDispatchStarts and timeBeforeDispatchStarts in ActiveMQ 5.x
    
    http://activemq.apache.org/message-groups.html
    
    This is addressing one of the items on the artemis roadmap: http://activemq.apache.org/activemq-artemis-roadmap.html

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/michaelandrepearce/activemq-artemis ARTEMIS-856

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/activemq-artemis/pull/2198.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2198
    
----
commit d01e2d2539ed67ce4f617363ac536b4d0a6d02da
Author: Michael André Pearce <michael.andre.pearce@...>
Date:   2018-07-06T06:44:15Z

    ARTEMIS-856 - Support consumersBeforeDispatch and delayBeforeDispatch
    
    https://issues.apache.org/jira/browse/ARTEMIS-856
    
    This is equivalent to consumersBeforeDispatchStarts and timeBeforeDispatchStarts in ActiveMQ 5.x
    
    http://activemq.apache.org/message-groups.html
    
    This is addressing one of the items on the artemis roadmap: http://activemq.apache.org/activemq-artemis-roadmap.html

----


Github user michaelandrepearce commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2198
  
    @clebertsuconic would let me re-open so heres new PR of the same branch. Ive deduced the failure in test case in is that it seems when the journal is reloaded the queues arent there, thus it doesnt reload messages, on debugging it seems to write to the journal as far as i can tell, but it seems something go wrong in that area.


Github user michaelandrepearce commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2198
  
    i think its the same issue @cshannon  is getting on his PR also. https://github.com/apache/activemq-artemis/pull/2191


Github user michaelandrepearce commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2198
  
    @clebertsuconic re-pushed to kick off build again and all green. You ok to merge?


Github user clebertsuconic commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2198
  
    @michaelandrepearce What did you do to fix the karaf verification? i lost some sleep the other trying to figure it out and I'm now curious.


Github user michaelandrepearce commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2198
  
    @clebertsuconic i removed the custom AtomicBooleanFieldUpdater as @franz1981 wanted and just used AtomicIntegerFieldUpdater direct. Seems i fix the issue and make @franz1981 happy. 


Github user clebertsuconic commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2198
  
    @michaelandrepearce Ok.. there's an issue with packaging in Karaf for Util depending on how you use. I'm sure it will arise again.


Commit 8a9835a3947f99ea832fb31fd763174697c3570b in activemq-artemis's branch refs/heads/master from [~teaandcoffee]
[ https://git-wip-us.apache.org/repos/asf?p=activemq-artemis.git;h=8a9835a ]

ARTEMIS-856 - Support consumersBeforeDispatch and delayBeforeDispatch

https://issues.apache.org/jira/browse/ARTEMIS-856

This is equivalent to consumersBeforeDispatchStarts and timeBeforeDispatchStarts in ActiveMQ 5.x

http://activemq.apache.org/message-groups.html

This is addressing one of the items on the artemis roadmap: http://activemq.apache.org/activemq-artemis-roadmap.html

Commit 8a9835a3947f99ea832fb31fd763174697c3570b in activemq-artemis's branch refs/heads/master from [~teaandcoffee]
[ https://git-wip-us.apache.org/repos/asf?p=activemq-artemis.git;h=8a9835a ]

ARTEMIS-856 - Support consumersBeforeDispatch and delayBeforeDispatch

https://issues.apache.org/jira/browse/ARTEMIS-856

This is equivalent to consumersBeforeDispatchStarts and timeBeforeDispatchStarts in ActiveMQ 5.x

http://activemq.apache.org/message-groups.html

This is addressing one of the items on the artemis roadmap: http://activemq.apache.org/activemq-artemis-roadmap.html

Github user asfgit closed the pull request at:

    https://github.com/apache/activemq-artemis/pull/2198


GitHub user clebertsuconic opened a pull request:

    https://github.com/apache/activemq-artemis/pull/2209

    ARTEMIS-856 Fixing MessageRedistributionTest

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/clebertsuconic/activemq-artemis redistribution-fix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/activemq-artemis/pull/2209.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2209
    
----
commit ab254030faca2e2dcd98ef8165a74cbc235fe754
Author: Clebert Suconic <clebertsuconic@...>
Date:   2018-08-01T22:01:48Z

    ARTEMIS-856 Fixing MessageRedistributionTest

----


Github user clebertsuconic commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2209
  
    @michaelandrepearce I need you to take a look into this please.
    
    MessageRedistributionFix is broken, up to the point I can't complete a whole testsuite on my internal CI.
    
    My idea was the emulate the previous collection where redistributor would be an item, while still checking if redistributor is the only allowed item to be used on the loop.
    
    I'm not sure how else we would change this without making substantial refactoring to your previous commit.
    
    
    Can you look into this PR please?


Github user clebertsuconic commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2209
  
    @michaelandrepearce : But please don't merge it yet.. I'm running a whole testsuite on the CI before we can merge this... just let me know what you think first.


Github user clebertsuconic commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2209
  
    @michaelandrepearce Can you look into ExclusiveTest::testExclusiveTopicSharedConsumerFailover
    
    It's failing even without my changes.. and after my changes.. I couldn't figure out today.


Github user michaelandrepearce commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2209
  
    @clebertsuconic, looks good, there we some bits with consumer lists with the redistributor i heavily want to avoid, im working an alternative option, but if to fix master happy to merge this, and i can supply my alternative later (have raised a pr so you can see, but still not complete)


Github user michaelandrepearce commented on a diff in the pull request:

    https://github.com/apache/activemq-artemis/pull/2209#discussion_r207214263
  
    --- Diff: artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/QueueImpl.java ---
    @@ -544,6 +560,7 @@ public boolean isExclusive() {
     
        @Override
        public synchronized void setExclusive(boolean exclusive) {
    +      new Exception("exclusive set at " + exclusive).printStackTrace();
    --- End diff --
    
    Think this needs to be removed.


Github user clebertsuconic commented on a diff in the pull request:

    https://github.com/apache/activemq-artemis/pull/2209#discussion_r207215079
  
    --- Diff: artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/QueueImpl.java ---
    @@ -544,6 +560,7 @@ public boolean isExclusive() {
     
        @Override
        public synchronized void setExclusive(boolean exclusive) {
    +      new Exception("exclusive set at " + exclusive).printStackTrace();
    --- End diff --
    
    Thanks.  That’s debug I forgot :p


Github user michaelandrepearce commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2211
  
    @clebertsuconic i figured out the last case and fixed it, as normal a one liner.


Github user clebertsuconic commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2211
  
    @michaelandrepearce Let me run my internal CI.. if all good will merge it in 2 hours (time to have the whole run)


Github user clebertsuconic commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2209
  
    This is replaced by #2211


Github user clebertsuconic closed the pull request at:

    https://github.com/apache/activemq-artemis/pull/2209


Github user franz1981 commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2211
  
    @michaelandrepearce @clebertsuconic If it is including the changes of https://github.com/apache/activemq-artemis/pull/2203 please consider to add the test I have put there too (if it seems good) :+1: 


Commit 59520b9018d4a44fffa0bf05c49970d50ed69ab5 in activemq-artemis's branch refs/heads/master from Clebert Suconic
[ https://git-wip-us.apache.org/repos/asf?p=activemq-artemis.git;h=59520b9 ]

ARTEMIS-856 Fixing QueueCommandTest


Commit ec742cb8899bd1b7d7cb28b7e64c87f75681f6e7 in activemq-artemis's branch refs/heads/master from [~teaandcoffee]
[ https://git-wip-us.apache.org/repos/asf?p=activemq-artemis.git;h=ec742cb ]

ARTEMIS-856 Fixing MessageRedistributionTest



Commit ddd554f43fedbabf490b67ce6c2b85a48a2ac954 in activemq-artemis's branch refs/heads/master from [~teaandcoffee]
[ https://git-wip-us.apache.org/repos/asf?p=activemq-artemis.git;h=ddd554f ]

ARTEMIS-856 Fixing ExclusiveTest

Commit de465179e5b0eecc87e6865250e771ce1f603e1b in activemq-artemis's branch refs/heads/master from [~teaandcoffee]
[ https://git-wip-us.apache.org/repos/asf?p=activemq-artemis.git;h=de46517 ]

ARTEMIS-856 Fixing MessageRedistributionTest

Cleaner code.

Github user asfgit closed the pull request at:

    https://github.com/apache/activemq-artemis/pull/2211


Github user michaelandrepearce commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2211
  
    @franz1981 i dont think it made it before the merge. Could you pr it by itself and ill merge


Github user clebertsuconic commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2211
  
    @michaelandrepearce I still have the following tests failing with these changes:
    
    - org.apache.activemq.artemis.tests.integration.cluster.distribution.AMQPMessageLoadBalancingTest.testLoadBalanceAMQP
    - org.apache.activemq.artemis.tests.integration.cluster.failover.ReplicatedPagingFailoverTest.testPageFailBeforeConsume
    - org.apache.activemq.artemis.tests.integration.openwire.cluster.TemporaryQueueClusterTest.testClusteredQueue
    - org.apache.activemq.artemis.tests.integration.server.ScaleDownTest.testBasicScaleDown[useScaleDownGroupName=true]
    - org.apache.activemq.artemis.tests.integration.server.ScaleDownTest.testStoreAndForward[useScaleDownGroupName=true]
    - org.apache.activemq.artemis.tests.integration.server.ScaleDownTest.testBasicScaleDown[useScaleDownGroupName=false]
    - org.apache.activemq.artemis.tests.integration.server.ScaleDownTest.testStoreAndForward[useScaleDownGroupName=false]
    
    
    These all passed 100% with my other fix. (Not saying my fix was correct.. but there's something still around the routing logic.
    
    I'm taking today's off... I may come back into this tomorrow.. but any help is appreciated.


Github user michaelandrepearce commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2211
  
    @clebertsuconic have the day off dude, i will look into tomorrow during the day, im sure i can sort, if any others just list.


GitHub user michaelandrepearce opened a pull request:

    https://github.com/apache/activemq-artemis/pull/2212

    ARTEMIS-856 Fixing ScaleDownTest

    Don't increment the pos if redistributor. causes pos to be > size thus index out of bounds when getting the consumer on next loop.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/michaelandrepearce/activemq-artemis fix_scaledown

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/activemq-artemis/pull/2212.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2212
    
----
commit 66ff00ad6db53e43c5b23983c3cc0885262b5119
Author: Michael André Pearce <michael.andre.pearce@...>
Date:   2018-08-03T07:52:47Z

    ARTEMIS-856 Fixing ScaleDownTest
    
    Don't increment the pos if redistributor. causes pos to be > size thus index out of bounds when getting the consumer on next loop.

----


Github user michaelandrepearce commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2211
  
    @clebertsuconic see https://github.com/apache/activemq-artemis/pull/2212.
    
    Was a simple one. 


Github user michaelandrepearce commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2212
  
    @clebertsuconic for the CI failures you raised. 


Github user michaelandrepearce commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2212
  
    @clebertsuconic test failure is the intermittent one we spoke on already: MultiThreadAsynchronousFileTest
    
    Ill try kick off build again just to get a green pr. but if not this is a known flaky test on Travis.


Github user michaelandrepearce commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2212
  
    @clebertsuconic and a rebuild gives us green :)


Commit 825081cfc095d52541ebc5631f031059618d871d in activemq-artemis's branch refs/heads/master from [~teaandcoffee]
[ https://git-wip-us.apache.org/repos/asf?p=activemq-artemis.git;h=825081c ]

ARTEMIS-856 Fixing ScaleDownTest

Don't increment the pos if redistributor. causes pos to be > size thus index out of bounds when getting the consumer on next loop.

Github user asfgit closed the pull request at:

    https://github.com/apache/activemq-artemis/pull/2212


Github user michaelandrepearce commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2375
  
    @clebertsuconic its just something spotted missing when we did work for jira 856 still not released, so as its related and not released still, have used that jira to keep it all associated. 


Github user michaelandrepearce commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2375
  
    @clebertsuconic its just something spotted missing when we did work for jira 856 still not released, so as its related and not released still, have used that jira to keep it all associated. 


Github user michaelandrepearce commented on the issue:

    https://github.com/apache/activemq-artemis/pull/2375
  
    @clebertsuconic its just something spotted missing when we did work for jira 856 still not released, so as its related and not released still, have used that jira to keep it all associated. 


Commit b0d36ebc50a66e24f0c5fd22af53d0ab25d5e615 in activemq-artemis's branch refs/heads/master from [~teaandcoffee]
[ https://git-wip-us.apache.org/repos/asf?p=activemq-artemis.git;h=b0d36eb ]

ARTEMIS-856 small fix to avoid re-distributor being assigned a group



Github user asfgit closed the pull request at:

    https://github.com/apache/activemq-artemis/pull/2375


[~clebertsuconic] im unable to mark this resolved, are you?

