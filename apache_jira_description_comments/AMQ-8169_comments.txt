{noformat}
javax.net.ssl|ERROR|1B|ActiveMQ BrokerService[localhost] Task-3|2021-03-04 01:59:07.137 PST|TransportContext.java:361|Fatal (BAD_RECORD_MAC): Input too short - need tag (
"throwable" : {
  javax.crypto.AEADBadTagException: Input too short - need tag
  	at java.base/com.sun.crypto.provider.GaloisCounterMode.decryptFinal(GaloisCounterMode.java:564)
  	at java.base/com.sun.crypto.provider.CipherCore.finalNoPadding(CipherCore.java:1118)
  	at java.base/com.sun.crypto.provider.CipherCore.fillOutputBuffer(CipherCore.java:1055)
  	at java.base/com.sun.crypto.provider.CipherCore.doFinal(CipherCore.java:943)
  	at java.base/com.sun.crypto.provider.AESCipher.engineDoFinal(AESCipher.java:491)
  	at java.base/javax.crypto.CipherSpi.bufferCrypt(CipherSpi.java:794)
  	at java.base/javax.crypto.CipherSpi.engineDoFinal(CipherSpi.java:730)
  	at java.base/javax.crypto.Cipher.doFinal(Cipher.java:2500)
  	at java.base/sun.security.ssl.SSLCipher$T13GcmReadCipherGenerator$GcmReadCipher.decrypt(SSLCipher.java:1930)
  	at java.base/sun.security.ssl.SSLEngineInputRecord.decodeInputRecord(SSLEngineInputRecord.java:240)
  	at java.base/sun.security.ssl.SSLEngineInputRecord.decode(SSLEngineInputRecord.java:197)
  	at java.base/sun.security.ssl.SSLEngineInputRecord.decode(SSLEngineInputRecord.java:160)
  	at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:110)
  	at java.base/sun.security.ssl.SSLEngineImpl.decode(SSLEngineImpl.java:736)
  	at java.base/sun.security.ssl.SSLEngineImpl.readRecord(SSLEngineImpl.java:691)
  	at java.base/sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:506)
  	at java.base/sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:482)
  	at java.base/javax.net.ssl.SSLEngine.unwrap(SSLEngine.java:637)
  	at org.apache.activemq.transport.nio.NIOSSLTransport.secureRead(NIOSSLTransport.java:393)
  	at org.apache.activemq.transport.nio.NIOSSLTransport.serviceRead(NIOSSLTransport.java:261)
  	at org.apache.activemq.transport.stomp.StompNIOSSLTransport.initializeStreams(StompNIOSSLTransport.java:71)
  	at org.apache.activemq.transport.tcp.TcpTransport.connect(TcpTransport.java:543)
  	at org.apache.activemq.transport.nio.NIOTransport.doStart(NIOTransport.java:174)
  	at org.apache.activemq.transport.nio.NIOSSLTransport.doStart(NIOSSLTransport.java:470)
  	at org.apache.activemq.util.ServiceSupport.start(ServiceSupport.java:55)
  	at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:64)
  	at org.apache.activemq.transport.stomp.StompTransportFilter.start(StompTransportFilter.java:65)
  	at org.apache.activemq.transport.AbstractInactivityMonitor.start(AbstractInactivityMonitor.java:172)
  	at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:64)
  	at org.apache.activemq.broker.TransportConnection.start(TransportConnection.java:1067)
  	at org.apache.activemq.broker.TransportConnector$1$1.run(TransportConnector.java:223)
  	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
  	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
  	at java.base/java.lang.Thread.run(Thread.java:832)}
{noformat}

It doesn't seem like a problem with the ssl cert. The old cert is a 2048-bit RSA key and looking at the tls handshake the client and server negotiate on TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 as the cipher suite which appears to be a good, strong cipher according to this: [https://cheatsheetseries.owasp.org/cheatsheets/TLS_Cipher_String_Cheat_Sheet.html]

Â 

I tried generating a new key pair anyway and the test still fails and the cipher suite used is the same: 
{code:java}
"ServerHello": {
  "server version"      : "TLSv1.2",
  "random"              : "73 63 64 39 98 C8 82 32 8C 68 AC B2 57 F0 C6 E5 E4 39 5F 92 48 91 63 59 44 4F 57 4E 47 52 44 01",
  "session id"          : "44 BE B7 9B A7 A2 ED 93 D6 7F 1C 53 D3 00 D1 FC 31 48 71 FA 51 43 5B 5E D0 BE 47 D0 91 0C D8 0F",
  "cipher suite"        : "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384(0xC030)",
  "compression methods" : "00",
  "extensions"          : [
    "extended_master_secret (23)": {
      <empty>
    },
    "renegotiation_info (65,281)": {
      "renegotiated connection": [<no renegotiated connection>]
    }
  ]
}
)
javax.net.ssl|FINE|12|ActiveMQ BrokerService[localhost] Task-1|2021-03-04 23:25:35.164 PST|Logger.java:765|Produced server Certificate handshake message (
"Certificates": [
  "certificate" : {
    "version"            : "v3",
    "serial number"      : "32 F8 37 03",
    "signature algorithm": "SHA256withRSA",
    "issuer"             : "CN=localhost, OU=activemq.org, O=activemq.org, L=LA, ST=CA, C=US",
    "not before"         : "2021-03-04 23:16:43.000 PST",
    "not  after"         : "2121-02-08 23:16:43.000 PST",
    "subject"            : "CN=localhost, OU=activemq.org, O=activemq.org, L=LA, ST=CA, C=US",
    "subject public key" : "RSA",
    "extensions"         : [
      {
        ObjectId: 2.5.29.14 Criticality=false
        SubjectKeyIdentifier [
        KeyIdentifier [
        0000: F9 A4 A3 77 25 A6 D8 FE   30 8F CA 53 69 33 AD 76  ...w%...0..Si3.v
        0010: 34 42 E9 C7                                        4B..
        ]
        ]
      }
    ]}
]
)
{code}

It's not related to cert: this test is flaky and failing for a while (randomly).

I will check and at least exclude it.

I've been doing some more digging and it appears the intermittent issues we are seeing were introduced in Oracle jdk1.8.0_261. I do not believe this to be a flaky test, but rather a problem with AES GCM. I don't know if it's a JDK bug or if it's an implementation problem.

With Oracle jdk1.8.0_251 the negotiated cipher suite is TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 and I am not able to recreate the test failing.

With Oracle jdk1.8.0_261 the negotiated cipher suite is TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 and I can easily recreate the test failing. The difference in negotiated cipher suite appears to be due to [this change|https://www.oracle.com/java/technologies/javase/8u261-relnotes.html#JDK-8028518] to *Increase the priorities of GCM cipher suites*.

[~tetlucas] interesting the stack and the NIOSSLTransport indicate SSLEngine in use.. I wonder if we need to fix this item (from your JDK changelog notes):

Given all the protocols could share NIOSSLTransport, we should dig in further. Might not be only a STOMP issue.

{noformat}
4. TLS connection issues with applications using javax.net.ssl.SSLEngine

Cause: The internal implementation of the SSLEngine and associated classes has been reworked with the introduction of TLS v1.3 support. Buffer usage has been improved in the SSLEngine area.

Solution: If an SSLEngine application encounters issues after upgrading to JDK 8u261 or later, refer to the Java 8 API to ensure application code is correct. In particular, applications using SSLEngine should not just depend on SSLEngineResult.Status.BUFFER_UNDERFLOW or SSLEngineResult.Status.BUFFER_OVERFLOW results in order to flush pending data. Buffers should always be flushed after an SSLEngine wrap operation if such a call produces data (where SSLEngineResult.Status.OK may be returned).
{noformat}

[~mattrpav], I saw that note in there as well and was going to dig in to it some more! **

It seems likely that's the issue. I added *jdk.tls.disabledAlgorithms=GCM* to *$JAVA_HOME/jre/lib/security/java.security* and confirmed that even with TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 jdk1.8.0_261 will fail intermittently so it's not specifically a problem with GCM.

{noformat}
   protected int secureRead(ByteBuffer plain) throws Exception {

        if (!(inputBuffer.position() != 0 && inputBuffer.hasRemaining()) || status == SSLEngineResult.Status.BUFFER_UNDERFLOW) {
            int bytesRead = channel.read(inputBuffer);

            if (bytesRead == 0 && !(sslEngine.getHandshakeStatus().equals(SSLEngineResult.HandshakeStatus.NEED_UNWRAP))) {
                return 0;
            }

            if (bytesRead == -1) {
                sslEngine.closeInbound();
                if (inputBuffer.position() == 0 || status == SSLEngineResult.Status.BUFFER_UNDERFLOW) {
                    return -1;
                }
            }
        }

        plain.clear();

        inputBuffer.flip();
        SSLEngineResult res;
        do {
            res = sslEngine.unwrap(inputBuffer, plain); // <-- exception thrown from this line
        } while (res.getStatus() == SSLEngineResult.Status.OK && res.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_UNWRAP
                && res.bytesProduced() == 0);

        if (res.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.FINISHED) {
            finishHandshake();
        }
      ...
{noformat}

Weird, AFAIR, I reproduced the issue with previous JDK 1.8 versions.

Worth to take a look. Anyway, I'm checking with JDK 11 (as I will push the PR about that).

Notes:

1. The secureRead() in the doInit() is needed to maintain connection cycling and connectivity when doing network bridges w/ auto+nio+ssl and other scenarios (see commit history on NIOSSLTransport, confirmed in chat (and his comment to [~tetlucas]'s original PR) w/ @cshannon and unit tests run by [~tetlucas]

2. The secureRead() fail is probably due to multi-threaded access in the not-thread-safe SSLEngine 

-or- 

3. The secureRead() needs improved return code checking out of SSLEngine per the JDK 1.8 updates in item (4) (see comments above)

I think this might be fixed by simply adding synchronized to serviceRead() or maybe just secureRead()

I am testing out a fix now but adding synchronized seems to fix it

AFAIR, I already tried this, but the test sometime failed (less often), but it was maybe a coincidence.

I guess it's valid even using JDK11. I'm asking because I'm ready to update/open the PR about cleanup, JDK11 build and related updates.

Well either way I think it makes sense to synchronize and not use a countdown latch to prevent concurrent access. I'm working on a PR now to make a small change. It seems to fix the issue for me locally so it should at least make it better.

Yes, I agree, it makes sense. I gonna test/check on my machines as well.

Actually I think the countdown latch still makes sense here so I just added the sync and pushed a PR.Â 

Commit 1654e6c79cfbc1ced5a8fa3f726a9f651560be9d in activemq's branch refs/heads/master from Christopher L. Shannon (cshannon)
[ https://gitbox.apache.org/repos/asf?p=activemq.git;h=1654e6c ]

AMQ-8169: Synchronize on serviceRead inside NIOSSLTransport

This is needed to prevent concurrent access to the SSLEngine during
initialization. This is a regression from when auto+nio+ssl was added.


Commit f2a3fbda2b1e00d1adbff7bb3b2d0bb9d9c0b719 in activemq's branch refs/heads/master from Jean-Baptiste OnofrÃ©
[ https://gitbox.apache.org/repos/asf?p=activemq.git;h=f2a3fbd ]

Merge pull request #620 from cshannon/AMQ-8169

AMQ-8169: Synchronize on serviceRead inside NIOSSLTransport

Commit f2a3fbda2b1e00d1adbff7bb3b2d0bb9d9c0b719 in activemq's branch refs/heads/master from Jean-Baptiste OnofrÃ©
[ https://gitbox.apache.org/repos/asf?p=activemq.git;h=f2a3fbd ]

Merge pull request #620 from cshannon/AMQ-8169

AMQ-8169: Synchronize on serviceRead inside NIOSSLTransport

Commit 8d34120d9310d93c83e9dfcd644331dc42dddd0c in activemq's branch refs/heads/activemq-5.16.x from Christopher L. Shannon (cshannon)
[ https://gitbox.apache.org/repos/asf?p=activemq.git;h=8d34120 ]

AMQ-8169: Synchronize on serviceRead inside NIOSSLTransport

This is needed to prevent concurrent access to the SSLEngine during
initialization. This is a regression from when auto+nio+ssl was added.

(cherry picked from commit 1654e6c79cfbc1ced5a8fa3f726a9f651560be9d)


Commit 54bdb7a1e46c280a2d001dee3a0b80c78bf17116 in activemq's branch refs/heads/activemq-5.15.x from Christopher L. Shannon (cshannon)
[ https://gitbox.apache.org/repos/asf?p=activemq.git;h=54bdb7a ]

AMQ-8169: Synchronize on serviceRead inside NIOSSLTransport

This is needed to prevent concurrent access to the SSLEngine during
initialization. This is a regression from when auto+nio+ssl was added.

(cherry picked from commit 1654e6c79cfbc1ced5a8fa3f726a9f651560be9d)


FYI - I ran into a deadlock after this fix, I created a new Jira to track the issue to fix it: AMQ-8287

[~cshannon] great! this was a troubling issue to have hang out there.

