For the {{errorCode}} we could write the exit code of the submitted user script into the {{.error}} file that is touched on failure. Any thoughts [~asalamon74], [~andras.piros]? 

{{Possible values of errorCode}} are listed in the [ErrorCode|[https://github.com/apache/oozie/blob/master/core/src/main/java/org/apache/oozie/ErrorCode.java].] So we cannot put the exit value of the process here (unless we create 255 new error codes). We can create one error code for this purpose, and store the error code in the error message field (with an additional text of course).

Storing the exit value int the {{.error}} file is a good idea. Checking the existence of the file will work like before, but we can use this info for filling out the error message. 

[~asalamon74] Thank you for your insight, so setting the {{errorCode}} is off the table. Do you think we could still provide some information via the {{wf:errorMessage(String message)}} function? If we stored the return value of the script in the {{.error}} file, could we return that via the {{errorMessage}} function in the case of SSH actions?

[~orova] I suggest creating one new error code with a message template like 'Script failed with exit value XX'. If you store the exit value in the {{.error}} file, you could use that information here. If someone needs more information, they can check the log files.

Taking this over [~orova] if you dont mind :)

[~matijhs], I can see in the review that you have uploaded multiple patches. Can you please upload your patch here as well, to trigger the precommit script, or this one is the last one?

PreCommit-OOZIE-Build started



Testing JIRA OOZIE-3405

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any star imports
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} Javadoc generation succeeded with the patch
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1{color} There are [23] new bugs found below threshold in total that must be fixed.
.    {color:green}+1{color} There are no new bugs found in [fluent-job/fluent-job-api].
.    {color:green}+1{color} There are no new bugs found in [docs].
.    {color:red}-1{color} There are [7] new bugs found below threshold in [core] that must be fixed, listing only the first [5] ones.
.    You can find the SpotBugs diff here (look for the red and orange ones): core/findbugs-new.html
.    The top [5] most important SpotBugs errors are:
.    At SshActionExecutor.java:[line 180]: This usage of java/lang/Runtime.exec([Ljava/lang/String;)Ljava/lang/Process; can be vulnerable to Command Injection
.    At SshActionExecutor.java:[line 145]: At SshActionExecutor.java:[line 144]
.    At SshActionExecutor.java:[line 180]: At SshActionExecutor.java:[line 148]
.    At SshActionExecutor.java:[line 200]: At SshActionExecutor.java:[line 199]
.    This use of javax/persistence/EntityManager.createQuery(Ljava/lang/String;)Ljavax/persistence/Query; can be vulnerable to SQL/JPQL injection: At SshActionExecutor.java:[line 204]
.    {color:green}+1{color} There are no new bugs found in [sharelib/spark].
.    {color:green}+1{color} There are no new bugs found in [sharelib/git].
.    {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
.    {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
.    {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
.    {color:green}+1{color} There are no new bugs found in [sharelib/pig].
.    {color:red}-1{color} There are [1] new bugs found below threshold in [sharelib/oozie] that must be fixed.
.    You can find the SpotBugs diff here (look for the red and orange ones): sharelib/oozie/findbugs-new.html
.    The most important SpotBugs errors are:
.    At ShellMain.java:[line 93]: This usage of java/lang/ProcessBuilder.&lt;init&gt;(Ljava/util/List;)V can be vulnerable to Command Injection
.    At ShellMain.java:[line 91]: At ShellMain.java:[line 90]
.    At ShellMain.java:[line 92]
.    {color:green}+1{color} There are no new bugs found in [sharelib/hive].
.    {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
.    {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
.    {color:red}-1{color} There are [15] new bugs found below threshold in [tools] that must be fixed, listing only the first [5] ones.
.    You can find the SpotBugs diff here (look for the red and orange ones): tools/findbugs-new.html
.    The top [5] most important SpotBugs errors are:
.    At OozieDBCLI.java:[line 584]: This use of java/sql/Statement.executeUpdate(Ljava/lang/String;)I can be vulnerable to SQL injection
.    At OozieDBCLI.java:[line 574]: At OozieDBCLI.java:[line 573]
.    At OozieDBCLI.java:[line 577]: At OozieDBCLI.java:[line 575]
.    At OozieDBCLI.java:[line 579]: At OozieDBCLI.java:[line 578]
.    At OozieDBCLI.java:[line 584]: At OozieDBCLI.java:[line 581]
.    {color:green}+1{color} There are no new bugs found in [server].
.    {color:green}+1{color} There are no new bugs found in [client].
.    {color:green}+1{color} There are no new bugs found in [examples].
.    {color:green}+1{color} There are no new bugs found in [webapp].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 3175
.    {color:orange}Tests failed at first run:{color}
TestCallableQueueService#testQueueSizeAfterNormalSubmission
.    For the complete list of flaky tests, see TEST-SUMMARY-FULL files.
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 
{color:green}+1 MODERNIZER{color}

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

. https://builds.apache.org/job/PreCommit-OOZIE-Build/1217/



Commit 6eb86cb30057f32dab0ab6b00ec5c751e7b38086 in oozie's branch refs/heads/master from Andras Salamon
[ https://gitbox.apache.org/repos/asf?p=oozie.git;h=6eb86cb ]

OOZIE-3405 SSH action shows empty error Message and Error code (matijhs via asalamon74)


Thanks for the contribution [~matijhs], +1, committed to master.

Closing issue; Oozie 5.2.0 is released

