I thought commons-logging was only a dependency because HTTPClient used it.

Right, I'll edit the description (again)

Removing fix version 1.3 since this feature can take a lot of time to implement the multi-part post functionality correctly.

With SOLR-865 coming in, we can use binary format for both searching and indexing. The solr-commons jar has already been removed and merged with the solrj jar. I think a lightweight client makes sense once again. The only gotcha is that we require slf4j as a dependency.

untested patch . 

Marking for 1.5

Bulk updating 240 Solr issues to set the Fix Version to "next" per the process outlined in this email...

http://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E

Selection criteria was "Unresolved" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.

A unique token for finding these 240 issues in the future: hossversioncleanup20100527

Bulk move 3.2 -> 3.3

3.4 -> 3.5

Here's a working patch based off the above patch:

https://github.com/charyorde/lucene-solr/blob/trunk/solr/solrj/src/java/org/apache/solr/client/solrj/impl/contrib/SimpleHttpSolrServer.java

This is great, Kayode. Would you be willing to donate your code to Solr? If so, please upload the java file, or even better, a patch file, to this ticket, and tick the ASF license checkbox.

Then we must decide how to package this. I think power users may still need the full commonsHTTP thing (if they require SSL support or other advanced stuff) but having an official client without all the deps would be nice.

Patch is attached as requested.

Having SolrJ without the deps will be great. 

It is possible to extend this to include other advanced features. I can work with the built-in implementations that makes use of common httpclient to understand the integration, then come up with similar implementation for this. 

I think we may need both, but for users not needing the extra power of commons-httpclient (such as SSL certificates) they could use the simple one and skip dependencies. Perhaps SolrJ could be split in two jars: solrj-core and solrj-extras, and have a policy that it's forbidden with external deps in core.

I think SimpleHttpSolrServer.java should just go in the same package/jar file, next to CommonsHttpSolrServer

A client can remove the other .jar files if they don't want the HTTP dependencies


An initial spec on this will help us understand how to repackage SolrJ. We can leave room for more opinions on this before having a final go.

solrj-core will have to provide integration points for contribs in order to give access to internal core features. I think splitting SolrJ like this will help get more codes and ideas in and ultimately, Solr will benefit.

Here is an updated patch.  It fixes:
 * license header
 * spacing
 * adds a test

BUT the test fails with:
{code}
1893 T23 C0 UPDATE [] webapp=/solr path=/update params={<delete><query>*:*</query></delete>=&wt=xml&version=2.2} {} 0 0
1893 T23 C0 oasc.SolrException.log SEVERE org.apache.solr.common.SolrException: missing content stream
		at org.apache.solr.handler.ContentStreamHandlerBase.handleRequestBody(ContentStreamHandlerBase.java:54)
		at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:129)
		at org.apache.solr.core.SolrCore.execute(SolrCore.java:1540)
{code}

Anyone want to take a look?




bulk fixing the version info for 4.0-ALPHA and 4.0 all affected issues have "hoss20120711-bulk-40-change" in comment

rmuir20120906-bulk-40-change

moving all 4.0 issues not touched in a month to 4.1

Bulk move 4.4 issues to 4.5 and 5.0

Move issue to Solr 4.9.

SolrJ hasn't used commons-httpclient in a LONG time.  Both commons-httpclient and httpcomponents were included in 3.6, but commons-httpclient was removed in 4.0.

This is the full list of dependencies when solrj 7.4.0 is specified with a dependency manager:

{noformat}
commons-io-2.5.jar
commons-math3-3.6.1.jar
httpclient-4.5.3.jar
httpcore-4.4.6.jar
httpmime-4.5.3.jar
zookeeper-3.4.11.jar
stax2-api-3.1.4.jar
woodstox-core-asl-4.4.1.jar
noggit-0.8.jar
jcl-over-slf4j-1.7.24.jar
slf4j-api-1.7.24.jar
{noformat}

There are XML and JSON libraries because SolrJ supports XML and JSON transfer formats.  If 7.x/8.x client objects are created with defaults and only the more mainstream methods are used, the XML and JSON dependencies could probably be removed, since SolrJ defaults to javabin transfer on both request and response.  If CloudSolrClient is not being used, then the zookeeper jar will not need to be included.

The decision to use the Apache httpclient was made a long time ago.  Now we are proceeding with a switch to the Jetty httpclient to get HTTP/2 support, which will greatly alter the dependency landscape.

I'll leave the decision to others about whether we need a client based on Java's built-in http; my guess is that such a client is NOT needed.  The work related to HTTP/2 is being spearheaded by [~caomanhdat] and [~markrmiller@gmail.com].


We now have 29 dependencies:
{noformat}
commons-io-2.6.jar
commons-math3-3.6.1.jar
http2-client-9.4.24.v20191120.jar
http2-common-9.4.24.v20191120.jar
http2-hpack-9.4.24.v20191120.jar
http2-http-client-transport-9.4.24.v20191120.jar
httpclient-4.5.10.jar
httpcore-4.4.12.jar
httpmime-4.5.10.jar
jcl-over-slf4j-1.7.24.jar
jetty-alpn-client-9.4.24.v20191120.jar
jetty-alpn-java-client-9.4.24.v20191120.jar
jetty-client-9.4.24.v20191120.jar
jetty-http-9.4.24.v20191120.jar
jetty-io-9.4.24.v20191120.jar
jetty-util-9.4.24.v20191120.jar
netty-buffer-4.1.29.Final.jar
netty-codec-4.1.29.Final.jar
netty-common-4.1.29.Final.jar
netty-handler-4.1.29.Final.jar
netty-resolver-4.1.29.Final.jar
netty-transport-4.1.29.Final.jar
netty-transport-native-epoll-4.1.29.Final.jar
netty-transport-native-unix-common-4.1.29.Final.jar
slf4j-api-1.7.24.jar
stax2-api-3.1.4.jar
woodstox-core-asl-4.4.1.jar
zookeeper-3.5.5.jar
zookeeper-jute-3.5.5.jar{noformat}
See [mailing list thread "SolrJ has 29 compile-time dependencies"|https://lists.apache.org/thread.html/r637d3a728102c262b3355e10c2b9a25731f7e7225d70f5dd87d56929%40%3Cdev.lucene.apache.org%3E] for more discussion.

It has been suggested to create a new client for 9.0 based on Java's built-in HTTP2 client, and without the Zookeeper dependencies. I guess that would let us skip most of the other dependencies as well?

What about all the classes in {{o.a.s.common}} - many of those depend on Zookeeper. But SolrJ code also depend on many of these such as {{common.util}}. How to break it up so that we do not need to depend on all or nothing for SolrJ?

ZK dependencies can be avoided by using already existing HTTP-based implementations of these APIs: {{ClusterStateProvider}}, {{NodeStateProvider}} and not yet implemented (but relatively easy to do) {{DistribStateManager}}. All these APIs were specifically created to isolate some areas of Solr from ZK.

{{CloudSolrClient}} can use these APIs to avoid using ZK APIs during runtime. The way {{CloudSolrClient}} is implemented now it still does have a compile-time ZK dependency but we could start from {{CloudSolrClient}} and simplify it to only use the {{ClusterStateProvider}} API and its HTP implementation.

Do those HTTP API's have a way to proactively advise the client of changes to aliases, available nodes etc? or do they require/conduct polling? Isn't one of the primary reasons we have zk because it allows the client to watch for changes? I've been meaning to look into this but keep getting distracted by other things so I better just mention it :). I remember having some difficulty with the http providers when the tests randomly selected them while I was working on TRAs, but they may have improved since then.

{{BaseHttpClusterProvider}} is still polling... or actually, caching the state for up to 5 sec and then refreshing it on the next request. I'm not sure how we could make it better using just HTTP.

Today it's caching with a TTL. How else can we optimize it?  

I'm not sure, but with HTTP2 we could have Solr server side push a message to the client that state has changed, over the same persistent connection?

A persistent connection does not make a lot of sense for a cluster with 100's of nodes. There is no guarantee that the node that the client is connected to will continue to be alive for long. In fact, there is no need for the client to be constantly up to date about the state of the cluster. It should make all requests optimistically

Should be enough with optimistic, yes. Gus' concern I guess was that if things change in ZK before a request, then something could go wrong? I assume that the worst that can happen is that SolrJ sends updates to a dead node (in which case it will retry to another node) or to a non-leader (in which case a new state will be cached for the next request?). What do you mean could go wrong with aliases Gus?

Optimistic caching works for `state.json` .

The requests send the zk versions of the cached state.json files along with the requests. if the versions are wrong the nodes respond with an invalid cache message. The client then fetches fresh state and makes the request again

One case that could become troublesome for TRA's is servicing requests to the TRA where the oldest collection has become deleted (automatically). The request would find the collection in it's cached notion of the TRA but not in the cluster. That 404 needs to not kill the entirely valid query... so with lazy/optimistic comes handling of stale state errors and decisions about retries. 

aliases are not really supported in the http only client. Probably , you should just {{touch}} all the relevant state.json files after the {{aliases.json}} is modified.

 

Let's not hijack this ticket for that purpose. The objective is to make SolrJ lighter not to add support for aliases

It's fine if we have an additional client not supporting aliases, but aliases (for lots of reasons other than TRA's) are part of solr, so the "lightweight" client needs to be clear that it's not a full replacement for the zookeeper based solrj client then. Not supporting Aliases makes re-indexing scenarios difficult too. The swap out of a newly indexed collection will be much more prone to some clients getting the old data for a while, which means that consumers have to be coded to handle both old and new schema without error. I'm only bringing this stuff up because I was getting the impression that this was being viewed as a full featured alternative to the existing client. 

This can be documented and maybe a ticket can be created to fix this. Even if the user has all the dependencies in the classpath, if they choose to use the HTTP only client , it may have this shortcoming. So , it has nothing to do with dependencies

{quote}aliases are not really supported in the http only client
{quote}
Is this really the case though? If you use {{CloudSolrClient}} with HTTP {{ClusterStateProvider}} aliases are supported and are lazily refreshed in a similar fashion like the cluster state.

Can the lightweight solrj client have lightweight *tests* too, using mocks instead of flaky tests that very slowly spin up multiple jetty servers?

I created SOLR-15730 to start modularizing solrj and splitting it in modules. This way solrj-core can be slim with few or no external dependencies (no XML, Zookeeper, Netty etc). Question is what SolrClient impl the {{solrj-core}} module will include. Now that we require JDK11 in 9.0, we can re-visit this idea of a no-dep SolrJ client using JDK's new Http client. That client could be the only supported in solrj-core, and you'd have to add {{solrj-jetty}} in order to get a more capable client for whatever reason, probably solr-core would use the netty client, but simple uses cases in apps would not need it?  WDYT?

So, maybe I'm just being obtuse here, but can someone clarify explicitly for me what the benefits of a slim dep-less SolrClient are?  Is the motivation around saving users diskspace or RAM?  Is it about forcing devs to consume transitive deps? Something else?

I'm sure a parallel set of dep-less SolrClients would benefit some users, but it also costs maintenance burden for us in terms of code, docs, and tests without adding any "net new" functionality.

I guess I just want to make sure there's no benefits I'm overlooking so that I can better judge that tradeoff.

Fewer dependencies means fewer version conflict problems with different versions the client may already have.  It also reduces vulnerability risks, which in my experience at work has become increasingly burdensome.

Exactly what David says. Our SolrJ is just growing fatter and fatter, and sometimes also depends on really outdated libs. This is a real pain for users, and I think it is quite common to add <exclude> rules for solrj deps that they don't need or use, or that they already have in their app in a newer version. A slim client won't have to support all features. It can be a place to start for most users, and then if they require more fancy features they could switch to the Jetty Http2SolrClient by explicitly including another dependency.

