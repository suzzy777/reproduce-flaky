Pretty uncomfortable indeed. :( 

It appears the relevant code here in [s3fs.cc |https://github.com/apache/arrow/blob/7f6c5aeb5388936709642e48aed6419d1e2144a6/cpp/src/arrow/filesystem/s3fs.cc#L2305] has determined that the bucket exists, but some other error has happened and doesn't appear it does anything to obfuscate it. Infact the ``GetError`` is right from AWS' C++ library: [Outcome.h | https://github.com/aws/aws-sdk-cpp/blob/b469499e96b957c478d121086272ea496c9b92e8/aws-cpp-sdk-core/include/aws/core/utils/Outcome.h#L147] Maybe just bad error code from AWS? 

Suggest maybe opening an issue with them, feel free to link to this issue/comment here in case I'm mistaken. :) 

[~vroomerify] I'm a bit curious how {{region="auto"}} worked for you, or if that's a mistake?

I don't see it documented anywhere, and when trying locally with that I get the same error as saying {{region="foobar"}} which is 

_AWS Error [code 99]: Couldn't resolve host name_

I'll make a PR to better document this, but on can use [resolve_s3_region |https://arrow.apache.org/docs/python/generated/pyarrow.fs.resolve_s3_region.html] to figure out the region of the bucket, or [S3FileSystem.from_uri |https://arrow.apache.org/docs/python/generated/pyarrow.fs.S3FileSystem.html#pyarrow.fs.S3FileSystem.from_uri] which is slightly better documented (what the URI can be) in the [R docs |https://arrow.apache.org/docs/r/articles/fs.html#uris]

 

In addition to better docs (ARROW-18238), we could maybe try to improve the error message by specifically checking for the case of a mismatching bucket when listing the bucket gives an error. 
The current code is basically the following (with my suggestion added in comments):

{code:cpp}
    auto outcome = impl_->client_->HeadBucket(req);
    if (!outcome.IsSuccess()) {
      if (!IsNotFound(outcome.GetError())) {
        // <--- here, if we are going to raise an error, we could check impl_->client_->GetBucketRegion(..) 
        //      with impl_->options().region and if not matching, adapt the error message to hint at this?
        return ErrorToStatus(
            std::forward_as_tuple("When getting information for bucket '", path.bucket,
                                  "': "),
            "HeadBucket", outcome.GetError());
      }
      info.set_type(FileType::NotFound);
      return info;
    }
{code}

Issue resolved by pull request 14601
[https://github.com/apache/arrow/pull/14601]

This issue has been migrated to [issue #33190|https://github.com/apache/arrow/issues/33190] on GitHub. Please see the [migration documentation|https://github.com/apache/arrow/issues/14542] for further details.

