I've started builds with all of the commits in question to see which one (if any) can reliably reproduce the error.

I'm not able to repro it locally. Are your builds reliably reproducing it? 

Nope. Looks like a flaky test.

I've been looking at this issue and I it's very hard to tell what's going on.
* There have been no recent code changes in the affected paths as far as I can tell.
* The diagnostics from the failed tests are not very useful.
* The issue does not reproduce for me locally or in Jenkins runs.

I'm going to improve the logging when there is such a test failure, so that when we hit this next time we have more useful info.

I suggest downgrading until we hit this again and have better logging.

Patch for better diagnostics: http://gerrit.cloudera.org:8080/4881

Downgrading issue until we hit it again.

The bug is actually easy to repro when increasing the number of test iterations. Looks like a use-after-free problem with memory allocated with Unsafe. Pretty sure it's a test framework problem and a product bug, but we will definitely hit this problem again in test runs.

commit 6d1a130d85562aad694ef78522e471b7cf025c30
Author: Alex Behm <alex.behm@cloudera.com>
Date:   Fri Oct 28 16:33:40 2016 -0700

    IMPALA-4377: Fix Java UDF-arg buffer use-after-free in UdfExecutorTest.
    
    The bug is simplest to explain with the old buggy test code below.
    I added comments in the code to explain the bug.
    
    // We used this for creating Text UDF arguments before invoking a UDF.
    Writable createText(String v) {
      // Note that 'w' does not own the native buffer backing the string,
      // explained below.
      ImpalaTextWritable w = new ImpalaTextWritable(createStringValue(v));
      return w;
    }
    
    long createStringValue(String v) {
      byte[] array = v.getBytes();
      long ptr = allocate(16);
      UnsafeUtil.UNSAFE.putInt(ptr + 8, 0);
      ImpalaStringWritable sw = new ImpalaStringWritable(ptr);
      // This allocates a new native buffer and sets it as a member
      // of 'sw'. The native buffer is freed in sw.finalize().
      // However, after this function there are no more references
      // to 'sw', so the GC is allowed to free it. When that happens
      // the UDF argument's native memory is gone and we get garbage
      // UDF evaluations.
      sw.set(array, 0, array.length);
      return ptr;
    }
    
    This change also includes logging improvements to make similar
    issues easier to diagnose in the future.
    
    Testing: The bug was easy to reproduce by increasing the number
    of runs in TestUdfImpl() to a large number. After this patch
    I could not reproduce the issue anymore.
    
    Change-Id: Id94130715e4f342e4dd2f6cd137ac1eb7b1ecf2d
    Reviewed-on: http://gerrit.cloudera.org:8080/4881
    Reviewed-by: Matthew Jacobs <mj@cloudera.com>
    Tested-by: Internal Jenkins


