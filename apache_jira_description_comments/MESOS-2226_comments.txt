I think there is a race between shutting down the test and actually running the kill hook.

Kapil, can you try to issue a killTask explicitly, await the status update and then check for the file's disappearance?

It's up for review: https://reviews.apache.org/r/29947/

[~karya] What was the conclusion? Did you end up with the catching the libprocess event in the test body (emitted by the hook code?)

Bumping to 0.23.0 - let me know if you plan to have it done by Sunday and we'll change the target version back.

Author: Kapil Arya <kapil@mesosphere.io>
Date:   Tue May 19 08:08:50 2015 -0700

    Fixed a race condition in hook tests for remove-executor hook.
    
    There is currently no good way to synchronize between the test body and
    the hook code, so we wire a promise (owned by the test code). The
    technical debt is covered by the following JIRA issue:
    
    https://issues.apache.org/jira/browse/MESOS-2641
    
    Review: https://reviews.apache.org/r/29947


The test still fails, as seen in:
https://builds.apache.org/job/Mesos/COMPILER=clang,LABEL=docker%7C%7CHadoop,OS=ubuntu%3A14.10/242/changes



[~karya] Any ideas to what may be going on here?

[~karya] Want to team up this week and look at this?

[~nnielsen]: Yes, let's do that.

Created a RR to handle the issue: https://reviews.apache.org/r/35756/

The current understanding is that the failure was due the race introduced
by the code not checking for TASK_RUNNING status update message
from the MockExecutor before stopping the scheduler driver. This caused
the Executor to be terminated prematurely (before the tasks were
launched) and thus the remove-executor hook was never called.

The fix was to wait for the TASK_RUNNING status update and then wait
for the shutdown() within MockExecutor. Only then we wait for the future
from remove-executor hook.

commit 6b00c3243324b89fe35f1f6699c6c2e4293a3f94
Author: Kapil Arya <kapil@mesosphere.io>
Date:   Tue Jun 23 15:47:34 2015 -0700

    Fixed a race condition in hook tests for remove-executor hook.

    Previously, the code was not checking for TASK_RUNNING status message
    from the MockExecutor before stopping the scheduler driver. This caused
    the Executor to be terminated prematurely (before the tasks were
    launched) and thus the remove-executor hook was never called. The fix
    was to wait for the TASK_RUNNING status update and then wait for the
    shutdown() within MockExecutor. Only then we wait for the future from
    remove-executor hook.

    Review: https://reviews.apache.org/r/35756

The test is still flaky:

https://builds.apache.org/job/Mesos/COMPILER=gcc,LABEL=docker%7C%7CHadoop,OS=centos%3A7/451/changes

Retargeting out of Mesos 0.23.0, since it is not critical.

https://reviews.apache.org/r/38574/

commit f6706e8921569ce5cda63585ca85d82a4d2459c7
Author: Niklas Nielsen <nik@qni.dk>
Date:   Wed Sep 23 15:36:52 2015 -0700

    Fixed race in hook self-message loop and reenabled VerifySlaveLaunchExecutorHook test
    
    Coordinating events across the library border is hard as we want to
    avoid exporting additional symbols between the test and the module code.
    To migitate this, the VerifySlaveLaunchExecutorHook used a technique
    where it creates a libprocess actors in-place and sends a message to
    itself. This can be caught by a message filter in the shared libprocess
    instance and the test code can synchronize over this, to make sure
    certain module code was executed.
    
    However, the in-place actor could (potentially) shutdown before the
    message was received (and thus, didn't execute the filter).
    
    This patch installs a message handler in the in-place actor and only
    shuts down the actors when the message has been received.
    
    Review: https://reviews.apache.org/r/38574

