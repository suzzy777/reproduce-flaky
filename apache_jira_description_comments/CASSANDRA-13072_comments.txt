problem still persists in 3.10 and can also be resolved with jna 4.4.0 http://central.maven.org/maven2/net/java/dev/jna/jna/4.4.0/

I pushed a patch for [2.2|https://github.com/apache/cassandra/compare/trunk...blerer:13072-2.2],  [3.0|https://github.com/apache/cassandra/compare/trunk...blerer:13072-3.0] and [3.11|https://github.com/apache/cassandra/compare/trunk...blerer:13072-3.11].
The 3 patches are the same. They just upgrade the JNA version to {{4.4.0}}.
I ran it on our internal CI and the results looks good.

[~ifesdjeen] could you review?  

fwiw, we upgraded to jna 4.3 in CASSANDRA-13300.

More importantly, I thought we didn't upgrade the dependencies until major revs, which in this case would be 3.11 and 4.0 (trunk). [~iamaleksey], what do you think about upgrading on 2.2 & 3.0? 

bq. More importantly, I thought we didn't upgrade the dependencies until major revs, which in this case would be 3.11 and 4.0 (trunk).

In case of problem like this one where some people cannot even start C*, I think it really makes sense to allow it. 

bq. What do you think about upgrading on 2.2 & 3.0?

It's more of a guideline than a hard rule; I agree with Benjamin here, it gotta be done in this case.

Also, +1.

FWIW, I don't disagree we need to do this, but for ppc64le, we spent a lot of time saying we shouldn't make changes for other platforms that didnt have public tests; we should try to get public tests for platforms, especially if we're going to bump JNA in a branch that is almost 2 years old (2.2).




I think we have to be a bit pragmatic. If upgrading JNA do not cause any problem in our test environment and that it allows some people to start C* on Linux-aarch64, without having to change the jar manually themselves, I do not see a good reason of not doing it.
I am not telling that we are, from now on, supporting Linux-aarch64. It is just that in the case of this ticket the risk associated to the change is pretty low and the benefit is high for some people.  

The problem is that to enable a new platform you put at risk hundreds or thousands of existing users that may be running 2.2, if there's some unreported bug or hidden incompatibility  in jna. Even if there's no bug, you're causing users to re-validate their deployment which is nontrivial (our testing isn't good enough for users with thousands of nodes to be sure that they won't have issues we didn't catch, this is a real step for most production deployments).

The pragmatic approach is not changing a library in 2.2, since it's been this way (unsupported) for 2 years since its release



I am not sure that I follow you. Your initial comment was about the fact that we do not have testing support for Linux-aarch64 and your new comment is about the fact that the testing is not good enough. 

If your problem is about 2.2. I will not argue about that and revert my commit in that branch.  

Committed into 2.2 at a2f742cd633ddd650b65f841c50ee96ee1da0ef5 and merged into 3.0, 3.11 and trunk.

The commit into 2.2 as then been reverted as discussed in the ticket at 8405f7366f8881951f76c5899cfa699063db7378 

Sorry, that's my fault for not being explicit. Here's my thinking:

2.2 and 3.0 are bug-fix-only. The only way this is a bug fix is if aarch64 is a supported platform.

It's not a supported platform because there are no tests for it.

Therefore, I don't see how this qualifies for either 2.2 or 3.0.

This belongs in 3.11 and trunk, unless someone can tell me why I'm wrong.

I assumed from wording of the ticket that this was a regression, in which case it potentially warranted a JNA upgrade. Otherwise we should probably go for trunk only, as 3.11 is bugfix only at this point.

Is this or is this not a regression though?

Since-version is 2.0.5, which suggests it's a regression.

2.1 is using {{jna-4.0.0}} though, so 2.2 didn't regress, 2.1 did.



Now there's no more jna.jar in trunk.
[~blerer], can you verify that?

EDIT: There's a {{lib/futures-2.1.6-py2.py3-none-any.zip}} but no {{jna-4.4.0.jar}} in trunk.

Sorry, for that. I fixed it.

Since jna upgrade to 4.4.0, it causes working the latest Cassandra 3.11 on stable RHEL6 OS difficult because {{jna-4.4.0}} depends on glibc >= 2.14 but glibc version is 2.12 there. 
In fact, we tried to upgrade from 3.9 to 3.11.0 on CentOS6.8 machine, it failed on restarting as follows:
{code}
ERROR [main] 2017-07-05 10:13:54,219 NativeLibraryLinux.java:62 - Failed to link the C library against JNA. Native methods will be unavailable.
java.lang.UnsatisfiedLinkError: /tmp/jna-118167/jna4905164479741635539.tmp: /lib64/libc.so.6: version `GLIBC_2.14' not found (required by /tmp/jna-118167/jna4905164479741635539.tmp)
{code}

According to [this elasticsearch's ticket|https://github.com/elastic/elasticsearch/issues/23640], we could choose some option.


Originally,  {{3.0}} and {{3.11}} were using {{4.0}} and {{trunk}} {{4.3}}.
I think we have 2 options: either go back to the original version: {{4.0.0}} or try to go to {{4.2.0}}/{{4.3.0}} in the hope that it works for everybody.
[~sunsuk7tp] Could you try with the {{4.3.0}} or {{4.2.0}} version and see if it works for you?


[~blerer] I tried it worked well with {{jna-4.2.2}} even in CentOS6 + glibc 2.12 but it didn't with {{jna-4.3.0}}.


I had a look at CASSANDRA-13300 which added support for {{jna-4.3.0}} in trunk and it seems, according to [~yukim] comment [here|https://issues.apache.org/jira/browse/CASSANDRA-13300?focusedCommentId=15896870&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15896870], that {{jna-4.2.2}} will work also fine with {{ppc64le}} machines.

I dig a bit and found out that {{jna-4.0.0}} has been bundled with C* since {{2.1 beta}}. So, I should not have upgraded {{jna}} in {{3.0}} (I should have follow your advise [~jjirsa] :-( ).

Now, the situation is a bit more tricky. If I rollback the jar to {{4.0.0}}, I will introduce a regression for {{Linux-aarch64}}. Due to that, it seems that my only safe option would be to change the JNA version to {{4.2.2}} as it seems to work for everybody. 

[~jjirsa] and [~jasobrown] what is your opinion?

Elasticsearch in the linked ticket just build their own JNA jar that linked against an older version of glibc. [~mshuler] any desire to set that up for an {{org.apache.cassandra.jna}} lib so that we can decouple that depedency? 

Short of that (or until that's setup), falling back to {{4.2.2}} seems like an ok option (not a great option, but an OK option).






I pushed some patches to change the JNA version to {{4.2.2}} in [3.0|https://github.com/apache/cassandra/compare/cassandra-3.0...blerer:13072-3.0],  [3.11|https://github.com/apache/cassandra/compare/cassandra-3.11...blerer:13072-3.11] and [trunk|https://github.com/apache/cassandra/compare/trunk...blerer:13072-trunk] . I ran the patch on CI an the failing DTests are known flaky tests. 

Looks like trunk link you have posted is broken (points to your fork trunk), I've checked [this one|https://github.com/apache/cassandra/compare/trunk...blerer:13072-trunkhttps://github.com/apache/cassandra/compare/trunk...blerer:13072-trunk]. CI looks good, too.

Checked the branches locally just to make sure the daemon starts, everything works as excepted.

LGTM, +1.

Committed to 3.0 as [00a777ec8ab701b843172e23a6cbdc4d6cf48f8d|https://github.com/apache/cassandra/commit/00a777ec8ab701b843172e23a6cbdc4d6cf48f8d], merged up to [3.11|https://github.com/apache/cassandra/commit/478d54db4611278863a1736faf3c0b4c92f4412b] and [trunk|https://github.com/apache/cassandra/commit/fd065714003a8820cb4acf3521b8df5c726ef4b2]

Misses CHANGES.txt update.

