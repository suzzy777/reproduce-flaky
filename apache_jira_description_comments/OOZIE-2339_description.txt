Users often complain about the XML they have to write for Oozie jobs.  It would be nice if they could write them in something like Java, but we don't want to have to maintain a separate Java API for this.  I was looking around and saw that JAXB might be the right thing here.  From what I can tell, it lets you create Java classes from XSD schemas.  So, we should be able to auto-generate a Java API for writing Oozie jobs, without having to really maintain it.

We should investigate if this is feasible and, if so, implement it.

Some useful looking links:
* [JAXB overview|https://en.wikipedia.org/wiki/Java_Architecture_for_XML_Binding]
* [JAXB description|https://jaxb.java.net/2.2.11/docs/ch03.html]
* [Maven JAXB plugin|https://java.net/projects/maven-jaxb2-plugin/pages/Home]
* [Apache Falcon|https://falcon.apache.org]

Key features:
* must have:
** inside a {{fluent-job-api}} artifact
** able to create workflow / coordinator / bundle definitions programmatically
** synchronizing each and every XSD change on rebuild
** can write {{workflow.xml}}, {{coordinator.xml}}, {{bundle.xml}}, and {{jobs.properties}} artifacts of every XSD version
** cloneability of workflow etc. {{Object}} s
** perform cross checks, e.g. that the workflow graph is a DAG
** only latest XSD versions should be supported as must have
* nice to have:
** XSD version(s) can be provided. When not provided, latest ones are considered as valid
** implement a [*fluent API*|https://en.wikipedia.org/wiki/Fluent_interface]
** have a Python / Jython / Py4J REPL to make it easy to experiment with also for data engineers / data scientists
** create documentation about usage
** can read {{workflow.xml}}, {{coordinator.xml}}, {{bundle.xml}}, and {{jobs.properties}} artifacts of every XSD version
** can convert between XSD versions
** support XSD change on the fly (within REPL)
** support HDFS reads / writes
** support dry run on an Oozie server to perform checks