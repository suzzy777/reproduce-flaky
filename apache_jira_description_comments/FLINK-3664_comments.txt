I'm writing a design for this now.

Attached is a first revision of a design.

(I had started on another related ticket FLINK-3613 but I think FLINK-3664 would be better to do first)

Hi [~tlisonbee], I like this proposal a lot. It would be a great feature to add.

A few comments on you proposal:
- If possible use a {{CombineFunction}} instead of a {{GroupCombineFunction}}. {{CombineFunction}} can be executed using a hash-based execution strategy whereas {{GroupCombineFunction}} must be evaluated with a sort-based strategy. Hash-based combiners are not supported yet but will hopefully be added soon (see PR #1517).
- We add new functionality such as {{summarize()}} to {{DataSetUtils}} and not directly to {{DataSet}}. {{DataSetUtils}} serves kind of as a staging area for new features where we are not sure yet whether we want to add them to the core API.
- It is certainly possible to implement the feature as {{CustomUnaryOperation}} but it is also fine to directly call the API methods.
- Do you think it makes sense to include (approximate) distinct counts for integer and String values or should this as a separate method?

Hi Fabian, thanks for the feedback.

Your first 3 comments all make sense - agreed.

On distinct counts, I thought about it but wasn't sure so I left it out for now.  For an approximate, the best idea I had was to choose some arbitrary number, maybe 100.  And then just report the exact number of distinct values if less than 100, or to say 100+ if greater than 100.  This would be nice for categorical variables that happen to have less than 100 different values.  But with enough rows and columns it could be expensive (even if Tuple is currently limited to 22) or at least relatively more expensive than the other calculations.  There isn't a perfect magic number.  I didn't like this idea all of the way.

Do you know of a nice way to approximate distinct counts?

Thanks.

The number of distinct values can be approximated with the HyperLogLog algorithm. 
I think a first version is fine without distinct value counts though. The approach sketched in the design doc looks quite extensible so that distinct counts and possibly other metrics can be added later.


I've completed a first pass for this implementation and would like any early feedback,
https://github.com/tlisonbee/flink/commit/2a7ad55d704bd3188ea8ae4cbfb7f40319474eef

(the important changes you might want to look at are in Aggregator, NumericSummaryAggregator, and DataSetUtils)

My "to do" list before submitting pull request:
- Blanket the code with comments, unit tests, and integration tests
- Incorporate any early feedback

Tasks I was planning on doing under a follow-on JIRA (not part of initial pull request):
- Add support for more data types (unless any others seem like must-have, I can do now)
- Add a summarize() method for GroupedDataSets

Thanks.

Hi Todd, thanks for sharing your work so far. I briefly skimmed the linked commit and it looks pretty good to me. My only comments right now would be to add a few more tests, but that's on your to do list anyways.

I'm on vacation right now and will return in a few days. It would be nice if you could continue with your work and open a PR when you think it is ready. Unless nobody else has had a detailed look, I'll review it when I'm back. 

Btw. this work is also relevant in the context of the currently on-going efforts to add support for SQL as it allows to gather basic statistics on a DataSet.

Thanks, Fabian

The summarize design code looks good so far.

Since it is part of the {{DataSetUtils}}, not breaking / altering any existing behavior, and it seems lightweight, it should be good to add this.

Feel free to open a pull request with this...

GitHub user tlisonbee opened a pull request:

    https://github.com/apache/flink/pull/1855

    [FLINK-3664] Create method to easily summarize a DataSet of Tuples

    Adding summarize() method in DataSetUtils that will supply a number of single pass statistics for DataSets of Tuples.
    
    Summary statistics depend on the type being summarized:
    
    - Numeric types (Integer, IntValue, Float, Double, etc): min, max, mean, variance, standard deviation, NaN count, Infinity count, totalCount, etc.
    - String, StringValue: minLength, maxLength, meanLength, emptyCount, totalCount
    - Boolean, BooleanValue: trueCount, falseCount, totalCount.
    
    Example usage:
    `Dataset<Tuple3<Double, String, Boolean>> input = // [...]`
    `Tuple3<NumericColumnSummary,StringColumnSummary, BooleanColumnSummary> summary = DataSetUtils.summarize(input)`
    
    `summary.f0.getStandardDeviation()`
    `summary.f1.getMaxLength()`
    
    Uses the Kahan summation algorithm to avoid numeric instability.  The algorithm is described in: "Scalable and Numerically Stable Descriptive Statistics in SystemML", Tian et al, International Conference on Data Engineering 2012.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tlisonbee/flink FLINK-3664

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/flink/pull/1855.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1855
    
----
commit 65f54df532829994a8be240a27b9138d01a186b5
Author: Todd Lisonbee <todd.lisonbee@intel.com>
Date:   2016-04-05T05:51:12Z

    [FLINK-3664] Create DataSetUtils method to easily summarize a DataSet of Tuples

----


Pull request is ready.  Please let me know if you'd like to see any other changes before merging.  Thanks.

I didn't have Travis CI setup with my github account so I added another commit so it would kick off a build.

Github user tlisonbee commented on the pull request:

    https://github.com/apache/flink/pull/1855#issuecomment-206453395
  
    Travis build failed but it seemed unrelated to my changes so I pulled the latest master to see if it would fix.


GitHub user tlisonbee opened a pull request:

    https://github.com/apache/flink/pull/1859

    [FLINK-3664] Create method to easily summarize a DataSet of Tuples

    Adding summarize() method in DataSetUtils that will supply a number of single pass statistics for DataSets of Tuples.
    
    Summary statistics depend on the type being summarized:
    
    - Numeric types (Integer, IntValue, Float, Double, etc): min, max, mean, variance, standard deviation, NaN count, Infinity count, totalCount, etc.
    - String, StringValue: minLength, maxLength, meanLength, emptyCount, totalCount
    - Boolean, BooleanValue: trueCount, falseCount, totalCount.
    
    Example usage:
    `Dataset<Tuple3<Double, String, Boolean>> input = // [...]`
    `Tuple3<NumericColumnSummary,StringColumnSummary, BooleanColumnSummary> summary = DataSetUtils.summarize(input)`
    
    `summary.f0.getStandardDeviation()`
    `summary.f1.getMaxLength()`
    
    Uses the Kahan summation algorithm to avoid numeric instability.  The algorithm is described in: "Scalable and Numerically Stable Descriptive Statistics in SystemML", Tian et al, International Conference on Data Engineering 2012.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tlisonbee/flink FLINK-3664c

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/flink/pull/1859.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1859
    
----
commit 59e6ebad797fcbb4a81530dd75542f1ea65ae61e
Author: Todd Lisonbee <todd.lisonbee@intel.com>
Date:   2016-04-06T09:44:53Z

    [FLINK-3664] Create DataSetUtils method to easily summarize a DataSet of Tuples

----


Github user tlisonbee commented on the pull request:

    https://github.com/apache/flink/pull/1855#issuecomment-206637922
  
    Closing.  My build was failing because I missed a header on one file.  I went ahead and opened a new pull request for this change with a clean history.


Github user tlisonbee closed the pull request at:

    https://github.com/apache/flink/pull/1855


I figured out my build problem (I missed an Apache header on one file).

I went ahead and closed the original pull request so that I could open a new one with a clean commit history.

Here is the new one,
https://github.com/apache/flink/pull/1859

I think it is ready to merge, we'll see if Travis agrees.  Thanks.

Github user tlisonbee commented on the pull request:

    https://github.com/apache/flink/pull/1859#issuecomment-207017188
  
    All of the builds are passing except for one, there is a failure in what seems like a flaky Kafka test.
    
    Does anyone have suggestions on how to get past this?
    
    Thanks.


Github user zentol commented on the pull request:

    https://github.com/apache/flink/pull/1859#issuecomment-207049231
  
    It is indeed a flaky kafka test.
    
    You don't have to worry about it, the majority of build passed we're good on that front.


Github user StephanEwen commented on the pull request:

    https://github.com/apache/flink/pull/1859#issuecomment-209044679
  
    Looks good to me, +1 to merge this
    
    BTW: I am pushing a set of fixes to the Kafka Consumers. Hope that fixes the flakyness of the test here as well...


Github user zentol commented on the pull request:

    https://github.com/apache/flink/pull/1859#issuecomment-211407719
  
    Merging.


Github user asfgit closed the pull request at:

    https://github.com/apache/flink/pull/1859


Implemented in 7eb58773eeccd248127124ded64383055842668b

