I think both of the two solutions mentioned in the description have problem.
 # For the timeout solution, I think it can handle the issue that framework issues kill task request, but `docker stop` executed by the Docker executor can not stop the Docker container. However, there is a case that it can not handle: the Docker container exits itself, due to that Docker 1.13 issue, Docker executor will not be aware of it (i.e., `docker run` will not return), so user will see the task is still running until they issue a kill task request.
 # For the wait pid solution, I do not think we can wait on the container's pid because the container process is not the direct child of the Docker executor.

Good point [~qianzhang] - adding a timeout would make sure that a user can kill the task, but it would not proactively notice that the container has already exited.

Since the Docker daemon itself does not know the container has exited, we would need to use some "out-of-band" method to discover this. Do you know of such a method?

If we can't come up with a good way to catch the container exit, then maybe we should settle for a timeout which allows stuck tasks to be killed. This is also a more general issue with Docker containers when the Docker daemon is hung on an agent. If the Docker daemon is not responsive, tasks launched with the Docker executor cannot be killed. If we add a timeout after which the executor commits suicide, then we could make sure that the executors for all such tasks will be killed, but I'm afraid I don't know enough yet about Docker's recovery behavior to say whether or not we could rely on the container being cleaned up, whenever the Docker daemon is successfully recovered.

[~greggomann], I had a discussion with [~vinodkone], he suggests we can still go with the wait pid solution. Although the container process is not the child process of Docker executor, we can still call `process::reap()` in Docker executor to reap the container process, and once the container process exits, the Docker executor will be notified (but without the actual exit status of the container process).

Here is the RR: https://reviews.apache.org/r/65518/

commit a7714536fad1140fd0c07c47e32b40e9ed00a3c3
Author: Qian Zhang 
Date: Mon Feb 5 20:42:07 2018 +0800

Reaped the container process directly in Docker executor.
 
 Due to a Docker issue (https://github.com/moby/moby/issues/33820),
 Docker daemon can fail to catch a container exit, i.e., the container
 process has already exited but the command `docker ps` shows the
 container still running, this will lead to the "docker run" command
 that we execute in Docker executor never returning, and it will also
 cause the `docker stop` command takes no effect, i.e., it will return
 without error but `docker ps` shows the container still running, so
 the task will stuck in `TASK_KILLING` state.
 
 To workaround this Docker issue, in this patch we made Docker executor
 reaps the container process directly so Docker executor will be notified
 once the container process exits.
 
 Review: https://reviews.apache.org/r/65518

Commit 1daf6cb03
Author: Akash Gupta akash-gupta@hotmail.com
Date:   Sun Feb 25 13:37:42 2018 -0800
Windows: Fixed flaky Docker command health check test.

The `DockerContainerizerHealthCheckTest.ROOT_DOCKER_
DockerHealthStatusChange` test was flaky on Windows, because
the Docker executor manually reaps the container exit code in
case that `docker run` fails to get the exit code. This logic
doesn't work on Windows, since the process might not be visible to
the container host machine, causing `TASK_FAILED` to get sent. By
removing the reaping logic on Windows, the test is much more reliable.

Review: https://reviews.apache.org/r/65733/

