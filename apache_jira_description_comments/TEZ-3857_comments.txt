v1 patch that simply returns in retroactive transition if vertex is leaf vertex.

{color:green}+1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12893348/TEZ-3857.001.patch
  against master revision bbe0f96.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/2670//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/2670//console

This message is automatically generated.

[~jeagles], [~aplusplus], request for review. Thanks a lot!

Thanks for the report and patch!

The fix will work for the speculative execution scenario that caused this to break, but the change will also fail to catch some error states that were caught before.  For example, if this is a task corresponding to a leaf vertex but it receives an attempt failed event for the task attempt that transitioned it to SUCCEEDED then something is probably wrong and IMHO we shouldn't ignore that.

[~jlowe] The only scenario that might happens is, when a vertex write output and has downstream at the same time. Do we really have this case?

If a vertex has downstream tasks then it's not a leaf vertex, correct?  The downstream tasks need to be able to retroactively fail any upstream task due to fetch failures.

I don't expect a task attempt for a leaf task that already succeeded to fail, but it's like an assert -- something to check that _shouldn't_ ever fail the test, but you certainly want to know if it did.  I guess to frame it another way: if this not-supposed-to-happen scenario did somehow happen, do we want to ignore it?  If it's hard to detect then sure, we can decide it's not worth it.  But in this case it's easy to do and already being done later in the same transition:
{code}
      if (task.getInternalState() == TaskStateInternal.SUCCEEDED &&
          !failedAttemptId.equals(task.successfulAttempt)) {
        // don't allow a different task attempt to override a previous
        // succeeded state and mark the attempt status as done
        task.taskAttemptStatus.put(failedAttemptId.getId(), true);
        return TaskStateInternal.SUCCEEDED;
      }
{code}

Speaking of which, there's also the transition code that's updating not only taskAttemptStatus but also informing the node bookkeeping of the failure.  Arguably we should continue to process that logic even for leaf tasks.  The leaf check probably should not occur until just before we do the {{unSucceed}} and subsequent logic.


So your main concern is we should keep the sentinel even it cannot happen based on current implementation. That's fair enough. But keeping the rest part of transition is definitely necessary.

Thank you for the comments [~jlowe], [~aplusplus]. I have basically moved the leafVertex check down before the unSucceed and schedulingCausalTA calls and updated the test a bit to cover this case. This does leave the task.failedAttempts and vertex.failedTaskAttemptCount inconsistent as they wont be incremented. We could do that to be safe but they are used for history events and vertex progress which is not quite that relevant once the DAG state machine processes the internal error and fails. Let me know if you have more thoughts on this.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12894220/TEZ-3857.002.patch
  against master revision 8247a64.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in :
                   org.apache.tez.runtime.library.common.writers.TestUnorderedPartitionedKVWriter
                  org.apache.tez.dag.app.rm.TestTaskScheduler
                  org.apache.tez.analyzer.TestAnalyzer

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/2675//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/2675//console

This message is automatically generated.

Re posting same patch again to trigger the precommit. I don't think the test failures are related though. They have failed in the past in a flaky manner but just making sure if at all.

{color:green}+1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12894802/TEZ-3857.003.patch
  against master revision 87d7c14.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/2678//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/2678//console

This message is automatically generated.

Request for review [~jlowe]/[~aplusplus]. Thanks a lot!

Thanks for updating the patch!

+1 lgtm.


With a binding +1, committing this patch shortly.

Thank you for all the reviews [~jlowe], [~aplusplus]! Committed to master.

