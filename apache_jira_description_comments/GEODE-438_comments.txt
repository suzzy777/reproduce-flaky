This bug is old enough that the line number no longer match up.
And the assertion message "verify critical state" comes from two places in the test that are close to the line number given.
And the bug does not say on what revision of the code this failure happened.
For both of these assertions the test only waits 3 seconds which might cause a failure on a heavily loaded machine.
I'm going to fix the assertions so they have difference messages and wait longer and then we will see if this test reproduces.


Commit 0c9510068522c778e1bd20385e3965a2b5a17578 in incubator-geode's branch refs/heads/feature/GEODE-409 from [~dschneider]
[ https://git-wip-us.apache.org/repos/asf?p=incubator-geode.git;h=0c95100 ]

GEODE-438: wait longer for event

Also the assertion messages now describe what the
test expects.


Reproduced on rev:33cb42bd5653fd221804e3082db8b228bcc962cb

{noformat}
dunit.RMIException: While invoking com.gemstone.gemfire.cache.management.MemoryThresholdsOffHeapDUnitTest$16.call in VM 1 running on Host cc2-rh6.gemstone.com with 4 VMs
	at dunit.VM.invoke(VM.java:369)
	at dunit.VM.invoke(VM.java:312)
	at dunit.VM.invoke(VM.java:280)
	at com.gemstone.gemfire.cache.management.MemoryThresholdsOffHeapDUnitTest.testDRLoadRejection(MemoryThresholdsOffHeapDUnitTest.java:568)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:252)
	at junit.framework.TestSuite.run(TestSuite.java:247)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:105)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:56)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:64)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:50)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
	at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:106)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:360)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54)
	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: junit.framework.AssertionFailedError: Event never occurred after 30000 ms: expected region com.gemstone.gemfire.internal.cache.DistributedRegion[path='/MemoryThresholdsOffHeapDUnitTest_testDRLoadRejection';scope=DISTRIBUTED_ACK';dataPolicy=REPLICATE; concurrencyChecksEnabled] to unset memoryThreshold
	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.TestCase.fail(TestCase.java:227)
	at dunit.DistributedTestCase.waitForCriterion(DistributedTestCase.java:1171)
	at com.gemstone.gemfire.cache.management.MemoryThresholdsOffHeapDUnitTest$16.call(MemoryThresholdsOffHeapDUnitTest.java:620)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at hydra.MethExecutor.executeObject(MethExecutor.java:267)
	at dunit.standalone.RemoteDUnitVM.executeMethodOnObject(RemoteDUnitVM.java:77)
	at sun.reflect.GeneratedMethodAccessor9.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:323)
	at sun.rmi.transport.Transport$1.run(Transport.java:200)
	at sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$241(TCPTransport.java:683)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$1/1400361479.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682)
{noformat}

Commit fc7811f369d6ffac004cf110a9d87037014b0ac6 in incubator-geode's branch refs/heads/develop from [~dschneider]
[ https://git-wip-us.apache.org/repos/asf?p=incubator-geode.git;h=fc7811f ]

GEODE-438: wait longer in test validation code

Four places still existed that only waited for 3 seconds.
One of those was the last failure of this test.
Now the test waits 30 seconds.


The test failed with a different cause this time on revision: 8c4e749877bbd187f8196434458ee6804f6b4745

{noformat}
dunit.RMIException: While invoking com.gemstone.gemfire.cache.management.MemoryThresholdsOffHeapDUnitTest$18.call in VM 2 running on Host cc2-rh6.gemstone.com with 4 VMs
	at dunit.VM.invoke(VM.java:369)
	at dunit.VM.invoke(VM.java:312)
	at dunit.VM.invoke(VM.java:280)
	at com.gemstone.gemfire.cache.management.MemoryThresholdsOffHeapDUnitTest.testDRLoadRejection(MemoryThresholdsOffHeapDUnitTest.java:647)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
...
...
Caused by: junit.framework.AssertionFailedError
	at junit.framework.Assert.fail(Assert.java:55)
	at junit.framework.Assert.assertTrue(Assert.java:22)
	at junit.framework.Assert.assertFalse(Assert.java:39)
	at junit.framework.Assert.assertFalse(Assert.java:47)
	at junit.framework.TestCase.assertFalse(TestCase.java:219)
	at com.gemstone.gemfire.cache.management.MemoryThresholdsOffHeapDUnitTest$18.call(MemoryThresholdsOffHeapDUnitTest.java:651)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)

{noformat}


looks the same as GEODE-500

This was seen again with this stack on git rev 781bd8d74e4ffcfbb12b286dd7a582a1de586f78:
{noformat}
dunit.RMIException: While invoking com.gemstone.gemfire.cache.management.MemoryThresholdsOffHeapDUnitTest$18.call in VM 2 running on Host timor.gemstone.com with 4 VMs
	at dunit.VM.invoke(VM.java:369)
	at dunit.VM.invoke(VM.java:312)
	at dunit.VM.invoke(VM.java:280)
	at com.gemstone.gemfire.cache.management.MemoryThresholdsOffHeapDUnitTest.testDRLoadRejection(MemoryThresholdsOffHeapDUnitTest.java:647)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:252)
	at junit.framework.TestSuite.run(TestSuite.java:247)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:105)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:56)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:64)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:50)
	at sun.reflect.GeneratedMethodAccessor123.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
	at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:106)
	at sun.reflect.GeneratedMethodAccessor122.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:360)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54)
	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: junit.framework.AssertionFailedError: Event never occurred after 30000 ms: expected region com.gemstone.gemfire.internal.cache.DistributedRegion[path='/MemoryThresholdsOffHeapDUnitTest_testDRLoadRejection';scope=DISTRIBUTED_ACK';dataPolicy=REPLICATE; concurrencyChecksEnabled] to unset memoryThreshold
	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.TestCase.fail(TestCase.java:227)
	at dunit.DistributedTestCase.waitForCriterion(DistributedTestCase.java:1171)
	at com.gemstone.gemfire.cache.management.MemoryThresholdsOffHeapDUnitTest$18.call(MemoryThresholdsOffHeapDUnitTest.java:684)
{noformat}

In the most recent failure the test does the following:
1. add a large item to an off-heap region and confirm that the region sets memoryThresholdReached to true.
2. destroy the large item and confirm that the region sets memoryThresholdReached back to false.

Step 2 is what fails.


The stdout gives a little bit more info on why step 2 failed. vm_2 is the jvm in which this destroy happens and you can see its OffHeapMemoryListener said that vm_2 is below critical. But both vm_1 and vm_2 need to go below critical (they both host the replicate region) for the replicate to set memoryThresholdReached back to false. And vm_1 never does log that it is going below critical.

[vm_2][info 2015/11/12 20:18:31.340 PST <RMI TCP Connection(38)-10.118.32.89> tid=0x17dc] Received method: com.gemstone.gemfire.cache.management.MemoryThresholdsOffHeapDUnitTest$18.call with 0 args on object: "test DistributedRegion netLoad"
[vm_2]
[vm_2][error 2015/11/12 20:18:31.346 PST <Thread-4817 OffHeapMemoryListener> tid=0x2b04] Member: timor(15392)<v1>:45598 above off-heap critical threshold
[vm_2]
[vm_2][error 2015/11/12 20:18:31.348 PST <Thread-4817 OffHeapMemoryListener> tid=0x2b04] Member: timor(15392)<v1>:45598 below off-heap critical threshold
[vm_2]
[vm_1][error 2015/11/12 20:18:31.348 PST <Thread-5469 OffHeapMemoryListener> tid=0x3504] Member: timor(15387)<v0>:34268 above off-heap critical threshold
[vm_1]
[vm_2][info 2015/11/12 20:19:01.351 PST <RMI TCP Connection(38)-10.118.32.89> tid=0x17dc] Got result: EXCEPTION_OCCURRED
[vm_2]junit.framework.AssertionFailedError: Event never occurred after 30000 ms: expected region com.gemstone.gemfire.internal.cache.DistributedRegion[path='/MemoryThresholdsOffHeapDUnitTest_testDRLoadRejection';scope=DISTRIBUTED_ACK';dataPolicy=REPLICATE; concurrencyChecksEnabled] to unset memoryThreshold
[vm_2]	at junit.framework.Assert.fail(Assert.java:57)
[vm_2]	at junit.framework.TestCase.fail(TestCase.java:227)
[vm_2]	at dunit.DistributedTestCase.waitForCriterion(DistributedTestCase.java:1171)
[vm_2]	at com.gemstone.gemfire.cache.management.MemoryThresholdsOffHeapDUnitTest$18.call(MemoryThresholdsOffHeapDUnitTest.java:684)

When I run this test it always passes. When this put and destroy is done what I always see is:
1. vm2: put
1.a. vm2: above critical
1.b. vm1: above critical
2. vm2: destroy
2.a. vm1: below critical
2.b. vm2: below critical

In the failure log 2.b happens before 1.b.

When vm2 does the put it does the following:
1. allocate local off-heap memory for the put
2. process the memory event locally (async)
3. as part of this processing send a profile (async) to vm1
4. distributed the put to vm1 (sync)
4.a. vm1 allocates local off-heap memory for the put
4.c. vm1 process the memory event locally (async)
4.c.1 as part of processing event locally vm1 sends a profile (async) to vm2
4.d. vm1 sends an ack to vm2

In the failure case "vm2 below critical" will not happen until it does the destroy. We see this happen before "vm1 above critical" which in this list is done by 4.c which is async. 


This failure reproduced in:

Geode_develop_DistributedTests Build #588 (Nov 15, 2015 5:09:08 PM)
Revision: 88da702593157d8a0c014295cab16149fc088dfc

{noformat}
dunit.RMIException: While invoking com.gemstone.gemfire.cache.management.MemoryThresholdsOffHeapDUnitTest$18.call in VM 2 running on Host timor.gemstone.com with 4 VMs
	at dunit.VM.invoke(VM.java:369)
	at dunit.VM.invoke(VM.java:312)
	at dunit.VM.invoke(VM.java:280)
	at com.gemstone.gemfire.cache.management.MemoryThresholdsOffHeapDUnitTest.testDRLoadRejection(MemoryThresholdsOffHeapDUnitTest.java:647)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:252)
	at junit.framework.TestSuite.run(TestSuite.java:247)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:105)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:56)
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:64)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:50)
	at sun.reflect.GeneratedMethodAccessor123.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
	at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:106)
	at sun.reflect.GeneratedMethodAccessor122.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:360)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54)
	at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: junit.framework.AssertionFailedError: Event never occurred after 30000 ms: expected region com.gemstone.gemfire.internal.cache.DistributedRegion[path='/MemoryThresholdsOffHeapDUnitTest_testDRLoadRejection';scope=DISTRIBUTED_ACK';dataPolicy=REPLICATE; concurrencyChecksEnabled] to unset memoryThreshold
	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.TestCase.fail(TestCase.java:227)
	at dunit.DistributedTestCase.waitForCriterion(DistributedTestCase.java:1171)
	at com.gemstone.gemfire.cache.management.MemoryThresholdsOffHeapDUnitTest$18.call(MemoryThresholdsOffHeapDUnitTest.java:684)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at hydra.MethExecutor.executeObject(MethExecutor.java:267)
	at dunit.standalone.RemoteDUnitVM.executeMethodOnObject(RemoteDUnitVM.java:77)
	at sun.reflect.GeneratedMethodAccessor7.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:323)
	at sun.rmi.transport.Transport$1.run(Transport.java:200)
	at sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$241(TCPTransport.java:683)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$1/820051615.run(Unknown Source)
	at java.security.AccessController.doPrivileged(Native Method)
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682)
	... 3 more
{noformat}

I think the cause of this bug (and other off-heap resource manager intermittent failures) is the following race.
If a put is followed by a destroy then it is possible for the destroy to think it does not need to deliver and event about the memory change. In OffHeapMemoryMonitor.updateMemoryUsed a check is done it see if it might deliver an event. It calls "mightSendEvent". This method uses OffHeapMemoryMonitor.mostRecentEvent. But it is possible that mostRecentEvent has not yet been updated. For example in when doing the put followed by a destroy we may not have set "mostRecentEvent" to the put event at the time we are asking if the destroy needs to deliver an event. So if the pre-put state was normal with 800k of off-heap memory and the post-destroy state is normal with 800k then it think no event is needed. The problem is that "mostRecentEvent" is updated async but the "mightSendEvent" check is sync.

To fix this "mightSendEvent" needs to check against state that is updated synchronously which is currently the "offHeapMemoryUsageListener.offHeapMemoryUsed" instance variable.


The intermittent failure was caused by the order of the put and destroy being delivered to the OffHeapMemoryUsageListener being switched on the remote member. This caused the last event it delivered to be the put one so it stayed critical. The destroy one was ignored because it arrived early.

The fix is to have the listener wake up frequently and do a quick check to see if an event needs to be sent.
This happens in a background thread and the check is cheap so it is currently done every 10 milliseconds.
This allows the threads that are actually doing off-heap allocations and frees to do less work. They do a quick
check to see if it looks like their change might have caused an event to be needed. If so they simply tell the
listener to deliver an event. But the listener always goes back to the MemoryAllocator and asks it how much
memory is currently allocated to ensure that the event it delivers now reflects the current off-heap memory usage.

Commit 59ab8cf5aef00dddb9587ae9b7964de277630d35 in incubator-geode's branch refs/heads/develop from [~dschneider]
[ https://git-wip-us.apache.org/repos/asf?p=incubator-geode.git;h=59ab8cf ]

GEODE-438: fix race in OffHeapMemoryMonitor
This fix also fixes GEODE-488 and GEODE-551.
Also fixed test to use standard locators for connectivity
instead of an mcast-port.


This test failed in a private build
revision: 4fed7d841bc3956fb913630597378bb97f20e7bf

Flaky: test pollution, async actions, time sensitive, waitForCriterion, TODO: consider disconnect DS in setup

This issue has either failed to reproduce or been fixed systemically elsewhere (e.g. improving port selection and timeouts).  Closing but please reopen if needed.

Seen on support/1.12 in [DistributedTestOpenJDK8 #59|https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-support-1-12-main/jobs/DistributedTestOpenJDK8/builds/59] ... see [test results|http://files.apachegeode-ci.info/builds/apache-support-1-12-main/1.12.3-build.0239/test-results/distributedTest/1621594180/] or download [artifacts|http://files.apachegeode-ci.info/builds/apache-support-1-12-main/1.12.3-build.0239/test-artifacts/1621594180/distributedtestfiles-OpenJDK8-1.12.3-build.0239.tgz].

Seen in [distributed-test-openjdk8 #31|https://concourse.apachegeode-ci.info/teams/main/pipelines/apache-develop-main/jobs/distributed-test-openjdk8/builds/31] ... see [test results|http://files.apachegeode-ci.info/builds/apache-develop-main/1.15.0-build.0308/test-results/distributedTest/1623205633/] or download [artifacts|http://files.apachegeode-ci.info/builds/apache-develop-main/1.15.0-build.0308/test-artifacts/1623205633/distributedtestfiles-openjdk8-1.15.0-build.0308.tgz].

GEODE-438 has been replaced by GEODE-7822.

