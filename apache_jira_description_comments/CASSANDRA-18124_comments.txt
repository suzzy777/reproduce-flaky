CC [~maulin.vasavada], [~stefan.miklosovic] and [~jonmeredith] 

If we want to allow the null value we need to mark the parameter with @Nullable in the codebase as the default value is not null 

 

[~e.dimitrova] I've encountered this issue recently, and might have a patch around. I can submit a fix, as you mention we need to mark the param with {{@Nullable}}

[~frankgh] Sure, it would be great if you already have it with the tests, etc. Thank you!

The use and default value of {{truststore_password}} should also be reviewed in order to avoid startup warnings like:
{code}
PEMBasedSslContextFactory.java:125 - PEM based truststore should not be using password. Ignoring the given value in 'truststore_password' configuration.
{code}


SO [~frankgh] Did we make any progress on this? Do you want my help on anything? 

Any progress? [~maulin.vasavada]  [~frankgh] 

It would be great if this is not forgotten.

[~smiklosovic] I'll take this. Sorry last couple of weeks have been crazy.

One question- Since the trunk was broken for example/ssl-factory, what should be the base I. can use to build for this if the trunk is still broken?

I think you should base this patch off of 4.1 and trunk, regardless of other tickets.

Thanks [~maulin.vasavada]. I won't be able to get to this for at least a couple of weeks.

Thanks [~brandon.williams] . [~smiklosovic] While modifying the code to allow null password configuration for the PEM I am running into a challenge due to the default logic to fallback to `keystore_password` configuration in case `key_password` configuration (created for the PEM) is null/missing. Due to that fallback logic we have to change default for the `keystore_password` also to be null (specifically in EncryptionOptions.java). I think we have two options-
 # Drop the fallback logic reading the `keystore_password` in case of PEM keys.
 ## This fallback logic was done primarily to support a use-case for PEM keys provided in a file with existing `keystore` configuration in which case it also makes sense to continue read the key password from the `keystore_password`configuration.
 # Make `keystore_password` nullable configuration which means removing the default value injected by EncryptionOptions.java
 ## I think we can make this nullable since practically operators might not have JKS keystores without the passwords except for a missed-configuration use-case AND for PEM it makes perfect sense to allow null password for the unencrypted keys.
 ## However, since we are changing the default for an older configuration, we have to give more thoughts on its effect on existing systems.

Let me see what 2nd option entails (in terms of tests etc) while you provide you thoughts on this.

So far it looks like 1st option is more convoluted. 2nd option is much cleaner and simple changes. If we fail to provide `keystore_password` for the JKS, it will fail with the new changes (throws NPE since the FileBasedSslContextFactory.java doesn't expect null for the password). I can add validation in the FileBasedSslContextFactory for the null keystore password to avoid NPE.

I guess the second approach is fine. Hard to tell without having the code to see the changes. Would you mind to prepare a PR for your 2nd idea?

Sure, soon enough. I was on instaclustr branch (inherited from the other issue's discussion). I can quickly raise a PR there while I work on the 4.1 patch as per Brandon's suggestion.

[~smiklosovic] Here you go [-https://github.com/apache/cassandra/pull/2225-]

Thank you very much, [~maulin.vasavada]!

[~rtib] do you have any capacity to try the above pull request and verify it all works for you as well?

Sorry for the delay, I was busy the last few days. Of course, I'll have a look and test it.

I've tested it, looks good. I haven't tested with intermediate CA certificates for now, but that wasn't the issue either.

One small suggestion: currently the configuration example can only be found on the website, would you mind to put configuration examples using PEMBasedSslContextFactory into the comments of cassandra.yaml? That would lower the setup threshold.

One minor issue: nodetool is complaining about configuration
{code}
% bin/nodetool stopdaemon
WARN  08:50:50,063 Only 20,213GiB free across all data volumes. Consider adding more capacity to your cluster or removing obsolete snapshots
WARN  08:50:50,566 'keystore_password' and 'key_password' both are configured but since the values match it's okay. Ideally you should only specify one of them.
WARN  08:50:50,567 'keystore_password' and 'key_password' both are configured but since the values match it's okay. Ideally you should only specify one of them.
Cassandra has shutdown.
{code}


Thanks [~rtib] for the review. I can update the cassandra yaml to have the PEM example in comments. Also I'll try to check on the Nodetool output. I fixed the issue of getting truststore warning for the PEM and made truststore password also nullable but this warning I need to check. Earlier it came because of defaults and the fallback of `key_password` to `keystore_password` in the absence of the prior, now it could be the same reason.

 

One option is - avoid logging a warning in case both the values are same since technically it doesn't create any issue ONLY in case they are different we should log a warning. What do you think?

 

Meanwhile [~smiklosovic] can we get any additional PR reviews to have more eyes on this ?

My opinion concerning the warnings is, that your approach of changing the warning logic is fine and the only suitable way for 4.1.x.

In 5.x however, the legacy configuration parameter should be removed, along with the whole code to generate these warnings. But that's a different issue and I don't know about a ticket for that.

Hi [~rtib] and [~smiklosovic] I made changes suggested above and on the PR for the formatting fix. Raised a new PR, since I wanted to make sure I can see the formatting changes clearly. Can you please test/review [https://github.com/apache/cassandra/pull/2253] ? Thanks.

Thank you for your perseverance, [~maulin.vasavada]. I may take a look. We still need the second reviewer / committer, though. I ll ask around.

Hi [~rtib] Please confirm with the latest PR if the changes look good based on your testing. [~smiklosovic] I've resolved your comment on the PR, let me know if you want me to start the circleCI or you would kick it off. Thanks

j8 precommit looks good https://app.circleci.com/pipelines/github/instaclustr/cassandra/2043/workflows/058d0781-13f9-45f0-9343-b6b84d6f4485

j11 precommit too https://app.circleci.com/pipelines/github/instaclustr/cassandra/2043/workflows/dcd865fa-7332-47cc-ba60-cb2ee1f18024

I have also tested example and tests pass.

[~rtib] is that still all good for you? I then have to look for another committer.

LGTM, thank you.

I am looking for a reviewer. Builds make sense as well as the change. A user reports it looks good for him. I tested the example manually too. 

[~e.dimitrova], [~brandon.williams] [~maedhroz]

branch https://github.com/apache/cassandra/pull/2253
j8 precommit https://app.circleci.com/pipelines/github/instaclustr/cassandra/2043/workflows/058d0781-13f9-45f0-9343-b6b84d6f4485
j11 precommit https://app.circleci.com/pipelines/github/instaclustr/cassandra/2043/workflows/dcd865fa-7332-47cc-ba60-cb2ee1f18024

I'll take a look...

+1 (w/ some minor conversations to wrap up in the PR)

 

The two test failures that popped up are a timeout and a 2i building failure, neither of which have anything to do w/ this patch.

Does this still need a committer?

[~maulin.vasavada] is this applicable to 4.1? I was trying to cherry-pick that but it I was getting conflicts. Was there something done in trunk since 4.1 so this is not nicely applicable to 4.1?

I am OK with committing only to trunk if it is too much work.

This stuff seems to add new things https://issues.apache.org/jira/browse/CASSANDRA-17513

[~smiklosovic] This might have conflict with 4.1 because the trunk's compilation on examples/ssl-factory was broken and originally you fixed it in your branch and I picked up the same changes in my PR. I made sure in my PR I have a separate commit just to fix that compilation issue on the trunk to clearly see what was needed for that vs my actual intended changes for this ticket.

 

Yes based on CASSANDRA-17513 changes the examples/ssl-factory needed to have the changes it didn't have I think.

[~maedhroz] I'll modify the NEWS.txt as per the PR suggestion. I got distracted due to 2023 IntelliJ forced update that killed my workspace (still broken) but the NEWS.txt change doesn't depend on my workspace's stability so I can make it separately.

I tried to backport it here https://github.com/instaclustr/cassandra/commit/943bf9824387e60a5a30745508d6b8a869e5607e

I ll build it soonish. Could you go through that if you have 10 mins?

https://github.com/apache/cassandra/pull/2268

[~smiklosovic] Finally I got my IntelliJ 2023 working! Let me know if you want me to backport to 4.1. 

 

[~maedhroz] I added a note in the NEWS.txt, please review and see if you have any comments.

[~maulin.vasavada] it would be great if you prepared the patch for 4.1 as well.

Added a couple last comments to the PR. Let me know if those make sense...

Will prepare 4.1 patch and picked-up Caleb's suggestions on the NEWS.txt. Now I guess one comment left to be resolved. It shows conflict for NEWS.txt with trunk so I'd have to take the latest copy and reapply the latest changes on it once we close on all the comments.

[~smiklosovic] I prepared the backport for this ticket for 4.1 branch. Please review [this PR-2273|https://github.com/apache/cassandra/pull/2273]

4.1 j8 pre-commit https://app.circleci.com/pipelines/github/instaclustr/cassandra/2079/workflows/1b38f1ca-83c2-4670-91fd-1d438974deef
4.1 j11 pre-commit https://app.circleci.com/pipelines/github/instaclustr/cassandra/2079/workflows/8c42e4dc-06f8-4d9e-acc5-a6fb7dc27800

trunk j8 pre-commit https://app.circleci.com/pipelines/github/instaclustr/cassandra/2080/workflows/f02a1089-b95f-4284-895d-73fbdbc63f8c
trunk j11 pre-commit https://app.circleci.com/pipelines/github/instaclustr/cassandra/2080/workflows/a560d634-2596-4954-8486-87764efaee0d

all failing tests are known / are flaky

4.1 branch / commit https://github.com/instaclustr/cassandra/commit/bd49f6ff265c8bfa64bf140328ae6736dc4a87bd
trunk branch / commit https://github.com/instaclustr/cassandra/commit/c67b8691e0e32ad9133a5295bc2f9d756dd0541c

I just took what was there from Maulin and squashed it and rebased.

Both 4.1 and trunk example in examples/ssl-factory work.

CI also contains multiplexer jobs for modified / added tests.

[~maedhroz] I am +1, are you too? I have to ask!

+1

Thank you both [~smiklosovic] and [~maedhroz] 

