This can fail not only this way, as seen here - [https://ci-cassandra.apache.org/job/Cassandra-trunk/1643/testReport/junit/org.apache.cassandra.tools/StandaloneSplitterWithCQLTesterTest/testNoSnapshotOption__jdk17/]:
h3.  
{code:java}
Error Message
java.lang.reflect.InaccessibleObjectException: Unable to make field private final java.lang.Object java.nio.channels.spi.AbstractInterruptibleChannel.closeLock accessible: module java.base does not "opens java.nio.channels.spi" to unnamed module @57536d79 at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354) at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297) at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178) at java.base/java.lang.reflect.Field.setAccessible(Field.java:172) at org.apache.cassandra.utils.concurrent.Ref.getFields(Ref.java:656) at org.apache.cassandra.utils.concurrent.Ref.getFields(Ref.java:659) at org.apache.cassandra.utils.concurrent.Ref.getFields(Ref.java:659) at org.apache.cassandra.utils.concurrent.Ref$Visitor.traverse(Ref.java:613) at org.apache.cassandra.utils.concurrent.Ref$Visitor.run(Ref.java:568) at org.apache.cassandra.concurrent.ExecutionFailure$1.run(ExecutionFailure.java:133) at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539) at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305) at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.base/java.lang.Thread.run(Thread.java:833)

Stacktrace
junit.framework.AssertionFailedError: java.lang.reflect.InaccessibleObjectException: Unable to make field private final java.lang.Object java.nio.channels.spi.AbstractInterruptibleChannel.closeLock accessible: module java.base does not "opens java.nio.channels.spi" to unnamed module @57536d79 at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354) at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297) at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178) at java.base/java.lang.reflect.Field.setAccessible(Field.java:172) at org.apache.cassandra.utils.concurrent.Ref.getFields(Ref.java:656) at org.apache.cassandra.utils.concurrent.Ref.getFields(Ref.java:659) at org.apache.cassandra.utils.concurrent.Ref.getFields(Ref.java:659) at org.apache.cassandra.utils.concurrent.Ref$Visitor.traverse(Ref.java:613) at org.apache.cassandra.utils.concurrent.Ref$Visitor.run(Ref.java:568) at org.apache.cassandra.concurrent.ExecutionFailure$1.run(ExecutionFailure.java:133) at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539) at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305) at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305) at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.base/java.lang.Thread.run(Thread.java:833) at org.apache.cassandra.tools.StandaloneSplitterWithCQLTesterTest.testNoSnapshotOption(StandaloneSplitterWithCQLTesterTest.java:109) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{code}
 

I couldn't reproduce it locally in hundreds of runs. The solution is not adding more add-opens as we do not also access concrete fields...similar to the jamm traversals problems.

I have a potential patch, but I need to check a few more things. I also suspect another patch/ticket might be fixing some of those accesses issues, too. More to come

 

 

Neither of those was also reproducible in CircleCI - survived 3000 runs here - [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2455/workflows/013a33d9-bec1-490d-9d2d-10b2b8b13dab]

I just closed CASSANDRA-18685, which shows the same issue with setAccessible in Ref#Visitor#traverse but coming from a different test.

I will solve both here. 

StandaloneSplitterWithCQLTesterTest/testSplittingMultipleSSTables_cdc_jdk17

 

It seems like we can hit that path only sometimes and the test is flaky as I never saw it so far failing in CircleCI.
Seen here:
[https://ci-cassandra.apache.org/job/Cassandra-trunk-test-cdc/jdk=jdk_17_latest,label=cassandra,split=4/lastBuild/testReport/junit/org.apache.cassandra.tools/StandaloneSplitterWithCQLTesterTest/testSplittingMultipleSSTables_cdc_jdk17/]
{code:java}
Stacktrace
junit.framework.AssertionFailedError: java.lang.reflect.InaccessibleObjectException: Unable to make field private final java.lang.Object java.nio.channels.spi.AbstractInterruptibleChannel.closeLock accessible: module java.base does not "opens java.nio.channels.spi" to unnamed module @57536d79
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at org.apache.cassandra.utils.concurrent.Ref.getFields(Ref.java:654)
	at org.apache.cassandra.utils.concurrent.Ref.getFields(Ref.java:657)
	at org.apache.cassandra.utils.concurrent.Ref.getFields(Ref.java:657)
	at org.apache.cassandra.utils.concurrent.Ref$Visitor.traverse(Ref.java:611)
	at org.apache.cassandra.utils.concurrent.Ref$Visitor.run(Ref.java:566)
	at org.apache.cassandra.concurrent.ExecutionFailure$1.run(ExecutionFailure.java:133)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:833)

	at org.apache.cassandra.tools.StandaloneSplitterWithCQLTesterTest.testSplittingMultipleSSTables(StandaloneSplitterWithCQLTesterTest.java:99)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43){code}

I can see the same error in the logs when we run RefCountedTest. The tests succeed, but we see the error printed from [here|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/utils/concurrent/Ref.java#L571-L574]

StandaloneSplitterWithCQLTesterTest is explicitly checking tool logs for errors. Thus this class fails occasionally.
To solve the problem, we can use Unsafe. Unfortunately, this might not work in rare cases - not accessible lambda, and when we move to post-15 Java, Cassandra builds with records and hidden classes. (Unsafe#objectFieldOffset in Java 17 throws UnsupportedOperationException when it sees a hidden class(lambda is implemented using hidden classes) or record). In case we see again in the future inaccessible object exceptions because of lambdas, we will need to use add-opens for those cases. 

I also added a new exception type for more clarity - UnaccessibleFieldException. Jamm has almost the same one, but the name is CannotAccessFieldException. I intentionally made those two with different names to avoid confusing them in the code/logs.
I considered adding a utility class, but I do not want to encourage people to use Unsafe tricks broadly.
With the proposed patch, I saw no more exceptions in the RefCountedTest logs.
The patch is highly influenced by what was done in Jamm. [~blerer], do you mind reviewing?
Patch: https://github.com/apache/cassandra/pull/2558/commits/fc7378072d1ca6b117fc3b56a4d7d3db4704ea5a
CI JDK11: https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2459/workflows/ea002384-b9ce-4360-bad1-f98cbf45e73e
CI JDK17: https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2459/workflows/ee61a0ae-b785-449e-a055-8d94e9035d87
J17 on J11 DTests failed due to some CircleCI problems - restarted and completed successfully here - https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2459/workflows/75c48124-e607-4fbb-8b43-96f87334c87e


 

Patch approved on GH, and approval to commit confirmed in Slack.

Rebased 5.0 and trunk and running final CI:

5.0 - [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=18708-5.0] run #2475

trunk - [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=18708-trunk] run #2476

Pending commit on clean CI runs.

One timeout on trunk and there is a failure on 5.0, assertion error that I see in different tests lately:
{code:java}
Error Message
failed on teardown with "Failed: Unexpected error found in node logs (see stdout for full details). Errors: [[node3] 'ERROR [PendingRangeCalculator:1] 2023-08-10 18:39:33,000 JVMStabilityInspector.java:70 - Exception in thread Thread[PendingRangeCalculator:1,5,PendingRangeCalculator]\njava.lang.AssertionError: Unknown keyspace system_auth\n\tat org.apache.cassandra.db.Keyspace.<init>(Keyspace.java:324)\n\tat org.apache.cassandra.db.Keyspace.lambda$open$0(Keyspace.java:162)\n\tat org.apache.cassandra.utils.concurrent.LoadingMap.blockingLoadIfAbsent(LoadingMap.java:105)\n\tat org.apache.cassandra.schema.Schema.maybeAddKeyspaceInstance(Schema.java:251)\n\tat org.apache.cassandra.db.Keyspace.open(Keyspace.java:162)\n\tat org.apache.cassandra.db.Keyspace.open(Keyspace.java:151)\n\tat org.apache.cassandra.service.PendingRangeCalculatorService.lambda$new$1(PendingRangeCalculatorService.java:58)\n\tat org.apache.cassandra.concurrent.SingleThreadExecutorPlus$AtLeastOnce.run(SingleThreadExecutorPlus.java:60)\n\tat org.apache.cassandra.concurrent.ExecutionFailure$1.run(ExecutionFailure.java:133)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:829)']"
{code}
I will open a ticket for that one.

Starting commit soon.

CASSANDRA-18747 was opened for the assertions failures

Commiited 

   f8d4e2a3c8..000533cb63  cassandra-5.0 -> cassandra-5.0

   5ade7a6cd8..8f3c8e721e  trunk -> trunk

