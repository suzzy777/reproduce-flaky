Started work in https://github.com/julianhyde/incubator-calcite/commits/828-rule-builder.

From [an email thread|http://mail-archives.apache.org/mod_mbox/incubator-calcite-dev/201509.mbox/%3CCAPSgeETdRLsbyhPJ_nu12x-20ES6wU-qzFEZbxQ5W2n_7W9tLA%40mail.gmail.com%3E]:

This will be a big change to teams such as Hive and Drill. Now would be a good time to chime in.

The plan is that every rule instance has a ProtoRelBuilder field from which a RelBuilder can be created to be used in an onMatch method. The RelBuilder contains factories for every kind of RelNode, so we won't
have to keep plumbing new factories in to existing rules.

There will be other advantages. RelBuilder is an easier and more concise way of creating relational expressions. It does some useful stuff for free, like flattening ANDs and eliminating identity projections. I'm seeing the volume of code decrease and a few minor plan improvements.

I haven't yet found a good way to deal with the pattern where if, say, ProjectFactory is null the rule is to use Project.copy to create a Project of the same type.

I'm keeping & deprecating the old rule constructors that take a variety of XxxFactory arguments.

As always, we try to keep API compatibility and mark the old API

{code}@Deprecated // to be removed before 2.0{code}

but the deprecated APIs are no longer tested and are likely to be flaky. We strongly suggest that you fix calls to deprecated APIs as soon as you upgrade to a more recent version of Calcite.

I have completed work in the branch. Can someone please review?

Fixed in http://git-wip-us.apache.org/repos/asf/incubator-calcite/commit/815fa262. Note that there are a few breaking changes in that commit.

Resolved in release 1.5.0 (2015-11-10)

