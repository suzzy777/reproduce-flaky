Below is evidence from running tablet_history_gc-itest that the description of this JIRA is true.

There appears to be a problem with out-of-order writes from the client. Likely our exactly-once mechanism does not support enforcement of well-ordered client flushes / writes. Concurrent client flushes may apparently result in a misordering of applied operations, as we can see in the below test results.

Assertion failure from a run of tablet_history_gc-itest:

{noformat}
I1124 14:58:47.745049  6573 tablet_history_gc-itest.cc:214] Round 26: Verifying snapshot scan for timestamp P: 1000000000 usec, L: 1559 (4096000001559)
../../src/kudu/integration-tests/tablet_history_gc-itest.cc:243: Failure
Value of: int_val
  Actual: 1853363533
Expected: snap_iter->second.int_val
Which is: 230599396
at row key 1401
{noformat}

Expected order of applied operations from the test log:

{noformat}
I1124 14:58:43.812958  6573 tablet_history_gc-itest.cc:477] Updating row to { 1401, 1853363533, 1853363532, NOT_DELETED }
I1124 14:58:43.812971  6573 tablet_history_gc-itest.cc:477] Updating row to { 1401, 230599396, 230599395, NOT_DELETED }
{noformat}

Actual order of applied operations was the opposite, based on the WAL generated by the test:

{noformat}
1.1297@4096000001314	REPLICATE WRITE_OP
	Tablet: 87bd5c7e164744399cf6e9b02ff4f588
	RequestId: client_id: "dec6b320491a46928b5914deb42e16e7" seq_no: 1296 first_incomplete_seq_no: 1295 attempt_no: 0
	Consistency: CLIENT_PROPAGATED
	op 0: MUTATE (int32 key=1401) SET int_val=230599396, string_val=230599395
	op_type: WRITE_OP commited_op_id { term: 1 index: 1297 } result { ops { mutated_stores { mrs_id: 0 } } }
1.1298@4096000001315	REPLICATE WRITE_OP
	Tablet: 87bd5c7e164744399cf6e9b02ff4f588
	RequestId: client_id: "dec6b320491a46928b5914deb42e16e7" seq_no: 1295 first_incomplete_seq_no: 1294 attempt_no: 0
	Consistency: CLIENT_PROPAGATED
	op 0: MUTATE (int32 key=1401) SET int_val=1853363533, string_val=1853363532
{noformat}

You're right that EO works per-request and does nothing to enforce request ordering, it works on a per-request basis. This seems the right abstraction level to me though.
It's likely that we don't enforce ordering of _successful completion_ of flushes with a mix of background and foreground flushes like this.
What would be the right semantics here? A foreground flush should first make sure a background one is complete (not just "started" first), no? Does that happen?
I guess this hypothesis should be super simple to prove, just disable auto flush background and see if the bug persists.

The example I showed was using MANUAL_FLUSH with FlushAsync() after every op, then a final Flush() at the end of each batch of operations.

Right, that's what AUTO_FLUSH_BACKGROUND does under the covers.
You're suggesting that EO semantics should enforce write order but my point was: how is the server supposed to know that the client requires order enforcement versus just trying to do multiple writes at the same time?
There's a "happened before" relationship here that we're expecting to be enforced and that I think should be enforced in the client, outside of EO semantics.

btw I have a patch out to change flushing back to MANUAL_FLUSH, this has de-flaked the test.

I agree that the exactly-once stuff should have no bearing on request ordering; it's only meant to provide idempotency, not any other cross-request guarantees, and I think it would be a mistake to try to bend it into providing some kind of serialization order (for the same reason David mentioned).

My vote is that we commit a change to the client API docs that makes this behavior more clear -- probably on the 'Flush' API and on the docs for the different flush modes. It's a slightly surprising bit of semantics, so worth noting, but I don't think it's worth prioritizing a fix at this point in time.

https://gerrit.cloudera.org/#/c/5224/1

A temporary workaround for this was committed by [~dralves] in https://github.com/apache/kudu/commit/4c4c215ab1094f12156b0c05c220df920a832238

Marking this as fixed and we can track the underlying issue in KUDU-1767.

