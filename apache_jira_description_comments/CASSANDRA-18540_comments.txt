CC [~mck]  (you've been looking into CASSANDRA-16848)

Seems like we should switch to TLS1.2, I know people are disabling 1.1 in their configs as it is.

This is pretty straightforward.  I went ahead and pushed CI with 18180 applied:

||Branch||CI||
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18540-trunk]|[j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1025/workflows/78efb893-70ee-4f14-bf74-161cc0c4afec], [j17|https://app.circleci.com/pipelines/github/driftx/cassandra/1025/workflows/359e06fe-6d4a-4a15-980b-45628f80a51c]|

The [article|https://senthilnayagan.medium.com/tlsv1-and-tlsv1-1-protocols-disabled-by-default-in-javas-latest-patch-released-on-april-20-2021-52c309f6b16d] posted in CASSANDRA-16848 points to disabling it in 8, 11, and 17 but not removing it because there might still be legacy applications that require it.

I support the below statement from CASSANDRA-16848.
{quote}Bq.  Given that users can still use TLSv1 and TLSv1.1 (older JDKs or adjusting the java. security file), I would think it makes sense to keep the tests for now.
{quote}
I suggest instead adding a comment and quoting the article in the test, so if someone tries to run it locally and it fails, they can quickly figure out what happened.

 

Okay, I have made new patches that adds a comment to the test methods:
{noformat}
    /**
     * Tests that the negotiated protocol is the highest common protocol between the client and server.
     * <p> 
     * Note: This test uses TLSV1.1, which is disabled by default in JDK 8 and higher. If the test fails with 
     * FAILED_TO_NEGOTIATE, it may be necessary to check the java.security file in your JDK installation and remove 
     * TLSv1.1 from the jdk.tls.disabledAlgorithms.
     * @see <a href="https://issues.apache.org/jira/browse/CASSANDRA-18540">CASSANDRA-18540</a>
     * @see <a href="https://senthilnayagan.medium.com/tlsv1-and-tlsv1-1-protocols-disabled-by-default-in-javas-latest-patch-released-on-april-20-2021-52c309f6b16d">
     *     TLSv1 and TLSv1.1 Protocols are Disabled in Java!</a>
     */
{noformat}
 
||name||branch||commit||
|trunk| [trunk branch|https://github.com/djatnieks/cassandra/tree/CASSANDRA-18540-trunk]|[trunk commit|https://github.com/djatnieks/cassandra/commit/441346d4be05da5819c19c2086c522b5a1b2fe30]|
|4.0|[4.0 branch|https://github.com/djatnieks/cassandra/tree/CASSANDRA-18540-4.0]|[4.0 commit|https://github.com/djatnieks/cassandra/commit/65406161ae56c570fd47a42e61921b841ab6f62d]|
|4.1|[4.1 branch|https://github.com/djatnieks/cassandra/tree/CASSANDRA-18540-4.1]|[4.1 commit|https://github.com/apache/cassandra/commit/937683e5d5bf374131e06fad8447d70fd99cec7f]|

 

The patch LGTM, +1. Thanks

[~brandon.williams] , any objections from you?

So we are not going to switch to TLS 1.2 and instead leave a comment why 1.1 is broken? Don't we want 1.2 covered also?

Good catch! You are right! I thought we tested one after another both protocols, but now I double-checked, and it needs to be corrected. :( 
{quote}Don't we want 1.2 covered also?
{quote}
Of course, we do! Let's add another test variation where we try with TLSv1.2 or amend the current one by accepting both protocols. WDYT? Question for both of you

I'm not sure what devil is in the details there, so I will leave it up to the implementer to decide.

Makes sense to me - I've pushed a new commit to each branch below that adds the check for TLSv1.2 to the existing tests. The tests now accept both TLSv1.1 and TLSv1.2.

||name||branch||commit||
|trunk| [trunk branch|https://github.com/djatnieks/cassandra/tree/CASSANDRA-18540-trunk]|[trunk commit|https://github.com/djatnieks/cassandra/commit/93feaa06d2e7fb974ff4e8094b2cdf0d3a9db2b6]|
|4.0|[4.0 branch|https://github.com/djatnieks/cassandra/tree/CASSANDRA-18540-4.0]|[4.0 commit|https://github.com/djatnieks/cassandra/commit/8bdfb503f6042c8af8560aac9bbca837eb9670a5]|
|4.1|[4.1 branch|https://github.com/djatnieks/cassandra/tree/CASSANDRA-18540-4.1]|[4.1 commit|https://github.com/apache/cassandra/commit/ebe4bcfc0feefa6727b7d5f0015fb6ff7215b179]|

This patch should work with jdk8 and jdk11 on 4.0, 4.1 and trunk. 

And once CASSANDRA-18180 is complete it should also work with jdk17 - so I think this ticket does not need to be blocked by CASSANDRA-18180. wdyt [~e.dimitrova]?


{quote}wdyt [~e.dimitrova]?
{quote}
That looks great, thank you so much [~djatnieks] ! I also tested locally all branches as I do not think we need to run full CI for these changes. The changes made are limited to the tests. I tested trunk with JDK8 and JDK 11 and with JDK11 and JDK17 with the patch from CASSANDRA-18180. Everything looks good. I also adjusted the java.security file as per the note during testing.

[~brandon.williams] , do you mind to review, please?

bq. I do not think we need to run full CI for these changes. The changes made are limited to the tests.

I agree, but didn't think a [multiplexer|https://app.circleci.com/pipelines/github/driftx/cassandra/1061/workflows/648e3ed0-32f3-43ff-930e-c05b1bfa9f9e/jobs/29939] check on trunk would hurt just to be sure we haven't introduced any flakiness.  Looks good to me, +1.

{quote}but didn't think a [multiplexer|https://app.circleci.com/pipelines/github/driftx/cassandra/1061/workflows/648e3ed0-32f3-43ff-930e-c05b1bfa9f9e/jobs/29939] check on trunk would hurt just to be sure we haven't introduced any flakiness. 
{quote}
I was thinking it was pretty deterministic, but you are correct that the world of Cassandra never stops to surprise us. Good call, thanks!

Starting commit soon

To [https://github.com/apache/cassandra]

   [2fcdaa5b76..c37bcbf7e9  cassandra-4.0 -> cassandra-4.0|https://github.com/apache/cassandra/commit/c37bcbf7e9d2b3c8ec4e93aa661d358c9f382edf]

   [1f6b37d189..622397e7e5  cassandra-4.1 -> cassandra-4.1|https://github.com/apache/cassandra/commit/622397e7e5a2ab8a0bd902b0155a5379e2bbfab4]

   [4f5cb2a6fa..a55d4183f5  trunk -> trunk|https://github.com/apache/cassandra/commit/a55d4183f507fab7b254a827af0ee6cc821c5674]

Thank you both!

