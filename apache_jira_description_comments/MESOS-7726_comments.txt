The linked ticket, MESOS-7562, is similar but fails on the timeout of a different future. Leaving them both open for the time being in case these are discrete issues.

I have refined logs from good and bad runs to make the chain of events more obvious.
Good run:
{noformat}
19:31:28.542207 16548 slave.cpp:993] New master detected at master@172.16.10.126:60888
19:31:28.553344 16546 slave.cpp:1147] Successfully authenticated with master master@172.16.10.126:60888
19:31:28.553395 16546 slave.cpp:1626] Will retry registration in 1.49694ms if necessary
19:31:28.553436 16545 master.cpp:5801] Received register agent message from slave(294)@172.16.10.126:60888 (ip-172-16-10-126.ec2.internal)
19:31:28.553725 16545 master.cpp:5954] Registering agent at slave(294)@172.16.10.126:60888 (ip-172-16-10-126.ec2.internal) with id 43dd1579-4d4f-42c6-9a02-8ac196135ba1-S0
19:31:28.554425 16546 slave.cpp:1193] Registered with master master@172.16.10.126:60888; given agent ID 43dd1579-4d4f-42c6-9a02-8ac196135ba1-S0

19:31:28.555630 16542 slave.cpp:993] New master detected at master@172.16.10.126:60888
19:31:28.555724 16546 slave.cpp:1055] Authenticating with master master@172.16.10.126:60888
19:31:28.556710 16546 master.cpp:7966] Successfully authenticated principal 'test-principal' at slave(294)@172.16.10.126:60888
19:31:28.556766 16546 slave.cpp:1147] Successfully authenticated with master master@172.16.10.126:60888
19:31:28.556807 16546 slave.cpp:1626] Will retry registration in 9.658747ms if necessary
19:31:28.557025 16546 master.cpp:6119] Received re-register agent message from agent 43dd1579-4d4f-42c6-9a02-8ac196135ba1-S0 at slave(294)@172.16.10.126:60888 (ip-172-16-10-126.ec2.internal)
19:31:28.557148 16546 master.cpp:6222] Ignoring re-registration attempt from old agent at slave(294)@172.16.10.126:60888: agent version is 0.28.1-rc1, minimum supported agent version is 1.0.0
19:31:28.557402 16522 slave.cpp:869] Agent terminating
{noformat}
Bad run:
{noformat}
04:31:59.541496 15900 slave.cpp:993] New master detected at master@172.17.0.3:42919
04:31:59.545332 15909 slave.cpp:1147] Successfully authenticated with master master@172.17.0.3:42919
04:31:59.545543 15909 slave.cpp:1626] Will retry registration in 1.358313ms if necessary
04:31:59.545763 15906 master.cpp:5801] Received register agent message from slave(411)@172.17.0.3:42919 (37ad05bac4a7)
04:31:59.546460 15904 master.cpp:5954] Registering agent at slave(411)@172.17.0.3:42919 (37ad05bac4a7) with id 1069c7ab-2d90-4a12-996b-ecfe9a871217-S0
04:31:59.548152 15893 slave.cpp:1626] Will retry registration in 15.765509ms if necessary
04:31:59.548413 15912 master.cpp:6032] Registered agent 1069c7ab-2d90-4a12-996b-ecfe9a871217-S0 at slave(411)@172.17.0.3:42919 (37ad05bac4a7) with [{"name":"cpus","scalar":{"value":2.0},"type":"SCALAR"},{"name":"mem","scalar":{"value":1024.0},"type":"SCALAR"},{"name":"disk","scalar":{"value":1024.0},"type":"SCALAR"},{"name":"ports","ranges":{"range":[{"begin":31000,"end":32000}]},"type":"RANGES"}]
04:31:59.548753 15902 slave.cpp:1193] Registered with master master@172.17.0.3:42919; given agent ID 1069c7ab-2d90-4a12-996b-ecfe9a871217-S0
04:31:59.548921 15912 master.cpp:5801] Received register agent message from slave(411)@172.17.0.3:42919 (37ad05bac4a7)

04:31:59.549670 15902 slave.cpp:993] New master detected at master@172.17.0.3:42919
04:31:59.549906 15902 slave.cpp:1193] Registered with master master@172.17.0.3:42919; given agent ID 1069c7ab-2d90-4a12-996b-ecfe9a871217-S0
/mesos/src/tests/master_tests.cpp:8041: Failure
Failed to wait 15secs for reregisterSlaveMessage
04:32:14.557504 15902 slave.cpp:869] Agent terminating
{noformat}
We can see that in the "bad" run, the agent sends {{RegisterSlaveMessage}} twice, likely because the reply from the master has not arrived in {{1.358313ms}} when the agent retries. Because the second {{SlaveRegisteredMessage}} arrives onto the agent during authentication and hence before it attempts to re-register, the {{ReregisterSlaveMessage}} message is never sent out. I suggest we introduce an extra {{REGISTERING}} state, which we enter after a (re)registration request is sent. This way we can drop all registered / reregistered confirmations coming from the previous master during the {{DISCONNECTED}} stage.

Additionally, looking at the code, it seems that after sending a re-registration request in {{ReregisterSlaveMessage}} to the master, the agent is satisfied (given it comes from the expected master), i.e., transitions from {{DISCONNECTED}} to {{RUNNING}}, with {{SlaveRegisteredMessage}}, losing any {{ReconcileTasksMessage}} that might be delivered in the coming and to be ignored {{SlaveReregisteredMessage}}. This seems incorrect to me, I believe the agent should ignore {{SlaveRegisteredMessage}} after sending {{ReregisterSlaveMessage}}.

{quote}
I believe the agent should ignore SlaveRegisteredMessage after sending ReregisterSlaveMessage.
{quote}

[~alexr] can you file a separate issue for this? I don't think that's why this test is flaky. My read is that the lack of a {{Clock::settle()}} prior to advancing the clock for re-registration meant that the clock was advanced before the {{delay}} in the agent. It's not that the agent thought it was registered, it was that the agent was waiting for the initial re-registration backoff, which never occurred.

https://reviews.apache.org/r/63224/

Fix is here:

{noformat}
commit 2268d61791d99d399cd2cfeed0d5eafaafdc2937
Author: Benjamin Mahler <bmahler@apache.org>
Date:   Mon Oct 23 13:43:57 2017 -0700

    Fixed the flaky MasterTest.IgnoreOldAgentReregistration.

    This test did not settle the clock before advancing it, which
    meant that the call to delay had not yet occurred.

    Also updated the test to avoid retries of the registration
    message, which can lead the agent to think it is registered
    after a detection event, although this shouldn't be an issue
    for this test.

    Review: https://reviews.apache.org/r/63224
{noformat}

I would also like to remove the initial backoffs for authentication and registration from the tests, it should only be used by those tests that care about initial backoffs. As it is today, any test pausing the clock has to deal with advancing the clock to trigger the registration, which is complicated and error-prone: MESOS-7657

