[~szymon.miezal] this should be fixed from 4.0.8 onwards by CASSANDRA-16418, which does exactly what you suggested and prevent cleanup from running if there are pending ranges locally.

[~samt] thank you it indeed looks like a duplicate, wouldn't it be worth to backport it to 3.11 line as well (that's the one I have managed to replicate the problem for with a test)?

The conversation from CASSANDRA-16418 proves that the patch hasn't been ported to 3.x and there wasn't any particular reason to not do so. I am going to reopen this ticket and use it as a placeholder for backporting the required changes to 3.x line.

So far I have created a branch for 3.0 [szymon-miezal/CASSANDRA-18824-3.0|https://github.com/szymon-miezal/cassandra/tree/CASSANDRA-18824-3.0] commit: [9ff7dd8727022b3dc3decf9a15da095f2594d4f6|https://github.com/szymon-miezal/cassandra/commit/9ff7dd8727022b3dc3decf9a15da095f2594d4f6] I guess I will have to merge it to 3.11 as well.

The tests as passing locally but I suppose I will have to run a proper CI for it.


It seems the patch from 3.0 was easily applicable to 3.11, it merged cleanly - [szymon-miezal/CASSANDRA-18824-3.11|https://github.com/szymon-miezal/cassandra/commits/CASSANDRA-18824-3.11]

I was thinking that we might end up with a similar situation - conflict of cleanup and streaming which results in pending ranges. Namely when a cleanup process has been already started and passed the safeguard on let's say a node A and then concurrently the node B starts decommission process. Initially I thought it might be valuable to break the cleanup (which might take time for sizeable data) in the process by throwing the exception inside the method that processes a single SSTable: https://github.com/apache/cassandra/blob/65ee0d082caac70de704852deed52b9dd52120e6/src/java/org/apache/cassandra/db/compaction/CompactionManager.java#L907 but then I realized that the list of SSTables to process is generated before touching the first SSTable: https://github.com/apache/cassandra/blob/65ee0d082caac70de704852deed52b9dd52120e6/src/java/org/apache/cassandra/db/compaction/CompactionManager.java#L299. It means that all new SSTables that are generated due to streaming after the cleanup started are not going to be touched by cleanup and breaking the cleanup in the process would not have much value.

Could you just prepare the branch for 3.11without merging 3.0 into that? I will do the merging on my end.

Are you able to run CircleCI tests? pre-commit ones.

The 3.11 branch: [szymon-miezal/CASSANDRA-18824-3.11|https://github.com/szymon-miezal/cassandra/commits/CASSANDRA-18824-3.11].

I think I haven't setup CircleCI properly yet [https://app.circleci.com/pipelines/github/szymon-miezal/cassandra/2/workflows/c914be88-f1df-4fb5-93d7-997f09b13972], the build got canceled.

3.0 and 3.11 branch of yours have wrong package name on added test. It ends on "ring" but it is not in that package. Since in 3.0 nor in 3.11 there is not "ring" package in dtests, the solution is to just remove "ring" string from there.

Secondly, BootstrapTest  is flaky (1) when run 500x (2)

(1) https://app.circleci.com/pipelines/github/instaclustr/cassandra?branch=CASSANDRA-18824-3.0
(2) https://app.circleci.com/pipelines/github/instaclustr/cassandra/3127/workflows/0b3af9e9-b941-40f3-937a-dac94b9a468a/jobs/115586/tests#failed-test-0

That's a good catch, thank you. I have updated the branches. Maybe I should have open a regular PR instead of linking commits.

Re the flaky BootstrapTest the questions is: did it become flaky after porting the changes or was it flaky in the first place? Looking at https://butler.cassandra.apache.org/#/ci/upstream/workflow/Cassandra-3.11/failure/org.apache.cassandra.distributed.test/BootstrapTest/readWriteDuringBootstrapTest this test does not seem to have a stable history.

It was flaky before. https://app.circleci.com/pipelines/github/instaclustr/cassandra?branch=CASSANDRA-18824-3.0-test-flakiness

Do you think you could take a look at the source of this flakiness? It would be cool if we left that test in better shape than we found it.



It looks like it has been reported before - https://issues.apache.org/jira/browse/CASSANDRA-17139. I think it's going to be valuable to take a closer look at it but I am thinking if it would have been cleaner to tackle that as a separate ticket.

wow this is messy :) So ... why do we actually deal with changes in BootstrapTest in the first place? Because we are using populate method in CleanupFailureTest? So one test depends on some methods from another one? This is just wrong. If you need these methods, either find some common place to put it and reference it from both places or just implement a population method just for CleanupFailureTest and keep BootstrapTest untouched.

The proper approach to the problem would try to extract a common test utility logic to a third entity, that's for sure. The reason why it isn't like that in the current patch is because I have followed the changes from 4.0 and did not want to diverge to much with additional refactoring. You might be surprised that it's written in exactly the same way there - [https://github.com/apache/cassandra/blob/2a5e1b77c9f8a205dbec1afdea3f4ed1eaf6a4eb/test/distributed/org/apache/cassandra/distributed/test/ring/BootstrapTest.java#L307|https://github.com/apache/cassandra/blob/2a5e1b77c9f8a205dbec1afdea3f4ed1eaf6a4eb/test/distributed/org/apache/cassandra/distributed/test/ring/BootstrapTest.java#L307.] and then used in Cleanup test.

I am happy to refactor it but it means the refactoring changes will have to go to 4.x as well, unless we are ok with divergence.

yeah I know it is like that there as well. So this ticket should cover both adding the patch as such for 3.0 and 3.11 _as well as_ cleaning up the tests from 4.0 to trunk. I mean ... we are not going to ship it like that if we clearly see that test is dependent on another one. 

Easy win is to just copy that population logic to cleanup test and keep bootstrap test untouched. 

Well it has been shipped like that already with https://issues.apache.org/jira/browse/CASSANDRA-15935 ;) but I get the point we should strive to apply a scout rule.

What I think makes sense is to add another commit where we either:
 * extract the "population" logic to a common place OR
 * implement something that does the same job locally at CleanupFailureTest (this approach has the disadvantage that it will probably require to just reinvent the wheel).

and then we merge this particular commit only to versions >= 4.x.

Having said that I think I will create a PR as it a much better place to discuss implementation details.

It can be all done on one merge up to trunk.

In 3.0 - add the feature and add the test and make cleanup test independent from bootstrap (by copying population method)
In 3.11 - same as 3.0
in 4.0 -> trunk -> since cleanup test is already there, just make it independent from bootstrap one

Just prepare the branches and I ll merge it up.

Going back to it after a while, I have prepared new branches, 3.1 - 3.11 commits contain backport plus a test adjustment, 4.0 - trunk commits contain only the test adjustment which makes it independent from the other test.

[https://github.com/szymon-miezal/cassandra/commit/cf5fe235948dc08ff00a63d264a2014829365e56] (3.0)
[https://github.com/szymon-miezal/cassandra/commit/7073b03fbf34d5a8ec7b1d3460191b4eaa7bcbf3] (3.11)
[https://github.com/szymon-miezal/cassandra/commit/7c53a56ca208c880812f9a364bdd0a09c584168f] (4.0)
[https://github.com/szymon-miezal/cassandra/commit/a186a10ad52c8cffcf172bfaab776195f6ea7d13] (4.1)
[https://github.com/szymon-miezal/cassandra/commit/50f59dfd69245472e63579766e6b4d9185fa6965|https://github.com/szymon-miezal/cassandra/commit/017997b7778cfd4381477bed5c4df1aa16ef1cab]Â (5.0)
[https://github.com/szymon-miezal/cassandra/commit/984c0527272251223c60efde2126dd8e06a22d68] (trunk)

I haven't modified _CHANGES.txt_ file as IIUC it should be done during merging.

So far I have run tests for [3.0|https://app.circleci.com/pipelines/github/szymon-miezal/cassandra?branch=CASSANDRA-18824-3.0] and [3.11|https://app.circleci.com/pipelines/github/szymon-miezal/cassandra?branch=CASSANDRA-18824-3.11] patches but it seems CircleCI free tier is not suitable for running distributed tests.

I have created a PR against 3.0 as it's the lowest version we need to apply the patch: https://github.com/apache/cassandra/pull/2921

There is a small conflict on trunk now, can you rebase that patch?

I'll start the rest:

||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18824-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1387/workflows/195efdfc-54c7-4137-a842-4139cf81f2fd]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18824-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1385/workflows/8ea6d462-9955-4480-90ce-1a859834636d]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18824-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1388/workflows/85cf1c4f-6828-4754-aef3-6af5964a14d6], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1388/workflows/66e2a7e8-e0cd-44e4-8dc4-c3759ca5395a]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18824-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1386/workflows/8b331545-f545-4ed0-aca7-38b70abcf173], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1386/workflows/c938a2bc-774b-4936-87e1-ba980f81653d]|
|[5.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18824-5.0]|[j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1389/workflows/3dc5345e-6296-461b-8246-45259b819d43], [j17|https://app.circleci.com/pipelines/github/driftx/cassandra/1389/workflows/8c54a06e-c38c-450b-8238-5cafb3aad33e]|



[https://github.com/szymon-miezal/cassandra/commit/47245b247f500a35ebc779ff8f8f81b7e9ae0d78] has a patch that has been rebased on current trunk.

||Branch||CI||
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18824-trunk]|[j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1390/workflows/e4210b4a-148a-4c68-9217-a7ebd5873c46], [j17|https://app.circleci.com/pipelines/github/driftx/cassandra/1390/workflows/1ffb6ed7-6d95-4d5c-8658-fb7863c6eed2]|

I don't see any related failures, +1 from me.

From the discussion on CASSANDRA-16418, I think we don't want to remove the isJoined cleanup check in 3.x, and add it to the other branches except for trunk which is already covered.

To add to that - [~szymon.miezal] - we should add it back to the compaction manager with pending ranges based condition instead of isJoined - as far as I understand, this is the essential difference - isJoined is just for bootstrap, while pending ranges covers decommissioning as well


It sounds about right, I will recreate the patches - that will happen next week.

I have prepared the following patches:
 * 3.0 - [https://github.com/szymon-miezal/cassandra/commit/68625daa5f55dbb0873ac4603fa05f47853cbeff] this one also has a PR - [https://github.com/apache/cassandra/pull/2921] 
 * 3.11 - [https://github.com/szymon-miezal/cassandra/commit/f21777525862b8da3345e21faac40a16631b8194]
 * 4.0 - [https://github.com/szymon-miezal/cassandra/commit/9652bf53d09d66609356f2110ee9110f6c8d9eb2]
 * 4.1 - [https://github.com/szymon-miezal/cassandra/commit/51624a811449b988d16efd396187e4825b0cc5ce]
 * 5.0 - [https://github.com/szymon-miezal/cassandra/commit/c7dd3bfad97b18d834f89a04a3076f9e8f9a353c]
 * trunk - [https://github.com/szymon-miezal/cassandra/commit/096805afc658e80a8265bae3911ad3834331d325] (this patch intentionally contains only the test refactoring)

The patches differ between major versions I suspect merging will require a bit of effort.

Looks good to me, I think we're ready for CI again.

||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18824-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1431/workflows/16224617-cba6-4ad9-92cd-ac014b250228]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18824-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1432/workflows/2b93259c-c950-4643-8555-700532dd2626]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18824-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1434/workflows/ff11e418-849e-443e-afa0-af6e3ed888ae], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1434/workflows/10a82371-d404-4ee0-adf9-fb00f037a743]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18824-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1433/workflows/25f79eb3-d662-4fa4-b732-2c3907ede76b], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1433/workflows/97cf9baa-6e47-49da-b184-3b86a5a1fa5c]|
|[5.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18824-5.0]|[j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1436/workflows/750228a3-7b8d-4242-a8ac-8096779d7adf], [j17|https://app.circleci.com/pipelines/github/driftx/cassandra/1436/workflows/9e266f8a-8d9b-4f95-b1c5-830811bc79b8]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18824-trunk]|[j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1435/workflows/36f2b4da-83ea-48cb-8d00-dc10bf6af98a], [j17|https://app.circleci.com/pipelines/github/driftx/cassandra/1435/workflows/6c25461d-2f6d-4651-a7b0-e6059723379d]|


Compilation fails on some branches - I've created PRs yesterday, they are attached in the links section. I'm applying some fixes on each of them. When ready, I'll rerun the CI

It seems to be failing on 4.x branches. I think I haven't cleared the directory properly when checking out and compiling it locally hence I missed this before sending the patches - my mistake, apologies.

[https://github.com/szymon-miezal/cassandra/commit/4cc492bd39dfe3eb173c5d611cf188e7b6961529] seems to be resolving the problem.

np, I'll handle that in the PRs

[~brandon.williams] - would you review my PRs?

[~jlewandowski] sure, I see you committed circle configs, has CI been run?

Well I can't find it if you did, so we'll just run again:

||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18824-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1437/workflows/9dae695b-1a18-49a7-8733-4cf75662cd43]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18824-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1442/workflows/d06f2dcf-1382-4d3a-8b02-0b40934c6329]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18824-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1438/workflows/d7cb0ff2-5636-4d64-9778-51da71d560db], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1438/workflows/3aaed2fe-7361-491a-b5ca-e9cc31edd283]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18824-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/1439/workflows/ad449679-9b77-48be-90e1-8228d18f24a1], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1439/workflows/5cf70489-47b2-4583-afc4-c598f374a247]|
|[5.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18824-5.0]|[j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1443/workflows/fd735a11-447a-4c3e-92a2-c106057c8381], [j17|https://app.circleci.com/pipelines/github/driftx/cassandra/1443/workflows/5d74e3ba-a5dd-4171-b3ee-20807104a9e1]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18824-trunk]|[j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1441/workflows/9bf41e67-dd43-4388-a6af-4d26bdbeb941], [j17|https://app.circleci.com/pipelines/github/driftx/cassandra/1441/workflows/81c5fa58-9b38-4f3d-9207-50eb4cae17d1]|


There was an unused import in 5.0 I removed. Unfortunately however, it looks like cleanupDuringDecommissionTest is [flaky|https://app.circleci.com/pipelines/github/driftx/cassandra/1442/workflows/d06f2dcf-1382-4d3a-8b02-0b40934c6329/jobs/69573/tests].

