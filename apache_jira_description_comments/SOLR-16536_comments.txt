According to [https://opentelemetry.io/docs/migration/opentracing/#step-2-progressively-replace-instrumentation] 
{quote}What about existing instrumentation? There is no hard requirement to migrate existing application code to OpenTelemetry. However, we do recommend migrating from any OpenTracing instrumentation libraries – libraries used to instrument web frameworks, HTTP clients, database clients, etc. – to their OpenTelemetry equivalents. This will improve support, as many OpenTracing libraries will be retired and may no longer be updated.
{quote}
I'm not familiar with our OpenTracing instrumentation but I find 81 matches when searching codebase for 'io.opentracing'. Will need to use something else than 'GlobalTracer'. I believe OTEL provides an SPI mechanism for plugging in tracers.

Also need to figure out how this will work with e.g. DataDog agent, if they have one for OTEL that will provide an SPI tracer that will be auto loaded etc, and change documentation accordingly.

Did some reading, and appears that e.g. DataDog do not provide a Java-agent with an OTEL Tracer implementation, in the same way they did for OpenTelemetry. Instead they recommend users to use OTEL collector and then push from there to DataDog, or to install the DataDog agent application on localhost and push traces to that agent (if you don't want the OTEL-collector). See [https://docs.datadoghq.com/opentelemetry/otel_tracing/]

So it looks like we won't have to handle any 3rd party otel tracer agent, and people will likely not use the opentelementry java-agent for auto-instrumenting Jetty, since Solr's instrumentation is likely higher quality.

So I believe this menans great simplification in v10.0
 * Remove the {{<tracerConfig>}} tag in solr.xml, and thus no need for {{TracerConfiguraor}} plugin class
 * {{OtelTracerConfigurator}} can self-register in a static{} contest, using {{{}GlobalOpenTelemetry.set(myOpenTelemetry){}}}. This means tracing is disabled until you register {{{}SOLR_MODULES=opentelemetry{}}}, which puts OtelTracerConfigurator on the classpath
 * Solr's OpenTracing instrumentation will be replaced with with OTEL instumentation, and we'll fetch the registered tracer from {{GlobalOpenTelemetry.get()}}

Any thoughts? Why would we still want an explicit solr.xml plugin for this?

I haven't researched the state of things lately (and it seems you have) but from what I know, I totally agree with what you wrote.  Everyone seems to be standardizing on OTEL, thus we don't need to make it pluggable.

If we base our solr-core instrumentation on the GlobalOpenTelemetry object, then it will still be pluggable in a sense, as if you add some other agent/plugin/module to Solr than our 'opentelemetry' module, you could inject a global tracer. But we'd probably not be able to combine such a 3rd party tracer with a future use of exporting logs in OTLP format with our module, as the two would compete in registering a global OTEL sdk object.

Thanks [~stillalex]  for taking on this task!

[~janhoy] [~dsmiley] posted the PR to move to OTEL for review. looking forward to your thoughts!

Commit 92dede18504518a5542ddd35b0d9cc2887566934 in solr's branch refs/heads/main from Alex Deparvu
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=92dede18504 ]

SOLR-16536 Replace OpenTracing instrumentation with OpenTelemetry (#1841)

OpenTracing libraries were completely removed and replaced with OpenTelemetry libraries



