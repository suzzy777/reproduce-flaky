[~gezapeti] and [~andras.piros], here is one issue that I need your advice on.

There are many fields that need to be interned per the above analysis. If a field can never be set to null, it's fine to replace e.g. {{this.path = inPath;}} with {{this.path = inPath.intern();}} However, if {{inPath}} can ever be set to null, the above code will fail. Hence in e.g. Hadoop and Hive we have library methods that simply perform something like {{return s != null ? s.intern() : null; }}We use such methods everywhere instead of a plain intern() call to avoid any real or potential NPEs.

I expected to be able to use {{org.apache.hadoop.StringInterner.weakIntern()}}, that in the recent versions of Hadoop performs the proper call to String.intern() as above . But turns out that Oozie still depends on some old hadoop version, where the above {{weakIntern()}} method uses some old stuff, essentially a custom interner class based on WeakHashMap. In JDK 7 and newer, the built-in {{String.intern()}} method performs much better than such custom interners, and thus we should use it.

So basically here we have a choice of either:
 # Upgrade the Hadoop dependency in oozie to a newer version. That may introduce problems/incompatibilities somewhere (or may be long overdue :))
 # Add oozie-internal class, something like {{org.apache.oozie.StringUtils}} and stock it with the {{intern(String)}} and maybe some other methods like {{internStringsInList(List<String>)}} etc.

What would you suggest?

[~misha@cloudera.com] since we have to maintain support for older Hadoop versions as well (heck, we've only dropped support for Hadoop 1 recently), upgrading the Hadoop dependency doesn't work for us.

So I suggest to copy over {{org.apache.hadoop.StringInterner}} class to Oozie sources, or use the original Hadoop one w/ shading so that it wouldn't collide with the old Hadoop dependencies.

PreCommit-OOZIE-Build started



Testing JIRA OOZIE-3232

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1{color} There are no new bugs found in total.
. {color:green}+1{color} There are no new bugs found in [docs].
. {color:green}+1{color} There are no new bugs found in [webapp].
. {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive].
. {color:green}+1{color} There are no new bugs found in [sharelib/spark].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
. {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
. {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
. {color:green}+1{color} There are no new bugs found in [sharelib/pig].
. {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
. {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
. {color:green}+1{color} There are no new bugs found in [examples].
. {color:green}+1{color} There are no new bugs found in [client].
. {color:green}+1{color} There are no new bugs found in [core].
. {color:green}+1{color} There are no new bugs found in [tools].
. {color:green}+1{color} There are no new bugs found in [server].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 2129
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

testHiveAction(org.apache.oozie.action.hadoop.TestHiveActionExecutor)

.    Tests failing with errors:


.    {color:orange}Tests failed at first run:{color}
TestJavaActionExecutor#testCredentialsSkip
TestStatusTransitService#testBundleStatusTransitWithLock
TestZKLocksService#testWriteReadLockThreads
TestOozieDBCLI#testOozieDBCLI
.    For the complete list of flaky tests, see TEST-SUMMARY-FULL files.
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

. https://builds.apache.org/job/PreCommit-OOZIE-Build/516/



Thanks for the contribution [~misha@cloudera.com]! Looking into doing some performance testing.

Thank you [~andras.piros] Can you please take a look at the above failed tests? I highly doubt that my changes could cause this.

[~misha@cloudera.com] the failing test is unrelated.

+1

Committed to {{master}}.

Closing issue; Oozie 5.1.0 is released.

