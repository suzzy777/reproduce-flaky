chibenwa opened a new pull request #280:
URL: https://github.com/apache/james-project/pull/280


   Thanks to @jeantil @mbaechler 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


My eyes are bleeding but I found a way to make MimeMessageCopyOnWrite mutability madness kinda threadsafe https://github.com/apache/james-project/pull/280

I will need to polish it (tomorrow!) and add the zillions lock calls to make all methods safe, not only just getSubject/setSubject.

Arsnael commented on a change in pull request #280:
URL: https://github.com/apache/james-project/pull/280#discussion_r542099368



##########
File path: server/container/core/src/main/java/org/apache/james/server/core/MimeMessageCopyOnWriteProxy.java
##########
@@ -67,98 +92,208 @@ public MessageReferenceTracker(MimeMessage ref) {
             wrapped = ref;
         }
 
-        protected synchronized void incrementReferenceCount() {
-            referenceCount++;
+        protected void dispose() {
+            ReentrantReadWriteLock.WriteLock lock = this.lock.writeLock();
+            lock.lock();
+            try {
+                referenceCount--;
+                if (referenceCount <= 0) {
+                    LifecycleUtil.dispose(wrapped);
+                    wrapped = null;
+                }
+            } finally {
+                lock.unlock();
+            }
         }
 
-        protected synchronized void decrementReferenceCount() {
-            referenceCount--;
-            if (referenceCount <= 0) {
-                LifecycleUtil.dispose(wrapped);
-                wrapped = null;
+        protected void incrementReferences() {
+            ReentrantReadWriteLock.WriteLock lock = this.lock.writeLock();

Review comment:
       idem

##########
File path: server/container/core/src/main/java/org/apache/james/server/core/MimeMessageCopyOnWriteProxy.java
##########
@@ -67,98 +92,208 @@ public MessageReferenceTracker(MimeMessage ref) {
             wrapped = ref;
         }
 
-        protected synchronized void incrementReferenceCount() {
-            referenceCount++;
+        protected void dispose() {
+            ReentrantReadWriteLock.WriteLock lock = this.lock.writeLock();

Review comment:
       I know this is code correct, but maybe I would rename the local variable `writeLock` to avoid any confusion with the class variable?

##########
File path: server/container/core/src/main/java/org/apache/james/server/core/MimeMessageCopyOnWriteProxy.java
##########
@@ -67,98 +92,208 @@ public MessageReferenceTracker(MimeMessage ref) {
             wrapped = ref;
         }
 
-        protected synchronized void incrementReferenceCount() {
-            referenceCount++;
+        protected void dispose() {
+            ReentrantReadWriteLock.WriteLock lock = this.lock.writeLock();
+            lock.lock();
+            try {
+                referenceCount--;
+                if (referenceCount <= 0) {
+                    LifecycleUtil.dispose(wrapped);
+                    wrapped = null;
+                }
+            } finally {
+                lock.unlock();
+            }
         }
 
-        protected synchronized void decrementReferenceCount() {
-            referenceCount--;
-            if (referenceCount <= 0) {
-                LifecycleUtil.dispose(wrapped);
-                wrapped = null;
+        protected void incrementReferences() {
+            ReentrantReadWriteLock.WriteLock lock = this.lock.writeLock();
+            lock.lock();
+            try {
+                referenceCount++;
+            } finally {
+                lock.unlock();
             }
         }
 
-        protected synchronized int getReferenceCount() {
-            return referenceCount;
+        protected <T> T wrapRead(Read<T> op) throws MessagingException {
+            ReentrantReadWriteLock.ReadLock lock = this.lock.readLock();
+            lock.lock();
+            try {
+                Preconditions.checkState(referenceCount > 0, "Attempt to read a disposed message");
+                return op.read(wrapped);
+            } finally {
+                lock.unlock();
+            }
         }
 
-        public synchronized MimeMessage getWrapped() {
-            return wrapped;
+        protected <T> T wrapReadIO(ReadIO<T> op) throws MessagingException, IOException {
+            ReentrantReadWriteLock.ReadLock lock = this.lock.readLock();
+            lock.lock();
+            try {
+                Preconditions.checkState(referenceCount > 0, "Attempt to read a disposed message");
+                return op.read(wrapped);
+            } finally {
+                lock.unlock();
+            }
         }
 
-    }
+        protected <T> T wrapReadNoException(Function<MimeMessage, T> op) {
+            ReentrantReadWriteLock.ReadLock lock = this.lock.readLock();

Review comment:
       idem

##########
File path: server/container/core/src/main/java/org/apache/james/server/core/MimeMessageCopyOnWriteProxy.java
##########
@@ -67,98 +92,208 @@ public MessageReferenceTracker(MimeMessage ref) {
             wrapped = ref;
         }
 
-        protected synchronized void incrementReferenceCount() {
-            referenceCount++;
+        protected void dispose() {
+            ReentrantReadWriteLock.WriteLock lock = this.lock.writeLock();
+            lock.lock();
+            try {
+                referenceCount--;
+                if (referenceCount <= 0) {
+                    LifecycleUtil.dispose(wrapped);
+                    wrapped = null;
+                }
+            } finally {
+                lock.unlock();
+            }
         }
 
-        protected synchronized void decrementReferenceCount() {
-            referenceCount--;
-            if (referenceCount <= 0) {
-                LifecycleUtil.dispose(wrapped);
-                wrapped = null;
+        protected void incrementReferences() {
+            ReentrantReadWriteLock.WriteLock lock = this.lock.writeLock();
+            lock.lock();
+            try {
+                referenceCount++;
+            } finally {
+                lock.unlock();
             }
         }
 
-        protected synchronized int getReferenceCount() {
-            return referenceCount;
+        protected <T> T wrapRead(Read<T> op) throws MessagingException {
+            ReentrantReadWriteLock.ReadLock lock = this.lock.readLock();
+            lock.lock();
+            try {
+                Preconditions.checkState(referenceCount > 0, "Attempt to read a disposed message");
+                return op.read(wrapped);
+            } finally {
+                lock.unlock();
+            }
         }
 
-        public synchronized MimeMessage getWrapped() {
-            return wrapped;
+        protected <T> T wrapReadIO(ReadIO<T> op) throws MessagingException, IOException {
+            ReentrantReadWriteLock.ReadLock lock = this.lock.readLock();

Review comment:
       idem

##########
File path: server/container/core/src/main/java/org/apache/james/server/core/MimeMessageCopyOnWriteProxy.java
##########
@@ -67,98 +92,208 @@ public MessageReferenceTracker(MimeMessage ref) {
             wrapped = ref;
         }
 
-        protected synchronized void incrementReferenceCount() {
-            referenceCount++;
+        protected void dispose() {
+            ReentrantReadWriteLock.WriteLock lock = this.lock.writeLock();
+            lock.lock();
+            try {
+                referenceCount--;
+                if (referenceCount <= 0) {
+                    LifecycleUtil.dispose(wrapped);
+                    wrapped = null;
+                }
+            } finally {
+                lock.unlock();
+            }
         }
 
-        protected synchronized void decrementReferenceCount() {
-            referenceCount--;
-            if (referenceCount <= 0) {
-                LifecycleUtil.dispose(wrapped);
-                wrapped = null;
+        protected void incrementReferences() {
+            ReentrantReadWriteLock.WriteLock lock = this.lock.writeLock();
+            lock.lock();
+            try {
+                referenceCount++;
+            } finally {
+                lock.unlock();
             }
         }
 
-        protected synchronized int getReferenceCount() {
-            return referenceCount;
+        protected <T> T wrapRead(Read<T> op) throws MessagingException {
+            ReentrantReadWriteLock.ReadLock lock = this.lock.readLock();

Review comment:
       idem with `readLock`

##########
File path: server/container/core/src/main/java/org/apache/james/server/core/MimeMessageCopyOnWriteProxy.java
##########
@@ -67,98 +92,208 @@ public MessageReferenceTracker(MimeMessage ref) {
             wrapped = ref;
         }
 
-        protected synchronized void incrementReferenceCount() {
-            referenceCount++;
+        protected void dispose() {
+            ReentrantReadWriteLock.WriteLock lock = this.lock.writeLock();
+            lock.lock();
+            try {
+                referenceCount--;
+                if (referenceCount <= 0) {
+                    LifecycleUtil.dispose(wrapped);
+                    wrapped = null;
+                }
+            } finally {
+                lock.unlock();
+            }
         }
 
-        protected synchronized void decrementReferenceCount() {
-            referenceCount--;
-            if (referenceCount <= 0) {
-                LifecycleUtil.dispose(wrapped);
-                wrapped = null;
+        protected void incrementReferences() {
+            ReentrantReadWriteLock.WriteLock lock = this.lock.writeLock();
+            lock.lock();
+            try {
+                referenceCount++;
+            } finally {
+                lock.unlock();
             }
         }
 
-        protected synchronized int getReferenceCount() {
-            return referenceCount;
+        protected <T> T wrapRead(Read<T> op) throws MessagingException {
+            ReentrantReadWriteLock.ReadLock lock = this.lock.readLock();
+            lock.lock();
+            try {
+                Preconditions.checkState(referenceCount > 0, "Attempt to read a disposed message");
+                return op.read(wrapped);
+            } finally {
+                lock.unlock();
+            }
         }
 
-        public synchronized MimeMessage getWrapped() {
-            return wrapped;
+        protected <T> T wrapReadIO(ReadIO<T> op) throws MessagingException, IOException {
+            ReentrantReadWriteLock.ReadLock lock = this.lock.readLock();
+            lock.lock();
+            try {
+                Preconditions.checkState(referenceCount > 0, "Attempt to read a disposed message");
+                return op.read(wrapped);
+            } finally {
+                lock.unlock();
+            }
         }
 
-    }
+        protected <T> T wrapReadNoException(Function<MimeMessage, T> op) {
+            ReentrantReadWriteLock.ReadLock lock = this.lock.readLock();
+            lock.lock();
+            try {
+                Preconditions.checkState(referenceCount > 0, "Attempt to read a disposed message");
+                return op.apply(wrapped);
+            } finally {
+                lock.unlock();
+            }
+        }
 
-    protected MessageReferenceTracker refCount;
+        protected MessageReferenceTracker wrapWrite(Write op) throws MessagingException {
+            ReentrantReadWriteLock.WriteLock lock = this.lock.writeLock();
+            lock.lock();
+            try {
+                Preconditions.checkState(referenceCount > 0, "Attempt to write a disposed message");
+                if (referenceCount > 1) {
+                    referenceCount--;
+                    MessageReferenceTracker newRef = new MessageReferenceTracker(new MimeMessageWrapper(wrapped));
+                    newRef.wrapWrite(op);
+                    return newRef;
+                } else {
+                    op.write(wrapped);
+                    return this;
+                }
+            } finally {
+                lock.unlock();
+            }
+        }
+
+        protected MessageReferenceTracker wrapWriteIO(WriteIO op) throws MessagingException, IOException {
+            ReentrantReadWriteLock.WriteLock lock = this.lock.writeLock();

Review comment:
       idem

##########
File path: server/container/core/src/main/java/org/apache/james/server/core/MimeMessageCopyOnWriteProxy.java
##########
@@ -67,98 +92,208 @@ public MessageReferenceTracker(MimeMessage ref) {
             wrapped = ref;
         }
 
-        protected synchronized void incrementReferenceCount() {
-            referenceCount++;
+        protected void dispose() {
+            ReentrantReadWriteLock.WriteLock lock = this.lock.writeLock();
+            lock.lock();
+            try {
+                referenceCount--;
+                if (referenceCount <= 0) {
+                    LifecycleUtil.dispose(wrapped);
+                    wrapped = null;
+                }
+            } finally {
+                lock.unlock();
+            }
         }
 
-        protected synchronized void decrementReferenceCount() {
-            referenceCount--;
-            if (referenceCount <= 0) {
-                LifecycleUtil.dispose(wrapped);
-                wrapped = null;
+        protected void incrementReferences() {
+            ReentrantReadWriteLock.WriteLock lock = this.lock.writeLock();
+            lock.lock();
+            try {
+                referenceCount++;
+            } finally {
+                lock.unlock();
             }
         }
 
-        protected synchronized int getReferenceCount() {
-            return referenceCount;
+        protected <T> T wrapRead(Read<T> op) throws MessagingException {
+            ReentrantReadWriteLock.ReadLock lock = this.lock.readLock();
+            lock.lock();
+            try {
+                Preconditions.checkState(referenceCount > 0, "Attempt to read a disposed message");
+                return op.read(wrapped);
+            } finally {
+                lock.unlock();
+            }
         }
 
-        public synchronized MimeMessage getWrapped() {
-            return wrapped;
+        protected <T> T wrapReadIO(ReadIO<T> op) throws MessagingException, IOException {
+            ReentrantReadWriteLock.ReadLock lock = this.lock.readLock();
+            lock.lock();
+            try {
+                Preconditions.checkState(referenceCount > 0, "Attempt to read a disposed message");
+                return op.read(wrapped);
+            } finally {
+                lock.unlock();
+            }
         }
 
-    }
+        protected <T> T wrapReadNoException(Function<MimeMessage, T> op) {
+            ReentrantReadWriteLock.ReadLock lock = this.lock.readLock();
+            lock.lock();
+            try {
+                Preconditions.checkState(referenceCount > 0, "Attempt to read a disposed message");
+                return op.apply(wrapped);
+            } finally {
+                lock.unlock();
+            }
+        }
 
-    protected MessageReferenceTracker refCount;
+        protected MessageReferenceTracker wrapWrite(Write op) throws MessagingException {
+            ReentrantReadWriteLock.WriteLock lock = this.lock.writeLock();
+            lock.lock();
+            try {
+                Preconditions.checkState(referenceCount > 0, "Attempt to write a disposed message");
+                if (referenceCount > 1) {
+                    referenceCount--;
+                    MessageReferenceTracker newRef = new MessageReferenceTracker(new MimeMessageWrapper(wrapped));
+                    newRef.wrapWrite(op);
+                    return newRef;
+                } else {
+                    op.write(wrapped);
+                    return this;
+                }
+            } finally {
+                lock.unlock();
+            }
+        }
+
+        protected MessageReferenceTracker wrapWriteIO(WriteIO op) throws MessagingException, IOException {
+            ReentrantReadWriteLock.WriteLock lock = this.lock.writeLock();
+            lock.lock();
+            try {
+                Preconditions.checkState(referenceCount > 0, "Attempt to write a disposed message");
+                if (referenceCount > 1) {
+                    referenceCount--;
+                    MessageReferenceTracker newRef = new MessageReferenceTracker(new MimeMessageWrapper(wrapped));
+                    newRef.wrapWriteIO(op);
+                    return newRef;
+                } else {
+                    op.write(wrapped);
+                    return this;
+                }
+            } finally {
+                lock.unlock();
+            }
+        }
 
-    public MimeMessageCopyOnWriteProxy(MimeMessage original) throws MessagingException {
-        this(original, false);
+        private MimeMessage getWrapped() {
+            return wrapped;
+        }
+
+        protected MessageReferenceTracker newRef() {
+            ReentrantReadWriteLock.WriteLock lock = this.lock.writeLock();

Review comment:
       idem

##########
File path: server/container/core/src/main/java/org/apache/james/server/core/MimeMessageCopyOnWriteProxy.java
##########
@@ -67,98 +92,208 @@ public MessageReferenceTracker(MimeMessage ref) {
             wrapped = ref;
         }
 
-        protected synchronized void incrementReferenceCount() {
-            referenceCount++;
+        protected void dispose() {
+            ReentrantReadWriteLock.WriteLock lock = this.lock.writeLock();
+            lock.lock();
+            try {
+                referenceCount--;
+                if (referenceCount <= 0) {
+                    LifecycleUtil.dispose(wrapped);
+                    wrapped = null;
+                }
+            } finally {
+                lock.unlock();
+            }
         }
 
-        protected synchronized void decrementReferenceCount() {
-            referenceCount--;
-            if (referenceCount <= 0) {
-                LifecycleUtil.dispose(wrapped);
-                wrapped = null;
+        protected void incrementReferences() {
+            ReentrantReadWriteLock.WriteLock lock = this.lock.writeLock();
+            lock.lock();
+            try {
+                referenceCount++;
+            } finally {
+                lock.unlock();
             }
         }
 
-        protected synchronized int getReferenceCount() {
-            return referenceCount;
+        protected <T> T wrapRead(Read<T> op) throws MessagingException {
+            ReentrantReadWriteLock.ReadLock lock = this.lock.readLock();
+            lock.lock();
+            try {
+                Preconditions.checkState(referenceCount > 0, "Attempt to read a disposed message");
+                return op.read(wrapped);
+            } finally {
+                lock.unlock();
+            }
         }
 
-        public synchronized MimeMessage getWrapped() {
-            return wrapped;
+        protected <T> T wrapReadIO(ReadIO<T> op) throws MessagingException, IOException {
+            ReentrantReadWriteLock.ReadLock lock = this.lock.readLock();
+            lock.lock();
+            try {
+                Preconditions.checkState(referenceCount > 0, "Attempt to read a disposed message");
+                return op.read(wrapped);
+            } finally {
+                lock.unlock();
+            }
         }
 
-    }
+        protected <T> T wrapReadNoException(Function<MimeMessage, T> op) {
+            ReentrantReadWriteLock.ReadLock lock = this.lock.readLock();
+            lock.lock();
+            try {
+                Preconditions.checkState(referenceCount > 0, "Attempt to read a disposed message");
+                return op.apply(wrapped);
+            } finally {
+                lock.unlock();
+            }
+        }
 
-    protected MessageReferenceTracker refCount;
+        protected MessageReferenceTracker wrapWrite(Write op) throws MessagingException {
+            ReentrantReadWriteLock.WriteLock lock = this.lock.writeLock();

Review comment:
       idem




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil commented on a change in pull request #280:
URL: https://github.com/apache/james-project/pull/280#discussion_r542206112



##########
File path: server/container/core/src/main/java/org/apache/james/server/core/MimeMessageCopyOnWriteProxy.java
##########
@@ -67,98 +93,208 @@ public MessageReferenceTracker(MimeMessage ref) {
             wrapped = ref;
         }
 
-        protected synchronized void incrementReferenceCount() {
-            referenceCount++;
+        protected void dispose() {
+            ReentrantReadWriteLock.WriteLock writeLock = lock.writeLock();
+            writeLock.lock();
+            try {
+                referenceCount--;
+                if (referenceCount <= 0) {
+                    LifecycleUtil.dispose(wrapped);
+                    wrapped = null;
+                }
+            } finally {
+                writeLock.unlock();
+            }
         }
 
-        protected synchronized void decrementReferenceCount() {
-            referenceCount--;
-            if (referenceCount <= 0) {
-                LifecycleUtil.dispose(wrapped);
-                wrapped = null;
+        protected void incrementReferences() {
+            ReentrantReadWriteLock.WriteLock writeLock = lock.writeLock();
+            writeLock.lock();
+            try {
+                referenceCount++;

Review comment:
       out of curiosity: what meaningful exception could possibly be thrown here ?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #280:
URL: https://github.com/apache/james-project/pull/280#issuecomment-744292453


   > I know all the effort that has been invested in all this, but I would very much like to see the benchmark that led to implement this copy on write scheme instead of simply copying on every instantiation. 
   
   :+1: we need to know if it worth it
   
   We need to see if this code complexity is worth it (I am not super fan of the proposed solution here that partially resolves the problem)
   
   > It feels like trying to preserver heap space at the cost of synchronization this is optimization territory and should be backed by measurements that are kept up to date for new releases.
   
   We are trying to avoid disk writes that could happen from this copy from what I understand.
   
   > I wonder what the perf profile of the server would look like with a more naive copy approach.
   
   We need to design a test, where emails are actually split (matcher splitting leads to several copies being hold)
   
   We could do micro benchmark of 1000 processed emails of 100KB split 5 time against both implems. What would you think ?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #280:
URL: https://github.com/apache/james-project/pull/280#issuecomment-744293616


   (for the record I see the double lock solution more as a personal challenge than necessary a long term solution)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on a change in pull request #280:
URL: https://github.com/apache/james-project/pull/280#discussion_r542255839



##########
File path: server/container/core/src/main/java/org/apache/james/server/core/MimeMessageCopyOnWriteProxy.java
##########
@@ -67,98 +93,208 @@ public MessageReferenceTracker(MimeMessage ref) {
             wrapped = ref;
         }
 
-        protected synchronized void incrementReferenceCount() {
-            referenceCount++;
+        protected void dispose() {
+            ReentrantReadWriteLock.WriteLock writeLock = lock.writeLock();
+            writeLock.lock();
+            try {
+                referenceCount--;
+                if (referenceCount <= 0) {
+                    LifecycleUtil.dispose(wrapped);
+                    wrapped = null;
+                }
+            } finally {
+                writeLock.unlock();
+            }
         }
 
-        protected synchronized void decrementReferenceCount() {
-            referenceCount--;
-            if (referenceCount <= 0) {
-                LifecycleUtil.dispose(wrapped);
-                wrapped = null;
+        protected void incrementReferences() {
+            ReentrantReadWriteLock.WriteLock writeLock = lock.writeLock();
+            writeLock.lock();
+            try {
+                referenceCount++;

Review comment:
       I'm becoming paranoid when locks are around I guess!




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #280:
URL: https://github.com/apache/james-project/pull/280#issuecomment-744378892


   Add a quick 'toy' micro-benchmark for evaluating mailetcon…
   32d1fca
   
   …tainer efficiency
   
   On top of master: 16.691 ms
   
   On top of the proposed changes: 17.126 ms
   
   With "always copy" behavior: 15.442 ms
   
   Implementation of "always copy" behavior:
   
   ```
        private MimeMessageCopyOnWriteProxy(MimeMessage original, boolean originalIsAReference) {
           super(Session.getDefaultInstance(System.getProperties(), null));
   
           try {
               refCount = new MessageReferenceTracker(new MimeMessageWrapper(original));
           } catch (MessagingException e) {
               throw new RuntimeException(e);
           }
       }
   ```
   
   Performance gains of copy-on-write proxy are not obvious...


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil commented on a change in pull request #280:
URL: https://github.com/apache/james-project/pull/280#discussion_r542320585



##########
File path: server/mailet/integration-testing/src/test/java/org/apache/james/mailets/MimeMessageBenchTest.java
##########
@@ -0,0 +1,146 @@
+/****************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one   *
+ * or more contributor license agreements.  See the NOTICE file *
+ * distributed with this work for additional information        *
+ * regarding copyright ownership.  The ASF licenses this file   *
+ * to you under the Apache License, Version 2.0 (the            *
+ * "License"); you may not use this file except in compliance   *
+ * with the License.  You may obtain a copy of the License at   *
+ *                                                              *
+ *   http://www.apache.org/licenses/LICENSE-2.0                 *
+ *                                                              *
+ * Unless required by applicable law or agreed to in writing,   *
+ * software distributed under the License is distributed on an  *
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
+ * KIND, either express or implied.  See the License for the    *
+ * specific language governing permissions and limitations      *
+ * under the License.                                           *
+ ****************************************************************/
+
+package org.apache.james.mailets;
+
+import static org.apache.james.mailets.configuration.Constants.DEFAULT_DOMAIN;
+import static org.apache.james.mailets.configuration.Constants.FROM;
+import static org.apache.james.mailets.configuration.Constants.LOCALHOST_IP;
+import static org.apache.james.mailets.configuration.Constants.PASSWORD;
+import static org.apache.james.mailets.configuration.Constants.awaitAtMostOneMinute;
+
+import java.util.concurrent.TimeUnit;
+import java.util.stream.IntStream;
+
+import org.apache.james.MemoryJamesServerMain;
+import org.apache.james.core.builder.MimeMessageBuilder;
+import org.apache.james.mailets.configuration.CommonProcessors;
+import org.apache.james.mailets.configuration.MailetConfiguration;
+import org.apache.james.mailets.configuration.MailetContainer;
+import org.apache.james.mailets.configuration.ProcessorConfiguration;
+import org.apache.james.modules.protocols.SmtpGuiceProbe;
+import org.apache.james.probe.DataProbe;
+import org.apache.james.server.core.MailImpl;
+import org.apache.james.transport.mailets.LogMessage;
+import org.apache.james.transport.matchers.RecipientIs;
+import org.apache.james.utils.DataProbeImpl;
+import org.apache.james.utils.SMTPMessageSender;
+import org.apache.james.utils.SpoolerProbe;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.rules.TemporaryFolder;
+
+import com.github.fge.lambdas.Throwing;
+import com.google.common.base.Stopwatch;
+
+/**
+ * This benches the efficiency at which James mailetcontainer splits emails.
+ */
+@Disabled
+public class MimeMessageBenchTest {
+    private static String CONTENT = "0123456789\r\n".repeat(1024 * 10); // 120KB message

Review comment:
       I would recommend using random contents, the JVM is  really good at optimizing things that always look the same




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil commented on a change in pull request #280:
URL: https://github.com/apache/james-project/pull/280#discussion_r542328329



##########
File path: server/mailet/integration-testing/src/test/java/org/apache/james/mailets/MimeMessageBenchTest.java
##########
@@ -0,0 +1,146 @@
+/****************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one   *
+ * or more contributor license agreements.  See the NOTICE file *
+ * distributed with this work for additional information        *
+ * regarding copyright ownership.  The ASF licenses this file   *
+ * to you under the Apache License, Version 2.0 (the            *
+ * "License"); you may not use this file except in compliance   *
+ * with the License.  You may obtain a copy of the License at   *
+ *                                                              *
+ *   http://www.apache.org/licenses/LICENSE-2.0                 *
+ *                                                              *
+ * Unless required by applicable law or agreed to in writing,   *
+ * software distributed under the License is distributed on an  *
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
+ * KIND, either express or implied.  See the License for the    *
+ * specific language governing permissions and limitations      *
+ * under the License.                                           *
+ ****************************************************************/
+
+package org.apache.james.mailets;
+
+import static org.apache.james.mailets.configuration.Constants.DEFAULT_DOMAIN;
+import static org.apache.james.mailets.configuration.Constants.FROM;
+import static org.apache.james.mailets.configuration.Constants.LOCALHOST_IP;
+import static org.apache.james.mailets.configuration.Constants.PASSWORD;
+import static org.apache.james.mailets.configuration.Constants.awaitAtMostOneMinute;
+
+import java.util.concurrent.TimeUnit;
+import java.util.stream.IntStream;
+
+import org.apache.james.MemoryJamesServerMain;
+import org.apache.james.core.builder.MimeMessageBuilder;
+import org.apache.james.mailets.configuration.CommonProcessors;
+import org.apache.james.mailets.configuration.MailetConfiguration;
+import org.apache.james.mailets.configuration.MailetContainer;
+import org.apache.james.mailets.configuration.ProcessorConfiguration;
+import org.apache.james.modules.protocols.SmtpGuiceProbe;
+import org.apache.james.probe.DataProbe;
+import org.apache.james.server.core.MailImpl;
+import org.apache.james.transport.mailets.LogMessage;
+import org.apache.james.transport.matchers.RecipientIs;
+import org.apache.james.utils.DataProbeImpl;
+import org.apache.james.utils.SMTPMessageSender;
+import org.apache.james.utils.SpoolerProbe;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.rules.TemporaryFolder;
+
+import com.github.fge.lambdas.Throwing;
+import com.google.common.base.Stopwatch;
+
+/**
+ * This benches the efficiency at which James mailetcontainer splits emails.
+ */
+@Disabled
+public class MimeMessageBenchTest {
+    private static String CONTENT = "0123456789\r\n".repeat(1024 * 10); // 120KB message
+
+    @Rule
+    public TemporaryFolder temporaryFolder = new TemporaryFolder();
+    @Rule
+    public SMTPMessageSender messageSender = new SMTPMessageSender(DEFAULT_DOMAIN);
+
+    private TemporaryJamesServer jamesServer;
+
+    @Before
+    public void setup() throws Exception {
+        jamesServer = TemporaryJamesServer.builder()
+            .withBase(MemoryJamesServerMain.SMTP_AND_IMAP_MODULE)
+            .withMailetContainer(
+                generateMailetContainerConfiguration())
+            .build(temporaryFolder.newFolder());
+        jamesServer.start();
+
+        DataProbe dataProbe = jamesServer.getProbe(DataProbeImpl.class);
+        dataProbe.addDomain(DEFAULT_DOMAIN);
+        dataProbe.addUser("rcpt1@" + DEFAULT_DOMAIN, PASSWORD);
+        dataProbe.addUser("rcpt2@" + DEFAULT_DOMAIN, PASSWORD);
+        dataProbe.addUser("rcpt3@" + DEFAULT_DOMAIN, PASSWORD);
+        dataProbe.addUser("rcpt4@" + DEFAULT_DOMAIN, PASSWORD);
+        dataProbe.addUser("rcpt5@" + DEFAULT_DOMAIN, PASSWORD);
+    }
+
+    @After
+    public void tearDown() {
+        jamesServer.shutdown();
+    }
+
+    @Test
+    public void receivedMessagesShouldContainDeliveredToHeaders() throws Exception {
+        messageSender.connect(LOCALHOST_IP, jamesServer.getProbe(SmtpGuiceProbe.class).getSmtpPort());
+
+        Stopwatch stopwatch = Stopwatch.createStarted();

Review comment:
       I think it would be worth it to investigate jmh microbenchmarks in the future. Some useful resources: 
   - https://github.com/openjdk/jmh
   - https://stackoverflow.com/questions/30485856/how-to-run-jmh-from-inside-junit-tests




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil commented on a change in pull request #280:
URL: https://github.com/apache/james-project/pull/280#discussion_r542329956



##########
File path: server/mailet/integration-testing/src/test/java/org/apache/james/mailets/MimeMessageBenchTest.java
##########
@@ -0,0 +1,146 @@
+/****************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one   *
+ * or more contributor license agreements.  See the NOTICE file *
+ * distributed with this work for additional information        *
+ * regarding copyright ownership.  The ASF licenses this file   *
+ * to you under the Apache License, Version 2.0 (the            *
+ * "License"); you may not use this file except in compliance   *
+ * with the License.  You may obtain a copy of the License at   *
+ *                                                              *
+ *   http://www.apache.org/licenses/LICENSE-2.0                 *
+ *                                                              *
+ * Unless required by applicable law or agreed to in writing,   *
+ * software distributed under the License is distributed on an  *
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
+ * KIND, either express or implied.  See the License for the    *
+ * specific language governing permissions and limitations      *
+ * under the License.                                           *
+ ****************************************************************/
+
+package org.apache.james.mailets;
+
+import static org.apache.james.mailets.configuration.Constants.DEFAULT_DOMAIN;
+import static org.apache.james.mailets.configuration.Constants.FROM;
+import static org.apache.james.mailets.configuration.Constants.LOCALHOST_IP;
+import static org.apache.james.mailets.configuration.Constants.PASSWORD;
+import static org.apache.james.mailets.configuration.Constants.awaitAtMostOneMinute;
+
+import java.util.concurrent.TimeUnit;
+import java.util.stream.IntStream;
+
+import org.apache.james.MemoryJamesServerMain;
+import org.apache.james.core.builder.MimeMessageBuilder;
+import org.apache.james.mailets.configuration.CommonProcessors;
+import org.apache.james.mailets.configuration.MailetConfiguration;
+import org.apache.james.mailets.configuration.MailetContainer;
+import org.apache.james.mailets.configuration.ProcessorConfiguration;
+import org.apache.james.modules.protocols.SmtpGuiceProbe;
+import org.apache.james.probe.DataProbe;
+import org.apache.james.server.core.MailImpl;
+import org.apache.james.transport.mailets.LogMessage;
+import org.apache.james.transport.matchers.RecipientIs;
+import org.apache.james.utils.DataProbeImpl;
+import org.apache.james.utils.SMTPMessageSender;
+import org.apache.james.utils.SpoolerProbe;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.rules.TemporaryFolder;
+
+import com.github.fge.lambdas.Throwing;
+import com.google.common.base.Stopwatch;
+
+/**
+ * This benches the efficiency at which James mailetcontainer splits emails.
+ */
+@Disabled
+public class MimeMessageBenchTest {
+    private static String CONTENT = "0123456789\r\n".repeat(1024 * 10); // 120KB message
+
+    @Rule
+    public TemporaryFolder temporaryFolder = new TemporaryFolder();
+    @Rule
+    public SMTPMessageSender messageSender = new SMTPMessageSender(DEFAULT_DOMAIN);
+
+    private TemporaryJamesServer jamesServer;
+
+    @Before
+    public void setup() throws Exception {
+        jamesServer = TemporaryJamesServer.builder()
+            .withBase(MemoryJamesServerMain.SMTP_AND_IMAP_MODULE)
+            .withMailetContainer(
+                generateMailetContainerConfiguration())
+            .build(temporaryFolder.newFolder());
+        jamesServer.start();
+
+        DataProbe dataProbe = jamesServer.getProbe(DataProbeImpl.class);
+        dataProbe.addDomain(DEFAULT_DOMAIN);
+        dataProbe.addUser("rcpt1@" + DEFAULT_DOMAIN, PASSWORD);
+        dataProbe.addUser("rcpt2@" + DEFAULT_DOMAIN, PASSWORD);
+        dataProbe.addUser("rcpt3@" + DEFAULT_DOMAIN, PASSWORD);
+        dataProbe.addUser("rcpt4@" + DEFAULT_DOMAIN, PASSWORD);
+        dataProbe.addUser("rcpt5@" + DEFAULT_DOMAIN, PASSWORD);
+    }
+
+    @After
+    public void tearDown() {
+        jamesServer.shutdown();
+    }
+
+    @Test
+    public void receivedMessagesShouldContainDeliveredToHeaders() throws Exception {
+        messageSender.connect(LOCALHOST_IP, jamesServer.getProbe(SmtpGuiceProbe.class).getSmtpPort());
+
+        Stopwatch stopwatch = Stopwatch.createStarted();
+        IntStream.range(0, 100)
+            .forEach(Throwing.intConsumer(i -> messageSender.sendMessage(MailImpl.builder()
+                .name("name" + i)
+                .sender(FROM)
+                .addRecipients("rcpt1@" + DEFAULT_DOMAIN,
+                    "rcpt2@" + DEFAULT_DOMAIN,
+                    "rcpt3@" + DEFAULT_DOMAIN,
+                    "rcpt4@" + DEFAULT_DOMAIN,
+                    "rcpt5@" + DEFAULT_DOMAIN)
+                .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
+                    .setSubject("subject i")
+                    .setText(CONTENT))
+                .build())));
+
+        awaitAtMostOneMinute.until(() -> jamesServer.getProbe(SpoolerProbe.class).processingFinished());
+        System.out.println("Spent: " + stopwatch.elapsed(TimeUnit.MILLISECONDS));
+    }
+
+
+    private MailetContainer.Builder generateMailetContainerConfiguration() {
+        return TemporaryJamesServer.defaultMailetContainerConfiguration()
+            .putProcessor(ProcessorConfiguration.transport()
+                .addMailet(MailetConfiguration.builder()
+                    .matcher(RecipientIs.class)
+                    .matcherCondition("rcpt1@" + DEFAULT_DOMAIN)
+                    .mailet(LogMessage.class)
+                    .addProperty("passThrough", "true"))
+                .addMailet(MailetConfiguration.builder()
+                    .matcher(RecipientIs.class)
+                    .matcherCondition("rcpt2@" + DEFAULT_DOMAIN)
+                    .mailet(LogMessage.class)
+                    .addProperty("passThrough", "true"))
+                .addMailet(MailetConfiguration.builder()
+                    .matcher(RecipientIs.class)
+                    .matcherCondition("rcpt3@" + DEFAULT_DOMAIN)
+                    .mailet(LogMessage.class)
+                    .addProperty("passThrough", "true"))
+                .addMailet(MailetConfiguration.builder()
+                    .matcher(RecipientIs.class)
+                    .matcherCondition("rcpt4@" + DEFAULT_DOMAIN)
+                    .mailet(LogMessage.class)
+                    .addProperty("passThrough", "true"))
+                .addMailet(MailetConfiguration.builder()
+                    .matcher(RecipientIs.class)
+                    .matcherCondition("rcpt5@" + DEFAULT_DOMAIN)
+                    .mailet(LogMessage.class)
+                    .addProperty("passThrough", "true"))
+                .addMailetsFrom(CommonProcessors.deliverOnlyTransport()));

Review comment:
       while this configuration does split message, as far as I can tell, none of the mailets attempt to concurrenlty "write" to the message, hence the exercised concurrency is actually pretty low. 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on a change in pull request #280:
URL: https://github.com/apache/james-project/pull/280#discussion_r542366228



##########
File path: server/mailet/integration-testing/src/test/java/org/apache/james/mailets/MimeMessageBenchTest.java
##########
@@ -0,0 +1,146 @@
+/****************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one   *
+ * or more contributor license agreements.  See the NOTICE file *
+ * distributed with this work for additional information        *
+ * regarding copyright ownership.  The ASF licenses this file   *
+ * to you under the Apache License, Version 2.0 (the            *
+ * "License"); you may not use this file except in compliance   *
+ * with the License.  You may obtain a copy of the License at   *
+ *                                                              *
+ *   http://www.apache.org/licenses/LICENSE-2.0                 *
+ *                                                              *
+ * Unless required by applicable law or agreed to in writing,   *
+ * software distributed under the License is distributed on an  *
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
+ * KIND, either express or implied.  See the License for the    *
+ * specific language governing permissions and limitations      *
+ * under the License.                                           *
+ ****************************************************************/
+
+package org.apache.james.mailets;
+
+import static org.apache.james.mailets.configuration.Constants.DEFAULT_DOMAIN;
+import static org.apache.james.mailets.configuration.Constants.FROM;
+import static org.apache.james.mailets.configuration.Constants.LOCALHOST_IP;
+import static org.apache.james.mailets.configuration.Constants.PASSWORD;
+import static org.apache.james.mailets.configuration.Constants.awaitAtMostOneMinute;
+
+import java.util.concurrent.TimeUnit;
+import java.util.stream.IntStream;
+
+import org.apache.james.MemoryJamesServerMain;
+import org.apache.james.core.builder.MimeMessageBuilder;
+import org.apache.james.mailets.configuration.CommonProcessors;
+import org.apache.james.mailets.configuration.MailetConfiguration;
+import org.apache.james.mailets.configuration.MailetContainer;
+import org.apache.james.mailets.configuration.ProcessorConfiguration;
+import org.apache.james.modules.protocols.SmtpGuiceProbe;
+import org.apache.james.probe.DataProbe;
+import org.apache.james.server.core.MailImpl;
+import org.apache.james.transport.mailets.LogMessage;
+import org.apache.james.transport.matchers.RecipientIs;
+import org.apache.james.utils.DataProbeImpl;
+import org.apache.james.utils.SMTPMessageSender;
+import org.apache.james.utils.SpoolerProbe;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.rules.TemporaryFolder;
+
+import com.github.fge.lambdas.Throwing;
+import com.google.common.base.Stopwatch;
+
+/**
+ * This benches the efficiency at which James mailetcontainer splits emails.
+ */
+@Disabled
+public class MimeMessageBenchTest {
+    private static String CONTENT = "0123456789\r\n".repeat(1024 * 10); // 120KB message
+
+    @Rule
+    public TemporaryFolder temporaryFolder = new TemporaryFolder();
+    @Rule
+    public SMTPMessageSender messageSender = new SMTPMessageSender(DEFAULT_DOMAIN);
+
+    private TemporaryJamesServer jamesServer;
+
+    @Before
+    public void setup() throws Exception {
+        jamesServer = TemporaryJamesServer.builder()
+            .withBase(MemoryJamesServerMain.SMTP_AND_IMAP_MODULE)
+            .withMailetContainer(
+                generateMailetContainerConfiguration())
+            .build(temporaryFolder.newFolder());
+        jamesServer.start();
+
+        DataProbe dataProbe = jamesServer.getProbe(DataProbeImpl.class);
+        dataProbe.addDomain(DEFAULT_DOMAIN);
+        dataProbe.addUser("rcpt1@" + DEFAULT_DOMAIN, PASSWORD);
+        dataProbe.addUser("rcpt2@" + DEFAULT_DOMAIN, PASSWORD);
+        dataProbe.addUser("rcpt3@" + DEFAULT_DOMAIN, PASSWORD);
+        dataProbe.addUser("rcpt4@" + DEFAULT_DOMAIN, PASSWORD);
+        dataProbe.addUser("rcpt5@" + DEFAULT_DOMAIN, PASSWORD);
+    }
+
+    @After
+    public void tearDown() {
+        jamesServer.shutdown();
+    }
+
+    @Test
+    public void receivedMessagesShouldContainDeliveredToHeaders() throws Exception {
+        messageSender.connect(LOCALHOST_IP, jamesServer.getProbe(SmtpGuiceProbe.class).getSmtpPort());
+
+        Stopwatch stopwatch = Stopwatch.createStarted();
+        IntStream.range(0, 100)
+            .forEach(Throwing.intConsumer(i -> messageSender.sendMessage(MailImpl.builder()
+                .name("name" + i)
+                .sender(FROM)
+                .addRecipients("rcpt1@" + DEFAULT_DOMAIN,
+                    "rcpt2@" + DEFAULT_DOMAIN,
+                    "rcpt3@" + DEFAULT_DOMAIN,
+                    "rcpt4@" + DEFAULT_DOMAIN,
+                    "rcpt5@" + DEFAULT_DOMAIN)
+                .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
+                    .setSubject("subject i")
+                    .setText(CONTENT))
+                .build())));
+
+        awaitAtMostOneMinute.until(() -> jamesServer.getProbe(SpoolerProbe.class).processingFinished());
+        System.out.println("Spent: " + stopwatch.elapsed(TimeUnit.MILLISECONDS));
+    }
+
+
+    private MailetContainer.Builder generateMailetContainerConfiguration() {
+        return TemporaryJamesServer.defaultMailetContainerConfiguration()
+            .putProcessor(ProcessorConfiguration.transport()
+                .addMailet(MailetConfiguration.builder()
+                    .matcher(RecipientIs.class)
+                    .matcherCondition("rcpt1@" + DEFAULT_DOMAIN)
+                    .mailet(LogMessage.class)
+                    .addProperty("passThrough", "true"))
+                .addMailet(MailetConfiguration.builder()
+                    .matcher(RecipientIs.class)
+                    .matcherCondition("rcpt2@" + DEFAULT_DOMAIN)
+                    .mailet(LogMessage.class)
+                    .addProperty("passThrough", "true"))
+                .addMailet(MailetConfiguration.builder()
+                    .matcher(RecipientIs.class)
+                    .matcherCondition("rcpt3@" + DEFAULT_DOMAIN)
+                    .mailet(LogMessage.class)
+                    .addProperty("passThrough", "true"))
+                .addMailet(MailetConfiguration.builder()
+                    .matcher(RecipientIs.class)
+                    .matcherCondition("rcpt4@" + DEFAULT_DOMAIN)
+                    .mailet(LogMessage.class)
+                    .addProperty("passThrough", "true"))
+                .addMailet(MailetConfiguration.builder()
+                    .matcher(RecipientIs.class)
+                    .matcherCondition("rcpt5@" + DEFAULT_DOMAIN)
+                    .mailet(LogMessage.class)
+                    .addProperty("passThrough", "true"))
+                .addMailetsFrom(CommonProcessors.deliverOnlyTransport()));

Review comment:
       If "writes" are performed, then content are not shareable anymore, and copy will happen anyway with the cow proxy.
   
   Doing only reads, where things can be shared, and avoiding copy, was my intention...




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on a change in pull request #280:
URL: https://github.com/apache/james-project/pull/280#discussion_r542368748



##########
File path: server/mailet/integration-testing/src/test/java/org/apache/james/mailets/MimeMessageBenchTest.java
##########
@@ -0,0 +1,146 @@
+/****************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one   *
+ * or more contributor license agreements.  See the NOTICE file *
+ * distributed with this work for additional information        *
+ * regarding copyright ownership.  The ASF licenses this file   *
+ * to you under the Apache License, Version 2.0 (the            *
+ * "License"); you may not use this file except in compliance   *
+ * with the License.  You may obtain a copy of the License at   *
+ *                                                              *
+ *   http://www.apache.org/licenses/LICENSE-2.0                 *
+ *                                                              *
+ * Unless required by applicable law or agreed to in writing,   *
+ * software distributed under the License is distributed on an  *
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
+ * KIND, either express or implied.  See the License for the    *
+ * specific language governing permissions and limitations      *
+ * under the License.                                           *
+ ****************************************************************/
+
+package org.apache.james.mailets;
+
+import static org.apache.james.mailets.configuration.Constants.DEFAULT_DOMAIN;
+import static org.apache.james.mailets.configuration.Constants.FROM;
+import static org.apache.james.mailets.configuration.Constants.LOCALHOST_IP;
+import static org.apache.james.mailets.configuration.Constants.PASSWORD;
+import static org.apache.james.mailets.configuration.Constants.awaitAtMostOneMinute;
+
+import java.util.concurrent.TimeUnit;
+import java.util.stream.IntStream;
+
+import org.apache.james.MemoryJamesServerMain;
+import org.apache.james.core.builder.MimeMessageBuilder;
+import org.apache.james.mailets.configuration.CommonProcessors;
+import org.apache.james.mailets.configuration.MailetConfiguration;
+import org.apache.james.mailets.configuration.MailetContainer;
+import org.apache.james.mailets.configuration.ProcessorConfiguration;
+import org.apache.james.modules.protocols.SmtpGuiceProbe;
+import org.apache.james.probe.DataProbe;
+import org.apache.james.server.core.MailImpl;
+import org.apache.james.transport.mailets.LogMessage;
+import org.apache.james.transport.matchers.RecipientIs;
+import org.apache.james.utils.DataProbeImpl;
+import org.apache.james.utils.SMTPMessageSender;
+import org.apache.james.utils.SpoolerProbe;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.rules.TemporaryFolder;
+
+import com.github.fge.lambdas.Throwing;
+import com.google.common.base.Stopwatch;
+
+/**
+ * This benches the efficiency at which James mailetcontainer splits emails.
+ */
+@Disabled
+public class MimeMessageBenchTest {
+    private static String CONTENT = "0123456789\r\n".repeat(1024 * 10); // 120KB message
+
+    @Rule
+    public TemporaryFolder temporaryFolder = new TemporaryFolder();
+    @Rule
+    public SMTPMessageSender messageSender = new SMTPMessageSender(DEFAULT_DOMAIN);
+
+    private TemporaryJamesServer jamesServer;
+
+    @Before
+    public void setup() throws Exception {
+        jamesServer = TemporaryJamesServer.builder()
+            .withBase(MemoryJamesServerMain.SMTP_AND_IMAP_MODULE)
+            .withMailetContainer(
+                generateMailetContainerConfiguration())
+            .build(temporaryFolder.newFolder());
+        jamesServer.start();
+
+        DataProbe dataProbe = jamesServer.getProbe(DataProbeImpl.class);
+        dataProbe.addDomain(DEFAULT_DOMAIN);
+        dataProbe.addUser("rcpt1@" + DEFAULT_DOMAIN, PASSWORD);
+        dataProbe.addUser("rcpt2@" + DEFAULT_DOMAIN, PASSWORD);
+        dataProbe.addUser("rcpt3@" + DEFAULT_DOMAIN, PASSWORD);
+        dataProbe.addUser("rcpt4@" + DEFAULT_DOMAIN, PASSWORD);
+        dataProbe.addUser("rcpt5@" + DEFAULT_DOMAIN, PASSWORD);
+    }
+
+    @After
+    public void tearDown() {
+        jamesServer.shutdown();
+    }
+
+    @Test
+    public void receivedMessagesShouldContainDeliveredToHeaders() throws Exception {
+        messageSender.connect(LOCALHOST_IP, jamesServer.getProbe(SmtpGuiceProbe.class).getSmtpPort());
+
+        Stopwatch stopwatch = Stopwatch.createStarted();

Review comment:
       Thanks! Junit integration sounds really easy to use.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil commented on a change in pull request #280:
URL: https://github.com/apache/james-project/pull/280#discussion_r542370160



##########
File path: server/mailet/integration-testing/src/test/java/org/apache/james/mailets/MimeMessageBenchTest.java
##########
@@ -0,0 +1,146 @@
+/****************************************************************
+ * Licensed to the Apache Software Foundation (ASF) under one   *
+ * or more contributor license agreements.  See the NOTICE file *
+ * distributed with this work for additional information        *
+ * regarding copyright ownership.  The ASF licenses this file   *
+ * to you under the Apache License, Version 2.0 (the            *
+ * "License"); you may not use this file except in compliance   *
+ * with the License.  You may obtain a copy of the License at   *
+ *                                                              *
+ *   http://www.apache.org/licenses/LICENSE-2.0                 *
+ *                                                              *
+ * Unless required by applicable law or agreed to in writing,   *
+ * software distributed under the License is distributed on an  *
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY       *
+ * KIND, either express or implied.  See the License for the    *
+ * specific language governing permissions and limitations      *
+ * under the License.                                           *
+ ****************************************************************/
+
+package org.apache.james.mailets;
+
+import static org.apache.james.mailets.configuration.Constants.DEFAULT_DOMAIN;
+import static org.apache.james.mailets.configuration.Constants.FROM;
+import static org.apache.james.mailets.configuration.Constants.LOCALHOST_IP;
+import static org.apache.james.mailets.configuration.Constants.PASSWORD;
+import static org.apache.james.mailets.configuration.Constants.awaitAtMostOneMinute;
+
+import java.util.concurrent.TimeUnit;
+import java.util.stream.IntStream;
+
+import org.apache.james.MemoryJamesServerMain;
+import org.apache.james.core.builder.MimeMessageBuilder;
+import org.apache.james.mailets.configuration.CommonProcessors;
+import org.apache.james.mailets.configuration.MailetConfiguration;
+import org.apache.james.mailets.configuration.MailetContainer;
+import org.apache.james.mailets.configuration.ProcessorConfiguration;
+import org.apache.james.modules.protocols.SmtpGuiceProbe;
+import org.apache.james.probe.DataProbe;
+import org.apache.james.server.core.MailImpl;
+import org.apache.james.transport.mailets.LogMessage;
+import org.apache.james.transport.matchers.RecipientIs;
+import org.apache.james.utils.DataProbeImpl;
+import org.apache.james.utils.SMTPMessageSender;
+import org.apache.james.utils.SpoolerProbe;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.rules.TemporaryFolder;
+
+import com.github.fge.lambdas.Throwing;
+import com.google.common.base.Stopwatch;
+
+/**
+ * This benches the efficiency at which James mailetcontainer splits emails.
+ */
+@Disabled
+public class MimeMessageBenchTest {
+    private static String CONTENT = "0123456789\r\n".repeat(1024 * 10); // 120KB message
+
+    @Rule
+    public TemporaryFolder temporaryFolder = new TemporaryFolder();
+    @Rule
+    public SMTPMessageSender messageSender = new SMTPMessageSender(DEFAULT_DOMAIN);
+
+    private TemporaryJamesServer jamesServer;
+
+    @Before
+    public void setup() throws Exception {
+        jamesServer = TemporaryJamesServer.builder()
+            .withBase(MemoryJamesServerMain.SMTP_AND_IMAP_MODULE)
+            .withMailetContainer(
+                generateMailetContainerConfiguration())
+            .build(temporaryFolder.newFolder());
+        jamesServer.start();
+
+        DataProbe dataProbe = jamesServer.getProbe(DataProbeImpl.class);
+        dataProbe.addDomain(DEFAULT_DOMAIN);
+        dataProbe.addUser("rcpt1@" + DEFAULT_DOMAIN, PASSWORD);
+        dataProbe.addUser("rcpt2@" + DEFAULT_DOMAIN, PASSWORD);
+        dataProbe.addUser("rcpt3@" + DEFAULT_DOMAIN, PASSWORD);
+        dataProbe.addUser("rcpt4@" + DEFAULT_DOMAIN, PASSWORD);
+        dataProbe.addUser("rcpt5@" + DEFAULT_DOMAIN, PASSWORD);
+    }
+
+    @After
+    public void tearDown() {
+        jamesServer.shutdown();
+    }
+
+    @Test
+    public void receivedMessagesShouldContainDeliveredToHeaders() throws Exception {
+        messageSender.connect(LOCALHOST_IP, jamesServer.getProbe(SmtpGuiceProbe.class).getSmtpPort());
+
+        Stopwatch stopwatch = Stopwatch.createStarted();
+        IntStream.range(0, 100)
+            .forEach(Throwing.intConsumer(i -> messageSender.sendMessage(MailImpl.builder()
+                .name("name" + i)
+                .sender(FROM)
+                .addRecipients("rcpt1@" + DEFAULT_DOMAIN,
+                    "rcpt2@" + DEFAULT_DOMAIN,
+                    "rcpt3@" + DEFAULT_DOMAIN,
+                    "rcpt4@" + DEFAULT_DOMAIN,
+                    "rcpt5@" + DEFAULT_DOMAIN)
+                .mimeMessage(MimeMessageBuilder.mimeMessageBuilder()
+                    .setSubject("subject i")
+                    .setText(CONTENT))
+                .build())));
+
+        awaitAtMostOneMinute.until(() -> jamesServer.getProbe(SpoolerProbe.class).processingFinished());
+        System.out.println("Spent: " + stopwatch.elapsed(TimeUnit.MILLISECONDS));
+    }
+
+
+    private MailetContainer.Builder generateMailetContainerConfiguration() {
+        return TemporaryJamesServer.defaultMailetContainerConfiguration()
+            .putProcessor(ProcessorConfiguration.transport()
+                .addMailet(MailetConfiguration.builder()
+                    .matcher(RecipientIs.class)
+                    .matcherCondition("rcpt1@" + DEFAULT_DOMAIN)
+                    .mailet(LogMessage.class)
+                    .addProperty("passThrough", "true"))
+                .addMailet(MailetConfiguration.builder()
+                    .matcher(RecipientIs.class)
+                    .matcherCondition("rcpt2@" + DEFAULT_DOMAIN)
+                    .mailet(LogMessage.class)
+                    .addProperty("passThrough", "true"))
+                .addMailet(MailetConfiguration.builder()
+                    .matcher(RecipientIs.class)
+                    .matcherCondition("rcpt3@" + DEFAULT_DOMAIN)
+                    .mailet(LogMessage.class)
+                    .addProperty("passThrough", "true"))
+                .addMailet(MailetConfiguration.builder()
+                    .matcher(RecipientIs.class)
+                    .matcherCondition("rcpt4@" + DEFAULT_DOMAIN)
+                    .mailet(LogMessage.class)
+                    .addProperty("passThrough", "true"))
+                .addMailet(MailetConfiguration.builder()
+                    .matcher(RecipientIs.class)
+                    .matcherCondition("rcpt5@" + DEFAULT_DOMAIN)
+                    .mailet(LogMessage.class)
+                    .addProperty("passThrough", "true"))
+                .addMailetsFrom(CommonProcessors.deliverOnlyTransport()));

Review comment:
       alright




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #280:
URL: https://github.com/apache/james-project/pull/280#issuecomment-745211736


   I played a bit with JMH, garbage collector reports & message size...
   
   ```
   Scenario: Startup + 100 messages for 5 rcpts, 12KB each + Shutdown
   Code version: Locking version of COW
   Benchmark                                                                  Mode  Cnt            Score            Error   Units
   MimeMessageBenchTest.benchmark1                                            avgt   10        5954.512 ±       110.288   ms/op
   MimeMessageBenchTest.benchmark1:·gc.alloc.rate                             avgt   10         116.627 ±         1.936  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Eden_Space                    avgt   10         280.591 ±         4.747  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Old_Gen                       avgt   10           0.171 ±         0.098  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.count                                  avgt   10          60.000                  counts
   MimeMessageBenchTest.benchmark1:·gc.time                                   avgt   10         302.000                      ms
   
   Scenario: Startup + 100 messages for 5 rcpts, 12KB each + Shutdown
   Code version: Always COPY
   Benchmark                                                                  Mode  Cnt           Score           Error   Units
   MimeMessageBenchTest.benchmark1                                            avgt   10        6024.282 ±       130.217   ms/op
   MimeMessageBenchTest.benchmark1:·gc.alloc.rate                             avgt   10         115.991 ±         2.242  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Eden_Space                    avgt   10         277.597 ±         5.493  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Old_Gen                       avgt   10           0.178 ±         0.089  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.count                                  avgt   10          60.000                  counts
   MimeMessageBenchTest.benchmark1:·gc.time                                   avgt   10         298.000                      ms
   
   Scenario: Startup + 100 messages for 5 rcpts, 120KB each + Shutdown
   Code version: Locking version of COW
   Benchmark                                                                  Mode  Cnt            Score            Error   Units
   MimeMessageBenchTest.benchmark1                                            avgt   10        11838.707 ±       1909.568   ms/op
   MimeMessageBenchTest.benchmark1:·gc.alloc.rate                             avgt   10          167.785 ±         22.464  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Eden_Space                    avgt   10         1059.389 ±        154.302  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Old_Gen                       avgt   10            0.583 ±          0.915  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Survivor_Space                avgt   10            3.754 ±          3.913  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.count                                  avgt   10         1179.000                   counts
   MimeMessageBenchTest.benchmark1:·gc.time                                   avgt   10         5129.000                       ms
   
   Scenario: Startup + 100 messages for 5 rcpts, 120KB each + Shutdown
   Code version: Always COPY
   MimeMessageBenchTest.benchmark1                                            avgt   10        12177.190 ±       1711.754   ms/op
   MimeMessageBenchTest.benchmark1:·gc.alloc.rate                             avgt   10          164.735 ±         20.484  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Eden_Space                    avgt   10         1046.940 ±        134.789  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Old_Gen                       avgt   10            0.586 ±          1.042  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Survivor_Space                avgt   10            3.900 ±          3.591  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.count                                  avgt   10         1202.000                   counts
   MimeMessageBenchTest.benchmark1:·gc.time                                   avgt   10         5273.000                       ms
   
   Scenario: Startup + 10 messages for 5 rcpts, 1.2MB each + Shutdown
   Code version: Locking version of COW
   Benchmark                                                                  Mode  Cnt            Score            Error   Units
   MimeMessageBenchTest.benchmark1                                            avgt    3        12911.341 ±       3552.079   ms/op
   MimeMessageBenchTest.benchmark1:·gc.alloc.rate                             avgt    3          135.412 ±         34.923  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Eden_Space                    avgt    3          799.061 ±        217.977  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Old_Gen                       avgt    3          173.397 ±         76.272  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Survivor_Space                avgt    3            9.891 ±          2.784  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.count                                  avgt    3          228.000                   counts
   MimeMessageBenchTest.benchmark1:·gc.time                                   avgt    3         3845.000                       ms
   
   Scenario: Startup + 10 messages for 5 rcpts, 1.2MB each + Shutdown
   Code version: Always COPY
   Benchmark                                                                  Mode  Cnt           Score           Error   Units
   MimeMessageBenchTest.benchmark1                                            avgt    3        13718.479 ±       11832.688   ms/op
   MimeMessageBenchTest.benchmark1:·gc.alloc.rate                             avgt    3          128.467 ±         101.018  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Eden_Space                    avgt    3          752.122 ±         633.602  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Old_Gen                       avgt    3          163.080 ±         175.520  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Survivor_Space                avgt    3            9.312 ±           4.526  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.count                                  avgt    3          229.000                    counts
   MimeMessageBenchTest.benchmark1:·gc.time                                   avgt    3         3990.000                        ms
   ```
   
   Conclusion:
    - Always copy generates slightly more GC
    - Runs sligthly slower


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


mbaechler commented on pull request #280:
URL: https://github.com/apache/james-project/pull/280#issuecomment-745275289


   AFAICT, "always copy" is always faster. GC time is always comparable.
   Did you read the right column?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


mbaechler commented on pull request #280:
URL: https://github.com/apache/james-project/pull/280#issuecomment-745275571


   BTW, your JMH work is  awesome 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #280:
URL: https://github.com/apache/james-project/pull/280#issuecomment-745690912


   > AFAICT, "always copy" is always faster. GC time is always comparable. Did you read the right column?
   
   I do not understand...
   
   13718ms VS 12911ms, 12177 ms vs 11838ms & 6024 VS 5954ms => Always copy is always slightly slower (3% - 1%)
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #280:
URL: https://github.com/apache/james-project/pull/280#issuecomment-745701937


   BTW here is a run for 10MB
   
   ```
   Scenario: Startup + 3 messages for 5 rcpts, 10MB each + Shutdown
   Code version: Locking version of COW
   Benchmark                                                                  Mode  Cnt            Score              Error   Units
   MimeMessageBenchTest.benchmark1                                            avgt    3        49901.215 ±        92917.167   ms/op
   MimeMessageBenchTest.benchmark1:·gc.alloc.rate                             avgt    3           85.808 ±          156.009  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Eden_Space                    avgt    3          511.349 ±          977.955  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Old_Gen                       avgt    3           76.985 ±          165.456  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Survivor_Space                avgt    3            2.232 ±           13.451  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.count                                  avgt    3          549.000                     counts
   MimeMessageBenchTest.benchmark1:·gc.time                                   avgt    3         8716.000                         ms
   
   Scenario: Startup + 3 messages for 5 rcpts, 10MB each + Shutdown
   Code version: Always COPY
   Benchmark                                                                  Mode  Cnt            Score              Error   Units
   MimeMessageBenchTest.benchmark1                                            avgt    3        55688.810 ±       163013.521   ms/op
   MimeMessageBenchTest.benchmark1:·gc.alloc.rate                             avgt    3           77.816 ±          207.068  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Eden_Space                    avgt    3          462.497 ±         1271.321  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Old_Gen                       avgt    3           70.097 ±          189.172  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.churn.G1_Survivor_Space                avgt    3            1.939 ±           13.101  MB/sec
   MimeMessageBenchTest.benchmark1:·gc.count                                  avgt    3          558.000                     counts
   MimeMessageBenchTest.benchmark1:·gc.time                                   avgt    3         9021.000                         ms
   ```
   
   Maybe we should plan running similar bench on real implems, not just memory, before taking decisions?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


mbaechler commented on pull request #280:
URL: https://github.com/apache/james-project/pull/280#issuecomment-745875476


   > > AFAICT, "always copy" is always faster. GC time is always comparable. Did you read the right column?
   > 
   > I do not understand...
   > 
   > 13718ms VS 12911ms, 12177 ms vs 11838ms & 6024 VS 5954ms => Always copy is always slightly slower (3% - 1%)
   
   Oh yes, smaller is better, I'm wrong.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil commented on pull request #280:
URL: https://github.com/apache/james-project/pull/280#issuecomment-748848156


   Hello,
   
   I know it's Christmas time and all so no hurry :)
   
   I am pretty confident that the COW currently on master has a very negative impact on the tests on the CI. It also sounds like a critical issue for production systems (since the failures exhibit total dataloss for incoming emails after they have been successfully accepted by the server ). So I would like to know how this PR or a similar fix can proceed ? 
   
   What I understand is we have to choose between :
   - an always copy implementation which has a much higher GC alloc rate for larger mails (perfectly understandable since it copies the whole mail) and seems to be quite a bit slower for large mails >10MB  
   - A COW version based on ReentrantLock, with more complex code but better performance in the benchmarks. 
   
   My personal preference would be for the always copy because the code is simpler and it feels safer even though it is slower in micro benchmarks. But my opinion doesn't matter much and all I really care about is a safe implementation :) 
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #280:
URL: https://github.com/apache/james-project/pull/280#issuecomment-748935269


   > I know it's Christmas time and all so no hurry :)
   
   Not in VN, but avoid disturbance during new year ;-)
   
   I would say:
    
    - 1. Have a always-copy viable PR (that equals to MimeCow stuff removal)
    - 2. Have a bench on real Mail Queue implems (today & always-copy) - the memory mail queue does extra copies.
    
    We may also want to bring the topic back on the mailing list now that we have gained more insight.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #280:
URL: https://github.com/apache/james-project/pull/280#issuecomment-748935370


   And thanks for pushing on this topic ;-)


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil opened a new pull request #281:
URL: https://github.com/apache/james-project/pull/281


   Builds upon @chibenwa's proposed implementation in #280 but makes it easy to fully disable copy on write behaviour and replace it with always copy.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil commented on pull request #281:
URL: https://github.com/apache/james-project/pull/281#issuecomment-750293565


   I don't know if we should document it: 
   This is really an internal implementation detail, should it really be configurable (adding configuration means the already complex code becomes even more complex)
   I only introduced the flag to let *us* more easily benchmark both implementations. 
   I feel the loosing implementation should simply be removed once we have the benchmarks results  as there is no point in leaving an inferior implementation in the code.
   I'll update the comment to reflect that instead.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #281:
URL: https://github.com/apache/james-project/pull/281#issuecomment-751245266


   > What about implementing a strategy pattern instead of making MimeMessageCOW even more complex?
   
   As the intent is `easing testing` we can live with a bit of dirty code I guess, as @jeantil told us this code was not meant to be merged...


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil commented on pull request #281:
URL: https://github.com/apache/james-project/pull/281#issuecomment-751288931


   > What about implementing a strategy pattern instead of making MimeMessageCOW even more complex?
   
   I don't see the point of introducing a strategy pattern here : we only have 2 implementations and once we know which is better, the other one will be dropped. do you have alternative implementation ideas where it would make sense to let multiple implementations live side by side ?
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #281:
URL: https://github.com/apache/james-project/pull/281#issuecomment-751309668


   BTW this morning in the logs...
   
   ```
   {
     "_index": "fluentbit-james-2020.12.23",
     "_type": "docker",
     "_id": "TJFTj3YBdqSpI3q1b9tM",
     "_score": 1,
     "_source": {
       "@timestamp": "2020-12-23T11:19:35.980Z",
       "timestamp": "2020-12-23T11:19:35.980Z",
       "level": "ERROR",
       "thread": "elastic-4415",
       "logger": "org.apache.james.mailetcontainer.impl.JamesMailSpooler",
       "message": "Could not apply standard error handling for bc947010-4510-11eb-a696-31d91ae7ef70, defaulting to nack",
       "context": "default",
       "exception": "java.lang.NullPointerException: null\n\tat org.apache.james.blob.mail.MimeMessageStore$MimeMessageEncoder.messageToArray(MimeMessageStore.java:90)\n\tat org.apache.james.blob.mail.MimeMessageStore$MimeMessageEncoder.encode(MimeMessageStore.java:76)\n\tat org.apache.james.blob.mail.MimeMessageStore$MimeMessageEncoder.encode(MimeMessageStore.java:72)\n\tat org.apache.james.blob.api.Store$Impl.save(Store.java:84)\n\tat org.apache.james.queue.rabbitmq.Enqueuer.saveMail(Enqueuer.java:89)\n\tat org.apache.james.queue.rabbitmq.Enqueuer.enQueue(Enqueuer.java:72)\n\tat org.apache.james.queue.rabbitmq.RabbitMQMailQueue.lambda$enQueue$0(RabbitMQMailQueue.java:85)\n\tat com.github.fge.lambdas.runnable.RunnableChainer.lambda$sneakyThrow$215(RunnableChainer.java:71)\n\tat org.apache.james.metrics.api.MetricFactory.lambda$runPublishingTimerMetric$0(MetricFactory.java:58)\n\tat org.apache.james.metrics.api.MetricFactory.decorateSupplierWithTimerMetric(MetricFactory.java:37)\n\tat org.apache.james.metrics.api.MetricFactory.runPublishingTimerMetric(MetricFactory.java:57)\n\tat org.apache.james.queue.rabbitmq.RabbitMQMailQueue.enQueue(RabbitMQMailQueue.java:84)\n\tat org.apache.james.mailetcontainer.impl.JamesMailSpooler.reEnqueue(JamesMailSpooler.java:199)\n\tat org.apache.james.mailetcontainer.impl.JamesMailSpooler.handleError(JamesMailSpooler.java:181)\n\tat org.apache.james.mailetcontainer.impl.JamesMailSpooler.performProcessMail(JamesMailSpooler.java:166)\n\tat org.apache.james.mailetcontainer.impl.JamesMailSpooler.lambda$processMail$6(JamesMailSpooler.java:152)\n\tat reactor.core.publisher.MonoRunnable.subscribe(MonoRunnable.java:49)\n\tat reactor.core.publisher.MonoUsing.subscribe(MonoUsing.java:109)\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4210)\n\tat reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:199)\n\tat reactor.core.publisher.MonoFlatMap.subscribeOrReturn(MonoFlatMap.java:53)\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4195)\n\tat reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.run(MonoSubscribeOn.java:124)\n\tat reactor.core.scheduler.WorkerTask.call(WorkerTask.java:84)\n\tat reactor.core.scheduler.WorkerTask.call(WorkerTask.java:37)\n\tat java.base/java.util.concurrent.FutureTask.run(Unknown Source)\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\n\tat java.base/java.lang.Thread.run(Unknown Source)\n",
       "log": "{\"timestamp\":\"2020-12-23T11:19:35.980Z\",\"level\":\"ERROR\",\"thread\":\"elastic-4415\",\"logger\":\"org.apache.james.mailetcontainer.impl.JamesMailSpooler\",\"message\":\"Could not apply standard error handling for bc947010-4510-11eb-a696-31d91ae7ef70, defaulting to nack\",\"context\":\"default\",\"exception\":\"java.lang.NullPointerException: null\\n\\tat org.apache.james.blob.mail.MimeMessageStore$MimeMessageEncoder.messageToArray(MimeMessageStore.java:90)\\n\\tat org.apache.james.blob.mail.MimeMessageStore$MimeMessageEncoder.encode(MimeMessageStore.java:76)\\n\\tat org.apache.james.blob.mail.MimeMessageStore$MimeMessageEncoder.encode(MimeMessageStore.java:72)\\n\\tat org.apache.james.blob.api.Store$Impl.save(Store.java:84)\\n\\tat org.apache.james.queue.rabbitmq.Enqueuer.saveMail(Enqueuer.java:89)\\n\\tat org.apache.james.queue.rabbitmq.Enqueuer.enQueue(Enqueuer.java:72)\\n\\tat org.apache.james.queue.rabbitmq.RabbitMQMailQueue.lambda$enQueue$0(RabbitMQMailQueue.java:85)\\n\\tat com.github.fge.lambdas.runnable.RunnableChainer.lambda$sneakyThrow$215(RunnableChainer.java:71)\\n\\tat org.apache.james.metrics.api.MetricFactory.lambda$runPublishingTimerMetric$0(MetricFactory.java:58)\\n\\tat org.apache.james.metrics.api.MetricFactory.decorateSupplierWithTimerMetric(MetricFactory.java:37)\\n\\tat org.apache.james.metrics.api.MetricFactory.runPublishingTimerMetric(MetricFactory.java:57)\\n\\tat org.apache.james.queue.rabbitmq.RabbitMQMailQueue.enQueue(RabbitMQMailQueue.java:84)\\n\\tat org.apache.james.mailetcontainer.impl.JamesMailSpooler.reEnqueue(JamesMailSpooler.java:199)\\n\\tat org.apache.james.mailetcontainer.impl.JamesMailSpooler.handleError(JamesMailSpooler.java:181)\\n\\tat org.apache.james.mailetcontainer.impl.JamesMailSpooler.performProcessMail(JamesMailSpooler.java:166)\\n\\tat org.apache.james.mailetcontainer.impl.JamesMailSpooler.lambda$processMail$6(JamesMailSpooler.java:152)\\n\\tat reactor.core.publisher.MonoRunnable.subscribe(MonoRunnable.java:49)\\n\\tat reactor.core.publisher.MonoUsing.subscribe(MonoUsing.java:109)\\n\\tat reactor.core.publisher.Mono.subscribe(Mono.java:4210)\\n\\tat reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:199)\\n\\tat reactor.core.publisher.MonoFlatMap.subscribeOrReturn(MonoFlatMap.java:53)\\n\\tat reactor.core.publisher.Mono.subscribe(Mono.java:4195)\\n\\tat reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.run(MonoSubscribeOn.java:124)\\n\\tat reactor.core.scheduler.WorkerTask.call(WorkerTask.java:84)\\n\\tat reactor.core.scheduler.WorkerTask.call(WorkerTask.java:37)\\n\\tat java.base/java.util.concurrent.FutureTask.run(Unknown Source)\\n\\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)\\n\\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\\n\\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\\n\\tat java.base/java.lang.Thread.run(Unknown Source)\\n\"}\n",
       "stream": "stdout",
       "time": "2020-12-23T11:19:35.981461976Z"
     },
     "fields": {
       "@timestamp": [
         "2020-12-23T11:19:35.980Z"
       ],
       "time": [
         "2020-12-23T11:19:35.981Z"
       ],
       "timestamp": [
         "2020-12-23T11:19:35.980Z"
       ]
     }
   }
   ```
   
   Merry Xmas ;-)
   
   NPE upon mail processing => sounds fishy to me. It's so bad that we could not even save that message into a mailrepository, nor send in back to the queue... As if the content had been corrupted! :-(


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa opened a new pull request #282:
URL: https://github.com/apache/james-project/pull/282


   Previous implementation was not thread safe as demonstrated
   by @jeantil and @mbaechler. Upon concurrent writes and disposes
   it leads to corruption of the underlying message, throwing
   NullPointerExceptions and leads to data loss. [1]
   
   Attempts to make it thread safe like [2] were complex, error
   prone (double read-write lock involved!), and ultimately did
   not manage to protect 'optimized' raw access to the underlying
   data thus not fully addressing the concurrency issues.
   
   Benchmarks were conducted in order to compare the Copy On
   Write implementation with its always-copy equivalent. We
   highlighted minor benefits of the copy-on-write version (
   up to a few percent) both on compute time and memory allocation.
   Only for bigger messages (10MB) did we reach higher differences,
   of around 10%.
   
   Note that the actual copy uses DeferredFileOutputStream
   (commons.io) thus limits memory usage to 100KB upon copy.
   
   [1] https://github.com/apache/james-project/pull/280/commits/09b5554bbcbbb98757910d59bac54f97ee1f8b4f
   [2] https://github.com/apache/james-project/pull/280
   [3] https://github.com/apache/james-project/pull/280#issuecomment-745211736


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #280:
URL: https://github.com/apache/james-project/pull/280#issuecomment-751318609


   Let's drop the COW.
   
   See https://github.com/apache/james-project/pull/282


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa closed pull request #280:
URL: https://github.com/apache/james-project/pull/280


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil closed pull request #281:
URL: https://github.com/apache/james-project/pull/281


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil commented on pull request #281:
URL: https://github.com/apache/james-project/pull/281#issuecomment-751323163


   I have seen #282 and I'll definitely vote for it :) 
   
   Can you confirm the following about the logs above
   - you were using the patch from #280 in a live system
   - you still observed the concurrency issue with the patch applied 
   
   And expand on this from #282
   > Attempts to make it thread safe like [2] [...] ultimately did not manage to protect 'optimized' raw access to the underlying data thus not fully addressing the concurrency issues.
   
   Do you know what the 'optimized' raw access you speak of is and where and when it used to occur ? I'm curious because dispose would set the ref to underlying to null but 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil edited a comment on pull request #281:
URL: https://github.com/apache/james-project/pull/281#issuecomment-751323163


   I have seen #282 and I'll definitely vote for it :) 
   
   Can you confirm the following about the logs above
   - you were using the patch from #280 in a live system
   - you still observed the concurrency issue with the patch applied 
   
   And expand on this from #282
   > Attempts to make it thread safe like [2] [...] ultimately did not manage to protect 'optimized' raw access to the underlying data thus not fully addressing the concurrency issues.
   
   Do you know what the 'optimized' raw access you speak of is and where and when it used to occur ? I'm curious because dispose would set the ref to underlying to null but if the 'optimized' access already had the reference it shouldn't have failed...


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil commented on a change in pull request #282:
URL: https://github.com/apache/james-project/pull/282#discussion_r548949128



##########
File path: server/container/core/src/main/java/org/apache/james/server/core/MimeMessageInputStream.java
##########
@@ -40,19 +40,13 @@
      *            the message to wrap
      * @param tryCast
      *            try to cast the {@link MimeMessage} to
-     *            {@link MimeMessageCopyOnWriteProxy} /
      *            {@link MimeMessageWrapper} to do some optimized processing if
      *            possible
      * @throws MessagingException
      */
     public MimeMessageInputStream(MimeMessage message, boolean tryCast) throws MessagingException {
         MimeMessage m = message;
 
-        // check if we need to use the wrapped message
-        if (tryCast && m instanceof MimeMessageCopyOnWriteProxy) {
-            m = ((MimeMessageCopyOnWriteProxy) m).getWrappedMessage();
-        }
-
         // check if we can use optimized operations
         if (tryCast && m instanceof MimeMessageWrapper) {

Review comment:
       Since the described failure occurred in 'optimized'  access mode, is *this* optimization safe too ?

##########
File path: server/container/core/src/test/java/org/apache/james/server/core/MimeMessageTest.java
##########
@@ -311,9 +311,9 @@ public void testGetLineCount() throws Exception {
     public void testMessageCloningViaCoW() throws Exception {

Review comment:
       at a minimum the test name is misleading since there is no more COW :) you can probably drop this test

##########
File path: server/container/core/src/main/java/org/apache/james/server/core/MimeMessageUtil.java
##########
@@ -75,10 +75,6 @@ public static void writeTo(MimeMessage message, OutputStream headerOs, OutputStr
      */
     public static void writeTo(MimeMessage message, OutputStream headerOs, OutputStream bodyOs, String[] ignoreList) throws IOException, MessagingException {
         MimeMessage testMessage = message;

Review comment:
       this variable is no longer necessary, you can use message directlyon line 78 and 80 (because of the return) and as previously is the special casing for MimeMessageWrapper really useful ?

##########
File path: server/container/core/src/test/java/org/apache/james/server/core/MimeMessageTest.java
##########
@@ -336,9 +336,9 @@ public void testMessageCloningViaCoW() throws Exception {
     public void testMessageCloningViaCoW2() throws Exception {

Review comment:
       same as previous comment

##########
File path: server/container/core/src/test/java/org/apache/james/server/core/MimeMessageTest.java
##########
@@ -364,7 +364,7 @@ public void testMessageCloningViaCoW2() throws Exception {
     public void testMessageCloningViaCoWSubjectLost() throws Exception {

Review comment:
       same as previous comment




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on a change in pull request #282:
URL: https://github.com/apache/james-project/pull/282#discussion_r548956195



##########
File path: server/container/core/src/main/java/org/apache/james/server/core/MimeMessageInputStream.java
##########
@@ -40,19 +40,13 @@
      *            the message to wrap
      * @param tryCast
      *            try to cast the {@link MimeMessage} to
-     *            {@link MimeMessageCopyOnWriteProxy} /
      *            {@link MimeMessageWrapper} to do some optimized processing if
      *            possible
      * @throws MessagingException
      */
     public MimeMessageInputStream(MimeMessage message, boolean tryCast) throws MessagingException {
         MimeMessage m = message;
 
-        // check if we need to use the wrapped message
-        if (tryCast && m instanceof MimeMessageCopyOnWriteProxy) {
-            m = ((MimeMessageCopyOnWriteProxy) m).getWrappedMessage();
-        }
-
         // check if we can use optimized operations
         if (tryCast && m instanceof MimeMessageWrapper) {

Review comment:
       That is a good question.
   
   In a shared context likely not however if this MimeMessage is assumed not to be thread safe, and that each thread gets its own copy, we should be good, no?
   
   Maybe we can remove the `synchronized` blocks in MimeMessageWrapper, and state in the Javadoc that it is not thread safe?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on a change in pull request #282:
URL: https://github.com/apache/james-project/pull/282#discussion_r548956250



##########
File path: server/container/core/src/main/java/org/apache/james/server/core/MimeMessageUtil.java
##########
@@ -75,10 +75,6 @@ public static void writeTo(MimeMessage message, OutputStream headerOs, OutputStr
      */
     public static void writeTo(MimeMessage message, OutputStream headerOs, OutputStream bodyOs, String[] ignoreList) throws IOException, MessagingException {
         MimeMessage testMessage = message;

Review comment:
       It do it as it allows to get an InputStream. javax.mail enforces a copy by writing to an output stream.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on a change in pull request #282:
URL: https://github.com/apache/james-project/pull/282#discussion_r548956275



##########
File path: server/container/core/src/test/java/org/apache/james/server/core/MimeMessageTest.java
##########
@@ -311,9 +311,9 @@ public void testGetLineCount() throws Exception {
     public void testMessageCloningViaCoW() throws Exception {

Review comment:
       I hesitated ;-)




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #282:
URL: https://github.com/apache/james-project/pull/282#issuecomment-751332936


   > Hmm rethinking it all is this DeferredFileOutputStream safe with regards to
   dispose ? What happens if we dispose the source bytes of a message that is
   copied through DFOS?
   
   `MimeMessageInputStreamSource` (holding the reference to the deferedFile) is disposed, each references to opened stream get cleaned up, and the file is deleted. We should be good...


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #281:
URL: https://github.com/apache/james-project/pull/281#issuecomment-751347054


   > Do you know what the 'optimized' raw access you speak of is?
   
   It was accessing the shared underlying MimeMessageWrapper to get an InputStream out of it (instead of writeTo + OutputSream)
   
   > where and when it used to occur ? 
   
   It happens in most 'core' aware classes, anytime we want to have an InputStream version of the message.
   
   >  I'm curious because dispose would set the ref to underlying to null but if the 'optimized' access already had the reference it shouldn't have failed...
   
   See https://github.com/apache/james-project/pull/280#commitcomment-45090717
   
   The message held by the reference was exposed unprotected. Thus: when you have a COW message, leveraging the benefits of MimeMessageWrapper was unsafe.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil commented on pull request #282:
URL: https://github.com/apache/james-project/pull/282#issuecomment-751610341


   >MimeMessageInputStreamSource (holding the reference to the deferedFile) is disposed, each references to opened stream get cleaned up, and the file is *deleted*. We should be good...
   Thats what I meant : I may be reading  MimeMessageInputStreamSource's code incorrectly but I don't see a reason that dispose cannot be called by a thread `t1` while another thread `t2` is trying to read the contents of one of the inputstream returned by `getInputStream()`
   `t2` is going to get `java.io.IOException: inputstream is closed` because `t1` disposed the message and we are back to data loss territory. 
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil edited a comment on pull request #282:
URL: https://github.com/apache/james-project/pull/282#issuecomment-751610341


   >MimeMessageInputStreamSource (holding the reference to the deferedFile) is disposed, each references to opened stream get cleaned up, and the file is *deleted*. We should be good...
   
   Thats what I meant : I may be reading  MimeMessageInputStreamSource's code incorrectly but I don't see a reason that dispose cannot be called by a thread `t1` while another thread `t2` is trying to read the contents of one of the inputstream returned by `getInputStream()`
   `t2` is going to get `java.io.IOException: inputstream is closed` because `t1` disposed the message and we are back to data loss territory. 
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #282:
URL: https://github.com/apache/james-project/pull/282#issuecomment-751614173


   > Thats what I meant : I may be reading MimeMessageInputStreamSource's code incorrectly but I don't see a reason that dispose cannot be called by a thread t1 while another thread t2 is trying to read the contents of one of the inputstream returned by getInputStream()
   t2 is going to get java.io.IOException: inputstream is closed because t1 disposed the message and we are back to data loss territory.
   
   Ahhh mutability.
   
   Do you have exemples of situations when this can happen? I think a Mail object and thus underlying MimeMessage is only disposed when processing is finished...
   
   What do you propose then?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil commented on pull request #282:
URL: https://github.com/apache/james-project/pull/282#issuecomment-751616212


   > Do you have exemples of situations when this can happen? 
   
   We discovered all this thread safety issue when debugging flaky tests: if memory serves vacation mailet threw an error on a mail which triggered the james error handling pipeline asynchronously. The initial pipeline ended up completing while the error handling pipeline was scheduling the mail for redelivery. This triggered a NPE because of the MMCOWP implementation at the time, the currrent implementation may yield IOException instead of NPEs ...
    


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #282:
URL: https://github.com/apache/james-project/pull/282#issuecomment-751619159


   `if memory serves vacation mailet threw an error on a mail which triggered the james error handling pipeline asynchronously.`
   
   Sorry, can you elaborate? I do not understand this statement...
   
   `The initial pipeline ended up completing while the error handling pipeline was scheduling the mail for redelivery. `
   
   Okay I kind of grasp it... Because the response from VacationMailet is an actual reply of the original email.
   
   `This triggered a NPE because of the MMCOWP implementation at the time, the currrent implementation may yield IOException instead of NPEs ...`
   
   Even if we make sure `reply` returns a copy?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #282:
URL: https://github.com/apache/james-project/pull/282#issuecomment-751621215


   > The initial pipeline ended up completing while the error handling pipeline was scheduling the mail for redelivery.
   
   Both pipelines will work on different email copies now no?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil commented on pull request #282:
URL: https://github.com/apache/james-project/pull/282#issuecomment-751631891


   > Both pipelines will work on different email copies now no?
   
   In the event that there are 2 different MimeMessageWrapper instances, are we certain that DeferredOutputStream will have finished copying the underlying file ? 
   I was worried that the file storing the email data for t1 might be deleted before the file storing the data for t2 is completely written ending up in a MimeMessageWrapper instance in t2 that's backed by a corrupted file. 
   I read through more code and it looks like DeferredOutputStream does make a defensive copy (I was misled by the `deferred` in the name) so 2 different instances would have 2 complete files as soon as instance creation returns.
   
   That leaves the `synchronized` flag on `MimeMessageInputStreamSource#getInputStream` which suggests concurrent access may occur there with the possible outcome I mentionned. If you are certain that concurrent access may no longer occur on `MimeMessageInputStreamSource` I suggest dropping the misleading `synchronized`. I assume that the synchronization was added to avoid/fix a `ConcurrentModificationException` on the `List<InputStream> streams`. The `synchronized` is actually a lie since a `ConcurrentModificationException` could still be triggererd by threads calling `getInputStream` and dispose concurrently 
   
   on a side note: `List<InputStream> streams` the ordering property of lists doesn't seem to have any importance in the implementation, a `Set` would be more appropriate.
   
   I guess we will have to wait and see if shared access to MimeMessageWrapper instances occurs or not. 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #282:
URL: https://github.com/apache/james-project/pull/282#issuecomment-751667026


   `If you are certain that concurrent access may no longer occur on MimeMessageInputStreamSource`
   
   ... How can I be sure of such a thing? :-)
   
   ` I suggest dropping the misleading synchronized.`
   
   +1 this will make clear it is not thread safe... Just like we did in MimeMessageWrapper.
   
   `on a side note: List<InputStream> streams the ordering property of lists doesn't seem to have any importance in the implementation, a Set would be more appropriate.`
   
   true
   
   `I guess we will have to wait and see if shared access to MimeMessageWrapper instances occurs or not.`
   
   I pretty much agree with this statement...
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil commented on a change in pull request #282:
URL: https://github.com/apache/james-project/pull/282#discussion_r549327693



##########
File path: server/container/core/src/main/java/org/apache/james/server/core/MimeMessageInputStream.java
##########
@@ -40,19 +40,13 @@
      *            the message to wrap
      * @param tryCast
      *            try to cast the {@link MimeMessage} to
-     *            {@link MimeMessageCopyOnWriteProxy} /
      *            {@link MimeMessageWrapper} to do some optimized processing if
      *            possible
      * @throws MessagingException
      */
     public MimeMessageInputStream(MimeMessage message, boolean tryCast) throws MessagingException {
         MimeMessage m = message;
 
-        // check if we need to use the wrapped message
-        if (tryCast && m instanceof MimeMessageCopyOnWriteProxy) {
-            m = ((MimeMessageCopyOnWriteProxy) m).getWrappedMessage();
-        }
-
         // check if we can use optimized operations
         if (tryCast && m instanceof MimeMessageWrapper) {

Review comment:
       you definitely want to remove all the synchronized blocks on MimeMessageWrapper since it is definitely not thread safe (f only because it relies on MimeMessageInputStreamSource) which itself isn't thread safe. This will both remove the illusion of thread safety, provide performance improvements and possibly let the integration test fail faster if there are concurrent access left.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on a change in pull request #282:
URL: https://github.com/apache/james-project/pull/282#discussion_r549547128



##########
File path: server/container/core/src/main/java/org/apache/james/server/core/MimeMessageInputStream.java
##########
@@ -40,19 +40,13 @@
      *            the message to wrap
      * @param tryCast
      *            try to cast the {@link MimeMessage} to
-     *            {@link MimeMessageCopyOnWriteProxy} /
      *            {@link MimeMessageWrapper} to do some optimized processing if
      *            possible
      * @throws MessagingException
      */
     public MimeMessageInputStream(MimeMessage message, boolean tryCast) throws MessagingException {
         MimeMessage m = message;
 
-        // check if we need to use the wrapped message
-        if (tryCast && m instanceof MimeMessageCopyOnWriteProxy) {
-            m = ((MimeMessageCopyOnWriteProxy) m).getWrappedMessage();
-        }
-
         // check if we can use optimized operations
         if (tryCast && m instanceof MimeMessageWrapper) {

Review comment:
       Agree and already applied ;-)




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #282:
URL: https://github.com/apache/james-project/pull/282#issuecomment-751957067


   I started a mailig list discussion https://www.mail-archive.com/server-dev@james.apache.org/msg69361.html


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


I started a mailig list discussion https://www.mail-archive.com/server-dev@james.apache.org/msg69361.html

chibenwa commented on pull request #280:
URL: https://github.com/apache/james-project/pull/280#issuecomment-751957047


   I started a mailig list discussion https://www.mail-archive.com/server-dev@james.apache.org/msg69361.html


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil commented on a change in pull request #282:
URL: https://github.com/apache/james-project/pull/282#discussion_r549617818



##########
File path: server/container/core/src/main/java/org/apache/james/server/core/MimeMessageUtil.java
##########
@@ -75,10 +75,6 @@ public static void writeTo(MimeMessage message, OutputStream headerOs, OutputStr
      */
     public static void writeTo(MimeMessage message, OutputStream headerOs, OutputStream bodyOs, String[] ignoreList) throws IOException, MessagingException {
         MimeMessage testMessage = message;

Review comment:
       ok, thanks for dropping the unnecessary variable




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #282:
URL: https://github.com/apache/james-project/pull/282#issuecomment-752832977


   ```
   
   [ERROR] storingMessageWithSameKeyTwiceShouldUpdateMessageContent  Time elapsed: 0.04 s  <<< FAILURE!
   org.opentest4j.MultipleFailuresError:
   Multiple Failures (2 failures)
   	org.opentest4j.AssertionFailedError:
   Expecting:
    <"original body">
   to be equal to:
    <"modified content">
   but was not.
   at MailRepositoryContract.lambda$checkMailEquality$0(MailRepositoryContract.java:91)
   	org.opentest4j.AssertionFailedError:
   Expecting:
    <223L>
   to be equal to:
    <228L>
   but was not.
   at MailRepositoryContract.lambda$checkMailEquality$0(MailRepositoryContract.java:92)
   [c4b6d407a19abec82e7c5178363d8abb452fbc72]
   [INFO]
   [INFO] Results:
   [INFO]
   [ERROR] Failures:
   [ERROR]   JDBCMailRepositoryTest.storingMessageWithSameKeyTwiceShouldUpdateMessageContent Multiple Failures (2 failures)
   	org.opentest4j.AssertionFailedError:
   Expecting:
    <"original body">
   to be equal to:
    <"modified content">
   but was not.
   at MailRepositoryContract.lambda$checkMailEquality$0(MailRepositoryContract.java:91)
   	org.opentest4j.AssertionFailedError:
   Expecting:
    <223L>
   to be equal to:
    <228L>
   but was not.
   at MailRepositoryContract.lambda$checkMailEquality$0(MailRepositoryContract.java:92)
   [INFO]
   [ERROR] Tests run: 39, Failures: 1, Errors: 0, Skipped: 0
   ```
   
   That sounds like a real error.
   
   Only JDBC Mail Repository is affected.
   
   Now the question is "why"... Let's dig in crappy code...


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #282:
URL: https://github.com/apache/james-project/pull/282#issuecomment-752833540


   39 more maven modules to go!


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil commented on a change in pull request #282:
URL: https://github.com/apache/james-project/pull/282#discussion_r550479649



##########
File path: server/data/data-jdbc/src/main/java/org/apache/james/mailrepository/jdbc/JDBCMailRepository.java
##########
@@ -551,22 +545,6 @@ private boolean checkMessageExists(Mail mc, Connection conn) throws SQLException
         }
     }
 
-    private boolean saveBodyRequired(Mail mc) throws MessagingException {
-        boolean saveBody;
-        MimeMessage messageBody = mc.getMessage();
-
-        if (messageBody instanceof MimeMessageWrapper) {
-            MimeMessageWrapper message = (MimeMessageWrapper) messageBody;

Review comment:
       one less special casing of MimeMessageWrapper ! @chibenwa for the win ! :+1:




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil commented on a change in pull request #282:
URL: https://github.com/apache/james-project/pull/282#discussion_r550480120



##########
File path: server/mailet/mailetcontainer-camel/src/test/java/org/apache/james/mailetcontainer/impl/JamesMailetContextTest.java
##########
@@ -289,7 +291,7 @@ public void bounceShouldNotFailWhenNonConfiguredPostmaster() throws Exception {
             .name("mail1")
             .sender(mailAddress)
             .addRecipient(mailAddress)
-            .mimeMessage(MimeMessageUtil.defaultMimeMessage())
+            .mimeMessage(MimeMessageUtil.mimeMessageFromBytes("header: value\r\n".getBytes(UTF_8)))

Review comment:
       considering how many times MimeMessageUtil.mimeMessageFromBytes("header: value\r\n".getBytes(UTF_8) is repeated over multiple tests, it could be worth a constant.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil commented on a change in pull request #282:
URL: https://github.com/apache/james-project/pull/282#discussion_r550480597



##########
File path: server/protocols/webadmin/webadmin-mailrepository/src/test/java/org/apache/james/webadmin/routes/MailRepositoriesRoutesTest.java
##########
@@ -107,6 +109,7 @@
     private static final MailQueueName CUSTOM_QUEUE = MailQueueName.of("customQueue");
     private static final String NAME_1 = "name1";
     private static final String NAME_2 = "name2";
+    private static final byte[] MESSAGE_BYTES = "header: value \r\n".getBytes(UTF_8);

Review comment:
       another occurence where the value itself has been extracted to a local constant




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil commented on a change in pull request #282:
URL: https://github.com/apache/james-project/pull/282#discussion_r550480597



##########
File path: server/protocols/webadmin/webadmin-mailrepository/src/test/java/org/apache/james/webadmin/routes/MailRepositoriesRoutesTest.java
##########
@@ -107,6 +109,7 @@
     private static final MailQueueName CUSTOM_QUEUE = MailQueueName.of("customQueue");
     private static final String NAME_1 = "name1";
     private static final String NAME_2 = "name2";
+    private static final byte[] MESSAGE_BYTES = "header: value \r\n".getBytes(UTF_8);

Review comment:
       another occurence where the value itself has been extracted to a local constant
   a Good candidate would be a constant or a factory method on FakeMail if we want to avoid sharing the byte[] 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil commented on a change in pull request #282:
URL: https://github.com/apache/james-project/pull/282#discussion_r550480120



##########
File path: server/mailet/mailetcontainer-camel/src/test/java/org/apache/james/mailetcontainer/impl/JamesMailetContextTest.java
##########
@@ -289,7 +291,7 @@ public void bounceShouldNotFailWhenNonConfiguredPostmaster() throws Exception {
             .name("mail1")
             .sender(mailAddress)
             .addRecipient(mailAddress)
-            .mimeMessage(MimeMessageUtil.defaultMimeMessage())
+            .mimeMessage(MimeMessageUtil.mimeMessageFromBytes("header: value\r\n".getBytes(UTF_8)))

Review comment:
       considering how many times MimeMessageUtil.mimeMessageFromBytes("header: value\r\n".getBytes(UTF_8) is repeated over multiple tests, it could be worth a constant.
   I think FakeMail is a good candidate to hold the constant or a factory method + constant if we want to avoid sharing the byte[] 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jeantil commented on a change in pull request #282:
URL: https://github.com/apache/james-project/pull/282#discussion_r550481314



##########
File path: server/protocols/webadmin/webadmin-mailrepository/src/test/java/org/apache/james/webadmin/routes/MailRepositoriesRoutesTest.java
##########
@@ -107,6 +109,7 @@
     private static final MailQueueName CUSTOM_QUEUE = MailQueueName.of("customQueue");
     private static final String NAME_1 = "name1";
     private static final String NAME_2 = "name2";
+    private static final byte[] MESSAGE_BYTES = "header: value \r\n".getBytes(UTF_8);

Review comment:
       another occurence where the value itself has been extracted to a local constant

##########
File path: server/mailet/mailetcontainer-camel/src/test/java/org/apache/james/mailetcontainer/impl/JamesMailetContextTest.java
##########
@@ -289,7 +291,7 @@ public void bounceShouldNotFailWhenNonConfiguredPostmaster() throws Exception {
             .name("mail1")
             .sender(mailAddress)
             .addRecipient(mailAddress)
-            .mimeMessage(MimeMessageUtil.defaultMimeMessage())
+            .mimeMessage(MimeMessageUtil.mimeMessageFromBytes("header: value\r\n".getBytes(UTF_8)))

Review comment:
       considering how many times MimeMessageUtil.mimeMessageFromBytes("header: value\r\n".getBytes(UTF_8) is repeated over multiple tests, it could be worth a constant.
   I think FakeMail is a good candidate to hold the constant or a factory method + constant if we want to avoid sharing the byte[]

##########
File path: server/protocols/webadmin/webadmin-mailrepository/src/test/java/org/apache/james/webadmin/service/ReprocessingServiceTest.java
##########
@@ -61,6 +63,7 @@
     private static final MailQueueName SPOOL = MailQueueName.of("spool");
     private static final Consumer<MailKey> NOOP_CONSUMER = key -> { };
     private static final Optional<String> NO_TARGET_PROCESSOR = Optional.empty();
+    private static final byte[] MESSAGE_BYTES = "header: value \r\n".getBytes(UTF_8);

Review comment:
       more of the same 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa opened a new pull request #286:
URL: https://github.com/apache/james-project/pull/286


   We needlessly copy mime messages in a few occasions:
    - After receiving an email via SMTP and enqueuing it
    - When instantiating a Mail via JMAP
    - When dequeuing a mail
   
    In all these cases there is no need to proceed with the defensive copy
    in MailImpl::setMail as we just instanciated it and won't keep a reference.
   
   The COW approach did hide this pitfall.
   
   With these changes, the 'always copy' code is on par performance wise with the 'COW' one, without its drawbacks.
   
   Identified while benching https://github.com/apache/james-project/pull/285


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #282:
URL: https://github.com/apache/james-project/pull/282#issuecomment-755263670


   Sorry I see this, but I won't fix these remarks before the 20th January.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #286:
URL: https://github.com/apache/james-project/pull/286#issuecomment-778995406


   Still getting the 
   
   ```
   05:02:42.728 [ERROR] o.a.j.m.i.c.CamelProcessor - Exception calling Sieve: Mail message to be spooled cannot be null.
   java.lang.NullPointerException: Mail message to be spooled cannot be null.
   	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:895)
   	at org.apache.james.transport.mailets.jsieve.delivery.SieveExecutor.execute(SieveExecutor.java:120)
   	at org.apache.james.transport.mailets.Sieve.service(Sieve.java:75)
   	at org.apache.james.mailetcontainer.impl.camel.CamelProcessor.process(CamelProcessor.java:77)
   	at org.apache.james.mailetcontainer.impl.camel.CamelMailetProcessor$MailetContainerRouteBuilder.handleMailet(CamelMailetProcessor.java:176)
   	at org.apache.james.mailetcontainer.impl.camel.CamelMailetProcessor$MailetContainerRouteBuilder.lambda$configure$0(CamelMailetProcessor.java:153)
   	at org.apache.camel.processor.DelegateSyncProcessor.process(DelegateSyncProcessor.java:63)
   ```
   
   :-(


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #282:
URL: https://github.com/apache/james-project/pull/282#issuecomment-778996072


   Still getting...
   
   ```
   05:01:40.417 [ERROR] o.a.j.m.i.c.CamelProcessor - Exception calling Sieve: Mail message to be spooled cannot be null.
   java.lang.NullPointerException: Mail message to be spooled cannot be null.
   	at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:895)
   	at org.apache.james.transport.mailets.jsieve.delivery.SieveExecutor.execute(SieveExecutor.java:120)
   	at org.apache.james.transport.mailets.Sieve.service(Sieve.java:75)
   	at org.apache.james.mailetcontainer.impl.camel.CamelProcessor.process(CamelProcessor.java:77)
   	at org.apache.james.mailetcontainer.impl.camel.CamelMailetProcessor$MailetContainerRouteBuilder.handleMailet(CamelMailetProcessor.java:176)
   	at org.apache.james.mailetcontainer.impl.camel.CamelMailetProcessor$MailetContainerRouteBuilder.lambda$configure$0(CamelMailetProcessor.java:153)
   	at org.apache.camel.processor.DelegateSyncProcessor.process(DelegateSyncProcessor.java:63)
   	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
   	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
   	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
   ```


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #282:
URL: https://github.com/apache/james-project/pull/282#issuecomment-779080078


   I spent hours on it, to link the failures to SpamAssassin timing out


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


mbaechler commented on pull request #282:
URL: https://github.com/apache/james-project/pull/282#issuecomment-780076133


   test this please


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #286:
URL: https://github.com/apache/james-project/pull/286#issuecomment-780221455


   On master:
   
   ![Screenshot from 2021-02-17 08-01-01](https://user-images.githubusercontent.com/6928740/108141522-76a93b00-70f6-11eb-99a4-9967c3f1be59.png)
   
   On this branch:
   
   ![Screenshot from 2021-02-17 08-02-40](https://user-images.githubusercontent.com/6928740/108141591-9ccedb00-70f6-11eb-8c1f-8a66607d46a5.png)
   
   Sorry for the delays, I had to reboot Linagora's James' bench CI, and it did not work out of the box.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #286:
URL: https://github.com/apache/james-project/pull/286#issuecomment-780221853


   I will now merge build enhancements, and relaunch a build here, and eventually merge this.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #282:
URL: https://github.com/apache/james-project/pull/282#issuecomment-780238563


   test this please


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #286:
URL: https://github.com/apache/james-project/pull/286#issuecomment-780238747


   test this please


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #282:
URL: https://github.com/apache/james-project/pull/282#issuecomment-780434060


   :green_apple: on the CI


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


chibenwa commented on pull request #286:
URL: https://github.com/apache/james-project/pull/286#issuecomment-780485539


   :green_apple: on the CI


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


We removed MimeMessageCopyOnWriteProxy, and limited the count of copies.

Thanks to all the people implied in this effort.

