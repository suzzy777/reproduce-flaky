This is reproducible locally by executing empty_skip_header_footer_aggr.q and compressed_skip_header_footer_aggr.q concurrently.

Thanks for tracking this down [~jfs]. Can you elaborate a bit more on what do you mean concurrently? 

I don't think concurrent test execution is supported so I am trying to understand why we bump into this problem. In Hive CI, the tests are somewhat running concurrently but this is done in different containers so normally there shouldn't be any interference. 

After digging in deeper - You are correct, it is not a concurrent issue. It just happened to be the easiest way to repro and I mistakenly thought it was the root of the issue (before we had the containerized ptest framework, test conflicts were somewhat common iirc).

Here is what is what I think is happening:
1. During PR testing TestMiniLlapLocalCliDriver tests get split into 32 different splits
[https://github.com/apache/hive/blob/master/itests/bin/generate-cli-splits.sh]
[https://github.com/apache/hive/blob/4170e566143e6daa291654e97116199aa738377c/itests/qtest/src/test/java/org/apache/hadoop/hive/cli/TestMiniLlapLocalCliDriver.java#L39]
(It codegens 32 new TestMiniLlapLocalCliDriver objects each with split0 - split32 in the package name)

2. Test assignment for each split is handled via runtime introspection of the class name:
[https://github.com/apache/hive/blob/4170e566143e6daa291654e97116199aa738377c/itests/qtest/src/test/java/org/apache/hadoop/hive/cli/TestMiniLlapLocalCliDriver.java#L43]
[https://github.com/apache/hive/blob/4170e566143e6daa291654e97116199aa738377c/itests/util/src/main/java/org/apache/hadoop/hive/cli/control/SplitSupport.java#L46]

in my PRs case:
empty_skip_header_footer_aggr.q gets assigned to split-7:
{code:java}
<testcase name="testCliDriver[empty_skip_header_footer_aggr]" classname="org.apache.hadoop.hive.cli.split7.TestMiniLlapLocalCliDriver" time="2.534"/>
{code}
compressed_skip_header_footer_aggr.q gets assigned to split-4:
{code:java}
<testcase name="testCliDriver[compressed_skip_header_footer_aggr]" classname="org.apache.hadoop.hive.cli.split4.TestMiniLlapLocalCliDriver" time="7.242">
{code}
3. All test splits are split across 20 executors (not sure where this lives, maybe Jenkins scripts)
split-7 and split-4 get assigned to the same "execution split" of 14
{code:java}
split-14/itests/qtest/target/surefire-reports/TEST-org.apache.hadoop.hive.cli.split7.TestMiniLlapLocalCliDriver.xml
144:  <testcase name="testCliDriver[empty_skip_header_footer_aggr]" classname="org.apache.hadoop.hive.cli.split7.TestMiniLlapLocalCliDriver" time="2.534"/>

split-14/itests/qtest/target/surefire-reports/TEST-org.apache.hadoop.hive.cli.split4.TestMiniLlapLocalCliDriver.xml
165:  <testcase name="testCliDriver[compressed_skip_header_footer_aggr]" classname="org.apache.hadoop.hive.cli.split4.TestMiniLlapLocalCliDriver" time="7.242">
{code}
4. empty_skip_header_footer_aggr gets executed before compressed_skip_header_footer_aggr (this can be seen above in that 144 is before 165 in the test xml)

5. Both empty_skip_header_footer_aggr and compressed_skip_header_footer_aggr create external tables with the data copied to the same location(s). 
For example these locations get used in both tests:
${system:test.tmp.dir}/testcase1
${system:test.tmp.dir}/testcase2
since each test invocation ends up using the same path and the tmp directory is not cleaned between tests this is where the conflict occurs.

6. empty_skip_header_footer_aggr includes rmr commands to cleanup the testcase1 and testcase2 directories.
[https://github.com/apache/hive/blob/4170e566143e6daa291654e97116199aa738377c/ql/src/test/queries/clientpositive/empty_skip_header_footer_aggr.q#L6]

compressed_skip_header does not:
[https://github.com/apache/hive/blob/4170e566143e6daa291654e97116199aa738377c/ql/src/test/queries/clientpositive/compressed_skip_header_footer_aggr.q#L1]

This also like explains why it is not reproducible via:
{code:java}
mvn test -Dtest=TestMiniLlapLocalCliDriver -Dqfile=compressed_skip_header_footer_aggr.q,empty_skip_header_footer_aggr.q
{code}
I think the order of the tests when executed this way is always compressed_skip_header_footer_aggr.q and then empty_skip_header_footer_aggr.q

My fix ends up working because I give a unique location for each tests test external data files.

I'll likely modify empty_skip_header_footer_aggr.q to remove the rmr's (because the only thing it really does is to hide this problem) and give all the files/directories unique names. We could like add a "unique external directory" variable that is generated per testcase and cleaned up after each one (or some other solution) but I think that is out of the scope of this ticket.

After reading the tests in deeper detail, I've modified the posted patch and modified both compressed_skip_header_footer_aggr.q and empty_skip_header_footer_aggr.q to:
1) Changed all the EXTERNAL TABLEs to normal managed tables
2) Added DROPs to the test for the created tables (so the underlying data gets removed normally)
3) Removed the dfs commands that created directories and copied the test data
4) Added LOAD DATA commands to populate the tables with the test data
5) I also gave the tables unique names between the tests (I find it easier to have unique names for debugging).

I find this approach less error prone and less confusing (LOAD DATA is more idiomatic). I saw nothing inherent to the test cases that required external tables.

Changing tables from External to Managed, seems to be changing a bit core of the test. We shouldn't change the functional bit of the test to fix the flakiness, though the table type might not look relevant in the current test case or may be yes.
 * We can have {{hive.external.table.purge.default}} set to true, if we want to get the data deleted for the external tables?
 * Second, In the tests, Can we not first delete the directory & then use it giving it scope, if there is some leftovers? This should be a one liner and should get us sorted? In couple of test there is something Like DROP TABLE IF EXIST before creates, may be same stuff for the filesystem directories, before using, clean it up? giving it scope if some failed test didn't do that or failed to do that
 * Is there a scope like post every .q test we do a recursive delete inside  {{{}system:test.tmp.dir{}}}? That should also solve the problem for all the tests affected by this issue?

 

In general we should try to have minimal changes to the core of the existing test as far as possible to get rid of the flakiness.

Many thanks for the detailed analysis [~jfs] and [~ayushtkn] for keeping an eye on this! 

Before checking the changes in the PR in detail I would like to point out the [QTestUtil#clearTablesCreatedDuringTests| https://github.com/apache/hive/blob/95d088a752f1c04f33c9c56556f0f939a1c9ea42/itests/util/src/main/java/org/apache/hadoop/hive/ql/QTestUtil.java#L342] method. The method tries to clear any kind of side effects coming from table creation and there is code trying to address [directories coming from external tables|https://github.com/apache/hive/blob/95d088a752f1c04f33c9c56556f0f939a1c9ea42/itests/util/src/main/java/org/apache/hadoop/hive/ql/QTestUtil.java#L395]. I am wondering if this is an appropriate place to address the flakiness observed here. 

Thanks [~ayushtkn] and [~zabetak] for helping to make the patch better.
I don't see any indication that the tests require external tables. But I agree that I could be overlooking a detail and I don't functionally need to change the test so significantly (even if I think the newer version is cleaner). I went with just rmr the created directories to clean up the directories at the end.

I did not add DROP IF EXISTS or rmr(s) before the creation since I find that practice typically hides problems and sometimes causes hidden dependencies between tests.

As for clearTablesCreatedDuringTests - it doesn't clean these files up because it only cleans up tables under the configured warehouse directory. This test case manually creates a location not under the warehouse directory so it doesn't end up cleaning up the files. I could modify the clearTablesCreatedDuringTests to clean up all directories mentioned in CREATE EXTERNAL TABLE location clauses, but that could be risky since it could lead to user files being accidentally removed with a misconfigured location clause and I am not sure I would be able to add all the possible checks to prevent that.

In the future I think tests like this should load the data via LOAD DATA if possible and not use a custom LOCATION clause so it gets cleaned up normally.

I approved the last changes in the PR and I will merge it soon unless someone has more thoughts.

Regarding the {{clearTablesCreatedDuringTests}} I would be open to accept a PR that cleans up directories created from external tables after verifying that they are under some hopefully safe to delete paths such as ${system:test.tmp.dir}. Shall we open a follow up JIRA about this?

Using LOAD DATA and not using custom LOCATION also makes sense when applicable. If someone wants to verify existing tests and take a holistic approach to adapt the tests I think it would also be a useful contribution. People copy code from other places and if bad patterns are used the use of bad patterns increases so this kind of contributions are also very important of the project. I would suggest to create a JIRA about this as well.

{quote}Regarding the {{clearTablesCreatedDuringTests}} I would be open to accept a PR that cleans up directories created from external tables after verifying that they are under some hopefully safe to delete paths such as ${system:test.tmp.dir}. Shall we open a follow up JIRA about this?
{quote}
Makes sense to me.

Fixed in https://github.com/apache/hive/commit/566f48d3d3fc740ef958bdf963e511e0853da402. Thanks for the PR [~jfs] and for the review [~ayushtkn]!

