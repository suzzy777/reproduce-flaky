This has been failing continuously since https://github.com/apache/beam/pull/15607 was submitted (~25 days).

Most recent failure is https://ci-beam.apache.org/job/beam_PostCommit_Java_DataflowV2/825/

most recent build https://ci-beam.apache.org/job/beam_PostCommit_Java_DataflowV2/857/

https://scans.gradle.com/s/ixzpe4qsqm6h2

Dataflow job is here: https://console.cloud.google.com/dataflow/jobs/us-central1/2021-11-02_05_51_13-12805523397657889452?project=apache-beam-testing

A worker was unable to start up. Error: Unable to pull container image due to error: image pull request failed with error: Error response from daemon: manifest for us.gcr.io/apache-beam-testing/java-postcommit-it/java:20211102120058 not found: manifest unknown: Failed to fetch "20211102120058" from request "/v2/apache-beam-testing/java-postcommit-it/java/manifests/20211102120058".. This is likely due to an invalid SDK container image URL. Please verify any provided SDK container image is valid and that Dataflow workers have permissions to pull image.

The image doesn't exist now, but other tests successfully ran with it: https://pantheon.corp.google.com/dataflow/jobs/us-central1/2021-11-02_06_00_31-5323072165915029945?project=apache-beam-testing

I looked at the most recent failing job. It has the errors that [~apilloud] quoted. They must be red herrings though. It also has this:

{code}
generic::unknown: org.apache.beam.sdk.util.UserCodeException: java.lang.IllegalArgumentException: Attempted to set an event-time timer with an output timestamp of 294247-01-09T04:00:54.775Z that is after the timer firing timestamp 2021-11-12T18:55:12.516Z
	at org.apache.beam.sdk.util.UserCodeException.wrap(UserCodeException.java:39)
	at org.apache.beam.sdk.transforms.Deduplicate$DeduplicateFn$DoFnInvoker.invokeProcessElement(Unknown Source)
	at org.apache.beam.fn.harness.FnApiDoFnRunner.processElementForWindowObservingParDo(FnApiDoFnRunner.java:771)
	at org.apache.beam.fn.harness.data.PCollectionConsumerRegistry$MetricTrackingFnDataReceiver.accept(PCollectionConsumerRegistry.java:257)
	at org.apache.beam.fn.harness.data.PCollectionConsumerRegistry$MetricTrackingFnDataReceiver.accept(PCollectionConsumerRegistry.java:209)
	at org.apache.beam.fn.harness.BeamFnDataReadRunner.forwardElementToConsumer(BeamFnDataReadRunner.java:172)
	at org.apache.beam.sdk.fn.data.BeamFnDataInboundObserver2.awaitCompletion(BeamFnDataInboundObserver2.java:126)
	at org.apache.beam.fn.harness.control.ProcessBundleHandler.processBundle(ProcessBundleHandler.java:467)
	at org.apache.beam.fn.harness.control.BeamFnControlClient.delegateOnInstructionRequestType(BeamFnControlClient.java:151)
	at org.apache.beam.fn.harness.control.BeamFnControlClient$InboundObserver.lambda$onNext$0(BeamFnControlClient.java:116)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Attempted to set an event-time timer with an output timestamp of 294247-01-09T04:00:54.775Z that is after the timer firing timestamp 2021-11-12T18:55:12.516Z
	at org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument(Preconditions.java:440)
	at org.apache.beam.fn.harness.FnApiDoFnRunner$FnApiTimer.getTimerForTime(FnApiDoFnRunner.java:1914)
	at org.apache.beam.fn.harness.FnApiDoFnRunner$FnApiTimer.setRelative(FnApiDoFnRunner.java:1839)
	at org.apache.beam.sdk.transforms.Deduplicate$DeduplicateFn.processElement(Deduplicate.java:318)
{code}

It looks like there's an issue with Deduplicate on Runner v2. There was a suspicious change to Deduplicate recently too: https://github.com/apache/beam/commit/ce3a5545e1ac5a655a2c01374b89c08bf5b3e34a#diff-6a2e50eb57656ea50a5faa1a0346af656bee517103c3320e0ad08d6cdb2778b5

[~dpcollins-google] will see if we can run the test successfully without Deduplicate

pr/15953 should get this test passing (I'll re-open if it doesn't). I opened BEAM-13230 to track the issue with Deduplicate

Looks like this test is passing sometimes on Dataflow V2, but it's flaky now. Example failure in https://ci-beam.apache.org/job/beam_PostCommit_Java_DataflowV2/908.

From Dataflow logs for job 2021-11-15_04_55_22-3569164692454078716:

{code}
Error message from worker: generic::unknown: org.apache.beam.sdk.util.UserCodeException: com.google.api.gax.rpc.NotFoundException: io.grpc.StatusRuntimeException: NOT_FOUND: Resource projects/844138762903/locations/us-central1-b/subscriptions/beam_it_resource_1932162271320884807 of type SUBSCRIPTION does not exist.
	org.apache.beam.sdk.util.UserCodeException.wrap(UserCodeException.java:39)
	org.apache.beam.sdk.io.gcp.pubsublite.internal.PerSubscriptionPartitionSdf$DoFnInvoker.invokeNewTracker(Unknown Source)
	org.apache.beam.fn.harness.FnApiDoFnRunner.processElementForWindowObservingSizedElementAndRestriction(FnApiDoFnRunner.java:1041)
	org.apache.beam.fn.harness.FnApiDoFnRunner.access$1200(FnApiDoFnRunner.java:142)
	org.apache.beam.fn.harness.FnApiDoFnRunner$4.accept(FnApiDoFnRunner.java:640)
	org.apache.beam.fn.harness.FnApiDoFnRunner$4.accept(FnApiDoFnRunner.java:635)
	org.apache.beam.fn.harness.data.PCollectionConsumerRegistry$MetricTrackingFnDataReceiver.accept(PCollectionConsumerRegistry.java:257)
	org.apache.beam.fn.harness.data.PCollectionConsumerRegistry$MetricTrackingFnDataReceiver.accept(PCollectionConsumerRegistry.java:209)
	org.apache.beam.fn.harness.BeamFnDataReadRunner.forwardElementToConsumer(BeamFnDataReadRunner.java:172)
	org.apache.beam.sdk.fn.data.BeamFnDataInboundObserver2.awaitCompletion(BeamFnDataInboundObserver2.java:126)
	org.apache.beam.fn.harness.control.ProcessBundleHandler.processBundle(ProcessBundleHandler.java:467)
	org.apache.beam.fn.harness.control.BeamFnControlClient.delegateOnInstructionRequestType(BeamFnControlClient.java:151)
	org.apache.beam.fn.harness.control.BeamFnControlClient$InboundObserver.lambda$onNext$0(BeamFnControlClient.java:116)
	java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	java.lang.Thread.run(Thread.java:748)
Caused by: com.google.api.gax.rpc.NotFoundException: io.grpc.StatusRuntimeException: NOT_FOUND: Resource projects/844138762903/locations/us-central1-b/subscriptions/beam_it_resource_1932162271320884807 of type SUBSCRIPTION does not exist.
	com.google.api.gax.rpc.ApiExceptionFactory.createException(ApiExceptionFactory.java:45)
	com.google.api.gax.grpc.GrpcApiExceptionFactory.create(GrpcApiExceptionFactory.java:72)
	com.google.api.gax.grpc.GrpcApiExceptionFactory.create(GrpcApiExceptionFactory.java:60)
	com.google.api.gax.grpc.GrpcExceptionCallable$ExceptionTransformingFuture.onFailure(GrpcExceptionCallable.java:97)
	com.google.api.core.ApiFutures$1.onFailure(ApiFutures.java:68)
	com.google.common.util.concurrent.Futures$CallbackListener.run(Futures.java:1133)
	com.google.common.util.concurrent.DirectExecutor.execute(DirectExecutor.java:31)
	com.google.common.util.concurrent.AbstractFuture.executeListener(AbstractFuture.java:1277)
	com.google.common.util.concurrent.AbstractFuture.complete(AbstractFuture.java:1038)
	com.google.common.util.concurrent.AbstractFuture.setException(AbstractFuture.java:808)
	io.grpc.stub.ClientCalls$GrpcFuture.setException(ClientCalls.java:563)
	io.grpc.stub.ClientCalls$UnaryStreamToFuture.onClose(ClientCalls.java:533)
	io.grpc.internal.DelayedClientCall$DelayedListener$3.run(DelayedClientCall.java:463)
	io.grpc.internal.DelayedClientCall$DelayedListener.delayOrExecute(DelayedClientCall.java:427)
	io.grpc.internal.DelayedClientCall$DelayedListener.onClose(DelayedClientCall.java:460)
	io.grpc.internal.ClientCallImpl.closeObserver(ClientCallImpl.java:557)
	io.grpc.internal.ClientCallImpl.access$300(ClientCallImpl.java:69)
	io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed.runInternal(ClientCallImpl.java:738)
	io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed.runInContext(ClientCallImpl.java:717)
	io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)
	io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:133)
	java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	java.util.concurrent.FutureTask.run(FutureTask.java:266)
	java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
	java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
Caused by: io.grpc.StatusRuntimeException: NOT_FOUND: Resource projects/844138762903/locations/us-central1-b/subscriptions/beam_it_resource_1932162271320884807 of type SUBSCRIPTION does not exist.
	io.grpc.Status.asRuntimeException(Status.java:535)
	io.grpc.stub.ClientCalls$UnaryStreamToFuture.onClose(ClientCalls.java:533)
	io.grpc.internal.DelayedClientCall$DelayedListener$3.run(DelayedClientCall.java:463)
	io.grpc.internal.DelayedClientCall$DelayedListener.delayOrExecute(DelayedClientCall.java:427)
	io.grpc.internal.DelayedClientCall$DelayedListener.onClose(DelayedClientCall.java:460)
	io.grpc.internal.ClientCallImpl.closeObserver(ClientCallImpl.java:557)
	io.grpc.internal.ClientCallImpl.access$300(ClientCallImpl.java:69)
	io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed.runInternal(ClientCallImpl.java:738)
	io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed.runInContext(ClientCallImpl.java:717)
	io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)
	io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:133)
	java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	java.util.concurrent.FutureTask.run(FutureTask.java:266)
	java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
	java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
	java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	java.lang.Thread.run(Thread.java:748)
{code}

Is there some kind of race here? Could you take a look [~dpcollins-google]?

This issue is assigned but has not received an update in 30 days so it has been labeled "stale-assigned". If you are still working on the issue, please give an update and remove the label. If you are no longer working on the issue, please unassign so someone else may work on it. In 7 days the issue will be automatically unassigned.

This issue was marked "stale-assigned" and has not received a public comment in 7 days. It is now automatically unassigned. If you are still working on it, you can assign it to yourself again. Please also give an update about the status of the work.

This Jira ticket has a pull request attached to it, but is still open. Did the pull request resolve the issue? If so, could you please mark it resolved? This will help the project have a clear view of its open issues.

This issue is assigned but has not received an update in 30 days so it has been labeled "stale-assigned". If you are still working on the issue, please give an update and remove the label. If you are no longer working on the issue, please unassign so someone else may work on it. In 7 days the issue will be automatically unassigned.

This issue was marked "stale-assigned" and has not received a public comment in 7 days. It is now automatically unassigned. If you are still working on it, you can assign it to yourself again. Please also give an update about the status of the work.

It looks like this test is no longer flaky, it's permanently failing again: https://ci-beam.apache.org/job/beam_PostCommit_Java_DataflowV2/lastCompletedBuild/testReport/org.apache.beam.sdk.io.gcp.pubsublite/ReadWriteIT/testReadWrite/history/

[~dpcollins-google] could you take a look?

This issue is assigned but has not received an update in 30 days so it has been labeled "stale-assigned". If you are still working on the issue, please give an update and remove the label. If you are no longer working on the issue, please unassign so someone else may work on it. In 7 days the issue will be automatically unassigned.

This issue was marked "stale-assigned" and has not received a public comment in 7 days. It is now automatically unassigned. If you are still working on it, you can assign it to yourself again. Please also give an update about the status of the work.

This issue has been migrated to https://github.com/apache/beam/issues/21271

