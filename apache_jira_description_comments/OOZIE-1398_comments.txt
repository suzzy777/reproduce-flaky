Since there is a DB upgrade involved with HCat and SLA changes, trying to get this also into this release. 

  These are the easy ones. Changing CONF columns might involve compressing and storing them. Not looking at those right now.

Candidates for conversion to varachar2:

COORD_JOBS.SLA_XML
COORD_ACTIONS.SLA_XML
WF_JOBS.SLA_XML
WF_ACTIONS.SLA_XML

WF_ACTIONS.ERROR_MESSAGE (Can add logic to truncate and store)
WF_ACTIONS.DATA  (Max length for storing to this column is set to 2K in code in places where it is populated with action data)

Candidates for removal:
BUNDLE_JOBS.AUTH_TOKEN
COORD_JOBS.AUTH_TOKEN
WORKFLOW_JOBS.AUTH_TOKEN

[~tucu00],
    Not sure why we need to store AUTH_TOKEN column in database. Doesn't seem to be used anywhere. I only see ? (undef) stored as value. Can we remove this column?

+Mohammad

[~kamrul],
   Any history on why these columns were made CLOBs and do you see any problem in making them varchar2?

Sounds good, we can drop the AUTH_TOKEN columns all together. They were thought very early on when the Hadoop DT token story was still not fully backed and we had idea that the client would have to give the DT token to oozie on submission.

We have to see if OpenJPA supports making the type change, else the ooziedb tool will have to handle the change for each DB type using the corresponding sql.

https://reviews.apache.org/r/11772/

Testing JIRA OOZIE-1398

Cleaning local svn workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:red}-1{color} the patch contains 2 line(s) with tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 49 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1 BACKWARDS_COMPATIBILITY{color}
.    {color:red}-1{color} the patch seems to change 30 line(s) with JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1260
.    Tests failed: 2
.    Tests errors: 0

.    The patch failed the following testcases:

.      testCoordinatorActionEvent(org.apache.oozie.event.TestEventGeneration)
.      testOozieDBCLI(org.apache.oozie.tools.TestOozieDBCLI)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/574/

Testing JIRA OOZIE-1398

Cleaning local svn workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:red}-1{color} the patch contains 2 line(s) with tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 49 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1 BACKWARDS_COMPATIBILITY{color}
.    {color:red}-1{color} the patch seems to change 30 line(s) with JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1260
.    Tests failed: 2
.    Tests errors: 0

.    The patch failed the following testcases:

.      testEvictionOnTimeToIdle(org.apache.oozie.service.TestPartitionDependencyManagerEhcache)
.      testOozieDBCLI(org.apache.oozie.tools.TestOozieDBCLI)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/575/

precommit build picks up previous version (v5) for some reason..

Testing JIRA OOZIE-1398

Cleaning local svn workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:red}-1{color} the patch contains 2 line(s) with tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 3 line(s) longer than 132 characters
.    {color:green}+1{color} the patch does adds/modifies 50 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1 BACKWARDS_COMPATIBILITY{color}
.    {color:red}-1{color} the patch seems to change 30 line(s) with JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1247
.    Tests failed: 3
.    Tests errors: 0

.    The patch failed the following testcases:

.      testEvictionOnTimeToIdle(org.apache.oozie.service.TestPartitionDependencyManagerEhcache)
.      testCoordinatorActionEvent(org.apache.oozie.event.TestEventGeneration)
.      testSla(org.apache.oozie.client.TestWorkflowClient)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/580/

-removed tab
-132 char limit error, coming from JPA NamedQuery, no need to fix
-test cases failure coming from flacky test cases, run locally and it's fine.  should be tracked in separate jira
-changed SLA_SUMMARY, user->user_name for consistentcy
-delete bean type from SLA_REGISTRATION

Testing JIRA OOZIE-1398

Cleaning local svn workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 3 line(s) longer than 132 characters
.    {color:green}+1{color} the patch does adds/modifies 50 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:red}-1 COMPILE{color}
.    {color:red}-1{color} HEAD does not compile
.    {color:red}-1{color} patch does not compile
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1 BACKWARDS_COMPATIBILITY{color}
.    {color:red}-1{color} the patch seems to change 32 line(s) with JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:red}-1 DISTRO{color}
.    {color:red}-1{color} distro tarball fails with the patch

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/581/

+1 on the new patch. 

bq. -1 TESTS - patch does not compile, cannot run testcases
   Can you reattach the same patch again and try. It is running fine for me locally.



trying again

Testing JIRA OOZIE-1398

Cleaning local svn workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 3 line(s) longer than 132 characters
.    {color:green}+1{color} the patch does adds/modifies 50 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1 BACKWARDS_COMPATIBILITY{color}
.    {color:red}-1{color} the patch seems to change 32 line(s) with JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1247
.    Tests failed: 1
.    Tests errors: 2

.    The patch failed the following testcases:

.      testEvictionOnTimeToIdle(org.apache.oozie.service.TestPartitionDependencyManagerEhcache)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/582/

test case failures from flaky test cases. locally run these test and confirmed.
JPA change included in patch as previous comment
this patch is ready for commit. 

committed to trunk, thanks for all review. 

There are a few of things missed in the committed patch.

* The DBTOOL should set a new DB version after doing the upgrade.
* The DBTOOL should check before doing the upgrade the DB version is lesser than the current one.
* Also, we should add in the JPAService a check to fail startup if the DB version is not the correct one.

The first 2 should be a follow up JIRA to this one, the 3rd one should be a new JIRA.

The first two are already taken care of. DB_VERSION used to be 1 for 3.2. This patch does not contain it because it was done in OOZIE-1150. 

{noformat}
if (ver.equals("1")) { // if db.version equals to 1 (after 3.2+), need to upgrade
                upgradeDBTo40(sqlFile, run, true);
            }
            else if (ver.equals(DB_VERSION)) { // if db.version equals to 2, it's already upgraded
                throw new Exception("Oozie DB has already been upgraded");
            }

upgradeDBTo40() {
...
upgradeOozieDBVersion(sqlFile, run);
..
}
{noformat}

got it. So we should take care of the 3rd one then, may be introducing a constant in JPAService that defines the DB version and the DB tool checks/sets to it. So when we do a DB change we change the constant value and the DB tool will just do the check for the new version. In the JPAService we should check the value of that DB version using direct JDBC not to have mapping conflict if the DB is of an earlier version (I'm not sure but JPA could fail to initialize).

Created OOZIE-1413 for that.

sorry to jump in late. thank Tucu and Rohini for clarifying these points. I will take a look at OOZIE-1413

I know I'm a bit late here, but I have a concern about the following change in JsonWorkflowAction.java:
{code:java}
@@ -267,6 +265,9 @@
     }
 
     public void setData(String data) {
+        if( data != null && data.length() > 2000){
+            data = data.substring(0, 2000);
+        }
         this.data = data;
     }
 
{code}

This gets called to set the data when {{</capture-output>}} is used in an action.  Its max length can be set by the user in oozie-site via {{oozie.action.max.output.data}} (or via {{oozie.servlet.CallbackServlet.max.data.len}} because of OOZIE-4), which is enforced before this method is called.  The default value is 2K but if the user sets it higher, won't this new code effectively hardcode it to 2K regardless of what the user set?  This means that the user will be losing data if they have more than 2K.

Also, this String ({{data}}) was originally read in from a properties file, so it should be a bunch of key-value pairs when we convert it to a String (I'm not exactly sure what the format looks like though); if we simply truncate this String, is it possible that we corrupt the last key-value pair if it doesn't get cut off exactly between two key-value pairs (i.e. a key-value pair gets cut somewhere in the middle)?  

Good point. But shouldn't be a problem for now as this column will be reverted back from varchar to clob due to a recent issue we faced (OOZIE-1436) 
As <capture-output> should only be used for control data,  one thing that can be done is to make the code override the settings of the data length property defined in oozie-site if greater than some reasonable value, lets say 4k. In that case when converting to varchar(4000) shoudn't be an issue. But probably if we are compressing this columns, then we dont even need to do this.


thanks for pointing this out. we need code change to parametrize "2000" part, which supposed to use max of oozie.action.max.output.data, and 2K,  created OOZIE-1437

also about this limit, some users at Y! asking for more than 2K for oozie.action.max.output.data. their use case is to identify list of input files to process in one action, and pass the list to next action(like pig) which actually consume these input files, when so many files to process, it easily exceeds 2K.  so I strongly agree with Virag's idea to introduce compression on this.

Great, thanks for creating OOZIE-1437.  

Yes. We will be converting all CLOB columns to VARBINARY (can store up to 4MB) in next release and compress and store data in there. postgres bytea is 2G.  VARBINARY in mysql has lesser limit though - max row size of 65K, but with compression that should be good. For 4.0, we will revert back the sla_xml and data columns back to CLOB due to openjpa issue with Oracle and ordering of columns during insert (OOZIE-1436). We will only keep error message column as varchar in 4.0.  

