Worth noting there are also some in-jvm dtests that can't run in parallel as they require absolute port numbers.

:(

But that is probably a different problem (more serious) and has a different fix

 

I can reproduce it nearly consistently by running:

{noformat}
ant testclasslist -Dtest.runners=4
{noformat}

given {{testlist.txt}} is:

{noformat}
org/apache/cassandra/metrics/ClientRequestSizeMetricsTest.java
org/apache/cassandra/locator/ReplicaPlansTest.java
org/apache/cassandra/service/reads/ReadExecutorTest.java
org/apache/cassandra/net/proxy/ProxyHandlerTest.java
org/apache/cassandra/net/ConnectionTest.java
org/apache/cassandra/db/ClusteringBoundTest.java
org/apache/cassandra/cql3/functions/OperationFctsTest.java
org/apache/cassandra/db/marshal/BytesTypeTest.java
org/apache/cassandra/db/compaction/TTLExpiryTest.java
org/apache/cassandra/cql3/validation/operations/SelectSingleColumnRelationTest.java
org/apache/cassandra/repair/RepairSessionTest.java
{noformat}


CI
- patch as-is :: https://ci-cassandra.apache.org/job/Cassandra-devbranch-test/303/
- patch w/ runners enabled :: https://ci-cassandra.apache.org/job/Cassandra-devbranch-test/304/

With runners, ci-cassandra went with two runners:
{code}
…
13:52:30 get-cores:
13:52:30      [echo] Number of cores: 8
13:52:30 
13:52:30 get-mem:
13:52:30      [echo] Mem size : 33675816960
13:52:30 
13:52:30 testclasslist:
13:52:30      [echo] Number of test runners: 2
…
{code}

And to [expectation|https://issues.apache.org/jira/browse/CASSANDRA-13078], this halved the build time, from ~2 hours to ~1 hour.
And no failures.

+1 (with the inclusion of enabling runners)

+1

Additional patch [here|https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/trunk_16511].

+1 (though the first one was actually for this, since that is what ran on CI)

Committed as [11d069a766a4a9a5db534a86de0175128431526f|https://github.com/apache/cassandra/commit/11d069a766a4a9a5db534a86de0175128431526f].

bq. Worth noting there are also some in-jvm dtests that can't run in parallel as they require absolute port numbers.

Oops. `ant testclasslist` is re-used here. Working on a fix…

Patches:
 - https://github.com/apache/cassandra-builds/compare/trunk...thelastpickle:mck/16511
 - https://github.com/apache/cassandra/compare/trunk...thelastpickle:mck/trunk_16511_circleci

+1 but I think we need to edit config-2_1.yml too to persist this through a run of generate.sh

bq. +1 but I think we need to edit config-2_1.yml too to persist this through a run of generate.sh

done.

CI
 - https://app.circleci.com/pipelines/github/michaelsembwever/cassandra/12/workflows/c5e7cd60-17a9-4c3c-a875-f8932547218c

cassandra-builds committed as [34d9592dda05ab313efac9d04e565f593fa40b37|https://github.com/apache/cassandra-builds/commit/34d9592dda05ab313efac9d04e565f593fa40b37].

Committed as [1f7700cf8bd6364f49138472b47676e46c023825|https://github.com/apache/cassandra/commit/1f7700cf8bd6364f49138472b47676e46c023825].

It looks like with the commit ([11d069a|https://github.com/apache/cassandra/commit/11d069a766a4a9a5db534a86de0175128431526f]), the CircleCI j8 unit test always starts with multiple runners and the test becomes flaky since then, when using highRes (I did not try the other resource types). 

https://app.circleci.com/pipelines/github/yifan-c/cassandra/228/workflows/8a1cf6d9-d5d3-47ad-be62-6e563907a0a6/jobs/1370/parallel-runs/35/steps/35-104

The test task now depends on {{get-cores}} and {{get-mem}} and it leads to the number of runners being calculated as 6. 
{code:java}
build-test:

_build-test:

get-cores:
     [echo] Number of cores: 36

get-mem:
     [echo] Mem size : 73757396992

testclasslist:
     [echo] Number of test runners: 6
{code}

The unit test opens ports too. One approach is to patch the circle CI config with {{-Dtest.runner=1}}. 

WDYT?

At this point perhaps we should just wait for CASSANDRA-16595 to remove all the parallelism from the build itself.

