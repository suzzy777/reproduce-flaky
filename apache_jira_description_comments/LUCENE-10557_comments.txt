+1

Do we know whether we could (relatively easily) migrate our Jira issues over to GitHub issues?

Hmm at least ~4 years ago, migrating was not [possible/easy|https://issues.apache.org/jira/browse/INFRA-15702?focusedCommentId=16312429&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-16312429].

INFRA-16128 was the issue when RocketMQ migrated: https://issues.apache.org/jira/browse/INFRA-16128

Among the tasks I mentioned in the issue description, the most important (and most difficult?) one could be "Get a consensus about the migration".

I look for explicit feedback (+1 or -1) on this topic from developers.

I'd definitely cast +1; not because I don't like Jira (it works well for me so far), but because the most development is already going on GitHub. Consolidation of conversation would be good for improving experiences I think.

Thank you [~mikemccand] for joining and giving the pointer!

INFRA team says Vote or PMC agreement are needed for the decision in the RocketMQ's issue (it makes sense to me).
{quote}We are going to need to see a PMC agreement on doing that, not just one persons say so. Please come back here with a link to a vote or discussion where the PMC agrees.
{quote}

The Lucene.NET project switched to GitHub issues 3 years ago, and we were able to get far more contributor participation than on JIRA, but that may just be mostly a .NET thing. We held a vote and all participants were unanimous on the GitHub Issues migration.

It was pretty straightforward for INFRA to do. We made a script to migrate the open issues to GitHub via API, but there were a couple of issues we had that you may need to find a workaround for:

# The issues were not added to GitHub in chronological order.
# Since INFRA wouldn't give us permission to the API, we gave the script to them and the issues were added to GitHub with the INFRA tech as the owner instead of the original person who submitted the issue.

There is a walkthrough of the process here: https://gist.github.com/jonmagic/5282384165e0f86ef105#start-an-issue-import%22
The INFRA ticket for this is: https://issues.apache.org/jira/browse/INFRA-20118

We didn't disable JIRA support, but we didn't really have to because we couldn't get users to participate on it, anyway. But that is something you will also need to take into consideration.

[~nightowl888] thanks for giving valuable information!

We are having a very long discussion on the migration in the mail list. :\)

https://lists.apache.org/thread/78wj0vll73sct065m5jjm4z8gqb5yffk

Oh that's great news; thanks for sharing [~nightowl888]!

We are having a long discuss thread on the dev list and many issues are posed. Here is a short summary (with my brief thoughts/opinions).
 * Concerns for political neutrality of GitHub - in other words, concerns for account bans with no good reason
 ** Seems there are several cases (including rumors) of GitHub account bans. It's unclear whether they violate its terms of policy or not, and we won't be able to correctly assess the risk to me. I would defer the judgment to the individuals.
 ** For developers who don't use GitHub for whatever reason, we will always support contribution paths that do not rely on GitHub. Patches via Jira will be a decent option for good.
 * Concerns for its parent company, Microsoft
 ** I'd defer the judgment on that to the individuals for the same reason for the previous subject. One thing I could say is, that the recent trend in their direction is GOOD - they support/sponsor OSS and Java communities and even publish very popular open-source software (VSCode and LightGBM are outstanding examples I think).
 * Concerns for lack of issue workflow and simpler metadata management
 ** From the practical viewpoint, it fully makes sense to me that many people talked about it. We would need to carefully think of how to control versions and issue/PR metadata. Large projects that are fully operated on GitHub overcome this shortcoming in various ways - organized issue templates with fixed label sets would be an example. I think we will have a sandbox repository outside ASF, then try some experiments on it before actual migration.
 * Security issues that only PMC members are allowed to be accessed
 ** We will be able to continue to use Jira for this purpose, or we could even have an issue-only private GitHub repository for Lucene?
 * Concerns for migration of whole Jira issue history to GitHub issue
 ** I don't think it is possible. I'm almost sure there will be some information losses if we attempt to migrate the whole Jira issue with metadata/history into Github. Rather than trying to do that, I would prefer to let Jira issues as is, then simply refer them.
 ** If we don't aim at perfection, I think we'll be able to migrate all (or part of) issues with APIs as Shad Storhaug kindly shared in this comment.

Aside from those concerns, there seems no disagreement with GitHub is superior to Jira in terms of overall UX design, and most new developers like it.

Issue stats on 28/May/2022.

*\# of total issues: 10543*
*\# of unresolved issues: 1914*

*Breakdown of unresolved issues*
By Issue Type
  - Type="Bug": 679
  - Type="Improvement": 790
  - Type="New Feature": 173
  - Type="Task": 163
  - Type="Test": 42
  - Type="Wish": 38
  - Type="Sub-task": 29

By Affects Version (overlapped)
  - Version < 4.0: 175
  - 4.0 <= Version < 5.0: 239
  - 5.0 <= Version < 6.0: 59
  - 6.0 <= Version < 7.0: 79
  - 7.0 <= Version < 8.0: 58
  - 8.0 <= Version < 9.0: 64
  - 9.0 <= Version: 2
  - No Version: 1258

By Created Date
  - ~ 31/Dec/2012: 544
  - 1/Jan/2013 ~ 31/Dec/2013: 134
  - 1/Jan/2014 ~ 31/Dec/2014: 166
  - 1/Jan/2015 ~ 31/Dec/2015: 176
  - 1/Jan/2016 ~ 31/Dec/2016: 139
  - 1/Jan/2017 ~ 31/Dec/2017: 123
  - 1/Jan/2018 ~ 31/Dec/2018: 102
  - 1/Jan/2019 ~ 31/Dec/2019: 145
  - 1/Jan/2020 ~ 31/Dec/2020: 120
  - 1/Jan/2021 ~ 31/Dec/2021: 170
  - 1/Jan/2022 ~ : 93

By Component
  - core: 508
  - modules/analysis: 147
  - modules/benchmark: 11
  - modules/classification: 2
  - modules/examples: 1
  - modules/expressions: 3
  - modules/facet: 39
  - modules/grouping: 5
  - modules/highlithter: 43
  - modules/join: 11
  - modules/luke: 2
  - modules/monitor: 2
  - modules/queryparser: 25
  - modules/replicator: 4
  - modules/sandbox: 5
  - modules/spatial: 38
  - modules/spatial-extras: 3
  - modules/spatial3d: 6
  - modules/suggest: 3
  - modules/spellchecker: 11
  - modules/test-framework: 5
  - modules/other: 29
  - release wizard: 1
  - luke: 2
  - general/build: 58
  - general/javadocs: 15
  - general/test: 22
  - general/website: 19
  - No Component: 916

Operational policies in other projects on GitHub (randomly selected).

Kubernetes (https://github.com/kubernetes/kubernetes)
* Uses Milestone for version management
* Uses Labels for categorizing/adding metadata to issues/PRs
* Only limited members can add/edit Labels
* Uses Issue templates to add issue type (kind) when opening one
** Bug report/Feature request/Test Failure/...

Elasticsearch (https://github.com/elastic/elasticsearch)
* Uses Labels for version management and categorizing/adding metadata to issues/PRs
* Only limited members can add/edit Labels
* Uses Issue templates to add issue type (kind) when opening one

OpenSearch (https://github.com/opensearch-project/OpenSearch)
* Uses Labels for version management and categorizing/adding metadata to issues/PRs
* Only limited members can add/edit Labels
* Uses Issue templates to add issue type (kind) when opening one

Apache Solr Operator (https://github.com/apache/solr-operator)
* Uses Milestone for version management
* Uses Labels for categorizing/adding metadata to issues/PRs

Apache Airflow (https://github.com/apache/airflow)
* Uses Milestone for version management
* Uses Labels for categorizing/adding metadata to issues/PRs
* Only limited members can add/edit Labels
* Uses Issue templates to add issue type (kind) when opening one

Apache Lucene.NET (https://github.com/apache/lucenenet)
* Uses Milestone for version management
* Uses Labels for categorizing/adding metadata to issues/PRs
* Only limited members can add/edit Labels

Spring Framework (https://github.com/spring-projects/spring-framework)
* Uses Milestone for version management
* Uses Labels for categorizing/adding metadata to issues/PRs
* Only limited members can add/edit Labels

Gradle (https://github.com/gradle/gradle)
* Uses Milestone for version management
* Uses Labels for categorizing/adding metadata to issues/PRs
* Only limited members can add/edit Labels
* Uses Issue templates to add issue type (kind) when opening one

Migration plan (an early draft)
 * Set a criteria which issues should be migrated to GitHub issue
    ** e.g. Migrate all unresolved issues 
 * Set an operational policy for version/metadata management
    ** Kubernetas's and Apache Airflow's method looks good to me
    ** Map current JIRA metadata to GitHub milestones/labels
    ** ... needs some trials and errors with a sandbox repository
 * Prepare migration scripts
 * Enable GitHub issue (raise an issue on INFRA)
 * Set a schedule for migration

Thanks for thorough research! I propose to skip bulk migration of Jira issues and instead bulk comment on all open JIRAs, prompting the reporter or assignee to take whatever action they see fit. Some will choose to migrate, others will finalize the feature in JIRA, quite some will probably be closed as won't do, and some will just remain open/stale/don't care. No history will be lost, we can still refer and link to historic Jira issues, as long as ASF keeps Jira alive.

Hi [~janhoy], thanks for your suggestion.

"Migrate no issues and make a fresh start" is definitely an option, on the other hand, many issues that are worth revisiting may remain Jira forever - I feel a bit sorry for them. If unresolved issues are on GitHub (even just the title and description) from the start, possible contributors will be able to browse/search them. However, I think we can discuss it later.

One feature I couldn't find out in GitHub issue that is naturally equipped in Jira is the parent-child issue hierarchy. We can have an umbrella issue and tie any number of sub-issues to it with Jira but cannot with GitHub issue; I imagine "GitHub Project" is used for such issue grouping purpose (haven't used it) though, it'd be too much for us I think.

I don't think this is a problem. You just create a description with a bullet list and reference related issues - they do show up in mentions, I think this is sufficient.

Sure - it's not a big problem I think. Except for some minor functional gaps like this, I don't see any technical blocker for migration.

The "Project" grouping could for sure be used for larger pieces of work which we know will span multiple PRs. See Airflow using it for their AIP improvement proposals https://github.com/apache/airflow/projects/12

Thanks, it looks like a plain Kanban Board. I know it, I'm not sure Lucene people like it though.

Vote thread:

[https://lists.apache.org/thread/124nfzjmz2vqtw7kl6xohd2jct57m6tr]

Vote count:

[https://docs.google.com/spreadsheets/d/1MnRO-Kfbglj00liFDqaboyAvseI19_jWj5QwxuLiXWE/edit?usp=sharing]

 

 

Thanks [~tomoko] for driving this discussion/vote!  I will now remove the trailing {{?}} from the issue title :)

 

For version control, there are two considerations.

1. Fix Version(s)

We have two options: Milestone or Label. One important difference between them is that an issue can have only one milestone but multiple labels. The other difference would be that while Milestone is special metadata, labels are just flexible text tags for searching. I'm personally fine with Milestone - we don't release a bug fix or improvement in multiple versions anyway. We don't have two CHANGES entries for one issue; if we resolve an issue in "10.0.0" and "9.3.0" the CHANGES entry appears only in Lucene 9.3.0's section. 
If there are other perspectives, would you share your thoughts on it.

2. Affects Version(s)

35% of unresolved issues have this field. Maybe we could have issue labels such as "affectsVersion:9.3.0". I have never used this metadata field and I myself have no problem with omitting this in GitHub. Is there anyone who has thoughts on it?

-- 
Aside from versions, I'm not fully sure about how to port the "Priority" field (Blocker, Critical, Major, Minor, Trivial). It's a mandatory field in Jira but there seem no clear standards on how to set a priority except for "Blocker". Should we have this also in GitHub as a mandatory label, or should we have this as an optional one, or perhaps can we omit this in GitHub if developers/committers don't really take care of this?

 

> I've added a few bullet points that script could/should handle under LUCENE-10557, hope you don't mind. If you place these script(s) in the open then perhaps indeed we could try to collaborate and see what can be done.

Thanks for your suggestions, Dawid. I'd move the conversation to this issue from the mail list. I think we'll be able to handle the requirements (cross-issue links, and so on) in some ways. I started work on LUCENE-10622 and added the link to the sandbox repository where the migration scripts (early draft) were pushed.

For what it's worth, LUCENE-1 will be migrated something like this. Although the formatting and look-and-feel could be improved a bit, it would not be drastically changed in essentials. We cannot simulate Jira issues on GitHub. e.g.; it is not allowed to tweak the issue reporter and timestamp (very basic metadata to me), so they have to be embedded in the issue description as free texts. I'll continue to work on though - does this really meet your expectations, Mike McCandless and other folks who argue to preserve all issue history in GItHub?
https://github.com/mocobeta/sandbox-lucene-10557/issues/19

I've verified that searches for old issue numbers seem to work:
https://github.com/mocobeta/sandbox-lucene-10557/search?q=%22LUCENE-1%22+in%3Atitle&type=issues

I'm more familiar with the "hierarchical" tags like "affects/xyz" or "type/bug" but I can live with the comma version. Good to have some of the metadata transferred as well, even as a plain text content in the issue description.

As for User ID alignment, it'd be great if we can map the reporter/assignee/commenter to correct GitHub accounts. I just wanted to note that there is a trivial but very practical concern for me - we have to "mention" the accounts in the issue description/comment to create a hyperlink (we can't create resources on behalf of the original authors). I think we don't want to receive a huge volume of notifications from old issues. There could be a tip or workaround, otherwise we will not be able to create real links but just have markups like`@mocobeta`.

I browsed through several JSON dumps of Jira issues. These are some observations.
 - It'd be easy to extract various metadata of issues (reporter id, status, created timestamp, etc.)
 - It'd be easy to extract all linked issue ids and sub-task ids
 - It'd be easy to extract all attached file URLs
 -- Can't estimate how many hours it will take to download all of the files
 - it'd be easy to extract all comments in an issue
 -- -Perhaps pagination is needed for issues with many comments- Comments in an issue can be retrieved all at once.
 - We can apply parser/converter tools to convert the jira markups to markdown
 -- I think this can be error-prone
 - It'd be cumbersome to extract GitHub PR links. The links to PRs only appear in the github bot's comments in the Work Log.

On GitHub side, there are no difficulties in dealing with the APIs.
 - It'd be a bit tedious to work with milestones via APIs. They can't be referred to by their text. Id - text mapping is needed
 - -It might need some trials and errors to properly place attached files in their right place- This is not possible (we can't programatically migrate attachment files to GitHub).

As for the cross-link conversion and account mapping script:
 - To "embed" github issue links / accounts in their right place (maybe next to the Jira issue keys / user names), we need to modify the original text. This can be tricky and the riskiest part to me. Instead of modifying the original text, we could just add some footnotes for the issues/comments - but it could considerably damage the readability.

Yes it should be possible with a set of small scripts. Maybe one problem is that it'd be difficult to detect conversion errors/omissions and we can't correct them ourselves if we notice migration errors later (it seems we are not allowed to have the github token of the ASF repository).

I was trying to figure out how to upload attachments (patches, images, etc.) to Github issue with API for hours. {*}There is no way to upload files to GitHub with REST APIs{*}; it is only allowed via the Web Interface. If you want to programatically port attachment files in Jira to GitHub, you have to  [commit the files to the repository|https://docs.github.com/en/rest/repos/contents].

See [https://github.com/isaacs/github/issues/1133]

 

Maybe GitHub's API call rate limit would be another consideration.
{quote}If you're making a large number of {{{}POST{}}}, {{{}PATCH{}}}, {{{}PUT{}}}, or {{DELETE}} requests for a single user or client ID, wait at least one second between each request.
{quote}
[https://docs.github.com/en/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits|https://docs.github.com/en/rest/overview/resources-in-the-rest-api#secondary-rate-limits]

We can't really "bulk" import to GitHub. Every issue and comment has to be posted one by one and between the API calls, at least one-second sleep is required.

I encountered this rate limit many times - actually it seem that the rate limit is strictly monitored.

 

Finally catching up over here!

*Thank you* [~tomoko] for tackling this!

I agree testing what is realistic/possible will enable us to make an informed decision.  I really hope we are not stuck asking all future developers to fallback to Jira and use two search engines.

To make Jira effectively read-only post-migration, Robert suggested we could use Jira's workflow controls to make a "degraded" workflow that does not allow any writes to the issues (creating new issues, adding comments, changing milestones, etc.).  We can add that to the (draft) migration steps.

For committers, [https://id.apache.org|https://id.apache.org/] has the mapping of apache userid to GitHub id, though I'm not sure if that is publicly queryable.  And as [~msokolov@gmail.com] pointed out on the dev list thread, the [GitHub Apache org might also have it|https://github.com/apache].

Did you see/start from [the Lucene.Net migration tool|https://github.com/bongohrtech/jira-issues-importer/tree/lucenenet]? This is what [~nightowl888] pointed to (up above).

Those few migrated issues look like a great start!
{quote}{*}There is no way to upload files to GitHub with REST APIs{*}; it is only allowed via the Web Interface.
{quote}
Wow that is indeed disappointing.  I wonder whether GitHub's issue search also search attachments?  Does Jira's search?
 

I'm still not fully sure if we can/should Jira completely read-only, maybe we'll have a discussion in the mail list later.
{quote}bq. Did you see/start from [the Lucene.Net migration tool|https://github.com/bongohrtech/jira-issues-importer/tree/lucenenet]?
{quote}
No - Lucene.Net and Lucene have different requirements and data migration/conversion scripts like this are usually not reusable.  I think it'd be easier to write a tool that fits our needs from scratch than to tweak others' work that is optimized for their needs. (It's not technically difficult - a set of tiny scripts are sufficient, there are just many uncertainties.)

{quote}I'm still not fully sure if we can/should Jira completely read-only, maybe we'll have a discussion in the mail list later.
{quote}
OK that's fair – I just think having two writable issue trackers at the same time is asking for disaster.  It really should be an atomic switch from Jira to GitHub issues to close that risk.  But we can defer that discussion until we agree the migration is even the right choice.  Maybe we must decide to live with Jira forever instead of hard switching to GitHub issues....
{quote}{quote}{quote} Did you see/start from [the Lucene.Net migration tool|https://github.com/bongohrtech/jira-issues-importer/tree/lucenenet]?
{quote}{quote}
No - Lucene.Net and Lucene have different requirements and data migration/conversion scripts like this are usually not reusable.  I think it'd be easier to write a tool that fits our needs from scratch than to tweak others' work that is optimized for their needs. (It's not technically difficult - a set of tiny scripts are sufficient, there are just many uncertainties.)
{quote}
OK that's fair.

I just wanted to make sure you were aware of how Lucene.Net accomplished their Jira -> GitHub Issues migration so we could build on that / improve for our specific requirements.  We are not the first Apache project that feels the need to 1) migrate from Jira -> GitHub issues, and 2) preserve the history.  So let's learn from past projects like Lucene.Net and others.

Seems converting Jira "table" markup to Markdown is error-prone. e.g. [https://github.com/mocobeta/sandbox-lucene-10557/issues/188]

I'm not sure the cause - maybe dumped data via Jira API doesn't preserve the original text, maybe there were some breaking changes/incompatibilities in Jira language, or maybe there is a bug in the converter library ([https://github.com/catcombo/jira2markdown]) the script relies on. 

We have lots of tables in Jira comments and important information is there, it's a minor blocker to me if we don't figure out a way to correctly convert tables to Markdown.

{quote}Seems converting Jira "table" markup to Markdown is error-prone
{quote}
It looks like the converter didn't even recognize that there was a Jira table in that comment, maybe because extra whitespace was inserted on the Jira export?  Or, perhaps Jira recognizes a table even with excessive newlines inserted, but the converter does not?  Might be a simple addition of {{\r\n}} into the regexp the converter is using.  Do you have the raw Jira exported text for this issue?  The converter can be invoked from the command line for fast debugging / iterating.

I suppose we cannot ask GitHub to set the creation timestamp?  I.e. it always creates an issue "right now"?

[~tomoko] could you share the source code of the import tool you are working on?  Maybe post it in a personal public GitHub repo?  We call can try to make PRs / review ;)

[~mikemccand] The script has been pushed [here|https://github.com/mocobeta/sandbox-lucene-10557] and I shared it in the Lucene dev mail list with some examples - could you please check it?

Also, as I wrote in the latest post in the dev list, I'll rewrite the script with "Issue Import" API and will let you know the progress/result (next week) - so please wait to review for a little while.

Basic requirements for migrating old issues that were confirmed so far:
 * (/) All "texts" (issue descriptions and comments) are migrated.
 * (/) All major metadata (issue types, versions, components, etc.) are preserved as issue labels.
 * (/) Issue and comment original created timestamps are preserved.
 * (x) Issue and comment original reporters/authors are NOT preserved.
 ** There's no way to modify GitHub issue/comment reporters/authors. Still can be noted in plain texts - @ mentions or full name
 * (!)  Jira markup is converted into Markdown for rendering.
 ** There are many conversion errors and need close investigation.
 * (x) "attachments" (patches, images, etc) cannot be migrated with basic GitHub API functionality.
 ** There could be workarounds; e.g. save them in another github repo and rewrite attachment links to refer to them.
 * (/) Issue assigners are preserved if the corresponding GitHub account is given.
 * (/) All Jira cross-issue links (LUCENE-XXXX) are mapped into GitHub cross-links (#YYYY).
 * (/) Jira user IDs are mapped into GitHub account mentions. NOTE: Mapping should be prepared/generated.
 * (!) Mentions to Jira IDs in issue descriptions or comments are possibly mapped to GitHub mentions - haven't tried yet.

Current consideration to me is how to handle attachments. While there should be workarounds, it'll be a major work. If it's a "minimum" requirements, personally I think we shouldn't proceed with the migration. 

As a reference I will migrate existing all issues into a test repository in shortly. Hope we can make a decision by looking at it - I mean, I'll be not able to further invest my time in this PoC.

I'll post the PoC migration result to the dev list to ask if we should proceed with it or not next week.

I opened an INFRA issue https://issues.apache.org/jira/browse/INFRA-23421

{quote}  Jira markup is converted into Markdown for rendering.
 * There are many conversion errors and need close investigation.{quote}
This seems perhaps solvable, relatively quickly – the conversion tool is open-source right?  Tables seem flaky ... what other markup?  I can try to dive deep on this if I can make some time.  Let's not rush this conversion.
{quote}"attachments" (patches, images, etc) cannot be migrated with basic GitHub API functionality.
 * There could be workarounds; e.g. save them in another github repo and rewrite attachment links to refer to them.{quote}
I thought the "unofficial" migration API might support attachments?  Or are there big problems with using that API?
{quote}As a reference I will migrate existing all issues into a test repository in shortly. Hope we can make a decision by looking at it - I mean, I'll be not able to further invest my time in this PoC.

I'll post the PoC migration result to the dev list to ask if we should proceed with it or not next week.
{quote}
+1!  Thank you for pushing so hard on this [~tomoko]!  Let's not rush the decision ... others can try to push your PoC forwards too to improve the migration quality.  This is worth the one-time investment.  And hey, maybe we enable something that future Jira -> GitHub issues migrations can use.

Once we have done this: Should we rewrite CHANGES.txt and replace all LUCENE-xxxx links to GITHUB#yyyy links?

I toyed with attachments a bit.
 * I've modified Tomoko's code a bit so that it fetches attachments for each issue and places is under {{{}attachments/LUCENE-xyz/blob.ext{}}}.
 * I fetched about half of the attachments from Jira and they total ~350MB. So they're quite large but not unbearably large.
 * I created a separate test repository ([https://github.com/dweiss/lucene-jira-migration]), with a subset of attachment blobs and an example issue ([https://github.com/dweiss/lucene-jira-migration/issues/1]) that links to them via gh-pages service URLs. Seems to work (mime types, etc.).
 * The test repository has an orphaned (separate root) branch for just the attachment blobs but they're still downloaded when you clone the master branch (which I kind of hoped could be avoided). This means that we'd have to either ask infra to create a separate repository for the ported attachments or keep those attachments in the main Lucene repository (and pay the price of an extra ~1GB of download size when doing a full clone).
 * I didn't check for multiple attachments with the same name (perhaps it's uncommon but definitely possible) - these would have to be saved under a subfolder or something, so that they can be distinguished.
 * A mapping of original attachment URLs and new attachment URLs could also be preserved/ written.
 * Since the attachments are a git repository, they should be searchable but for some reason it didn't work for me (maybe needs time to update the index).

This is just an experiment, I don't mean to imply it has to be done (or should). I was just curious as to what's possible.

[~mikemccand]

bq. This seems perhaps solvable, relatively quickly – the conversion tool is open-source right?  Tables seem flaky ... what other markup?  I can try to dive deep on this if I can make some time.  Let's not rush this conversion.

Besides tables, even simple bullet lists are broken. I haven't closely looked at it yet, but I suspect there may be problems in the source text (Jira dump). It could be easily fixed once we find the root cause.

The script uses this converter https://github.com/catcombo/jira2markdown for PoC; if the cause of the broken markdowns is the tool's bug, there could be other tools or of course, we could write our own parser/converter from the jira markup spec.
https://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=all

bq. I thought the "unofficial" migration API might support attachments?  Or are there big problems with using that API?

The unofficial import API does not support binaries, you can import only "texts" to GitHub with official or unofficial APIs. They have to be stored in other places, maybe outside the main repository (a file storage or another repository).

bq. Let's not rush the decision ... others can try to push your PoC forwards too to improve the migration quality.  This is worth the one-time investment.  And hey, maybe we enable something that future Jira -> GitHub issues migrations can use.

I understand we can't push others to make a decision though, a progress report could be useful since I think we have not reached any conclusion yet.
As for "others can try to push your PoC forwards too to improve the migration quality", yes it could happen but to be honest I don't expect there are other people who want to be involved in this task.

[~uschindler]

bq. Once we have done this: Should we rewrite CHANGES.txt and replace all LUCENE-xxxx links to GITHUB#yyyy links?

I'm not sure if it should be done. Just for your information the current {{changes2html.pl}} supports only Pull Requests, so the script should be changed if we want to mention GitHub issues in CHANGES. (I have little experience with perl, but I'll take a look if it's needed. Maybe we should also support issues near future.)

[~dweiss]

bq. I created a separate test repository (https://github.com/dweiss/lucene-jira-migration), with a subset of attachment blobs and an example issue (https://github.com/dweiss/lucene-jira-migration/issues/1) that links to them via gh-pages service URLs. Seems to work (mime types, etc.).

Do we need a git repository at all? We won't need version control for the files. Is a file storage sufficient and easy to handle if we can have one?

bq. This means that we'd have to either ask infra to create a separate repository for the ported attachments or keep those attachments in the main Lucene repository (and pay the price of an extra ~1GB of download size when doing a full clone).

This is actually the main concern to me. Unfortunately I don't think I'll be able to explain our needs and request support from infra team. I'm sure I won't be able to be a good negotiator for this even if I want to. We need another person if we want to pursue pulling up all attachments from jira.

As for the attachments, just a rough idea... perhaps we could have these files in our personal space under "https://home.apache.org/~user"? I have never used this space so "https://home.apache.org/~tomoko" is still empty. I don't know what maximum storage size is allowed per user, if it is too small to store whole data, we could distribute them to multiple accounts.

> Do we need a git repository at all? We won't need version control for the files. Is a file storage sufficient and easy to handle if we can have one?

My hope was that these attachments could be stored in the primary git repository for convenience - keeping the historical artifacts together and having them served for free via github's infrastructure. It's also just convenient as it can be modified/ updated by multiple people (and those same people can freeze the repository for updates, once the migration is complete). Having those artifacts elsewhere (on home.apache.org) lacks some of these conveniences but it's fine too, of course.

Also, I don't think infra will have any problem in adding a repository called "lucene-archives" or something like this. I can ask if we decide to push in this direction.

{quote}
bq. Once we have done this: Should we rewrite CHANGES.txt and replace all LUCENE-xxxx links to GITHUB#yyyy links?

I'm not sure if it should be done. Just for your information the current {{changes2html.pl}} supports only Pull Requests, so the script should be changed if we want to mention GitHub issues in CHANGES. (I have little experience with perl, but I'll take a look if it's needed. Maybe we should also support issues near future.)
{quote}

Actually we do not need extra code for this. As Github issue numbers and pull requests share the same increasing integer space, {{GITHUB#1234}} is always either a PR or an issue. So there is no problem in converting those. If we decide to move all historic issues to Github, we should also update the file.

Github actually does the right thing when you create a link to an issue or PR, it will redirect to the canonic URL. I would prefer to use "issue/XXXX" in the URL. If it is a PR then github redirects.

I would leave those issue numbers as they were - like I said, these issue numbers are widely mentioned everywhere (mailing list archives, etc.) and I don't think they should be replaced. Spring redirects Jira URLs to their corresponding ported github issues - this is a much better resolution, I think.

bq. I didn't check for multiple attachments with the same name (perhaps it's uncommon but definitely possible) - these would have to be saved under a subfolder or something, so that they can be distinguished.

We'll be able to save multiple attachments with the same filename, but I think the reference disambiguation is almost impossible (filename is the unique key for an attachment in an issue). Jira itself creates only one link (to the latest one) for a filename in the issue's attachment list. I think we can archive the latest file only per filename and safely omit old files, it would not practically harm anything to me - I might miss something though.

If we try to allow downloading multiple versions of the files with same name via github (unlike jira itself), the ambiguity of the references will immediately come up,  I think we can't cope with it...

bq. We'll be able to save multiple attachments with the same filename, but I think the reference disambiguation is almost impossible (filename is the unique key for an attachment in an issue).

The older versions have a different database id, so the link is different. The filename is just for human consumption. Where it is ambiguous is inside comments. The comments referring to a file are always pointing to latets version.

This was also a long-standing issue in JIRA and thousands of people complained (I maintain a huuuuuuuge JIRA instance). They "solved" it in later versions by appending numbers to filename in later versions - but only during upload. Internally, the filename is still not a unique key. In addition you can still create duplicates using JIRA's API.

bq. Where it is ambiguous is inside comments. The comments referring to a file are always pointing to latets version.

Yes, so - It'd be more confusing if we allow downloading old files...? There will be inconsistencies between the comments and the attachment (in timestamp). 

bq. Where it is ambiguous is inside comments. The comments referring to a file are always pointing to latets version.

Yes, so - It'd be more confusing if we allow downloading old files...? There will be inconsistencies between the comments and the attachment. 

While we can keep all versions of each attachment though, perhaps we cannot (or shouldn't) create links to old ones I think.

Yes, that's exactly the problem of JIRA: https://jira.atlassian.com/browse/JRASERVER-2169

I would do this for attachments.
- Keep the latest version only.
- Next to the attachment link, add the count of the files with the same name.
{code}
Attachments
- LUCENE-XXXX.patch (4 versions)
{code}

Since I don't see the large merit to keeping all attachments with duplicate filenames if users cannot download them anyway. It's good for completeness to keep all versions though.

e.g. https://github.com/mocobeta/migration-test-2/issues/123

I would only print the "(versions: 1)" if it's > 1.

I think I have addressed attachments. The links in comments are also replaced with the correct urls that point to the attachment files (in another repo).
 - [https://github.com/mocobeta/migration-test-2/issues/126]
 - [https://github.com/mocobeta/migration-test-2/issues/127] (pictures should be directly rendered in the comment areas; there are conversion errors and should be fixed.)

> I would only print the "(versions: 1)" if it's > 1.
 
Fixed this.

Commit 64321114e1d8579e52376a97f5eb3e4cd13338e8 in lucene's branch refs/heads/main from Tomoko Uchida
[ https://gitbox.apache.org/repos/asf?p=lucene.git;h=64321114e1d ]

LUCENE-10557: temprarily enable github issue (#988)



I asked INFRA to create a new repo for archiving attachments (INFRA-23426) and was guided to the toolset for self-service purposes.

Seems a new repo can be created here. I can't fill a mandatory field "Project" (I see "lucene" in the list but can't select it).
[https://gitbox.apache.org/boxer/?action=newrepo]

I'm not sure this is due to my account role (committer). Could anyone take a look at the tool - and if possible, create a new repository named {{{}lucene-jira-archive{}}}?

Hi Tomoko, I am able to create repos:

!screenshot-1.png|width=720!

Will now create the repo.

Done.
{code:java}
Your repository has been created and will be available for use within a few minutes.
Your project is available on gitbox at: https://gitbox.apache.org/repos/asf/lucene-jira-archive.git
Your project is available on GitHub at: https://github.com/apache/lucene-jira-archive.git
User permissions should be set up within the next five minutes. If not, please let us know at: users@infra.apache.org {code}

LOL. I got message that it already exists. :-)

!https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/screen-shot-2019-05-13-at-12-08-25-1557746089.jpg?resize=480:*!

[~uschindler] [~dweiss] thank you both! I was able to push the first commit. [https://github.com/apache/lucene-jira-archive]

Looks like watchers are inherited from apache/lucene ...

I set [https://github.com/apache/lucene-jira-archive/blob/main/.asf.yaml] not to send notifications to mail groups.

Looks like all updates in the repository are still noticed in dev@lucene.apache.org (initial setting when creating the repo?). Could anybody mute this?

[https://gitbox.apache.org/schemes.cgi?lucene-jira-archive]

 

Something seems wrong. According to [https://cwiki.apache.org/confluence/display/INFRA/Git+-+.asf.yaml+features,] the update should be approved via an e-mail sent to private mailing list - I don't see any such email yet.

!image-2022-06-29-13-36-57-365.png|width=869,height=228!

Thanks for the information. Something in the automation system could be delayed? I'll check the status page later again.


bq. Looks like all updates in the repository are still noticed in dev@lucene.apache.org (initial setting when creating the repo?). Could anybody mute this?

dev@lucene.apache.org and commits@lucene.apache.org were selected as default during creating repo (see my screenshot above). Actually the PR/issue list should have been issues@lucene.apache.org, but for this case it should be completely silent.

I think there seems to be some delay, maybe ask on Slack's infra channel.

[~mikemccand] Just for your information, we now have a public ASF repository [https://github.com/apache/lucene-jira-archive] for the migration and I pushed the migration scripts there to develop/archive it under Apache. I also opened a few issues for it.
{quote}Tomoko Uchida could you share the source code of the import tool you are working on? Maybe post it in a personal public GitHub repo? We call can try to make PRs / review
{quote}

According to the infra, you cannot set your personal email address in the repos' notification setting. I changed the address to issues@. 
https://github.com/apache/lucene-jira-archive/blob/main/.asf.yaml

Would you please see private@ list if the notification mail for review was sent (or will have been sent in shortly) there this time?

{quote}I think I have addressed attachments.
{quote}
Woot!  I love seeing the attached patch file rendered inline via GitHub like that (versus downloading to my local disk in Jira)!  This is awesome progress – thanks [~tomoko]!
{noformat}
Michael McCandless Just for your information, we now have a public ASF repository https://github.com/apache/lucene-jira-archive for the migration and I pushed the migration scripts there to develop/archive it under Apache. I also opened a few issues for it. {noformat}
YAY!

So cool!  I asked for all (open and closed) issues from [~tomoko]'s latest migration, [sorting by oldest|https://github.com/mocobeta/sandbox-lucene-10557/issues?q=is%3Aissue+sort%3Acreated-asc] and I see all the original issues (LUCENE-1, -2, -3, etc.):

 

!Screen Shot 2022-06-29 at 11.02.35 AM.png!

[~tomoko], this came to private@lao:
{quote}
Betreff: 	Notification schemes for lucene-jira-archive.git updated
Datum: 	Wed, 29 Jun 2022 14:28:15 -0000
Von: 	GitBox <gitbox@apache.org>
Antwort an: 	private@lucene.apache.org
An: 	private@lucene.apache.org

The following notification schemes have been changed on lucene-jira-archive by tomoko:

- adding new scheme (commits): 'commits@lucene.apache.org'
- adding new scheme (issues): 'issues@lucene.apache.org'
- adding new scheme (pullrequests): 'issues@lucene.apache.org'
- adding new scheme (jira_options): 'link label worklog'


With regards,
ASF Infra.
{quote}

When we do the migration, we should use some "generic" user / bot account? Otherwise we have "mocobeta" linked on all issues :-) Maybe theres an account for doing this by INFRA. They have tokens and some bot user in Github that could be used for the migration. We should contact them if they can give us a token (maybe they can create a token just for Lucene).

I'd really recommend to talk in Slack with them, using interfaces is a bit slow in discussing such ad hoc solutions.

Maybe a solution to silence all mails during migration would be to use a fake-address below {{@lucene.apache.org}} like {{noreply@lucene.apache.org}}. The limitation by the automation at infra is possibly limited to the mailing list domain. and {{mocobeta@apache.org}} has wrong mail domain.

bq. Tomoko Uchida, this came to private@lao:

Thanks [~uschindler]! Then we'll be able to use the repo to improve migration scripts.

bq. noreply@lucene.apache.org.

Sounds good to me - I'll update the yaml once again.

bq. When we do the migration, we should use some "generic" user / bot account? Otherwise we have "mocobeta" linked on all issues

We can't run the migration job on ourselves (and I don't want to use my account for it). Actual migration will be done by an INFRA's account. See Lucene.NET project: https://github.com/apache/lucenenet/issues/280 - seems it is still a personal account.

bq. We can't run the migration job on ourselves (and I don't want to use my account for it). Actual migration will be done by an INFRA's account. See Lucene.NET project: https://github.com/apache/lucenenet/issues/280 - seems it is still a personal account.

Chris Lambertus (fluxo) is his private account. I don't like to use that account, too. I would prefer some generic "bot" account :-(

noreply@lao did not work. This time it gave an error message!

Maybe we can ask them to manually disable notifications during the import.

I changed the notification mails to noreply@ so that we can silence them. Could you check the notification in private@ again please, [~uschindler]? Thanks.
https://github.com/apache/lucene-jira-archive/commit/bbcc1b3a77be635b82942971150f37a076ab26b5

bq. Chris Lambertus (fluxo) is his private account. I don't like to use that account, too. I would prefer some generic "bot" account

I think it's against GitHub's terms of policy to have multiple free accounts. I'm not sure it is possible though if we have a paid organization account that is not tied to a person, we could ask infra if we use it for the migration?

bq. noreply@lao did not work. This time it gave an error message!

Hmm, then I'll revert the change.

bq. Maybe we can ask them to manually disable notifications during the import.

In the recent migration test where all issues are migrated, we verified that notifications are not sent when executing migration scripts (importing issues and updating issues/comments), thanks to Houston and Dawid.

We can't use an arbitrary github account for migration because importing/creating issues with GitHub API requires not only the access token but also admin access to the repo - it is not allowed to have for developers. 

I found this issue is an excellent sample for testing - this includes:

# Cross-issue link
# Pull Request link
# External link (to an image)
# Attachments (images) and references to them
# Mention to Jira IDs
# Bullet list
# Code block
# Quote

So I would add a numbered list and a fake table in this comment to make this more convenient for testing. Please ignore this comment.

||Jira||GitHub||
|LUCENE-1|#251|
|LUCENE-2|#252|
|LUCENE-3|#253|

I know from the past that INFRA had some video conferences with Github representatives, so ASF is not just "some arbitrary customer". I think there was a lot of discussions going on. The LUCENE.NET import was long before they had close contact to Github.

I would really prefer to keep all orginal contributors, the change of names to some private account is a real blocker to me. When we can't modify the comment/issue creator mail address to use the official ASF one of the person or use some generic bot account, I would vote now -1 to the migration.

P.S.: Spring used a generic user for the import "spring-projects-issues": https://github.com/spring-projects/spring-framework/issues/created_by/spring-projects-issues

Spring also have a cool redirector in their webserver. It only redirects if you don't have some special param: https://jira.spring.io/browse/SPR-17639?redirect=false

And they also added a comment at end of all their issues (also by the bot).

bq. P.S.: Spring used a generic user for the import "spring-projects-issues"

Yes, I like it. It should be an organization account - maybe we can ask infra if we have one?

I think it looks like we have too many topics to deal with in one issue? We can break up them into sub-jira tasks though, I created a few github issues in the lucene-jira-archive repo. 
For example https://github.com/apache/lucene-jira-archive/issues/4 ("Which GitHub account should we use for migration?")

Notifications were sent to issues@ this time. Looks fine.

I'm sorry for the noise - Jira's special emojis should be converted to corresponding Unicode emojis. This is a test post to make sure the mapping is correct.
(y) (n) (i) (/) (x) (!) (+) (-) (?) (on) (off) (*) (*r) (*g) (*b) (*) (flag) (flagoff)

Overall, I think we have [a relatively safe migration strategy|https://github.com/apache/lucene-jira-archive/issues/7] on GitHub side (many bug fixes and tasks still remain to be done).

On Jira side, I would do just two things.

1. Show some texts that say "Jira is deprecated" when opening Jira issues.
2. Add comments to each Jira issue that say "Moved to GitHub. You can find corresponding GitHub issue by Jira issue key.", or if it is easily possible, "Moved to GitHub <URL>."

It may not fulfill everyone's request/hope though, I already have too much on my plate and can't really expect others' hands on that. Please feel free to work on further improvements on Jira side, if you think it should be done for the move to GitHub (making Jira read-only, redirecting to GitHub from Jira, and so on).

[TEST] This was moved to GitHub issue: https://github.com/mocobeta/migration-test-3/issues/196.

bq. [TEST] This was moved to GitHub issue: https://github.com/mocobeta/migration-test-3/issues/196.

Oooh that looks promising!!

OK I am able to administer our Jira instance.

There are some wrinkles – apparently because some of our workflows are shared across two projects (Lucene and Solr), the workflows themselves are read-only!  So we cannot change them unless we work the workflows.

But there is much discussion about this problem, e.g.: [https://community.atlassian.com/t5/Jira-questions/Fastest-way-to-make-JIRA-read-only/qaq-p/1261492]

I'll try to find the simplest way that works for us.

Hi [~tomoko] – I added you as a Jira Administrator so you can poke around if you want to.

But I'll still try to figure out how to make Jira read-only.

[~mikemccand] thank you, I'm now able to edit the configuration. However, I am struggling with figuring out how to tweak the issue creation panel. I just wanted to set a placeholder or default value to the "Description" field...

it seems "Project admin" is not really allowed to do meaningful things, almost all components are shared between projects, and only Jira administrators can change them.

OK hmm we will likely need Infra's help for this then.

I realized that the Infra team makes Jira projects read-only sometimes (e.g. when they retire / expire to Attic): https://issues.apache.org/jira/browse/INFRA-23440?page=com.atlassian.jira.plugin.system.issuetabpanels%3Aall-tabpanel

I'll send an email to Infra to see if they have some clean/simple way to do this at the start of our migration process.

Though, one small wrinkle we have is that we will need to append one final comment to all Jiras (what [~tomoko] has been iterating on recently!) after the GitHub issue assignment is known ... so we can't make it completely read-only until after the migration.  Tricky.  There will be a window where users may update some Jiras mid-migration.

The migration plan takes into account some moratoriums (three days, I think).

[https://github.com/apache/lucene-jira-archive/issues/7]
{quote}There will be a window where users may update some Jiras mid-migration.
{quote}
I don't think it is a big problem. We'll be able to easily detect issues/comments that are created during migration and add follow-up comments to encourage the authors migrate the comments manually.
{quote}I'll send an email to Infra to see if they have some clean/simple way to do this at the start of our migration process.
{quote}
Again - I don't think we have had any discussion about making Jira read-only in the mail list. I don't have strong opinion on that, but I am against it if we are going to do so without giving others time to consider / chance to express opinions on this.

{quote}Again - I don't think we have had any discussion about making Jira read-only in the mail list. I don't have strong opinion on that, but I am against it if we are going to do so without giving others time to consider / chance to express opinions on this.
{quote}
OK – I'll start a [DISCUSS] and then [VOTE] thread to reach consensus on this.

Commit 8938e6a3fab56e1037feb86db398d71e269dcf34 in lucene's branch refs/heads/main from Tomoko Uchida
[ https://gitbox.apache.org/repos/asf?p=lucene.git;h=8938e6a3fab ]

LUCENE-10557: Add GitHub issue templates (#1024)



Commit 781edf442b200145e4fc3fc59de554b7a0c0b57b in lucene's branch refs/heads/main from Tomoko Uchida
[ https://gitbox.apache.org/repos/asf?p=lucene.git;h=781edf442b2 ]

LUCENE-10557: Refine issue label texts (#1036)



[TEST] This was moved to GitHub issue: [#10626|https://github.com/mocobeta/forks-migration-test-2/issues/10626].

The work has already been carried over to https://github.com/apache/lucene-jira-archive.
I'm closing this.


This issue was moved to GitHub issue: [#11593|https://github.com/apache/lucene/issues/11593].

