Some convenience improvements to in-JVM dtest that are useful across versions that I needed while working on CASSANDRA-16144

* Add support for changing schema with stopped nodes.

* Make it simpler to modify nested configuration items by specifying Yaml fragments 

Branches / CircleCI

[2.2|https://github.com/jonmeredith/cassandra/tree/C16152-2.2] [CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C16152-2.2]
[3.0|https://github.com/jonmeredith/cassandra/tree/C16152-3.0] [CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C16152-3.0]
[3.11|https://github.com/jonmeredith/cassandra/tree/C16152-3.11] [CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C16152-3.11]
[trunk|https://github.com/jonmeredith/cassandra/tree/C16152-trunk] [CircleCI|https://app.circleci.com/pipelines/github/jonmeredith/cassandra?branch=C16152-trunk]

Reviewing the patch in {{trunk}} as the first step. 

Overall LGTM. 

2 nits
* the ymal deserializing code can be reused in the {{YamlConfigurationLoader}}. I added this [commit|https://github.com/yifan-c/cassandra/commit/2b97ddfe5afd363aede1e48f75ee7d614a3d289c]. Please see if you like it. 
* add a simple test to show the ignore stopped instance is working just like what you did for {{useYamlFragmentInConfigTest}}

The dtest failures in the CI do not look related to the patch. The patch mainly enhances the JVM Dtest. 

Thanks for the feedback, I liked your commit and think it makes things better. I've applied it to trunk only as I wanted to limit maintenance of older releases to the minimum.

I've added the requested test and found an issue with running while node1 is down. Thanks for asking for the test.

I also added checks to the message filters to make sure we don't get delegate test-related errors/noise sending messages to down nodes.

I'll re-check CircleCI and try and round up a committer to look over it and... commit.

Glad it helps. 

I took a look at the newer commits. It seems that we are taking advantage of {{Optional.get()}} in {{AbstractCluster#schemaChange(String, boolean)}} intentionally. Wondering if it gives better exception by throwing an {{IllegalStateException}} with the message saying "all nodes are down". Otherwise, I am +1 on the trunk patch. 

I knew it would throw intentionally, but we'll only write this code once and use it countless times so will improve the exception. Good call.

Â 

+1 

[~dcapwell] could you take a 2nd look?

Do you think it might be useful to add an {{IInstanceConfig#set}} overload that could allow us to do someting like the following code snippet? That'd concatenate kvps into yaml. 

{code}
.withConfig(c -> c.set("server_encryption_options", 
                                       "keystore", newKeystore,
                                       "truststore", newTruststore)
{code}

I think that would be a nice improvement. I backed off doing the dtest-api release dance as I didn't see enough use-cases in the config to be worth delaying the work backed up behind this.

I've rebased all the branches against recent versions of the cassandra-x.x branches and trunk.

Review

* https://github.com/apache/cassandra/compare/cassandra-2.2...jonmeredith:C16152-2.2#diff-e398a00672550f1911eb13e4d4aa86cbR486 - `coordinator(instance.config().num())` can be simplified to `instance.coordinator()`
* the config changes I am against as they get in the way of other changes we have talked about, so I propose we just do the config change that was talked about before in the context of CASSANDRA-15234

I spoke to [~jmeredithco] about the second comment as its bigger, and worked on a patch to do it but it depends the the Shared annotation added in CASSANDRA-16127

For more context, here is the proposed change to the interface

{code}
.withConfig(c -> c.set("server_encryption_options", ImmutableMap.of( 
                                       "keystore", newKeystore,
                                       "truststore", newTruststore)))
{code}

This aligns with the changes [~e.dimitrova] was working on in CASSANDRA-15234 and makes it so dtest and CassandraDaemon use the same config logic (which also means config migration).

I've updated all four branches to work in the way [~dcapwell] suggested. Each branch has a commit to adjust to the hi-res CircleCI settings and pick the matching branch for each other version to check the upgrade tests.

The errors look like known flakes - the only slightly concerning one is the new JVMDTestTest.modifySchemaWithStoppedNode test failed on 2.2 but it looks like the problem is the executors timed out shutting the node down, rather than an issue with the changes.  I'm rerunning.

Review (all minor/nit)

* https://github.com/apache/cassandra/compare/trunk...jonmeredith:C16152-trunk#diff-19e4d42c9846cd1362ee2f70c66444953892b84c38d5c9c415d42e24de9c88b0R433 Could simplify to 
{code}
public I getFirstRunningInstance()
{
    return stream().filter(i -> !i.isShutdown()).findFirst().orElseThrow(() -> new IllegalStateException("All instances are shutdown"));
}
{code}

* https://github.com/apache/cassandra/compare/trunk...jonmeredith:C16152-trunk#diff-19e4d42c9846cd1362ee2f70c66444953892b84c38d5c9c415d42e24de9c88b0R535 Instance has a coordinator method, so you can call that rather than refetch the instance from the cluster
* https://github.com/apache/cassandra/compare/trunk...jonmeredith:C16152-trunk#diff-321b52220c5bd0aaadf275a845143eb208c889c2696ba0d48a5fc880551131d8R508 comment isn't needed, we don't need to extend the dtest api as we know its always that config type as this is the implementation.

Assuming the tests pass, the patch LGTM; +1.

I'm +1 with these changes too. [~dcapwell] could you commit this?

cool, ill get it started.

CI Results: Yellow, expected errors and a flaky test which didn't fail the second attempt.

Branch: cassandra-2.2
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16152-cassandra-2.2-DDEE3A29-AB50-4AB0-B85B-51BAADBCA0BE
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/125/

Branch: cassandra-3.0
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16152-cassandra-3.0-DDEE3A29-AB50-4AB0-B85B-51BAADBCA0BE
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/126/

Branch: cassandra-3.11
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16152-cassandra-3.11-DDEE3A29-AB50-4AB0-B85B-51BAADBCA0BE
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/127/

Branch: trunk
Circle: https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-16152-trunk-DDEE3A29-AB50-4AB0-B85B-51BAADBCA0BE
Jenkins: https://ci-cassandra.apache.org/job/Cassandra-devbranch/128/


