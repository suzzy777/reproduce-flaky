RB : https://reviews.apache.org/r/16203/

Testing JIRA OOZIE-1624

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 1 line(s) longer than 132 characters
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1383
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testConcurrencyReachedAndChooseNextEligible(org.apache.oozie.service.TestCallableQueueService)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/1008/

Testing JIRA OOZIE-1624

Cleaning local git workspace

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------

Testing JIRA OOZIE-1624

Cleaning local git workspace

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------

Testing JIRA OOZIE-1624

Cleaning local git workspace

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------

Testing JIRA OOZIE-1624

Cleaning local git workspace

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------

Testing JIRA OOZIE-1624

Cleaning local git workspace

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------

We had an incidence where bug in launcher sharelib was causing job failure. We had to issue new release to fix the issue.
With exclusion list we could have provided workaround to user. 

Testing JIRA OOZIE-1624

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 1 line(s) longer than 132 characters
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/2259/

Testing JIRA OOZIE-1624

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 1 line(s) longer than 132 characters
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1624
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testCoordRerunDateNeg(org.apache.oozie.command.coord.TestCoordRerunXCommand)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/2260/

[~puru] reviewed v2 patch.  just one comment,  can we cache regex exclusion pattern to map(something like key:actiontype, value:pattern)? buildConditionalExclusionPatterns is called every time when java action runs, it might be costly.  

bq. can we cache regex exclusion pattern to map
   It should be fine. Since it is called only twice per action (system lib and share lib) and will only be used rarely it should be fine. May be cache as a non-static variable to avoid doing it twice per action and once instead. 

bq. isExclude(fileName, exclusionPattern)
   Please do pattern matching for the entire file name instead of just the filename. For eg: if you have two pig.jar and you want to exclude pig.jar from one directory

bq. One can also exclude sharelib jars by using property action.sharelib.for.#ACTIONTYPE#.exclusion. Any sharelib jar which matches the pattern will not be included.
 Please add an example here. Also mention that the regex matching is based on https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html. 

{quote}
isExclude(fileName, exclusionPattern)
Please do pattern matching for the entire file name instead of just the filename. For eg: if you have two pig.jar and you want to exclude pig.jar from one directory
{quote}
With recent change in sharelib, we will never have duplicate files added to distributed cache.  User should be agnostic to sharelib path and it can change. 

bq. With recent change in sharelib, we will never have duplicate files added to distributed cache. User should be agnostic to sharelib path and it can change.
   Those duplicates are only by file names and file size and checksum is not checked and sometimes that can be a problem. We should exclude before checking for duplicates. I think that is what is being done now, just that it has to be on the full path instead of the file name. For eg: If both hbase and hive had a thrift.jar in sharelib, setting .*/hbase*/thrift.jar should make put the hive thrift.jar. If thrift.jar has to be totally excluded then .*thrift*.jar can be specified. 

The . followed by * for regex got converted to bold in the earlier comment. 

{quote}
Those duplicates are only by file names and file size and checksum is not checked and sometimes that can be a problem. 
{quote}
Should be part of sharelib check, sharelib should not load any file which file size is 0.

{quote}
I think that is what is being done now, just that it has to be on the full path instead of the file name. For eg: If both hbase and hive had a thrift.jar in sharelib, setting ./hbase/thrift.jar should make put the hive thrift.jar. If thrift.jar has to be totally excluded then .thrift.jar can be specified.
{quote}
Full path is never exposed to user and it can change. And i guess user doesn't care about sharelib dir structure.
./hbase/thrift.jar can be changed to ./hbase/aux/lib/thrift.jar in future release and in that case user has to go can change his regex pattern.

We can do something like, {sharelib_tag}/regex_pattern. If user need to use multiple sharelib tag, then he can use {sharelib_tag} as prefix to exclude jars from only that sharelib tag.
But i guess it will complicate things. Ask of this JIRA is just to exclude few files from sharelib so that user can override it. If needed we can create different JIRA to enhance this.

bq. Should be part of sharelib check, sharelib should not load any file which file size is 0.
   Not talking about empty files. Files can have same name. A proper check to dedup should do file size and checksum size check and we don't do that now. Refer TEZ-1697 for what is involved in doing a duplicate check. Having option to exclude based on the file path gives a choice to user to chose what to exclude in case of duplicate.

bq. Full path is never exposed to user and it can change.
    In the normal sharelib mode (not metafile), the name of the sharelib is same as the directory structure and is exposed to the users.  Even with metafile, the shareliblist command exposes the file paths. hbase. *thrift. *. jar would match both cases. It is easy to write a generic regex for a file under given directory how many ever levels it is nested.

Checking for file path instead of file name is a simple change. Do not need a separate jira for that and do not have to complicate with sharelib tag names. 

{quote}
Even with metafile, the shareliblist command exposes the file paths. hbase. *thrift. *. jar would match both cases. It is easy to write a generic regex for a file under given directory how many ever levels it is nested.
{quote}
This is what my worry is, full path is exposed to user and he create any regex which might break in future release. Not every user will follow best practices.
Ex 1.
Pig_current/Pig can internally point to .../pig.10.0.1.0.xxxxxx/lib/jar
Since path is exposed to user, he can create regex as .*/pig.10.0.1.0.xxxxxx/lib/jar/abc*.jar.
If we move pig_current/pig to next pig release, then all user job at production will start failing.

Ex 2.
Currently if thift jar in in hbase dir, habse/lib/thift.jar
By looking at sharelib full path, user can create regex as .*/hbase/lib/thift.jar.
This will prohibit ops/admin to change hbase sharelib directory structure.

Testing JIRA OOZIE-1624

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 1 line(s) longer than 132 characters
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:red}-1 RAT{color}
.    {color:red}-1{color} the patch seems to introduce 1 new RAT warning(s)
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1703
.    Tests failed: 5
.    Tests errors: 0

.    The patch failed the following testcases:

.      testActionCheckTransientDuringMRAction(org.apache.oozie.command.wf.TestActionCheckXCommand)
.      testSamplers(org.apache.oozie.util.TestMetricsInstrumentation)
.      testForNoDuplicates(org.apache.oozie.event.TestEventGeneration)
.      testCoordMaterializeTriggerService3(org.apache.oozie.service.TestCoordMaterializeTriggerService)
.      testMaxMatThrottleNotPicked(org.apache.oozie.service.TestCoordMaterializeTriggerService)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/2658/

Testing JIRA OOZIE-1624

Cleaning local git workspace

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------

Hello to Everyone! Although this issue may have been abandoned long ago, I think could be a really useful addition. e.g.: for excluding unwanted jars from the oozie sharelib folder for a specific action. In case you agree, I am happy to upload a new version of the patch.

PreCommit-OOZIE-Build started



Testing JIRA OOZIE-1624

Cleaning local git workspace

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------


I was attaching a patch that is compatible with master.

PreCommit-OOZIE-Build started



Testing JIRA OOZIE-1624

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 100 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1{color} There are no new bugs found in total.
. {color:green}+1{color} There are no new bugs found in [client].
. {color:green}+1{color} There are no new bugs found in [docs].
. {color:green}+1{color} There are no new bugs found in [tools].
. {color:green}+1{color} There are no new bugs found in [webapp].
. {color:green}+1{color} There are no new bugs found in [core].
. {color:green}+1{color} There are no new bugs found in [server].
. {color:green}+1{color} There are no new bugs found in [sharelib/pig].
. {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
. {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
. {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive].
. {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
. {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
. {color:green}+1{color} There are no new bugs found in [sharelib/spark].
. {color:green}+1{color} There are no new bugs found in [examples].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 2093
.    {color:orange}Tests failed at first run:{color}
TestJavaActionExecutor#testCredentialsSkip
TestCoordActionsKillXCommand#testActionKillCommandActionNumbers
.    For the complete list of flaky tests, see TEST-SUMMARY-FULL files.
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}. There is at least one warning, please check{color}

The full output of the test-patch run is available at

. https://builds.apache.org/job/PreCommit-OOZIE-Build/418/



[~andras.piros], [~gezapeti] could you please take a look at this?

Thanks [~matijhs] and [~dionusos] working on this particular patch! Can you please provide a new ReviewBoard review request? Thanks!

[~andras.piros], sure, I created the request!

https://reviews.apache.org/r/66656/

Thanks [~matijhs]! Now I see the value of this JIRA in its entirety.

Commented on the review request a few items.

[~gezapeti] [~kmarton] what is your opinion about:
* whether we should look at the whole sharelib path (Rohini's take) instead of parent directory name and / or file name only (Puru's take)
* whether we should have a preconfigured blacklist which JAR patterns we should never allow to exclude, e.g. {{oozie*.jar}}

Imagine following sharelib contents:
* {{pig/lib/jackson*.jar}}
* {{hbase/lib/jackson*.jar}}
* {{oozie/jackson*.jar}}
* user provided {{jackson*.jar}}

As a user I want following distinct use cases:
* exclude {{pig/lib/jackson*.jar}} only
* exclude {{pig/lib/jackson*.jar}} and {{hbase/lib/jackson*.jar}}
* exclude {{pig/lib/jackson*.jar}}, {{hbase/lib/jackson*.jar}}, and {{oozie/jackson*.jar}}
* exclude everything which is {{jackson*.jar}}, independent of location

I don't really see the value of a preconfigured blacklisted JAR pattern as there are almost an infinite way to define the equivalent of "oozie*jar" using regex. :) 
We should definitely log out every single jar we're removing though to avoid confusion about missing jars.

I'd prefer Rohini's take and filter against the full path -  excluding the sharelib root - as it's easy to just add a "*/" to the start of the pattern to exclude it from everywhere and it is more flexible than filtering just for filenames.



 

PreCommit-OOZIE-Build started



Testing JIRA OOZIE-1624

Cleaning local git workspace

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------


By sharelib root do you mean the "lib_<timestamp>" directory? 

For example instead of filtering against the below full paths:
 * /user/oozie/share/lib/lib123456789/oozie/jackson*.jar
 * /user/oozie/share/lib/lib123456789/pig/lib/jackson*.jar

We could only let jars excluded inside lib123456789:
 * oozie/jackson*.jar
 * pig/lib/jackson*.jar

[~matijhs] while I'm more than happy to do another review round, can you please close ReviewBoard review comments as fixed / won't fix / answered as I don't have a clue at the moment what got addressed? Thanks so much!

[~matijhs] did another review round.

[~matijhs] the overall direction is good, only a couple of review comments to go :) I like the documentation section as well.

Thanks [~andras.piros], I left the xml builder related issues open only, because I think that could be resolved in a separate Jira. What do you think?

Ignore my previous comment, I just realized how wonderful is the JavaActionBuilder class... :) I create a new patch for the review board, thanks!

:) [~matijhs] looking forward to the new patch, thanks so much!

PreCommit-OOZIE-Build started



Testing JIRA OOZIE-1624

Cleaning local git workspace

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------


Uploaded new patch based on the current master

PreCommit-OOZIE-Build started


Thanks for continuing the development of this patch [~matijhs]. Although using an ActionMarshaller would make this patch nicer, personally I don't think that this issue is blocked by OOZIE-3311.

Could you please also upload the patch to the review board?

Thanks [~asalamon74], uploaded to the review board as well. I agree with you, the ActionMarshaller could go in separately. Waiting for your feedback, thanks!


Testing JIRA OOZIE-1624

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any star imports
.    {color:red}-1{color} the patch contains 1 line(s) longer than 132 characters
.    {color:green}+1{color} the patch adds/modifies 4 testcase(s)
{color:red}-1 RAT{color}
.    {color:red}-1{color} the patch seems to introduce 1 new RAT warning(s)
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} Javadoc generation succeeded with the patch
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warning(s)
.    {color:orange}WARNING{color}: the current HEAD has 100 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1{color} There are [6] new bugs found below threshold in total that must be fixed.
.    {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
.    {color:green}+1{color} There are no new bugs found in [sharelib/spark].
.    {color:red}-1{color} There are [1] new bugs found below threshold in [sharelib/oozie] that must be fixed.
.    You can find the SpotBugs diff here (look for the red and orange ones): sharelib/oozie/findbugs-new.html
.    The most important SpotBugs errors are:
.    At ShellMain.java:[line 92]: This usage of java/lang/ProcessBuilder.&lt;init&gt;(Ljava/util/List;)V can be vulnerable to Command Injection
.    At ShellMain.java:[line 90]: At ShellMain.java:[line 89]
.    At ShellMain.java:[line 91]
.    {color:green}+1{color} There are no new bugs found in [sharelib/pig].
.    {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
.    {color:green}+1{color} There are no new bugs found in [sharelib/hive].
.    {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
.    {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
.    {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
.    {color:green}+1{color} There are no new bugs found in [sharelib/git].
.    {color:green}+1{color} There are no new bugs found in [client].
.    {color:green}+1{color} There are no new bugs found in [docs].
.    {color:green}+1{color} There are no new bugs found in [tools].
.    {color:green}+1{color} There are no new bugs found in [fluent-job/fluent-job-api].
.    {color:green}+1{color} There are no new bugs found in [server].
.    {color:green}+1{color} There are no new bugs found in [webapp].
.    {color:green}+1{color} There are no new bugs found in [examples].
.    {color:red}-1{color} There are [5] new bugs found below threshold in [core] that must be fixed.
.    You can find the SpotBugs diff here (look for the red and orange ones): core/findbugs-new.html
.    The most important SpotBugs errors are:
.    At BulkJPAExecutor.java:[line 207]: This use of javax/persistence/EntityManager.createQuery(Ljava/lang/String;)Ljavax/persistence/Query; can be vulnerable to SQL/JPQL injection
.    At BulkJPAExecutor.java:[line 177]: At BulkJPAExecutor.java:[line 176]
.    At BulkJPAExecutor.java:[line 206]: At BulkJPAExecutor.java:[line 200]
.    This use of javax/persistence/EntityManager.createQuery(Ljava/lang/String;)Ljavax/persistence/Query; can be vulnerable to SQL/JPQL injection: At BulkJPAExecutor.java:[line 207]
.    At BulkJPAExecutor.java:[line 112]: At BulkJPAExecutor.java:[line 128]
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 3164
.    {color:orange}Tests failed at first run:{color}
TestPurgeXCommand#testPurgeableWorkflowPurgeableSubWorkflowPurgeableSubSubWorkflow
.    For the complete list of flaky tests, see TEST-SUMMARY-FULL files.
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}. There is at least one warning, please check{color}

The full output of the test-patch run is available at

. https://builds.apache.org/job/PreCommit-OOZIE-Build/1025/



[~matijhs] I left a few comments on the review board.

[~matijhs] I've just realized that the patch contains no documentation change. I think this feature should be documented, adding a simple example to the documentation would also be useful. Probably you could add a new section 17.2 to [here|https://oozie.apache.org/docs/5.1.0/WorkflowFunctionalSpec.html#ShareLib].

Thanks [~asalamon74], I forgot to add it. Attached to the review, hope it's clear and understandable.

Thanks for the docs update [~matijhs] I think the chapter is very clear. I've sent a few comments about the documentation, mostly typos and formatting things. 

Can you please also upload the next version of the patch here. PreCommit script is much better catching problems like long lines, javadoc problems than me.

I've also tested your patch on a pseudo-distrubuted cluster, it was working great. ( One should be very careful it is quite easy to exclude very basic oozie jars :) )

Fixed the typos and line breaks and also added the warning message for using exclusions :)

PreCommit-OOZIE-Build started



Testing JIRA OOZIE-1624

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any star imports
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch adds/modifies 4 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} Javadoc generation succeeded with the patch
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1{color} There are [5] new bugs found below threshold in total that must be fixed.
.    {color:green}+1{color} There are no new bugs found in [client].
.    {color:green}+1{color} There are no new bugs found in [sharelib/hive].
.    {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
.    {color:green}+1{color} There are no new bugs found in [sharelib/spark].
.    {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
.    {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
.    {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
.    {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
.    {color:green}+1{color} There are no new bugs found in [sharelib/git].
.    {color:green}+1{color} There are no new bugs found in [sharelib/pig].
.    {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
.    {color:green}+1{color} There are no new bugs found in [fluent-job/fluent-job-api].
.    {color:green}+1{color} There are no new bugs found in [docs].
.    {color:green}+1{color} There are no new bugs found in [server].
.    {color:red}-1{color} There are [5] new bugs found below threshold in [core] that must be fixed.
.    You can find the SpotBugs diff here (look for the red and orange ones): core/findbugs-new.html
.    The most important SpotBugs errors are:
.    At BulkJPAExecutor.java:[line 207]: This use of javax/persistence/EntityManager.createQuery(Ljava/lang/String;)Ljavax/persistence/Query; can be vulnerable to SQL/JPQL injection
.    At BulkJPAExecutor.java:[line 177]: At BulkJPAExecutor.java:[line 176]
.    At BulkJPAExecutor.java:[line 206]: At BulkJPAExecutor.java:[line 200]
.    This use of javax/persistence/EntityManager.createQuery(Ljava/lang/String;)Ljavax/persistence/Query; can be vulnerable to SQL/JPQL injection: At BulkJPAExecutor.java:[line 207]
.    At BulkJPAExecutor.java:[line 112]: At BulkJPAExecutor.java:[line 128]
.    {color:green}+1{color} There are no new bugs found in [examples].
.    {color:green}+1{color} There are no new bugs found in [webapp].
.    {color:green}+1{color} There are no new bugs found in [tools].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 3166
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

. https://builds.apache.org/job/PreCommit-OOZIE-Build/1038/



Thanks for the contribution [~matijhs], +1, committed to master.

Thanks for everybody who helped in the last 5 years to finish this jira.

Closing issue; Oozie 5.2.0 is released

