Testing this out, current state

{code}
$ wc -l tests-only-no-static.txt
4447 tests-only-no-static.txt
{code}

With my current prototype

{code}
$ wc -l tests-only-no-static.txt
737 tests-only-no-static.txt
{code}

current issue I am trying to track down, why 3.0 -> trunk is getting filtered...

{code}
$ grep _trunk tests-only-no-static.txt  | grep -v 3_11
$
{code}

the issue isn't related to my patch as the current logic filters them...

This patch also updates circle CI to no longer call RUN_STATIC_UPGRADE_MATRIX, as this actually had us test committed code, rather than the patched code (removing it will use the version provided when its "family" matches).

The patch gets the tests to run within 22m 19s

There are 8 tests failing!!!  I plan to tackle those in their own issues under CASSANDRA-15588

bq. ‚Ä¶¬†RUN_STATIC_UPGRADE_MATRIX ‚Ä¶¬†

What is the purpose of this variable?
When would we want/need to use it?

If we have no use for it, can we just remove it altogether?


----

Here's the patch for the same in ci-cassandra.a.o in-sync 
 - cassandra-builds patch: https://github.com/apache/cassandra-builds/compare/trunk...thelastpickle:mck/16328
 - example CI run: https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch-dtest-upgrade/9/ 

When I look through the tests run I only see *indev_3_11_x_To_indev_trunk* tests. I would have thought we should be including all *indev_3_0_x_To_indev_trunk* as well?

bq. When I look through the tests run I only see indev_3_11_x_To_indev_trunk tests. I would have thought we should be including all indev_3_0_x_To_indev_trunk as well?

looks like we don't specify indev_3_0_x to trunk:

https://github.com/apache/cassandra-dtest/blob/trunk/upgrade_tests/upgrade_manifest.py#L154

I'm +1 if adding indev_trunk there makes 3.0 -> trunk tests run

{noformat}
‚Ä¶ RUN_STATIC_UPGRADE_MATRIX ‚Ä¶ 
What is the purpose of this variable?
When would we want/need to use it?
{noformat}

Here is all the references I see

{code}
$ grep -r --exclude '*.pyc' RUN_STATIC_UPGRADE_MATRIX *
dtest.py:RUN_STATIC_UPGRADE_MATRIX = os.environ.get('RUN_STATIC_UPGRADE_MATRIX', '').lower() in ('yes', 'true')
upgrade_tests/paging_test.py:from dtest import RUN_STATIC_UPGRADE_MATRIX, run_scenarios, MAJOR_VERSION_4
upgrade_tests/paging_test.py:        upgrade_applies_to_env = RUN_STATIC_UPGRADE_MATRIX or spec['UPGRADE_PATH'].upgrade_meta.matches_current_env_version_family
upgrade_tests/thrift_upgrade_test.py:from dtest import RUN_STATIC_UPGRADE_MATRIX, Tester
upgrade_tests/thrift_upgrade_test.py:    upgrade_applies_to_env = RUN_STATIC_UPGRADE_MATRIX or spec['UPGRADE_PATH'].upgrade_meta.matches_current_env_version_family
upgrade_tests/upgrade_through_versions_test.py:from dtest import RUN_STATIC_UPGRADE_MATRIX, Tester
upgrade_tests/upgrade_through_versions_test.py:    upgrade_applies_to_env = RUN_STATIC_UPGRADE_MATRIX or version_metas[-1].matches_current_env_version_family
upgrade_tests/upgrade_through_versions_test.py:        if not RUN_STATIC_UPGRADE_MATRIX:
upgrade_tests/cql_tests.py:from dtest import RUN_STATIC_UPGRADE_MATRIX, MAJOR_VERSION_4
upgrade_tests/cql_tests.py:    upgrade_applies_to_env = RUN_STATIC_UPGRADE_MATRIX or spec['UPGRADE_PATH'].upgrade_meta.matches_current_env_version_family
upgrade_tests/regression_test.py:from dtest import RUN_STATIC_UPGRADE_MATRIX
upgrade_tests/regression_test.py:    upgrade_applies_to_env = RUN_STATIC_UPGRADE_MATRIX or path.upgrade_meta.matches_current_env_version_family
upgrade_tests/upgrade_manifest.py:from dtest import RUN_STATIC_UPGRADE_MATRIX
upgrade_tests/upgrade_manifest.py:            if not (RUN_STATIC_UPGRADE_MATRIX or OVERRIDE_MANIFEST):
upgrade_tests/upgrade_udtfix_test.py:from dtest import RUN_STATIC_UPGRADE_MATRIX, Tester
upgrade_tests/upgrade_udtfix_test.py:    upgrade_applies_to_env = RUN_STATIC_UPGRADE_MATRIX or start_family_applies
{code}

For upgrade_tests/upgrade_manifest.py, its used as follows

{code}
        if not (RUN_STATIC_UPGRADE_MATRIX or OVERRIDE_MANIFEST):
                if destination_meta.matches_current_env_version_family:
                    # looks like this test should actually run in the current env, so let's set the final version to match the env exactly
                    oldmeta = destination_meta
                    newmeta = destination_meta.clone_with_local_env_version()
                    logger.debug("{} appears applicable to current env. Overriding final test version from {} to {}".format(path_name, oldmeta.version, newmeta.version))
                    destination_meta = newmeta
{code}

This is what I was talked about when saying only committed code gets tested, if RUN_STATIC_UPGRADE_MATRIX isn't defined (or is false) then we replace the destination (why not origin?) with the version provided to cassandra_dir if their "family" matches.  The other usages look to be used for filtering, so if RUN_STATIC_UPGRADE_MATRIX is defined, or the test version matches the cassandra_dir version then run.

I am not sure why it is this way, or why origin was excluded (changes to 3.11 will not be tested against trunk upgrades until committed).


bq. When I look through the tests run I only see indev_3_11_x_To_indev_trunk tests. I would have thought we should be including all indev_3_0_x_To_indev_trunk as well?

bq. looks like we don't specify indev_3_0_x to trunk:

I filed CASSANDRA-16329 to look closer into this. Marcus you are correct that 3.0 branch excludes trunk, but 3.0 release includes it (https://github.com/apache/cassandra-dtest/blob/trunk/upgrade_tests/upgrade_manifest.py#L155)... yet 3.0 release isn't in the test output!

I was hoping to punt that issue into the other JIRA as I see that logging never triggers, and stdout debugging also doesn't show to screen, so root causing might take a bit more time.

bq. Here's the patch for the same in ci-cassandra.a.o in-sync

Thanks, was planning to file after review was happy with the change, ill update the links to include yours!

According to git, the env variable was added in

{code}
Author: Russ Hatch <rhatch@datastax.com>
Date:   Fri Jul 22 11:06:41 2016 -0600

    default to env-relevant upgrade tests (#1095)
{code}

Comment would imply https://github.com/apache/cassandra-dtest/pull/1095 but that does not exist, so not sure if I can track down the context of this commit.

[~rhatch], do you remember and able to comment?

Ok, I found out the root cause why 3.0 was missing

1) Marcus was right
2) python is dynamic and a small typo will break you... silently... =D
3) no option allowed 3.0 release -> trunk AND 3.0 branch -> trunk

With a change to fix both issues, and updating CI with a new flag, we now get

{code}
$ wc -l tests-only-no-static.txt
    1850 tests-only-no-static.txt
$ grep current_3_0_x_To_indev_trunk tests-only-no-static.txt | head -n 2
upgrade_tests/cql_tests.py::TestCQLNodes3RF3_Upgrade_current_3_0_x_To_indev_trunk::test_static_cf
upgrade_tests/cql_tests.py::TestCQLNodes3RF3_Upgrade_current_3_0_x_To_indev_trunk::test_large_collection_errors
$ grep indev_3_0_x_To_indev_trunk tests-only-no-static.txt | head -n 2
upgrade_tests/cql_tests.py::TestCQLNodes3RF3_Upgrade_indev_3_0_x_To_indev_trunk::test_static_cf
upgrade_tests/cql_tests.py::TestCQLNodes3RF3_Upgrade_indev_3_0_x_To_indev_trunk::test_large_collection_errors
{code}

Solid write up [~dcapwell], immensely helpful to have all that written down.  

I have classified and bucketed the failing tests and opened a ticket for each test as a child of CASSANDRA-16322.  After upgrading the 3.0 version to .23 the amount of tests failing are ~30, but given the nature of the tests most are the same failure repeated over the different permutations.

+1 on the patches. 

It would be nice to remove {{RUN_STATIC_UPGRADE_MATRIX}}, which seems unneeded complexity and confusion. But it should probably be a separate ticket, and good to take some patience to find when/where its original use was.

cassandra-builds patch updated with {{`--upgrade-version-selection all`}} flag.
New ci-cassandra.a.o run at: https://ci-cassandra.apache.org/job/Cassandra-devbranch-dtest-upgrade/11/

bq. But it should probably be a separate ticket, and good to take some patience to find when/where its original use was.

Agree, CASSANDRA-16348

Glad to see jenkins and circle ci are similar with the changes, ~30 tests each.

+1

Thanks for the review, will commit to C*, C*-dtest, and C*-builds today.

[~mck] my plan is dtest -> c* -> c*-builds; this make sense to you?

bq. my plan is dtest -> c* -> c*-builds; this make sense to you?

üëç 



committed to all repos

