Submitted patch rev 001. This is a massive change that touches a lot of files, but I think it would make the code a cleaner.

Hi [~cmccabe], thanks for your encouragement when I told you that I found making a change like this would be nice. So I went ahead and made the changes. Would you please help taking a look at the patch when you have time? thanks.



Good idea.

How about calling this {{CurrentOperatingSystem}} instead of {{OSTypeUtil}}?   {{OSTypeUtil}} suggests that this is a class with utility methods.  But it's not, really.  Also, perhaps we should rename {{WINDOWS}} to {{IS_WINDOWS}}, and so forth.

[edit: perhaps naming this class {{OperatingSystem}} would work as well, if we use the IS_ methods everywhere.]

Also there are a bunch of unrelated whitespace changes in this patch-- let's get rid of those.

HI [~cmccabe],

Thanks for the good suggestions! Can we use {{CurrentOS}} to make it shorter?  I will preappend all the flags with {{IS_}}.

All the unrelated whitespaces are added by eclipse to separate the imports into different sections, which makes the code easier to read. Do you think it's ok not to remove them?

Thanks again!





-1 to anything which stops {{Shell.WINDOWS}} linking or working.

It may be tagged {{@LimitedPrivate}}  but it is the defacto way that Hadoop apps check OS versions, including YARN apps that choose which CLI to build up based on OS version. Remove the method and a lot of code breaks. And as we can't switch to the new method without stopping compiling/running against Hadoop 2.6 or earlier, this stops us being able to have 

I would propose
 # the new OSType classes is added as proposed, marked as public , evolving
# the existing {{Shell.WINDOWS}}, {{Shell.LINUX}} properties are retained, and driven off OSType. 
# they could be tagged as deprectated

This strategy removes the need to do a mass change of every source file that calls shell.windows too, reducing the changes of a patch which will currently make moving code across hadoop versions very hard.

Finally; why? It may seem inelegant for the windows probe to be in Shell, but there are lot of bits of hadoop that are inelegant. Inelegance does not justify making backwards-incompatible changes across a wide swathe of the codebase.

...and before anyone says its our own fault that SLIDER uses this in its production and test code, I've just checked and {{org.apache.hadoop.yarn.applications.distributedshell.ApplicationMaster}} uses it too. That is: the reference YARN AM makes use of the probe to build commands for different platforms. It is therefore effectively public, irrespective of what the @ scope tags say.

Thanks for sharing this patch, Yongjun.  It's undeniable that this would reduce coupling on the {{Shell}} class.  Unfortunately, I also have to say -1 for the current patch, for all of the reasons that Steve already described so well.

Steve's proposal of phasing in new APIs and marking the {{Shell}} APIs deprecated would be more agreeable, but I also wonder if it's worth the effort.  This implies that someone will take responsibility for migrating all of the downstream projects to the new APIs, or at least coordinating with those projects' contributors.  Until that migration completes across all ecosystem projects, we'll still need to maintain both code paths.  The benefit looks small weighed against the level of effort, so perhaps our efforts are better spent elsewhere.  There are plenty of opportunities for other refactoring improvements that won't impact downstream consumers.

Considering all of that, a patch implementing Steve's proposal would effectively move me from -1 to -0 (still opposed, but with no intention to block it if other committers are in favor).

Thanks a lot for your feedback Steve and Chris, and this is very helpful!

With the input you provided, I can understand the concerns you guys had.  What Steve suggested is similar to the mechanism that we deal with deprecated config property, it helps to maintain backward compatibility, if we are going to make the change. My thinking was, having this new API would at least  allow any new code not to couple with Shell. On the other hand, if we don't have the new API, we will always have to couple with Shell for any new code.  

One question for Steve: the patch I uploaded does a massive change in the current code to replace calls to old APIs with calls to new API. If it's agreed to introduce the new API, do you suggest to make the massive change altogether like in my initial patch, or just to provide new APIs without replacing the calls old API to address this jira?

Thanks again!


I think these are valid points and perhaps we should rethink this change.

It's frustrating that in this case, the {{\@InterfaceAudience}} tags seem to have been completely ignored, and the {{Shell.java}} APIs are now effectively public.  Is there anything we can do to keep this from happening again in the future?

bq. Is there anything we can do to keep this from happening again in the future?

Unfortunately, I think the only thing we can do is put out a reminder to downstream projects that if they find themselves calling something with a non-public {{InterfaceAudience}}, then it would be preferable if they filed a feature request to us for providing a real public, stable API.  Otherwise, I don't see any options for truly strict enforcement.

Project Jigsaw potentially gives us some enhancements on top of the stock Java visibility modifiers.  This would be kind of like {{LimitedPrivate}}, but with real enforcement provided by the JDK that only the listed callers may call it.  This won't be available to use for a long time though.

http://openjdk.java.net/projects/jigsaw/



I wonder if the downstream projects' compile would/could issue warnings when they use external APIs that are tagged private. It would be nice if so. Of course there is no enforcement even if so, however, like in hadoop, we don't push changes before resolving compiler warnings usually. Thanks.


# Shell.Windows provided a feature for which there was  no alternative; it's use indicated a "desire line" that people want. Only way to really address that is to track uses downstream (tricky) and react.
# you can't ever lock down code in an OSS project; if someone wants to they can aways look at the code. Which would we prefer: cut-and-paste copying or direct references. When downstream I generally prefer direct references, because it reduces my maintenance costs
# you can keep things package scoped, but even there people can inject classes into the package unless you seal the JARs...forcing people to build their own JARs without the sealing.
# .NET has a better scope mode, with the {{internal}} marker able to cover multiple libs in the same assembly, so you could make something exclusive to the Hadoop JAR suite [[http://msdn.microsoft.com/en-us/library/7c5ka91b.aspx]]

Returning to this JIRA
* There's discussion on general about a thin client lib; something like {{OSType}} could go in there, with Shell being kept out.
* I'd be tempted to leave things as is otherwise, upgrading shell to public/evolving except that Shell does some stuff in static initializers that can log @ debug, e.g.{{checkHadoopHome()}}.
* if we do add OSType, the YARN app examples should use it. If we move all and tag it as @deprecatad then people who use it downstream will get a warning, but it won't be enforced.

Finally, there's some intermittent discussion on common-dev about OSGi-enabling Hadoop, so downstream apps can be more isolated from both Hadoop internals and downstream things. But for that to work in YARN apps, we'd need to take some internal stuff, formally make it public and then export. Identifying those bits in use would be tricky unless we can automate it and scan over the main YARN apps: tez, slider, flink, spark-on-yarn, Helix on yarn. And HBase, which has had special treatment in the past.

HI [~stevel@apache.org],

Thanks a lot for your comments, I learned quite a bit just by reading it!

Along the line you proposed earlier,

# the new OSType classes is added as proposed, marked as public , evolving
# the existing Shell.WINDOWS, Shell.LINUX properties are retained, and driven off OSType.
# they could be tagged as deprectated

One possible change we can do so we can allow new code to not have to couple with Shell for checking OS, and minimizing the impact (assume we introduce new class CurrentOS):

# the new CurrentOS class is added as proposed, marked as public , evolving
# CurrentOS uses "IS_WINDOWS" etc as an improvement
#  the existing Shell.WINDOWS, Shell.LINUX etc properties are retained, but driven off CurrentOS.
#  don't tag Shell's WINDOWS etc deprecated
#  leave Shell's {{@InterfaceAudience etc}} as is
#  Optional: whether to change the current Hadoop code base to use the new API (I've done it in the initial patch), up to whether you all agree.

This allows new code to not to couple with Shell. And no impact to downstream projects, but give them a choice to use the new API. It also allows new code in Hadoop not to couple with Shell.

Does this change make sense?

Thanks.


Thanks for bringing all the feedback together, Yongjun.  I think it makes sense now.

bq. Optional: whether to change the current Hadoop code base to use the new API (I've done it in the initial patch), up to whether you all agree.

I don't think there is any problem with moving code in the Hadoop tree to the new API quickly.  I was mostly concerned with the impact to downstream projects, not code within the Hadoop tree itself.

HI Colin/Chris/Steve,

Thanks a lot for your feedback. I just uploaded rev 002 based on the proposal summarized in my last comment.

While trying to maintain all public methods and members in Shell, I made the following changes:

# Shell#OSType, it's kept because it is public. The change I made here is to take the enum value from CurrentOS and map to Shell#OSType. The change may or may not be needed. The benefit of having it is to ensure all enum values are the same between Shell and CurrentOS. I wonder if there is any compatibility concern with this change, I hope not, but if there is any, we can just make Shell#OSType exactly the same as before. Actually the code would be less heavy weight without  this change. Not sure whether there are downstream projects using this type, but since it was public, we'd better keep it as is.
# Shell#osType, it's kept again because it's public.
# Replaced osType in Shell with OS_TYPE in CurrentOS.
# Shell#PPC_64, I introduced IS_PPC_64 in CurrentOS too.

Many thanks for taking a look at this new rev.


Looks Ok, one more iteration would do
# can you go back to {{.WINDOWS}} rather than {{IS_WINDOWS}}? Why: reduces the effort to switch to the new API, all you need to do is replace Shell with OsType. 
# your IDE's been adding blank lines in the imports area. Can you stop it/unwind that bit. Imports are one of the most common merge troublespots in patches; it's bad enough already

thanks

Hi Steve,

Many thanks for the review and comments. 

I agree with you that the preserving the original flag name can avoid some typing. However, adding {{IS_}} to the flag seems to make a better name (I hope you agree:-)).

What I did for this change was to run a shell command
{code}
 find . -name "*.java" -exec sed -i 's/Shell\.WINDOWS/CurrentOS\.IS_WINDOWS/g' {} \;
{code}
that changed all files. So it did not cause me much trouble. If developer is editing one file, a search/replace would do the same. Since we are introducing this new public interface, it's an opportunity to make this change in the beginning. Once it's there, then it will be harder to change later. I personally think it's worthwhile to have the new name. But if you think the benefit of avoiding some typing is better, I'm flexible here. Would you please let me know again if it's ok with you to have the {{IS_}}? If not, I can change to use the same flag names as before. 

What I had to spend time is to open each file to fix the import. My eclipse does automatically insert an empty line in between different import sections (which only happens when there is any change to be done in the import area). I thought this empty-line change actually helps readability, so I did not try to revert it earlier. If it indeed cause merge trouble, I would agree that it's better not to have them. And I will go remove them. 

Thanks again!



BTW, non of my earlier patch upload here triggered jenkins job, I wonder anyone has clue. Thanks.


bq. BTW, non of my earlier patch upload here triggered jenkins job, I wonder anyone has clue. Thanks.

I'm not sure, but I just submitted a run manually:

https://builds.apache.org/job/PreCommit-HADOOP-Build/5079/


Thanks Chris!


you did this in sed? Bold. 

This is how I'd have done it in IntelliJ idea
# write the new class
# have Shell.* relay direct {{final Shell.WINDOWS = OsType.IS_WINDOWS}}
# copy that code and stick it somewhere safe (like a comment)
# in intellij, hit "refactor|inline" and had the shell operations placed inline *wherever they are used*
# reinstate the now-legacy shell.methods for downstream use.

Excluding the ostype class & tests, the migration would take ~20 seconds a constant. 


Cool Steve, thanks for your feedback and sharing another way of doing it. I'm taking it as an OK from you to use the new name:-) 

I will work on a new rev that takes care of the extra empty lines soon.

Thanks.





Hi Chris/Steve,  I just uploaded rev 003 which has all the new empty line removed. I'd really appreciate it if you could help taking a look.

Hi Chris,  thanks for your help to kick off the test run earlier, the run finished, however, the strange thing is,  it didn't report the result back to the jira.  Another neighboring run https://builds.apache.org/job/PreCommit-HADOOP-Build/5080/ does report to the jira. Let's see whether this new upload kick off the test or not.

Thanks.





Hi Guys,

Thanks for [~rchiang]'s reply about why the jenkins job was not triggered in the email thread:
{quote}
Your patch covers multiple projects (I see 81 files across
hadoop-common-project, hadoop-hdfs-project, hadoop-mapreduce-project,
hadoop-tools, hadoop-yarn-project).

Jenkins had problems with that for me a few months back.  If you break it
up per-project, it should work just fine.
{quote}
I'm submitting a patch that covers hadoop-common for this jira,  and then take care of the other projects in separate jira. Except this one need to be committed first, the rest can be committed at any order. This is a verification of  the full compatibility:-)

Thanks a lot for reviewing.


{color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12681681/HADOOP-11293.004.patch
  against trunk revision 1925e2a.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 24 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in hadoop-common-project/hadoop-common.

    {color:green}+1 contrib tests{color}.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5088//testReport/
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5088//console

This message is automatically generated.

Hi [~cnauroth] and [~steve_l@iseran.com], thanks for your feedback earlier, wonder if any of you could help moving this forward? Thanks!



Hi [~cnauroth] and [~stevel@apache.org],

I created INFRA-8655 for checking why jenkins test was not triggered by the patch here, and it's concluded that we need to create separate jiras to address different projects. Patch rev 004 submitted here is for hadoop-common. Would any of you please help taking a look?

Thanks a lot.



Hi [~cnauroth] and [~stevel@apache.org],

Thanks for your earlier review and comments. I just uploaded rev 005 which is rev004 rebased on top of latest trunk (very minor diff from rev004). Hope the test can finish this time. Appreciate it very much if you could do a review. Thanks.





rev004 in my last comment should read as rev003.  (the real rev004 is hadoop-common portion of the change).


{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12695205/HADOOP-11293.005.patch
  against trunk revision 03a5e04.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 47 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 13 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common hadoop-hdfs-project/hadoop-hdfs hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle hadoop-tools/hadoop-azure hadoop-tools/hadoop-streaming hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests:

                  org.apache.hadoop.mapreduce.TestLargeSort
                  org.apache.hadoop.conf.TestJobConf
                  org.apache.hadoop.hdfs.server.datanode.TestBlockScanner

                                      The following test timeouts occurred in hadoop-common-project/hadoop-common hadoop-hdfs-project/hadoop-hdfs hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle hadoop-tools/hadoop-azure hadoop-tools/hadoop-streaming hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests:

org.apache.hadoop.http.TestHttpCookieFlag

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5531//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HADOOP-Build/5531//artifact/patchprocess/newPatchFindbugsWarningshadoop-mapreduce-client-core.html
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5531//console

This message is automatically generated.

Hi [~cnauroth] and [~stevel@apache.org],

About the test results:

Rerunning the tests locally, 

TestBlockScanner and TestHttpCookieFlag are successful.

TestJobConf failure was reported as  MAPREDUCE-6223.

TestLargeSort failed in trunk test, I created MAPREDUCE-6233 about it.

The findbugs are not related to my changes, so I think it should not block this jira. but I will take a look at them later.

Thanks.




lets bounce Jenkins and see what happens again...there's sometimes conflict with other tests on the same host

Hi Steve, many thanks for your help!


Upload rev 005 again to trigger another test.


{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12696239/HADOOP-11293.005.patch
  against trunk revision 80705e0.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 47 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 13 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common hadoop-hdfs-project/hadoop-hdfs hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle hadoop-tools/hadoop-azure hadoop-tools/hadoop-streaming hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests:

                  org.apache.hadoop.mapreduce.TestLargeSort
                  org.apache.hadoop.conf.TestJobConf
                  org.apache.hadoop.yarn.server.nodemanager.containermanager.localizer.TestResourceLocalizationService

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5569//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HADOOP-Build/5569//artifact/patchprocess/newPatchFindbugsWarningshadoop-mapreduce-client-core.html
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5569//console

This message is automatically generated.

Hi [~stevel@apache.org],

It looks like your change of "patch available" -> "open" -> "patch available" did not trigger a test run, or the run happened and timed out as before. However, after the patch is uploaded again, a run happened and result was reported above.

TestJobConf failure was reported as MAPREDUCE-6223.
TestLargeSort failed in trunk test, I created MAPREDUCE-6233 about it.
TestResourceLocalizationService.testPublicResourceInitializesLocalDir failure was reported as YARN-2961

Would you please help committing the patch if it looks good to you?

Thanks a lot!



BTW, running TestResourceLocalizationService locally is successful.


Upload rev 005 again for one more test.


{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12697156/HADOOP-11293.005.patch
  against trunk revision da2fb2b.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 47 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 13 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common hadoop-hdfs-project/hadoop-hdfs hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle hadoop-tools/hadoop-azure hadoop-tools/hadoop-streaming hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests:

                  org.apache.hadoop.mapred.TestMiniMRChildTask
                  org.apache.hadoop.mapred.TestJobName
                  org.apache.hadoop.mapreduce.v2.TestUberAM
                  org.apache.hadoop.mapred.TestTaskCommit
                  org.apache.hadoop.mapreduce.v2.TestMRJobs
                  org.apache.hadoop.conf.TestJobConf
                  org.apache.hadoop.mapred.TestJobCleanup
                  org.apache.hadoop.mapred.TestClusterMRNotification

                                      The following test timeouts occurred in hadoop-common-project/hadoop-common hadoop-hdfs-project/hadoop-hdfs hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle hadoop-tools/hadoop-azure hadoop-tools/hadoop-streaming hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests:

org.apache.hadoop.io.compress.TestCodec

                                      The test build failed in hadoop-hdfs-project/hadoop-hdfs hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api hadoop-tools/hadoop-streaming hadoop-tools/hadoop-azure hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle 

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5621//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HADOOP-Build/5621//artifact/patchprocess/newPatchFindbugsWarningshadoop-mapreduce-client-core.html
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5621//console

This message is automatically generated.

The failed tests of the previous run even complained about 

"java.lang.NoClassDefFoundError: org/apache/hadoop/util/CurrentOS"

which means we have some problem in the test infrastructure, and the problem is flaky. 

I just uploaded rev 005 again. 



{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12697220/HADOOP-11293.005.patch
  against trunk revision cfb829e.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 47 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 eclipse:eclipse{color}.  The patch built with eclipse:eclipse.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 14 new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in hadoop-common-project/hadoop-common hadoop-hdfs-project/hadoop-hdfs hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle hadoop-tools/hadoop-azure hadoop-tools/hadoop-streaming hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-tests:

                  org.apache.hadoop.conf.TestJobConf
                  org.apache.hadoop.cli.TestHDFSCLI

Test results: https://builds.apache.org/job/PreCommit-HADOOP-Build/5625//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HADOOP-Build/5625//artifact/patchprocess/newPatchFindbugsWarningshadoop-mapreduce-client-core.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HADOOP-Build/5625//artifact/patchprocess/newPatchFindbugsWarningshadoop-hdfs.html
Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5625//console

This message is automatically generated.

Hi [~steve_l@iseran.com],

You changed status from "patch Available" ->"Open" -> "Patch Available" twice recently and seems none of them triggerred jenkins test run.  We may need to bring this to infra folks' attention.

I uploaded the same patch twice  and both triggered test run. 

For the two failed test in yesterday's run, 
TestJobConf failure was reported as MAPREDUCE-6223.
Running TestHDFSCLI locally is successful.

Thanks.


Sorry it looks like I addressed to the wrong Steve in my previous comment. Hi [~stevel@apache.org], FYI. The patch appears to run the tests ok. Thanks.


This is the patch merged with Branch-2; some minor conflict in {{TestLocalFileSystem}}

Now what?

If it weren't for {{Shell}} doing too much in its static initialisers I'd be -1 on the basis if "needless change across the codebase whose purpose is to make patches hard"

And, if the patch didn't maintain 100% backwards compatibility with the Shell.* constants, again, It'd be a -1, here on "breaks things"

But shell is messy; this code does factor it out, ultimately it will be good if broadly adopted, which is what this patch does across the hadoop code.

So, while I'm ~=0 on the need for it, there's enough slightly positive to say +1, if we can do the merge right.

Which is where we are now. 

I propose that 
# hadoop-common patch goes in to trunk
# there are separate JIRAs created for HDFS, YARN and MAPREDUCE, each with their own patches.
That way: each project gets to see what is happening, and isn't surprised by a big change across the codebase.

There's one more remaining issue: branch-2. We do need consistency across the branches to aid in applying may other patches. 

So: branch-2-for-2.7 vs 2.8? 



{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12698923/HADOOP-11293-branch-2-005.patch
  against trunk revision ef950ea.

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-HADOOP-Build/5701//console

This message is automatically generated.

Hi [~stevel@apache.org],

Thank you so much for looking into, trying branch-2, and the feedback!

Per you suggestions, I created the following subtasks:
* HADOOP-11597 for common
* HADOOP-11598 for tool
* HDFS-7799
* MAPREDUCE-6262
* YARN-3200

And I have attached patch to HADOOP-11597. Once HADOOP-11597 is committed, I can submit patches to the other jiras because of the dependency.

Thanks again for your help, would you please help looking at HADOOP-11597 patch?




resubmitting. I'm confident we'll get problems applying it, but it'll be fixable and then we can get this in.

\\
\\
| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:red}-1{color} | patch |   0m  0s | The patch command could not apply the patch during dryrun. |
\\
\\
|| Subsystem || Report/Notes ||
| Patch URL | http://issues.apache.org/jira/secure/attachment/12698923/HADOOP-11293-branch-2-005.patch |
| Optional Tests | javadoc javac unit findbugs checkstyle |
| git revision | branch-2 / c951d56 |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/7659/console |


This message was automatically generated.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m  0s{color} | {color:blue} Docker mode activated. {color} |
| {color:red}-1{color} | {color:red} patch {color} | {color:red}  0m 10s{color} | {color:red} HADOOP-11293 does not apply to branch-2. Rebase required? Wrong Branch? See https://wiki.apache.org/hadoop/HowToContribute for help. {color} |
\\
\\
|| Subsystem || Report/Notes ||
| JIRA Issue | HADOOP-11293 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12698923/HADOOP-11293-branch-2-005.patch |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/11984/console |
| Powered by | Apache Yetus 0.5.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.



| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m  0s{color} | {color:blue} Docker mode activated. {color} |
| {color:red}-1{color} | {color:red} patch {color} | {color:red}  0m  7s{color} | {color:red} HADOOP-11293 does not apply to branch-2. Rebase required? Wrong Branch? See https://wiki.apache.org/hadoop/HowToContribute for help. {color} |
\\
\\
|| Subsystem || Report/Notes ||
| JIRA Issue | HADOOP-11293 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12698923/HADOOP-11293-branch-2-005.patch |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/13243/console |
| Powered by | Apache Yetus 0.6.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.



