addDelayedContainer() added a container to delayedContainers. However, run() was in the middle of executing "(delayedContainers.peek() == null)" loop.  This triggered "wait()" without notification.  This caused the issue.

I tested the patch with 1 core VM and 4 core VM 30-40 times and it works fine.  Earlier every alternate test would fail.

[~bikassaha] - Can you please review?  

Below is the original code with some notes.
Couple of comments.
1) The test notification should be happening when the peek() result is empty and we really are going to wait.
2) The initial peek() at this point seems useless. Could we refactor a bit because we eventually need to do the sync(this) peek() anyways
3) Does the addition of container to delayedContainers need to move inside the sync(this) in addDelayedContainers()?
{code}
        // Try allocating containers which have timed out.
        // Required since these containers may get assigned without
        // locality at this point.
        if (delayedContainers.peek() == null) {
          try {
            // test only signaling to make TestTaskScheduler work
            if (drainedDelayedContainersForTest != null) {              <<<<< THIS SHOULD HAPPEN BEFORE WE REALLY WAIT
              drainedDelayedContainersForTest.set(true);
              synchronized (drainedDelayedContainersForTest) {
                drainedDelayedContainersForTest.notifyAll();
              }
            }
            synchronized(this) {
              this.wait();
            }
            // Re-loop to see if tryAssignAll is set.
            continue;
          } catch (InterruptedException e) {
            LOG.info("AllocatedContainerManager Thread interrupted");
          }
        } else {{code}

This fix should have reduced the sleeps in the test or kept them the same and not increased them :) Could you please revert all the sleep increases and check again? We would like to avoid making tests run longer.

Attaching the patch after addressing the review comments.  

lgtm. Good catch.

Thanks [~bikassaha].  Committed to master and branch-0.5

