The following draft PR is an attempt at replacing ESRI with JTS: https://github.com/apache/calcite/pull/2879

Thanks for the PR, [~bchapuis]. I added you to 'contributor' role and assigned this case to you.

I quickly reviewed the PR and it looks great. Some tidying required (e.g. removing print statements, perhaps updating some comments such as 'NOTE: there is no Geometry.Type.MultiPolygon', getting checkerframework to pass) but it looks very close. I've assigned 'fixVersion = 1.32' so that we get it to completion. Can you add commits to fix those issues, and update this case when it's ready for final review.

I think it's fine that behavior has changed a bit, especially if it is moving towards PostGIS. Can you add some commentary here on the sort of changes? It will help people who are upgrading after 1.32.

Do you have any other remarks about differences between the two libraries? You mentioned SRID handling in the PR.

Lastly, are there are any features that would be possible once we have completed the switch to the new library? I am curious what possibilities are opened up.

Thanks a lot for your answer. Some of the difference will have to be discussed and may be problematic. For instance, in JTS, the buffer operation on a 3d object returns a 2d object. I will provide an exhaustive list of differences here. (Probably next week as I'm attending FOSS4G this week).

No urgency (enjoy FOSS4G!) and don't worry about producing a detailed list of differences. A rough list will suffice. People who need the full picture can look at the difference in the tests.

I suspect most of the changes either won't be noticed by our users or will be seen as improvements. If changes to a particular ST_ function are breaking, people can log a bug, revert to Calcite 1.31, and we can add logic to that particular function to restore the old behavior in 1.33.

[~julianhyde] I encounter differences between the values returned by JTS in different environements. For instance, the following query produces returns 123.79793787843437 on macOS (JDK 18) and 123.79793787843424 on Windows (JDK 8). Any suggestion on the best way to tackle this issue ? (e.g., simplifying the values in the test cases, rounding the results in the query, rounding the results when writing the wkt, etc.)

{{SELECT ST_Distance(}}
{{ST_Transform(ST_GeomFromText('POINT(-72.1235 42.3521)',4326),26986),}}
{{ST_Transform(ST_GeomFromText('LINESTRING(-72.1260 42.45, -72.123 42.1546)', 4326),26986));}}

Here is the most relevant question I found that may be related to this issue:

[https://stackoverflow.com/questions/64586096/math-pow-in-java-8-and-java-13-returns-different-result]

The following run lists all the failing test cases:

[https://github.com/apache/calcite/runs/8058676733]

As a general rule, tests should not require that [floating point numbers exactly match|https://blog.marcinchwedczuk.pl/doubles-and-unit-testing]. Floating point calculations can get re-ordered or optimized, which results in different rounding errors.

In {{SqlOperatorTest}} we use {{{}isWithin{}}}:
{code:java}
    f.checkScalarApprox("{fn ACOS(0.2)}", "DOUBLE NOT NULL",
        isWithin(1.36943, 0.001));
{code}
You seem to be having the analogous problem with floats in geometries. The easiest solution may be to round all floats in a geometry value to (say) .0001 degrees, and compare to that rounded value. If I were in your shoes I would write a function {{roundGeometry4(String)}} that would for example convert the string
{code}
POLYGON ((-71.1776848522251 42.39028965129019, -71.17768437663263 42.390382947800894, -71.17758443054647 42.39038266779173, -71.17758259272306 42.39028936479872, -71.1776848522251 42.39028965129019)){code}
to
{code}
POLYGON ((-71.1777 42.3903, -71.1777 42.3904, -71.1776 42.3904, -71.1776 42.3903, -71.1777 42.3903)){code}
A function that worked directly on the geometry object might seem better, but might not handle all geometry types reliably; because this works on a string, there's a simple implementation using regex. The expected strings are shorter, and therefore easier for humans to check. If the 4th decimal place of a test's output actually matters then we should probably write tests with larger geometry objects.

To be explicit: I don't consider it a bug that JTS produces slightly different float values in different environments. Our tests should accommodate that.

[~bchapuis], I wasn't able to write a simple implementation of {{roundGeometry4}} using regex, but I did write an implementation that uses a state machine. You can find it in my [4294-round|https://github.com/julianhyde/calcite/tree/4294-round] branch; feel free to pull it into your PR.

It looks great, I like the idea of fixing this at the level of the tests. An other idea may have been to implement ST_ReducePrecision, but the function does more than rounding float and I would prefer to do this in another PR. Thanks a lot for your help.

If it's not too much work, fix the tests in a separate commit. That commit could be applied before the ESRI &rarr; JTS migration and will make it clear that the migration didn't break any tests.

Here is the separate commit for the tests, it should be easier to review.

[https://github.com/apache/calcite/pull/2879/commits/90928b0c2b8735022a13113473916adee6348475]

Sorry for the numerous runs on the CI, I struggled a bit with all the checks. I still have an issue with TravisCI, any idea on what may cause the build to fail specifically on openjdk17?

[https://github.com/apache/calcite/pull/2879/checks?check_run_id=8145883973]

I reviewed. Great, clean code. It's great to see the confusing nested class {{Geometry.Geom}} disappear from all over the code. Also great that value strings are clearer (e.g. '\{x:1, y:2.1}' becomes 'POINT (1 2.1)').

A few cosmetic changes to make the code more consistent with the rest of Calcite:
 * Make sure there is a blank line between the javadoc description and the first @param (for example in {{SpatialTypeUtils.fromWKB}})
 * The house style is to convert acronyms to camel-case, so can you change {{fromWKB}} to {{fromWkb}}. But don't change function names that appear in SQL via reflection (e.g. "ST_MakePoint").
 * In "SpatialTypeUtilsTest" rename "fromEWKT" to "testFromEwkt" and "asEWKT" to "testAsAwkt" to keep the tradition that test names start with "test".

I saw you added 'round' as a SQL function. That's clever, and makes sense, but let's give it a different name so that no one confuses it with the built-in (and standard) ROUND function.

The failure on openjdk17 was a known flakiness issue. Nothing to do with you. I restarted, and it passed.

As soon as you make those changes, I'll squash and merge into main.

The changes are so clear that I think I will squash into a single commit. I apologize for that, after I asked you to keep the commits separate. If anyone needs to do detective work later, the separate commits will still be in the PR.

Thank you for the feedback. I applied the cosmetic changes. Do not hesitate to let me know if I missed something.

The 'round' method was named as 'roundGeom' in SQL. I now consistently use 'roundGeom' in java and SQL. Initially, I wanted to apply roundGeom to the output of the tests instead of adding the function to SQL, however, I havn't find an elegant way to limit the effect of this change to the spatial functions.

I think it was good to go through all the test cases again with a separate commit. The first iterations had a couple of quick and dirty fixes and your suggestion helped me spotting several issues.

 

 

I just noticed your comments 'Add WKB support' and 'Add GeoJSON support'. So there are new functions:
 * ST_AsEWKT
 * ST_AsGeoJSON
 * ST_AsWKB
 * ST_GeomFromGeoJSON
 * ST_GeomFromWKB
 * ST_GeomFromWKB

Since that's new functionality, I'm going to make it a new Jira case. (And a separate line in the release notes.) There will be changes required to spatial.iq and reference.md to complete the task.

I'll shortly commit what you have already (minus those functions).

Sounds great! Also, note that ST_Transform is now working as expected: it changes the SRID and reprojects the geometry. Hence the changes in spatial.iq at lines 455 and 464.

Fixed in [250d13c5|https://github.com/apache/calcite/commit/250d13c566913ba541ddd7ac4c4443a11a1a976b]; thanks, [~bchapuis]!

[~bchapuis], I have logged CALCITE-5262 for the remaining work; assign it to yourself if you are able to work on it.

[~julianhyde] My future plan is to use calcite in baremaps to produce vector tiles. Having JTS was a first step, but I'm interested in contributing additional functions. Should I create one issue per function? Some of them may be quite significant (e.g. ST_AsMVT, ST_AsMVTGeom, ST_TileEnvelope).

[https://github.com/baremaps/baremaps]

[https://demo.baremaps.com/]

 

Regarding commit and jira case granularity.

You should try to "right-size" commits. If a group of functions are related, and the resulting code changes are not-too-large and not-too-small, it makes sense to put them in the same commit. Also, each commit ends up as a line in the release notes, so the commit message will be the main way that users find out what's in the project.

But we also encourage people to create "forward-looking" jira cases, to talk about largish features they'd like to accomplish, and let others join the discussion, share in the work. Those cases might turn out to be too large to accomplish in one commit. In which case, each time you have a self-contained set of work to commit, log a jira case describing that work, and reference the larger "umbrella" or "epic" case.

Obviously, each commit must be self-contained, in that it contains tests and documentation as well as the code.

When you've logged a case or cases about vector tiles, I'll comment more there. I am interested in strategies that implement spatial queries using clever materialized views in vanilla databases (i.e. organized using sorting and hashing but not spatial data structures like r-trees) and in CALCITE-2610 I found that rectangular grids were useful. A next step would be to use bitmap operations on raster tiles.

Resolved in release 1.32.0 (2022/09/10)

Are these spatial libraries required for Calcite users that don't use these spatial functions, or optional?  Ideally there is optionality / modularity so that people consciously choose what they want/need instead of a heavy kitchen-sink with greater (albeit low) risk of a CVE.

You're not the first to ask for this. My concern is that, while many people agree that the cake should be cut into smaller pieces, there are many opinions where to cut. This could be done, but it's not a small task, and for people who want to use spatial features, like would be a little bit harder.

[~dsmiley] [~julianhyde] Given the popularity of JTS and Proj4j, the main problem I see is that other projects may include different versions in their classpath. Something we should also consider is that more advanced functions such as `ST_AsMVT` may require additional dependencies. Finally, it may be nice to have a schema factory dedicated to creating schemas with spatial features. Notice that in postgres, you don't have spatial features without explicitly creating an extension (`CREATE EXTENSION postgis;`)

{quote}
other projects may include different versions [of JTS and Proj4j] in their classpath
{quote}

If those projects follow semantic versioning, we should be OK. We, and the other projects, can easily upgrade to the latest version, which will have all the features needed by us and the other projects.

Shading is often suggested as a solution to this problem, but causes other problems (e.g. unaddressed security issues).

Calcite's policy with Guava has been to support - and test against - a wide range of versions.

