Can we disable this test while investigating the root cause?

Similar typehints error: https://ci-beam.apache.org/job/beam_PreCommit_Python_Commit/14536/

Doesn't reproduce on my machine running Python 2.7.14.

Okay, reproduces now after having upgraded virtualenv and tox on the virtual environment I was using.

Looks like sometimes strings are typing.ByteString, and Beam doesn't support that and converts to Any.
Why though does typing.List[bytes] become typing.List[typing.ByteString], and don't these always fail?

I can recreate the failure pretty reliably:
{code}
for i in $(seq 100); do tox -e py27-cython -- apache_beam/dataframe/ apache_beam/transforms/ apache_beam/typehints/ || break; done
{code}

I can't explain it though, but since it only happens on py27-cython as far as we know, I think the best option is to disable py27-cython since Python 2.7 support is going away.

Would this count as a regression for the 2.24.0 release? And how likely is it to happen in real user pipelines? Unfortunately 2.24.0 is still supposed to support Python 2.7, so this bug might need to get fixed regardless if it would impact users.

I suppose another alternative is to just add this as a known issue and suggest python 2.7 users stick with 2.23.0.

The bug title is misleading.
Since Beam is converting ByteString to Any, the resulting hint is less strict.
It will weakens type checking in certain cases, but not break existing pipelines.

I wouldn't count this as a regression but put it as a known issue in the release blog.
No idea how likely it is (root cause is unknown).

It only affects users who launch jobs from a virtualenv with cython installed.
One workaround would be to uninstall cython and apache-beam and reinstall only apache-beam.


This error is not limited to Cython: https://issues.apache.org/jira/browse/BEAM-10766

If it can be reproduced reliably, you may be able to  find a culprit via git bisect, since this seems a recent error. Also, is it limited to Py 2.7?

Adding 1000 extra test cases makes the failures more likely. My assumption is that another test is affecting the results so there's a better chance that some of these will insert themselves in the correct order. (Side note: we're using pytest-xdist which seems to non-deterministically split and order the tests among subprocesses.)

{code}
  @parameterized.expand((i,) for i in range(1000))
  def test_bytestring(self, unused_param):
    self.assertEqual(typehints.List[bytes], convert_to_beam_type(typing.List[bytes]))
{code}

This has been identified as an issue with new code modifying the __args__ typing module types. Since these are cached, modifying List[str].__args__ affects all current and future instances of List[str].

Closing this in favor of https://issues.apache.org/jira/browse/BEAM-10766

