hachikuji commented on pull request #6235: KAFKA-7540; Retry coordinator lookup to fix transient failure
URL: https://github.com/apache/kafka/pull/6235
 
 
   Seems like a good idea to retry FindCoordinator requests in test cases. If lookup fails, then we get the `ArrayIndexOutOfBoundsException`. At a minimum, this should get us to a better indication of the problem.
   
   ### Committer Checklist (excluded from commit message)
   - [ ] Verify design and implementation 
   - [ ] Verify test coverage and CI build status
   - [ ] Verify documentation (including upgrade notes)
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


hachikuji commented on pull request #6235: KAFKA-7540; Retry coordinator lookup to fix transient failure
URL: https://github.com/apache/kafka/pull/6235
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


Going to go on a limb and resolve this. Please reopen if the problem reoccurs.

Reopening this to get it fixed for `2.2` release.

[https://builds.apache.org/blue/organizations/jenkins/kafka-2.2-jdk8/detail/kafka-2.2-jdk8/22/changes/]
{quote}java.lang.ArrayIndexOutOfBoundsException: -1
at kafka.integration.KafkaServerTestHarness.killBroker(KafkaServerTestHarness.scala:146)
at kafka.api.ConsumerBounceTest.checkCloseWithCoordinatorFailure(ConsumerBounceTest.scala:252)
at kafka.api.ConsumerBounceTest.testClose(ConsumerBounceTest.scala:225){quote}

Failed again: [https://builds.apache.org/blue/organizations/jenkins/kafka-2.2-jdk8/detail/kafka-2.2-jdk8/52/tests]

New stack trace: [https://builds.apache.org/job/kafka-pr-jdk11-scala2.12/3925/testReport/junit/kafka.api/ConsumerBounceTest/testClose/]
{quote}java.util.concurrent.ExecutionException: java.lang.AssertionError: Close finished too quickly 5999 at java.base/java.util.concurrent.FutureTask.report(FutureTask.java:122) at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191) at kafka.api.ConsumerBounceTest.checkCloseWithClusterFailure(ConsumerBounceTest.scala:288) at kafka.api.ConsumerBounceTest.testClose(ConsumerBounceTest.scala:219){quote}

Removed Fix Version 2.2.1 as this issue is not blocking that release.

One more: [https://builds.apache.org/job/kafka-pr-jdk11-scala2.12/4939/testReport/junit/kafka.api/ConsumerBounceTest/testClose/]

[https://builds.apache.org/job/kafka-pr-jdk11-scala2.13/885/testReport/junit/kafka.api/ConsumerBounceTest/testClose/]

[https://builds.apache.org/job/kafka-pr-jdk11-scala2.13/2549/]
{quote}org.apache.kafka.common.KafkaException: Socket server failed to bind to localhost:38922: Address already in use. at kafka.network.Acceptor.openServerSocket(SocketServer.scala:632) at kafka.network.Acceptor.<init>(SocketServer.scala:508) at kafka.network.SocketServer.createAcceptor(SocketServer.scala:271) at kafka.network.SocketServer.$anonfun$createDataPlaneAcceptorsAndProcessors$1(SocketServer.scala:240) at kafka.network.SocketServer.$anonfun$createDataPlaneAcceptorsAndProcessors$1$adapted(SocketServer.scala:238) at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:553) at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:551) at scala.collection.AbstractIterable.foreach(Iterable.scala:921) at kafka.network.SocketServer.createDataPlaneAcceptorsAndProcessors(SocketServer.scala:238) at kafka.network.SocketServer.startup(SocketServer.scala:121) at kafka.server.KafkaServer.startup(KafkaServer.scala:263) at kafka.utils.TestUtils$.createServer(TestUtils.scala:158) at kafka.integration.KafkaServerTestHarness.$anonfun$setUp$1(KafkaServerTestHarness.scala:102) at scala.collection.IterableOnceOps.foreach(IterableOnce.scala:553) at scala.collection.IterableOnceOps.foreach$(IterableOnce.scala:551) at scala.collection.AbstractIterable.foreach(Iterable.scala:921) at kafka.integration.KafkaServerTestHarness.setUp(KafkaServerTestHarness.scala:101) at kafka.api.IntegrationTestHarness.doSetup(IntegrationTestHarness.scala:93) at kafka.api.IntegrationTestHarness.setUp(IntegrationTestHarness.scala:84) at kafka.api.AbstractConsumerTest.setUp(AbstractConsumerTest.scala:78){quote}

Since this is not a blocker issue, as part of the 2.6.0 release process I'm changing the fix version to `2.6.1` and `2.7.0`. If this is incorrect, please respond and discuss on the "[DISCUSS] Apache Kafka 2.6.0 release" discussion mailing list thread.

[https://builds.apache.org/job/kafka-pr-jdk8-scala2.12/3496/testReport/junit/kafka.api/ConsumerBounceTest/testClose/]
{quote}java.lang.AssertionError: Assignment did not complete on time at org.junit.Assert.fail(Assert.java:89) at org.junit.Assert.assertTrue(Assert.java:42) at kafka.api.ConsumerBounceTest.checkClosedState(ConsumerBounceTest.scala:486) at kafka.api.ConsumerBounceTest.checkCloseWithCoordinatorFailure(ConsumerBounceTest.scala:257) at kafka.api.ConsumerBounceTest.testClose(ConsumerBounceTest.scala:220){quote}

https://builds.apache.org/job/kafka-pr-jdk11-scala2.13/7618

{code:java}
20:08:12 kafka.api.ConsumerBounceTest > testClose FAILED
20:08:12     java.lang.AssertionError: Assignment did not complete on time
20:08:12         at org.junit.Assert.fail(Assert.java:89)
20:08:12         at org.junit.Assert.assertTrue(Assert.java:42)
20:08:12         at kafka.api.ConsumerBounceTest.checkClosedState(ConsumerBounceTest.scala:486)
20:08:12         at kafka.api.ConsumerBounceTest.checkCloseWithCoordinatorFailure(ConsumerBounceTest.scala:257)
20:08:12         at kafka.api.ConsumerBounceTest.testClose(ConsumerBounceTest.scala:220)
{code}


[~hachikuji] Could I take over this issue? It is flaky on my Jenkins :(

This not a blocker so I'm removing the fix version from this issue.  When we have another PR for this we can add the "fix version" field at that point vs. continually updating the "fix version" with each release.

I had filed a PR to fix this flaky. 

https://github.com/apache/kafka/pull/9128

https://github.com/apache/kafka/pull/9696/checks?check_run_id=1520813832
{code:java}
java.lang.AssertionError: Assignment did not complete on time
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.assertTrue(Assert.java:42)
	at kafka.api.ConsumerBounceTest.checkClosedState(ConsumerBounceTest.scala:486)
	at kafka.api.ConsumerBounceTest.checkCloseWithCoordinatorFailure(ConsumerBounceTest.scala:257)
	at kafka.api.ConsumerBounceTest.testClose(ConsumerBounceTest.scala:220) {code}

[https://github.com/apache/kafka/pull/9997/checks?check_run_id=1827542034]
{code:java}
org.opentest4j.AssertionFailedError: Assignment did not complete on time ==> expected: <true> but was: <false>
  at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)
  at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:40)
  at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:193)
  at kafka.api.ConsumerBounceTest.checkClosedState(ConsumerBounceTest.scala:486)
  at kafka.api.ConsumerBounceTest.checkCloseWithCoordinatorFailure(ConsumerBounceTest.scala:257)
  at kafka.api.ConsumerBounceTest.testClose(ConsumerBounceTest.scala:220)
{code}
STDOUT
{code:java}
[2021-02-04 01ː55ː43,911] ERROR [Consumer clientId=ConsumerTestConsumer, groupId=fatal-exception-test] JoinGroup failed due to fatal error: The consumer group has reached its max size. (org.apache.kafka.clients.consumer.internals.AbstractCoordinator:636)
[2021-02-04 01ː55ː43,913] ERROR [daemon-consumer-assignment]: Error due to (kafka.api.AbstractConsumerTest$ConsumerAssignmentPoller:76) org.apache.kafka.common.errors.GroupMaxSizeReachedException: Consumer group fatal-exception-test already has the configured maximum number of members.
[2021-02-04 01ː56ː22,198] ERROR [Consumer clientId=ConsumerTestConsumer, groupId=group-max-size-test] JoinGroup failed due to fatal error: The consumer group has reached its max size. (org.apache.kafka.clients.consumer.internals.AbstractCoordinator:636)
[2021-02-04 01ː56ː22,199] ERROR [daemon-consumer-assignment]: Error due to (kafka.api.AbstractConsumerTest$ConsumerAssignmentPoller:76) org.apache.kafka.common.errors.GroupMaxSizeReachedException: Consumer group group-max-size-test already has the configured maximum number of members.
{code}

This test case is now very consistently failing with a different error message:

https://ci-builds.apache.org/blue/organizations/jenkins/Kafka%2Fkafka-pr/detail/PR-11887/1/tests/

{code}
java.lang.NullPointerException
	at kafka.api.ConsumerBounceTest.checkClosedState(ConsumerBounceTest.scala:492)
	at kafka.api.ConsumerBounceTest.checkCloseWithCoordinatorFailure(ConsumerBounceTest.scala:258)
	at kafka.api.ConsumerBounceTest.testClose(ConsumerBounceTest.scala:220)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{cide}

