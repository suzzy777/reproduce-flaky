There are several use cases for using shared-storage for datanode block storage in an HDFS environment (storing cold blocks on a NAS device, Amazon S3, etc.).

With shared-storage, there is a distinction between:
# a distinct physical copy of a block
# an access-path to that block via a datanode.  

A single 'replication count' metric cannot accurately capture both aspects.  However, for most of the current uses of 'replication count' in the Namenode, the "number of physical copies" aspect seems to be the appropriate semantic.

I propose altering the replication counting algorithm in the Namenode to accurately infer distinct physical copies in a shared storage environment.  With HDFS-5115, a {{StorageID}} is a UUID.  I propose associating some minor additional semantics to the {{StorageID}} - namely that multiple datanodes attaching to the same physical shared storage pool should report the same {{StorageID}} for that pool.  A minor modification would be required in the DataNode to enable the generation of {{StorageID}} s to be pluggable behind the {{FsDatasetSpi}} interface.  

With those semantics in place, the number of physical copies of a block in a shared storage environment can be calculated as the number of _distinct_ {{StorageID}} s associated with that block.

Consider the following combinations for two {{(DataNode ID, Storage ID)}} pairs {{(DN_A, S_A) (DN_B, S_B)}} for a given block B:
* {{DN_A != DN_B && S_A != S_B}} - *different* access paths to *different* physical replicas (i.e. the traditional HDFS case with local disks)
** &rarr; Block B has {{ReplicationCount == 2}}
* {{DN_A != DN_B && S_A == S_B}} - *different* access paths to the *same* physical replica (e.g. HDFS datanodes mounting the same NAS share)
** &rarr; Block B has {{ReplicationCount == 1}}

For example, if block B has the following location tuples:
* {{DN_1, STORAGE_A}}
* {{DN_2, STORAGE_A}}
* {{DN_3, STORAGE_B}}
* {{DN_4, STORAGE_B}},

the effect of this proposed change would be to calculate the replication factor in the namenode as *2* instead of *4*.
