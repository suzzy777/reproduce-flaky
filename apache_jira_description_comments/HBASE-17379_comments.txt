Also fixed potential bug in drain() where pipeline.size() should be taken inside the synchronization block - otherwise there may be ImmutableSegment left behind.

Now after this fix, most of the usages of pipeline state is being synchronized. Still there are some left..  We need make them also safe?

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 12s {color} | {color:blue} Docker mode activated. {color} |
| {color:blue}0{color} | {color:blue} patch {color} | {color:blue} 0m 1s {color} | {color:blue} The patch file was not named according to hbase's naming conventions. Please see https://yetus.apache.org/documentation/0.3.0/precommit-patchnames for instructions. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red} 0m 0s {color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 2m 49s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 36s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 44s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 41s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 27s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 40s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 35s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 35s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 43s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 14s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 25m 22s {color} | {color:green} Patch does not cause any errors with Hadoop 2.6.1 2.6.2 2.6.3 2.6.4 2.6.5 2.7.1 2.7.2 2.7.3 or 3.0.0-alpha1. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 50s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 26s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 90m 38s {color} | {color:green} hbase-server in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 14s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 127m 39s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.12.3 Server=1.12.3 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12844796/17379.v1.txt |
| JIRA Issue | HBASE-17379 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux a2b290bc73f8 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / 5ffbd4a |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/5060/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/5060/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



Patch v2 adds synchronization for the other references to pipeline.

Do we now have an added synchronize on every get? Did we have this previously?

Addition of extra synchronization follows Anoop's comment.

Protection is needed in the following case:
{code}
      return new MemstoreSize(getSegmentsKeySize(pipeline), getSegmentsHeapOverhead(pipeline));
{code}
where pipeline is accessed twice in the same method.

Is there particular method you think synchronization is not needed ?

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 11s {color} | {color:blue} Docker mode activated. {color} |
| {color:blue}0{color} | {color:blue} patch {color} | {color:blue} 0m 1s {color} | {color:blue} The patch file was not named according to hbase's naming conventions. Please see https://yetus.apache.org/documentation/0.3.0/precommit-patchnames for instructions. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red} 0m 0s {color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 2m 48s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 35s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 45s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 42s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 26s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 39s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 36s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 36s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 44s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 25m 23s {color} | {color:green} Patch does not cause any errors with Hadoop 2.6.1 2.6.2 2.6.3 2.6.4 2.6.5 2.7.1 2.7.2 2.7.3 or 3.0.0-alpha1. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 54s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 27s {color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 97m 1s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 15s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 134m 9s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.12.3 Server=1.12.3 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12844836/17379.v2.txt |
| JIRA Issue | HBASE-17379 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux a2dea51305fa 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / ccb8d67 |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/5065/artifact/patchprocess/patch-unit-hbase-server.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/5065/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/5065/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



{code}
Flaked tests: 
org.apache.hadoop.hbase.master.balancer.TestDefaultLoadBalancer.testBalanceClusterOverall(org.apache.hadoop.hbase.master.balancer.TestDefaultLoadBalancer)
  Run 1: TestDefaultLoadBalancer.testBalanceClusterOverall:152 null
  Run 2: TestDefaultLoadBalancer.testBalanceClusterOverall:152 null
  Run 3: PASS

org.apache.hadoop.hbase.regionserver.wal.TestAsyncLogRolling.testLogRollOnDatanodeDeath(org.apache.hadoop.hbase.regionserver.wal.TestAsyncLogRolling)
  Run 1: TestAsyncLogRolling.testLogRollOnDatanodeDeath:65 expected:<1> but was:<0>
  Run 2: PASS

org.apache.hadoop.hbase.security.visibility.TestVisibilityLabelReplicationWithExpAsString.testVisibilityReplication(org.apache.hadoop.hbase.security.visibility.TestVisibilityLabelReplicationWithExpAsString)
  Run 1: TestVisibilityLabelReplicationWithExpAsString>TestVisibilityLabelsReplication.testVisibilityReplication:265 null
  Run 2: PASS
{code}
The failures from above flaky tests were not related to the patch.

[~anastas], [~eshcar] -FYI.

Synchronization in removeLast, addFirst(), swapSuffix() is not necessary. Already the caller is synchronized.

Under drain() moving the size under sync is harmless. I think it is fine even if not done because we will be having the updatesLock obtained that time.

getTailSize(), getPipelineSize() and getScanners() we need synchronization. 

validateSuffixList() is unused.  

Thanks for the patch Ted.




Patch v3 addresses Ram's comments.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 13s {color} | {color:blue} Docker mode activated. {color} |
| {color:blue}0{color} | {color:blue} patch {color} | {color:blue} 0m 1s {color} | {color:blue} The patch file was not named according to hbase's naming conventions. Please see https://yetus.apache.org/documentation/0.3.0/precommit-patchnames for instructions. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red} 0m 0s {color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 2m 46s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 35s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 44s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 42s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 27s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 39s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 35s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 35s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 44s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 14s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 25m 10s {color} | {color:green} Patch does not cause any errors with Hadoop 2.6.1 2.6.2 2.6.3 2.6.4 2.6.5 2.7.1 2.7.2 2.7.3 or 3.0.0-alpha1. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 49s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 26s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 80m 26s {color} | {color:green} hbase-server in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 14s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 117m 12s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.12.3 Server=1.12.3 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12844882/17379.v3.txt |
| JIRA Issue | HBASE-17379 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux 55921c795631 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / da97569 |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/5067/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/5067/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



Hi
[~ted_yu] some of the changes you suggest here may conflict with the patch I just attached in HBASE-17373 for resolving the bug found by TestAsyncTableGetMultiThreaded.
For example, I removed the method drain. Might be better to solve these issues one at a time to avoid such conflicts.

The idea behind the original design of the compaction pipeline was to reduce synchronization as much as possible, only use synchronization where it is necessary for correctness.
Write-write conflicts in the pipeline are generally handled by using a lock + version number, which also prevents conflicting operation to happen even when they are not concurrent.
So what needs to be handled (the problem that is captured in the current failure) are read-write conflicts.
Wrapping pipeline with a synchronize block whenever used is a correct solution but might block operations even when not necessary. For example it does not allow concurrent reads.

May I suggest to use one of Java's thread safe lists for the pipeline; The list here is not long. We can go through all possible alternatives (there are not many) and see which implementation best fits our case. Specifically, one that allows concurrent reads and prevents concurrent read-write operations.
We'll still need to use the synchronize blocks whenever we need to atomically update the pipeline and the version number as we do now.

I agree with Eshcar. 

Generally, the immediate solution is to add lock (synchronize on pipeline) around getScanners() as it is done with getSegments() and this is needed. I agree with moving the operation of taking the size() under the lock in "already not existing" drain() method.

Pay attention that adding lock around isEmpty() is problematic as its call is surrounded by the lock as well and it may cause deadlock.



How about using read write lock in place of synchronizing on pipeline ?

w.r.t. isEmpty(), it is only called by MemStoreCompactor#start()
MemStoreCompactor#start() later calls compactingMemStore.getImmutableSegments() which ends up calling pipeline.getVersionedList().

pipeline.getVersionedList() can return a singleton VersionedSegmentsList (created as static variable of pipeline) if the pipeline is empty.

This way isEmpty() can be made private so that synchronization is done by the callers.

Using ReentrantReadWriteLock makes the above refactoring unnecessary.

I agree that using a read write lock would be a valid solution. 
However thread safe data structures are usually optimized to work better than just using a coarse-grain lock, even a read-write lock.
It is also important to carefully read the documentation of each implementation and see the tradeoffs it exhibits, and choose the one that is best for the use case.

Patch v4 uses ReentrantReadWriteLock in place of the synchronize primitive.

You use read lock in flattening method since it changes the content of the segment and not the list itself?

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 12s {color} | {color:blue} Docker mode activated. {color} |
| {color:blue}0{color} | {color:blue} patch {color} | {color:blue} 0m 1s {color} | {color:blue} The patch file was not named according to hbase's naming conventions. Please see https://yetus.apache.org/documentation/0.3.0/precommit-patchnames for instructions. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red} 0m 0s {color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 2m 58s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 40s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 46s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 14s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 51s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 29s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 45s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 40s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 40s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 46s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 17s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 27m 28s {color} | {color:green} Patch does not cause any errors with Hadoop 2.6.1 2.6.2 2.6.3 2.6.4 2.6.5 2.7.1 2.7.2 2.7.3 or 3.0.0-alpha1. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 2m 2s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 30s {color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 88m 28s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 14s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 128m 37s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.hbase.regionserver.TestHRegionWithInMemoryFlush |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.11.2 Server=1.11.2 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12844927/17379.v4.txt |
| JIRA Issue | HBASE-17379 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux a5de7538c87f 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / da97569 |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/5072/artifact/patchprocess/patch-unit-hbase-server.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-HBASE-Build/5072/artifact/patchprocess/patch-unit-hbase-server.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/5072/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/5072/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



w.r.t. the type of lock taken in flattenYoungestSegment(), I think a write lock may be more appropriate.

Seems the test failed with timeout, might be a deadlock.
We are out for a long weekend starting tomorrow.
Mind if we take a look at this again more closely early next week?

Thanks [~eshcar] (and [~anastas]). I was worried that applying blind synchronizations, while it might 'fix' the problem, we'd just be causing new issues instead.

Loads of work has been done to undo synchronizations in read and write. Lets be careful adding them back.

Lets have no locking.

Sure. Can we revert meantime? If so, what would we revert? Thanks [~eshcar]

The test failure was caused by HBASE-17081.

Considering the formulation of proper fix would take time, I suggest reverting HBASE-17081

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 10s {color} | {color:blue} Docker mode activated. {color} |
| {color:blue}0{color} | {color:blue} patch {color} | {color:blue} 0m 1s {color} | {color:blue} The patch file was not named according to hbase's naming conventions. Please see https://yetus.apache.org/documentation/0.3.0/precommit-patchnames for instructions. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red} 0m 0s {color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 3m 1s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 35s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 44s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 14s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 42s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 26s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 39s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 35s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 35s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 43s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 25m 15s {color} | {color:green} Patch does not cause any errors with Hadoop 2.6.1 2.6.2 2.6.3 2.6.4 2.6.5 2.7.1 2.7.2 2.7.3 or 3.0.0-alpha1. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 50s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 27s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 78m 17s {color} | {color:green} hbase-server in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 15s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 115m 26s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.11.2 Server=1.11.2 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12844938/17379.v5.txt |
| JIRA Issue | HBASE-17379 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux ce3d66dd4c9d 3.13.0-103-generic #150-Ubuntu SMP Thu Nov 24 10:34:17 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / da97569 |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/5075/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/5075/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



If you think about it the bug was there all the time since we first introduced the compacting pipeline. 
Consider a get operation and in-memory compaction or a flush to disk running concurrently. The former scans the pipeline while the later changes it. 
HBASE-17081 just caused the to be visible, reverting it won't fix the bug.
[~stack] I agree we should minimize synchronization. But we do need some synchronization to avoid ConcurrentModificationException in such cases.

So here is a suggestion -- [~ted_yu] let me know what you think:
Use a read-write lock.
All operations that update the pipeline  /or its version number use the write lock.
Only one (new) private method uses the read lock: cloneListForReadOnly(). It holds the lock  for a very short period in which it clones the list and returns the result.
All public read-only methods like get size and get scanners, first invoke cloneListForReadOnly() and then do whatever they need with the cloned list. With this solution no concurrent modification exception can occur.
Great.
Now, you might claim that this solution creates a lot of garbage.
To avoid this garbage the method cloneListForReadOnly() can cache the cloned list in the CompactionPipeline object and return the same cloned list when invoked again. A dirty bit indicates wether the cloned list is valid. Updating methods set the dirty bit on (under the write lock) and cloneListForReadOnly() set the bit off whenever creating a new clone.

bq. stack I agree we should minimize synchronization. But we do need some synchronization to avoid ConcurrentModificationException in such cases.

We have worked with this pattern elsewhere [~eshcar]. Lets be careful adding in new locking. Crossing the synchronization may be fast when uncontended but when many threads,  it requires coordination which throttles throughput.

In other places we've done copy-on-write or we've done explicit versioned views (changes in pipeline happen orders of magnitude less often than gets... we should make use of this fact). I can try dig up a soln. that would work here if needed if it'd help.

Meantime, let us revert the aggravating patch, HBASE-17081 so you can have the weekend free.

Patch v6 fixes a bug in patch v5 where pullTail() should have taken the write lock.

I understand there is more work (copy-on-write, etc) to be done for future patches.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 12s {color} | {color:blue} Docker mode activated. {color} |
| {color:blue}0{color} | {color:blue} patch {color} | {color:blue} 0m 1s {color} | {color:blue} The patch file was not named according to hbase's naming conventions. Please see https://yetus.apache.org/documentation/0.3.0/precommit-patchnames for instructions. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red} 0m 0s {color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 3m 4s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 35s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 45s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 14s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 2m 2s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 29s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 44s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 40s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 40s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 49s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 14s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 27m 18s {color} | {color:green} Patch does not cause any errors with Hadoop 2.6.1 2.6.2 2.6.3 2.6.4 2.6.5 2.7.1 2.7.2 2.7.3 or 3.0.0-alpha1. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 2m 3s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 29s {color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 88m 23s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 16s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 128m 36s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.hbase.master.procedure.TestMasterProcedureWalLease |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.11.2 Server=1.11.2 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12844961/17379.v6.txt |
| JIRA Issue | HBASE-17379 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux c1663e9cee53 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / da97569 |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/5077/artifact/patchprocess/patch-unit-hbase-server.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-HBASE-Build/5077/artifact/patchprocess/patch-unit-hbase-server.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/5077/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/5077/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



TestHRegionWithInMemoryFlush passed:
{code}
Tests run: 106, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 97.854 sec - in org.apache.hadoop.hbase.regionserver.TestHRegionWithInMemoryFlush
{code}

TestMasterProcedureWalLease failure was not related.

I think it is more important to make things right first, and then make things fast. So I always say that use lock first, if later you find out that it is the bottleneck then try to make it lock-free.

But I do not think the way that we add locking for CompactionPipeline here is right. You need to have a locking schema in your mind first, and then implement it with your code. If you find something wrong, the first thing should be that, reconsider your locking schema, maybe it is wrong. I do not think it is a good idea to fix concurreny issues by introducing locks at the places where ConcurrentModificationException occurs. This will make the code unreadable very very quickly.

So I think we'd better leave this issue to [~eshcar] and [~anastas] as they are the designer and maintainer of this feature and know what is going on here. And I also agree that we need to fix the failing test first. If we do not want to revert HBASE-17081, then we need to find another simple way to hide the problem first as it makes the pre commit job unstable.

My two cents. Thanks.

I am working on a patch which doesn't add extra synchronization.

I am willing to work with Eshcar and Anastasia to incorporate all the review feedbacks.

bq. I am working on a patch which doesn't add extra synchronization.

Work on something else as per [~Apache9] suggestion above.

bq. I think it is more important to make things right first, and then make things fast. So I always say that use lock first, if later you find out that it is the bottleneck then try to make it lock-free.

Thanks for the input [~Apache9] Helpful. On the general prescription, I agree. In this particular case though, we have seen this pattern before and the background is that a bunch of hard work has been done to undo locking in the read/write pipelines. The suggestion is that we expend some effort at trying to avoid locks in these critical perf sections rather than go the easy route and backfill synchronizations that are 'correct' but likely kill concurrency.

Patch v8 (based on commit da97569eae662ad90fd3afd98ef148c94eee4ac1) replaces implementation of pipeline with variant of CopyOnWriteArrayList (which doesn't support removeLast)

I have looped TestHRegionWithInMemoryFlush 9 times which passed.

17379.v14.txt is combination of v8 and patch v2 of HBASE-17373

Review board:
https://reviews.apache.org/r/55114/

Skimmed the CompactionPipeline, I'd say I‘m a little nervous...

We do not use lock for getMinSequenceId and getTailSize. If they are only called when preparing flush, no lock is fine as we will stop writing to memstore at that time. But getMinSequenceId is called after flush, I'm not sure if it is still safe to do not use a lock, and even do not know if the logic itself is correct if we do not have locks in the upper layer. And for getTailSize, there is also a reference from the doDelta method in HRegion without any lock...

We can easily make the class itself thread safe by introducing lock or thread safe collection or what ever you like, but this does not mean the logic is right. Flush and scan are both the very very critical parts of HBase, we need to be careful.

Thanks.

Thanks, all, for the comments, suggestions, and patches. I second [~stack] in his suggestion to let [~eshcar] and [~anastas] finish the job. We'll publish the precise synchronization scheme with the patch, and will also make it part of the programmer's manual/blog post (WIP in HBASE-16851). We also have a very comprehensive benchmark in HBASE-16417 - once the patch is ready we'll run it to make sure it does not hamper performance. 

bq. We'll publish the precise synchronization scheme

Looking forward to the synchronization scheme.

The synchronization scheme is as follows:
- use read-write lock, version number, and a dirty bit 
- methods which change the pipeline take a write lock, apply modification, set the dirty bit on, increase the version number if the suffix of the pipeline have changed, and finally release the lock.
- methods which read the pipeline invoke cloneListForReadOnly() and read the pipeline through the immutable clone.
- the method cloneListForReadOnly() takes a read lock, if the dirty bit is off returns the last clone of the pipeline, otherwise clones the pipeline (shallow clone), caches the clone, sets the dirty bit off, returns the clone, and finally releases the lock.

Maybe it was deadlock.
Though I reproduced the same error without any change in master branch - see HBASE-17400

Here is an even simpler synchronization scheme. [~stack] perhaps this is what you meant in first place. Bottom line no additional synchronization is needed beyond what we have in the original design.
- use a list (not thread safe), a version number and a clone of the list (also not thread safe, however immutable)
-  methods which change the pipeline take an exclusive lock, apply modification, increase the version number if the suffix of the pipeline have changed, set a new clone of the list, and finally release the lock
- methods which read the pipeline take a reference of the clone at the beginning of the method and then work only on the local copy of that clone.

With this we avoid any concurrent-modification-exception without introducing additional synchronization on read methods, including get and scan operations.

I would like to emphasize that the only reason we need this clone is to avoid this exception, and *there is no real need in getting an atomic view of the pipeline* for get and scan operations. 
Just as there is no atomic view of the active and snapshot segments in the default memstore, but yet the implementation is correct since it relies on finding the data on disk.
I can elaborate and give examples if this is not clear.



Regardless of the new clone, there are additional issues that need care.
For example, when computing the size of the pipeline (or its tail), which is now a pair and not a number, we need first create a local immutable clone of the object (pipeline/segment) and then compute the two parts of the size (data size and overhead size) using the *same* clone.


bq. ...no additional synchronization is needed beyond what we have in the original design.

If this is possible, that'd be great. Yeah, with Segments immutable and the lists too, hopefully we can reason a lockless memstore.

bq. methods which read the pipeline take a reference of the clone at the beginning of the method and then work only on the local copy of that clone.

I like the sound of the above.

What about min sequenceid accounting as referenced above by [~Apache9]. That has been tricky and a source of dataloss in the past.

Thanks [~eshcar]


Looking at the current trunk getTailSize() is only invoked from HStore::getSizeToFlush()->CompactingMemStore::getFlushableSize(), and the logic is equivalent to what happens in DefaultMemStore.

The method getMinSequenceId() is invoked from updateLowestUnflushedSequenceIdInWAL().
The compacting pipeline maintains the following invariant ([~stack], [~Apache9], see if you agree with me):
Consider the series of segments at the tail of a pipeline over time. That is, we look at a specific pipeline over time and whenever its tail changes we add this segment tail to the end of the series. 
If we look at the minimal sequence number in all these segments by their order in the series we get a monotonically increasing series of numbers. 
Both flush and compaction maintain this invariant.
So when we get the minimal number of the tail, even with no lock, worst case scenario we retrieve a number that is *smaller* than the current minimal sequence number and we leave in the WAL some entries that could have been truncated. But this ok. They can be truncated next time we update the WAL.


I‘ve done a simple dig on the dropMemstoreContents related methods in HRegion. The function is introduced when implementing region replica. For the secondary region replica, it does not accept write so it is pretty easy to handle the concurrency issues. And later we take these operations to the primary regions, mainly because we want to handle the FileNotFoundException when scan. Not your fault, I will review the locking later.

And for getMinSequenceId, do we need to call updateLowestUnflushedSequenceIdInWAL after a flush? I'm not very familiar with in memory compaction so correct me if I'm wrong. After a MemStore compaction, the minSeqId may change because we may drop some old cells(think of we keep updating one cell?), so we want to tell the WAL that you can drop some old edits to prevent a flush triggered by too many wal files. So I think it is reasonable to call it after an in memory compaction. Why it is also called after a flush? We already have the logic to account sequence id for flush.

Thanks.

The current implementation of a compacting memstore only flushes the tail of the pipeline and not the entire content of the memstore, so the sequence id in the WAL mapping needs to be updated and not removed.
HBASE-17081 pushes the entire pipeline to a composite snapshot. This is planed to become the default flush behavior.
We plan to play with this possibilities in different policies and test performance in the context of HBASE-16417.

{quote}
The current implementation of a compacting memstore only flushes the tail of the pipeline and not the entire content of the memstore, so the sequence id in the WAL mapping needs to be updated and not removed.
{quote}

Then there is a problem. There is still a maxFlushedSeqId in HRegion which is used to track the max sequence id in the store files and we will report it HMaster. Seems you do not reset this value after flush, so if you do not flush all data in memstore then this value will be incorrect and may cause data loss. Although maybe we only consider the sequence id per store for now, this is still a potential bug.

So I think the right way is to modify the logic in internalPrepareFlushCache to get a different {{flushedSeqId}}, not reset when commit. Maybe we could move the unflushed/flushed sequence id accounting to memstore instead of WAL?

Thanks for looking into this [~Apache9].
I am opening a new Jira where we can continue the WAL discussion since it is unrelated to the concurrent-modification-exception.


Moved the discussion to HBASE-17407.

[~tedyu], three different folks suggested you NOT work on this patch and instead leave it to the owners of this part of the code who are willing and who have good ideas on how to address what is going on here. They don't need you to interpret their synchronization; they are more than capable themselves (You seem to be having difficulty doing so anyways given that version #5 up on review board seems to be seriously flawed going by the reviewers feedback). Please step aside. Help by reviewing their patches instead. Thanks.

I have been working with [~eshcar] on a desirable solution.

The latest patch is on:
https://reviews.apache.org/r/55114/

I have run TestHRegionWithInMemoryFlush 70 iterations with this patch which all passed.

Please disregard the patch posted around 3am this morning.

bq.Consider a get operation and in-memory compaction or a flush to disk running concurrently. The former scans the pipeline while the later changes it. 
Before HBASE-17081 - you mean the problem was there? Am not sure on that. The reversal of active/snapshot in another JIRA solves the problem where the snapshot is not updated. But regarding the pipeline during inmemory flush/compaction I think we were safe there.
I remember checking that part of the code. So when we keep adding it to the pipeline during in memory flush- first of all writes are blocked. So any read that starts at that point will have a readpt lesser than the current write's mvcc. So with that read pt it tries to create a scanner over the pipeline. 
So either the pipeline got added with the new segment or it was not added. In getscanners() we do getSegments() which was actually doing synchronize() on the pipeline. So that should have been enough to avoid any issues. (Not only concurrent modification but also data loss).
Now it was in HBASE-17081 where things were changed to use size() and pipeline#getScanners() which lacked synchronization. 
So we should be needing a do something like what getSegments() was doing previously. And I think that is unavoidable. But now whether to use a sync block or read/write lock is only the decision point here. 
[~eshcar]
Let me know what you think?  I also read thro your suggestion of using dirty bit to know if the cached version was really updated. Will that be really needed? 
In case we really want to know if the failing tests passes we actually should run the tests with HBASE-17081 in it. Otherwise I think this problem won't be coming up. 

bq. Before HBASE-17081 - you mean the problem was there?

Yes.  LinkedList iterators are fail-fast: if the list is structurally modified at any time after the iterator is created (except through the Iterator's own remove or add methods), the iterator throws a
ConcurrentModificationException. 
In our case, any for loop like the one below creates a list iterator. 
{code}
for(Segment s : pipeline) 
{code}
If the pipeline is being changed by an in-memory compaction or flush during the lifespan of this iterator we get this exception.
Apparently this happens in very rare cases and therefore we didn't get this exception before, however we need to acknowledge the bug and fix it.

bq.  I also read thro your suggestion of using dirty bit to know if the cached version was really updated. Will that be really needed? 

You're right.
We came up with a simpler solution which is essentially implementing copy-on-write in the compaction pipeline class. I will describe it again here:
Add a LinkedList attribute to the class called readOnlyCopy.
We already have the lock in all operations that modify the pipeline list. So in the context of these method, while holding the lock we add a line
{code} 
readOnlyCopy = new LinkedList<>(pipeline)
{code}
The methods that do not change the pipeline add a line
{code}
LinkedList<ImmutableSegments> localCopy = readOnlyCopy
{code}
and then continue to read/compute/iterate over their local copy which is read-only, and we avoid the exception.
This would be a clean simple solution to the problem.


bq.Apparently this happens in very rare cases and therefore we didn't get this exception before, however we need to acknowledge the bug and fix it.
My point was that in the current state that is not bound to occur is what I felt because we were doing the readOnlyCopy in getSegments() code and that is what was getting used in getScanners(). Ok, how ever I need to check if any where else we just do the plain iteration.
bq.and then continue to read/compute/iterate over their local copy which is read-only, and we avoid the exception.
I think this is what we need. Infact as am saying again that is how the earlier getScanners() were working. Now we may need to make use of that in all other places where we read from pipeline. 

Patch v27, published on review board, aligns with the copy-on-write semantics Eshcar described above in the compaction pipeline.
{quote}
while holding the lock we add a line

readOnlyCopy = new LinkedList<>(pipeline)
{quote}
For consecutive operations that modify the pipeline, the read only copy created by the first operation would be overwritten by successive (write) operation.

Patch v27 achieves copy-on-write semantics by using the volatile ImmutableSegment array as pipeline.
Read operations such as getScanners() would get CopyOnWriteIterator based on snapshot of this array which is immune to concurrent write operation(s).

The 70 iterations of TestHRegionWithInMemoryFlush were performed on top of HBASE-17081 and HBASE-17373.

I went over the patch. Still it seems much more complicated than it should or can be.

I went over the trunk code again, and I now see that [~ram_krish] was right.
The bug that is captured by the title of this patch indeed was introduced by HBASE-17081, and does not exist in trunk.
There are additional instances of the for loop which iterate over the pipeline linked list but they are guarded by a lock.

Hence the problem stated in the description of this patch should be fixed in the context of HBASE-17081.

However 2 additional points came up from the discussion in this Jira
(1) The method getTailSize()  in compacting pipeline is not atomic (in trunk), and
(2) a new copyOnWrite synchronization scheme for compaction pipeline.

I have a patch with the new synchronization scheme which fixes the bug in getTailSize() .
I think the new scheme is better since it removes the lock from getSegments() which is invoked many times, and it reduces the number of LinkedList objects that are created at runtime, thus can reduce GC(not by much, but still...).

I can post the patch here (it doesn't fix the problem stated but the related discussion is here), or
I can open a new Jira which clearly states what the patch is about.
??

Meanwhile, until we decide which way to go here is a link to RB
https://reviews.apache.org/r/55199/


[~eshcar]. Elegant code in RB. Please add high-level comments about the new synchronization scheme. 

bq. the problem stated in the description of this patch should be fixed in the context of HBASE-17081

I agree. Fix of this problem is for HBASE-17081.

bq. it doesn't fix the problem stated 

I would suggest focusing on the fix for concurrency issue illustrated in the description of this JIRA.

The new patch doesn't apply on top of HBASE-17081. Can you generate one which applies on HBASE-17081 branch ?

Do what you think best. Sub-task or new issue.

Regards this issue, you do not have to go via [~tedyu@apache.org]'s complicating 'interpretation' of your locking prescription. Feel free to post your own patch. Thanks.



| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 13s {color} | {color:blue} Docker mode activated. {color} |
| {color:blue}0{color} | {color:blue} patch {color} | {color:blue} 0m 2s {color} | {color:blue} The patch file was not named according to hbase's naming conventions. Please see https://yetus.apache.org/documentation/0.3.0/precommit-patchnames for instructions. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red} 0m 0s {color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 5m 55s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 32s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 41s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 18s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 40s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 31s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 37s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 31s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 31s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 39s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 0m 55s {color} | {color:red} The patch causes 270 errors with Hadoop v2.4.0. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 1m 50s {color} | {color:red} The patch causes 270 errors with Hadoop v2.4.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 2m 47s {color} | {color:red} The patch causes 270 errors with Hadoop v2.5.0. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 3m 42s {color} | {color:red} The patch causes 270 errors with Hadoop v2.5.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 4m 37s {color} | {color:red} The patch causes 270 errors with Hadoop v2.5.2. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 41s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 24s {color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 16m 7s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 14s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 56m 52s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.hbase.io.TestHeapSize |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.12.3 Server=1.12.3 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12846010/17379.HBASE-17081.v28.txt |
| JIRA Issue | HBASE-17379 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux c9f1c4932c0b 4.4.0-43-generic #63-Ubuntu SMP Wed Oct 12 13:48:03 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | HBASE-17081 / 1d235b9 |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/5162/artifact/patchprocess/patch-unit-hbase-server.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-HBASE-Build/5162/artifact/patchprocess/patch-unit-hbase-server.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/5162/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/5162/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 12s {color} | {color:blue} Docker mode activated. {color} |
| {color:blue}0{color} | {color:blue} patch {color} | {color:blue} 0m 1s {color} | {color:blue} The patch file was not named according to hbase's naming conventions. Please see https://yetus.apache.org/documentation/0.3.0/precommit-patchnames for instructions. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 2m 34s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 32s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 39s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 34s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 26s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 36s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 33s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 33s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 39s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 0m 56s {color} | {color:red} The patch causes 270 errors with Hadoop v2.4.0. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 1m 51s {color} | {color:red} The patch causes 270 errors with Hadoop v2.4.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 2m 46s {color} | {color:red} The patch causes 270 errors with Hadoop v2.5.0. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 3m 41s {color} | {color:red} The patch causes 270 errors with Hadoop v2.5.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 4m 37s {color} | {color:red} The patch causes 270 errors with Hadoop v2.5.2. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 41s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 24s {color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 79m 31s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 16s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 115m 49s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.hbase.regionserver.TestWalAndCompactingMemStoreFlush |
|   | hadoop.hbase.regionserver.TestCompactingMemStore |
|   | hadoop.hbase.regionserver.TestCompactingToCellArrayMapMemStore |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.12.3 Server=1.12.3 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12846029/17379.HBASE-17081.v29.txt |
| JIRA Issue | HBASE-17379 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux 4f3274f8a379 4.4.0-43-generic #63-Ubuntu SMP Wed Oct 12 13:48:03 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | HBASE-17081 / 1d235b9 |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/5165/artifact/patchprocess/patch-unit-hbase-server.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-HBASE-Build/5165/artifact/patchprocess/patch-unit-hbase-server.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/5165/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/5165/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



Patch v30 fixes a typo in isEmpty()

Created a new Jira HBASE-17434 to fix the bug of getTailSize() and change the synchronization scheme.

I don't see major difference between the latest patch (17379.HBASE-17081.v30.txt) and what is proposed in HBASE-17434.
Bug in getTailSize() is fixed here as well - actually it was fixed no later than Jan 3.

We all agree on copy on write semantics for the pipeline. It would be nice to put related discussion in one JIRA.

Patch v31 removes the lock in getSegments().

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 11s {color} | {color:blue} Docker mode activated. {color} |
| {color:blue}0{color} | {color:blue} patch {color} | {color:blue} 0m 2s {color} | {color:blue} The patch file was not named according to hbase's naming conventions. Please see https://yetus.apache.org/documentation/0.3.0/precommit-patchnames for instructions. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 5m 53s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 33s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 42s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 20s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 34s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 32s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 37s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 32s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 32s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 36s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 12s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 0m 55s {color} | {color:red} The patch causes 270 errors with Hadoop v2.4.0. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 1m 50s {color} | {color:red} The patch causes 270 errors with Hadoop v2.4.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 2m 45s {color} | {color:red} The patch causes 270 errors with Hadoop v2.5.0. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 3m 39s {color} | {color:red} The patch causes 270 errors with Hadoop v2.5.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 4m 34s {color} | {color:red} The patch causes 270 errors with Hadoop v2.5.2. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 41s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 25s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 75m 38s {color} | {color:green} hbase-server in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 22s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 115m 52s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.12.3 Server=1.12.3 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12846060/17379.HBASE-17081.v30.txt |
| JIRA Issue | HBASE-17379 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux 4fd2fb7892c1 4.4.0-43-generic #63-Ubuntu SMP Wed Oct 12 13:48:03 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | HBASE-17081 / 1d235b9 |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/5168/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/5168/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 15s {color} | {color:blue} Docker mode activated. {color} |
| {color:blue}0{color} | {color:blue} patch {color} | {color:blue} 0m 2s {color} | {color:blue} The patch file was not named according to hbase's naming conventions. Please see https://yetus.apache.org/documentation/0.3.0/precommit-patchnames for instructions. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 6m 29s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 42s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 53s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 22s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 2m 1s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 37s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 49s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 39s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 39s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 48s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 15s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 1m 14s {color} | {color:red} The patch causes 270 errors with Hadoop v2.4.0. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 2m 25s {color} | {color:red} The patch causes 270 errors with Hadoop v2.4.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 3m 37s {color} | {color:red} The patch causes 270 errors with Hadoop v2.5.0. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 4m 47s {color} | {color:red} The patch causes 270 errors with Hadoop v2.5.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 5m 58s {color} | {color:red} The patch causes 270 errors with Hadoop v2.5.2. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 2m 9s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 32s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 92m 31s {color} | {color:green} hbase-server in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 24s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 141m 56s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.11.2 Server=1.11.2 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12846075/17379.HBASE-17081.v31.txt |
| JIRA Issue | HBASE-17379 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux 14039bdca598 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | HBASE-17081 / 1d235b9 |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/5170/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/5170/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



Hi [~tedyu] it looks like this issue will be handled by HBASE-17434 and sorry to say I feel the approach of that JIRA has a slight edge because of below reasons:-
1) No extra looping or arraylist creation during method calls such as getVersionedList() and getSegments()
2) Relatively simpler add methods and no need of extra removeAll method.
Everyone please share your thoughts on this.

w.r.t. #1, asList() is cheap operation where the ArrayList just refers to the current pipeline (shallow copy):
{code}
    public static <T> List<T> asList(T... a) {
        return new ArrayList<>(a);
{code}
w.r.t. #2,
bq. no need of extra removeAll method
I commented on HBASE-17434, implementing copy on write at primitive method level (such as removeAll) is good practice since it frees developers the burden of having to make extra copy in application methods (such as swap).

w.r.t. read write lock, probably it is not needed since the operation under the lock is short where a regular lock (synchronized or ReentrantLock) is faster.

The extra ArrayList in getSegments() can be avoided.

However, CompactingMemStore expects List type to be returned. It is cleaner to adhere to the current API.

Hi [~tedyu] apologies for overlooking the Arrays.asList(..) method. Yes I agree its an easy operation and wouldnot cause extra burden.

Now I am slightly confused among the approaches of HBASE-17434 versus this v31 patch. I would leave it to others to express their opinions.

{quote}
       w.r.t. read write lock, probably it is not needed since the operation under the lock is short where a regular lock (synchronized or  ReentrantLock) is faster.
{quote}
I thought about one scenario which flashed to me just a moment ago which is consider the scenario where in since pipeline reference is reassigned, there is a possibility where in a thread succeeds in reassigning the pipeline reference and does the subsequent steps within the synchronized block and another thread comes in and tries to get monitor on the pipeline and succeeds as the reference has changed now which means incorrect behaviour as both threads succeeds to get inside the synchronized block at the same time.

Note that no matter we choose either of the approaches (either this or the HBASE - 17434) we need the ReentrantReadWriteLock which I have discussed in the HBASE-17434 Jira based on the above explaination


Thanks for the reminder.
Actually ReentrantReadWriteLock first appeared in 17379.v4.txt (Dec 28)

Let me incorporate your review comment.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 17s {color} | {color:blue} Docker mode activated. {color} |
| {color:blue}0{color} | {color:blue} patch {color} | {color:blue} 0m 2s {color} | {color:blue} The patch file was not named according to hbase's naming conventions. Please see https://yetus.apache.org/documentation/0.3.0/precommit-patchnames for instructions. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 3m 50s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 43s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 48s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 16s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 2m 7s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 29s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 45s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 38s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 38s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 48s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 15s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 1m 13s {color} | {color:red} The patch causes 270 errors with Hadoop v2.4.0. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 2m 21s {color} | {color:red} The patch causes 270 errors with Hadoop v2.4.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 3m 33s {color} | {color:red} The patch causes 270 errors with Hadoop v2.5.0. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 4m 47s {color} | {color:red} The patch causes 270 errors with Hadoop v2.5.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 6m 1s {color} | {color:red} The patch causes 270 errors with Hadoop v2.5.2. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 2m 7s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 33s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 98m 33s {color} | {color:green} hbase-server in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 29s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 146m 16s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.11.2 Server=1.11.2 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12846231/17379.HBASE-17081.v32.txt |
| JIRA Issue | HBASE-17379 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux 889e3ba11e33 3.13.0-105-generic #152-Ubuntu SMP Fri Dec 2 15:37:11 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | HBASE-17081 / 1d235b9 |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/5187/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/5187/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



Patch v33, with ReentrantReadWriteLock, passed TestHRegionWithInMemoryFlush 53 times locally.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 16s {color} | {color:blue} Docker mode activated. {color} |
| {color:blue}0{color} | {color:blue} patch {color} | {color:blue} 0m 2s {color} | {color:blue} The patch file was not named according to hbase's naming conventions. Please see https://yetus.apache.org/documentation/0.3.0/precommit-patchnames for instructions. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 2m 50s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 34s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 43s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 14s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 40s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 26s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 41s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 34s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 34s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 44s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 0m 59s {color} | {color:red} The patch causes 270 errors with Hadoop v2.4.0. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 1m 59s {color} | {color:red} The patch causes 270 errors with Hadoop v2.4.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 2m 59s {color} | {color:red} The patch causes 270 errors with Hadoop v2.5.0. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 3m 59s {color} | {color:red} The patch causes 270 errors with Hadoop v2.5.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 4m 58s {color} | {color:red} The patch causes 270 errors with Hadoop v2.5.2. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 49s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 26s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 79m 58s {color} | {color:green} hbase-server in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 20s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 119m 13s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.12.3 Server=1.12.3 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12846236/17379.HBASE-17081.v33.txt |
| JIRA Issue | HBASE-17379 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux 100fb7713748 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | HBASE-17081 / 1d235b9 |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/5188/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/5188/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



In patch v34, read write lock is replaced in favor of using CompactionPipeline.this for locking.
This is to avoid the extra overhead brought with read write lock.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 15s {color} | {color:blue} Docker mode activated. {color} |
| {color:blue}0{color} | {color:blue} patch {color} | {color:blue} 0m 2s {color} | {color:blue} The patch file was not named according to hbase's naming conventions. Please see https://yetus.apache.org/documentation/0.3.0/precommit-patchnames for instructions. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 2m 48s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 35s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 44s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 1m 39s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 27s {color} | {color:green} HBASE-17081 passed {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 0m 40s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 35s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 35s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 44s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 13s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 1m 0s {color} | {color:red} The patch causes 270 errors with Hadoop v2.4.0. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 2m 1s {color} | {color:red} The patch causes 270 errors with Hadoop v2.4.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 3m 2s {color} | {color:red} The patch causes 270 errors with Hadoop v2.5.0. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 4m 1s {color} | {color:red} The patch causes 270 errors with Hadoop v2.5.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 5m 1s {color} | {color:red} The patch causes 270 errors with Hadoop v2.5.2. {color} |
| {color:red}-1{color} | {color:red} findbugs {color} | {color:red} 1m 51s {color} | {color:red} hbase-server generated 1 new + 0 unchanged - 0 fixed = 1 total (was 0) {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 27s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 79m 46s {color} | {color:green} hbase-server in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 15s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 119m 3s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| FindBugs | module:hbase-server |
|  |  Inconsistent synchronization of org.apache.hadoop.hbase.regionserver.CompactionPipeline.version; locked 66% of time  Unsynchronized access at CompactionPipeline.java:66% of time  Unsynchronized access at CompactionPipeline.java:[line 171] |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.12.3 Server=1.12.3 Image:yetus/hbase:8d52d23 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12846243/17379.HBASE-17081.v34.txt |
| JIRA Issue | HBASE-17379 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux dae147f60fbb 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | HBASE-17081 / 1d235b9 |
| Default Java | 1.8.0_111 |
| findbugs | v3.0.0 |
| findbugs | https://builds.apache.org/job/PreCommit-HBASE-Build/5190/artifact/patchprocess/new-findbugs-hbase-server.html |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/5190/testReport/ |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/5190/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



[~anastas]:
Have you seen the latest patch ?

With patch, TestHRegionWithInMemoryFlush passes (on top of HBASE-17081 and HBASE-17373).

Hey [~yuzhihong@gmail.com],

Thank you so much for taking care and for being the trigger behind all recent important changes!
How about a suggestion to unite and not to make us judging between two solutions as there are definitely pros and cons on each side?
After all, we just need one solution that works :)

I agree with the suggestion that there would be one solution going into master.
I started the work first, tried out various approaches, ran TestHRegionWithInMemoryFlush over 1000 times.

I am quite confident about the correctness of latest patch.

w.r.t. CompactingMemStore synchronization invariants, I assume you were referring to the following section over HBASE-17434:

bq. CompactingMemStore maintains two invariants/conditions

The invariants are kept by my patches.

Since the subject here is to fix synchronization bug and doesn't change the in-memory compaction logic, I hope my work can be given reviews.

I understand what you are saying. You mean that HBASE-17379 is about fixing the bug in HBASE-17801, and HBASE-17434 is about general and total change in the compaction pipeline synch logic.

If HBASE-17801 is not in the master, there is no bug that you are trying to solve... 
So why not to change HBASE-17801 just to implement getScanners() correctly?

bq.  HBASE-17434 is about general and total change in the compaction pipeline synch logic.

Probably you haven't got time to look at the two patches closely. They target the same problem.
My patch is based on HBASE-17801 branch which has latest patch from HBASE-17801 followed by HBASE-17373.

That's why I am confident my patch fixes the bug.

Eshcar's patch is generated on master branch which does't have unit test.

bq. why not to change HBASE-17801 just to implement getScanners() correctly?

As I mentioned earlier, my patch already did the above since it is based on HBASE-17801. 

bq. Eshcar's patch is generated on master branch which does't have unit test.

Why so? TestHRegionWithInMemoryFlush is on master, no?

I just mean that if HBASE-17081 is not committed its implementation is still not finalized.
I would totally agree with you if HBASE-17081 would already be in master without a possibility to take it out...
What if CompactionPipeline#getScanners() in HBASE-17081 will be implemented using getSegments() which are already synchronized?

TestHRegionWithInMemoryFlush is in master, but without getScanners() in place, the bug wouldn't be triggered.

bq. Eshcar's patch is generated on master branch which does't have unit test.

Eshcar's patch only changed TestHeapSize which was required for test suite to run. There is no new test showing the correctness of the change.

bq. What if CompactionPipeline#getScanners() in HBASE-17081 will be implemented using getSegments() which are already synchronized?

Copy on write semantics allows getScanners() to proceed without synchronization. In a multi-reader scenario, this is more performant.

Resolving as addressed by HBASE-17434 Please reopen if I have it wrong.

