[~baev]
Can you provide a fix in pull request in GitHub?

gsmet opened a new pull request, #700:
URL: https://github.com/apache/maven-surefire/pull/700

   Hey there,
   
   In the Quarkus project, we make good use of the Surefire reports to provide a full report of a pull request run.
   
   We will soon enable the ability to retry tests but we need to make sure we can easily identify flaky tests thus why we included the ability to get flakyFailures and flakyErrors from the report.
   
   This is related to https://issues.apache.org/jira/browse/SUREFIRE-1345 but does not entirely implement it as I haven't implemented the reruns. I could be convinced to if you think it's crucial to get this PR in but, in our case, we don't see it as useful.
   
   Tests are included to make sure the data is properly extracted.
   
   I think I already signed the Apache CLA a long time ago but can fill it again if needed.
   
   Happy to iterate on this to get it merged soon.
   
   Thanks for having a look!
   
   Following this checklist to help us incorporate your 
   contribution quickly and easily:
   
    - [X] Make sure there is a [JIRA issue](https://issues.apache.org/jira/browse/SUREFIRE) filed 
          for the change (usually before you start working on it).  Trivial changes like typos do not 
          require a JIRA issue.  Your pull request should address just this issue, without 
          pulling in other changes.
    - [X] Each commit in the pull request should have a meaningful subject line and body.
    - [X] Format the pull request title like `[SUREFIRE-XXX] - Fixes bug in ApproximateQuantiles`,
          where you replace `SUREFIRE-XXX` with the appropriate JIRA issue. Best practice
          is to use the JIRA issue title in the pull request title and in the first line of the 
          commit message.
    - [X] Write a pull request description that is detailed enough to understand what the pull request does, how, and why.
    - [X] Run `mvn clean install` to make sure basic checks pass. A more thorough check will 
          be performed on your pull request automatically.
    - [X] You have run the integration tests successfully (`mvn -Prun-its clean install`).
   
   If your pull request is about ~20 lines of code you don't need to sign an
   [Individual Contributor License Agreement](https://www.apache.org/licenses/icla.pdf) if you are unsure
   please ask on the developers list.
   
   To make clear that you license your contribution under 
   the [Apache License Version 2.0, January 2004](http://www.apache.org/licenses/LICENSE-2.0)
   you have to acknowledge this by using the following check-box.
   
    - [X] I hereby declare this contribution to be licenced under the [Apache License Version 2.0, January 2004](http://www.apache.org/licenses/LICENSE-2.0)
   
    - [ ] In any other case, please file an [Apache Individual Contributor License Agreement](https://www.apache.org/licenses/icla.pdf).
   




[~tibordigana] I made a first step here: https://github.com/apache/maven-surefire/pull/700

It implements flakyFailure and flakyError, which is the most useful part IMHO.

michael-o commented on code in PR #700:
URL: https://github.com/apache/maven-surefire/pull/700#discussion_r1428953820


##########
surefire-report-parser/src/main/java/org/apache/maven/plugins/surefire/report/TestSuiteXmlParser.java:
##########
@@ -217,6 +241,38 @@ public void endElement(String uri, String localName, String qName) throws SAXExc
                     throw new SAXException("Failed to parse time value", e);
                 }
                 break;
+            case "flakyFailure":
+                testCase.addFlakyFailure(testCaseFlakyFailure);
+                testCaseFlakyFailure = null;
+                break;
+            case "flakyError":
+                testCase.addFlakyError(testCaseFlakyError);
+                testCaseFlakyError = null;
+                break;
+            case "stackTrace":
+                if (testCaseFlakyFailure != null) {
+                    testCaseFlakyFailure.setStackTrace(currentElement.toString());
+                }
+                if (testCaseFlakyError != null) {
+                    testCaseFlakyError.setStackTrace(currentElement.toString());
+                }
+                break;
+            case "system-out":
+                if (testCaseFlakyFailure != null) {
+                    testCaseFlakyFailure.setSystemOut(currentElement.toString());
+                }
+                if (testCaseFlakyError != null) {
+                    testCaseFlakyError.setSystemOut(currentElement.toString());
+                }
+                break;
+            case "system-err":
+                if (testCaseFlakyFailure != null) {
+                    testCaseFlakyFailure.setSystemErr(currentElement.toString());
+                }
+                if (testCaseFlakyError != null) {
+                    testCaseFlakyError.setSystemErr(currentElement.toString());
+                }

Review Comment:
   This will be a problem when https://github.com/apache/maven-surefire/pull/692 is merged.





gsmet commented on code in PR #700:
URL: https://github.com/apache/maven-surefire/pull/700#discussion_r1429103230


##########
surefire-report-parser/src/main/java/org/apache/maven/plugins/surefire/report/TestSuiteXmlParser.java:
##########
@@ -217,6 +241,38 @@ public void endElement(String uri, String localName, String qName) throws SAXExc
                     throw new SAXException("Failed to parse time value", e);
                 }
                 break;
+            case "flakyFailure":
+                testCase.addFlakyFailure(testCaseFlakyFailure);
+                testCaseFlakyFailure = null;
+                break;
+            case "flakyError":
+                testCase.addFlakyError(testCaseFlakyError);
+                testCaseFlakyError = null;
+                break;
+            case "stackTrace":
+                if (testCaseFlakyFailure != null) {
+                    testCaseFlakyFailure.setStackTrace(currentElement.toString());
+                }
+                if (testCaseFlakyError != null) {
+                    testCaseFlakyError.setStackTrace(currentElement.toString());
+                }
+                break;
+            case "system-out":
+                if (testCaseFlakyFailure != null) {
+                    testCaseFlakyFailure.setSystemOut(currentElement.toString());
+                }
+                if (testCaseFlakyError != null) {
+                    testCaseFlakyError.setSystemOut(currentElement.toString());
+                }
+                break;
+            case "system-err":
+                if (testCaseFlakyFailure != null) {
+                    testCaseFlakyFailure.setSystemErr(currentElement.toString());
+                }
+                if (testCaseFlakyError != null) {
+                    testCaseFlakyError.setSystemErr(currentElement.toString());
+                }

Review Comment:
   Will it? There will be a conflict but I think it's just a matter of adding it to test case if it can't be added to the two others.
   
   Does it make sense or do you foresee something more complex.
   
   In any case, no problem to rebase this one or help finishing the other one. I really need this in so I'll do my best to help.
   
   Thanks!
   





michael-o commented on code in PR #700:
URL: https://github.com/apache/maven-surefire/pull/700#discussion_r1429119813


##########
surefire-report-parser/src/main/java/org/apache/maven/plugins/surefire/report/TestSuiteXmlParser.java:
##########
@@ -217,6 +241,38 @@ public void endElement(String uri, String localName, String qName) throws SAXExc
                     throw new SAXException("Failed to parse time value", e);
                 }
                 break;
+            case "flakyFailure":
+                testCase.addFlakyFailure(testCaseFlakyFailure);
+                testCaseFlakyFailure = null;
+                break;
+            case "flakyError":
+                testCase.addFlakyError(testCaseFlakyError);
+                testCaseFlakyError = null;
+                break;
+            case "stackTrace":
+                if (testCaseFlakyFailure != null) {
+                    testCaseFlakyFailure.setStackTrace(currentElement.toString());
+                }
+                if (testCaseFlakyError != null) {
+                    testCaseFlakyError.setStackTrace(currentElement.toString());
+                }
+                break;
+            case "system-out":
+                if (testCaseFlakyFailure != null) {
+                    testCaseFlakyFailure.setSystemOut(currentElement.toString());
+                }
+                if (testCaseFlakyError != null) {
+                    testCaseFlakyError.setSystemOut(currentElement.toString());
+                }
+                break;
+            case "system-err":
+                if (testCaseFlakyFailure != null) {
+                    testCaseFlakyFailure.setSystemErr(currentElement.toString());
+                }
+                if (testCaseFlakyError != null) {
+                    testCaseFlakyError.setSystemErr(currentElement.toString());
+                }

Review Comment:
   I cannot exactly tell, but I see in the schema:
   https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd multiple system out/err. We must make sure that the exact one is pulled in. Yet another issue is similar to https://issues.apache.org/jira/browse/SUREFIRE-2212. If those std streams are huge we should be able to disable this. See: https://github.com/apache/maven-surefire/pull/670. This should be opt-in. 
   
   WDYT? I am willing to merge when all questions and test cases have been clarified and verified.





gsmet commented on code in PR #700:
URL: https://github.com/apache/maven-surefire/pull/700#discussion_r1429156954


##########
surefire-report-parser/src/main/java/org/apache/maven/plugins/surefire/report/TestSuiteXmlParser.java:
##########
@@ -217,6 +241,38 @@ public void endElement(String uri, String localName, String qName) throws SAXExc
                     throw new SAXException("Failed to parse time value", e);
                 }
                 break;
+            case "flakyFailure":
+                testCase.addFlakyFailure(testCaseFlakyFailure);
+                testCaseFlakyFailure = null;
+                break;
+            case "flakyError":
+                testCase.addFlakyError(testCaseFlakyError);
+                testCaseFlakyError = null;
+                break;
+            case "stackTrace":
+                if (testCaseFlakyFailure != null) {
+                    testCaseFlakyFailure.setStackTrace(currentElement.toString());
+                }
+                if (testCaseFlakyError != null) {
+                    testCaseFlakyError.setStackTrace(currentElement.toString());
+                }
+                break;
+            case "system-out":
+                if (testCaseFlakyFailure != null) {
+                    testCaseFlakyFailure.setSystemOut(currentElement.toString());
+                }
+                if (testCaseFlakyError != null) {
+                    testCaseFlakyError.setSystemOut(currentElement.toString());
+                }
+                break;
+            case "system-err":
+                if (testCaseFlakyFailure != null) {
+                    testCaseFlakyFailure.setSystemErr(currentElement.toString());
+                }
+                if (testCaseFlakyError != null) {
+                    testCaseFlakyError.setSystemErr(currentElement.toString());
+                }

Review Comment:
   Given the parsing is sequential, I don't think it's going to be hard to affect things properly.
   
   But if we think parsing system out and system err is controversial and require more thinking, I can remove them from this patch. I added them to be comprehensive but atm I don't actually need them.





michael-o commented on code in PR #700:
URL: https://github.com/apache/maven-surefire/pull/700#discussion_r1429177568


##########
surefire-report-parser/src/main/java/org/apache/maven/plugins/surefire/report/TestSuiteXmlParser.java:
##########
@@ -217,6 +241,38 @@ public void endElement(String uri, String localName, String qName) throws SAXExc
                     throw new SAXException("Failed to parse time value", e);
                 }
                 break;
+            case "flakyFailure":
+                testCase.addFlakyFailure(testCaseFlakyFailure);
+                testCaseFlakyFailure = null;
+                break;
+            case "flakyError":
+                testCase.addFlakyError(testCaseFlakyError);
+                testCaseFlakyError = null;
+                break;
+            case "stackTrace":
+                if (testCaseFlakyFailure != null) {
+                    testCaseFlakyFailure.setStackTrace(currentElement.toString());
+                }
+                if (testCaseFlakyError != null) {
+                    testCaseFlakyError.setStackTrace(currentElement.toString());
+                }
+                break;
+            case "system-out":
+                if (testCaseFlakyFailure != null) {
+                    testCaseFlakyFailure.setSystemOut(currentElement.toString());
+                }
+                if (testCaseFlakyError != null) {
+                    testCaseFlakyError.setSystemOut(currentElement.toString());
+                }
+                break;
+            case "system-err":
+                if (testCaseFlakyFailure != null) {
+                    testCaseFlakyFailure.setSystemErr(currentElement.toString());
+                }
+                if (testCaseFlakyError != null) {
+                    testCaseFlakyError.setSystemErr(currentElement.toString());
+                }

Review Comment:
   Yes, please do so. It should be handled separate will adequate testing.





michael-o commented on PR #700:
URL: https://github.com/apache/maven-surefire/pull/700#issuecomment-1859189876

   Yet another question: How do you want to utilize the data? In the Maven Surefire Report Plugin or somewhere else?




gsmet commented on PR #700:
URL: https://github.com/apache/maven-surefire/pull/700#issuecomment-1859208898

   The plan is to consume them in the Quarkus GitHub Bot for this feature: https://github.com/quarkusio/quarkus-github-bot#workflow-run-report .
   
   It analyses all the build reports from our CI workflow and post a comment in the pull request.
   
   We wanted to try to rerun tests but we need the feedback to contain the flakiness information.




michael-o commented on PR #700:
URL: https://github.com/apache/maven-surefire/pull/700#issuecomment-1859211434

   > The plan is to consume them in the Quarkus GitHub Bot for this feature: https://github.com/quarkusio/quarkus-github-bot#workflow-run-report .
   > 
   > It analyses all the build reports from our CI workflow and post a comment in the pull request.
   > 
   > We wanted to try to rerun tests but we need the feedback to contain the flakiness information.
   
   I see, let's focus on the issue and handle std streams separately, if you don't mind.




gsmet commented on code in PR #700:
URL: https://github.com/apache/maven-surefire/pull/700#discussion_r1429205246


##########
surefire-report-parser/src/main/java/org/apache/maven/plugins/surefire/report/TestSuiteXmlParser.java:
##########
@@ -217,6 +241,38 @@ public void endElement(String uri, String localName, String qName) throws SAXExc
                     throw new SAXException("Failed to parse time value", e);
                 }
                 break;
+            case "flakyFailure":
+                testCase.addFlakyFailure(testCaseFlakyFailure);
+                testCaseFlakyFailure = null;
+                break;
+            case "flakyError":
+                testCase.addFlakyError(testCaseFlakyError);
+                testCaseFlakyError = null;
+                break;
+            case "stackTrace":
+                if (testCaseFlakyFailure != null) {
+                    testCaseFlakyFailure.setStackTrace(currentElement.toString());
+                }
+                if (testCaseFlakyError != null) {
+                    testCaseFlakyError.setStackTrace(currentElement.toString());
+                }
+                break;
+            case "system-out":
+                if (testCaseFlakyFailure != null) {
+                    testCaseFlakyFailure.setSystemOut(currentElement.toString());
+                }
+                if (testCaseFlakyError != null) {
+                    testCaseFlakyError.setSystemOut(currentElement.toString());
+                }
+                break;
+            case "system-err":
+                if (testCaseFlakyFailure != null) {
+                    testCaseFlakyFailure.setSystemErr(currentElement.toString());
+                }
+                if (testCaseFlakyError != null) {
+                    testCaseFlakyError.setSystemErr(currentElement.toString());
+                }

Review Comment:
   I pushed an additional commit to drop the parsing of system out and system err.





michael-o commented on code in PR #700:
URL: https://github.com/apache/maven-surefire/pull/700#discussion_r1429207237


##########
surefire-report-parser/src/main/java/org/apache/maven/plugins/surefire/report/ReportTestCase.java:
##########
@@ -161,6 +168,26 @@ public boolean hasSkipped() {
         return hasSkipped;
     }
 
+    public boolean hasFlake() {

Review Comment:
   `hasFlakes()`



##########
surefire-report-parser/src/main/java/org/apache/maven/plugins/surefire/report/ReportTestCase.java:
##########
@@ -161,6 +168,26 @@ public boolean hasSkipped() {
         return hasSkipped;
     }
 
+    public boolean hasFlake() {
+        return !flakyErrors.isEmpty() || !flakyFailures.isEmpty();
+    }
+
+    public void addFlakyError(FlakyError flakyError) {
+        flakyErrors.add(flakyError);
+    }
+
+    public List<FlakyError> getFlakyErrors() {
+        return flakyErrors;
+    }
+
+    public void addFlakyFailure(FlakyFailure flakyFailure) {
+        flakyFailures.add(flakyFailure);
+    }
+
+    public List<FlakyFailure> getFlakyFailures() {
+        return flakyFailures;
+    }

Review Comment:
   Should these be immutable?



##########
surefire-report-parser/src/main/java/org/apache/maven/plugins/surefire/report/TestSuiteXmlParser.java:
##########
@@ -177,9 +183,27 @@ public void startElement(String uri, String localName, String qName, Attributes
                         currentSuite.incrementNumberOfSkipped();
                         break;
                     case "flakyFailure":
+                        testCaseFlakyFailure = new ReportTestCase.FlakyFailure(
+                                attributes.getValue("message"), attributes.getValue("type"));
+                        currentSuite.incrementNumberOfFlakes();
+                        break;
                     case "flakyError":
+                        testCaseFlakyError = new ReportTestCase.FlakyError(
+                                attributes.getValue("message"), attributes.getValue("type"));
                         currentSuite.incrementNumberOfFlakes();
                         break;
+                    case "stackTrace":
+                        currentElement = new StringBuilder();
+                        parseContent = true;
+                        break;
+                    case "system-out":
+                        currentElement = new StringBuilder();
+                        parseContent = true;
+                        break;
+                    case "system-err":
+                        currentElement = new StringBuilder();
+                        parseContent = true;
+                        break;

Review Comment:
   Both are still there?





gsmet commented on code in PR #700:
URL: https://github.com/apache/maven-surefire/pull/700#discussion_r1429212809


##########
surefire-report-parser/src/main/java/org/apache/maven/plugins/surefire/report/ReportTestCase.java:
##########
@@ -161,6 +168,26 @@ public boolean hasSkipped() {
         return hasSkipped;
     }
 
+    public boolean hasFlake() {
+        return !flakyErrors.isEmpty() || !flakyFailures.isEmpty();
+    }
+
+    public void addFlakyError(FlakyError flakyError) {
+        flakyErrors.add(flakyError);
+    }
+
+    public List<FlakyError> getFlakyErrors() {
+        return flakyErrors;
+    }
+
+    public void addFlakyFailure(FlakyFailure flakyFailure) {
+        flakyFailures.add(flakyFailure);
+    }
+
+    public List<FlakyFailure> getFlakyFailures() {
+        return flakyFailures;
+    }

Review Comment:
   Done.



##########
surefire-report-parser/src/main/java/org/apache/maven/plugins/surefire/report/ReportTestCase.java:
##########
@@ -161,6 +168,26 @@ public boolean hasSkipped() {
         return hasSkipped;
     }
 
+    public boolean hasFlake() {

Review Comment:
   Done.





gsmet commented on code in PR #700:
URL: https://github.com/apache/maven-surefire/pull/700#discussion_r1429212930


##########
surefire-report-parser/src/main/java/org/apache/maven/plugins/surefire/report/TestSuiteXmlParser.java:
##########
@@ -177,9 +183,27 @@ public void startElement(String uri, String localName, String qName, Attributes
                         currentSuite.incrementNumberOfSkipped();
                         break;
                     case "flakyFailure":
+                        testCaseFlakyFailure = new ReportTestCase.FlakyFailure(
+                                attributes.getValue("message"), attributes.getValue("type"));
+                        currentSuite.incrementNumberOfFlakes();
+                        break;
                     case "flakyError":
+                        testCaseFlakyError = new ReportTestCase.FlakyError(
+                                attributes.getValue("message"), attributes.getValue("type"));
                         currentSuite.incrementNumberOfFlakes();
                         break;
+                    case "stackTrace":
+                        currentElement = new StringBuilder();
+                        parseContent = true;
+                        break;
+                    case "system-out":
+                        currentElement = new StringBuilder();
+                        parseContent = true;
+                        break;
+                    case "system-err":
+                        currentElement = new StringBuilder();
+                        parseContent = true;
+                        break;

Review Comment:
   Ah removed the other part but forgot about these ones. Fixed.





michael-o commented on PR #700:
URL: https://github.com/apache/maven-surefire/pull/700#issuecomment-1859226263

   @kriegaex Any objections before I go over to your PR?




kriegaex commented on PR #700:
URL: https://github.com/apache/maven-surefire/pull/700#issuecomment-1859355869

   @michael-o, thanks for considering that the original version of this PR collided with #692. But it is good to get confirmation from a third party that my idea of capturing _stdOut_ and _stdErr_ is useful to other users, too. No objections.




asfgit closed pull request #700: [SUREFIRE-1345] Support flakyFailure and flakyError in TestSuiteXmlParser
URL: https://github.com/apache/maven-surefire/pull/700




Fixed with [ef4f2bff673579fc39958d8678887b717b023e30|https://gitbox.apache.org/repos/asf?p=maven-surefire.git;a=commit;h=ef4f2bff673579fc39958d8678887b717b023e30].

I have reduced the scope to flakes only. If someone needs support for reruns too, please file a new JIRA issue.

gsmet commented on PR #700:
URL: https://github.com/apache/maven-surefire/pull/700#issuecomment-1868059986

   Thanks for the review and for merging!




