[~norman] , do you think you can confirm for us the earliest netty version that supports JDK17? Or even point me in the docs if it is listed somewhere and I am missing it so I know for the next time where to look. Thanks in advance

Do you have a reference to the exceptions we were seeing? I vaguely recall that it only supports {{DirectByteBuffer}} now, which is probably quite straightforward to resolve.

{quote}Do you have a reference to the exceptions we were seeing?
{quote}
Unfortunately, those CircleCI runs logs have expired.  I will try to bump the version later today and try on a recent rebase with JDK17.

But this is an excerpt I found in my TODO list:
{code:java}
java.lang.ClassCastException: class org.apache.cassandra.utils.memory.BufferPool$Chunk cannot be cast to class sun.nio.ch.DirectBuffer{code}
{quote}I vaguely recall that it only supports {{DirectByteBuffer}} now, which is probably quite straightforward to resolve.
{quote}
Quite possible. I haven't dug into it yet, just literally put it on the list just as a thing to consider when the time comes. Thank you for the hint.

[~djoshi] volunteered to review this one when we(as a project)/I(most probably) get to it, tagging him here and assigning him as a reviewer.

{{java.lang.ClassCastException: class org.apache.cassandra.utils.memory.BufferPool$Chunk cannot be cast to class sun.nio.ch.DirectBuffer}}

Uh oh. I guess I must have seen this before myself but not looked closely. This looks more pernicious to me, since it’s a {{BufferPool$Chunk}}. Either the JDK or Netty are probably unhappy at our use of the attachment field in {{DirectByteBuffer}}. Looking briefly at the JDK, it is unlikely to be to blame as there is a JNI constructor for {{DirectByteBuffer}} that accepts a plain object to hold onto, I guess to ensure that whatever native memory pointer the buffer references is not collected (and freed by a finalizer/reference queue). So we're not doing anything unacceptable.

This could be more annoying to resolve. We may need to upstream changes to Netty, or make quite invasive changes to our {{BufferPool}}.

Getting the full stack trace will help inform next steps.

{quote}Getting the full stack trace will help inform next steps.
{quote}
I think I have some preliminary good news. I ran some rough tests today to get to it. I suspect things might have improved on Netty side recently.

So with the Netty version that was current in March, [current trunk and JDK17|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2005/workflows/18b54727-8b82-42cc-9dd2-5a04bfb06e5a] I can see 55 failing tests and a bunch of SSL tests.

Now looking into the cqlsh tests [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2005/workflows/18b54727-8b82-42cc-9dd2-5a04bfb06e5a/jobs/16218/tests#failed-test-1] I can also find the issue we discussed, test_tls:
{code:java}
test teardown failure Unexpected error found in node logs (see stdout for full details). Errors: [[node1] "WARN [nioEventLoopGroup-5-5] 2022-10-27 22:45:13,917 ExceptionHandlers.java:140 - Unknown exception in client networking\nio.netty.handler.codec.DecoderException: javax.net.ssl.SSLException: Fail to unwrap network record\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:480)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:279)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:722)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:658)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:584)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:496)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: javax.net.ssl.SSLException: Fail to unwrap network record\n\tat java.base/sun.security.ssl.Alert.createSSLException(Alert.java:133)\n\tat java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:371)\n\tat java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:314)\n\tat java.base/sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:522)\n\tat java.base/sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:482)\n\tat java.base/javax.net.ssl.SSLEngine.unwrap(SSLEngine.java:679)\n\tat io.netty.handler.ssl.SslHandler$SslEngineType$3.unwrap(SslHandler.java:295)\n\tat io.netty.handler.ssl.SslHandler.unwrap(SslHandler.java:1341)\n\tat io.netty.handler.ssl.SslHandler.decodeJdkCompatible(SslHandler.java:1234)\n\tat io.netty.handler.ssl.SslHandler.decode(SslHandler.java:1283)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:510)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:449)\n\t... 17 common frames omitted\nCaused by: java.lang.ClassCastException: class org.apache.cassandra.utils.memory.BufferPool$Chunk cannot be cast to class sun.nio.ch.DirectBuffer (org.apache.cassandra.utils.memory.BufferPool$Chunk is in unnamed module of loader 'app'; sun.nio.ch.DirectBuffer is in module java.base of loader 'bootstrap')\n\tat java.base/com.sun.crypto.provider.GaloisCounterMode$GCMEngine.overlapDetection(GaloisCounterMode.java:865)\n\tat java.base/com.sun.crypto.provider.GaloisCounterMode$GCMDecrypt.doFinal(GaloisCounterMode.java:1502)\n\tat java.base/com.sun.crypto.provider.GaloisCounterMode.engineDoFinal(GaloisCounterMode.java:447)\n\tat java.base/javax.crypto.Cipher.doFinal(Cipher.java:2500)\n\tat java.base/sun.security.ssl.SSLCipher$T12GcmReadCipherGenerator$GcmReadCipher.decrypt(SSLCipher.java:1659)\n\tat java.base/sun.security.ssl.SSLEngineInputRecord.decodeInputRecord(SSLEngineInputRecord.java:239)\n\tat java.base/sun.security.ssl.SSLEngineInputRecord.decode(SSLEngineInputRecord.java:196)\n\tat java.base/sun.security.ssl.SSLEngineInputRecord.decode(SSLEngineInputRecord.java:159)\n\tat java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:111)\n\tat java.base/sun.security.ssl.SSLEngineImpl.decode(SSLEngineImpl.java:736)\n\tat java.base/sun.security.ssl.SSLEngineImpl.readRecord(SSLEngineImpl.java:691)\n\tat java.base/sun.security.ssl.SSLEngineImpl.unwrap(SSLEngineImpl.java:506)\n\t... 25 common frames omitted"]{code}
 

More info in the logs under artifacts.

------

I also pushed update to newest, current netty version:

[jdk8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2006/workflows/23d0921a-e1bb-4efb-93ef-754d357836aa], [jdk8 unit tests as they failed before due to some CircleCI env issue|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2006/workflows/5f24e702-d537-40c2-bfeb-5ca88d6c84f0], [jdk11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2006/workflows/d676b640-cb60-4cad-8e62-9ed6017cc485] - We hit an issue with test_schema_changes:
{code:java}
test teardown failure Unexpected error found in node logs (see stdout for full details). Errors: [[node1] 'WARN [nioEventLoopGroup-5-3] 2022-10-28 00:57:21,672 ExceptionHandlers.java:139 - Unknown exception in client networking\njava.io.IOException: Connection reset by peer\n\tat sun.nio.ch.FileDispatcherImpl.read0(Native Method)\n\tat sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:39)\n\tat sun.nio.ch.IOUtil.readIntoNativeBuffer(IOUtil.java:223)\n\tat sun.nio.ch.IOUtil.read(IOUtil.java:192)\n\tat sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:379)\n\tat io.netty.buffer.UnpooledDirectByteBuf.setBytes(UnpooledDirectByteBuf.java:570)\n\tat io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)\n\tat io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:357)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:748)']{code}
And now I do not see anymore with [JDK17|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=trunk-jdk17-oct] the test_tls failing, plus those SSL failures in the DTests. The errors were down to about 30 and I think I can attribute a lot of them to the rebase I did today as the pom files were recently pulled from build.xml, also wrong CCM and DTest branches in my CI config. I suspect some updates got lost. I need to clean my branch, probably tomorrow, to see what is left from CI perspective. 

I actually just saw [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2002/workflows/2bbf125a-844d-463e-bbf6-a20be78e13a4/jobs/16199/tests], test_insert_data_during_replace_different_address failing with:
{code:java}
test teardown failure Unexpected error found in node logs (see stdout for full details). Errors: [[node2] 'ERROR [Messaging-EventLoop-3-4] 2022-10-27 17:12:25,665 OutboundConnection.java:1061 - /127.0.0.2:7000->/127.0.0.1:7000-URGENT_MESSAGES-c650c9c5 channel in potentially inconsistent state after error; closing\njava.net.SocketException: Connection reset\n\tat java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:394)\n\tat java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:426)\n\tat io.netty.buffer.UnpooledDirectByteBuf.setBytes(UnpooledDirectByteBuf.java:570)\n\tat io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)\n\tat io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:357)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:833)']{code}
 

It seems to me, remembering [this commit|https://github.com/apache/cassandra-dtest/commit/7bc8467233af69391efeaf74ef87a73c0ea9ceb1], that we might just need to add some additional filtering probably?
----
Oh we now hit 
{code:java}
com.datastax.driver.core.exceptions.ServerError: An unexpected error occurred server side on /127.0.0.1:9042: java.lang.UnsupportedOperationException: can't get field offset on a hidden class: private final org.apache.cassandra.db.ClusteringComparator org.apache.cassandra.db.ClusteringComparator$$Lambda$513/0x00000008011acc20.arg$1{code}
but this time not from jamm. Look at the in-jvm tests, for example - MixedModeFuzzTest (this is failing independently of the netty version):
{code:java}
com.datastax.driver.core.exceptions.ServerError: An unexpected error occurred server side on /127.0.0.1:9042: java.lang.UnsupportedOperationException: can't get field offset on a hidden class: private final org.apache.cassandra.db.ClusteringComparator org.apache.cassandra.db.ClusteringComparator$$Lambda$513/0x00000008011acc20.arg$1 at com.datastax.driver.core.exceptions.ServerError.copy(ServerError.java:62) at com.datastax.driver.core.exceptions.ServerError.copy(ServerError.java:26) at com.datastax.driver.core.DriverThrowables.propagateCause(DriverThrowables.java:35) at com.datastax.driver.core.AbstractSession.prepare(AbstractSession.java:86) at org.apache.cassandra.distributed.test.MixedModeFuzzTest.lambda$mixedModeFuzzTest$4(MixedModeFuzzTest.java:285) at java.base/java.lang.Thread.run(Thread.java:833) Suppressed: com.datastax.driver.core.exceptions.ServerError: An unexpected error occurred server side on /127.0.0.2:9042: java.lang.UnsupportedOperationException: can't get field offset on a hidden class: private final org.apache.cassandra.db.ClusteringComparator org.apache.cassandra.db.ClusteringComparator$$Lambda$1443/0x00000008014c4010.arg$1 Caused by: com.datastax.driver.core.exceptions.ServerError: An unexpected error occurred server side on /127.0.0.2:9042: java.lang.UnsupportedOperationException: can't get field offset on a hidden class: private final org.apache.cassandra.db.ClusteringComparator org.apache.cassandra.db.ClusteringComparator$$Lambda$1443/0x00000008014c4010.arg$1 at com.datastax.driver.core.Responses$Error.asException(Responses.java:152) at com.datastax.driver.core.RequestHandler$SpeculativeExecution.onSet(RequestHandler.java:651) at com.datastax.driver.core.Connection$Dispatcher.channelRead0(Connection.java:1290) at com.datastax.driver.core.Connection$Dispatcher.channelRead0(Connection.java:1208) at com.datastax.shaded.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:335) at com.datastax.shaded.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:286) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:335) at com.datastax.shaded.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:335) at com.datastax.shaded.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:335) at com.datastax.shaded.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:312) at com.datastax.shaded.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:286) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:335) at com.datastax.shaded.netty.channel.ChannelInboundHandlerAdapter.channelRead(ChannelInboundHandlerAdapter.java:86) at com.datastax.driver.core.InboundTrafficMeter.channelRead(InboundTrafficMeter.java:38) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:335) at com.datastax.shaded.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1304) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:921) at com.datastax.shaded.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:135) at com.datastax.shaded.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:646) at com.datastax.shaded.netty.channel.nio.NioEventLoop.processSelectedKeysPlain(NioEventLoop.java:546) at com.datastax.shaded.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:500) at com.datastax.shaded.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:460) at com.datastax.shaded.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:131) at com.datastax.shaded.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) Suppressed: com.datastax.driver.core.exceptions.ServerError: An unexpected error occurred server side on /127.0.0.1:9042: java.lang.UnsupportedOperationException: can't get field offset on a hidden class: private final org.apache.cassandra.db.ClusteringComparator org.apache.cassandra.db.ClusteringComparator$$Lambda$513/0x00000008011acc20.arg$1 at com.datastax.driver.core.exceptions.ServerError.copy(ServerError.java:62) at com.datastax.driver.core.exceptions.ServerError.copy(ServerError.java:26) at com.datastax.driver.core.DriverThrowables.propagateCause(DriverThrowables.java:35) at com.datastax.driver.core.AbstractSession.prepare(AbstractSession.java:86) at org.apache.cassandra.distributed.test.MixedModeFuzzTest.lambda$mixedModeFuzzTest$4(MixedModeFuzzTest.java:304) Caused by: com.datastax.driver.core.exceptions.ServerError: An unexpected error occurred server side on /127.0.0.1:9042: java.lang.UnsupportedOperationException: can't get field offset on a hidden class: private final org.apache.cassandra.db.ClusteringComparator org.apache.cassandra.db.ClusteringComparator$$Lambda$513/0x00000008011acc20.arg$1 at com.datastax.driver.core.Responses$Error.asException(Responses.java:152) at com.datastax.driver.core.RequestHandler$SpeculativeExecution.onSet(RequestHandler.java:651) at com.datastax.driver.core.Connection$Dispatcher.channelRead0(Connection.java:1290) at com.datastax.driver.core.Connection$Dispatcher.channelRead0(Connection.java:1208) at com.datastax.shaded.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:335) at com.datastax.shaded.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:286) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:335) at com.datastax.shaded.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:335) at com.datastax.shaded.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:335) at com.datastax.shaded.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:312) at com.datastax.shaded.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:286) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:335) at com.datastax.shaded.netty.channel.ChannelInboundHandlerAdapter.channelRead(ChannelInboundHandlerAdapter.java:86) at com.datastax.driver.core.InboundTrafficMeter.channelRead(InboundTrafficMeter.java:38) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:335) at com.datastax.shaded.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1304) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:921) at com.datastax.shaded.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:135) at com.datastax.shaded.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:646) at com.datastax.shaded.netty.channel.nio.NioEventLoop.processSelectedKeysPlain(NioEventLoop.java:546) at com.datastax.shaded.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:500) at com.datastax.shaded.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:460) at com.datastax.shaded.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:131) at com.datastax.shaded.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) Caused by: com.datastax.driver.core.exceptions.ServerError: An unexpected error occurred server side on /127.0.0.1:9042: java.lang.UnsupportedOperationException: can't get field offset on a hidden class: private final org.apache.cassandra.db.ClusteringComparator org.apache.cassandra.db.ClusteringComparator$$Lambda$513/0x00000008011acc20.arg$1 at com.datastax.driver.core.Responses$Error.asException(Responses.java:152) at com.datastax.driver.core.RequestHandler$SpeculativeExecution.onSet(RequestHandler.java:651) at com.datastax.driver.core.Connection$Dispatcher.channelRead0(Connection.java:1290) at com.datastax.driver.core.Connection$Dispatcher.channelRead0(Connection.java:1208) at com.datastax.shaded.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:335) at com.datastax.shaded.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:286) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:335) at com.datastax.shaded.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:335) at com.datastax.shaded.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:335) at com.datastax.shaded.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:312) at com.datastax.shaded.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:286) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:335) at com.datastax.shaded.netty.channel.ChannelInboundHandlerAdapter.channelRead(ChannelInboundHandlerAdapter.java:86) at com.datastax.driver.core.InboundTrafficMeter.channelRead(InboundTrafficMeter.java:38) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:335) at com.datastax.shaded.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1304) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:356) at com.datastax.shaded.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:342) at com.datastax.shaded.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:921) at com.datastax.shaded.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:135) at com.datastax.shaded.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:646) at com.datastax.shaded.netty.channel.nio.NioEventLoop.processSelectedKeysPlain(NioEventLoop.java:546) at com.datastax.shaded.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:500) at com.datastax.shaded.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:460) at com.datastax.shaded.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:131) at com.datastax.shaded.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30){code}

{code}
java.lang.ClassCastException: class org.apache.cassandra.utils.memory.BufferPool$Chunk cannot be cast to class sun.nio.ch.DirectBuffer (org.apache.cassandra.utils.memory.BufferPool$Chunk is in unnamed module of loader 'app'; sun.nio.ch.DirectBuffer is in module java.base of loader 'bootstrap')\n\tat java.base/com.sun.crypto.provider.GaloisCounterMode$GCMEngine.overlapDetection(GaloisCounterMode.java:865)\n\tat java.base/com.sun.crypto.provider.GaloisCounterMode$GCMDecrypt.doFinal(GaloisCounterMode.java:1502)\n\tat java.base/com.sun.crypto.provider.GaloisCounterMode.engineDoFinal(GaloisCounterMode.java:447)\n\tat 
{code}

This is interesting, it appears to be within the JDK. If a newer netty fixes it, great. But it might be worth digging into why the JDK crypto functionality is getting hold of a Chunk. It might simply be different default TLS settings on the netty side fixing it, so that the faulty (for our use case) JDK functionality isn't invoked, but it may remain as a submarine for other users specifying the relevant encryption settings.

Yes, the {{GaloisCounterMode}} appears to make about {{DirectBuffer}} and their attachments [here|https://github.com/openjdk/jdk/blob/jdk-17%2B35/src/java.base/share/classes/com/sun/crypto/provider/GaloisCounterMode.java#L866].

Looking again at the rest of the JDK, I'm not actually sure attachments can be accessed publicly, so this is probably our problem rather than the JDK's. However, we might be able to fix it by simply having {{Chunk}} implement {{DirectBuffer}}, and having it return its address.

Thanks [~benedict]. Appreciate you looking into this! I will try to get to this next week possibly if no one gets to it before me. 

Ok, it seems to me one of the issues we were hitting back in March was this bug - https://github.com/netty/netty/issues/12101. It was presented in 4.1.73, checked that it is fixed with 4.1.75
I easily can see it by running testServerSocketShouldUseKeystore and
testClientSocketShouldUseOutboundKeystore 
The test_tls is probably different though. I have to run some tests tomorrow as some of the CircleCI ones I ran before have their artifacts already expired. 


Got pulled, will get back to this in a day or two probably

Another problem we hit with JDK17 was [this issue|https://github.com/netty/netty/issues/10317] which I resolved as suggested by adding bouncy castle as a dependency for test purposes. (I will send mail to the mailing list, first want to solve all problems here and double check all my findings/solutions). The issue was observed in SSLFactoryTest

 

And I still see with the latest Netty Version the mentioned classCastException. For example in 

bulkLoaderSuccessfullyStreamsOverSsl. I will investigate why that happens. In the meantime I was thinking that if we have Chunk implement DirectBuffer that will require add-exports.

 

 

A few updates after I cleaned my JDK17 WIP branch and tested with different versions etc:
 * _bulkLoaderSuccessfullyStreamsOverSsl_ always fails with JDK17 - current and newer Netty versions with the classCastException we mentioned
 * _tls_test_ Python DTest is failing the same way with particular Netty versions.

On further logging I can confirm that indeed [~benedict] is right it is submarine :) When using JDK provider and not OpenSSL, the class cast exception is there with JDK17, no matter of Netty Version. 

So two things:
 * I think the netty update can be finished without being blocked by the mentioned problem
 * we can go in a separate ticket addressing the classCastException and considering whether there might be an option without using add-exports. Not that I have a better idea at this very moment

I will prepare a patch for the current ticket and also have to finish reviewing the list of changes between current and newest versions to ensure I did not miss anything that CI didn't catch

I am not happy with the below error that pops up in almost every CI run with random tests with the new Netty version. Not convinced we should silence it similar to other Connection reset failures already silenced in DTests [here|https://github.com/apache/cassandra-dtest/blob/trunk/dtest_setup.py#L50]. (CC [~dcapwell]  and [~jonmeredith]  as they looked into silencing those before in CASSANDRA-17594) I will look further into it in the new year.
{code:java}
ERROR [Messaging-EventLoop-3-4] 2022-10-27 17:12:25,665 OutboundConnection.java:1061 - /127.0.0.2:7000->/127.0.0.1:7000-URGENT_MESSAGES-c650c9c5 channel in potentially inconsistent state after error; closing\njava.net.SocketException: Connection reset\n\tat java.base/sun.nio.ch.SocketChannelImpl.throwConnectionReset(SocketChannelImpl.java:394)\n\tat java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:426)\n\tat io.netty.buffer.UnpooledDirectByteBuf.setBytes(UnpooledDirectByteBuf.java:570)\n\tat io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1132)\n\tat io.netty.channel.socket.nio.NioSocketChannel.doReadBytes(NioSocketChannel.java:357)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:151)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:833){code}

It's been a while and we have j17 baked into circle now, so I did a run to check the current status:

||Branch||CI||
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17992-trunk]|[j11|https://app.circleci.com/pipelines/github/driftx/cassandra/1060/workflows/fd02066d-4155-429e-87f4-20d3915e1634], [j17|https://app.circleci.com/pipelines/github/driftx/cassandra/1060/workflows/e3dbaa54-108e-412a-9d06-b0ff3167c849]|

My branch has netty and tcnative upgraded to the latest, and bouncycastle is added. Here's what I see that needs to be fixed for netty:

* J11:
**  the log issue mentioned above causes test failures both by appearing unexpectedly, and also I think by taking the place of expected errors in some cases
** a strange ttl_test dtest failure

* j17:
** all the j11 problems
** InternodeEncryptionOptionsTest is failing again, but differently after adding bouncycastle

I'll see if I can figure out what's going on with the ttl_test failure.

bq. I'll see if I can figure out what's going on with the ttl_test failure.

I have not been able to replicate this outside of circle, with any java version.

bq. I have not been able to replicate this outside of circle, with any Java version.
At least we have the logs in CircleCI, and we can add additional logging and spin it in the multiplexer. I hope it will still pop up as flaky, at least in the CircleCI multiplexer?

CASSANDRA-18180 rebased on trunk: https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/751/workflows/a8b984df-d4db-4e09-b346-63c3b799f048 (20 unit tests, 12 jvm dtests)

{{InternodeEncryptionOptionsTest.negotiatedProtocolMustBeAcceptedProtocolTest}} is failing because Netty disabled TLSv1.1 by default in [v4.1.65|https://netty.io/news/2021/05/19/4-1-65-Final.html]. I suppose we should follow and keep it disabled. Otherwise, we may try to enable it explicitly, wdyt?

Additionally, there is TLSv1.3 available

We probably ought to do something similar to what we did in CASSANDRA-18540

Thanks [~jlewandowski] !

So two things:
 - I noticed you pulled the patch from CASSANDRA-18180. Good call. But you are missing the bounty castle [patch|https://github.com/driftx/cassandra/commit/61c2863643f6ec85f73dbab4e1c3f37443a5c41c], which fixes the SSLFactory unit tests from this [issue|https://github.com/netty/netty/issues/10317] I mentioned earlier.

 - 
{quote} Otherwise, we may try to enable it explicitly, wdyt?{quote}

We can allow it in tests probably to cover people who might still need it for legacy reasons
{quote}We probably ought to do something similar to what we did in CASSANDRA-18540
{quote}
or more like CASSANDRA-16848, but fixed for Netty (I haven't looked into what that is, though)

I've pulled those bouncy castle and boringssl fixes from Brandon's branch, it is ok. 

The TTL problem seem to be related to the fact that netty-all is almost empty and it is used to fetch all fine grained netty jars. However, unlike 4.158, it does not include the native libraries. When I added netty-transport-native-epoll for linux x86_64 it started working locally.

Let's see how it goes https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/754/workflows/e33f03ad-29fa-4f50-a61a-276364fbb7c4

Netty now throws again NotSslRecordException instead of SSLHandshakeException due to this change https://github.com/netty/netty/pull/13314
I've updated dtests to reflect that: https://github.com/apache/cassandra-dtest/pull/224

Summary:

Among release notes between 4.1.58 and 4.1.94 I've found "important notes" in the following releases:
- https://netty.io/news/2021/03/09/4-1-60-Final.html
- https://netty.io/news/2021/03/30/4-1-61-Final.html
- https://netty.io/news/2022/01/12/4-1-73-Final.html
- https://netty.io/news/2022/03/10/4-1-75-Final.html
- https://netty.io/news/2022/10/11/4-1-84-Final.html

The following changes have been applied:
- Added explicit dependency to {{org.bouncycastle:bcpkix-jdk15on:1.70}} ([~brandon.williams]) - https://github.com/netty/netty/pull/11495
- Updated version of  {{io.netty:netty-tcnative-boringssl-static}} to {{2.0.61.Final}} ([~brandon.williams]) - https://github.com/netty/netty/commit/9d28ad5403
- Due to packaging changes, we needed to explicitly include the dependency {{io.netty:netty-transport-native-epoll:4.1.94.Final:linux-x86_64}} https://github.com/netty/netty/commit/04f0eedea8
- {{InternodeEncryptionOptionsTest}} now verifies also TLSv1.3, TLSv1.1 has been deprecated and is now disabled by default - 
- Some defaults has been changed, in particular thread local caching and chunk size in heap allocator, therefore system properties have been added to bring back the values we used before upgrade ({{io.netty.allocator.useCacheForAllThreads=true}}, {{io.netty.allocator.maxOrder=11}} - https://github.com/netty/netty/commit/b61d7d40f4, https://github.com/netty/netty/commit/4797b88d89

There is also a file attached to the PR: https://github.com/jacek-lewandowski/cassandra/blob/CASSANDRA-17992/netty-release-notes-filtered.md, which lists the release notes. Those were filtered by removing changes that were uninteresting, like changes in build, tests, related to http, brotli, udp, websockets, etc. Additionally there is also https://github.com/jacek-lewandowski/cassandra/blob/CASSANDRA-17992/netty-release-notes.md with all release notes.




 

Thank you for the investigation!

Let's see first a CI run with all changes incorporated:

[https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=CASSANDRA-17992]

Side note: there were tests ignored and fields marked with @Unmetered to reduce some of the noise of the Jamm related failures but we need to revert those and make a run to confirm no new failures pre-commit (when done with a review of course)

Ok, I had to remove the netty release notes that were added for revision as they missed Apache License and failed the rat check.

The builds failed, but now GH has an outage, so I will get back to this later...

GH is back. Pushed new CI run [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=CASSANDRA-17992]

While building locally I noticed we download quite a lot of things. I am wondering whether everything is really needed.

For example: 
{code:java}
[resolver:resolve] Downloaded https://repo1.maven.org/maven2/io/netty/netty-tcnative-boringssl-static/2.0.61.Final/netty-tcnative-boringssl-static-2.0.61.Final-windows-x86_64.jar{code}

[~e.dimitrova] we download much more jars now because Netty packaging has changed - netty-all does not include all netty-*** jars anymore. Instead, it depends on (almost) all netty-***. See https://github.com/netty/netty/pull/11732 for details.


We often add exclusions for dependencies that will not be needed, like [here|https://github.com/apache/cassandra/blob/trunk/.build/parent-pom-template.xml#L273-L298], for example. Can we do that for some of those not required here (when it is confirmed that some of them are not needed, I might be wrong)? 

I don't really know what we really need at runtime. We had a freedom to do that before by choosing individual Netty dependencies instead of including uber netty-all. Though, we haven't done that.

As asked for in Slack, I looked over the test failures.
- simulationTest-cassandra.testtag_IS_UNDEFINED seems like the only new unit test failure. BUT I tend to see lately (Butler can confirm) tests failing because the testtag_IS_UNDEFINED, so I suspect we need an umbrella ticket for that type of failure, which has nothing to do with what we do here. 
I also cannot reproduce this failure locally with the Netty upgrade branch. (the testtag seems fine)
- The rest of the unit test failures will be fixed when we commit CASSANDRA-18190.
- With JDK17, test_login_new_node is the only failure I haven't seen anything about in Butler, and no tickets.
Though, I am not sure it can be related to the netty upgrade:

{code:java}
failed on teardown with "Unexpected error found in node logs (see stdout for full details). Errors: [[node3] 'ERROR [Native-Transport-Auth-Requests-1] 2023-06-29 19:00:01,502 ExceptionHandlers.java:229 - Unexpected exception during request; channel = [id: 0xbf439ff8, L:/127.0.0.3:9042 - R:/127.0.0.1:58128]\njava.lang.AssertionError: null\n\tat org.apache.cassandra.locator.TokenMetadata.firstTokenIndex(TokenMetadata.java:1179)\n\tat org.apache.cassandra.locator.TokenMetadata.firstToken(TokenMetadata.java:1193)\n\tat org.apache.cassandra.locator.AbstractReplicationStrategy.getNaturalReplicas(AbstractReplicationStrategy.java:95)\n\tat org.apache.cassandra.locator.AbstractReplicationStrategy.getNaturalReplicasForToken(AbstractReplicationStrategy.java:88)\n\tat org.apache.cassandra.locator.ReplicaLayout.forTokenReadLiveSorted(ReplicaLayout.java:330)\n\tat org.apache.cassandra.locator.ReplicaPlans.forRead(ReplicaPlans.java:593)\n\tat org.apache.cassandra.service.reads.AbstractReadExecutor.getReadExecutor(AbstractReadExecutor.java:190)\n\tat org.apache.cassandra.service.StorageProxy.fetchRows(StorageProxy.java:2097)\n\tat org.apache.cassandra.service.StorageProxy.readRegular(StorageProxy.java:1995)\n\tat org.apache.cassandra.service.StorageProxy.read(StorageProxy.java:1873)\n\tat org.apache.cassandra.db.SinglePartitionReadCommand$Group.execute(SinglePartitionReadCommand.java:1286)\n\tat org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:364)\n\tat org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:293)\n\tat org.apache.cassandra.auth.PasswordAuthenticator.select(PasswordAuthenticator.java:201)\n\tat org.apache.cassandra.auth.PasswordAuthenticator.queryHashedPassword(PasswordAuthenticator.java:177)\n\tat com.github.benmanes.caffeine.cache.LocalLoadingCache.lambda$newMappingFunction$2(LocalLoadingCache.java:141)\n\tat com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2413)\n\tat java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)\n\tat com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2411)\n\tat com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2394)\n\tat com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:108)\n\tat com.github.benmanes.caffeine.cache.LocalLoadingCache.get(LocalLoadingCache.java:54)\n\tat org.apache.cassandra.auth.AuthCache.get(AuthCache.java:228)\n\tat org.apache.cassandra.auth.PasswordAuthenticator.authenticate(PasswordAuthenticator.java:142)\n\tat org.apache.cassandra.auth.PasswordAuthenticator$PlainTextSaslAuthenticator.getAuthenticatedUser(PasswordAuthenticator.java:268)\n\tat org.apache.cassandra.transport.messages.AuthResponse.execute(AuthResponse.java:80)\n\tat org.apache.cassandra.transport.Message$Request.execute(Message.java:256)\n\tat org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:194)\n\tat org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:213)\n\tat org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:240)\n\tat org.apache.cassandra.transport.Dispatcher$RequestProcessor.run(Dispatcher.java:137)\n\tat org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:96)\n\tat org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:61)\n\tat org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:71)\n\tat org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:143)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:833)', [node3] 'ERROR [Native-Transport-Auth-Requests-1] 2023-06-29 19:00:01,774 ExceptionHandlers.java:229 - Unexpected exception during request; channel = [id: 0x1205363e, L:/127.0.0.3:9042 - R:/127.0.0.1:58142]\njava.lang.AssertionError: null\n\tat org.apache.cassandra.locator.TokenMetadata.firstTokenIndex(TokenMetadata.java:1179)\n\tat org.apache.cassandra.locator.TokenMetadata.firstToken(TokenMetadata.java:1193)\n\tat org.apache.cassandra.locator.AbstractReplicationStrategy.getNaturalReplicas(AbstractReplicationStrategy.java:95)\n\tat org.apache.cassandra.locator.AbstractReplicationStrategy.getNaturalReplicasForToken(AbstractReplicationStrategy.java:88)\n\tat org.apache.cassandra.locator.ReplicaLayout.forTokenReadLiveSorted(ReplicaLayout.java:330)\n\tat org.apache.cassandra.locator.ReplicaPlans.forRead(ReplicaPlans.java:593)\n\tat org.apache.cassandra.service.reads.AbstractReadExecutor.getReadExecutor(AbstractReadExecutor.java:190)\n\tat org.apache.cassandra.service.StorageProxy.fetchRows(StorageProxy.java:2097)\n\tat org.apache.cassandra.service.StorageProxy.readRegular(StorageProxy.java:1995)\n\tat org.apache.cassandra.service.StorageProxy.read(StorageProxy.java:1873)\n\tat org.apache.cassandra.db.SinglePartitionReadCommand$Group.execute(SinglePartitionReadCommand.java:1286)\n\tat org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:364)\n\tat org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:293)\n\tat org.apache.cassandra.auth.PasswordAuthenticator.select(PasswordAuthenticator.java:201)\n\tat org.apache.cassandra.auth.PasswordAuthenticator.queryHashedPassword(PasswordAuthenticator.java:177)\n\tat com.github.benmanes.caffeine.cache.LocalLoadingCache.lambda$newMappingFunction$2(LocalLoadingCache.java:141)\n\tat com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2413)\n\tat java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)\n\tat com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2411)\n\tat com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2394)\n\tat com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:108)\n\tat com.github.benmanes.caffeine.cache.LocalLoadingCache.get(LocalLoadingCache.java:54)\n\tat org.apache.cassandra.auth.AuthCache.get(AuthCache.java:228)\n\tat org.apache.cassandra.auth.PasswordAuthenticator.authenticate(PasswordAuthenticator.java:142)\n\tat org.apache.cassandra.auth.PasswordAuthenticator$PlainTextSaslAuthenticator.getAuthenticatedUser(PasswordAuthenticator.java:268)\n\tat org.apache.cassandra.transport.messages.AuthResponse.execute(AuthResponse.java:80)\n\tat org.apache.cassandra.transport.Message$Request.execute(Message.java:256)\n\tat org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:194)\n\tat org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:213)\n\tat org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:240)\n\tat org.apache.cassandra.transport.Dispatcher$RequestProcessor.run(Dispatcher.java:137)\n\tat org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:96)\n\tat org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:61)\n\tat org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:71)\n\tat org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:143)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:833)']"
Unexpected error found in node logs (see stdout for full details). Errors: [[node3] 'ERROR [Native-Transport-Auth-Requests-1] 2023-06-29 19:00:01,502 ExceptionHandlers.java:229 - Unexpected exception during request; channel = [id: 0xbf439ff8, L:/127.0.0.3:9042 - R:/127.0.0.1:58128]\njava.lang.AssertionError: null\n\tat org.apache.cassandra.locator.TokenMetadata.firstTokenIndex(TokenMetadata.java:1179)\n\tat org.apache.cassandra.locator.TokenMetadata.firstToken(TokenMetadata.java:1193)\n\tat org.apache.cassandra.locator.AbstractReplicationStrategy.getNaturalReplicas(AbstractReplicationStrategy.java:95)\n\tat org.apache.cassandra.locator.AbstractReplicationStrategy.getNaturalReplicasForToken(AbstractReplicationStrategy.java:88)\n\tat org.apache.cassandra.locator.ReplicaLayout.forTokenReadLiveSorted(ReplicaLayout.java:330)\n\tat org.apache.cassandra.locator.ReplicaPlans.forRead(ReplicaPlans.java:593)\n\tat org.apache.cassandra.service.reads.AbstractReadExecutor.getReadExecutor(AbstractReadExecutor.java:190)\n\tat org.apache.cassandra.service.StorageProxy.fetchRows(StorageProxy.java:2097)\n\tat org.apache.cassandra.service.StorageProxy.readRegular(StorageProxy.java:1995)\n\tat org.apache.cassandra.service.StorageProxy.read(StorageProxy.java:1873)\n\tat org.apache.cassandra.db.SinglePartitionReadCommand$Group.execute(SinglePartitionReadCommand.java:1286)\n\tat org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:364)\n\tat org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:293)\n\tat org.apache.cassandra.auth.PasswordAuthenticator.select(PasswordAuthenticator.java:201)\n\tat org.apache.cassandra.auth.PasswordAuthenticator.queryHashedPassword(PasswordAuthenticator.java:177)\n\tat com.github.benmanes.caffeine.cache.LocalLoadingCache.lambda$newMappingFunction$2(LocalLoadingCache.java:141)\n\tat com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2413)\n\tat java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)\n\tat com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2411)\n\tat com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2394)\n\tat com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:108)\n\tat com.github.benmanes.caffeine.cache.LocalLoadingCache.get(LocalLoadingCache.java:54)\n\tat org.apache.cassandra.auth.AuthCache.get(AuthCache.java:228)\n\tat org.apache.cassandra.auth.PasswordAuthenticator.authenticate(PasswordAuthenticator.java:142)\n\tat org.apache.cassandra.auth.PasswordAuthenticator$PlainTextSaslAuthenticator.getAuthenticatedUser(PasswordAuthenticator.java:268)\n\tat org.apache.cassandra.transport.messages.AuthResponse.execute(AuthResponse.java:80)\n\tat org.apache.cassandra.transport.Message$Request.execute(Message.java:256)\n\tat org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:194)\n\tat org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:213)\n\tat org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:240)\n\tat org.apache.cassandra.transport.Dispatcher$RequestProcessor.run(Dispatcher.java:137)\n\tat org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:96)\n\tat org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:61)\n\tat org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:71)\n\tat org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:143)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:833)', [node3] 'ERROR [Native-Transport-Auth-Requests-1] 2023-06-29 19:00:01,774 ExceptionHandlers.java:229 - Unexpected exception during request; channel = [id: 0x1205363e, L:/127.0.0.3:9042 - R:/127.0.0.1:58142]\njava.lang.AssertionError: null\n\tat org.apache.cassandra.locator.TokenMetadata.firstTokenIndex(TokenMetadata.java:1179)\n\tat org.apache.cassandra.locator.TokenMetadata.firstToken(TokenMetadata.java:1193)\n\tat org.apache.cassandra.locator.AbstractReplicationStrategy.getNaturalReplicas(AbstractReplicationStrategy.java:95)\n\tat org.apache.cassandra.locator.AbstractReplicationStrategy.getNaturalReplicasForToken(AbstractReplicationStrategy.java:88)\n\tat org.apache.cassandra.locator.ReplicaLayout.forTokenReadLiveSorted(ReplicaLayout.java:330)\n\tat org.apache.cassandra.locator.ReplicaPlans.forRead(ReplicaPlans.java:593)\n\tat org.apache.cassandra.service.reads.AbstractReadExecutor.getReadExecutor(AbstractReadExecutor.java:190)\n\tat org.apache.cassandra.service.StorageProxy.fetchRows(StorageProxy.java:2097)\n\tat org.apache.cassandra.service.StorageProxy.readRegular(StorageProxy.java:1995)\n\tat org.apache.cassandra.service.StorageProxy.read(StorageProxy.java:1873)\n\tat org.apache.cassandra.db.SinglePartitionReadCommand$Group.execute(SinglePartitionReadCommand.java:1286)\n\tat org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:364)\n\tat org.apache.cassandra.cql3.statements.SelectStatement.execute(SelectStatement.java:293)\n\tat org.apache.cassandra.auth.PasswordAuthenticator.select(PasswordAuthenticator.java:201)\n\tat org.apache.cassandra.auth.PasswordAuthenticator.queryHashedPassword(PasswordAuthenticator.java:177)\n\tat com.github.benmanes.caffeine.cache.LocalLoadingCache.lambda$newMappingFunction$2(LocalLoadingCache.java:141)\n\tat com.github.benmanes.caffeine.cache.BoundedLocalCache.lambda$doComputeIfAbsent$14(BoundedLocalCache.java:2413)\n\tat java.base/java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1916)\n\tat com.github.benmanes.caffeine.cache.BoundedLocalCache.doComputeIfAbsent(BoundedLocalCache.java:2411)\n\tat com.github.benmanes.caffeine.cache.BoundedLocalCache.computeIfAbsent(BoundedLocalCache.java:2394)\n\tat com.github.benmanes.caffeine.cache.LocalCache.computeIfAbsent(LocalCache.java:108)\n\tat com.github.benmanes.caffeine.cache.LocalLoadingCache.get(LocalLoadingCache.java:54)\n\tat org.apache.cassandra.auth.AuthCache.get(AuthCache.java:228)\n\tat org.apache.cassandra.auth.PasswordAuthenticator.authenticate(PasswordAuthenticator.java:142)\n\tat org.apache.cassandra.auth.PasswordAuthenticator$PlainTextSaslAuthenticator.getAuthenticatedUser(PasswordAuthenticator.java:268)\n\tat org.apache.cassandra.transport.messages.AuthResponse.execute(AuthResponse.java:80)\n\tat org.apache.cassandra.transport.Message$Request.execute(Message.java:256)\n\tat org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:194)\n\tat org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:213)\n\tat org.apache.cassandra.transport.Dispatcher.processRequest(Dispatcher.java:240)\n\tat org.apache.cassandra.transport.Dispatcher$RequestProcessor.run(Dispatcher.java:137)\n\tat org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:96)\n\tat org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:61)\n\tat org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:71)\n\tat org.apache.cassandra.concurrent.SEPWorker.run(SEPWorker.java:143)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:833)']
{code}



[~jlewandowski] can you post a link to a rebased PR and new CI runs including upgrade tests please? Just for my clarity thx in advance. Also be advised it _seems_ trunk is [failing|https://issues.apache.org/jira/browse/CASSANDRA-18133?focusedCommentId=17742665&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17742665] atm so you might want to wait for that.

Test runs of main categories:

[https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/795/workflows/f5541759-8fc6-4ecd-bc83-4a78aa925e5f]

 

In the above run Python dtests failed because I forgot to use the feature branch for cassandra-dtest repo, here is a correct rerun:

[https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/797/workflows/ba2e0332-65e0-40b7-8255-67360319bb33]

 

Also upgrade dtests are failing, I ran the tests against the current trunk to compare ([https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/799/workflows/8e9357bd-e192-4dcb-a500-761f227bc4ad])

 

If on the first CI run above you had the wrong dtests branch, does it mean we have no dtests upgrade tests? You should trigger them in the second CI link pointing at the correct dtest branch?

No, in the first test run I uses just trunk, when look at the dtest PR you will see that it only changes a single dtest, which is not an upgrade dtest

[~jlewandowski] 

- the in-jvm upgrade tests failed with: 

 
{code:java}
Caused by: java.lang.RuntimeException: java.lang.ClassNotFoundException: org.apache.cassandra.distributed.impl.IsolatedExecutor{code}
 
 * The simulator test failed again? Did the Netty upgrade trigger it to fail all the time in CI? Try with the repeated runner. (I know you mentioned locally it completes successfully)
 * I cannot load the link to the Python upgrade tests for unknown reasons. It freezes in Loading. 

I still have to do the actual review.

 

 

 

bq. I cannot load the link to the Python upgrade tests for unknown reasons. It freezes in Loading. 

Same for me, but I will point out they probably are going to be full of failures due to CASSANDRA-18499 anyway.

^Same. There are failures that need investigation.

Python upgrade tests to the wrong branch failed on git errors. The last link wont load for me now, but it did before and the failures were related to [this|https://issues.apache.org/jira/browse/CASSANDRA-18499?focusedCommentId=17733621&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17733621], iirc I talked to Jacek about it. Circle has been acting weird lately for me.

I would recommend investigating the Simulator ones, jvm upgrade dtests and getting a new CI run. Do trigger j17 as well and see if they align to baseline? If they pass locally it's probably circle being difficult these days.

I'm sorry for that, I've just noticed that the last link had extra closing parentheses at end which broke the link. That last run was on trunk

My other mistake is that it were JVM dtests rather than Python :facepalm

updated the comment and the link, I've started JVM upgrade dtests on trunk too

I've just tested on trunk

{noformat}
testsome:
    [mkdir] Created dir: /home/jlewandowski/dev/cassandra/trunk/build/test/cassandra
    [mkdir] Created dir: /home/jlewandowski/dev/cassandra/trunk/build/test/output
[junit-timeout] OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.
[junit-timeout] Testsuite: org.apache.cassandra.simulator.test.ShortPaxosSimulationTest-.jdk11
[junit-timeout] Testsuite: org.apache.cassandra.simulator.test.ShortPaxosSimulationTest-cassandra.testtag_IS_UNDEFINED
[junit-timeout] Testsuite: org.apache.cassandra.simulator.test.ShortPaxosSimulationTest-cassandra.testtag_IS_UNDEFINED Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0 sec
[junit-timeout] 
[junit-timeout] Testcase: org.apache.cassandra.simulator.test.ShortPaxosSimulationTest:simulationTest-cassandra.testtag_IS_UNDEFINED:	Caused an ERROR
[junit-timeout] Timeout occurred. Please note the time in the report does not reflect the time until the timeout.
[junit-timeout] junit.framework.AssertionFailedError: Timeout occurred. Please note the time in the report does not reflect the time until the timeout.
[junit-timeout] 	at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
[junit-timeout] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[junit-timeout] 	at java.base/java.util.Vector.forEach(Vector.java:1394)
[junit-timeout] 	at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
[junit-timeout] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[junit-timeout] 	at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
[junit-timeout] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[junit-timeout] 	at java.base/java.util.Vector.forEach(Vector.java:1394)
[junit-timeout] 	at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
[junit-timeout] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[junit-timeout] 	at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
[junit-timeout] 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[junit-timeout] 
[junit-timeout] 
[junit-timeout] Test org.apache.cassandra.simulator.test.ShortPaxosSimulationTest FAILED (timeout)

BUILD FAILED
/home/jlewandowski/dev/cassandra/trunk/build.xml:1372: The following error occurred while executing this line:
/home/jlewandowski/dev/cassandra/trunk/build.xml:1641: Some test(s) failed.

Total time: 8 minutes 4 seconds
{noformat}


JVM Upgrade tests are passing on trunk so I need to figure out the problem on my branch

Have you got the link to this last run?

The links in this comment https://issues.apache.org/jira/browse/CASSANDRA-17992?focusedCommentId=17743696&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17743696 are now valid

It seems that JVM upgrade tests are failing due to bouncy castle... investigating...

I found a hidden exception under the hood:

{noformat}
java.lang.SecurityException: Invalid signature file digest for Manifest main attributes
	at java.base/sun.security.util.SignatureFileVerifier.processImpl(SignatureFileVerifier.java:316)
	at java.base/sun.security.util.SignatureFileVerifier.process(SignatureFileVerifier.java:258)
	at java.base/java.util.jar.JarVerifier.processEntry(JarVerifier.java:283)
	at java.base/java.util.jar.JarVerifier.update(JarVerifier.java:239)
	at java.base/java.util.jar.JarFile.initializeVerifier(JarFile.java:767)
	at java.base/java.util.jar.JarFile.getInputStream(JarFile.java:852)
	at java.base/jdk.internal.util.jar.JarIndex.getJarIndex(JarIndex.java:121)
	at java.base/jdk.internal.loader.URLClassPath$JarLoader$1.run(URLClassPath.java:760)
	at java.base/jdk.internal.loader.URLClassPath$JarLoader$1.run(URLClassPath.java:752)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/jdk.internal.loader.URLClassPath$JarLoader.ensureOpen(URLClassPath.java:751)
	at java.base/jdk.internal.loader.URLClassPath$JarLoader.<init>(URLClassPath.java:726)
	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:494)
	at java.base/jdk.internal.loader.URLClassPath$3.run(URLClassPath.java:477)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:476)
	at java.base/jdk.internal.loader.URLClassPath.getLoader(URLClassPath.java:445)
	at java.base/jdk.internal.loader.URLClassPath.getResource(URLClassPath.java:314)
	at java.base/java.net.URLClassLoader$1.run(URLClassLoader.java:455)
	at java.base/java.net.URLClassLoader$1.run(URLClassLoader.java:452)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.net.URLClassLoader.findClass(URLClassLoader.java:451)
	at org.apache.cassandra.distributed.shared.InstanceClassLoader.findClass(InstanceClassLoader.java:143)
	at org.apache.cassandra.distributed.shared.InstanceClassLoader.loadClassInternal(InstanceClassLoader.java:126)
	at org.apache.cassandra.distributed.shared.InstanceClassLoader.loadClass(InstanceClassLoader.java:112)
	at org.apache.cassandra.distributed.impl.IsolatedExecutor.lookupDeserializeOneObject(IsolatedExecutor.java:235)
	at org.apache.cassandra.distributed.impl.IsolatedExecutor.transferAdhocPropagate(IsolatedExecutor.java:204)
	at org.apache.cassandra.distributed.impl.AbstractCluster$Wrapper.newInstance(AbstractCluster.java:292)
	at org.apache.cassandra.distributed.impl.AbstractCluster$Wrapper.delegateForStartup(AbstractCluster.java:267)
	at org.apache.cassandra.distributed.impl.AbstractCluster$Wrapper.startup(AbstractCluster.java:385)
	at org.apache.cassandra.distributed.impl.AbstractCluster$Wrapper.startup(AbstractCluster.java:358)
	at org.apache.cassandra.distributed.upgrade.UpgradeTestBase$TestCase.run(UpgradeTestBase.java:359)
	at org.apache.cassandra.distributed.upgrade.BatchUpgradeTest.batchTest(BatchUpgradeTest.java:53)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
{noformat}

It basically fails when trying to load {{dtest-5.0.jar}}



I've managed to fix it. The problem is not related to this particular story but the way we produce a {{dtest jar}}. That repackages all dependencies along with our classes in a single jar. Some of the dependencies might have digital signatures which are extracted into {{META-INF}} as say {{*.SF}} files. We need to remove them because they are invalid for the uber jar we produce. 

(see https://stackoverflow.com/questions/35577351/exclude-jar-from-ant-build-using-zipgroupfileset/35593838#35593838)

Therefore, there are exclusion in {{zipgroupfileset}} operations, more or less like this:
{noformat}
<zipgroupfileset dir="${build.lib}" includes="*.jar" excludes="META-INF/*.SF"/>
{noformat}

However, this is wrong. {{exclude}} attribute denotes jar files we don't want to repackage rather than filter on the content of the jar file. The new BouncyCastle jars include signatures in SF and DSA files and all of them lands in the final dtest jar regardless of that filter.

To fix it, I needed to use the following approach:
{noformat}
          <zipgroupfileset dir="${build.lib}" includes="*.jar" excludes="bc*.jar"/>
          <zipgroupfileset dir="${test.lib}/jars" includes="jimfs-1.1.jar,dtest-api-*.jar,asm-*.jar,javassist-*.jar,reflections-*.jar,semver4j-*.jar" excludes="bc*.jar"/>
          <zipgroupfileset dir="${build.dir.lib}/jars" includes="asm-*.jar" excludes="bc*.jar"/>
          <zipfileset src="${build.lib}/bcpkix-jdk15on-1.70.jar" excludes="META-INF/*.SF,META-INF/*.DSA"/>
          <zipfileset src="${build.lib}/bcprov-jdk15on-1.70.jar" excludes="META-INF/*.SF,META-INF/*.DSA"/>
          <zipfileset src="${build.lib}/bcutil-jdk15on-1.70.jar" excludes="META-INF/*.SF,META-INF/*.DSA"/>
{noformat}

that is, I excluded bc jars from that zipgroupfileset repackaging and included them individually. Unlike {{zipgroupfileset}}, {{zipfileset}} allows for filtering the content of the repackaged jar file. Unfortunately, it allows to add a single jar at a time, thus we need to provide its exact name. This solution is not very flexible - we will have to update that task manually each time we change certain dependencies.

I'll be looking for a better approach, but at least we know what is going on.


Nice catch...

I think we may use more radical approach:

{code}
  <target name="dtest-jar" depends="build-test, build" description="Create dtest-compatible jar, including all dependencies">
      <delete dir="${build.dir}/dtest/**" quiet="true"/>

      <copy todir="${build.dir}/dtest" quiet="true">
          <fileset dir="${build.classes.main}"/>
          <fileset dir="${test.classes}"/>
          <fileset dir="${test.conf}" />
      </copy>
      <unzip dest="${build.dir}/dtest">
          <fileset dir="${test.lib}/jars" includes="jimfs-1.1.jar,dtest-api-*.jar,asm-*.jar,javassist-*.jar,reflections-*.jar,semver4j-*.jar"/>
      </unzip>
      <unzip dest="${build.dir}/dtest">
          <fileset dir="${build.dir.lib}/jars" includes="*.jar"/>
      </unzip>

      <jar jarfile="${build.dir}/dtest-${base.version}.jar" duplicate="preserve">
          <fileset dir="${build.dir}/dtest">
              <exclude name="META-INF/*.SF"/>
              <exclude name="META-INF/*.DSA"/>
              <exclude name="META-INF/*.RSA"/>
          </fileset>
      </jar>

      <delete dir="${build.dir}/dtest"/>
  </target>
{code}

which should be probably applied to all branches


I've pushed this update along with rebased branch; now running tests: https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/803/workflows/8a8a4b36-92c8-41e6-95d6-364951eb968e (/)



Tomorrow I may try to have a look on python dtests

Excellent catch, and the solution looks good to me! Thanks!
{quote}bq. {color:#172b4d}which should probably be applied to all branches{color}
{quote}
{color:#172b4d}Indeed but I suggest we focus on trunk now and the netty upgrade and open a follow-up ticket to fix the rest of the branches.{color}

I agree, currently they are not needed, just something to remember in case of problems.

[~jlewandowski],  I was digging a bit into this issue [https://github.com/netty/netty/issues/10317]

While BountyCastle is the way to go for JDK17, we don't explicitly need it for JDK11.

[https://bugs.openjdk.java.net/browse/JDK-8241039] is linked from [JDK 15 ea build 16|https://jdk.java.net/15/release-notes].

Do we want to use BountyCastle only when JDK17 is detected? Also, adding a new dependency requires an ML thread pointing to the ticket where it is needed. Do you mind triggering the discussion, please? 

I'd not complicate the build unnecessarily...

 

btw. we have a problem with that one simulation test, if fails with:
{noformat}
[junit-timeout] ERROR [COMMIT-LOG-ALLOCATOR:1] <main> 2023-07-26 12:23:26,455 InfiniteLoopExecutor.java:136 - Exception thrown by runnable, continuing with loop
[junit-timeout] org.apache.cassandra.io.FSWriteError: java.nio.channels.ClosedByInterruptException
[junit-timeout]     at org.apache.cassandra.db.commitlog.CompressedSegment.write(CompressedSegment.java:86)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment.sync$unsync(CommitLogSegment.java:359)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment.sync(CommitLogSegment.java)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment.close$unsync(CommitLogSegment.java:528)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment.close(CommitLogSegment.java)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment.discard(CommitLogSegment.java:447)
[junit-timeout]     at org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager.discardAvailableSegment(AbstractCommitLogSegmentManager.java:544)
[junit-timeout]     at org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager$AllocatorRunnable.run(AbstractCommitLogSegmentManager.java:201)
[junit-timeout]     at org.apache.cassandra.concurrent.InfiniteLoopExecutor.loop(InfiniteLoopExecutor.java:121)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptedExecution$InterceptedThreadStart.run(InterceptedExecution.java:216)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]     at java.base/java.lang.Thread.run(Thread.java:829)
[junit-timeout] Caused by: java.nio.channels.ClosedByInterruptException: null
[junit-timeout]     at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:199)
[junit-timeout]     at com.google.common.jimfs.JimfsFileChannel.position(JimfsFileChannel.java:306)
[junit-timeout]     at org.apache.cassandra.io.filesystem.ForwardingFileChannel.position(ForwardingFileChannel.java:70)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CompressedSegment.write(CompressedSegment.java:78)
[junit-timeout]     ... 11 common frames omitted
[junit-timeout] ERROR [Stream-Deserializer-/127.0.0.1:7012-1:1] <main> 2023-07-26 12:23:26,455 StreamSession.java:691 - [Stream #39395750-2c4b-11ea-0000-000000000002] Socket closed before session completion, peer 127.0.0.1:7012 is probably down.
[junit-timeout] java.nio.channels.ClosedChannelException: null
[junit-timeout]     at org.apache.cassandra.distributed.impl.DirectStreamingConnectionFactory$DirectConnection$DirectStreamingChannel$In.reBuffer(DirectStreamingConnectionFactory.java:194)
[junit-timeout]     at org.apache.cassandra.io.util.RebufferingInputStream.readByte(RebufferingInputStream.java:178)
[junit-timeout]     at org.apache.cassandra.streaming.messages.StreamMessage.deserialize(StreamMessage.java:49)
[junit-timeout]     at org.apache.cassandra.streaming.StreamDeserializingTask.run(StreamDeserializingTask.java:59)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptedExecution$InterceptedThreadStart.run(InterceptedExecution.java:216)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]     at java.base/java.lang.Thread.run(Thread.java:829)
[junit-timeout] ERROR [127.0.0.1/in@8:1] <main> 2023-07-26 12:23:26,454 StreamSession.java:691 - [Stream #39395750-2c4b-11ea-0000-000000000002] Socket closed before session completion, peer 127.0.0.1:7012 is probably down.
[junit-timeout] java.nio.channels.ClosedChannelException: null
[junit-timeout]     at org.apache.cassandra.distributed.impl.DirectStreamingConnectionFactory$DirectConnection$DirectStreamingChannel$In.reBuffer(DirectStreamingConnectionFactory.java:194)
[junit-timeout]     at org.apache.cassandra.io.util.RebufferingInputStream.readByte(RebufferingInputStream.java:178)
[junit-timeout]     at org.apache.cassandra.streaming.messages.StreamMessage.deserialize(StreamMessage.java:49)
[junit-timeout]     at org.apache.cassandra.streaming.StreamDeserializingTask.run(StreamDeserializingTask.java:59)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptedExecution$InterceptedThreadStart.run(InterceptedExecution.java:216)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]     at java.base/java.lang.Thread.run(Thread.java:829)
[junit-timeout] ERROR [127.0.0.1/in@6:1] <main> 2023-07-26 12:23:26,455 StreamSession.java:691 - [Stream #39395750-2c4b-11ea-0000-000000000002] Socket closed before session completion, peer 127.0.0.1:7012 is probably down.
[junit-timeout] java.nio.channels.ClosedChannelException: null
[junit-timeout]     at org.apache.cassandra.distributed.impl.DirectStreamingConnectionFactory$DirectConnection$DirectStreamingChannel$In.reBuffer(DirectStreamingConnectionFactory.java:194)
[junit-timeout]     at org.apache.cassandra.io.util.RebufferingInputStream.readByte(RebufferingInputStream.java:178)
[junit-timeout]     at org.apache.cassandra.streaming.messages.StreamMessage.deserialize(StreamMessage.java:49)
[junit-timeout]     at org.apache.cassandra.streaming.StreamDeserializingTask.run(StreamDeserializingTask.java:59)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptedExecution$InterceptedThreadStart.run(InterceptedExecution.java:216)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]     at java.base/java.lang.Thread.run(Thread.java:829)
[junit-timeout] WARN  [Stream-Deserializer-/127.0.0.4:7012-3:1] <main> 2023-07-26 12:23:26,455 StreamResultFuture.java:226 - Unexpected exception in listern while calling handleStreamEvent
[junit-timeout] org.apache.cassandra.utils.concurrent.UncheckedInterruptedException: null
[junit-timeout]     at org.apache.cassandra.utils.concurrent.Awaitable$Defaults.awaitThrowUncheckedOnInterrupt(Awaitable.java:135)
[junit-timeout]     at org.apache.cassandra.utils.concurrent.Awaitable$AbstractAwaitable.awaitThrowUncheckedOnInterrupt(Awaitable.java:235)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingAwaitable.awaitThrowUncheckedOnInterrupt(InterceptingAwaitable.java:91)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment.waitForSync(CommitLogSegment.java:516)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment$Allocation.awaitDiskSync(CommitLogSegment.java:756)
[junit-timeout]     at org.apache.cassandra.db.commitlog.BatchCommitLogService.maybeWaitForSync(BatchCommitLogService.java:41)
[junit-timeout]     at org.apache.cassandra.db.commitlog.AbstractCommitLogService.finishWriteFor(AbstractCommitLogService.java:284)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLog.add(CommitLog.java:330)
[junit-timeout]     at org.apache.cassandra.db.CassandraKeyspaceWriteHandler.addToCommitLog(CassandraKeyspaceWriteHandler.java:100)
[junit-timeout]     at org.apache.cassandra.db.CassandraKeyspaceWriteHandler.beginWrite(CassandraKeyspaceWriteHandler.java:54)
[junit-timeout]     at org.apache.cassandra.db.Keyspace.applyInternal(Keyspace.java:615)
[junit-timeout]     at org.apache.cassandra.db.Keyspace.apply(Keyspace.java:499)
[junit-timeout]     at org.apache.cassandra.db.Mutation.apply(Mutation.java:246)
[junit-timeout]     at org.apache.cassandra.db.Mutation.apply(Mutation.java:266)
[junit-timeout]     at org.apache.cassandra.cql3.statements.ModificationStatement.executeInternalWithoutCondition(ModificationStatement.java:692)
[junit-timeout]     at org.apache.cassandra.cql3.statements.ModificationStatement.executeLocally(ModificationStatement.java:683)
[junit-timeout]     at org.apache.cassandra.cql3.QueryProcessor.executeInternal(QueryProcessor.java:447)
[junit-timeout]     at org.apache.cassandra.db.SystemKeyspace.updateAvailableRanges$unsync(SystemKeyspace.java:1633)
[junit-timeout]     at org.apache.cassandra.db.SystemKeyspace.updateAvailableRanges(SystemKeyspace.java)
[junit-timeout]     at org.apache.cassandra.dht.StreamStateStore.handleStreamEvent(StreamStateStore.java:84)
[junit-timeout]     at org.apache.cassandra.streaming.StreamResultFuture.fireStreamEvent$unsync(StreamResultFuture.java:222)
[junit-timeout]     at org.apache.cassandra.streaming.StreamResultFuture.fireStreamEvent(StreamResultFuture.java)
[junit-timeout]     at org.apache.cassandra.streaming.StreamResultFuture.handleSessionComplete(StreamResultFuture.java:202)
[junit-timeout]     at org.apache.cassandra.streaming.StreamSession.closeSession$unsync(StreamSession.java:553)
[junit-timeout]     at org.apache.cassandra.streaming.StreamSession.closeSession(StreamSession.java)
[junit-timeout]     at org.apache.cassandra.streaming.StreamSession.closeSession(StreamSession.java:523)
[junit-timeout]     at org.apache.cassandra.streaming.StreamSession.initiatorCompleteOrWait(StreamSession.java:1109)
[junit-timeout]     at org.apache.cassandra.streaming.StreamSession.complete$unsync(StreamSession.java:1063)
[junit-timeout]     at org.apache.cassandra.streaming.StreamSession.complete(StreamSession.java)
[junit-timeout]     at org.apache.cassandra.streaming.StreamSession.messageReceived$unsync(StreamSession.java:643)
[junit-timeout]     at org.apache.cassandra.streaming.StreamSession.messageReceived(StreamSession.java)
[junit-timeout]     at org.apache.cassandra.streaming.StreamDeserializingTask.run(StreamDeserializingTask.java:76)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptedExecution$InterceptedThreadStart.run(InterceptedExecution.java:216)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]     at java.base/java.lang.Thread.run(Thread.java:829)
[junit-timeout] WARN  [127.0.0.1/in@8:1] <main> 2023-07-26 12:23:26,469 StreamResultFuture.java:250 - [Stream #39395750-2c4b-11ea-0000-000000000002] Stream failed: 
[junit-timeout] Session peer /127.0.0.1:7012 Failed because there was an java.nio.channels.ClosedChannelException with state=STREAMING
[junit-timeout] ERROR [COMMIT-LOG-ALLOCATOR:1] <main> 2023-07-26 12:23:26,474 InfiniteLoopExecutor.java:136 - Exception thrown by runnable, continuing with loop
[junit-timeout] org.apache.cassandra.io.FSWriteError: java.nio.channels.ClosedByInterruptException
[junit-timeout]     at org.apache.cassandra.db.commitlog.CompressedSegment.write(CompressedSegment.java:86)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment.sync$unsync(CommitLogSegment.java:359)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment.sync(CommitLogSegment.java)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment.close$unsync(CommitLogSegment.java:528)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment.close(CommitLogSegment.java)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment.discard(CommitLogSegment.java:447)
[junit-timeout]     at org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager.discardAvailableSegment(AbstractCommitLogSegmentManager.java:544)
[junit-timeout]     at org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager$AllocatorRunnable.run(AbstractCommitLogSegmentManager.java:201)
[junit-timeout]     at org.apache.cassandra.concurrent.InfiniteLoopExecutor.loop(InfiniteLoopExecutor.java:121)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptedExecution$InterceptedThreadStart.run(InterceptedExecution.java:216)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]     at java.base/java.lang.Thread.run(Thread.java:829)
[junit-timeout] Caused by: java.nio.channels.ClosedByInterruptException: null
[junit-timeout]     at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:199)
[junit-timeout]     at com.google.common.jimfs.JimfsFileChannel.position(JimfsFileChannel.java:306)
[junit-timeout]     at org.apache.cassandra.io.filesystem.ForwardingFileChannel.position(ForwardingFileChannel.java:70)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CompressedSegment.write(CompressedSegment.java:78)
[junit-timeout]     ... 11 common frames omitted
[junit-timeout] ERROR [COMMIT-LOG-ALLOCATOR:1] <main> 2023-07-26 12:23:26,486 InfiniteLoopExecutor.java:136 - Exception thrown by runnable, continuing with loop
[junit-timeout] org.apache.cassandra.io.FSWriteError: java.nio.channels.ClosedByInterruptException
[junit-timeout]     at org.apache.cassandra.db.commitlog.CompressedSegment.write(CompressedSegment.java:86)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment.sync$unsync(CommitLogSegment.java:359)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment.sync(CommitLogSegment.java)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment.close$unsync(CommitLogSegment.java:528)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment.close(CommitLogSegment.java)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment.discard(CommitLogSegment.java:447)
[junit-timeout]     at org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager.discardAvailableSegment(AbstractCommitLogSegmentManager.java:544)
[junit-timeout]     at org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager$AllocatorRunnable.run(AbstractCommitLogSegmentManager.java:201)
[junit-timeout]     at org.apache.cassandra.concurrent.InfiniteLoopExecutor.loop(InfiniteLoopExecutor.java:121)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptedExecution$InterceptedThreadStart.run(InterceptedExecution.java:216)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]     at java.base/java.lang.Thread.run(Thread.java:829)
[junit-timeout] Caused by: java.nio.channels.ClosedByInterruptException: null
[junit-timeout]     at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:199)
[junit-timeout]     at com.google.common.jimfs.JimfsFileChannel.position(JimfsFileChannel.java:306)
[junit-timeout]     at org.apache.cassandra.io.filesystem.ForwardingFileChannel.position(ForwardingFileChannel.java:70)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CompressedSegment.write(CompressedSegment.java:78)
[junit-timeout]     ... 11 common frames omitted
[junit-timeout] ERROR [isolatedExecutor:3] <main> 2023-07-26 12:23:26,486 PaxosSimulation.java:91 - Unexpected exception
[junit-timeout] java.lang.AssertionError: null
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingMonitors$MonitorState.restore(InterceptingMonitors.java:174)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingMonitors.wait(InterceptingMonitors.java:591)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingMonitors.waitUntil(InterceptingMonitors.java:546)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptorOfSystemMethods$Global.waitUntil(InterceptorOfSystemMethods.java:99)
[junit-timeout]     at org.apache.cassandra.service.paxos.PaxosPrepare.awaitUntil$unsync(PaxosPrepare.java:393)
[junit-timeout]     at org.apache.cassandra.service.paxos.PaxosPrepare.awaitUntil(PaxosPrepare.java)
[junit-timeout]     at org.apache.cassandra.service.paxos.Paxos.begin(Paxos.java:971)
[junit-timeout]     at org.apache.cassandra.service.paxos.Paxos.cas(Paxos.java:667)
[junit-timeout]     at org.apache.cassandra.service.paxos.Paxos.cas(Paxos.java:626)
[junit-timeout]     at org.apache.cassandra.service.StorageProxy.cas(StorageProxy.java:324)
[junit-timeout]     at org.apache.cassandra.cql3.statements.ModificationStatement.executeWithCondition(ModificationStatement.java:542)
[junit-timeout]     at org.apache.cassandra.cql3.statements.ModificationStatement.execute(ModificationStatement.java:501)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Query.call(Query.java:75)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Query.call(Query.java:40)
[junit-timeout]     at org.apache.cassandra.distributed.api.IInvokableInstance.unsafeCallOnThisThread(IInvokableInstance.java:93)
[junit-timeout]     at org.apache.cassandra.simulator.systems.SimulatedActionCallable$1.run(SimulatedActionCallable.java:47)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingExecutor$InterceptingPooledExecutor$WaitingThread.lambda$new$1(InterceptingExecutor.java:317)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]     at java.base/java.lang.Thread.run(Thread.java:829)
[junit-timeout] ERROR [COMMIT-LOG-ALLOCATOR:1] <main> 2023-07-26 12:23:26,489 InfiniteLoopExecutor.java:136 - Exception thrown by runnable, continuing with loop
[junit-timeout] org.apache.cassandra.io.FSWriteError: java.nio.channels.ClosedByInterruptException
[junit-timeout]     at org.apache.cassandra.db.commitlog.CompressedSegment.write(CompressedSegment.java:86)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment.sync$unsync(CommitLogSegment.java:359)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment.sync(CommitLogSegment.java)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment.close$unsync(CommitLogSegment.java:528)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment.close(CommitLogSegment.java)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CommitLogSegment.discard(CommitLogSegment.java:447)
[junit-timeout]     at org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager.discardAvailableSegment(AbstractCommitLogSegmentManager.java:544)
[junit-timeout]     at org.apache.cassandra.db.commitlog.AbstractCommitLogSegmentManager$AllocatorRunnable.run(AbstractCommitLogSegmentManager.java:201)
[junit-timeout]     at org.apache.cassandra.concurrent.InfiniteLoopExecutor.loop(InfiniteLoopExecutor.java:121)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptedExecution$InterceptedThreadStart.run(InterceptedExecution.java:216)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]     at java.base/java.lang.Thread.run(Thread.java:829)
[junit-timeout] Caused by: java.nio.channels.ClosedByInterruptException: null
[junit-timeout]     at java.base/java.nio.channels.spi.AbstractInterruptibleChannel.end(AbstractInterruptibleChannel.java:199)
[junit-timeout]     at com.google.common.jimfs.JimfsFileChannel.position(JimfsFileChannel.java:306)
[junit-timeout]     at org.apache.cassandra.io.filesystem.ForwardingFileChannel.position(ForwardingFileChannel.java:70)
[junit-timeout]     at org.apache.cassandra.db.commitlog.CompressedSegment.write(CompressedSegment.java:78)
[junit-timeout]     ... 11 common frames omitted
[junit-timeout] WARN  [isolatedExecutor:2] <main> 2023-07-26 12:23:26,520 Gossiper.java:2221 - No local state, state is in silent shutdown, or node hasn't joined, not announcing shutdown
[junit-timeout] WARN  [isolatedExecutor:3] <main> 2023-07-26 12:23:26,525 StorageService.java:3194 - Node /127.0.0.3:7012 is currently being replaced by node /127.0.0.2:7012.
[junit-timeout] WARN  [isolatedExecutor:3] <main> 2023-07-26 12:23:26,527 StorageService.java:3194 - Node /127.0.0.3:7012 is currently being replaced by node /127.0.0.2:7012.
[junit-timeout] ------------- ---------------- ---------------
[junit-timeout] ------------- Standard Error -----------------
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.security.ThreadAwareSecurityManager$1
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.utils.concurrent.Semaphore$Standard
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.metrics.Sampler$Sample
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.distributed.shared.VersionedApplicationState
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.concurrent.SingleThreadExecutorPlus$AtLeastOnce
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.net.ForwardingInfo
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.distributed.impl.MessageImpl
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.distributed.impl.UnsafeGossipHelper$HostInfo
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.service.paxos.ContentionStrategy$TimeLimitedLatencySupplier
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.utils.concurrent.FutureCombiner$Listener
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.streaming.SessionInfo
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.streaming.StreamState
[junit-timeout] Thread[NettyStreaming-Outbound-/127.0.0.2.7012:1,5,node4]
[junit-timeout] java.lang.ArrayStoreException: org.apache.cassandra.io.util.DataOutputStreamPlus$1
[junit-timeout]     at java.base/java.util.AbstractCollection.toArray(AbstractCollection.java:200)
[junit-timeout]     at java.base/java.util.Collections$SetFromMap.toArray(Collections.java:5569)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocal.removeAll(FastThreadLocal.java:65)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptibleThread.onTermination(InterceptibleThread.java:380)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingExecutor$InterceptingPooledExecutor$WaitingThread.lambda$new$0(InterceptingExecutor.java:362)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptibleThread.runDeterministic(InterceptibleThread.java:458)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingExecutor$InterceptingPooledExecutor$WaitingThread.lambda$new$1(InterceptingExecutor.java:357)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]     at java.base/java.lang.Thread.run(Thread.java:829)
[junit-timeout] Thread[MutationStage:3,5,node1]
[junit-timeout] org.apache.cassandra.utils.concurrent.UncheckedInterruptedException: java.lang.InterruptedException
[junit-timeout]     at org.apache.cassandra.utils.Throwables.unchecked(Throwables.java:307)
[junit-timeout]     at org.apache.cassandra.utils.Throwables.throwAsUncheckedException(Throwables.java:318)
[junit-timeout]     at org.apache.cassandra.distributed.impl.IsolatedExecutor.waitOn(IsolatedExecutor.java:281)
[junit-timeout]     at org.apache.cassandra.distributed.impl.IsolatedExecutor.lambda$sync$12(IsolatedExecutor.java:157)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance.receiveMessage(Instance.java:477)
[junit-timeout]     at org.apache.cassandra.distributed.impl.AbstractCluster$Wrapper.receiveMessage(AbstractCluster.java:466)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptibleThread.interceptMessage(InterceptibleThread.java:313)
[junit-timeout]     at org.apache.cassandra.simulator.systems.SimulatedMessageDelivery.accept(SimulatedMessageDelivery.java:40)
[junit-timeout]     at org.apache.cassandra.distributed.impl.AbstractCluster.deliverMessage(AbstractCluster.java:784)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance.lambda$registerMockMessaging$3(Instance.java:343)
[junit-timeout]     at org.apache.cassandra.net.OutboundSink$Filtered.accept(OutboundSink.java:54)
[junit-timeout]     at org.apache.cassandra.net.OutboundSink$Filtered.accept(OutboundSink.java:55)
[junit-timeout]     at org.apache.cassandra.net.OutboundSink.accept(OutboundSink.java:70)
[junit-timeout]     at org.apache.cassandra.net.MessagingService.send(MessagingService.java:427)
[junit-timeout]     at org.apache.cassandra.net.MessagingService.send(MessagingService.java:397)
[junit-timeout]     at org.apache.cassandra.net.InboundSink.fail(InboundSink.java:89)
[junit-timeout]     at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:101)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance.lambda$receiveMessageRunnable$43231af8$1(Instance.java:515)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance.receiveMessageWithInvokingThread(Instance.java:485)
[junit-timeout]     at org.apache.cassandra.distributed.impl.AbstractCluster$Wrapper.receiveMessageWithInvokingThread(AbstractCluster.java:474)
[junit-timeout]     at org.apache.cassandra.simulator.systems.SimulatedAction.lambda$applyToMessage$3(SimulatedAction.java:352)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptedExecution$InterceptedRunnableExecution.run(InterceptedExecution.java:118)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingExecutor$InterceptingPooledExecutor$WaitingThread.lambda$new$1(InterceptingExecutor.java:317)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]     at java.base/java.lang.Thread.run(Thread.java:829)
[junit-timeout] Caused by: java.lang.InterruptedException
[junit-timeout]     at java.base/java.lang.Object.wait(Native Method)
[junit-timeout]     at java.base/java.lang.Object.wait(Object.java:328)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingMonitors.wait(InterceptingMonitors.java:553)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptorOfGlobalMethods$IfInterceptibleThread.wait(InterceptorOfGlobalMethods.java:155)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptorOfSystemMethods$Global.wait(InterceptorOfSystemMethods.java:104)
[junit-timeout]     at org.apache.cassandra.utils.concurrent.SyncFuture.await$unsync(SyncFuture.java:151)
[junit-timeout]     at org.apache.cassandra.utils.concurrent.SyncFuture.await(SyncFuture.java)
[junit-timeout]     at org.apache.cassandra.utils.concurrent.AbstractFuture.get(AbstractFuture.java:245)
[junit-timeout]     at org.apache.cassandra.distributed.impl.IsolatedExecutor.waitOn(IsolatedExecutor.java:276)
[junit-timeout]     ... 22 more
[junit-timeout] Thread[MutationStage:2,5,node1]
[junit-timeout] java.lang.OutOfMemoryError: Requested array size exceeds VM limit
[junit-timeout]     at org.apache.cassandra.simulator.SimulatorUtils.failWithOOM(SimulatorUtils.java:36)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingGlobalMethods.ifIntercepted(InterceptingGlobalMethods.java:105)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingMonitors.wait(InterceptingMonitors.java:552)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptorOfSystemMethods$Global.wait(InterceptorOfSystemMethods.java:104)
[junit-timeout]     at org.apache.cassandra.utils.concurrent.SyncFuture.await$unsync(SyncFuture.java:151)
[junit-timeout]     at org.apache.cassandra.utils.concurrent.SyncFuture.await(SyncFuture.java)
[junit-timeout]     at org.apache.cassandra.utils.concurrent.AbstractFuture.get(AbstractFuture.java:245)
[junit-timeout]     at org.apache.cassandra.distributed.impl.IsolatedExecutor.waitOn(IsolatedExecutor.java:276)
[junit-timeout]     at org.apache.cassandra.distributed.impl.IsolatedExecutor.lambda$sync$12(IsolatedExecutor.java:157)
[junit-timeout]     at org.apache.cassandra.distributed.impl.IsolatedExecutor$$Lambda$8884/0x00000001024e3c40.accept(Unknown Source)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance.receiveMessage(Instance.java:477)
[junit-timeout]     at org.apache.cassandra.distributed.impl.AbstractCluster$Wrapper.receiveMessage(AbstractCluster.java:466)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptibleThread.interceptMessage(InterceptibleThread.java:313)
[junit-timeout]     at org.apache.cassandra.simulator.systems.SimulatedMessageDelivery.accept(SimulatedMessageDelivery.java:40)
[junit-timeout]     at org.apache.cassandra.distributed.impl.AbstractCluster.deliverMessage(AbstractCluster.java:784)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance.lambda$registerMockMessaging$3(Instance.java:343)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance$$Lambda$1750/0x0000000100c68040.test(Unknown Source)
[junit-timeout]     at org.apache.cassandra.net.OutboundSink$Filtered.accept(OutboundSink.java:54)
[junit-timeout]     at org.apache.cassandra.net.OutboundSink$Filtered.accept(OutboundSink.java:55)
[junit-timeout]     at org.apache.cassandra.net.OutboundSink.accept(OutboundSink.java:70)
[junit-timeout]     at org.apache.cassandra.net.MessagingService.send(MessagingService.java:427)
[junit-timeout]     at org.apache.cassandra.net.MessagingService.send(MessagingService.java:397)
[junit-timeout]     at org.apache.cassandra.net.InboundSink.fail(InboundSink.java:89)
[junit-timeout]     at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:101)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance.lambda$receiveMessageRunnable$43231af8$1(Instance.java:515)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance$$Lambda$2955/0x0000000101058040.accept(Unknown Source)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance.receiveMessageWithInvokingThread(Instance.java:485)
[junit-timeout]     at org.apache.cassandra.distributed.impl.AbstractCluster$Wrapper.receiveMessageWithInvokingThread(AbstractCluster.java:474)
[junit-timeout]     at org.apache.cassandra.simulator.systems.SimulatedAction.lambda$applyToMessage$3(SimulatedAction.java:352)
[junit-timeout]     at org.apache.cassandra.simulator.systems.SimulatedAction$$Lambda$2953/0x0000000101057840.run(Unknown Source)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptedExecution$InterceptedRunnableExecution.run(InterceptedExecution.java:118)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingExecutor$InterceptingPooledExecutor$WaitingThread.lambda$new$1(InterceptingExecutor.java:317)
[junit-timeout] Thread[MutationStage:1,5,node2]
[junit-timeout] java.lang.OutOfMemoryError: Requested array size exceeds VM limit
[junit-timeout]     at org.apache.cassandra.simulator.SimulatorUtils.failWithOOM(SimulatorUtils.java:36)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingGlobalMethods.ifIntercepted(InterceptingGlobalMethods.java:105)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingMonitors.wait(InterceptingMonitors.java:552)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptorOfSystemMethods$Global.wait(InterceptorOfSystemMethods.java:104)
[junit-timeout]     at org.apache.cassandra.utils.concurrent.SyncFuture.await$unsync(SyncFuture.java:151)
[junit-timeout]     at org.apache.cassandra.utils.concurrent.SyncFuture.await(SyncFuture.java)
[junit-timeout]     at org.apache.cassandra.utils.concurrent.AbstractFuture.get(AbstractFuture.java:245)
[junit-timeout]     at org.apache.cassandra.distributed.impl.IsolatedExecutor.waitOn(IsolatedExecutor.java:276)
[junit-timeout]     at org.apache.cassandra.distributed.impl.IsolatedExecutor.lambda$sync$12(IsolatedExecutor.java:157)
[junit-timeout]     at org.apache.cassandra.distributed.impl.IsolatedExecutor$$Lambda$8884/0x00000001024e3c40.accept(Unknown Source)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance.receiveMessage(Instance.java:477)
[junit-timeout]     at org.apache.cassandra.distributed.impl.AbstractCluster$Wrapper.receiveMessage(AbstractCluster.java:466)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptibleThread.interceptMessage(InterceptibleThread.java:313)
[junit-timeout]     at org.apache.cassandra.simulator.systems.SimulatedMessageDelivery.accept(SimulatedMessageDelivery.java:40)
[junit-timeout]     at org.apache.cassandra.distributed.impl.AbstractCluster.deliverMessage(AbstractCluster.java:784)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance.lambda$registerMockMessaging$3(Instance.java:343)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance$$Lambda$2674/0x0000000101001840.test(Unknown Source)
[junit-timeout]     at org.apache.cassandra.net.OutboundSink$Filtered.accept(OutboundSink.java:54)
[junit-timeout]     at org.apache.cassandra.net.OutboundSink$Filtered.accept(OutboundSink.java:55)
[junit-timeout]     at org.apache.cassandra.net.OutboundSink.accept(OutboundSink.java:70)
[junit-timeout]     at org.apache.cassandra.net.MessagingService.send(MessagingService.java:427)
[junit-timeout]     at org.apache.cassandra.net.MessagingService.send(MessagingService.java:397)
[junit-timeout]     at org.apache.cassandra.net.InboundSink.fail(InboundSink.java:89)
[junit-timeout]     at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:101)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance.lambda$receiveMessageRunnable$43231af8$1(Instance.java:515)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance$$Lambda$3940/0x00000001013ff840.accept(Unknown Source)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance.receiveMessageWithInvokingThread(Instance.java:485)
[junit-timeout]     at org.apache.cassandra.distributed.impl.AbstractCluster$Wrapper.receiveMessageWithInvokingThread(AbstractCluster.java:474)
[junit-timeout]     at org.apache.cassandra.simulator.systems.SimulatedAction.lambda$applyToMessage$3(SimulatedAction.java:352)
[junit-timeout]     at org.apache.cassandra.simulator.systems.SimulatedAction$$Lambda$2953/0x0000000101057840.run(Unknown Source)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptedExecution$InterceptedRunnableExecution.run(InterceptedExecution.java:118)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingExecutor$InterceptingPooledExecutor$WaitingThread.lambda$new$1(InterceptingExecutor.java:317)
[junit-timeout] Thread[isolatedExecutor:1,5,node3]
[junit-timeout] Thread[isolatedExecutor:2,5,node3]
[junit-timeout] java.lang.AssertionError
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingMonitors.preMonitorEnter(InterceptingMonitors.java:690)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptorOfSystemMethods$Global.preMonitorEnter(InterceptorOfSystemMethods.java:115)
[junit-timeout]     at org.apache.cassandra.utils.concurrent.SyncFuture.trySet(SyncFuture.java)
[junit-timeout]     at org.apache.cassandra.utils.concurrent.AbstractFuture.tryFailure(AbstractFuture.java:148)
[junit-timeout]     at org.apache.cassandra.concurrent.SyncFutureTask.run(SyncFutureTask.java:73)
[junit-timeout]     at org.apache.cassandra.simulator.systems.SimulatedExecution$NoIntercept$1Run.run(SimulatedExecution.java:82)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingExecutor$InterceptingPooledExecutor$WaitingThread.lambda$new$1(InterceptingExecutor.java:317)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]     at java.base/java.lang.Thread.run(Thread.java:829)
[junit-timeout] java.lang.AssertionError
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingMonitors.preMonitorEnter(InterceptingMonitors.java:690)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptorOfSystemMethods$Global.preMonitorEnter(InterceptorOfSystemMethods.java:115)
[junit-timeout]     at org.apache.cassandra.utils.concurrent.SyncFuture.trySet(SyncFuture.java)
[junit-timeout]     at org.apache.cassandra.utils.concurrent.AbstractFuture.tryFailure(AbstractFuture.java:148)
[junit-timeout]     at org.apache.cassandra.concurrent.SyncFutureTask.run(SyncFutureTask.java:73)
[junit-timeout]     at org.apache.cassandra.simulator.systems.SimulatedExecution$NoIntercept$1Run.run(SimulatedExecution.java:82)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingExecutor$InterceptingPooledExecutor$WaitingThread.lambda$new$1(InterceptingExecutor.java:317)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]     at java.base/java.lang.Thread.run(Thread.java:829)
[junit-timeout] Thread[MutationStage:3,5,node2]
[junit-timeout] Thread[isolatedExecutor:3,5,node5]
[junit-timeout] java.lang.OutOfMemoryError: Requested array size exceeds VM limit
[junit-timeout] java.lang.AssertionError
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingMonitors.preMonitorEnter(InterceptingMonitors.java:690)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptorOfSystemMethods$Global.preMonitorEnter(InterceptorOfSystemMethods.java:115)
[junit-timeout]     at org.apache.cassandra.utils.concurrent.SyncFuture.trySet(SyncFuture.java)
[junit-timeout]     at org.apache.cassandra.utils.concurrent.AbstractFuture.tryFailure(AbstractFuture.java:148)
[junit-timeout]     at org.apache.cassandra.concurrent.SyncFutureTask.run(SyncFutureTask.java:73)
[junit-timeout]     at org.apache.cassandra.simulator.systems.SimulatedExecution$NoIntercept$1Run.run(SimulatedExecution.java:82)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingExecutor$InterceptingPooledExecutor$WaitingThread.lambda$new$1(InterceptingExecutor.java:317)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]     at java.base/java.lang.Thread.run(Thread.java:829)
[junit-timeout] Thread[Stream-Deserializer-/127.0.0.1:7012-1:1,5,node2]
[junit-timeout] java.lang.ArrayStoreException: org.apache.cassandra.io.util.DataOutputStreamPlus$1
[junit-timeout]     at java.base/java.util.AbstractCollection.toArray(AbstractCollection.java:200)
[junit-timeout]     at java.base/java.util.Collections$SetFromMap.toArray(Collections.java:5569)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocal.removeAll(FastThreadLocal.java:65)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptibleThread.onTermination(InterceptibleThread.java:380)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptedExecution$InterceptedThreadStart.run(InterceptedExecution.java:228)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]     at java.base/java.lang.Thread.run(Thread.java:829)
[junit-timeout] Thread[MutationStage:1,5,node5]
[junit-timeout] org.apache.cassandra.utils.concurrent.UncheckedInterruptedException: java.lang.InterruptedException
[junit-timeout]     at org.apache.cassandra.utils.Throwables.unchecked(Throwables.java:307)
[junit-timeout]     at org.apache.cassandra.utils.Throwables.throwAsUncheckedException(Throwables.java:318)
[junit-timeout]     at org.apache.cassandra.distributed.impl.IsolatedExecutor.waitOn(IsolatedExecutor.java:281)
[junit-timeout]     at org.apache.cassandra.distributed.impl.IsolatedExecutor.lambda$sync$12(IsolatedExecutor.java:157)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance.receiveMessage(Instance.java:477)
[junit-timeout]     at org.apache.cassandra.distributed.impl.AbstractCluster$Wrapper.receiveMessage(AbstractCluster.java:466)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptibleThread.interceptMessage(InterceptibleThread.java:313)
[junit-timeout]     at org.apache.cassandra.simulator.systems.SimulatedMessageDelivery.accept(SimulatedMessageDelivery.java:40)
[junit-timeout]     at org.apache.cassandra.distributed.impl.AbstractCluster.deliverMessage(AbstractCluster.java:784)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance.lambda$registerMockMessaging$3(Instance.java:343)
[junit-timeout]     at org.apache.cassandra.net.OutboundSink$Filtered.accept(OutboundSink.java:54)
[junit-timeout]     at org.apache.cassandra.net.OutboundSink$Filtered.accept(OutboundSink.java:55)
[junit-timeout]     at org.apache.cassandra.net.OutboundSink.accept(OutboundSink.java:70)
[junit-timeout]     at org.apache.cassandra.net.MessagingService.send(MessagingService.java:427)
[junit-timeout]     at org.apache.cassandra.net.MessagingService.send(MessagingService.java:397)
[junit-timeout]     at org.apache.cassandra.net.InboundSink.fail(InboundSink.java:89)
[junit-timeout]     at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:101)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance.lambda$receiveMessageRunnable$43231af8$1(Instance.java:515)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance.receiveMessageWithInvokingThread(Instance.java:485)
[junit-timeout]     at org.apache.cassandra.distributed.impl.AbstractCluster$Wrapper.receiveMessageWithInvokingThread(AbstractCluster.java:474)
[junit-timeout]     at org.apache.cassandra.simulator.systems.SimulatedAction.lambda$applyToMessage$3(SimulatedAction.java:352)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptedExecution$InterceptedRunnableExecution.run(InterceptedExecution.java:118)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingExecutor$InterceptingPooledExecutor$WaitingThread.lambda$new$1(InterceptingExecutor.java:317)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]     at java.base/java.lang.Thread.run(Thread.java:829)
[junit-timeout] Caused by: java.lang.InterruptedException
[junit-timeout]     at java.base/java.lang.Object.wait(Native Method)
[junit-timeout]     at java.base/java.lang.Object.wait(Object.java:328)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingMonitors.wait(InterceptingMonitors.java:553)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptorOfGlobalMethods$IfInterceptibleThread.wait(InterceptorOfGlobalMethods.java:155)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptorOfSystemMethods$Global.wait(InterceptorOfSystemMethods.java:104)
[junit-timeout]     at org.apache.cassandra.utils.concurrent.SyncFuture.await$unsync(SyncFuture.java:151)
[junit-timeout]     at org.apache.cassandra.utils.concurrent.SyncFuture.await(SyncFuture.java)
[junit-timeout]     at org.apache.cassandra.utils.concurrent.AbstractFuture.get(AbstractFuture.java:245)
[junit-timeout]     at org.apache.cassandra.distributed.impl.IsolatedExecutor.waitOn(IsolatedExecutor.java:276)
[junit-timeout]     ... 22 more
[junit-timeout] Thread[RequestResponseStage:3,5,node6]
[junit-timeout] Thread[RequestResponseStage:2,5,node6]
[junit-timeout] org.apache.cassandra.utils.concurrent.UncheckedInterruptedException: java.lang.InterruptedException
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingMonitors.preMonitorEnter(InterceptingMonitors.java:720)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptorOfSystemMethods$Global.preMonitorEnter(InterceptorOfSystemMethods.java:115)
[junit-timeout]     at org.apache.cassandra.service.paxos.PaxosPrepare.onResponse(PaxosPrepare.java)
[junit-timeout]     at org.apache.cassandra.service.paxos.PaxosPrepare.onResponse(PaxosPrepare.java:104)
[junit-timeout]     at org.apache.cassandra.service.paxos.PaxosRequestCallback.onResponse(PaxosRequestCallback.java:47)
[junit-timeout]     at org.apache.cassandra.net.ResponseVerbHandler.doVerb(ResponseVerbHandler.java:58)
[junit-timeout]     at org.apache.cassandra.net.InboundSink.lambda$new$0(InboundSink.java:78)
[junit-timeout]     at org.apache.cassandra.net.InboundSink$Filtered.accept(InboundSink.java:64)
[junit-timeout]     at org.apache.cassandra.net.InboundSink$Filtered.accept(InboundSink.java:50)
[junit-timeout]     at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:97)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance.lambda$receiveMessageRunnable$43231af8$1(Instance.java:515)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance.receiveMessageWithInvokingThread(Instance.java:485)
[junit-timeout]     at org.apache.cassandra.distributed.impl.AbstractCluster$Wrapper.receiveMessageWithInvokingThread(AbstractCluster.java:474)
[junit-timeout]     at org.apache.cassandra.simulator.systems.SimulatedAction.lambda$applyToMessage$3(SimulatedAction.java:352)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptedExecution$InterceptedRunnableExecution.run(InterceptedExecution.java:118)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingExecutor$InterceptingPooledExecutor$WaitingThread.lambda$new$1(InterceptingExecutor.java:317)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]     at java.base/java.lang.Thread.run(Thread.java:829)
[junit-timeout] Caused by: java.lang.InterruptedException
[junit-timeout]     at java.base/java.lang.Object.wait(Native Method)
[junit-timeout]     at java.base/java.lang.Object.wait(Object.java:328)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingMonitors$InterceptedMonitorWait.await(InterceptingMonitors.java:424)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingMonitors.preMonitorEnter(InterceptingMonitors.java:708)
[junit-timeout]     ... 17 more
[junit-timeout] org.apache.cassandra.utils.concurrent.UncheckedInterruptedException: java.lang.InterruptedException
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingMonitors.preMonitorEnter(InterceptingMonitors.java:720)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptorOfSystemMethods$Global.preMonitorEnter(InterceptorOfSystemMethods.java:115)
[junit-timeout]     at org.apache.cassandra.service.paxos.PaxosPrepare.onResponse(PaxosPrepare.java)
[junit-timeout]     at org.apache.cassandra.service.paxos.PaxosPrepare.onResponse(PaxosPrepare.java:104)
[junit-timeout]     at org.apache.cassandra.service.paxos.PaxosRequestCallback.onResponse(PaxosRequestCallback.java:47)
[junit-timeout]     at org.apache.cassandra.net.ResponseVerbHandler.doVerb(ResponseVerbHandler.java:58)
[junit-timeout]     at org.apache.cassandra.net.InboundSink.lambda$new$0(InboundSink.java:78)
[junit-timeout]     at org.apache.cassandra.net.InboundSink$Filtered.accept(InboundSink.java:64)
[junit-timeout]     at org.apache.cassandra.net.InboundSink$Filtered.accept(InboundSink.java:50)
[junit-timeout]     at org.apache.cassandra.net.InboundSink.accept(InboundSink.java:97)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance.lambda$receiveMessageRunnable$43231af8$1(Instance.java:515)
[junit-timeout]     at org.apache.cassandra.distributed.impl.Instance.receiveMessageWithInvokingThread(Instance.java:485)
[junit-timeout]     at org.apache.cassandra.distributed.impl.AbstractCluster$Wrapper.receiveMessageWithInvokingThread(AbstractCluster.java:474)
[junit-timeout]     at org.apache.cassandra.simulator.systems.SimulatedAction.lambda$applyToMessage$3(SimulatedAction.java:352)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptedExecution$InterceptedRunnableExecution.run(InterceptedExecution.java:118)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingExecutor$InterceptingPooledExecutor$WaitingThread.lambda$new$1(InterceptingExecutor.java:317)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]     at java.base/java.lang.Thread.run(Thread.java:829)
[junit-timeout] Caused by: java.lang.InterruptedException
[junit-timeout]     at java.base/java.lang.Object.wait(Native Method)
[junit-timeout]     at java.base/java.lang.Object.wait(Object.java:328)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingMonitors$InterceptedMonitorWait.await(InterceptingMonitors.java:424)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingMonitors.preMonitorEnter(InterceptingMonitors.java:708)
[junit-timeout]     ... 17 more
[junit-timeout] Thread[isolatedExecutor:3,5,node3]
[junit-timeout] java.lang.ArrayStoreException: org.apache.cassandra.concurrent.ExecutorLocals$1
[junit-timeout]     at java.base/java.util.AbstractCollection.toArray(AbstractCollection.java:200)
[junit-timeout]     at java.base/java.util.Collections$SetFromMap.toArray(Collections.java:5569)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocal.removeAll(FastThreadLocal.java:65)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptibleThread.onTermination(InterceptibleThread.java:380)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingExecutor$InterceptingPooledExecutor$WaitingThread.lambda$new$0(InterceptingExecutor.java:362)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptibleThread.runDeterministic(InterceptibleThread.java:458)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingExecutor$InterceptingPooledExecutor$WaitingThread.lambda$new$1(InterceptingExecutor.java:357)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]     at java.base/java.lang.Thread.run(Thread.java:829)
[junit-timeout] ------------- ---------------- ---------------
[junit-timeout] Testcase: simulationTest(org.apache.cassandra.simulator.test.ShortPaxosSimulationTest)-.jdk11:    Caused an ERROR
[junit-timeout] Failed on seed 0xd145bf70a144f262
[junit-timeout] org.apache.cassandra.simulator.SimulationException: Failed on seed 0xd145bf70a144f262
[junit-timeout] Caused by: java.lang.ArrayStoreException: org.apache.cassandra.io.util.DataOutputStreamPlus$1
[junit-timeout]     at java.base/java.util.AbstractCollection.toArray(AbstractCollection.java:200)
[junit-timeout]     at java.base/java.util.Collections$SetFromMap.toArray(Collections.java:5569)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocal.removeAll(FastThreadLocal.java:65)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptibleThread.onTermination(InterceptibleThread.java:380)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingExecutor$InterceptingPooledExecutor$WaitingThread.lambda$new$0(InterceptingExecutor.java:362)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptibleThread.runDeterministic(InterceptibleThread.java:458)
[junit-timeout]     at org.apache.cassandra.simulator.systems.InterceptingExecutor$InterceptingPooledExecutor$WaitingThread.lambda$new$1(InterceptingExecutor.java:357)
[junit-timeout]     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
[junit-timeout]     at java.base/java.lang.Thread.run(Thread.java:829)
[junit-timeout] 
[junit-timeout] 
[junit-timeout] Testcase: selfReconcileTest(org.apache.cassandra.simulator.test.ShortPaxosSimulationTest)-.jdk11:SKIPPED: fails due to OOM DirectMemory - unclear why
[junit-timeout] Test org.apache.cassandra.simulator.test.ShortPaxosSimulationTest FAILED
 {noformat}

for seed {{0xd145bf70a144f262}}, while it does not fail on `trunk` for that seed. I think we need to explain the problem here.

I'm going to investigate changes in {{FastThreadLocal}} as we extend this class in many places

{quote}I'd not complicate the build unnecessarily...
{quote}
I put some thought, I agree with you.
{quote}I'm going to investigate changes in FastThreadLocal as we extend this class in many places
{quote}
Good call; it won't be the first library where we extend something, and things have changed under the hood. Thank you!

I debugged the problem and found that while {{FastThreadLocal.removeAll}} is called, {{FastThreadLocal}} disappears from the class loader (?)

In the of the that particular seed, I've added {{io.netty.util.concurrent}} package to the set of shared packages for in-jvm dtests so that the class will be managed by the main class loader rather than isolated class loader - that was my reasoning at least. That fixed the test for that particular seed on my local machine. I'll run some tests on CI to verify.

UPDATE: This obviously wasn't a core reason. Although the repeated 500x runs of this test passed, the change broke other JVM dtests massively


UPDATE: After rebasing (SAI), the tests hangs instead of failing! All in all, I suspect this has something to do with {{FastThreadLocal}} being loaded by a different class loader than we expect at some comparison point. I suppose that it can be something in either simulation or distributed tests framework, don't really know yet as my knowledge about that stuff is very limited. 

The last commit fixed the issue: https://github.com/apache/cassandra/pull/2493/commits/a2e0de4262f686ebf39e4b02b6078e5fd0d39372

It seems like it was not the first one - I've noticed that simulator tests cluster implementation has already defined some other shared classes from Netty. I've just added {{FastThreadLocal}} there so the fix works only for simulation dtests while jvm dtests remains untouched.


https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/821/workflows/ddb18ca9-5551-4a2e-94a7-83c15246b612 seems like it basically works. Feel free to review


It's easier if you use the generate.sh and run the pre-commit. Junit repeats and OA are missing i.e. The upgrade failures are CASSANDRA-18676 #justfyi. My only concern is what [~e.dimitrova] raised on hitting the ML on the new dependency which I hope is going to go smooth. The rest LGTM.

Thanks for reviewing,

bq. It's easier if you use the generate.sh 

Why do you think I didn't do that?


^Oh maybe you did but then used the separate tests instead of the pre-commit? I see you triggered oa but repeat junit are still missing iiuc? Using pre-commit spares you all this eye watering find the gaps exercise. Circle UI is not the best in this regard imo...

Started JDK17 tests which also include repeated tests here:

[https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2446/workflows/eed9ab32-c87a-4adb-a435-5cbbd75210d7]

JDK17 CI run is all green!

I left some comments on this PR:

[https://github.com/apache/cassandra/pull/2493]

Also, here, for completeness:
 * Any particular reason why 4.1.94? There were two new versions in July.
 * I suggest any unrelated fixes - like the guava one, etc - to be added in a separate commit and a description to the ticket.
 * Email for the addition of bounty castle has to be sent to the ML
 * I am not a fan of suppressing the warnings for the deprecation of the security manager. We need at least to open a ticket for visibility and awareness, as that one will be its own work
 * Good catch on the change of Netty defaults. Would you like us to have a follow-up ticket for testing and evaluating other defaults? (for the future, maybe not even necessarily for this release)

Do you happen to have this file still available anywhere:

[https://github.com/jacek-lewandowski/cassandra/blob/CASSANDRA-17992/netty-release-notes-filtered.md]

It seems it got lost down the road and I didn't manage to read through it. 

[~e.dimitrova] I've removed those files from the PR and attached to this ticket

Answering your questions:

bq. Any particular reason why 4.1.94? There were two new versions in July.
Because when I started working on this ticket 4.1.94 was the newest visible version in Sonatype

bq. I suggest any unrelated fixes - like the guava one, etc - to be added in a separate commit and a description to the ticket
OK

bq. I am not a fan of suppressing the warnings for the deprecation of the security manager. We need at least to open a ticket for visibility and awareness, as that one will be its own work
OK, it is a compilation warning. When you run with JDK17 you get a plenty of runtime warnings which cannot be suppressed. JDK didn't come up yet with any other solution for intercepting {{System.exit}}. I'll open a ticket for fixing this somehow on our end (I suppose we will have to provide an agent for that) - https://issues.apache.org/jira/browse/CASSANDRA-18711

bq. Good catch on the change of Netty defaults. Would you like us to have a follow-up ticket for testing and evaluating other defaults? (for the future, maybe not even necessarily for this release)
Since we didn't explicitly set values for those defaults, testing and comparing the performance with the old and new defaults would be good. Netty updated them for a reason, and I'm not 100% sure if the right way of upgrading Netty is to keep the old defaults unless we encounter failures during testing. In other words - since we already know that the old defaults work, I'll create the ticket to move to the Netty defaults providing that the tests pass and the performance is not worse.


I've rebased the branch and removed that suppression and fixing compilation warnings. I've also updated Netty version to 4.1.96.


j17 https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/823/workflows/95a6dcf7-1e77-441f-bc72-c1605c6c66f6 (/)

[~e.dimitrova] I'll wait for your ok on PR before starting more expensive j11 tests

Oh wow. A green j17 :-)

Email to dev for the addition of BountyCastle sent - [https://lists.apache.org/thread/loc0bd5odogxwsj88pq1g2c6vz9mmf2j]

[~norman], any advice would be appreciated when you have a few minutes. While upgrading Netty, [~jlewandowski] noticed some defaults had been changed on the Netty side, in particular thread local caching and chunk size in heap allocator; therefore, after reading through the issues where those were changed, [~jlewandowski] added system properties to bring back the values we used before the upgrade ({{{}io.netty.allocator.useCacheForAllThreads=true{}}}, {{io.netty.allocator.maxOrder=11}} - [https://github.com/netty/netty/commit/b61d7d40f4], [https://github.com/netty/netty/commit/4797b88d89] . The current plan is to open a follow-up ticket to test performance with the old vs. the new defaults before changing the defaults. Does this make sense to you? Anything else we need to consider?

+1 to commit the current patch and open follow up ticket. Also, there are no objections to the addition of BountyCastle. Thank you

https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/823/workflows/d7f32313-b469-4a7e-be72-3e130e52ceab j11 (/) - I'm surprised, all green just like j17

All the hard work checking for flaky tests in advance is paying back :) 

[~jlewandowski] [~e.dimitrova]

I see that we are depending on netty-transport-native-epoll with linux_x86_64 classifier and we put this dependency directly into parent's pom etc.

However, there is also classifier with aarch64, check this (first few links).

https://repo1.maven.org/maven2/io/netty/netty-transport-native-epoll/4.1.96.Final/

This means that when we run this on ARM, since you put x86_64 dependency on the class path, it will not work (presumably) (or it will fallback to something / it will not be in effect?)

How it needs to be done is that you need to put both dependencies into profiles (1) and into lib/"platform" (2) when these dependencies are resolved  and then you need to dynamically add it on the class path based on what platform the code runs on (this is automatically done in https://github.com/apache/cassandra/blob/trunk/bin/cassandra.in.sh#L87-L92)

Basically same way how it was done in Corretto crypto provider.

In a nutshell, we are not multiplatform here, we wired it to x86_64 but there is no reason to not support aarch64 too.

(1) https://github.com/apache/cassandra/blob/trunk/.build/parent-pom-template.xml#L247-L283
(2) https://github.com/apache/cassandra/blob/trunk/.build/build-resolver.xml#L213-L228

I agree we probably should add that to the deps, but whether we should do something in {{cassandra.in.sh}} - IDK to be honest. I needed to add that dependency because {{netty-all}} is packaged differently since some version and it is not an uber-jar any longer. Therefore, I think all of those platform dependent things were previously included in {{netty-all}} and we didn't need to do anything fancy with the classpath. So, perhaps now we do not have to do that either?


There is nothing "fancy" about this. You clearly wired it to one platform only. How is this supposed to work on ARM? There is a clear path to support both architectures. 

cc [~mck] I think same what was done to Corretto should be done to these platform specific dependencies.

As I said, I agree we should add that to the dependencies.

What I'm not sure is that whether we should do something with the classpath dynamically. Netty 4.1.58 which we used before included that dependency for all possible platforms: https://search.maven.org/artifact/io.netty/netty-all/4.1.58.Final/jar, so probably it can be enough to just add those dependencies to the pom.


I fail to see why we would add all possible architectures on the classpath. That is messy. What dependency will be used when there are two on the classpath?

Why not to just choose the correct one? There is a reason there are two of them so we can pick.
\

[~jlewandowski]

As I look into in more closely, the dependencies added to the project are quite wild ... 

We are putting this into the distribution tarball as well.

What do we need a codec for "smtp" for? This should be pretty overhauled and thrown away, I do not think we need "redis" or "mqtt" either. Probably no codecs at all.

{code}
netty-all-4.1.96.Final.jar
netty-buffer-4.1.96.Final.jar
netty-codec-4.1.96.Final.jar
netty-codec-dns-4.1.96.Final.jar
netty-codec-haproxy-4.1.96.Final.jar
netty-codec-http2-4.1.96.Final.jar
netty-codec-http-4.1.96.Final.jar
netty-codec-memcache-4.1.96.Final.jar
netty-codec-mqtt-4.1.96.Final.jar
netty-codec-redis-4.1.96.Final.jar
netty-codec-smtp-4.1.96.Final.jar
netty-codec-socks-4.1.96.Final.jar
netty-codec-stomp-4.1.96.Final.jar
netty-codec-xml-4.1.96.Final.jar
netty-common-4.1.96.Final.jar
netty-handler-4.1.96.Final.jar
netty-handler-proxy-4.1.96.Final.jar
netty-handler-ssl-ocsp-4.1.96.Final.jar
netty-resolver-4.1.96.Final.jar
netty-resolver-dns-4.1.96.Final.jar
netty-resolver-dns-classes-macos-4.1.96.Final.jar
netty-tcnative-boringssl-static-2.0.61.Final.jar
netty-tcnative-boringssl-static-2.0.61.Final-linux-aarch_64.jar
netty-tcnative-boringssl-static-2.0.61.Final-linux-x86_64.jar
netty-tcnative-boringssl-static-2.0.61.Final-osx-aarch_64.jar
netty-tcnative-boringssl-static-2.0.61.Final-osx-x86_64.jar
netty-tcnative-boringssl-static-2.0.61.Final-windows-x86_64.jar
netty-tcnative-classes-2.0.61.Final.jar
netty-transport-4.1.96.Final.jar
netty-transport-classes-epoll-4.1.96.Final.jar
netty-transport-classes-kqueue-4.1.96.Final.jar
netty-transport-native-epoll-4.1.94.Final.jar
netty-transport-native-epoll-4.1.94.Final-linux-x86_64.jar
netty-transport-native-unix-common-4.1.96.Final.jar
netty-transport-rxtx-4.1.96.Final.jar
netty-transport-sctp-4.1.96.Final.jar
netty-transport-udt-4.1.96.Final.jar

{code}

[~smiklosovic] we can create a follow-up ticket to clean that up. There is no change compared to the previous situation where we also included netty-all with all that stuff in it - it was just hidden. The ticket was about upgrading Netty rather than filtering Netty components. 

Also, I'm against manipulating classpath according to foreseen usages. It complicates stuff and basically it is not needed. Those dependencies include a single native library file each and those files are named differently for exact architecture. Therefore, there is no threat that they would be confused. 


we dont need

netty-tcnative-boringssl-static-2.0.61.Final-windows-x86_64.jar

netty-codec-4.1.96.Final.jar
netty-codec-dns-4.1.96.Final.jar
netty-codec-haproxy-4.1.96.Final.jar
netty-codec-http2-4.1.96.Final.jar
netty-codec-http-4.1.96.Final.jar
netty-codec-memcache-4.1.96.Final.jar
netty-codec-mqtt-4.1.96.Final.jar
netty-codec-redis-4.1.96.Final.jar
netty-codec-smtp-4.1.96.Final.jar
netty-codec-socks-4.1.96.Final.jar
netty-codec-stomp-4.1.96.Final.jar
netty-codec-xml-4.1.96.Final.jar

I am not sure what this is for

netty-transport-rxtx-4.1.96.Final.jar
netty-transport-sctp-4.1.96.Final.jar
netty-transport-udt-4.1.96.Final.jar

"dns" stuff is suspicious too.


Please cover that netty-transport-native-epoll for aarch as well in another ticket, up to your preference. 

[~jlewandowski] one more thing ...

Since we are putting all platform dependencies to class path, I am not sure why we still get this message when doing any in-jvm-dtest (I see it in IDEA)

{code}
WARN  07:23:44 epoll not available
java.lang.UnsupportedOperationException: Native transport was explicit disabled with -Dio.netty.transport.noNative=true
	at io.netty.channel.epoll.Epoll.<clinit>(Epoll.java:34)
	at org.apache.cassandra.service.NativeTransportService.useEpoll(NativeTransportService.java:167)
	at org.apache.cassandra.net.SocketFactory$Provider.optimalProvider(SocketFactory.java:164)
	at org.apache.cassandra.net.SocketFactory.<init>(SocketFactory.java:185)
	at org.apache.cassandra.net.MessagingService.<init>(MessagingService.java:278)
	at org.apache.cassandra.net.MessagingService.<init>(MessagingService.java:305)
	at org.apache.cassandra.net.MessagingService$MSHandle.<clinit>(MessagingService.java:270)
	at org.apache.cassandra.net.MessagingService.instance(MessagingService.java:275)
	at org.apache.cassandra.schema.DefaultSchemaUpdateHandler.<init>(DefaultSchemaUpdateHandler.java:81)
	at org.apache.cassandra.schema.DefaultSchemaUpdateHandlerFactory.getSchemaUpdateHandler(DefaultSchemaUpdateHandlerFactory.java:33)
	at org.apache.cassandra.schema.Schema.<init>(Schema.java:127)
	at org.apache.cassandra.schema.Schema.<clinit>(Schema.java:89)
	at org.apache.cassandra.service.StartupChecks$13.execute(StartupChecks.java:660)
	at org.apache.cassandra.service.StartupChecks.verify(StartupChecks.java:175)
	at org.apache.cassandra.service.CassandraDaemon.runStartupChecks(CassandraDaemon.java:495)
	at org.apache.cassandra.distributed.impl.Instance.lambda$startup$12(Instance.java:620)
	at org.apache.cassandra.concurrent.FutureTask$1.call(FutureTask.java:96)
	at org.apache.cassandra.concurrent.FutureTask.call(FutureTask.java:61)
	at org.apache.cassandra.concurrent.FutureTask.run(FutureTask.java:71)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:829)
WARN  [node1_isolatedExecutor:1] node1 2023-08-07 09:23:44,479 NativeTransportService.java:168 - epoll not available
{code}

I tried to grep "-Dio.netty.transport.noNative=true" but we are not setting that. I think that if it is not set, it is by default set to "true" by netty itself.

However, I tried to set it to false in "IDEA Test run configuration" and that message has not disappeared ... Not sure what's the problem here. 

EDIT:

We are setting it here 

https://github.com/apache/cassandra-in-jvm-dtest-api/blob/trunk/src/main/java/org/apache/cassandra/distributed/api/ICluster.java#L95-L102

I overrode the default implementation and I run a dtest without it and it just passed. It would be worth it to disable it for a moment and run some tests if it improved the things over time with this upgrade.



Let's move the progress / discussion to CASSANDRA-18729

{quote}There is no change compared to the previous situation where we also included netty-all with all that stuff in it - it was just hidden. The ticket was about upgrading Netty rather than filtering Netty components.
{quote}
I have the same understanding.
{quote}Let's move the progress / discussion to CASSANDRA-18729
{quote}
Thanks!

