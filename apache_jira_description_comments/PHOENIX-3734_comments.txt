Hi [~giacomotaylor@gmail.com] and [~tdsilva],

I created a pull request #246 containing a version of Phoenix that uses Tephra using the new TAL.

Could you please review?

Once this code will be committed Phoenix will continue working with Tephra as before. However, connecting other transaction processing engines, as Omid, will be (relatively) easy. Next step would be creating a TAL implementation for Omid and implement the augment Omid according to the needed functionality.

Thx,
Ohad


Thanks for the patch, [~ohads]. [~tdsilva] committed PHOENIX-3671 to the omid feature branch (which was based off of master). Is this patch on top of that work? Does it work for you to keep this on the omid feature branch based off of master? We can take this pull as the basis for that branch. This will require more merging on your part to keep your feature branch in sync with master. If we want this to come into the mainline branches, we'll want to see if we can maintain b/w compatibility. Not mandatory because transactions are still a beta feature, but it's more of a nice to have. Did any over-the-wire serialization change with this pull? It seems not. Have you had a chance to run {{mvn verify}} to make sure there are no regressions?

One minor nit: how about we rename PhoenixTransactionContext.get_famility_delete_marker() to getFamilyDeleteMarker()?

Hi [~giacomotaylor@gmail.com] and [~tdsilva],

This patch is compared to the master and therefore, it contains the implementation of [PHOENIX-3656] and [PHOENIX-3671].
I merged all the commits that were done to the master since I forked.

In my opinion, it is better to commit this patch to the mainline branch and continue working on the master. 
This pull request maintains the same semantics that was before and therefore, maintains b/w compatibility. I only abstracted the transaction processing part and implemented what need for Tephra. Everything should work as before.
I run mvn verify and experienced a few failures that also occurred while running mvn verify on the master branch and therefore, are not related to the pull request changes.

I fixed the naming conversion to camelCase.

The following pull requests will be Omid related and can also be committed to the master branch since the Omid option will be disabled until completion.


+1, I committed this patch to the omid branch.

Hi [~giacomotaylor@gmail.com] and [~tdsilva],

We are currently at the point where the code was refactored and have an abstraction layer for the transaction processor. 
At this point, the Tephra layer was implemented and the code functionality is as before. 

In my opinion, this should be a checkpoint where we review this patch and commit it to the master. 
Keeping this code at the Omid branch and commit only when the Omid layer will be available will significantly increase the review overhead and reduce its fruitfulness.

I also think it is better to do the following Omid related commits to the master. These commits will be related only to Omid only and the Omid option in Phoenix will be disabled until completion of the feature.

What do you think?

I second [~ohads]. The private branch already has critical mass. Leaving the code there will only jeopardize stability and increase the maintenance cost. The work on implementing TAL for Omid plus Phoenix-specific features in Omid itself is pretty much scoped; it will not affect the code committed thus far. 

Thanks [~jamestaylor] and [~tdsilva]. 

Ok, we'll get this committed to master. It'd be easiest if we could check in to our 4.x branches as well. If the patch won't apply there directly, would you mind giving us patches that will?

Sure, I'll be happy to.

Thanks [~jamestaylor], that helps a lot!

Also, if you could get a Jenkins run on your patch, that be most appreciated (attach a patch file here and click on the Submit Patch button).

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12867974/PHOENIX-3734.v1.patch
  against master branch at commit 442d8eb29f1f73fd104a323d9aa77f3a4ccfd8d1.
  ATTACHMENT ID: 12867974

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified tests.

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-PHOENIX-Build/863//console

This message is automatically generated.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12867978/PHOENIX-3734.v2.patch
  against master branch at commit 442d8eb29f1f73fd104a323d9aa77f3a4ccfd8d1.
  ATTACHMENT ID: 12867978

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:red}-1 javadoc{color}.  The javadoc tool appears to have generated 49 warning messages.

    {color:red}-1 release audit{color}.  The applied patch generated 7 release audit warnings (more than the master's current 0 warnings).

    {color:red}-1 lineLengths{color}.  The patch introduces the following lines longer than 100:
    +        //TransactionAwareHTable txAware = new TransactionAwareHTable(htable, TxConstants.ConflictDetection.ROW);
+        PhoenixTransactionContext txContext = TransactionFactory.getTransactionFactory().getTransactionContext(pconn);
+        PhoenixTransactionalTable txTable = TransactionFactory.getTransactionFactory().getTransactionalTable(txContext, htable);
+        txTable = TransactionFactory.getTransactionFactory().getTransactionalTable(txContext, htable);
+        assertEquals(Boolean.TRUE.toString(), admin.getTableDescriptor(TableName.valueOf(t2)).getValue(PhoenixTransactionContext.READ_NON_TX_DATA));
+            assertEquals(1000, Integer.parseInt(colDesc.getValue(PhoenixTransactionContext.PROPERTY_TTL)));
+            assertEquals(1000, Integer.parseInt(colDesc.getValue(PhoenixTransactionContext.PROPERTY_TTL)));
+            assertEquals(1000, Integer.parseInt(colDesc.getValue(PhoenixTransactionContext.PROPERTY_TTL)));
+            assertEquals(1000, Integer.parseInt(colDesc.getValue(PhoenixTransactionContext.PROPERTY_TTL)));
+            assertEquals(1000, Integer.parseInt(colDesc.getValue(PhoenixTransactionContext.PROPERTY_TTL)));

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
     ./phoenix-core/target/failsafe-reports/TEST-org.apache.phoenix.iterate.ScannerLeaseRenewalIT
./phoenix-core/target/failsafe-reports/TEST-org.apache.phoenix.end2end.index.MutableIndexFailureIT

Test results: https://builds.apache.org/job/PreCommit-PHOENIX-Build/864//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-PHOENIX-Build/864//artifact/patchprocess/patchReleaseAuditWarnings.txt
Javadoc warnings: https://builds.apache.org/job/PreCommit-PHOENIX-Build/864//artifact/patchprocess/patchJavadocWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-PHOENIX-Build/864//console

This message is automatically generated.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12867987/PHOENIX-3734.v3.patch
  against master branch at commit 442d8eb29f1f73fd104a323d9aa77f3a4ccfd8d1.
  ATTACHMENT ID: 12867987

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:red}-1 javadoc{color}.  The javadoc tool appears to have generated 47 warning messages.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 lineLengths{color}.  The patch introduces the following lines longer than 100:
    +	            optionBuilder.append(",IMMUTABLE_STORAGE_SCHEME="+PTableImpl.ImmutableStorageScheme.ONE_CELL_PER_COLUMN);
+                { false, false, false }, { false, false, true }, { false, true, false }, { false, true, true },
+                { true, false, false }, { true, false, true }, { true, true, false }, { true, true, true }
+        conn.createStatement().execute("CREATE TABLE " + fullTableName + "(pk INTEGER PRIMARY KEY, val INTEGER)"+tableDDLOptions);
+            stmt.execute("CREATE TABLE " + fullTableName + "(k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)"+tableDDLOptions);
+			stmt.execute("CREATE TABLE " + fullTableName + "(ID BIGINT NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)"
+			stmt.execute("CREATE TABLE " + fullTableName + "1(ID1 BIGINT NOT NULL PRIMARY KEY, FK1A INTEGER, FK1B INTEGER)"
+            assertEquals(PhoenixVisibilityLevel.SNAPSHOT_EXCLUDE_CURRENT, state.getVisibilityLevel());
+                dataRegion, indexMaintainer, viewConstants, null, null, projector, ptr, useQualiferAsListIndex);
+                            delete.setAttribute(PhoenixTransactionContext.TX_ROLLBACK_ATTRIBUTE_KEY, new byte[0]);

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
     ./phoenix-core/target/failsafe-reports/TEST-org.apache.phoenix.end2end.QueryIT
./phoenix-core/target/failsafe-reports/TEST-org.apache.phoenix.end2end.QueryDatabaseMetaDataIT
./phoenix-core/target/failsafe-reports/TEST-org.apache.phoenix.iterate.ScannerLeaseRenewalIT

Test results: https://builds.apache.org/job/PreCommit-PHOENIX-Build/865//testReport/
Javadoc warnings: https://builds.apache.org/job/PreCommit-PHOENIX-Build/865//artifact/patchprocess/patchJavadocWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-PHOENIX-Build/865//console

This message is automatically generated.

Hi [~giacomotaylor@gmail.com] and [~tdsilva]

The failed test pass when I run these in standalone mode, in addition, in each regression run different tests fail.
I also run "mvn verify" on the master branch and got error messages. 
Could you please advice?

In addition, I tried to run testing on branch 4.x-HBase-0.98 and the testing got stuck at the middle.

Thx,
Ohad

Sorry for the trouble, [~ohads]. Our unit tests seem to have become flakier lately. Are you running on a Mac or a Linux box? The Mac has always seemed flakier. Two contributing factors are the ASF infrastructure for the build bots seem overloaded and/or flaky and surefire doesn't give us any information when a test suite hangs or maybe crashes. You could try decreasing the parallelization to see if that helps: {{mvn verify -DnumForkedIT=1 -DnumForkedUT=1}}. You can also try bumping up the memory and perm size: {{-Xmx3000m -XX:MaxPermSize=256m}}.

If you can do a local test run with the similar results before and after you patch on each of the 4.x lines, I think it'd be ok to commit your patch.


Thanks [~giacomotaylor@gmail.com].
I am currently using Mac. I will try to use a Linux box and the other options your provided to see if it helps.


Hi [~giacomotaylor@gmail.com] and [~tdsilva], I tried to use a Linux box and also restricted the parallelization and increased the heap size. However, when running mvn verify on 4.x-HBase-0.98 (didn't try the other branches) it always got stuck under "Running org.apache.phoenix.hbase.index.write.TestIndexWriter".
Could you please try to see whether you manage to pass the regression test for this branch?

Thx,
Ohad

Hi, [~ohads]. Make sure to use JRE7 when running phoenix tests. We know of test hangs with JRE8.

Looks like 0.98 Jenkins builds are passing again, [~ohads], as I made a few changes that seems to have helped. Like Samarth mentioned, use JDK 1.7 and run it on a Linux box. The current defaults are all fine - no need to decrease parallelization.


Thanks [~giacomotaylor] and [~samarthjain].
I downgraded my jdk to 1.7 and now the regression terminates. I'll pull and rerun. Thanks!

The regression still doesn't pass, at least on my machine, using jdk 1.7 and terminates with the following error message:
Failed to execute goal org.apache.maven.plugins:maven-failsafe-plugin:2.19.1:verify (ParallelStatsEnabledTest) on project phoenix-core: There was a timeout or other error in the fork -> [Help 1]

However, the regression results look the same before and after applying my patch.

Please find attached [^PHOENIX-3734.v4.patch] for the master branch.
[^PHOENIX-3734.4.x-HBase-0.98.patch] for 4.x-HBase-0.98, 
[^PHOENIX-3734.4.x-HBase-1.1.patch] for 4.x-HBase-1.1 and 
[^PHOENIX-3734.4.x-HBase-1.2.patch] for 4.x-HBase-1.2.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12869422/PHOENIX-3734.4.x-HBase-1.2.patch
  against master branch at commit e27fae93191d9540574765065900a23bda90905f.
  ATTACHMENT ID: 12869422

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified tests.

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-PHOENIX-Build/888//console

This message is automatically generated.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12869587/PHOENIX-3734.v4.patch
  against master branch at commit a2f4d7eebec621b58204a9eb78d552f18dcbcf24.
  ATTACHMENT ID: 12869587

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:red}-1 javadoc{color}.  The javadoc tool appears to have generated 47 warning messages.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 lineLengths{color}.  The patch introduces the following lines longer than 100:
    +	            optionBuilder.append(",IMMUTABLE_STORAGE_SCHEME="+PTableImpl.ImmutableStorageScheme.ONE_CELL_PER_COLUMN);
+                { false, false, false }, { false, false, true }, { false, true, false }, { false, true, true },
+                { true, false, false }, { true, false, true }, { true, true, false }, { true, true, true }
+        conn.createStatement().execute("CREATE TABLE " + fullTableName + "(pk INTEGER PRIMARY KEY, val INTEGER)"+tableDDLOptions);
+            stmt.execute("CREATE TABLE " + fullTableName + "(k VARCHAR PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)"+tableDDLOptions);
+			stmt.execute("CREATE TABLE " + fullTableName + "(ID BIGINT NOT NULL PRIMARY KEY, v1 VARCHAR, v2 VARCHAR)"
+			stmt.execute("CREATE TABLE " + fullTableName + "1(ID1 BIGINT NOT NULL PRIMARY KEY, FK1A INTEGER, FK1B INTEGER)"
+            assertEquals(PhoenixVisibilityLevel.SNAPSHOT_EXCLUDE_CURRENT, state.getVisibilityLevel());
+                dataRegion, indexMaintainer, viewConstants, null, null, projector, ptr, useQualiferAsListIndex);
+                            delete.setAttribute(PhoenixTransactionContext.TX_ROLLBACK_ATTRIBUTE_KEY, new byte[0]);

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-PHOENIX-Build/897//testReport/
Javadoc warnings: https://builds.apache.org/job/PreCommit-PHOENIX-Build/897//artifact/patchprocess/patchJavadocWarnings.txt
Console output: https://builds.apache.org/job/PreCommit-PHOENIX-Build/897//console

This message is automatically generated.

I squashed the commits and generated new patches.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12869603/PHOENIX-3734.4.x-HBase-1.2.patch
  against master branch at commit a2f4d7eebec621b58204a9eb78d552f18dcbcf24.
  ATTACHMENT ID: 12869603

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified tests.

    {color:red}-1 javac{color}.  The patch appears to cause mvn compile goal to fail .

    Compilation errors resume:
    [ERROR] COMPILATION ERROR : 
[ERROR] /home/jenkins/jenkins-slave/workspace/PreCommit-PHOENIX-Build/phoenix-core/src/main/java/org/apache/phoenix/transaction/OmidTransactionTable.java:[49,8] org.apache.phoenix.transaction.OmidTransactionTable is not abstract and does not override abstract method getRpcTimeout() in org.apache.hadoop.hbase.client.Table
[ERROR] /home/jenkins/jenkins-slave/workspace/PreCommit-PHOENIX-Build/phoenix-core/src/main/java/org/apache/phoenix/transaction/TephraTransactionTable.java:[53,8] org.apache.phoenix.transaction.TephraTransactionTable is not abstract and does not override abstract method getRpcTimeout() in org.apache.hadoop.hbase.client.Table
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.0:compile (default-compile) on project phoenix-core: Compilation failure: Compilation failure:
[ERROR] /home/jenkins/jenkins-slave/workspace/PreCommit-PHOENIX-Build/phoenix-core/src/main/java/org/apache/phoenix/transaction/OmidTransactionTable.java:[49,8] org.apache.phoenix.transaction.OmidTransactionTable is not abstract and does not override abstract method getRpcTimeout() in org.apache.hadoop.hbase.client.Table
[ERROR] /home/jenkins/jenkins-slave/workspace/PreCommit-PHOENIX-Build/phoenix-core/src/main/java/org/apache/phoenix/transaction/TephraTransactionTable.java:[53,8] org.apache.phoenix.transaction.TephraTransactionTable is not abstract and does not override abstract method getRpcTimeout() in org.apache.hadoop.hbase.client.Table
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <goals> -rf :phoenix-core
    

Console output: https://builds.apache.org/job/PreCommit-PHOENIX-Build/898//console

This message is automatically generated.


I think that the compilation errors caused by Jenkins applying the PHOENIX-3734.4.x-HBase-1.2.patch on the master branch.

I ran the tests with the latest patch on the 0.98 branch. One test timed out, but it passed when I ran it individually. I think it should be ok to commit this patch. WDYT [~jamestaylor] ? 

[~tdsilva], should I rebase the patches before the commit? Or can you use the patches as they are?

The patches still apply cleanly, so no need to rebase.

Let's get this in first thing after we cut the branch for 4.11 and start the vote for the RC.

[~tdsilva] - would you mind committing this now that 4.11 is out?

[~ohads]

The patches do not apply cleanly, could you please rebase and I will get this committed?

Thanks.

[~tdsilva]

Patches attach.

Thanks.

SUCCESS: Integrated in Jenkins build Phoenix-master #1672 (See [https://builds.apache.org/job/Phoenix-master/1672/])
PHOENIX-3734 Refactor Phoenix to use TAL instead of direct calls to (thomas: rev 84c825066ac44515b7c3f445bdef8828153d48ff)
* (edit) phoenix-core/src/main/java/org/apache/phoenix/transaction/TephraTransactionContext.java


Github user ohadshacham closed the pull request at:

    https://github.com/apache/phoenix/pull/246


