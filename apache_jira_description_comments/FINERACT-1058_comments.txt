Extending this to a more general case, we cannot just add support for limit and order by since then Offset query comes into the picture. The general case would be to support a non-operator based query.

The problem: They need to be written in a particular order in a query which makes It little bit harder.
 [ ORDER BY sort_expression1 [ASC | DESC] [, sort_expression2 [ASC | DESC] ...] ]  [ LIMIT { number | ALL } ] [ OFFSET number ]





[~Manthan] I envisioned {{org.apache.fineract.infrastructure.security.utils.SQLBuilder}} to mainly ;) be a (quote from JavaDoc) _Utility to assemble the WHERE clause of an SQL query without the risk of SQL injection._... but I was assuming that _LIMIT_ and _ORDER BY_ operations are typically fixed, and don't come from parameters - is that a fair assumption, or have you come across code where that's not so? I guess sometimes they could be user supplied... so then for those cases this idea makes perfect sense!

The "danger" is that SQLBuilder becomes more complex - something like the full SQL from FINERACT-1054, with the {{JOIN}} etc. couldn't easily be constructed with the SQLBuilder - only parts of something like that, and that's totally fine (this is just for illustration, in that particular case, it's a {{RowMapper}}, so no SQLBuilder required theere at all). But just adding support for LIMIT_ and _ORDER BY_ is probably OK - go for it! Best is to directly illustrate how you would use it in one case in the same PR you raise for introducing it (and add test coverage into the existing {{SQLBuilderTest}}).

[~Manthan] I think we psoted above at about the same time (I hadn't seen the comment when I wrote above), but again, if _OFFSET_ could be user supplied and needs to be "validated" for safety to avoid SQL injections, then it could make sense to have SQLBuilder support it, but otherwise it's better and simpler to leave it out of it, and just use SQLBuilder to create the WHERE clause, and then concatenate these other parts.

I'm also not sure if JDBC actually permits using things like ORDER BY, LIMIT and OFFSET as JDBC prepared statement parameters, which is what SQLBuilder ultimately is really for... it may be worth to first test if that actually works? On both the Drizzle and the MySQL JDBC drivers..

[~vorburger] In our previous implementation we did this:
the values are hardcoded(and not prepared) I am still looking into it though.

 !screenshot-1.png!  

Offset, order by, limit all 3 parameters come from the user, to prevent SQL injection is it worth to check if the orderby parameter actually follows column name regex and limit and offset have integers as value?

Even if we cannot use prepared statement this extra check, will it be of some value? Since we are currently(probably) directly concatenating the values, I am attempting to check if SQL injection is possible in the current system with limit values. 

Also, testing on your last point if it can be used as prepared statement.   


[~vorburger] I have noticed a problem, our final aim here is to remove all use of validateSQLinput function (right?), in that case, we cannot use the function   *this.columnValidator.validateSqlInjection(sqlBuilder.toString(), parameters.orderBySql());*  Since this function then calls validateSQLinput, (which is the current implementation) also this happens in audit trails (Which we initially fixed and I am taking it as a base to work for other sections).

Should I be focused on removing validateSqlInjection function ( which calls validateSQLinput)?(which then would mean changes in about 25-30 files, converting all order by and limit as called by the new approach? or just clean up the use of extra criteria with prepared statements (which was done with audit trails?)




In my opinion:
We can add the functionality to add orderBY,limit,offset. 
Orderby -> check if it matches with  column name regex
Limit -> should be an integer or "ALL"
Offset -> should be an integer 
Note that all these 3 values come from the user, if we now add this functionally we probably can remove the use validateSQLInjection function also? And completely remove the validates input function. 
I am currently testing if it is supported as a prepared statement, which would probably solve this problem as well.

WDTY? [~vorburger] [~awasum]



Update:
Good news -> prepared SQL statement is supported for limit, order by, adding this implementation.

Implemented in: https://github.com/apache/fineract/pull/1123
Failing due to flaky tests currently. 

[~Manthan] looks like the build is passing... is there anything else to be done concerning this ticket? Can we merge PR [https://github.com/apache/fineract/pull/1123] ?

no! do not close this yet, this is blocked by a FINERACT-1095, should be done then :D 

Ok, just updated blocker ticket relationships

[~manthan] any progress on this one and/or is this still being worked on? Looks like this was already merged with [https://github.com/apache/fineract/pull/1123|https://github.com/apache/fineract/pull/1123.] ... can we close this issue then?

[~aleks] as this issue has not been worked on in ~9 months, it should not block the 1.5.0 release; I've removed the Fix Version and removed the FINERACT-1305 link.

I've also Stopped Progress, and un-assigned it from [~manthan] to make it clear that this is open to be picked up by anyone else interested.

This is NOT completed, [https://github.com/apache/fineract/pull/1123] was just a first step on this. It would need FINERACT-1095 and more.

