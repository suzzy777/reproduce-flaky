jbonofre commented on PR #1642:
URL: https://github.com/apache/karaf/pull/1642#issuecomment-1274561272

   @awrb FYI, I gonna take a new look on GraphQLExample test as it seems the websocket test is flaky and causing PRs build failure.




awrb commented on PR #1642:
URL: https://github.com/apache/karaf/pull/1642#issuecomment-1274729925

   Whoops, I will check this in the evening (unless I see a commit that fixes that by then). I ran the websocket test several times locally though and never had any problems so I might not be able to reproduce it :/




awrb commented on code in PR #1642:
URL: https://github.com/apache/karaf/pull/1642#discussion_r992365446


##########
features/command/src/main/java/org/apache/karaf/features/command/ListFeaturesCommand.java:
##########
@@ -49,12 +50,16 @@ public class ListFeaturesCommand extends FeaturesCommandSupport {
     @Option(name = "-o", aliases = {"--ordered"}, description = "Display a list using alphabetical order ", required = false, multiValued = false)
     boolean ordered;
 
+    @Option(name = "--repository", description = "Only list features from that repository", required = false, multiValued = false)

Review Comment:
   The ticket suggested to use `name = "-r"`  but since then it was used for another option (--required). So I used full name here.





jbonofre commented on code in PR #1642:
URL: https://github.com/apache/karaf/pull/1642#discussion_r992374692


##########
features/command/src/main/java/org/apache/karaf/features/command/ListFeaturesCommand.java:
##########
@@ -49,12 +50,16 @@ public class ListFeaturesCommand extends FeaturesCommandSupport {
     @Option(name = "-o", aliases = {"--ordered"}, description = "Display a list using alphabetical order ", required = false, multiValued = false)
     boolean ordered;
 
+    @Option(name = "--repository", description = "Only list features from that repository", required = false, multiValued = false)

Review Comment:
   You did right ! `--repository` looks good to me.





awrb commented on PR #1642:
URL: https://github.com/apache/karaf/pull/1642#issuecomment-1275768847

   I was able to reproduce the test failing locally too (sometimes) running `mvn clean test -Dtest=GraphQLExampleTest`. When it failed, it looked like it was being run twice, failing once and passing the second time:
   ```
   GraphQLExampleTest: testWebSocket
   Connecting websocket client
   junit.framework.AssertionFailedError
           at junit.framework.Assert.fail(Assert.java:55)
           at junit.framework.Assert.assertTrue(Assert.java:22)
           at junit.framework.Assert.assertTrue(Assert.java:31)
           at junit.framework.TestCase.assertTrue(TestCase.java:201)
           at org.apache.karaf.itests.examples.GraphQLExampleTest.testWebSocket(GraphQLExampleTest.java:110)
           at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
           at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
           at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
           at java.base/java.lang.reflect.Method.invoke(Method.java:566)
           at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
           at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
           at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
           at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
           at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
           at org.apache.karaf.itests.KarafTestSupport$Retry$1.evaluate(KarafTestSupport.java:160)
           at org.junit.rules.RunRules.evaluate(RunRules.java:20)
           at org.ops4j.pax.exam.invoker.junit.internal.ContainerTestRunner.runLeafWithRetry(ContainerTestRunner.java:97)
           at org.ops4j.pax.exam.invoker.junit.internal.ContainerTestRunner.runChildWithRetry(ContainerTestRunner.java:84)
           at org.ops4j.pax.exam.invoker.junit.internal.ContainerTestRunner.runChild(ContainerTestRunner.java:75)
           at org.ops4j.pax.exam.invoker.junit.internal.ContainerTestRunner.runChild(ContainerTestRunner.java:43)
           at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
           at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
           at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
           at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
           at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
           at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
           at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
           at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
           at org.ops4j.pax.exam.invoker.junit.internal.JUnitProbeInvoker.invokeViaJUnit(JUnitProbeInvoker.java:124)
           at org.ops4j.pax.exam.invoker.junit.internal.JUnitProbeInvoker.findAndInvoke(JUnitProbeInvoker.java:97)
           at org.ops4j.pax.exam.invoker.junit.internal.JUnitProbeInvoker.call(JUnitProbeInvoker.java:73)
           at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
           at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
           at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
           at java.base/java.lang.reflect.Method.invoke(Method.java:566)
           at org.ops4j.pax.exam.rbc.internal.RemoteBundleContextImpl.remoteCall(RemoteBundleContextImpl.java:85)
           at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
           at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
           at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
           at java.base/java.lang.reflect.Method.invoke(Method.java:566)
           at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:359)
           at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
           at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
           at java.base/java.security.AccessController.doPrivileged(Native Method)
           at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
           at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:562)
           at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:796)
           at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:677)
           at java.base/java.security.AccessController.doPrivileged(Native Method)
           at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:676)
           at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
           at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
           at java.base/java.lang.Thread.run(Thread.java:829)
   
   GraphQLExampleTest: testWebSocket
   Connecting websocket client
   Received websocket message: {bookCreated={id=5, name=Lord of the Rings}}
   Closing websocket client
   
   ```
   the first time @OnWebSocketMessage is not called.
   
   I played around with pax-exam options a bit, changed reactor strategy to PerClass, changed to using @Configuration rather than installing features manually but it did not help yet. 
   I don't think this is a problem with the servlet request because using 
   ```
           executeCommand("graphql:query " +  "\"mutation { addBook(name:Test pageCount:100) { id name } }\"");
   ```
    rather than POST to trigger the websocket message did not help.
   
   




jbonofre commented on PR #1642:
URL: https://github.com/apache/karaf/pull/1642#issuecomment-1275777858

   @awrb I think it could also conflict with the `WebsocketExample`. It would be great to avoid this kind of flaky tests.




jbonofre merged PR #1642:
URL: https://github.com/apache/karaf/pull/1642




Commit 1b18c1b371223616bbe11e4018f5e9e35a19ea2c in karaf's branch refs/heads/main from Aleksy Wróblewski
[ https://gitbox.apache.org/repos/asf?p=karaf.git;h=1b18c1b371 ]

[KARAF-4542] - add '--repository' option to feature:list


Commit 0697da72955899b5e92638f4c16ba6657cb90c37 in karaf's branch refs/heads/main from Jean-Baptiste Onofré
[ https://gitbox.apache.org/repos/asf?p=karaf.git;h=0697da7295 ]

Merge pull request #1642 from awrb/KARAF-4542

[KARAF-4542] - add '--repository' option to feature:list

Commit e1b3a9b096061101efb39c340eda4d809d1f83da in karaf's branch refs/heads/karaf-4.3.x from Aleksy Wróblewski
[ https://gitbox.apache.org/repos/asf?p=karaf.git;h=e1b3a9b096 ]

[KARAF-4542] - add '--repository' option to feature:list

(cherry picked from commit 1b18c1b371223616bbe11e4018f5e9e35a19ea2c)


