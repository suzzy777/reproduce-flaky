Failed again.

it s working fine  !Capture.PNG!

Thanks for the report and screenshot with the seed. Next time please include at least the seed in the report. The seed can be used to deterministically reproduce the failure.

The seed is {{-2333626563705276482}}.

Test passes with that seed against trunk. Testing before the commit that I think fixed this.
{code:java}
Gradle Test Executor 3 STANDARD_ERROR
    Jul 24, 2021 4:40:13 PM org.junit.platform.launcher.core.EngineDiscoveryOrchestrator lambda$logTestDescriptorExclusionReasons$7
    INFO: 0 containers and 6 tests were Method or class mismatch

RaftEventSimulationTest > canMakeProgressIfMajorityIsReachable STANDARD_OUT
    timestamp = 2021-07-24T16:40:24.928, RaftEventSimulationTest:canMakeProgressIfMajorityIsReachable =
                                  |-------------------jqwik-------------------
    tries = 100                   | # of calls to property
    checks = 100                  | # of not rejected calls
    generation = RANDOMIZED       | parameters are randomly generated
    after-failure = SAMPLE_ONLY   | only try the previously failed sample
    when-fixed-seed = ALLOW       | fixing the random seed is allowed
    edge-cases#mode = MIXIN       | edge cases are mixed in
    edge-cases#total = 36         | # of all combined edge cases
    edge-cases#tried = 15         | # of edge cases tried in current run
    seed = -2333626563705276482   | random seed to reproduce generated values

Gradle Test Executor 3 finished executing tests.
 {code}

 The seed in the PR build
{code:java}
timestamp = 2021-05-26T04:37:01.424183, RaftEventSimulationTest:canMakeProgressIfMajorityIsReachable = 
  org.opentest4j.AssertionFailedError:
    expected: <true> but was: <false>

                              |-------------------jqwik-------------------
tries = 3                     | # of calls to property
checks = 3                    | # of not rejected calls
generation = RANDOMIZED       | parameters are randomly generated
after-failure = PREVIOUS_SEED | use the previous seed
when-fixed-seed = ALLOW       | fixing the random seed is allowed
edge-cases#mode = MIXIN       | edge cases are mixed in
edge-cases#total = 36         | # of all combined edge cases
edge-cases#tried = 0          | # of edge cases tried in current run
seed = 137014923570865933     | random seed to reproduce generated values

Sample
------
  arg0: 807
  arg1: 2 {code}

It still fails against trunk
{code:java}
RaftEventSimulationTest > canMakeProgressIfMajorityIsReachable STANDARD_OUT
    timestamp = 2021-07-24T17:01:57.485, RaftEventSimulationTest:canMakeProgressIfMajorityIsReachable =
      org.opentest4j.AssertionFailedError:
        expected: <true> but was: <false>

                                  |-------------------jqwik-------------------
    tries = 1                     | # of calls to property
    checks = 1                    | # of not rejected calls
    generation = RANDOMIZED       | parameters are randomly generated
    after-failure = SAMPLE_ONLY   | only try the previously failed sample
    when-fixed-seed = ALLOW       | fixing the random seed is allowed
    edge-cases#mode = MIXIN       | edge cases are mixed in
    edge-cases#total = 0          | # of all combined edge cases
    edge-cases#tried = 0          | # of edge cases tried in current run
    seed = 137014923570865933     | random seed to reproduce generated values

    Sample
    ------
      arg0: 807
      arg1: 2

org.apache.kafka.raft.RaftEventSimulationTest.canMakeProgressIfMajorityIsReachable failed, log available in /home/jsancio/work/kafka/raft/build/reports/testOutput/org.apache.kafka.raft.RaftEventSimulationTest.canMakeProgressIfMajorityIsReachable.test.stdout

RaftEventSimulationTest > canMakeProgressIfMajorityIsReachable FAILED
    org.opentest4j.AssertionFailedError: expected: <true> but was: <false>
        at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)
        at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:40)
        at org.junit.jupiter.api.AssertTrue.assertTrue(AssertTrue.java:35)
        at org.junit.jupiter.api.Assertions.assertTrue(Assertions.java:162)
        at org.apache.kafka.raft.RaftEventSimulationTest.canMakeProgressIfMajorityIsReachable(RaftEventSimulationTest.java:264)1 test completed, 1 failed
 {code}

The issue is with the test and not with the Raft implementation. At a high level the test runs with 5 voters until it reaches at least a high watermark of 10. At this point it partition the network so that 3 nodes cannot send request to 2 nodes and vice versa. With the seed {{137014923570865933}} right before the partition the nodes have the following state:
{code:java}
Node(id=0, hw=14, logEndOffset=25)
Node(id=1, hw=10, logEndOffset=14)
Node(id=2, hw=10, logEndOffset=14)
Node(id=3, hw=10, logEndOffset=22)
Node(id=4, hw=10, logEndOffset=14)
Node(id=5, hw=10, logEndOffset=14)
Node(id=6, hw=6, logEndOffset=18){code}
Nodes 5 and 6 are observers and do not participate in quorum or hw values. Notices that two nodes have a log end offset greater than 20 (0 and 3).

The tests now partitions the network so that nodes 0, 1 can send request to each other and nodes 2, 3, 4 can send request to each other. That means that only node 1 needs to reach offset 20 before the election timeout so that the leader 0 can advance the high watermark.
{code:java}
Node(id=0, hw=22, logEndOffset=34)
Node(id=1, hw=18, logEndOffset=22)
Node(id=2, hw=14, logEndOffset=18)
Node(id=3, hw=10, logEndOffset=25)
Node(id=4, hw=14, logEndOffset=18)
Node(id=5, hw=18, logEndOffset=25)
Node(id=6, hw=18, logEndOffset=29){code}
 

I think that the best way to fix the test, after the partition, is to wait for the high-watermark to reach a value must larger than the LEO before the partition. In the trace above it would be a value much greater than 25.

