After adding some more verbose logging, I see the following sequence:

- Master gets ALTER command
- Sends request to TS, which performs the alter, and then crashes before responding to the AlterTable RPC
- TS restarts, and replays the alter as part of log replay
- TS heartbeats with the _new_ schema version to the master

There are a few issues at play here:
- When we receive a tablet report from the TS after restart, and see that the tablet has updated its schema version, we don't go and mark the table's alter complete at that point. So, client hangs forever.
- Even if we eventually send the AlterTable RPC again, when it gets the OK response, it will call set_latest_schema_version, which returns false (since that schema version was already reported). This means that it won't trigger MarkTableAlterCompleted.

To fix this, we need to make sure that _either_ place that the tablet gets reported with the new schema triggers the same code path. Or, make the response to the AlterTable RPC a no-op, and have that trigger the TS to heartbeat it in the next incremental report. That way we only have one code path to worry about.

I have a patch on gerrit to disable this test for the moment while we work on the fix, since it seems like the fix is going to be localized within catalog_manager and the bug isn't likely to cause flakiness on other tests.

The reason that it was triggered by the Log GC thing is likely just that some timing changed subtlely enough to produce the problematic interleaving, not that anything is wrong with Log GC in particular.

