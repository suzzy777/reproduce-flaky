awrb opened a new pull request, #1624:
URL: https://github.com/apache/karaf/pull/1624

   It's a subtask from [KARAF-5194](https://issues.apache.org/jira/browse/KARAF-5194), which is pretty old but I think it's still relevant (at least feature:status was never implemented).




awrb commented on code in PR #1624:
URL: https://github.com/apache/karaf/pull/1624#discussion_r974620384


##########
features/command/src/main/java/org/apache/karaf/features/command/completers/FeatureVersionCompleter.java:
##########
@@ -0,0 +1,41 @@
+package org.apache.karaf.features.command.completers;
+
+import org.apache.karaf.features.Feature;
+import org.apache.karaf.features.FeaturesService;
+import org.apache.karaf.shell.api.action.lifecycle.Reference;
+import org.apache.karaf.shell.api.action.lifecycle.Service;
+import org.apache.karaf.shell.api.console.CommandLine;
+import org.apache.karaf.shell.api.console.Completer;
+import org.apache.karaf.shell.api.console.Session;
+import org.apache.karaf.shell.support.completers.StringsCompleter;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Collectors;
+
+@Service
+public class FeatureVersionCompleter implements Completer {
+
+    @Reference
+    private FeaturesService featuresService;
+
+    @Override
+    public int complete(Session session, CommandLine commandLine, List<String> candidates) {
+        StringsCompleter delegate = new StringsCompleter();
+        String[] args = commandLine.getArguments();
+        // args look like this at this point: [feature:status, wrapper, '']
+        if (args.length >= 3) {
+            String featureArg = args[1];
+            try {
+                Feature[] features = featuresService.getFeatures(featureArg);
+                List<String> versions = Arrays.stream(features).map(Feature::getVersion).collect(Collectors.toList());
+                delegate.getStrings().addAll(versions);

Review Comment:
   I wanted the completer to work if there are multiple versions of a single feature available, but sadly `versions` is always a singleton here. In `FeatureReq` the latest version is returned:
   ```
       public Stream<Feature> getMatchingFeatures(Map<String, Map<String, Feature>> allFeatures) {
           Pattern pattern = Pattern.compile(name);
           Function<String, Optional<Feature>> func = featureName -> {
               Feature matchingFeature = null;
               if (pattern.matcher(featureName).matches()) {
                   Map<String, Feature> versions = allFeatures.get(featureName);
                   matchingFeature = getLatestFeature(versions, versionRange);
               }
               return Optional.ofNullable(matchingFeature);
           };
           return allFeatures.keySet().stream().map(func).filter(Optional::isPresent).map(Optional::get);
       }
   ```
   It does not seem possible to get all versions via `FeaturesService`
   





awrb commented on code in PR #1624:
URL: https://github.com/apache/karaf/pull/1624#discussion_r974620384


##########
features/command/src/main/java/org/apache/karaf/features/command/completers/FeatureVersionCompleter.java:
##########
@@ -0,0 +1,41 @@
+package org.apache.karaf.features.command.completers;
+
+import org.apache.karaf.features.Feature;
+import org.apache.karaf.features.FeaturesService;
+import org.apache.karaf.shell.api.action.lifecycle.Reference;
+import org.apache.karaf.shell.api.action.lifecycle.Service;
+import org.apache.karaf.shell.api.console.CommandLine;
+import org.apache.karaf.shell.api.console.Completer;
+import org.apache.karaf.shell.api.console.Session;
+import org.apache.karaf.shell.support.completers.StringsCompleter;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Collectors;
+
+@Service
+public class FeatureVersionCompleter implements Completer {
+
+    @Reference
+    private FeaturesService featuresService;
+
+    @Override
+    public int complete(Session session, CommandLine commandLine, List<String> candidates) {
+        StringsCompleter delegate = new StringsCompleter();
+        String[] args = commandLine.getArguments();
+        // args look like this at this point: [feature:status, wrapper, '']
+        if (args.length >= 3) {
+            String featureArg = args[1];
+            try {
+                Feature[] features = featuresService.getFeatures(featureArg);
+                List<String> versions = Arrays.stream(features).map(Feature::getVersion).collect(Collectors.toList());
+                delegate.getStrings().addAll(versions);

Review Comment:
   I wanted the completer to work if there are multiple versions of a single feature available, but sadly `versions` is always a singleton here. In `FeatureReq` the latest version is returned:
   ```
       public Stream<Feature> getMatchingFeatures(Map<String, Map<String, Feature>> allFeatures) {
           Pattern pattern = Pattern.compile(name);
           Function<String, Optional<Feature>> func = featureName -> {
               Feature matchingFeature = null;
               if (pattern.matcher(featureName).matches()) {
                   Map<String, Feature> versions = allFeatures.get(featureName);
                   matchingFeature = getLatestFeature(versions, versionRange);
               }
               return Optional.ofNullable(matchingFeature);
           };
           return allFeatures.keySet().stream().map(func).filter(Optional::isPresent).map(Optional::get);
       }
   ```
   It does not seem possible to get all versions via `FeaturesService` but maybe someone knows a way?
   





awrb commented on code in PR #1624:
URL: https://github.com/apache/karaf/pull/1624#discussion_r976823194


##########
features/command/src/main/java/org/apache/karaf/features/command/completers/FeatureVersionCompleter.java:
##########
@@ -0,0 +1,41 @@
+package org.apache.karaf.features.command.completers;
+
+import org.apache.karaf.features.Feature;
+import org.apache.karaf.features.FeaturesService;
+import org.apache.karaf.shell.api.action.lifecycle.Reference;
+import org.apache.karaf.shell.api.action.lifecycle.Service;
+import org.apache.karaf.shell.api.console.CommandLine;
+import org.apache.karaf.shell.api.console.Completer;
+import org.apache.karaf.shell.api.console.Session;
+import org.apache.karaf.shell.support.completers.StringsCompleter;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Collectors;
+
+@Service
+public class FeatureVersionCompleter implements Completer {
+
+    @Reference
+    private FeaturesService featuresService;
+
+    @Override
+    public int complete(Session session, CommandLine commandLine, List<String> candidates) {
+        StringsCompleter delegate = new StringsCompleter();
+        String[] args = commandLine.getArguments();
+        // args look like this at this point: [feature:status, wrapper, '']
+        if (args.length >= 3) {
+            String featureArg = args[1];
+            try {
+                Feature[] features = featuresService.getFeatures(featureArg);
+                List<String> versions = Arrays.stream(features).map(Feature::getVersion).collect(Collectors.toList());
+                delegate.getStrings().addAll(versions);

Review Comment:
   ```
    private List<String> getAllVersionsOfFeature(String feature, FeaturesService featuresService) throws Exception {
           List<String> versions = new ArrayList<>();
           for (Repository repo : featuresService.listRepositories()) {
               for (Feature f : repo.getFeatures()) {
                   if (f.getName().equals(feature)) {
                       versions.add(f.getVersion());
                   }
               }
           }
   
           return versions;
       }
   ```





awrb commented on PR #1624:
URL: https://github.com/apache/karaf/pull/1624#issuecomment-1254721533

   The pipeline failed but this probably wasn't caused by my changes? Is this a known instability?
   I see something similar here: https://github.com/apache/karaf/runs/8186042837




jbonofre commented on PR #1624:
URL: https://github.com/apache/karaf/pull/1624#issuecomment-1254754525

   Yes there are couple of flaky tests. 




jbonofre merged PR #1624:
URL: https://github.com/apache/karaf/pull/1624




Commit aff059526139059bc181a23907fe50b518f5855d in karaf's branch refs/heads/main from Aleksy Wróblewski
[ https://gitbox.apache.org/repos/asf?p=karaf.git;h=aff0595261 ]

KARAF-7554 - add feature:status command


Commit 34c5fff213163b205dd600332065e155ea1d26bc in karaf's branch refs/heads/main from Jean-Baptiste Onofré
[ https://gitbox.apache.org/repos/asf?p=karaf.git;h=34c5fff213 ]

Merge pull request #1624 from awrb/KARAF-7554

KARAF-7554 - add feature:status command

Commit 0e03d41cd1414bf17ca336c30dccd824a1b63dbd in karaf's branch refs/heads/karaf-4.3.x from Aleksy Wróblewski
[ https://gitbox.apache.org/repos/asf?p=karaf.git;h=0e03d41cd1 ]

KARAF-7554 - add feature:status command

(cherry picked from commit aff059526139059bc181a23907fe50b518f5855d)


