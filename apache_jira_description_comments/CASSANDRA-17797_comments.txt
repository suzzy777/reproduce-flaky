Hello,[~e.dimitrova].

May I pick this up as my first issue?

 

Hi [~jchrys] , thanks for checking. This ticket is marked with [ghc-lhf|https://issues.apache.org/jira/issues/?jql=labels+%3D+ghc-lhf]  label which means it was prepared to be done as part of this year's Grace Hopper Celebration Open Source day where the Apache Cassandra project is participating.

But if you are looking for lhf ticket to work on, you might want to check this filter (any tickets not marked with the ghc-lhf label) - https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=484&quickFilter=2162&quickFilter=2160

Please let me know if you need any help. 

Hi, [~e.dimitrova].
Oh, Got it! Seems interesting Event! (y)

Let me check the filter.

Thanks!

[~e.dimitrova],

Hello, is this issue still pinned to the Grace Hopper Celebration Open Source day? 
It seems to me it is important for the project, so I'd like to take care of it.

Hi [~mmuzaf],

Great point, GHC is already in the past so I removed the label. Please feel free to assign the ticket. I agree it is important and I would really be happy and appreciate you taking it.

Now as you brought it, I will also check the other tickets marked for Grace Hopper to make some adjustments. Thank you! 

Great ticket to spend time on!

Yes, this will mean those will be also visible in the VirtualTables.

I guess we need to raise this to the mailing list according to the latest policy discussed until nothing else is decided.

[~mmuzaf], do you mind to do this? 

[~e.dimitrova]
 # As I can see all the system properties that have the *"cassandra."* prefix are already included in the virtual tables, so if we directly add them to the _CassandraRelevantProperties_ nothing should change from the user's point of view.
[https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/db/virtual/SystemPropertiesTable.java#L76]
 # I also see some system properties that are not directly related to Cassandra's project however they are used for some configurations in production code as well as for tests e.g. [_io.netty.transport.estimateSizeOnSubmit_ |https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java#L115], [_"io.netty.eventLoopThreads"_|https://github.com/apache/cassandra/blob/trunk/test/distributed/org/apache/cassandra/distributed/test/NativeMixedVersionTest.java]. From my point of view such properties should not be part of {_}CassandraRelevantProperties{_}, but correct me if I'm missing something here.
Am I?
 # And the last point - some of the properties are used only for test/debug purposes e.g. ["cassandra.debugrefcount"|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/utils/concurrent/Ref.java#L96]. It seems to me that _CassandraRelevantProperties_ is related to the public API and probably such properties should not be exposed to the public API at all. Should I also add them to this class?


One more thing that seems to be more important here: using system properties may affect lead to some performance issues due to the Hashtable being used under the hood for storing them, especially those that are used really often and are not cached to static variables. 

[~mmuzaf], all valid points. One more reason why we need to confirm on the mailing list what we add.

I believe people like [~mck] and [~jjordan]  already have an opinion but it is good to bring visibility. 

I like your work here [~mmuzaf].

1. agree.
2. despite not having the {{cassandra.}} prefix, they are for all intensive purposes very much about cassandra here. hence they are included.
3. this is intentional. it is a smell, but the alternatives (when i tried) were all worse. commenting/annotating them as test works for me (perfect is the enemy of good).

bq. system properties may affect lead to some performance issues due to the Hashtable

i'd be surprised if this occurs on any hot paths. code in those areas go through much stricter reviews. but open to suggestions if you find something simple and elegant.

Hey,

[~mck], [~e.dimitrova] 

Please, take a look at my pull request - [GitHub PullRequest: 2010|https://github.com/apache/cassandra/pull/2046/files]. As you mentioned earlier, we will expose some added system properties (properties with _cassandra._ prefix are already exposed) to the public API via a virtual table. If we agree on this pull request in general I'll post a new message to the dev list to share it with the community.

I think it may be a good idea to add a new column to the system properties virtual table thus users will be able to see the impact of a particular property on their production environment. The list properties are easy to filter. To achieve this goal I've marked the properties related to the test environment with the {_}TEST_{_} prefix. If we agree on this I can create a new JIRA issue.

h3. The implementation notes
 - the checkstyle rule added to force the CassandraRelevantProperties usage;
 - the enum pattern that was used: upper-casing property name with replacing {*}`{*}{_}.`{*}{*}{_} to *{_}`{_}`* _and removing _cassandra._ prefix;
 - all newly added properties are sorted by their name;
 - properties that are related to test/debug are marked with the {_}TEST{_}_ prefix;
 - setInt(), setString() etc. now return the previous value for convenient usage in the test source code;

h3. The public API changes

Newly production system properties added:
 - io.netty.eventLoopThreads
 - io.netty.transport.estimateSizeOnSubmit
 - java.security.auth.login.config
 - javax.rmi.ssl.client.enabledCipherSuites
 - javax.rmi.ssl.client.enabledProtocols
 - ssl.enable
 - log4j2.disable.jmx
 - log4j2.shutdownHookEnabled
 - logback.configurationFile

Newly added and used for tests only:
 - invalid-legacy-sstable-root
 - legacy-sstable-root
 - org.apache.cassandra.tools.UtilALLOW_TOOL_REINIT_FOR_TEST
 - org.caffinitas.ohc.segmentCount
 - suitename
 - sun.stderr.encoding
 - sun.stdout.encoding
 - test.bbfailhelper.enabled
 - write_survey


I've run some tests over my PR, but I'm not sure that I did everything correctly since I have a lack of experience with the Cassandras test for now. I will be very appreciative if you tell me what I should pay attention to first.

https://app.circleci.com/pipelines/github/Mmuzaf/cassandra/23/workflows/91bae849-8d91-47d0-8bc6-d9fc6ac7dd76
https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2100/


Hi [~mmuzaf] ,

Thank you for the patch and the summary.

Unfortunately, I have only 8 business days until the end of this year and I do not believe I will be able to get to it before January some time. I changed the status to NEEDS COMMITTER in case someone else from the community has cycles earlier than me. Thank you!

About CI: Are you familiar with [Butler|https://butler.cassandra.apache.org/#/]? 

You can use it to see what are the current failures/flaky tests in Cassandra to compare with your results. Butler gets its data from Jenkins so I would advise you if you do not find any failure there, also to check for open tickets in Jira, based on CircleCI findings.

I ll take a look. [~e.dimitrova] tag along anyway if you wish as we need 2 committers eventually.

Thank you [~smiklosovic] 

[~e.dimitrova], [~smiklosovic] 

I'm not familiar with the Butler tool, however, I think I figured out how it works. Despite that, I've failed to find any documentation pages (on Google, or Apache Wiki) and sources. Do you have any links to share?

Here is the link to the comparsion:
[https://butler.cassandra.apache.org/?#/ci/upstream/compare/Cassandra-trunk/cassandra-17797]

I've checked tests labelled with `rgrsn` locally and it seems those test fails are not related to my changes. I think despite the fact that the test flask they may start to fall with another error/stack trace - does the Butler cover this case? Nevertheless, I've checked them too for an errors related to system properties.

This failing tests I've also re-run locally:
[https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2103/testReport/]


Sorry, if I've missed something. I didn't have and experience with this tool yet.

Hi [~mmuzaf],

I did the review and I went through all stuff in src. I will continue with tests next year, I think I have enough for now, it is a big patch.

[~mmuzaf]  I am done with my first round of reviews. You have done an excellent job. We are definitely going places with this. 

I have other ideas how to improve this but we need to firstly pass through initial reviews and then further refactoring / changes should be relatively easy.

[~e.dimitrova] it would be great if you took a look as well, probably after Maxim goes through my review so you are reviewing already partly-reviewed work which should be way easier.

[~smiklosovic] , [~e.dimitrova] 

Hello, I've fixed all the comments in the PR: [#2046|https://github.com/apache/cassandra/pull/2046] 

The changes are also rebased on the top of the trunk branch. I've checked Jenkins and Butler below for any suspicious failures. Hopefully, all the failures were resolved by me.
Can you take a final review of the PR?

[https://ci-cassandra.apache.org/job/Cassandra-devbranch/2200/]
[https://butler.cassandra.apache.org/?#/ci/upstream/compare/Cassandra-trunk/cassandra-17797]

[~edimitrova] would you mind to be the second reviewer? I think we are quite close to ship this, we need the second pair of eyes though. I reviewed what I could and I think we are in a pretty good shape before you potentially jump in.

Hi both,

I am back and I definitely do not mind to look into this work but the patch is fairly big (even if I am sure you two did a great job I still need to go through it, 220 files) and I am not sure exactly when I will have the chance to look into it as I have a lot of things going on these days. Just wanted to set the right expectations that you might want to check on the ML or #cassandra-dev if there is anyone else with cycles sooner. I do not want to slow you down and I totally understand the pain of rebasing big patches.

I understand, just take your time. It just seems it is a lot, these changes are mostly just about moving things. If I remember correctly it took me two days with two review sessions. Maybe three days? Each day around 1h. If you review 50 files daily that is nice one week. 50 files is doable before you run out of stamina. 

Based on the thread here (1), I want to review this again so we are sure all is still OK. It was a long time I reviewed it.

(1) https://lists.apache.org/thread/jy0fdh2jjv4k3z13ww7ffbmqw1ytycrb

I did another round of review. Thanks!

reviewed patch by myself here: https://github.com/apache/cassandra/pull/2046/

[~smiklosovic] You have done so much to move this PR forward, thank you!

I have scheduled the build to check:
https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2402/

tests looks good, I'll do my best to review this week

[~jlewandowski] Thank you, I look forward your comments to fix.

I am posting the same comments here because they are valuable to the issue itself, and because the community has agreed that all such discussions need to be within JIRA. The original comment is here:
[https://github.com/apache/cassandra/pull/2046#discussion_r1157582059]


----

Folks, I'd like to continue with this as I've found some inconsistencies in the source code regarding the use of defaults. I'd like to discuss with you some thoughts about the {{CassandraRelevantProperties}} default values. My concern here is that the current API for getting the value of system properties doesn't give us a reliable and explicit way to get the same results each time we access a property, so removing "redundant" defaults may cause more problems than adding them explicitly.
h3. Current state

Let's take a look at a few examples and inconsistencies:
 # Inconsistency between {{getBoolean()}} and {{{}getInt(){}}}/{{{}getLong(){}}} methods:

 * in case {{getBoolean()}} without defaults value the {{false}} value returned, no exception is thrown;
 * in case {{getInt()}} or {{getLong()}} with default value the exception is thrown ({{{}NullPointerException{}}} :-( see [testInteger_null()|https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/config/CassandraRelevantPropertiesTest.java#L133] test);

 # Inconsistency between {{getBoolean()}} and {{getString()}} for the same property (assume a system property with type boolean is used):

 * {{getBoolean()}} will return a non-null value if the default value is {{{}null{}}};
 * {{getString()}} for the same property will return a {{null}} value;

 # If the default value is {{null}} the {{NullPointerException}} is thrown:
The {{getBoolean()}} method implicitly returns the {{false}} value and depends on the boolean converter implementation itself (so a developer has to delve into the code to find the _real_ return value). However, the {{public long getLong()}} will throw {{NullPointerException}}

h3. Expected state

So, I think the API should be the following (default value {{null}} is allowed) and we have to fix it:
 # {{boolean disableSTCSInL0 = DISABLE_STCS_IN_L0.getBoolean(false);}} (runtime option)

 * If the property is set, the corresponding system property value is used;
 * If the property is NOT set, the default value from brackets is used;

_OR_
 # {{DISABLE_STCS_IN_L0("cassandra.disable_stcs_in_l0", "false")}} (compile time option)

 * If the property is set, the corresponding system property value is used;
 * If the property is NOT set, the default value from the constant is used;

_OR_
 # {{boolean disableSTCSInL0 = DISABLE_STCS_IN_L0.getBoolean()}} (property is expected to be set)

 * If the property is set, the corresponding system property value is used;
 * If the property is NOT set, and there is NO default value we MUST throw an exception.

WDYT?

https://app.circleci.com/pipelines/github/instaclustr/cassandra/2174/workflows/8141ed57-d396-44ad-8c63-715b39f293ce
https://github.com/apache/cassandra/pull/2046/

The build looks good, I will try to build this in Jenkins which has some technical problems right now.

[~jlewandowski] are you plus one otherwise? CircleCI job looks very good. All changes are squashed to one commit.

Jenkins look good too: https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2450/

I am +1 and waiting for committer.

Here is the latest comparison of {{cassandra-17797}} with the {{trunk}} branch:
https://butler.cassandra.apache.org/?#/ci/upstream/compare/Cassandra-trunk/cassandra-17797

I have checked the failing test locally and they passed, so, I guess everything looks good.

I've already approved on PR, +1,

You want me to commit or you can do it on your own?

Thanks, just double checking. Yes you can commit it. 

[~jlewandowski], [~smiklosovic]
There are some conflicts after merging 4.1 and 4.0 into the trunk, I'll do a rebase to fix them and re-run tests.


I've done that already

śr., 10 maj 2023, 20:04 użytkownik Maxim Muzafarov (Jira) <jira@apache.org>



https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra/692/workflows/2c9876e2-183e-461c-866e-a5f2316cea6c - looks good enough for quick verification after rebase

[~jlewandowski], [~smiklosovic]

Thanks so much for your help and review. As a follow-up, and with the intention of not losing the key takeaways after the review, I can propose the {{ConfigurationSource}} interface as an idea of how we can treat system variables, environment variables and configuration parameters as a single set of configuration parameters read from different sources.

Here is my post on the dev-list:
https://lists.apache.org/thread/gdtr3vp375d3nyj6h8xo7owth1s556lz

