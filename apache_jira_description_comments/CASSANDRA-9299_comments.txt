Attached three patches - for 2.0, 2.1, and trunk, respectively, and pushed to three branches for cassci to do its thing later:
- https://github.com/iamaleksey/cassandra/commits/9299-2.0
- https://github.com/iamaleksey/cassandra/commits/9299-2.1
- https://github.com/iamaleksey/cassandra/commits/9299-trunk

The 2.0 patch is the most conservative and changes as little as possible - the only correction there is that cells shadowed by a range tombstone or a partition tombstone won't count towards the warning and the exception.

So removing a whole partition of cells in one go, or removing a map with 100k elements, will no longer trigger TOE.

The 2.1 patch goes slightly further, and short-circuits {{SliceQueryFilter.collectReducedColumns()}} logic if we stumble upon a tombstone past its gc grace, or, say, an expired TTL column with gc grace for the table set to 0.

The trunk patch goes slightly further still and gets rid of one redundant column tester pass over the range tombstones in {{container.maybeAppendColumn()}} call, relying instead on the result of the {{columnCounter.count()}} test.

Why I think the change is justified: the purpose of CASSANDRA-6042 and later CASSANDRA-6117 was to help us avoid OOMs in scenarios where we have to scan through *and accumulate* cells that aren't live - to do a digest of them, or to return them to a coordinator, or to return them to a client. It only makes sense that cells that don't get retained in memory for those actions to happen should not count towards the exception.

It could be said that extra scanning also causes issues for the client, and that's true, but it is a different issue, and should be handled in a separate ticket. Additionally, all redundantly read cells should be counted for that purpose - shadowed by partition tombstone, overwritten by a newer live cell, etc.

The current counting logic is a mix of both of these, and does counting either badly, and must be split.

http://cassci.datastax.com/view/Dev/view/iamaleksey/ has the same non-flaky tests failing as mainline branches have, so no regressions have been introduced.

+1 overall, with just a couple of minor comments.  In the 2.1 patch, this comment should say "will be immediately discarded" instead of "will _not_ be immediately discarded":

{code}
// An expired tombstone will not be immediately discarded in memory, and needn't be counted.
{code}

Also, the {{paging_test.TestPagingWithDeletions.test_failure_threshold_deletions()}} dtest needs to be updated, since it's relying on partition-level deletions triggering the failure threshold.

Thanks, committed as {{bed42c2104ebaac83da4292703c08a5c963e062c}}, with the comment fixed in 2.1 and trunk.

{{paging_test.TestPagingWithDeletions.test_failure_threshold_deletions()}} was already failing, although for a different reason, so I haven't noticed it at first. Anyway, updated the test as well in https://github.com/riptano/cassandra-dtest/commit/9374d07da2b54a42360106d740690b2e4a832803.

[~tuxslayer] after upgrading Cassandra to 2.1.6 we stop receiving tombstones warnings. I lowered tombstone_warn_threshold for tests and it seems that only system tombstones are reported (keys like system, system_traces), is it related to your change, if so is there way to restore tombstone reporting for no system keys?

bq. is it related to your change, if so is there way to restore tombstone reporting for no system keys?

System keyspaces/tables are not special cased, it's just that in your case they are the only ones with something to report (I'm assuming one of them is system.schema_columns). In that case you are fine.

[~iamaleksey] Thanks for reply but it's strange because before 2.1.6 we were receiving reports with few thousands of tombstones and after there are none.

bq. but it's strange because before 2.1.6 we were receiving reports with few thousands of tombstones and after there are none.

Before 2.1.6 tombstones were being counted wrongly (overcounted), that's all.

Ok then, thanks.

