GitHub user ivandasch opened a pull request:

    https://github.com/apache/ignite/pull/4831

    IGNITE-9693 wip.

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gridgain/apache-ignite ignite-9693

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/ignite/pull/4831.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #4831
    
----
commit 905315d0bafb37dfb188945ae7c873490de24f8f
Author: Ivan Daschinskiy <ivandasch@...>
Date:   2018-09-25T17:31:27Z

    IGNITE-9693 wip.

----


[Latest TC run|https://ci.ignite.apache.org/viewLog.html?buildId=1946127&tab=buildResultsDiv&buildTypeId=IgniteTests24Java8_RunAll]

[~ivandasch], I've looked through your changes. A few comments:
1. Do we really need to park and unpark FileCompressorWorkers manually? Needed synchronization can be implemented with BlockingQueue.
2. segmentAware.lastCompressedIdx is called prematurely - we put index in queue, but there's no guarantee that segment is actually compressed. IgniteWriteAheadLogManager#lastCompactedSegment method will report wrong results.
3. deleteObsoleteRawSegments will be called concurrently from multiple threads, this will cause many attempts to delete one file and permanent "Failed to remove obsolete WAL segment" warnings spam.
4. FileCompressor#shutdown doesn't wait for shutdown of FileCompressorWorkers. As a result, FileCompressorWorker may try to record event when GridEventStorageManager is already stopped.
Also, is there a guarantee that park() call will instantly return if interrupt flag was set *before* the call? I read park() javadoc twice and didn't find proofs - seems like FileCompressorWorker may hang on park() on node stop.
5. FileWriteAheadLogManager.FileCompressor#run - minor code style violations: no space after "for", no blank line before "if", tryReserveNextSegmentOrWait - no space before "{".
6. This is arguable, but since we have a bunch FileCompressorWorker threads, it feels like there's no need to keep FileCompressor thread. Putting segment indexes to queue is the only useful work that FileCompressor performs.

{panel:title=Possible Blockers|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1}
{color:#d04437}MVCC Queries{color} [[tests 3|https://ci.ignite.apache.org/viewLog.html?buildId=1946126]]
* IgniteCacheMvccSqlTestSuite: CacheMvccReplicatedSqlTxQueriesTest.testQueryInsertMultithread - 0,0% fails in last 100 master runs.
* IgniteCacheMvccSqlTestSuite: GridIndexRebuildWithMvccEnabledSelfTest.testIndexRebuild - 0,0% fails in last 100 master runs.

{color:#d04437}PDS (Direct IO) 1{color} [[tests 2|https://ci.ignite.apache.org/viewLog.html?buildId=1946079]]
* IgnitePdsNativeIoTestSuite: IgnitePdsWithTtlTest.testRebalancingWithTtlExpirable - 0,0% fails in last 100 master runs.
* IgnitePdsNativeIoTestSuite: IgnitePdsReplacementNativeIoTest.testPageReplacement - 0,0% fails in last 100 master runs.

{color:#d04437}Data Structures{color} [[tests 2|https://ci.ignite.apache.org/viewLog.html?buildId=1946109]]
* IgniteCacheDataStructuresSelfTestSuite: GridCachePartitionedDataStructuresFailoverSelfTest.testAtomicSequenceConstantTopologyChange - 0,0% fails in last 100 master runs.
* IgniteCacheDataStructuresSelfTestSuite: GridCacheReplicatedDataStructuresFailoverSelfTest.testSemaphoreMultipleTopologyChangeNonFailoverSafe - 0,0% fails in last 100 master runs.

{color:#d04437}Compute (Grid){color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=1946032]]
* IgniteBinaryObjectsComputeGridTestSuite: GridContinuousTaskSelfTest.testContinuousJobsChainMultiThreaded - 3,0% fails in last 100 master runs.

{color:#d04437}Cache 1{color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=1946104]]
* IgniteBinaryCacheTestSuite: GridCacheBalancingStoreSelfTest.testConcurrentLoad - 1,0% fails in last 100 master runs.

{panel}
[TeamCity Run All|http://ci.ignite.apache.org/viewLog.html?buildId=1946127&amp;buildTypeId=IgniteTests24Java8_RunAll]

[~ivan.glukos] Thank you for your review, i'll fix ASAP

[Latest TC run|https://ci.ignite.apache.org/viewLog.html?buildId=1955602&tab=buildResultsDiv&buildTypeId=IgniteTests24Java8_RunAll]

[~ivan.glukos] Hi. I've reimplemented logic, now use brand new SegmentAware. However, implementing the same logic for FsyncFileWALManager is not possible, because this logic is not inserted here. Is it ok to create another ticket for FsyncManager? 

Nevertheless, waiting for new TC runAll()

WalCompactionTest#testCompressorToleratesEmptyWalSegments seems to be flaky on final assertion.
Locally ran multiple times -- no failures
 !successfull_local_test.PNG! 

I've found a small bug, related to test above, fixed and retriggered build again. 

[Last TC run|https://ci.ignite.apache.org/viewLog.html?buildId=1957402&tab=buildResultsDiv&buildTypeId=IgniteTests24Java8_RunAll]

{panel:title=No blockers found!|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}{panel}
[TeamCity Run All|http://ci.ignite.apache.org/viewLog.html?buildId=1957402&amp;buildTypeId=IgniteTests24Java8_RunAll]

[~ivandasch], thanks for your contribution!
Merged to master.

Github user asfgit closed the pull request at:

    https://github.com/apache/ignite/pull/4831


