richardantal commented on a change in pull request #1321:
URL: https://github.com/apache/phoenix/pull/1321#discussion_r714669709



##########
File path: phoenix-core/src/main/java/org/apache/phoenix/schema/MetaDataClient.java
##########
@@ -1641,9 +1641,6 @@ public MutationState createIndex(CreateIndexStatement statement, byte[][] splits
                     String columnFamilyName = column.getFamilyName()!=null ? column.getFamilyName().getString() : null;
                     colName = ColumnName.caseSensitiveColumnName(IndexUtil.getIndexColumnName(columnFamilyName, column.getName().getString()));
                     isRowTimestamp = column.isRowTimestamp();
-                    if (colRef.getColumn().getExpressionStr() != null) {
-                        expressionStr = colRef.getColumn().getExpressionStr();

Review comment:
       getExpressionStr() != null means we have a default value set for the column.
   We use this expressionStr to generate the indexExpressions later. https://github.com/apache/phoenix/blob/8c68fe435d0cc7d8bc69ccb05bc6536ba5647113/phoenix-core/src/main/java/org/apache/phoenix/index/IndexMaintainer.java#L504-L506
   In case of a column that has default value, lets say 0 a LiteralExpression was created and it always returned 0. (instead of DefaultValueExpression)
   Because of this, in the index we wrote the default value always.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


richardantal commented on a change in pull request #1321:
URL: https://github.com/apache/phoenix/pull/1321#discussion_r714710133



##########
File path: phoenix-core/src/main/java/org/apache/phoenix/expression/function/DefaultValueExpression.java
##########
@@ -45,7 +45,7 @@ public DefaultValueExpression(List<Expression> children) throws SQLException {
     @Override
     public boolean evaluate(Tuple tuple, ImmutableBytesWritable ptr) {
         boolean evaluated = children.get(0).evaluate(tuple, ptr);
-        if (evaluated) {
+        if (evaluated && ptr.getLength() > 0) {

Review comment:
       I think this DefaultValueExpression was not used before in case of indexes.
   This evaluate function is called here: https://github.com/apache/phoenix/blob/8c68fe435d0cc7d8bc69ccb05bc6536ba5647113/phoenix-core/src/main/java/org/apache/phoenix/index/IndexMaintainer.java#L714
   Here we try to evaluate the first child, something like a KeyValueColumnExpression and if it was not successful we fall back to the defaultExpression.
   When we ran this on a column that had no value in it (it should be interpreted as the default value) this evaluate returned true.
   Examples of reading the score column:
   Row1: (id, no, total, score) values ('1111','1112', 1113, 1114)
   ```
   ptr.get(): [0, 0, 0, 19, 0, 0, 0, 4, 0, 4, 49, 49, 49, 49, 1, 48, -128, 13, 0, 0, 1, 124, 18, 99, 16, -119, 4, -128, 0, 4, 90]
   ptr.getoffset() 27
   ptr.getLength(): 4
   ```
   It meanse the -128, 0, 4, 90 part will be in the built index Row.
   Row2 (id, no, total) values ('1121', '1122', 1123) - score should be default
   ```
   ptr.get():  [0, 0, 0, 19, 0, 0, 0, 0, 0, 4, 49, 49, 50, 49, 1, 48, -128, 13, 0, 0, 1, 124, 18, 99, 16, -119, 4]
   ptr.getOffset() 27
   ptr.getLength() 0
   ```
   In this case we ended up writing this, with 0 Length
   https://github.com/apache/phoenix/blob/8c68fe435d0cc7d8bc69ccb05bc6536ba5647113/phoenix-core/src/main/java/org/apache/phoenix/index/IndexMaintainer.java#L728
   With my change we will fall back to the default value.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


stoty commented on a change in pull request #1321:
URL: https://github.com/apache/phoenix/pull/1321#discussion_r732584529



##########
File path: phoenix-core/src/main/java/org/apache/phoenix/schema/MetaDataClient.java
##########
@@ -1641,9 +1641,6 @@ public MutationState createIndex(CreateIndexStatement statement, byte[][] splits
                     String columnFamilyName = column.getFamilyName()!=null ? column.getFamilyName().getString() : null;
                     colName = ColumnName.caseSensitiveColumnName(IndexUtil.getIndexColumnName(columnFamilyName, column.getName().getString()));
                     isRowTimestamp = column.isRowTimestamp();
-                    if (colRef.getColumn().getExpressionStr() != null) {
-                        expressionStr = colRef.getColumn().getExpressionStr();

Review comment:
       I didn't dig into the default implementation.
   Is the default value resolved when upserting a row, or is it resolved when reading it back ?
   if the latter, this may break indexes for rows that have default values.

##########
File path: phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexWithDefaultValueIT.java
##########
@@ -0,0 +1,125 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.phoenix.end2end;
+
+
+import org.junit.Test;
+
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.util.Properties;
+
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertEquals;
+
+
+public class IndexWithDefaultValueIT extends ParallelStatsDisabledIT {
+
+    @Test
+    public void testQueryTableWithIndex() throws Exception {
+        String tableName = generateUniqueName();
+        String indexName = generateUniqueName();
+
+        Properties props = new Properties();
+        String schema = generateUniqueName();
+        Connection conn = DriverManager.getConnection(getUrl(), props);
+
+        conn.setSchema(schema);
+        conn.createStatement().execute("\n" +
+                "create table " + tableName + "(\n" +
+                "pk VARCHAR,\n" +
+                "b VARCHAR,\n" +
+                "c VARCHAR default '0',\n" +
+                "CONSTRAINT my_pk PRIMARY KEY (pk)\n" +
+                ")");
+
+        conn.commit();
+
+        conn.createStatement().execute("upsert into " + tableName + " values('1','1','1')");
+        conn.commit();
+
+        conn.createStatement().execute("CREATE INDEX " + indexName + " ON " + tableName + "(pk, b, c)");
+        conn.commit();
+
+
+        final PreparedStatement select = conn.prepareStatement(
+                "select * from " + tableName);

Review comment:
       can you add a select here that checks if the select for the default value works when using the index ? (Unless we already have such a test elsewhere).
   Detto for the other test. 




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


richardantal commented on a change in pull request #1321:
URL: https://github.com/apache/phoenix/pull/1321#discussion_r732623672



##########
File path: phoenix-core/src/it/java/org/apache/phoenix/end2end/IndexWithDefaultValueIT.java
##########
@@ -0,0 +1,125 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.phoenix.end2end;
+
+
+import org.junit.Test;
+
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.util.Properties;
+
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertEquals;
+
+
+public class IndexWithDefaultValueIT extends ParallelStatsDisabledIT {
+
+    @Test
+    public void testQueryTableWithIndex() throws Exception {
+        String tableName = generateUniqueName();
+        String indexName = generateUniqueName();
+
+        Properties props = new Properties();
+        String schema = generateUniqueName();
+        Connection conn = DriverManager.getConnection(getUrl(), props);
+
+        conn.setSchema(schema);
+        conn.createStatement().execute("\n" +
+                "create table " + tableName + "(\n" +
+                "pk VARCHAR,\n" +
+                "b VARCHAR,\n" +
+                "c VARCHAR default '0',\n" +
+                "CONSTRAINT my_pk PRIMARY KEY (pk)\n" +
+                ")");
+
+        conn.commit();
+
+        conn.createStatement().execute("upsert into " + tableName + " values('1','1','1')");
+        conn.commit();
+
+        conn.createStatement().execute("CREATE INDEX " + indexName + " ON " + tableName + "(pk, b, c)");
+        conn.commit();
+
+
+        final PreparedStatement select = conn.prepareStatement(
+                "select * from " + tableName);

Review comment:
       This test is intended to test if it is possible to overwrite the default value when we provide a value.
   In the other test ln 116, 118 Checks the reading of the default value when no value provided.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


stoty commented on pull request #1321:
URL: https://github.com/apache/phoenix/pull/1321#issuecomment-953735088


   This breaks selecting from the index table.
   
   `
   create table bubu (id integer primary key, v1 integer default 1, v2 integer);
   create index bibi on bubu (2*v1);
   upsert into bubu values (1,1,1);
   select 2*v1 from bibi;
   select 2*v1 from bibi;
   `


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


stoty removed a comment on pull request #1321:
URL: https://github.com/apache/phoenix/pull/1321#issuecomment-953735088


   This breaks selecting from the index table.
   
   `
   create table bubu (id integer primary key, v1 integer default 1, v2 integer);
   create index bibi on bubu (2*v1);
   upsert into bubu values (1,1,1);
   select 2*v1 from bibi;
   select 2*v1 from bibi;
   `


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


stoty closed pull request #1321:
URL: https://github.com/apache/phoenix/pull/1321


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


ss77892 commented on pull request #1321:
URL: https://github.com/apache/phoenix/pull/1321#issuecomment-1006311792


   LGTM +1 Do we have test passed for this PR?


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


richardantal commented on pull request #1321:
URL: https://github.com/apache/phoenix/pull/1321#issuecomment-1006376597


   I rebased the commit to trigger the test run.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


richardantal commented on pull request #1321:
URL: https://github.com/apache/phoenix/pull/1321#issuecomment-1007477737


   Should I edit the lines which are not relevant to this change but checkstyle mentions as new errors?
   The 2  failing tests are known as flaky.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


richardantal commented on pull request #1321:
URL: https://github.com/apache/phoenix/pull/1321#issuecomment-1007477737


   Should I edit the lines which are not relevant to this change but checkstyle mentions as new errors?
   The 2  failing tests are known as flaky.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


stoty commented on pull request #1321:
URL: https://github.com/apache/phoenix/pull/1321#issuecomment-1008700025


   If you haven't touched those lines, then fixing those checkstyle errors is optional.
   If you fix it, then the code will be in a better shape, but the patch will be noisier.
   If you don't fix it, then the patch will be easier to read, but the code will stay ugly.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


richardantal merged pull request #1321:
URL: https://github.com/apache/phoenix/pull/1321


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


richardantal opened a new pull request #1372:
URL: https://github.com/apache/phoenix/pull/1372


   createad PR to check tests on 4.x


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


You seem to have forgotten to backport this to 4.x and 4.16 [~richardantal].

richardantal closed pull request #1372:
URL: https://github.com/apache/phoenix/pull/1372


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


richardantal merged pull request #1389:
URL: https://github.com/apache/phoenix/pull/1389


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


Thanks [~stoty]  for the reminder, I pushed to the 4.x and 4.16 branches now. 

