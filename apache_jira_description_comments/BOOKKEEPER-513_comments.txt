I get a similar error on MessageBoundedPersistenceTest

The following sequence triggers this.
# subscribe
# closeSubscription
# subscribe(attach)

AFAICS, this only happens with the simple client. Basically, closing just closes the channel, but the subscribe can get to the server before the channelDisconnected behaviour can happen, so the channel for the initial subscribe is still in the map. The solution is to send a closeSubscription message for the simple channel manager as well as with the multiplex client. Is there any reason we don't do this already [~hustlmsp]?

no reason. just keep the behavior same as before for simple client. for simple client, sending the closeSubscription to hub server, the client has to wait until the closeSubscription respond. close subscription channel might be simple and straightforward.

if we want to guarantee subscribe succeed if closeSubscription succeed, we might need to adapt to same solution to kick off a closeSubscription request. if we could relax the guarantee, how about we change the test case to use force attach? both are fine for me.

I'd prefer the sending a close subscription request. My only concern is it may cause BC issues. In any case, I won't get around to implementing until the end of next week probably.

[~ikelly] did you start working on this jira? if not, I could take it.

I haven't started on this yet. Will do it tomorrow if you haven't already started.

please go ahead, Ivan. I haven't started yet.

I'm attaching a preliminary patch, but I think we'll need to go with another approach. 

There's a couple of problems with it. Firstly, it'll break when closing a subscription on a 4.1 server, as OperationType is an enum, and a 4.1 will only recognise the values it had in the OperationType enum, so no CLOSESUBSCRIPTION.

A way to resolve this would be to detect the server protocol version, and only send close if it's greater than what we have in 4.2. However, this doesn't work either. ProtocolVersion is also an enum, so adding another value there will break protobuf compatibility with 4.1.

The attached patch fails TestBackwardCompat (as 2 others also, but BackwardCompat is the most serious). 

bq. a 4.1 will only recognise the values it had in the OperationType enum, so no CLOSESUBSCRIPTION.

If CLOSESUBSCRIPTION is the last value of the enum, then a 4.1 server won't recognise. We just need to make sure that the 4.1 branch will do the right thing if a server receives an unknown operation type.

bq. A way to resolve this would be to detect the server protocol version, and only send close if it's greater than what we have in 4.2. However, this doesn't work either. ProtocolVersion is also an enum, so adding another value there will break protobuf compatibility with 4.1.

I was wondering if it would be ok to have a patch for 4.1 to make sure that we don't break compatibility. It is not exactly as bug fix for 4.1, but it is not supposed to be a major change either, no?


If it introduced compatibility issue, how about we moved it to next release. for this release, it seems that we could avoid it from test case side. anyway, this issue doesn't seem critical for me so far. I am fine with any solution on it.

I've modified SimpleHChannelManager to retry subscriptions up to 5 times if it gets a TOPIC_BUSY. This seems to resolve the issue, and the fix is entirely confined to the SimpleHChannel implementation. For TestBackwardsCompat, I've added delays, as we cannot make any modifications to 4.1.0 & 4.0.0

[~fpj] Protobufs assert if they find a value for a enum which isn't in the version they have. We can't modify 4.1.0 or 4.0.0 as they've been released, so the OperationType enum in those releases will never have CLOSESUBSCRIPTION. If we could go back in time, the solution would be to change type from being an enum to an int and do the same for protocolVersion. As it is, protocolVersion is absolutely useless as we can't ever add a new version.

From your response, it sounds like my comment was not clear. We can always have a new release for a branch, and I was wondering if there was any change we could make to the 4.1 branch that could fix the compatibility issue. If there is any such a change, then we could have it in 4.1.1. 

I don't have any great ideas at this point, so it was just a high-level thought.

Testing JIRA BOOKKEEPER-513


Patch [0001-BOOKKEEPER-513-TestMessageFilter-fails-periodically.patch|https://issues.apache.org/jira/secure/attachment/12563319/0001-BOOKKEEPER-513-TestMessageFilter-fails-periodically.patch] downloaded at Fri Jan  4 17:01:13 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/199/

The problem is that it would be incompatible with 4.1.0. Any new 4.1 release is irrelevant. The problem would occur when users are upgrading their cluster to 4.2.0 from 4.1.0. If the client is 4.2.0 and the server is 4.1.0, a close subscriber will crash the server.

The failure is with a test crashing. Will look into it.


new patch is to try and trigger on jenkins with extra logging. It won't repro locally. 

Testing JIRA BOOKKEEPER-513


Patch [BOOKKEEPER-513.diff|https://issues.apache.org/jira/secure/attachment/12563336/BOOKKEEPER-513.diff] downloaded at Fri Jan  4 20:03:19 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:red}-1 TESTS{color} - patch does not compile, cannot run testcases
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/203/

Testing JIRA BOOKKEEPER-513


Patch [BOOKKEEPER-513.diff|https://issues.apache.org/jira/secure/attachment/12563336/BOOKKEEPER-513.diff] downloaded at Sat Jan  5 16:29:23 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 TESTS{color}
.    Tests run: 3
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-debug/23/

Patch rebased onto latest trunk.

Testing JIRA BOOKKEEPER-513


Patch [0001-BOOKKEEPER-513-TestMessageFilter-fails-periodically.patch|https://issues.apache.org/jira/secure/attachment/12563962/0001-BOOKKEEPER-513-TestMessageFilter-fails-periodically.patch] downloaded at Wed Jan  9 17:21:24 UTC 2013

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 120
.    {color:green}+1{color} the patch does adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 FINDBUGS{color}
.    {color:green}+1{color} the patch does not seem to introduce new Findbugs warnings
{color:green}+1 TESTS{color}
.    Tests run: 785
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/bookkeeper-trunk-precommit-build/230/

lgtm. +1. [~fpj] could you take a look at the latest patch? since you are involved in this thread.

I applied only the changes to TestSubAfterCloseSub.java and it didn't fail. It was supposed to, right? I had a look at the test, and in my understanding it should have thrown an exception and failed because of the exception. For some reason it didn't. Also, if this is the case, why don't we catch the exception and fail the test?

Which exception?

The test should fail with a ServiceDownException, but it's a race condition, and probably machine sensitive, so there's no guarantee. I can get it to hit very reliably on a dev machine here. 

Yeah, it does not fail for me with a ServiceDownException. That was one comment. The second comment was that perhaps we should catch the exception to make it clear that if it happens, it is wrong. The second point is minor, the first one worries me more. If it fails for everyone but me, then my vote is a 0+ for this patch.

{quote}it does not fail for me with a ServiceDownException{quote}
This implies it fails with something? what does it fail with? It should be something to do with TOPIC_BUSY. What kind of machine are you using? Num cores? OS? How many times did you run it?

I've just run this on another different quad core linux machine, and it hits about 50% of the time. On my dual core macbook, about 50% of the time also. As I said, it's a race, and it's a race thats very dependent on what the networking stack and scheduler are doing. It's not possible to get a deterministic test for this. The best we can do is have something that creates the conditions in which the test can trigger, and if people start to see intermittent failures it means we have something to fix.

I'm also running on a dual core macbook. I have even increased the number of iterations of the test to 100 and run multiple times... nothing. I checked to make sure that the new test was there. 

bq. The best we can do is have something that creates the conditions in which the test can trigger, and if people start to see intermittent failures it means we have something to fix.

I have mixed feelings about tests that fail intermittently because passing doesn't really mean anything. But at this point, I don't think it makes sense to hold the release because of it. One option is to create a jira and think some more about it after the release. 

{quote}I'm also running on a dual core macbook. I have even increased the number of iterations of the test to 100 and run multiple times... nothing. I checked to make sure that the new test was there. {quote}
Have you ensured that the version of the hedwig-client jar installed is the one without the fix? Do a mvn install -DskipTests from a clean branch just to be sure.

{quote}
I have mixed feelings about tests that fail intermittently because passing doesn't really mean anything. But at this point, I don't think it makes sense to hold the release because of it. One option is to create a jira and think some more about it after the release. {quote}
The other option is to not test it at all. It's impossible to have a deterministic test for this, as it depends on the timing of the kernel notifying netty of the disconnection on the server side and then depends on the timing of netty running the disconnection handler. We can't control these components and therefore can't control their timings.

bq. Have you ensured that the version of the hedwig-client jar installed is the one without the fix? Do a mvn install -DskipTests from a clean branch just to be sure.

Ok, I'll do it.

bq. The other option is to not test it at all.

Agreed, it is an option. Flaky tests make the process somewhat unreliable, though. I think I'd rather have a smaller set of solid, reliable tests rather than a larger set of somewhat unreliable tests. Note that I also don't have a good suggestion to fix this test.

The point of having this test in is to not to say "the test passes, so the bug doesn't exist", but rather to say "the test fails, therefore the bug exists". It's a canary.

Ok, after 40 minutes running, it did hit it. 

bq. The point of having this test in is to not to say "the test passes, so the bug doesn't exist", but rather to say "the test fails, therefore the bug exists". It's a canary.

I understand, and I also understand that these issues are difficult to test. However, tests that fail intermittently tend to cause confusion because there could be a long gap between reintroducing the bug and spotting it in a failed test. Again, I'm not entirely convinced that it is a good thing to have tests like this, but if you feel we should, it is fine with me. 

One point I'd like to make is that it would be good to differentiate errors and failures. If a test is written to capture a given bug, it should add to the number of failures, not the number of errors. Adding to the number of errors should happen only in the case of unexpected events, say the disk is full or a network port is already used. 

{quote}
Again, I'm not entirely convinced that it is a good thing to have tests like this, but if you feel we should, it is fine with me.
{quote}

As my previous comments, introducing closeSubscription request for simple client would break backward compatibility. At the end of a release, I think it would be better to not break the backward compatibility. Ivan's patch seems to be a suitable solution for current situation.

I'm not sure if my comment is what is preventing it from being committed. I'm not against the solution, it seems good to me. All points I've been trying to make are about the test case, not the fix itself.


I'm going to commit this as is, as there's one +1 and no -1.

Committed as r1432902. Thanks for reviewing guys.

Integrated in bookkeeper-trunk2 #59 (See [https://builds.apache.org/job/bookkeeper-trunk2/59/])
    BOOKKEEPER-513: TestMessageFilter fails periodically (ivank) (Revision 1432902)

     Result = SUCCESS
ivank : 
Files : 
* /zookeeper/bookkeeper/trunk/CHANGES.txt
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/AbstractSubscribeResponseHandler.java
* /zookeeper/bookkeeper/trunk/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/simple/SimpleHChannelManager.java
* /zookeeper/bookkeeper/trunk/hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java
* /zookeeper/bookkeeper/trunk/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java


