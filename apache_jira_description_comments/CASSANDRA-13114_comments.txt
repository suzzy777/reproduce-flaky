Netty 4.0.23 has been introduced in CASSANDRA-7761 and is used since 2.1.1. Looking at the [4.0.27 release notes|http://netty.io/news/2015/04/02/4-0-27-Final.html] I assume that [#3567|https://github.com/netty/netty/issues/3567] fixes the memory issue you're referring to? If I read the ticket correctly, the bug does not manifest in 4.0.23, but only after updating to 4.0.25/26. Can you link the actual issue that makes you believe 4.0.23 is affected in case there's something I'm missing here?

Sorry, the actual fixes are in 4.0.24 (http://netty.io/news/2014/10/29/4-0-24-Final.html / https://github.com/netty/netty/pull/3058 / https://github.com/netty/netty/issues/3057).

[~snazy], since you've been working on a couple of related issues (CASSANDRA-12032, CASSANDRA-12033, CASSANDRA-12034, CASSANDRA-11937, CASSANDRA-11818).. what would be your suggestion when it comes to back-porting  some of these to further stabilize memory management in 2.x and 3.0? Do you see any issues updating netty to 4.0.42 on all branches, regardless of any back-porting decisions for the listed tickets?

No objections regarding a _minor_ netty upgrade, if that solves real SSL issues / an existing bug.  I'd just be very careful with dependency changes since 4.0.37 introduced a couple of issues.
Would setting {{-XX:MaxDirectMemorySize=SomeBigValue}} help in this case?
However, I do object introducing the new stuff from CASSANDRA-12032 in 2.2 or 3.0, because it is a new thing, which is disabled by default in 3.x.


4.0.39 has been tested pretty well with 3.x by now, so it should be relatively safe (much safer than, say, 3.0.36, which not only hasn't been tested, but also won't get the attention that 3.0.39 would get if it is used by both 3.0 and 3.x). Definitely don't pick 4.1!

As for setting MaxDirectMemorySize: it was set to 20GB when I filed this ticket. No luck :)

Side-note: CASSANDRA-13126 is a related issue, on clusters with SSL enabled even non SSL clients may be impacted due to this netty issue.

I admit that I don't really have an opinion on using any particular version. Any reasons not to go with the latest stable 4.0 release? 

Let's try a CI run using 4.0.43:

||2.1||2.2||3.0||3.11||trunk||
|[branch|https://github.com/spodkowinski/cassandra/tree/CASSANDRA-13114-2.1]|[branch|https://github.com/spodkowinski/cassandra/tree/CASSANDRA-13114-2.2]|[branch|https://github.com/spodkowinski/cassandra/tree/CASSANDRA-13114-3.0]|[branch|https://github.com/spodkowinski/cassandra/tree/CASSANDRA-13114-3.11]|[branch|https://github.com/spodkowinski/cassandra/tree/CASSANDRA-13114-trunk]|
|[dtest|http://cassci.datastax.com/view/Dev/view/spodkowinski/job/spodkowinski-CASSANDRA-13114-2.1-dtest/]|[dtest|http://cassci.datastax.com/view/Dev/view/spodkowinski/job/spodkowinski-CASSANDRA-13114-2.2-dtest/]|[dtest|http://cassci.datastax.com/view/Dev/view/spodkowinski/job/spodkowinski-CASSANDRA-13114-3.0-dtest/]|[dtest|http://cassci.datastax.com/view/Dev/view/spodkowinski/job/spodkowinski-CASSANDRA-13114-3.11-dtest/]|[dtest|http://cassci.datastax.com/view/Dev/view/spodkowinski/job/spodkowinski-CASSANDRA-13114-trunk-dtest/]|
|[testall|http://cassci.datastax.com/view/Dev/view/spodkowinski/job/spodkowinski-CASSANDRA-13114-2.1-testall/]|[testall|http://cassci.datastax.com/view/Dev/view/spodkowinski/job/spodkowinski-CASSANDRA-13114-2.2-testall/]|[testall|http://cassci.datastax.com/view/Dev/view/spodkowinski/job/spodkowinski-CASSANDRA-13114-3.0-testall/]|[testall|http://cassci.datastax.com/view/Dev/view/spodkowinski/job/spodkowinski-CASSANDRA-13114-3.11-testall/]|[testall|http://cassci.datastax.com/view/Dev/view/spodkowinski/job/spodkowinski-CASSANDRA-13114-trunk-testall/]|


[~jasobrown], you have any strong preference for netty releases and gossip 2.0?

[~norman], anything to double check or look out for from our side while updating from 4.0.23 -> 4.0.43?


[~spodxx@gmail.com] nope just upgrade to 4.0.43. FTW ;) That said we will release 4.0.44.Final end of this week or next week latest.

Some insights on dtest results:

* {{local_quorum_bootstrap_test}}
See CASSANDRA-12437, [PR|https://github.com/riptano/cassandra-dtest/pull/1429] created
* {{test_tombstone_failure_v3}}
Seems to be [failing on constant basis|http://cassci.datastax.com/view/cassandra-2.1/job/cassandra-2.1_dtest/lastCompletedBuild/testReport/read_failures_test/TestReadFailures/test_tombstone_failure_v3/], I've opened a [PR| https://github.com/riptano/cassandra-dtest/pull/1430]
* {{cqlsh_tests.cqlsh_tests.CqlshSmokeTest.test_alter_table}} and
* {{cql_tests.MiscellaneousCQLTester.prepared_statement_invalidation_test}}
Fallout from CASSANDRA-12443 and already addressed in [PR|https://github.com/riptano/cassandra-dtest/pull/1427]

Other tests seem to be flaky or have known issues.

[~spodxx@gmail.com] FYI netty 4.0.44.Final was released earlier today. http://netty.io/news/2017/01/30/4-0-44-Final-4-1-8-Final.html

Updated the patch to 4.0.44 and latest CI results already reflect the version change.

[~snazy], would you review the patch?

You probably want to run some QUORUM stress smoke tests to make sure there are no regressions there.

I can, but would need some time.

EDIT: [~jjordan]'s suggestion makes sense. We already had an issue with a regression in Netty - just want to prevent a second upgrade-revert-upgrade-ticket ;)

I built SNAPSHOT artifacts on top of current {{cassandra-3.0}} for Tom to test: http://people.apache.org/~mshuler/13114_netty-4.0.44_3.0/

{noformat}
commit cd9a6590dd950d456278461919d7e6a079531ee4 (HEAD -> 13114_netty-4.0.44_3.0, github/13114_netty-4.0.44_3.0)
Author: Stefan Podkowinski <s.podkowinski@gmail.com>
Date:   Wed Jan 25 15:16:25 2017 +0100

    Upgrade to netty 4.0.44
    
    patch by Stefan Podkowinski; reviewed by X for CASSANDRA-13114

 CHANGES.txt                                                             |   1 +
 build.xml                                                               |   2 +-
 lib/licenses/{netty-all-4.0.23.Final.txt => netty-all-4.0.44.Final.txt} |   0
 lib/netty-all-4.0.23.Final.jar                                          | Bin 1779991 -> 0 bytes
 lib/netty-all-4.0.44.Final.jar                                          | Bin 0 -> 2342652 bytes
 src/java/org/apache/cassandra/transport/Message.java                    |  12 ++++++++----
 6 files changed, 10 insertions(+), 5 deletions(-)

commit 6caf3c4f13bb29e3fd732365210be6b3c954f04a (origin/cassandra-3.0, cassandra-3.0)
Author: Michael Shuler <michael@pbandjelly.org>
Date:   Wed Feb 1 14:39:35 2017 -0600

    Remove 'no upgrades' note from NEWS.txt

{noformat}

[~spodxx@gmail.com] can you explain the code change in {{Message}}? It looks like it doesn't change anything.

Any exceptions caught by Netty will be logged by {{UnexpectedChannelExceptionHandler}}. Before the changes to {{Message}}, this would only happen when the channel would still be open. In Netty 4.0.23 this seems to be the case, in 4.0.44 the channel is now closed (at least for handshake errors, which makes sense) when {{exceptionCaught}} is called. What the patch does is simply to log the exception in both cases, while leaving the error reply sending case as it was (keep sending reply only in case channel is still open). I've noticed the changed behaviour through a dtest, [see results|http://cassci.datastax.com/view/Dev/view/spodkowinski/job/spodkowinski-CASSANDRA-13114-3.11-dtest/1/testReport/junit/native_transport_ssl_test/NativeTransportSSL/connect_to_ssl_test/].

As for the mentioned performance regression tests, I've only have a single physical host available for cstar_perf, so I can't really stress test multi-node setups. A single node tests with and without ssl didn't show any significant changes, but the results are little meaningful. Besides I also can't find any way to test the actual memory leak issue at hand by simulating lots of connecting and deconnecting clients.



Ah - logging takes place in the {{apply}} method. OK, makes sense.

I've deployed [~mshuler]'s snapshot build to most nodes in the cluster that previously experienced this issue, and re-enabled TLS on a few hundred clients. The nodes still on 3.0.10 quickly showed memory issues, while the nodes on 3.0.11-SNAPSHOT were happy.

So I upgraded the remaining nodes and enabled TLS on another ~50000 clients, many many more than I originally needed to cause problems.

Nothing broke.

So basically I can confirm that this patch fixes the problem, and at least for my test cases (one involves fairly heavy use of QUORUM reads and writes) doesn't appear to introduce new ones. I wouldn't take that over good dtests/utests, but it's a useful data point to have.

I set this ticket as a blocker for 3.0.11.

Is there any additional testing required to merge this to the cassandra-3.0 branch, so we can release 3.0.11?  Thanks!

Patch LGTM - however, is this going into 3.0...trunk or 2.1...trunk? Fix version (and summary) say 3.0, but there are patches for 2.1 and 2.2, too.

I don't think this is critical enough for 2.1, as you have to have large enough direct allocations through netty that will exhaust the memory between regular CMS runs. So you don't necessarily have to run into this problem and there's an easy workaround by not enabling disableexplicitgc (as described in CASSANDRA-13126) or by simply replacing the netty jar with a new version. 
But 2.2 and 3.0 - why not? Both are supported and it should be possible to do a library updated there.

Alright, committed as eb0f443705425bac93f92a5e7e04ea5def77b1d8 to 2.1 and merged up to trunk.

Was this dire enough to go into 2.1 ?  Seems like a pretty high bar for a .17 release. 



Well, the new netty version _should_ not hurt. But if you run into this SSL/netty issue, it hurts a lot.

