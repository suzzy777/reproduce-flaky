While reviewing the logic in some flaky tests, I noticed that as part of commit 75b183196798232aa6f2dcaaaab117f309119053, miller introduced 2 new methods in MinSolrCloudCluster that each start with the same two lines of code...
{code:java}
  private void waitForAllNodes(int numServers, int timeoutSeconds) throws IOException, InterruptedException, TimeoutException {
    
    executorLauncher.shutdown();
    
    ExecutorUtil.shutdownAndAwaitTermination(executorLauncher);
{code}
{code:java}
  public void waitForNode(JettySolrRunner jetty, int timeoutSeconds)
      throws IOException, InterruptedException, TimeoutException {

    executorLauncher.shutdown();

    ExecutorUtil.shutdownAndAwaitTermination(executorLauncher);
{code}
It smells incredibly fishy to me that a "wait" method would be calling shutdown on a ExecutorService, effecitvely making it useless for any subsequent operations â€“ leaving me to wonder how/why this isn't causing any failures when additional tasks were ever given to this executor?

Diging in a bit more, I realized the reason this doesn't cause problems is because the only "use" of the {{executorLauncher}} (to invoke/submit tasks) is in the MiniSOlrCloudCluster's constructor, and that the constructor won't {{return}} until all tasks invoked executor are finished, via the checkForExceptions method...
{code:java}
    for (int i = 0; i < numServers; ++i) {
      startups.add(() -> startJettySolrRunner(newNodeName(), jettyConfig.context, jettyConfig));
    }

    Collection<Future<JettySolrRunner>> futures = executorLauncher.invokeAll(startups);
    Exception startupError = checkForExceptions("Error starting up MiniSolrCloudCluster", futures);
...
  private Exception checkForExceptions(String message, Collection<Future<JettySolrRunner>> futures) throws InterruptedException {
    Exception parsed = new Exception(message);
    boolean ok = true;
    for (Future<JettySolrRunner> future : futures) {
      try {
        future.get();
      }
...
{code}
...no other code uses executorLauncher (any method calls to start/restart a jetty instance do so in the caller's thread)

So it seems to be that we could quite obviously simplify & cleanup this code by moving the lifecyle of the executorLauncher entirely inside of the constructor (and likewise cleanup the {{executorCloser}} lifecycle to be contained entirely w/in the {{MiniSolrCloudCluser.shutdown()}} ) method...

_...BUT..._

... but ... this brings me back to the above mentioned change's miller made to add {{executorLauncher.shutdown()}} calls to various methods. I can't for the life of me understand how/why this were neccessary/useful, so i don't really want to muck w/it w/o a better understanding.

[~markrmiller@gmail.com]: can you provide some clarity here? Do you remember the purpose of those changes? Do you have any concerns about the attached patch?

Just part of a series of changes as I explored getting tests to pass - tried a variety of things and sometimes their are still prints in the code.

Looks like you could currently remove those shutdown and wait calls and do this all in the constructor.

Commit df07fb33bb2ea0ece6ad9229a50c9661d710fdbe in lucene-solr's branch refs/heads/master from Chris Hostetter
[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=df07fb3 ]

SOLR-13043: cleanup suspicious ExecutorService lifecycles in MiniSolrCloudCluster


weird ... i could have sworn i already backported this to 7x, but there was nogitbot update to jira nad i don't see it in git log ... investigating.

Commit 097758873a5348dcfcd231a0acd2793c640fbac4 in lucene-solr's branch refs/heads/branch_7x from Chris Hostetter
[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0977588 ]

SOLR-13043: cleanup suspicious ExecutorService lifecycles in MiniSolrCloudCluster

(cherry picked from commit df07fb33bb2ea0ece6ad9229a50c9661d710fdbe)


