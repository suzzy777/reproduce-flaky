We're seeing start-impala-cluster.py fail very frequently when starting up for this test. It may be related to IMPALA-2883 but the symptoms are a bit different: we don't see any messages about kill timeouts.

{code}
Impala.tests.custom_cluster.test_exchange_delays.TestExchangeDelays.test_exchange_large_delay[exec_option: {'disable_codegen': False, 'abort_on_error': 1, 'exec_single_node_rows_threshold': 0, 'batch_size': 0, 'num_nodes': 0} | table_format: text/none] (from pytest)
Failing for the past 1 build (Since Failed#2065 )
Took 2 min 1 sec.
add description
Error Message

test setup failure

Stacktrace

self = <test_exchange_delays.TestExchangeDelays object at 0x1cb0dd0>
method = <bound method TestExchangeDelays.test_exchange_large_delay of <test_exchange_delays.TestExchangeDelays object at 0x1cb0dd0>>

    def setup_method(self, method):
      cluster_args = list()
      for arg in [IMPALAD_ARGS, STATESTORED_ARGS, CATALOGD_ARGS]:
        if arg in method.func_dict:
          cluster_args.append("--%s=\"%s\" " % (arg, method.func_dict[arg]))
      # Start a clean new cluster before each test
>     self._start_impala_cluster(cluster_args)

common/custom_cluster_test_suite.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
common/custom_cluster_test_suite.py:106: in _start_impala_cluster
    check_call(cmd + options, close_fds=True)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

popenargs = (['/data/jenkins/workspace/impala-cdh5-trunk-core/repos/Impala/bin/start-impala-cluster.py', '--cluster_size=3', '--lo...sts', '--log_level=1', '--impalad_args="--stress_datastream_recvr_delay_ms=10000 --datastream_sender_timeout_ms=1" '],)
kwargs = {'close_fds': True}, retcode = 1
cmd = ['/data/jenkins/workspace/impala-cdh5-trunk-core/repos/Impala/bin/start-impala-cluster.py', '--cluster_size=3', '--log...tests', '--log_level=1', '--impalad_args="--stress_datastream_recvr_delay_ms=10000 --datastream_sender_timeout_ms=1" ']

    def check_call(*popenargs, **kwargs):
        """Run command with arguments.  Wait for command to complete.  If
        the exit code was zero then return, otherwise raise
        CalledProcessError.  The CalledProcessError object will have the
        return code in the returncode attribute.
    
        The arguments are the same as for the Popen constructor.  Example:
    
        check_call(["ls", "-l"])
        """
        retcode = call(*popenargs, **kwargs)
        cmd = kwargs.get("args")
        if cmd is None:
            cmd = popenargs[0]
        if retcode:
>           raise CalledProcessError(retcode, cmd)
E           CalledProcessError: Command '['/data/jenkins/workspace/impala-cdh5-trunk-core/repos/Impala/bin/start-impala-cluster.py', '--cluster_size=3', '--log_dir=/data/jenkins/workspace/impala-cdh5-trunk-core/repos/Impala/logs/custom_cluster_tests', '--log_level=1', '--impalad_args="--stress_datastream_recvr_delay_ms=10000 --datastream_sender_timeout_ms=1" ']' returned non-zero exit status 1

/usr/lib64/python2.6/subprocess.py:505: CalledProcessError
{code}