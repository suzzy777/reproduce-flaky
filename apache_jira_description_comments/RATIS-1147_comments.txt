I've been investigating this. Here are my observations.
 * This reproduces consistently when running the test on Mac.
 * I cannot reproduce when running on Linux (the Docker container started by start-build-env.sh).
 * It seems to be triggered by tests allocating a large number of servers (e.g. {{TestMultiRaftGroup}} starting 15 peers).
 * After debugging, I've traced it to the {{NetUtils#createLocalServerAddress()}} method, which operates by binding a socket to an ephemeral port identified by the OS, then immediately closing it, and returning the resulting address for the mini-cluster to use. (This technique always has a risk of a time-of-check/time-of-use race condition, but it's the best we can do, and it should be rare.) Under tests like {{TestMultiRaftGroup}} allocating a large volume of ports, this method occasionally fails to close a socket silently. {{netstat}} continues to report a socket bound on the address in {{LISTEN}} state, even after the code closed it.
 * This is very strange, so it made me suspect a Mac-specific JDK bug. I traced all the way through the JDK code and confirmed that it's going all the way down to the native {{socketClose0}} function successfully. Yet, somehow, the socket remains! I don't see significant differences between the Linux and Mac native code implementation (linux_close.c vs. bsd_close.c in the OpenJDK tree). I couldn't find any relevant OpenJDK bug reports.

The good news though is that I found a workaround. If we bind explicitly to the loopback interface (instead of wildcard), then I no longer see these sockets leaking. This must be some kind of edge case specific to Mac and sockets bound to wildcard.  Binding to loopback is probably the better thing to do anyway, because there is no reason for these test sockets to be externally accessible.

I submitted a pull request. With this patch, I have all tests passing on Mac.

I have merged the pull request.  Thanks, [~cnauroth]!

I noticed this was included in release 2.0.0 RC3, so I'm updating the Fix Version.

