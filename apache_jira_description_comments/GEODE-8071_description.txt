The {{RebalanceCommand}} uses a non-daemon thread to execute its internal logic:

{code:title=RebalanceCommand.java|borderStyle=solid}
ExecutorService commandExecutors = LoggingExecutors.newSingleThreadExecutor("RebalanceCommand", false);
{code}

The above prevents the {{locator}} from gracefully shutdown afterwards:

{noformat}
"RebalanceCommand1" #971 prio=5 os_prio=0 tid=0x00007f9664011000 nid=0x15905 waiting on condition [0x00007f9651471000]
   java.lang.Thread.State: WAITING (parking)
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait for  <0x00000007308c36e8> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)
        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)
        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:748)
{noformat}