[~nizhikov] Do you mind if I assign this ticket to me?

[~ivandasch] You can do it. Thanks!

[~ivandasch], LGTM

[~NSAmelchev] Thanks a lot!

{panel:title=Branch: [pull/7679/head] Base: [master] : No blockers found!|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=5228231&amp;buildTypeId=IgniteTests24Java8_RunAll]

[~nizhikov] Could you please take a look over my PR?

[~ivandasch] Let's add the JMH test for the changed part of the platform reader and check the results for the case when we have enough heap to  deal with the big array.

[~nizhikov] I added benchmark and detailed analyzis in jupyter notebook, please see [here|https://github.com/ivandasch/ignite-12827-benchmarks-analysis/blob/master/report.ipynb]

Hello [~ivandasch]

This issue is reproducible only on the special cases when we have small heap and heavy service requests from the .Net.
It requires some additional review from my side, also.

So I think we should exclude it from the 2.8.1 scope.

What do you think?

[~nizhikov] This issue, to be honest, not about OOM on special case, but about counter intuitive API and confusing behaviour.
Let's explain. Consider this code:

{code:java}
 @Test
    public void testCoreDump() throws Exception {
        BinaryMarshaller marsh = binaryMarshaller();

        BinaryHeapOutputStream os = new BinaryHeapOutputStream(1024);

        List<Value> col = IntStream.range(0, 1000).mapToObj(Value::new).collect(Collectors.toList());

        marsh.binaryMarshaller().writer(os).marshal(col);

        MappedFile memFile = new MappedFile(Files.createTempFile("mem_","_test").toFile(), os.capacity());

        long ptr = memFile.address();

        GridUnsafe.copyHeapOffheap(os.array(), GridUnsafe.BYTE_ARR_OFF, ptr, os.position());

        BinaryOffheapInputStream is = new BinaryOffheapInputStream(ptr, os.capacity());

        List<BinaryObject> desCol = (List<BinaryObject>)marsh.binaryMarshaller().reader(is)
                .readObjectDetached();

        memFile.close();

        assertEquals(500, (int)desCol.get(500).field("val"));
    }
{code}

Let's assume that once upon a time one igniter start to develop unmarshalling from memory mapped file or some offheap data.
He or she writes some similar code like one above and BUM! got JVM crash. He probably would yell a lot and think "WTF, object is detached!"
But unfortunatelly not fully. 

I think that confusing and errorneous API is worse, than small performance penalty in some cases (and, as you can find in my report, in many cases, when collection is large enough or object is not so small, has performance benefits). Correctness is worth more than performance.


{panel:title=Branch: [pull/7679/head] Base: [master] : Possible Blockers (1)|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1}
{color:#d04437}Cache 5{color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=5289336]]
* IgniteCacheTestSuite5: CacheSerializableTransactionsTest.testConflictResolution - Test has low fail rate in base branch 0,0% and is not flaky

{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=5287831&amp;buildTypeId=IgniteTests24Java8_RunAll]

{panel:title=Branch: [pull/7679/head] Base: [master] : No blockers found!|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=5287831&amp;buildTypeId=IgniteTests24Java8_RunAll]

[~ivandasch], looks good to me. Thanks for your contribution!

Merged to master.

