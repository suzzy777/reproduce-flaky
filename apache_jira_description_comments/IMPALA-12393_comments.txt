Is this a bug, or an improvement? Since you didn't change the iteration earlier, this seems like a (small) perf improvement.

I see this as a bug. I'm not sure if it is actually user-visible.

The bug would come up when inserting timestamps into a Parquet table. If the hash is inconsistent, then the dictionary encoding sometimes treats two equivalent values as different. This prevents the dictionary encoding from working properly, so you can end up with a dictionary with multiple copies of the same value using different integer representations. This would result in larger Parquet files. I haven't confirmed this Parquet encoding case, but it seems possible. It would happen unless we always clear the memory so the padding is zero. I don't think we guarantee that.

I can't get this to impact inserting into a Parquet table. I'll downgrade this. I think there is also a question of performance of TimestampValue::Hash() vs doing a hash of the first 12 bytes.

For normal execution, I think this statement that clears the Tuple means that the padding will be consistent. From be/src/runtime/tuple.h:
{noformat}
Â  void Init(int size) { memset(this, 0, size); }{noformat}
That would mean this is test-only and not a real issue.

Commit d96341ed537a3e321d5fa6a0235ab06b5d9169a2 in impala's branch refs/heads/master from Joe McDonnell
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=d96341ed5 ]

IMPALA-12393: Fix inconsistent hash for TimestampValue in DictEncoder

Currently, DictEncoder uses the default hash function for
TimestampValue, which means it is hashing the entire
TimestampValue struct. This can be inconsistent, because
TimestampValue contains some padding that may not be zero
in some cases. For TimestampValues that are part of a Tuple,
the padding is zero, so this is mainly present in test cases.

This was discovered when fixing a Clang Tidy performance-for-range-copy
warning by iterating with a const reference rather than
making a copy of the value. DictTest.TestTimestamps became
flaky with that change, because the hash was no longer
consistent. The copy must have had consistent content for
the padding through the iteration, but the const reference
did not.

This adds a template specialization of the Hash function
for TimestampValue. The specialization uses TimestampValue::Hash(),
which hashes only the non-padding pieces of the struct. This
also includes the change to dict-test.cc that uncovered the
issue. This fix is mostly to unblock IMPALA-12390.

Testing:
 - Ran dict-test in a loop for a few hundred iterations
 - Hand tested inserting many timestamps into a Parquet table
   with dictionary encoding and verified that the performance didn't
   change.

Change-Id: Iad86e9b0f645311c3389cf2804dcc1a346ff10a9
Reviewed-on: http://gerrit.cloudera.org:8080/20396
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Reviewed-by: Daniel Becker <daniel.becker@cloudera.com>
Reviewed-by: Michael Smith <michael.smith@cloudera.com>


