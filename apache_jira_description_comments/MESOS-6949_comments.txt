Also observed this on the ASF CI; this was a build with Ubuntu/cmake/clang, without libevent/SSL. This time, the mock function was called zero times rather than twice. Full log is attached.

The test fails because a new master is detected twice, the second time after the framework connects, which transitions the framework back into a {{disconnected}} state. We do not retry to connect again in this test.
{noformat}
I1107 14:48:17.822687 27475 scheduler.cpp:496] New master detected at master@172.16.10.193:34054
I1107 14:48:17.822826 27475 scheduler.cpp:505] Waiting for 0ns before initiating a re-(connection) attempt with the master
...
I1107 14:48:17.824995 27476 scheduler.cpp:387] Connected with the master at http://172.16.10.193:34054/master/api/v1/scheduler
I1107 14:48:17.827498 27471 scheduler.cpp:496] New master detected at master@172.16.10.193:34054
I1107 14:48:17.827524 27471 scheduler.cpp:505] Waiting for 0ns before initiating a re-(connection) attempt with the master
W1107 14:48:17.827612 27471 scheduler.cpp:539] Dropping SUBSCRIBE: Scheduler is in state DISCONNECTED
{noformat}

While playing with the test, I've discovered a bug in the scheduler library: MESOS-8179.

https://reviews.apache.org/r/63672/
https://reviews.apache.org/r/63673/

{noformat}
Commit: a6bb16aa431c32962f114fa30527aa2730a7da0d [a6bb16a]
Author: Alexander Rukletsov alexr@apache.org
Date: 8 November 2017 at 17:18:49 GMT+1
Commit Date: 13 November 2017 at 21:41:47 GMT+1

Added a two-parameter SendSubscribe action in test.

Review: https://reviews.apache.org/r/63672
{noformat}
{noformat}
Commit: ebd27f8a39177ef26d05bbde5ad0e2e66c8811ff [ebd27f8]
Author: Alexander Rukletsov alexr@apache.org
Date: 7 November 2017 at 21:24:16 GMT+1
Commit Date: 13 November 2017 at 21:41:47 GMT+1

Allowed multiple master detections in MasterFailover test.

After master failover, the scheduler library can fire new master
detection more than once. We are not interested in sporadic
connected events, but in the end result: the scheduler can
resubscribe with the same framework id.

Review: https://reviews.apache.org/r/63673
{noformat}

This appears flaky on CI again (centos-7-Plain):

Error Message

{noformat}
../../src/tests/scheduler_tests.cpp:313
Failed to wait 15secs for subscribed2
{noformat}

Reopening the ticket.

Attached log: SchedulerTest_MasterFailover_1_badrun.txt

Another fix: https://reviews.apache.org/r/69267/

Note: Some commits in prior comments landed in 1.5.0, but those turned out to be flaky still.

This one lands in 1.8.0+
{code}
commit 3126631542a25cd7d485e2e44e279dfbe2af7597
Author: Joseph Wu <josephwu@apache.org>
Date:   Tue Nov 6 17:11:35 2018 -0800

    Fixed flaky SchedulerTest.MasterFailover.
    
    This test was flaky because there is a double-master-detection race
    after the master fails over.  This test uses the Standalone master
    detector, which keeps a single Master PID in memory and always returns
    that one PID as the leader.  This means there is almost no delay
    between failing over the master and detecting a new leader.
    
    The scheduler in this test tries to send a SUBSCRIBE call to the master
    as soon as the master is detected.  Normally, there will only be two
    total SUBSCRIBE calls during the test, before and after the master
    failover.  However, the test also manually appoints the leader after
    failing over the master.  This step races against the scheduler's own
    retry logic, and can potentially cause a third SUBSCRIBE if the second
    SUBSCRIBE has already started.
    
    Because the scheduler in this test does not enable checkpointing, the
    third SUBSCRIBE will actively disconnect the framework, causing the
    master to remove the framework.  This removal also prevents the
    framework from ever registering again, and thereby times out the test.
    
    This fixes the test to prevent excess master detection events.
    
    We could also change the HTTP scheduler driver to ignore these extra
    master detection events when the master in question has not changed.
    
    Review: https://reviews.apache.org/r/69267
{code}

