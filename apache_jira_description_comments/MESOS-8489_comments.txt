https://reviews.apache.org/r/65350/

[~abudnik], thanks for the triaging. However, I think we did not understand this issue deep enough:
# The race description seems not accurate enough to me. The race is between the destruction of the first cluster::slave and the orphan container destroy in the second slave's recovery path. We should reset the Owned pointer first before we call next StartSlave(). (This would fix the flakiness in this unit test)
# We need to understand why the nested *test* cgroup is still there when we create the first slave, since it is just a simple os::rmdir(). This is the trigger of the flakiness. The *test* cgroup is supposed to be created and removed immediately. There might be a bug in cgroup::remove(). https://github.com/apache/mesos/blob/ce0905fcb31a10ade0962a89235fa90b01edf01a/src/linux/cgroups.cpp#L485
# The nested *test* cgroup may no longer be needed since it was a workaround for old kernel versions. Could you do some investigations on whether this is supported by kenel version later than 2.6? We may be able to remove these code and document it (Still need to understand #2 though). https://github.com/apache/mesos/blob/ce0905fcb31a10ade0962a89235fa90b01edf01a/src/linux/cgroups.cpp#L461~#L488

We have multiple race conditions between simultaneously running agents in tests. We launch slaves using the same cgroup hierarchy by default. Linux launcher and some isolators call `cgroups::prepare()`, which creates and then immediately removes `mesos/test` cgroup to check whether the kernel supports nested cgroups.

First race condition is between `LinuxLauncher::create()` and `LinuxLauncher::recover()`. First one calls `cgroups::prepare()` while the other iterates over cgroups hierarchy to detect orphan containers. Also, we call `destroy()` for detected orphan containers - that also leads to a race condition.

Second race condition happens when `cgroups::prepare()` is called in parallel.

https://reviews.apache.org/r/66449/ - fixes all above cases for `LinuxCapabilitiesIsolatorFlagsTest.ROOT_IsolatorFlags` test.

[https://reviews.apache.org/r/66404/]
 [https://reviews.apache.org/r/66474/]

From `man 7 cgroups`:
{code:java}
       freezer (since Linux 2.6.28; CONFIG_CGROUP_FREEZER)
              The freezer cgroup can suspend and restore (resume) all tasks in a cgroup.  Freezing a cgroup /A also causes its children,  for
              example, tasks in /A/B, to be frozen.
{code}
I've double-checked this ^^ assertion by installing Ubuntu 9.04 which runs on Linux kernel 2.6.28 and creating a nested freezer cgroup manually, see [^ubuntu 9.04.png].

commit 3dcd225dbb817da676ae57f4f8871650ece5a0b8
Author: Andrei Budnik <abudnik@mesosphere.com>
Date:   Tue Apr 10 23:40:52 2018 -0700

    Updated minimum supported Linux kernel version.
    
    Implementation of `freezer` cgroup, which supports nested containers,
    was introduced in 2.6.28. This patch updates documentation.
    
    Review: https://reviews.apache.org/r/66474/

commit 950ae66a741142cc188b820c5a66c34e14867bb5
Author: Andrei Budnik <abudnik@mesosphere.com>
Date:   Tue Apr 10 23:40:47 2018 -0700

    Removed check for nested cgroup support in `cgroups::prepare()`.
    
    Previously, we were checking for nested cgroup support while trying to
    create a linux launcher. This was necessary to make sure that the
    kernel supports creating nested cgroups. As we don't support old
    kernel versions which don't support nested cgroups, this check can be
    safely removed.
    
    Review: https://reviews.apache.org/r/66404/

commit 1f20119a576f05b4b1d45f02250446a663dcaf69
Author: Andrei Budnik <abudnik@mesosphere.com>
Date:   Tue Apr 10 23:40:29 2018 -0700

    Fixed flaky `ROOT_IsolatorFlags` test.
    
    Starting more than one agent simultaneously in tests leads to a race
    condition between a linux launcher which calls `cgroups::prepare()` for
    the first slave and `LinuxLauncherProcess::recover()` which iterates
    over cgroups hierarchy for the second slave. Therefore, `mesos/test`
    cgroup that is created to check if the kernel supports nested cgroups
    can be detected by a recovery process as they use same cgroup hierarchy
    path by default. That leads to orphan containers and causes flakiness
    of `ROOT_IsolatorFlags` test. To fix the issue, this patch adds
    termination of an agent before starting a new one.
    
    Review: https://reviews.apache.org/r/66449/

