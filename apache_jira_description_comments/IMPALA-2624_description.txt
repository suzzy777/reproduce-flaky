http://sandbox.jenkins.cloudera.com/view/Impala/view/Builds%20-%202.3.0%20Release/job/impala-cdh5.5.x-exhaustive/56/consoleFull
(note that this doesn't show up as failed test results, you have to look in the console)

{noformat}
19:59:22 metadata/test_ddl.py::TestDdlStatements::test_alter_table_drop_partition_with_purge[exec_option: {'batch_size': 0, 'num_nodes': 0, 'sync_ddl': 0, 'disable_codegen': False, 'abort_on_error': 1, 'exec_single_node_rows_threshold': 0} | table_format: text/none] FAILED
20:00:12 metadata/test_ddl.py::TestDdlStatements::test_alter_table_drop_partition_with_purge[exec_option: {'batch_size': 0, 'num_nodes': 0, 'sync_ddl': 1, 'disable_codegen': False, 'abort_on_error': 1, 'exec_single_node_rows_threshold': 0} | table_format: text/none] FAILED
{noformat}
{noformat}
22:02:20 =================================== FAILURES ===================================
22:02:20  TestDdlStatements.test_alter_table_drop_partition_with_purge[exec_option: {'batch_size': 0, 'num_nodes': 0, 'sync_ddl': 0, 'disable_codegen': False, 'abort_on_error': 1, 'exec_single_node_rows_threshold': 0} | table_format: text/none] 
22:02:20 metadata/test_ddl.py:316: in test_alter_table_drop_partition_with_purge
22:02:20     assert self.hdfs_client.exists(\
22:02:20 E   assert <bound method ?._pyweb_hdfs_client_exists of <tests.util.hdfs_util.PyWebHdfsClientWithChmod object at 0x8677d90>>('/user/jenkins/.Trash/Current/test-warehouse/alter_purge_db.db/t1/j=1/j1.txt')
22:02:20 E    +  where <bound method ?._pyweb_hdfs_client_exists of <tests.util.hdfs_util.PyWebHdfsClientWithChmod object at 0x8677d90>> = <tests.util.hdfs_util.PyWebHdfsClientWithChmod object at 0x8677d90>.exists
22:02:20 E    +    where <tests.util.hdfs_util.PyWebHdfsClientWithChmod object at 0x8677d90> = <test_ddl.TestDdlStatements object at 0x8a1a250>.hdfs_client
22:02:20 E    +  and   '/user/jenkins/.Trash/Current/test-warehouse/alter_purge_db.db/t1/j=1/j1.txt' = <built-in method format of str object at 0x315e780>('jenkins', 'alter_purge_db')
22:02:20 E    +    where <built-in method format of str object at 0x315e780> = '/user/{0}/.Trash/Current/test-warehouse/{1}.db/t1/j=1/j1.txt'.format
22:02:20 E    +    and   'jenkins' = <function getuser at 0x239fd70>()
22:02:20 E    +      where <function getuser at 0x239fd70> = getpass.getuser
22:02:20 ---------------------------- Captured stderr setup -----------------------------
22:02:20 -- executing against localhost:21000
22:02:20 use default;
22:02:20 
22:02:20 SET sync_ddl=1;
22:02:20 -- executing against localhost:21000
22:02:20 drop database if exists `ddl_test_db` cascade;
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 use default;
22:02:20 
22:02:20 SET sync_ddl=1;
22:02:20 -- executing against localhost:21000
22:02:20 drop database if exists `ddl_purge_db` cascade;
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 use default;
22:02:20 
22:02:20 SET sync_ddl=1;
22:02:20 -- executing against localhost:21000
22:02:20 drop database if exists `alter_table_test_db` cascade;
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 use default;
22:02:20 
22:02:20 SET sync_ddl=1;
22:02:20 -- executing against localhost:21000
22:02:20 drop database if exists `alter_table_test_db2` cascade;
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 use default;
22:02:20 
22:02:20 SET sync_ddl=1;
22:02:20 -- executing against localhost:21000
22:02:20 drop database if exists `function_ddl_test` cascade;
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 use default;
22:02:20 
22:02:20 SET sync_ddl=1;
22:02:20 -- executing against localhost:21000
22:02:20 drop database if exists `udf_test` cascade;
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 use default;
22:02:20 
22:02:20 SET sync_ddl=1;
22:02:20 -- executing against localhost:21000
22:02:20 drop database if exists `data_src_test` cascade;
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 use default;
22:02:20 
22:02:20 SET sync_ddl=1;
22:02:20 -- executing against localhost:21000
22:02:20 drop database if exists `truncate_table_test_db` cascade;
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 use default;
22:02:20 
22:02:20 SET sync_ddl=1;
22:02:20 -- executing against localhost:21000
22:02:20 drop database if exists `test_db` cascade;
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 use default;
22:02:20 
22:02:20 SET sync_ddl=1;
22:02:20 -- executing against localhost:21000
22:02:20 drop database if exists `alter_purge_db` cascade;
22:02:20 
22:02:20 MainThread: Starting new HTTP connection (1): 0.0.0.0
22:02:20 MainThread: Starting new HTTP connection (1): 0.0.0.0
22:02:20 MainThread: Starting new HTTP connection (1): 0.0.0.0
22:02:20 ----------------------------- Captured stderr call -----------------------------
22:02:20 -- connecting to: localhost:21000
22:02:20 -- executing against localhost:21000
22:02:20 create database alter_purge_db location '/test-warehouse/alter_purge_db.db';
22:02:20 
22:02:20 -- closing connection to: localhost:21000
22:02:20 -- executing against localhost:21000
22:02:20 create table alter_purge_db.t1(i int) partitioned      by (j int);
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 alter table alter_purge_db.t1 add partition(j=1);
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 alter table alter_purge_db.t1 add partition(j=2);
22:02:20 
22:02:20 MainThread: Starting new HTTP connection (1): 0.0.0.0
22:02:20 MainThread: Starting new HTTP connection (1): localhost
22:02:20 MainThread: Starting new HTTP connection (1): 0.0.0.0
22:02:20 MainThread: Starting new HTTP connection (1): localhost
22:02:20 -- executing against localhost:21000
22:02:20 alter table alter_purge_db.t1 drop partition(j=1);
22:02:20 
22:02:20 MainThread: Starting new HTTP connection (1): 0.0.0.0
22:02:20 MainThread: Starting new HTTP connection (1): 0.0.0.0
22:02:20 MainThread: Starting new HTTP connection (1): 0.0.0.0
22:02:20  TestDdlStatements.test_alter_table_drop_partition_with_purge[exec_option: {'batch_size': 0, 'num_nodes': 0, 'sync_ddl': 1, 'disable_codegen': False, 'abort_on_error': 1, 'exec_single_node_rows_threshold': 0} | table_format: text/none] 
22:02:20 metadata/test_ddl.py:329: in test_alter_table_drop_partition_with_purge
22:02:20     assert not self.hdfs_client.exists(\
22:02:20 E   assert not True
22:02:20 E    +  where True = <bound method ?._pyweb_hdfs_client_exists of <tests.util.hdfs_util.PyWebHdfsClientWithChmod object at 0x8677d90>>('/user/jenkins/.Trash/Current/test-warehouse/alter_purge_db.db/t1/j=2')
22:02:20 E    +    where <bound method ?._pyweb_hdfs_client_exists of <tests.util.hdfs_util.PyWebHdfsClientWithChmod object at 0x8677d90>> = <tests.util.hdfs_util.PyWebHdfsClientWithChmod object at 0x8677d90>.exists
22:02:20 E    +      where <tests.util.hdfs_util.PyWebHdfsClientWithChmod object at 0x8677d90> = <test_ddl.TestDdlStatements object at 0x91d7890>.hdfs_client
22:02:20 E    +    and   '/user/jenkins/.Trash/Current/test-warehouse/alter_purge_db.db/t1/j=2' = <built-in method format of str object at 0x315fc90>('jenkins', 'alter_purge_db')
22:02:20 E    +      where <built-in method format of str object at 0x315fc90> = '/user/{0}/.Trash/Current/test-warehouse/{1}.db/t1/j=2'.format
22:02:20 E    +      and   'jenkins' = <function getuser at 0x239fd70>()
22:02:20 E    +        where <function getuser at 0x239fd70> = getpass.getuser
22:02:20 ---------------------------- Captured stderr setup -----------------------------
22:02:20 -- executing against localhost:21000
22:02:20 use default;
22:02:20 
22:02:20 SET sync_ddl=1;
22:02:20 -- executing against localhost:21000
22:02:20 drop database if exists `ddl_test_db` cascade;
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 use default;
22:02:20 
22:02:20 SET sync_ddl=1;
22:02:20 -- executing against localhost:21000
22:02:20 drop database if exists `ddl_purge_db` cascade;
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 use default;
22:02:20 
22:02:20 SET sync_ddl=1;
22:02:20 -- executing against localhost:21000
22:02:20 drop database if exists `alter_table_test_db` cascade;
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 use default;
22:02:20 
22:02:20 SET sync_ddl=1;
22:02:20 -- executing against localhost:21000
22:02:20 drop database if exists `alter_table_test_db2` cascade;
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 use default;
22:02:20 
22:02:20 SET sync_ddl=1;
22:02:20 -- executing against localhost:21000
22:02:20 drop database if exists `function_ddl_test` cascade;
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 use default;
22:02:20 
22:02:20 SET sync_ddl=1;
22:02:20 -- executing against localhost:21000
22:02:20 drop database if exists `udf_test` cascade;
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 use default;
22:02:20 
22:02:20 SET sync_ddl=1;
22:02:20 -- executing against localhost:21000
22:02:20 drop database if exists `data_src_test` cascade;
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 use default;
22:02:20 
22:02:20 SET sync_ddl=1;
22:02:20 -- executing against localhost:21000
22:02:20 drop database if exists `truncate_table_test_db` cascade;
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 use default;
22:02:20 
22:02:20 SET sync_ddl=1;
22:02:20 -- executing against localhost:21000
22:02:20 drop database if exists `test_db` cascade;
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 use default;
22:02:20 
22:02:20 SET sync_ddl=1;
22:02:20 -- executing against localhost:21000
22:02:20 drop database if exists `alter_purge_db` cascade;
22:02:20 
22:02:20 MainThread: Starting new HTTP connection (1): 0.0.0.0
22:02:20 MainThread: Starting new HTTP connection (1): 0.0.0.0
22:02:20 MainThread: Starting new HTTP connection (1): 0.0.0.0
22:02:20 ----------------------------- Captured stderr call -----------------------------
22:02:20 -- connecting to: localhost:21000
22:02:20 -- executing against localhost:21000
22:02:20 create database alter_purge_db location '/test-warehouse/alter_purge_db.db';
22:02:20 
22:02:20 -- closing connection to: localhost:21000
22:02:20 -- executing against localhost:21000
22:02:20 create table alter_purge_db.t1(i int) partitioned      by (j int);
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 alter table alter_purge_db.t1 add partition(j=1);
22:02:20 
22:02:20 -- executing against localhost:21000
22:02:20 alter table alter_purge_db.t1 add partition(j=2);
22:02:20 
22:02:20 MainThread: Starting new HTTP connection (1): 0.0.0.0
22:02:20 MainThread: Starting new HTTP connection (1): localhost
22:02:20 MainThread: Starting new HTTP connection (1): 0.0.0.0
22:02:20 MainThread: Starting new HTTP connection (1): localhost
22:02:20 -- executing against localhost:21000
22:02:20 alter table alter_purge_db.t1 drop partition(j=1);
22:02:20 
22:02:20 MainThread: Starting new HTTP connection (1): 0.0.0.0
22:02:20 MainThread: Starting new HTTP connection (1): 0.0.0.0
22:02:20 MainThread: Starting new HTTP connection (1): 0.0.0.0
22:02:20 MainThread: Starting new HTTP connection (1): 0.0.0.0
22:02:20 -- executing against localhost:21000
22:02:20 alter table alter_purge_db.t1 drop partition(j=2) purge;
22:02:20 
22:02:20 MainThread: Starting new HTTP connection (1): 0.0.0.0
22:02:20 MainThread: Starting new HTTP connection (1): 0.0.0.0
22:02:20 MainThread: Starting new HTTP connection (1): 0.0.0.0
{noformat}