The test also hung on failure here:

Thread 1 (Thread 0x7fc8364b5720 (LWP 36613)):
#0  0x00007fc8349daee9 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0
#1  0x00007fc835223c9b in arrive (this=0x292e450, pid=<value optimized out>) at ../../../third_party/libprocess/src/gate.hpp:73
#2  process::ProcessManager::wait (this=0x292e450, pid=<value optimized out>) at ../../../third_party/libprocess/src/process.cpp:2669
#3  0x00007fc835233545 in process::wait (pid=..., duration=...) at ../../../third_party/libprocess/src/process.cpp:3109
#4  0x00007fc834ef091e in wait (this=0x7fff81049190, __in_chrg=<value optimized out>) at ../../third_party/libprocess/include/process/process.hpp:357
#5  mesos::MesosSchedulerDriver::~MesosSchedulerDriver (this=0x7fff81049190, __in_chrg=<value optimized out>) at ../../src/sched/sched.cpp:757
#6  0x00000000005d8f23 in SlaveRecoveryTest_CleanupExecutor_Test<mesos::internal::slave::ProcessIsolator>::TestBody (this=<value optimized out>)
    at ../../src/tests/slave_recovery_tests.cpp:771
#7  0x00000000008646eb in testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void> (object=0x7fc8240055b0, 
    method=&virtual testing::Test::TestBody(), location=0x92fd37 "the test body") at gmock-1.6.0/gtest/src/gtest.cc:2126
#8  0x0000000000858579 in testing::Test::Run (this=0x7fc8240055b0) at gmock-1.6.0/gtest/src/gtest.cc:2162
#9  0x00000000008586b5 in testing::TestInfo::Run (this=0x2926f30) at gmock-1.6.0/gtest/src/gtest.cc:2338
#10 0x000000000085876d in testing::TestCase::Run (this=0x2925be0) at gmock-1.6.0/gtest/src/gtest.cc:2445
#11 0x000000000085b94d in testing::internal::UnitTestImpl::RunAllTests (this=0x2907f30) at gmock-1.6.0/gtest/src/gtest.cc:4237
#12 0x000000000085c345 in testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool> (object=<value optimized out>, 
    method=(bool (testing::internal::UnitTestImpl::*)(testing::internal::UnitTestImpl *)) 0x85b6d0 <testing::internal::UnitTestImpl::RunAllTests()>, 
    location=0xffffffffffffffff <Address 0xffffffffffffffff out of bounds>) at gmock-1.6.0/gtest/src/gtest.cc:2090
#13 0x000000000086426e in testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool> (object=0x2907f30, method=
    (bool (testing::internal::UnitTestImpl::*)(testing::internal::UnitTestImpl *)) 0x85b6d0 <testing::internal::UnitTestImpl::RunAllTests()>, 
---Type <return> to continue, or q <return> to quit---
    location=0x9319c0 "auxiliary test code (environments or event listeners)") at gmock-1.6.0/gtest/src/gtest.cc:2126
#14 0x0000000000857afa in testing::UnitTest::Run (this=<value optimized out>) at gmock-1.6.0/gtest/src/gtest.cc:3874
#15 0x000000000048c3a2 in main (argc=1, argv=0x7fc82c002020) at ../../src/tests/main.cpp:109

Is it flaky or always happening?

Do you happen to have the test output?

I've included the test output in the description. The bug looks like it's here:

libprocess: process-isolator(19)@10.35.255.108:49643 terminating due to basic_filebuf::underflow error reading the file 

Here's my hunch, this was running on a Linux box and the ProcessIsolator might do a proc::status on a pid which might have already terminated in which case doing the following could cause a C++ exception to get thrown:

file >> _ >> comm >> state >> ppid >> pgrp >> session >> tty_nr
       >> tpgid >> flags >> minflt >> cminflt >> majflt >> cmajflt
       >> utime >> stime >> cutime >> cstime >> priority >> nice
       >> num_threads >> itrealvalue >> starttime >> vsize >> rss
       >> rsslim >> startcode >> endcode >> startstack >> kstkeip
       >> signal >> blocked >> sigcatch >> wchan >> nswap >> cnswap

We should wrap all of this in a try/catch block or change these to individual reads.

It's possible another place a C++ exception could get thrown is within killtree since it does an os::shell and passes LOG(INFO) ...

I'm going to assign to Ben Mahler because he's in the process of cleaning up both the stout proc functions as well as killtree, both possible causes of this test failure, so I'll ask him to make these small changes as well.

This is probably fixed by https://issues.apache.org/jira/browse/MESOS-534
Tests ran fine: ./bin/mesos-tests.sh --gtest_filter="SlaveRecoveryTest/0.CleanupExecutor" --gtest_repeat=5000 --gtest_break_on_failure

Fixed in MESOS-534.

