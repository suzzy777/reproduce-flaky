I tried to do this, but hit a DCHECK while running exhaustive tests:
{code:java}
Log file created at: 2020/10/13 15:33:06
Running on machine: impala-ec2-centos74-m5-4xlarge-ondemand-012a.vpc.cloudera.com
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
F1013 15:33:06.568224 22912 query-state.cc:877] 914777cab6a164b8:dce62b1d00000000] Check failed: is_cancelled_.Load() == 1 (0 vs. 1) {code}
Mindump Stack:
{code}
Operating system: Linux
                  0.0.0 Linux 3.10.0-693.5.2.el7.x86_64 #1 SMP Fri Oct 20 20:32:50 UTC 2017 x86_64
CPU: amd64
     family 6 model 85 stepping 7
     1 CPU

GPU: UNKNOWN

Crash reason:  SIGABRT
Crash address: 0x7d100002913
Process uptime: not available

Thread 410 (crashed)
 0  libc-2.17.so + 0x351f7
    rax = 0x0000000000000000   rdx = 0x0000000000000006
    rcx = 0xffffffffffffffff   rbx = 0x0000000000000004
    rsi = 0x0000000000005980   rdi = 0x0000000000002913
    rbp = 0x00007f53dff7acc0   rsp = 0x00007f53dff7a948
     r8 = 0x0000000000000000    r9 = 0x00007f53dff7a7c0
    r10 = 0x0000000000000008   r11 = 0x0000000000000202
    r12 = 0x00000000076bb400   r13 = 0x0000000000000086
    r14 = 0x00000000076bb404   r15 = 0x00000000076b3a20
    rip = 0x00007f54b87021f7
    Found by: given as instruction pointer in context
 1  impalad!google::LogMessage::Flush() + 0x1eb
    rbp = 0x00007f53dff7ae10   rsp = 0x00007f53dff7acd0
    rip = 0x00000000051fec5b
    Found by: previous frame's frame pointer
 2  impalad!google::LogMessageFatal::~LogMessageFatal() + 0x9
    rbx = 0x0000000000000001   rbp = 0x00007f53dff7ae60
    rsp = 0x00007f53dff7ad70   r12 = 0x000000000d2ad680
    r13 = 0x00007f5458a88690   r14 = 0x000000002074e8a0
    r15 = 0x0000000000000034   rip = 0x0000000005202859
    Found by: call frame info
 3  impalad!impala::QueryState::MonitorFInstances() [query-state.cc : 877 + 0xc]
    rbx = 0x0000000000000001   rbp = 0x00007f53dff7ae60
    rsp = 0x00007f53dff7ad80   r12 = 0x000000000d2ad680
    r13 = 0x00007f5458a88690   r14 = 0x000000002074e8a0
    r15 = 0x0000000000000034   rip = 0x000000000227b5a0
    Found by: call frame info
 4  impalad!impala::QueryExecMgr::ExecuteQueryHelper(impala::QueryState*) [query-exec-mgr.cc : 162 + 0xf]
    rbx = 0x0000000013e76000   rbp = 0x00007f53dff7b6b0
    rsp = 0x00007f53dff7ae70   r12 = 0x000000000d2ad680
    r13 = 0x00007f5458a88690   r14 = 0x000000002074e8a0
    r15 = 0x0000000000000034   rip = 0x000000000226ad41
    Found by: call frame info
 5  impalad!boost::_mfi::mf1<void, impala::QueryExecMgr, impala::QueryState*>::operator()(impala::QueryExecMgr*, impala::QueryState*) const [mem_fn_template.hpp : 165 + 0xc]
    rbx = 0x0000000013e76000   rbp = 0x00007f53dff7b6e0
    rsp = 0x00007f53dff7b6c0   r12 = 0x000000000d2ad680
    r13 = 0x00007f5458a88690   r14 = 0x000000002074e8a0
    r15 = 0x0000000000000034   rip = 0x0000000002273655
    Found by: call frame info
 6  impalad!void boost::_bi::list2<boost::_bi::value<impala::QueryExecMgr*>, boost::_bi::value<impala::QueryState*> >::operator()<boost::_mfi::mf1<void, impala::QueryExecMgr, impala::QueryState*>, boost::_bi::list0>(boost::_bi::type<void>, boost::_mfi::mf1<void, impala::QueryExecMgr, impala::QueryState*>&, boost::_bi::list0&, int) [bind.hpp : 319 + 0x52]
    rbx = 0x0000000013e76000   rbp = 0x00007f53dff7b720
    rsp = 0x00007f53dff7b6f0   r12 = 0x000000000d2ad680
    r13 = 0x00007f5458a88690   r14 = 0x000000002074e8a0
    r15 = 0x0000000000000034   rip = 0x0000000002272f1e
    Found by: call frame info
 7  impalad!boost::_bi::bind_t<void, boost::_mfi::mf1<void, impala::QueryExecMgr, impala::QueryState*>, boost::_bi::list2<boost::_bi::value<impala::QueryExecMgr*>, boost::_bi::value<impala::QueryState*> > >::operator()() [bind.hpp : 1222 + 0x22]
    rbx = 0x0000000000005980   rbp = 0x00007f53dff7b770
    rsp = 0x00007f53dff7b730   r12 = 0x00000000086e72c0
    r13 = 0x00007f5458a88690   r14 = 0x000000002074e8a0
    r15 = 0x0000000000000034   rip = 0x0000000002272525
    Found by: call frame info
 8  impalad!boost::detail::function::void_function_obj_invoker0<boost::_bi::bind_t<void, boost::_mfi::mf1<void, impala::QueryExecMgr, impala::QueryState*>, boost::_bi::list2<boost::_bi::value<impala::QueryExecMgr*>, boost::_bi::value<impala::QueryState*> > >, void>::invoke(boost::detail::function::function_buffer&) [function_template.hpp : 159 + 0xc]
    rbx = 0x0000000000005980   rbp = 0x00007f53dff7b7a0
    rsp = 0x00007f53dff7b780   r12 = 0x00000000086e72c0
    r13 = 0x00007f5458a88690   r14 = 0x000000002074e8a0
    r15 = 0x0000000000000034   rip = 0x000000000227193f
    Found by: call frame info
 9  impalad!boost::function0<void>::operator()() const [function_template.hpp : 770 + 0x1d]
    rbx = 0x0000000000005980   rbp = 0x00007f53dff7b7e0
    rsp = 0x00007f53dff7b7b0   r12 = 0x00000000086e72c0
    r13 = 0x00007f5458a88690   r14 = 0x000000002074e8a0
    r15 = 0x0000000000000034   rip = 0x0000000002137600
    Found by: call frame info
10  impalad!impala::Thread::SuperviseThread(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, boost::function<void ()>, impala::ThreadDebugInfo const*, impala::Promise<long, (impala::PromiseMode)0>*) [thread.cc : 360 + 0xf]
    rbx = 0x0000000000005980   rbp = 0x00007f53dff7bb70
    rsp = 0x00007f53dff7b7f0   r12 = 0x00000000086e72c0
    r13 = 0x00007f5458a88690   r14 = 0x000000002074e8a0
    r15 = 0x0000000000000034   rip = 0x0000000002715cf2
    Found by: call frame info
11  impalad!void boost::_bi::list5<boost::_bi::value<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, boost::_bi::value<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, boost::_bi::value<boost::function<void ()> >, boost::_bi::value<impala::ThreadDebugInfo*>, boost::_bi::value<impala::Promise<long, (impala::PromiseMode)0>*> >::operator()<void (*)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, boost::function<void ()>, impala::ThreadDebugInfo const*, impala::Promise<long, (impala::PromiseMode)0>*), boost::_bi::list0>(boost::_bi::type<void>, void (*&)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, boost::function<void ()>, impala::ThreadDebugInfo const*, impala::Promise<long, (impala::PromiseMode)0>*), boost::_bi::list0&, int) [bind.hpp : 531 + 0x15]
    rbx = 0x00000000027159ac   rbp = 0x00007f53dff7bbe0
    rsp = 0x00007f53dff7bb80   r12 = 0x00007f5458a89840
    r13 = 0x00007f5458a88690   r14 = 0x000000002074e8a0
    r15 = 0x0000000000000034   rip = 0x000000000271dc8f
    Found by: call frame info
12  impalad!boost::_bi::bind_t<void, void (*)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, boost::function<void ()>, impala::ThreadDebugInfo const*, impala::Promise<long, (impala::PromiseMode)0>*), boost::_bi::list5<boost::_bi::value<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, boost::_bi::value<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, boost::_bi::value<boost::function<void ()> >, boost::_bi::value<impala::ThreadDebugInfo*>, boost::_bi::value<impala::Promise<long, (impala::PromiseMode)0>*> > >::operator()() [bind.hpp : 1222 + 0x22]
    rbx = 0x000000002074e6c0   rbp = 0x00007f53dff7bc30
    rsp = 0x00007f53dff7bbf0   r12 = 0x0000000000000000
    r13 = 0x00007f53dff7c9c0   r14 = 0x00007f53dff7c700
    r15 = 0x0000000000000034   rip = 0x000000000271dbb3
    Found by: call frame info
13  impalad!boost::detail::thread_data<boost::_bi::bind_t<void, void (*)(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, boost::function<void ()>, impala::ThreadDebugInfo const*, impala::Promise<long, (impala::PromiseMode)0>*), boost::_bi::list5<boost::_bi::value<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, boost::_bi::value<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, boost::_bi::value<boost::function<void ()> >, boost::_bi::value<impala::ThreadDebugInfo*>, boost::_bi::value<impala::Promise<long, (impala::PromiseMode)0>*> > > >::run() [thread.hpp : 116 + 0x12]
    rbx = 0x000000002074e6c0   rbp = 0x00007f53dff7bc50
    rsp = 0x00007f53dff7bc40   r12 = 0x0000000000000000
    r13 = 0x00007f53dff7c9c0   r14 = 0x00007f53dff7c700
    r15 = 0x0000000000000034   rip = 0x000000000271db74
    Found by: call frame info
{code}

Probably not going to work on this anytime soon, but whoever picks this up should confirm this DCHECK is resolved.

The DCHECK failure seems IMPALA-10259.

Commit 49ac55fb691e280ccf061a3fa067aff938614af9 in impala's branch refs/heads/master from Riza Suminto
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=49ac55f ]

IMPALA-9856: Enable result spooling by default.

Result spooling has been relatively stable since it was introduced, and
it has several benefits described in IMPALA-8656. This patch enable
result spooling (SPOOL_QUERY_RESULTS) query options by default.

Furthermore, some tests need to be adjusted to account for result
spooling by default. The following are the adjustment categories and
list of tests that fall under such category.

Change in assertions:
PlannerTest#testAcidTableScans
PlannerTest#testBloomFilterAssignment
PlannerTest#testConstantFolding
PlannerTest#testFkPkJoinDetection
PlannerTest#testFkPkJoinDetectionWithHDFSNumRowsEstDisabled
PlannerTest#testKuduSelectivity
PlannerTest#testMaxRowSize
PlannerTest#testMinMaxRuntimeFilters
PlannerTest#testMinMaxRuntimeFiltersWithHDFSNumRowsEstDisabled
PlannerTest#testMtDopValidation
PlannerTest#testParquetFiltering
PlannerTest#testParquetFilteringDisabled
PlannerTest#testPartitionPruning
PlannerTest#testPreaggBytesLimit
PlannerTest#testResourceRequirements
PlannerTest#testRuntimeFilterQueryOptions
PlannerTest#testSortExprMaterialization
PlannerTest#testSpillableBufferSizing
PlannerTest#testTableSample
PlannerTest#testTpch
PlannerTest#testKuduTpch
PlannerTest#testTpchNested
PlannerTest#testUnion
TpcdsPlannerTest
custom_cluster/test_admission_controller.py::TestAdmissionController::test_dedicated_coordinator_planner_estimates
custom_cluster/test_admission_controller.py::TestAdmissionController::test_memory_rejection
custom_cluster/test_admission_controller.py::TestAdmissionController::test_pool_mem_limit_configs
metadata/test_explain.py::TestExplain::test_explain_level2
metadata/test_explain.py::TestExplain::test_explain_level3
metadata/test_stats_extrapolation.py::TestStatsExtrapolation::test_stats_extrapolation

Increase BUFFER_POOL_LIMIT:
query_test/test_queries.py::TestQueries::test_analytic_fns
query_test/test_runtime_filters.py::TestRuntimeRowFilters::test_row_filter_reservation
query_test/test_sort.py::TestQueryFullSort::test_multiple_mem_limits_full_output
query_test/test_spilling.py::TestSpillingBroadcastJoins::test_spilling_broadcast_joins
query_test/test_spilling.py::TestSpillingDebugActionDimensions::test_spilling_aggs
query_test/test_spilling.py::TestSpillingDebugActionDimensions::test_spilling_regression_exhaustive
query_test/test_udfs.py::TestUdfExecution::test_mem_limits

Increase MEM_LIMIT:
query_test/test_mem_usage_scaling.py::TestExchangeMemUsage::test_exchange_mem_usage_scaling
query_test/test_mem_usage_scaling.py::TestScanMemLimit::test_hdfs_scanner_thread_mem_scaling

Increase MAX_ROW_SIZE:
custom_cluster/test_parquet_max_page_header.py::TestParquetMaxPageHeader::test_large_page_header_config
query_test/test_insert.py::TestInsertQueries::test_insert_large_string
query_test/test_query_mem_limit.py::TestQueryMemLimit::test_mem_limit
query_test/test_scanners.py::TestTextSplitDelimiters::test_text_split_across_buffers_delimiter
query_test/test_scanners.py::TestWideRow::test_wide_row

Disable result spooling to maintain assertion:
custom_cluster/test_admission_controller.py::TestAdmissionController::test_set_request_pool
custom_cluster/test_admission_controller.py::TestAdmissionController::test_timeout_reason_host_memory
custom_cluster/test_admission_controller.py::TestAdmissionController::test_timeout_reason_pool_memory
custom_cluster/test_admission_controller.py::TestAdmissionController::test_queue_reasons_memory
custom_cluster/test_admission_controller.py::TestAdmissionController::test_pool_config_change_while_queued
custom_cluster/test_query_retries.py::TestQueryRetries::test_retry_fetched_rows
custom_cluster/test_query_retries.py::TestQueryRetries::test_retry_finished_query
custom_cluster/test_scratch_disk.py::TestScratchDir::test_no_dirs
custom_cluster/test_scratch_disk.py::TestScratchDir::test_non_existing_dirs
custom_cluster/test_scratch_disk.py::TestScratchDir::test_non_writable_dirs
query_test/test_insert.py::TestInsertQueries::test_insert_large_string (the last query only)
query_test/test_kudu.py::TestKuduMemLimits::test_low_mem_limit_low_selectivity_scan
query_test/test_mem_usage_scaling.py::TestScanMemLimit::test_kudu_scan_mem_usage
query_test/test_queries.py::TestQueriesParquetTables::test_very_large_strings
query_test/test_query_mem_limit.py::TestCodegenMemLimit::test_codegen_mem_limit
shell/test_shell_client.py::TestShellClient::test_fetch_size

Testing:
- Pass exhaustive tests.

Change-Id: I9e360c1428676d8f3fab5d95efee18aca085eba4
Reviewed-on: http://gerrit.cloudera.org:8080/16755
Reviewed-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Commit 47219ec3663fa8e27ea16b826425b139c94580da in impala's branch refs/heads/master from Riza Suminto
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=47219ec ]

IMPALA-10565: Adjust result spooling memory based on scratch_limit

IMPALA-9856 enables result spooling by default. Result spooling depends
on the ability to spill its entire BufferedTupleStream to disk once it
hits maximum memory reservation. However, if the query option
scratch_limit is set lower than max_spilled_result_spooling_mem, the
query might fail in the middle of execution due to insufficient scratch
space. This patch adds planner change to consider scratch_limit and
scratch_dirs query option when computing resource used by result
spooling. The algorithm is as follow:

* If scratch_dirs is empty or scratch_limit < minMemReservationBytes
  required to use BufferedPlanRootSink, we set spool_query_results to
  false and fallback to use BlockingPlanRootSink.

* If scratch_limit > minMemReservationBytes but still fairly low, we
  lower the max_result_spooling_mem (default is 100MB) and
  max_spilled_result_spooling_mem (default is 1GB) to fit scratch_limit.

* if scratch_limit > max_spilled_result_spooling_mem, do nothing.

Testing:
- Add TestScratchLimit::test_result_spooling_and_varying_scratch_limit
- Verify that spool_query_results query option is disabled in
  TestScratchDir::test_no_dirs
- Pass exhaustive tests.

Change-Id: I541f46e6911694e14c0fc25be1a6982fd929d3a9
Reviewed-on: http://gerrit.cloudera.org:8080/17166
Reviewed-by: Aman Sinha <amsinha@cloudera.com>
Tested-by: Aman Sinha <amsinha@cloudera.com>


Commit 37ec96e72af782900760e24eb520dd7904c3d632 in impala's branch refs/heads/master from Riza Suminto
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=37ec96e ]

IMPALA-10559: Fix flakiness in TestScratchLimit.

TestScratchLimit has been flaky in ubuntu-16.04-dockerised-tests
environment since results spooling is enabled by default in IMPALA-9856.
A combination of result spooling, sort query, and low buffer_pool_limit
in TestScratchLimit::test_with_unlimited_scratch_limit seems to reveal a
memory reservation bug in BufferedTutpleStream. This patch disables
result spooling for tests under TestScratchLimit until the underlying
bug is found. We will investigate the bug in a separate JIRA.

Testing:
- Disable result spooling in all tests of TestScratchLimit before
  IMPALA-9856 gets in.
- Run and pass TestScratchLimit locally.

Change-Id: I68736d6bfb0001423fd138000670ac60b2117fbe
Reviewed-on: http://gerrit.cloudera.org:8080/17182
Reviewed-by: Quanlong Huang <huangquanlong@gmail.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Commit 37ec96e72af782900760e24eb520dd7904c3d632 in impala's branch refs/heads/master from Riza Suminto
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=37ec96e ]

IMPALA-10559: Fix flakiness in TestScratchLimit.

TestScratchLimit has been flaky in ubuntu-16.04-dockerised-tests
environment since results spooling is enabled by default in IMPALA-9856.
A combination of result spooling, sort query, and low buffer_pool_limit
in TestScratchLimit::test_with_unlimited_scratch_limit seems to reveal a
memory reservation bug in BufferedTutpleStream. This patch disables
result spooling for tests under TestScratchLimit until the underlying
bug is found. We will investigate the bug in a separate JIRA.

Testing:
- Disable result spooling in all tests of TestScratchLimit before
  IMPALA-9856 gets in.
- Run and pass TestScratchLimit locally.

Change-Id: I68736d6bfb0001423fd138000670ac60b2117fbe
Reviewed-on: http://gerrit.cloudera.org:8080/17182
Reviewed-by: Quanlong Huang <huangquanlong@gmail.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Commit 91d2ab2116293b8f45afd02d029d47233877c538 in impala's branch refs/heads/master from Riza Suminto
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=91d2ab2 ]

IMPALA-10584: Defer advancing read page if stream only has 2 pages.

TestScratchLimit::test_with_unlimited_scratch_limit has been
intermittently crashing in ubuntu-16.04-dockerised-tests environment
after result spooling is enabled by default in IMPALA-9856. DCHECK
violation occurs in ReservationTracker::CheckConsistency() due to
BufferedTupleStream wrongly tries to reclaim memory reservation while
unpinning the stream.

For this bug to surface, all of the following needs to happen:
- Stream is in pinned mode.
- There are only 2 pages in the stream: 1 read and 1 write.
- Stream can not increase reservation anymore either due to memory
  pressure or low buffer/memory limit.
- The stream read page has been fully read and is attached to output
  RowBatch. But the output RowBatch has not cleaned up yet.
- BufferedTupleStream::UnpinStream is invoked.

The memory accounting bug happens because UnpinStream proceeds to
NextReadPage where the read page buffer was mistakenly assumed as
released. default_page_len_ bytes were added into
write_page_reservation_ and subsequently violates the total memory
reservation.

This patch fixes the bug by deferring advancement of the read iterator
in UnpinStream if the read page is attached to output RowBatch and there
are only 2 pages in the stream. This is OK because after UnpinStream
finished, the stream is now in unpinned mode and has_read_write_page is
false. The next AddRow operation is then allowed to unpin the previous
write page first before reusing the reservation to allocate a new write
page. The next GetNext call will be responsible to advance the read
page.

Testing:
- Add be test DeferAdvancingReadPage.
- Loop the TestScratchLimit::test_with_unlimited_scratch_limit in my
  local dev machine and verify that each test passed without triggering
  the DCHECK violation.
- Reenable result spooling in TestScratchLimit that was disabled in
  IMPALA-10559.
- Pass core tests.

Change-Id: I16137b6e423f190f60c3115a06ccd0f77e9f585a
Reviewed-on: http://gerrit.cloudera.org:8080/17195
Reviewed-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Commit 8b46d00f641abdb89d3d22de5c9a5d7044075893 in impala's branch refs/heads/master from Riza Suminto
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=8b46d00 ]

IMPALA-10611: Fix flakiness in test_wide_row

test_wide_row has been intermittently failed with "Failed to allocate
row batch" error message. This is due to recent change in IMPALA-9856
that add query option max_row_size=10MB without raising the mem_limit.
This patch fix the flakiness by increasing the mem_limit from 100 MB to
132 MB to account for 32 MB reservation needed by BufferedPlanRootSink.

Testing:
- Loop the test in local dev machine.

Change-Id: Ie1f0b7d4d6b3a875d9b408f057d46fdbdbdf2a34
Reviewed-on: http://gerrit.cloudera.org:8080/17324
Reviewed-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Commit 91d2ab2116293b8f45afd02d029d47233877c538 in impala's branch refs/heads/dependabot/pip/infra/python/deps/py-1.10.0 from Riza Suminto
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=91d2ab2 ]

IMPALA-10584: Defer advancing read page if stream only has 2 pages.

TestScratchLimit::test_with_unlimited_scratch_limit has been
intermittently crashing in ubuntu-16.04-dockerised-tests environment
after result spooling is enabled by default in IMPALA-9856. DCHECK
violation occurs in ReservationTracker::CheckConsistency() due to
BufferedTupleStream wrongly tries to reclaim memory reservation while
unpinning the stream.

For this bug to surface, all of the following needs to happen:
- Stream is in pinned mode.
- There are only 2 pages in the stream: 1 read and 1 write.
- Stream can not increase reservation anymore either due to memory
  pressure or low buffer/memory limit.
- The stream read page has been fully read and is attached to output
  RowBatch. But the output RowBatch has not cleaned up yet.
- BufferedTupleStream::UnpinStream is invoked.

The memory accounting bug happens because UnpinStream proceeds to
NextReadPage where the read page buffer was mistakenly assumed as
released. default_page_len_ bytes were added into
write_page_reservation_ and subsequently violates the total memory
reservation.

This patch fixes the bug by deferring advancement of the read iterator
in UnpinStream if the read page is attached to output RowBatch and there
are only 2 pages in the stream. This is OK because after UnpinStream
finished, the stream is now in unpinned mode and has_read_write_page is
false. The next AddRow operation is then allowed to unpin the previous
write page first before reusing the reservation to allocate a new write
page. The next GetNext call will be responsible to advance the read
page.

Testing:
- Add be test DeferAdvancingReadPage.
- Loop the TestScratchLimit::test_with_unlimited_scratch_limit in my
  local dev machine and verify that each test passed without triggering
  the DCHECK violation.
- Reenable result spooling in TestScratchLimit that was disabled in
  IMPALA-10559.
- Pass core tests.

Change-Id: I16137b6e423f190f60c3115a06ccd0f77e9f585a
Reviewed-on: http://gerrit.cloudera.org:8080/17195
Reviewed-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Commit 8b46d00f641abdb89d3d22de5c9a5d7044075893 in impala's branch refs/heads/dependabot/pip/infra/python/deps/py-1.10.0 from Riza Suminto
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=8b46d00 ]

IMPALA-10611: Fix flakiness in test_wide_row

test_wide_row has been intermittently failed with "Failed to allocate
row batch" error message. This is due to recent change in IMPALA-9856
that add query option max_row_size=10MB without raising the mem_limit.
This patch fix the flakiness by increasing the mem_limit from 100 MB to
132 MB to account for 32 MB reservation needed by BufferedPlanRootSink.

Testing:
- Loop the test in local dev machine.

Change-Id: Ie1f0b7d4d6b3a875d9b408f057d46fdbdbdf2a34
Reviewed-on: http://gerrit.cloudera.org:8080/17324
Reviewed-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Commit df0a014e364854111368cf5756c4a01b3fb423d6 in impala's branch refs/heads/master from wzhou-code
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=df0a014e3 ]

IMPALA-10927: Deflaky TestFetchAndSpooling.test_rows_sent_counters

IMPALA-8957 fixed the flakiness for test by adding a delay via
DEBUG_ACTION BPRS_BEFORE_ADD_ROWS in BlockingPlanRootSink::Send().
test_rows_sent_counters uses DEBUG_ACTION BPRS_BEFORE_ADD_BATCH when
spool_query_results is on, and uses BPRS_BEFORE_ADD_ROWS when
spool_query_results is off with assumption that result spooling is
disabled by default.

IMPALA-9856 enabled result spooling by default.
Following two issues were introduced for the test when result spooling
was enabled by default.
1) spool_query_results as false is not covered in the test since
extended dimension is added with spool_query_results as true.
2) Since the test uses BPRS_BEFORE_ADD_ROWS if spool_query_results is
not specified as true, it makes DEBUG_ACTION BPRS_BEFORE_ADD_ROWS to be
used for spool_query_results as true. This causes the test flaky since
no delay to be added in BufferedPlanRootSink::Send().

There is another bug in the test. It uses bool() to convert string to
boolean value, but the function returns true for any non empty string.

This patch changed the extended dimension setting for
spool_query_results as false, and made the test to use the right
DEBUG_ACTION for spool_query_results as true and false.
Also reverted the previous fixing which disabled the test for S3
testing environment.

Testing:
  - Ran the test more than 10000 times without failure on Jenkins.

Change-Id: I790bbe1072357caf8ee11bb37644cf29dc8bea0f
Reviewed-on: http://gerrit.cloudera.org:8080/18671
Reviewed-by: Quanlong Huang <huangquanlong@gmail.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Commit df0a014e364854111368cf5756c4a01b3fb423d6 in impala's branch refs/heads/dependabot/pip/infra/python/deps/urllib3-1.26.5 from wzhou-code
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=df0a014e3 ]

IMPALA-10927: Deflaky TestFetchAndSpooling.test_rows_sent_counters

IMPALA-8957 fixed the flakiness for test by adding a delay via
DEBUG_ACTION BPRS_BEFORE_ADD_ROWS in BlockingPlanRootSink::Send().
test_rows_sent_counters uses DEBUG_ACTION BPRS_BEFORE_ADD_BATCH when
spool_query_results is on, and uses BPRS_BEFORE_ADD_ROWS when
spool_query_results is off with assumption that result spooling is
disabled by default.

IMPALA-9856 enabled result spooling by default.
Following two issues were introduced for the test when result spooling
was enabled by default.
1) spool_query_results as false is not covered in the test since
extended dimension is added with spool_query_results as true.
2) Since the test uses BPRS_BEFORE_ADD_ROWS if spool_query_results is
not specified as true, it makes DEBUG_ACTION BPRS_BEFORE_ADD_ROWS to be
used for spool_query_results as true. This causes the test flaky since
no delay to be added in BufferedPlanRootSink::Send().

There is another bug in the test. It uses bool() to convert string to
boolean value, but the function returns true for any non empty string.

This patch changed the extended dimension setting for
spool_query_results as false, and made the test to use the right
DEBUG_ACTION for spool_query_results as true and false.
Also reverted the previous fixing which disabled the test for S3
testing environment.

Testing:
  - Ran the test more than 10000 times without failure on Jenkins.

Change-Id: I790bbe1072357caf8ee11bb37644cf29dc8bea0f
Reviewed-on: http://gerrit.cloudera.org:8080/18671
Reviewed-by: Quanlong Huang <huangquanlong@gmail.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


