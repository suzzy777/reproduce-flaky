Thanks, I'll fix it asap

if this is very often, we can ignore this test for now, I'll fix it tomorrow.

[~davies]
I got 2 solutions for this problem:
1. Let this function back by something like a lazy val, but we need to put a flag for each query indicating whether it has been evaluated.
2. Substitute this function with constants at analysis phrase. This would be a little different from hive, since hive get the current timestamp at the beginning of evaluation. We can also find a way to mark multiple appearance as a single object at analysis phrase.

cc [~marmbrus]

This just looks like a bad test to me.  Can we instead get the current time using another method and then make sure the result is within some reasonable bound (i.e. +/- 1 minute)?

[~marmbrus]we have test for that case. The flaky test is to prove multi entries of the same function within one query would return the same value.
Actually, as this function is always foldable, at optimization phrase we will get all values, so the gap would not be too large.

p.s: hive's definition for current_timestamp(): Returns the current timestamp at the start of query evaluation (as of Hive 1.2.0). All calls of current_timestamp within the same query return the same value.

If that's the semantic we want then I think this will have to be evaluated
as a new rule in the prepare for execution phase.



User 'yhuai' has created a pull request for this issue:
https://github.com/apache/spark/pull/7727

I submitted a PR to ignore this test for now (https://github.com/apache/spark/pull/7727/files). BTW, this test has been moved to {{DateFunctionsSuite}}.

I talked with Michael more offline. Here's the resolution: Add a rule in analyzer to replace CurrentDate/CurrentTimestamp with a literal.

The only problem I can think of with that is explain won't print as nicely (it prints a literal rather than a date).


User 'rxin' has created a pull request for this issue:
https://github.com/apache/spark/pull/9753

