Here's a draft patch (no tests yet) for feedback.
This adds a parameter "splitByPrefix" to SPLITSHARD.  When the overseer sees this parameter, it sends an additional SPLIT request with the "getRanges" parameter set.  This causes SPLIT (SplitOp.java) to calculate the ranges based on the prefix field "id_prefix" and return the recommended split string in the response in the "ranges" parameter.  SPLITSHARD in the overseer then proceeds as if that ranges string had been passed in by the user.

"id_prefix" is currently populated via a copyField in the schema:
{code}
    <!-- needed for splitByPrefix -->
  <field name="id_prefix" type="composite_id_prefix" indexed="true" stored="false"/>
  <copyField source="id" dest="id_prefix"/>
  <fieldtype name="composite_id_prefix" class="solr.TextField">
    <analyzer>
      <tokenizer class="solr.PatternTokenizerFactory" pattern=".*!" group="0"/>
    </analyzer>
  </fieldtype>
{code}

The prefix field is currently always "id_prefix" (convention / implicit).  Not sure if it adds value to make it configurable via a "field" parameter on the SPLITSHARD command.


Final patch attached, I plan on committing soon. Some implementation notes:
- this only takes into account 2-level prefix keys, not tri-level yet (that can be a followup JIRA)
- we currently only split into 2 ranges (again, can be extended in a followup JIRA)
- if "id_prefix" has no values/data then no "ranges" split recommendation is returned and the split proceeds as if splitByPrefix had not been specified.
  - in the future we could use the "id" field as a slower version
- Split within a prefix is only done if there are not multiple prefix buckets in the shard (i.e. no allowedSizeDifference implemented in this issue)

Commit c5cabf1e039d44c04cfe944f2a961c2a8b565df3 in lucene-solr's branch refs/heads/master from Yonik Seeley
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=c5cabf1 ]

SOLR-13399: SPLITSHARD splitByPrefix for compositeId


Commit cab2db84b23bfe5b5f178ab76020000bd74891f7 in lucene-solr's branch refs/heads/branch_8x from Yonik Seeley
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=cab2db8 ]

SOLR-13399: SPLITSHARD splitByPrefix for compositeId



Since the new SplitByPrefixTest was committed as part of this jira, it has fail a little over 5% of the time it's been run by jenkins -- on both master and branch_8x.

All of these failures occur at the same {{assertTrue(slice1 != slice2)}} call (SplitByPrefixTest.java:222) and all of the seeds i've tested appear to reproduce reliably...


on master...

{noformat}
hossman@tray:~/lucene/dev/solr/core [j11] [master] $ ant test -Dtests.dups=10 -Dtests.failfast=no  -Dtestcase=SplitByPrefixTest -Dtests.method=doTest -Dtests.seed=4A09C6784BF1B28F -Dtests.multiplier=2 -Dtests.slow=true -Dtests.locale=ar-YE -Dtests.timezone=MET -Dtests.asserts=true -Dtests.file.encoding=UTF-8
...
   [junit4] Tests summary: 10 suites, 10 tests, 10 failures
...
hossman@tray:~/lucene/dev/solr/core [j11] [master] $ ant test -Dtests.dups=10 -Dtests.failfast=no -Dtestcase=SplitByPrefixTest -Dtests.method=doTest -Dtests.seed=75D9C45CAC5D0D22 -Dtests.slow=true -Dtests.locale=yo-BJ -Dtests.timezone=Africa/Porto-Novo -Dtests.asserts=true -Dtests.file.encoding=UTF-8
...
   [junit4] Tests summary: 10 suites, 10 tests, 10 failures
...
{noformat}

On branch_8x...

{noformat}
hossman@tray:~/lucene/dev/solr/core [j8] [branch_8x] $ ant test -Dtests.dups=10 -Dtests.failfast=no -Dtestcase=SplitByPrefixTest -Dtests.method=doTest -Dtests.seed=B980178A30F46BB3 -Dtests.multiplier=2 -Dtests.slow=true -Dtests.locale=ko-KR -Dtests.timezone=Africa/Abidjan -Dtests.asserts=true -Dtests.file.encoding=UTF-8
...
   [junit4] Tests summary: 10 suites, 10 tests, 10 failures
...
{noformat}


Also: it's really not cool to be adding new end user features/params w/o at least adding a one line summary of the new param to the relevant ref-guide page.

Thanks for the heads up, I'll investigate.

bq. Also: it's really not cool to be adding new end user features/params w/o at least adding a one line summary of the new param to the relevant ref-guide page.

Sure, I had planned on doing so before 8.3 (unless you mean we've generally moved to doing doc it as part of the initial commit?  If so, I missed that.)

Commit c0da27173c318f3a9d77f5f9e43a25de3af5a272 in lucene-solr's branch refs/heads/master from Yonik Seeley
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=c0da271 ]

SOLR-13399: annotate flaky test


Commit d842b45727bf65443c10f82968791c124aa5f5a5 in lucene-solr's branch refs/heads/branch_8x from Yonik Seeley
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=d842b45 ]

SOLR-13399: annotate flaky test


bq. (unless you mean we've generally moved to doing doc it as part of the initial commit? If so, I missed that.)

yes, that's the entire value add of keeping the ref-guide in the same repo as the source, and having it as part of the main build w/precommit.

we've been trying to move to having the "code release process" and the "ref-guide release process" be a single process, with a single vote -- and we're getting close -- but the main hold up is people who add features w/o docs and then forcing a scramble during the release process to back fill docs on new features.

OK, figured out the issue...
It turns out that if you have foo!, foo!bar! will normally not nest under it.  The number of bits used for the first part of the hash is dynamic depending on the number of levels in the composite hash ID.  That's unfortunate for a number of reasons.  It also breaks the initial bi-level hash that guaranteed that you could just add a prefix to any document id without any escaping (i.e. if your ID happens to contain "!", it can cause the document hash to fall outside of the parent hash prefix.)

It looks like is working as designed (according to SOLR-5320), but it was certainly surprising since it prevents hash routing from working out-of-the-box in conjunction with tri-level ids without explicitly specifying bits with the "/" notation.


Attaching patch to fix the test bug by explicitly forcing the number of bits in the test when using tri-level ids "foo/16!bar!doc1"

Commit b6c26f6c16130fd7ec9216b4f8798dc22aacb534 in lucene-solr's branch refs/heads/master from Yonik Seeley
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=b6c26f6 ]

SOLR-13399: fix splitByPrefix test


Commit 5b76555dace0a78ba219813be1740d5e14c9c0c7 in lucene-solr's branch refs/heads/branch_8x from Yonik Seeley
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=5b76555 ]

SOLR-13399: fix splitByPrefix test


Here's an enhancement that uses the "id" field for histogram generation if there is nothing found in the "id_prefix" field.


Commit 19ddcfd282f3b9eccc50da83653674e510229960 in lucene-solr's branch refs/heads/master from Yonik Seeley
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=19ddcfd2 ]

SOLR-13399: ability to use id field for compositeId histogram


Commit d8f99a9986835507d19b70edf0ff280416104788 in lucene-solr's branch refs/heads/branch_8x from Yonik Seeley
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=d8f99a9 ]

SOLR-13399: ability to use id field for compositeId histogram



git bisect has identified 19ddcfd282f3b9eccc50da83653674e510229960 as the cause of recent (reproducible) jenkins test failures in ShardSplitTest...

https://builds.apache.org/view/L/view/Lucene/job/Lucene-Solr-NightlyTests-8.x/174/
https://builds.apache.org/view/L/view/Lucene/job/Lucene-Solr-repro/3507/

(Jenkins found the failures on branch_8x, but i was able to reproduce the same exact seed on master, and used that branch for bisecting.  Attaching logs from my local master run.)

{noformat}
ant test -Dtestcase=ShardSplitTest -Dtests.method=test -Dtests.seed=AE04B5C9BA6E9A4 -Dtests.multiplier=2 -Dtests.nightly=true -Dtests.slow=true -Dtests.badapples=true  -Dtests.locale=sr-Latn -Dtests.timezone=Etc/GMT-11 -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1
{noformat}

{noformat}
   [junit4] FAILURE  273s J2 | ShardSplitTest.test <<<
   [junit4]    > Throwable #1: java.lang.AssertionError: Wrong doc count on shard1_0. See SOLR-5309 expected:<257> but was:<316>
   [junit4]    >        at __randomizedtesting.SeedInfo.seed([AE04B5C9BA6E9A4:82B47486355A845C]:0)
   [junit4]    >        at org.apache.solr.cloud.api.collections.ShardSplitTest.checkDocCountsAndShardStates(ShardSplitTest.java:1002)
   [junit4]    >        at org.apache.solr.cloud.api.collections.ShardSplitTest.splitByUniqueKeyTest(ShardSplitTest.java:794)
   [junit4]    >        at org.apache.solr.cloud.api.collections.ShardSplitTest.test(ShardSplitTest.java:111)
   [junit4]    >        at org.apache.solr.BaseDistributedSearchTestCase$ShardsRepeatRule$ShardsFixedStatement.callStatement(BaseDistributedSearchTestCase.java:1082)
   [junit4]    >        at org.apache.solr.BaseDistributedSearchTestCase$ShardsRepeatRule$ShardsStatement.evaluate(BaseDistributedSearchTestCase.java:1054)
   [junit4]    >        at java.lang.Thread.run(Thread.java:748)
{noformat}


Weird... I don't know how that commit could have caused a failure in ShardSplitTest, but I'll investigate.

i would assume it's related to the (numSubShards) changes in SplitShardCmd ?

At first glance, that code path looks like it's specific to SPLIT_BY_PREFIX, but apparently your previous commit has it defaulting to "true" ? (see SplitShardCmd.java L212)
{noformat}
$ git show 19ddcfd282f3b9eccc50da83653674e510229960 -- core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd.java | cat
commit 19ddcfd282f3b9eccc50da83653674e510229960
Author: yonik <yonik@apache.org>
Date:   Tue Aug 6 14:09:54 2019 -0400

    SOLR-13399: ability to use id field for compositeId histogram

diff --git a/solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd.java b/solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd.java
index 4d623be..6c5921e 100644
--- a/solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd.java
+++ b/solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd.java
@@ -212,16 +212,14 @@ public class SplitShardCmd implements OverseerCollectionMessageHandler.Cmd {
       if (message.getBool(CommonAdminParams.SPLIT_BY_PREFIX, true)) {
         t = timings.sub("getRanges");
 
-        log.info("Requesting split ranges from replica " + parentShardLeader.getName() + " as part of slice " + slice + " of collection "
-            + collectionName + " on " + parentShardLeader);
-
         ModifiableSolrParams params = new ModifiableSolrParams();
         params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());
         params.set(CoreAdminParams.GET_RANGES, "true");
         params.set(CommonAdminParams.SPLIT_METHOD, splitMethod.toLower());
         params.set(CoreAdminParams.CORE, parentShardLeader.getStr("core"));
-        int numSubShards = message.getInt(NUM_SUB_SHARDS, DEFAULT_NUM_SUB_SHARDS);
-        params.set(NUM_SUB_SHARDS, Integer.toString(numSubShards));
+        // Only 2 is currently supported
+        // int numSubShards = message.getInt(NUM_SUB_SHARDS, DEFAULT_NUM_SUB_SHARDS);
+        // params.set(NUM_SUB_SHARDS, Integer.toString(numSubShards));
 
         {
           final ShardRequestTracker shardRequestTracker = ocmh.asyncRequestTracker(asyncId);
@@ -236,7 +234,7 @@ public class SplitShardCmd implements OverseerCollectionMessageHandler.Cmd {
             NamedList shardRsp = (NamedList)successes.getVal(0);
             String splits = (String)shardRsp.get(CoreAdminParams.RANGES);
             if (splits != null) {
-              log.info("Resulting split range to be used is " + splits);
+              log.info("Resulting split ranges to be used: " + splits + " slice=" + slice + " leader=" + parentShardLeader);
               // change the message to use the recommended split ranges
               message = message.plus(CoreAdminParams.RANGES, splits);
             }

{noformat}
 

 (I could be totally of base though -- i don't really understand 90% of what this test is doing, and the place where it fails doesn't seem to be trying to split into more then 2 subshards, so even if the SplitSHardCmd changes i pointed out are buggy, i'm not sure why it would cause this particular failure)

 

Ah, yep... spltiByPrefix definitely should not be defaulting to true!  It ended up normally doing nothing (since id_prefix was normally not populated), but that changed when the last commit to use the indexed "if" field was added.  I'll fix the default to be false.

Commit 2e5c554fea0aea1dfeecb227777f03f18fb78cd4 in lucene-solr's branch refs/heads/master from Yonik Seeley
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=2e5c554 ]

SOLR-13399: fix splitByPrefix default to be false


Commit 0fa9cb54c7c5ceefc9a709f3fbe753db9ab39f97 in lucene-solr's branch refs/heads/branch_8x from Yonik Seeley
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=0fa9cb5 ]

SOLR-13399: fix splitByPrefix default to be false


Commit 768ca7c5a7fe5fcd89f047275319eafe783eb96c in lucene-solr's branch refs/heads/master from Megan Carey
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=768ca7c ]

SOLR-13399: Adding splitByPrefix param to IndexSizeTrigger; some splitByPrefix test and code cleanup


Commit 7fc5c0e07d3b9d0651f9ad31f36eb021a9be8195 in lucene-solr's branch refs/heads/branch_8x from Megan Carey
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=7fc5c0e ]

SOLR-13399: Adding splitByPrefix param to IndexSizeTrigger; some splitByPrefix test and code cleanup


Commit ae72f4f542a648b8e159da258daa23ee9c2306d3 in lucene-solr's branch refs/heads/master from Yonik Seeley
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=ae72f4f ]

SOLR-13399: add SPLITSHARD splitByPrefix docs (#903)

* SOLR-13399: add SPLITSHARD splitByPrefix docs

* SOLR-13727: CHANGES entry for bug


Commit ae72f4f542a648b8e159da258daa23ee9c2306d3 in lucene-solr's branch refs/heads/master from Yonik Seeley
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=ae72f4f ]

SOLR-13399: add SPLITSHARD splitByPrefix docs (#903)

* SOLR-13399: add SPLITSHARD splitByPrefix docs

* SOLR-13727: CHANGES entry for bug


Commit 971b5d58235b05da79797a151b6eac6f67b3e8c0 in lucene-solr's branch refs/heads/branch_8x from Yonik Seeley
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=971b5d5 ]

SOLR-13399: add SPLITSHARD splitByPrefix docs (#903)

* SOLR-13399: add SPLITSHARD splitByPrefix docs

* SOLR-13727: CHANGES entry for bug


Commit 971b5d58235b05da79797a151b6eac6f67b3e8c0 in lucene-solr's branch refs/heads/branch_8x from Yonik Seeley
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=971b5d5 ]

SOLR-13399: add SPLITSHARD splitByPrefix docs (#903)

* SOLR-13399: add SPLITSHARD splitByPrefix docs

* SOLR-13727: CHANGES entry for bug


Commit a700f7a706bb1f25c318426a215c0c0b76d94c13 in lucene-solr's branch refs/heads/jira/SOLR-13101 from Yonik Seeley
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=a700f7a ]

SOLR-13399: ability to use id field for compositeId histogram + cleanups


Commit 7775e17414b83508f40ee2e440914177951b5882 in lucene-solr's branch refs/heads/jira/SOLR-13101 from Yonik Seeley
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=7775e17 ]

SOLR-13399: fix splitByPrefix default to be false


Commit c169c182ffc2f9cfad2c175a26504d0c116a8ccd in lucene-solr's branch refs/heads/jira/SOLR-13101 from Megan Carey
[ https://gitbox.apache.org/repos/asf?p=lucene-solr.git;h=c169c18 ]

SOLR-13399: Adding splitByPrefix param to IndexSizeTrigger; some splitByPrefix test and code cleanup


