Is there a Phoenix test which shows this behavior ?

Yes, on our master branch at this commit: https://git-wip-us.apache.org/repos/asf?p=phoenix.git;a=commit;h=0fbce9cd3122a16a890926e0b0042931ae8e03c4

The test that fails is PointInTimeQuery.testPointInTimeSequence(), but it'd be much easier to repro in a standalone HBase test that calls Increment.setTimeRange() on the client and then attempts to get the time range in a coprocessor on the server side.

I ran the testPointInTimeSequence test locally which didn't fail.

Will spend more time on this next week.

Test it on master and branch-1.2.  I can't see this issue.

I set timeRange on client,  and print out the {{TimeRange}} on serverSide, the information is just there.



FWIW, I think this is causing me to locally fail the PointInTimeQueryIT when I attempt to run Phoenix against an HBase build derived from 1.2.0.

[~chenheng] where on the server side are you checking for the timerange?

[~jamestaylor] could you point me to the phoenix coprocessor that normally handles this information?

The coprocessor is SequenceRegionObserver and the method is preIncrement. The client side that sets it is Sequence.newIncrement().

[~busbey]  I dump the information in RSRpcServices#increment

(I haven't assigned this to myself yet because I don't expect to have time to work on it until next week. If someone else thinks they can chase it down before then, please do grab it.)

[~jamestaylor] I didn't look at this one (but appears enough people been looking at it) - how bad it is / much do you want that resolves in 1.3 :) ? I'm planning to start rolling RCs sometimes next week. Feel free do set fixVersion to 1.3 is that's critical and there's some bandwidth here to work on it...

Unless I misunderstand what happened this is a wire compatibility breach. No more 1.2 or any subsequent 1.x releases should go out until it is fixed. I made this issue a blocker. We can document errata for already released versions of 1.2 if need be. 

[~busbey]
[~mantonov]


[~apurtell] all right, need to focus on it then...

-01

  - test to ensure Increment given to coprocessor has client provided TimeRange


Test passes on rel/1.2.0, branch-1.2, and master. I'm digging into the Phoenix code now to see what's different.

[~jamestaylor], could you or someone else from the phoenix community either take a look or walk me through the pieces of customization phoenix has on the write path? I've been stepping through phoenix + hbase for this, but I have yet to find where the timerange handling is different from 1.1 to 1.2.

[~sergey.soldatov] on the dev@phoenix list ([ref|https://lists.apache.org/thread.html/Zaptnijtlufsk8p]) says

{quote}
Not sure about the unit test, but the fix that cause our issue is HBASE-15198. Prior it we had connection with cellBlock false, so protobuf serialized everything, including timeRange. Now cellBlock is true and buildNoDataRegionAction is used for the serializing of Increament mutations. And it doesn't even think about timeRange. If you want to reproduce it with phoenix, just get the workspace from the git on the commit provided in Jame's comments, build it with -DskipTests, import into IDE (I would recommend Idea since it's better handle generated files), place breakpoint in RequestConverter.buildNoDataRegionAction at Increment i = (Increment) row; Now run PhoenixTimeQueryIT in the debugger. Several steps and you will see that builder will be started with empty timeRangeBuilder_
{quote}

[~busbey]:
I have a patch which fixes the issue (verified through Phoenix test).

May I attach it here for reference ?

Thanks

Ted. If you're going to email me out of band in an attempt to be polite about these things, please try to wait more than ~11 hours for a response before you go ahead and call things out publicly. I don't know what time zone you're in, but your message came in last night well after I had stopped doing software related stuff and this update was posted before I had started my day. It's poor form.

As I mentioned in my email reply to you, I am currently figuring out why our tests do not fail due to the glaring gap on time ranges Sergey pointed out. IMHO, it points to a lack in our overall test approach and we need to figure out if this is an isolated problem or if there's a wider gap between our RPC handling dependent on codec selection.

Please do attach your patch for reference; I'm happy to have additional authors on the patch that eventually goes in.

Hi, Sean:
I was not sure which time zone you are in.

Here is my tentative patch which Sergey and myself have verified.

Other Mutation's (Append, etc) don't have time range concept. So currently I use instanceof to check.

Just for your reference.

Patch with a test.

Without the fix, the test fails:
{code}
java.lang.AssertionError: expected:<0> but was:<1>
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:834)
	at org.junit.Assert.assertEquals(Assert.java:645)
	at org.junit.Assert.assertEquals(Assert.java:631)
	at org.apache.hadoop.hbase.coprocessor.TestIncrementTimeRange.checkHTableInterfaceMethods(TestIncrementTimeRange.java:177)
	at org.apache.hadoop.hbase.coprocessor.TestIncrementTimeRange.testHTableInterfaceMethods(TestIncrementTimeRange.java:146)
{code}

Code change looks good. 
bq.import org.mortbay.log.Log;
Unused import. Pls remove

Regarding new test, do we need the CP?  For assert fine np.  There is an unused Dummy CP. Pls remove.  Assert for TR reached CP, pls add assert for increment when we have Increment.setTimerange.

Just checked all other mutations.  Seems only Increment is having this kind of extra attribute which we missed pbing when using PB convert with no cell data.

Patch v2 addresses Anoop's comments by dropping unneeded import and Observer.

bq. add assert for increment when we have Increment.setTimerange.

In v1 there was already assertion that the TimeRange captured by MyObserver has same bounds as the one we set to Increment.

In patch v3, I used two TimeRange's.

range10 is for Increment of 10, performed through Table.increment().
range2 is for Increment of 2, performed through Table.batch().

This way, both code paths are covered.

V3 Looks fine.

[~busbey]:
Shall we get a QA run for patch v3 ?

This is blocking releases, at least the current 0.98 RC. It looks like this has stalled because one committer stomped on another's toes (Ted - you should apologize). I'm inclined to hold my nose and commit this everywhere to unblock it. Objections?

No objections from me for 1.3 (note - as the only obviously affected/reported-broken area known so far is Phoenix, I'm going to mostly rely on Phoenix-related folks to assess the priority). Patch LGTM.

Ok, I'm going to push this through later today, and it's Ted's patch so I'm reassigning the issue. My apologies for how this ends up yanking this out from underneath you [~busbey]. I don't see a better path forward unless you have your own patch in a committable state I can push up instead. 

Thanks for the diligence and fix here. FYI, Phoenix has worked around this - we need to so that we continue to work across older HBase releases that won't have the fix - so it's not a blocker for us.

[~busbey] is on vacation this week

I'm glad Phoenix has a workaround. As this is a breach of wire compatibility I still think it's a blocker.

bq. Sean Busbey is on vacation this week

Bah. I owe you a favor [~busbey] as apology so please feel free to call it in whenever.

The new test in the V3 patch fails for me on every branch from master to 0.98. 

{noformat}
Running org.apache.hadoop.hbase.coprocessor.TestIncrementTimeRange
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 16.69 sec <<< FAILURE! - in org.apache.hadoop.hbase.coprocessor.TestIncrementTimeRange
testHTableInterfaceMethods(org.apache.hadoop.hbase.coprocessor.TestIncrementTimeRange)  Time elapsed: 4.019 sec  <<< FAILURE!
org.junit.internal.ArrayComparisonFailure: arrays first differed at element [7]; expected:<15> but was:<13>
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:834)
	at org.junit.Assert.assertEquals(Assert.java:118)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at org.junit.internal.ExactComparisonCriteria.assertElementsEqual(ExactComparisonCriteria.java:8)
	at org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:53)
	at org.junit.Assert.internalArrayEquals(Assert.java:532)
	at org.junit.Assert.assertArrayEquals(Assert.java:341)
	at org.junit.Assert.assertArrayEquals(Assert.java:352)
	at org.apache.hadoop.hbase.coprocessor.TestIncrementTimeRange.checkRowValue(TestIncrementTimeRange.java:183)
	at org.apache.hadoop.hbase.coprocessor.TestIncrementTimeRange.checkHTableInterfaceMethods(TestIncrementTim
Failed tests: 
  TestIncrementTimeRange.testHTableInterfaceMethods:145->checkHTableInterfaceMethods:174->checkRowValue:183 arrays first differed at element [7]; expected:<15> but was:<13>
{noformat}


| (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} patch {color} | {color:blue} 0m 1s {color} | {color:blue} The patch file was not named according to hbase's naming conventions. Please see https://yetus.apache.org/documentation/0.2.1/precommit-patchnames for instructions. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 11s {color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 2m 51s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 1m 12s {color} | {color:green} master passed with JDK v1.8.0 {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 49s {color} | {color:green} master passed with JDK v1.7.0_79 {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 49s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 29s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 2m 48s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 53s {color} | {color:green} master passed with JDK v1.8.0 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 52s {color} | {color:green} master passed with JDK v1.7.0_79 {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 10s {color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 1m 1s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 1m 12s {color} | {color:green} the patch passed with JDK v1.8.0 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 1m 12s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 50s {color} | {color:green} the patch passed with JDK v1.7.0_79 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 50s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 49s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 27s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} Patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 26m 13s {color} | {color:green} Patch does not cause any errors with Hadoop 2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.1 2.6.2 2.6.3 2.7.1. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 3m 25s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 52s {color} | {color:green} the patch passed with JDK v1.8.0 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 51s {color} | {color:green} the patch passed with JDK v1.7.0_79 {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 0m 56s {color} | {color:green} hbase-client in the patch passed. {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 87m 54s {color} | {color:green} hbase-server in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 31s {color} | {color:green} Patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 136m 46s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12806772/15698.v3.txt |
| JIRA Issue | HBASE-15698 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux asf900.gq1.ygridcore.net 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / 70762fa |
| Default Java | 1.7.0_79 |
| Multi-JDK versions |  /home/jenkins/tools/java/jdk1.8.0:1.8.0 /usr/local/jenkins/java/jdk1.7.0_79:1.7.0_79 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/2117/testReport/ |
| modules | C: hbase-client hbase-server U: . |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/2117/console |
| Powered by | Apache Yetus 0.2.1   http://yetus.apache.org |


This message was automatically generated.



Patch v4 passes reliably.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} patch {color} | {color:blue} 0m 1s {color} | {color:blue} The patch file was not named according to hbase's naming conventions. Please see https://yetus.apache.org/documentation/0.2.1/precommit-patchnames for instructions. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 11s {color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 2m 58s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 1m 3s {color} | {color:green} master passed with JDK v1.8.0 {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 48s {color} | {color:green} master passed with JDK v1.7.0_79 {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 49s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 28s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 2m 49s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 51s {color} | {color:green} master passed with JDK v1.8.0 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 52s {color} | {color:green} master passed with JDK v1.7.0_79 {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 9s {color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 1m 1s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 1m 0s {color} | {color:green} the patch passed with JDK v1.8.0 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 1m 0s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 49s {color} | {color:green} the patch passed with JDK v1.7.0_79 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 49s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 49s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 26s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} Patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 25m 45s {color} | {color:green} Patch does not cause any errors with Hadoop 2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.1 2.6.2 2.6.3 2.7.1. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 3m 22s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 51s {color} | {color:green} the patch passed with JDK v1.8.0 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 50s {color} | {color:green} the patch passed with JDK v1.7.0_79 {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 0m 56s {color} | {color:green} hbase-client in the patch passed. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 102m 44s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 30s {color} | {color:green} Patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 150m 47s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.hbase.replication.TestReplicationSyncUpToolWithBulkLoadedData |
|   | hadoop.hbase.replication.TestReplicationKillMasterRS |
|   | hadoop.hbase.replication.TestReplicationKillMasterRSCompressed |
|   | hadoop.hbase.replication.multiwal.TestReplicationSyncUpToolWithMultipleAsyncWAL |
|   | hadoop.hbase.client.replication.TestReplicationAdminWithClusters |
|   | hadoop.hbase.security.access.TestAccessControlFilter |
|   | hadoop.hbase.snapshot.TestExportSnapshot |
|   | hadoop.hbase.client.TestCloneSnapshotFromClient |
|   | hadoop.hbase.replication.regionserver.TestRegionReplicaReplicationEndpoint |
|   | hadoop.hbase.replication.TestReplicationTrackerZKImpl |
|   | hadoop.hbase.replication.TestReplicationDisableInactivePeer |
|   | hadoop.hbase.client.TestReplicaWithCluster |
|   | hadoop.hbase.replication.TestMultiSlaveReplication |
|   | hadoop.hbase.TestGlobalMemStoreSize |
|   | hadoop.hbase.client.TestRestoreSnapshotFromClient |
|   | hadoop.hbase.snapshot.TestRestoreFlushSnapshotFromClient |
|   | hadoop.hbase.replication.TestReplicationSmallTests |
|   | hadoop.hbase.client.TestSnapshotCloneIndependence |
|   | hadoop.hbase.client.TestMobSnapshotCloneIndependence |
|   | hadoop.hbase.replication.multiwal.TestReplicationKillMasterRSCompressedWithMultipleWAL |
|   | hadoop.hbase.TestAcidGuarantees |
|   | hadoop.hbase.replication.TestReplicationKillSlaveRS |
|   | hadoop.hbase.replication.multiwal.TestReplicationSyncUpToolWithMultipleWAL |
|   | hadoop.hbase.TestLocalHBaseCluster |
| Timed out junit tests | org.apache.hadoop.hbase.security.access.TestAccessController3 |
|   | org.apache.hadoop.hbase.security.access.TestAccessController2 |
|   | org.apache.hadoop.hbase.client.TestMetaWithReplicas |
|   | org.apache.hadoop.hbase.master.TestTableLockManager |
|   | org.apache.hadoop.hbase.snapshot.TestMobSecureExportSnapshot |
|   | org.apache.hadoop.hbase.TestRegionRebalancing |
\\
\\
|| Subsystem || Report/Notes ||
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12808111/15698.v4.txt |
| JIRA Issue | HBASE-15698 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux pietas.apache.org 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / 70762fa |
| Default Java | 1.7.0_79 |
| Multi-JDK versions |  /home/jenkins/tools/java/jdk1.8.0:1.8.0 /usr/local/jenkins/java/jdk1.7.0_79:1.7.0_79 |
| findbugs | v3.0.0 |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/2118/artifact/patchprocess/patch-unit-hbase-server.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-HBASE-Build/2118/artifact/patchprocess/patch-unit-hbase-server.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/2118/testReport/ |
| modules | C: hbase-client hbase-server U: . |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/2118/console |
| Powered by | Apache Yetus 0.2.1   http://yetus.apache.org |


This message was automatically generated.



Looks like test environment had issue:
{code}
Tests run: 6, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 94.52 sec <<< FAILURE! - in org.apache.hadoop.hbase.client.TestRestoreSnapshotFromClient
testCloneSnapshotOfCloned(org.apache.hadoop.hbase.client.TestRestoreSnapshotFromClient)  Time elapsed: 1.287 sec  <<< ERROR!
org.apache.hadoop.ipc.RemoteException: unable to create new native thread
	at java.lang.Thread.start0(Native Method)
	at java.lang.Thread.start(Thread.java:714)
	at org.apache.hadoop.hdfs.DFSOutputStream.start(DFSOutputStream.java:2141)
	at org.apache.hadoop.hdfs.DFSOutputStream.newStreamForCreate(DFSOutputStream.java:1656)
{code}

| (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} patch {color} | {color:blue} 0m 1s {color} | {color:blue} The patch file was not named according to hbase's naming conventions. Please see https://yetus.apache.org/documentation/0.2.1/precommit-patchnames for instructions. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 16s {color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 4m 31s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 1m 38s {color} | {color:green} master passed with JDK v1.8.0 {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 1m 6s {color} | {color:green} master passed with JDK v1.7.0_79 {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 58s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 30s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 3m 25s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 1m 8s {color} | {color:green} master passed with JDK v1.8.0 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 1m 17s {color} | {color:green} master passed with JDK v1.7.0_79 {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 12s {color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 1m 16s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 1m 16s {color} | {color:green} the patch passed with JDK v1.8.0 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 1m 16s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 1m 0s {color} | {color:green} the patch passed with JDK v1.7.0_79 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 1m 0s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 57s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 34s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} Patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 30m 32s {color} | {color:green} Patch does not cause any errors with Hadoop 2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.1 2.6.2 2.6.3 2.7.1. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 3m 41s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 52s {color} | {color:green} the patch passed with JDK v1.8.0 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 52s {color} | {color:green} the patch passed with JDK v1.7.0_79 {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 0m 56s {color} | {color:green} hbase-client in the patch passed. {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 87m 9s {color} | {color:green} hbase-server in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 29s {color} | {color:green} Patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 145m 30s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12808119/15698.v4.txt |
| JIRA Issue | HBASE-15698 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux asf900.gq1.ygridcore.net 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / 70762fa |
| Default Java | 1.7.0_79 |
| Multi-JDK versions |  /home/jenkins/tools/java/jdk1.8.0:1.8.0 /usr/local/jenkins/java/jdk1.7.0_79:1.7.0_79 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/2119/testReport/ |
| modules | C: hbase-client hbase-server U: . |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/2119/console |
| Powered by | Apache Yetus 0.2.1   http://yetus.apache.org |


This message was automatically generated.



So the difference in the test between v3 and v4 is instead of:
{code}
+    TimeRange range2 = new TimeRange(1, EnvironmentEdgeManager.currentTime()+2);
+    List<Row> actions =
+        Arrays.asList(new Row[] { new Increment(ROW_A).addColumn(TEST_FAMILY, qualifierCol1, 2L)
+            .setTimeRange(range2.getMin(), range2.getMax()),
+            new Increment(ROW_A).addColumn(TEST_FAMILY, qualifierCol1, 2L)
+            .setTimeRange(range2.getMin(), range2.getMax()) });
+    Object[] results3 = new Object[actions.size()];
+    Object[] results1 = results3;
+    hTableInterface.batch(actions, results1);
+    assertEquals(MyObserver.tr2.getMin(), range2.getMin());
+    assertEquals(MyObserver.tr2.getMax(), range2.getMax());
+    assertEquals(2, results1.length);
+    for (Object r2 : results1) {
+      assertTrue(r2 instanceof Result);
+    }
+    checkRowValue(ROW_A, Bytes.toBytes(15L));
{code}

instead only one increment is submitted by batch() and the test for expected total is adjusted:
{code}
+    TimeRange range2 = new TimeRange(1, EnvironmentEdgeManager.currentTime()+2);
+    List<Row> actions =
+        Arrays.asList(new Row[] { new Increment(ROW_A).addColumn(TEST_FAMILY, qualifierCol1, 2L)
+            .setTimeRange(range2.getMin(), range2.getMax()) });
+    Object[] results3 = new Object[actions.size()];
+    Object[] results1 = results3;
+    hTableInterface.batch(actions, results1);
+    assertEquals(MyObserver.tr2.getMin(), range2.getMin());
+    assertEquals(MyObserver.tr2.getMax(), range2.getMax());
+    for (Object r2 : results1) {
+      assertTrue(r2 instanceof Result);
+    }
+    checkRowValue(ROW_A, Bytes.toBytes(13L));
{code}

[~tedyu] can you explain why the first version of the test failed? I assumed it passed for you on your local dev box? Is this a bug or unexpected behavior with increment? Or is this just going to be a flaky test because it's using System#currentTimeMillis as clock source (the default EnvironmentEdge) with really small timeranges? It would be better to inject the ManualEnvironmentEdge and control the clock used for the test manually, I think.

The 1 test run for v3 and 2 test runs for v4 passed on QA bot.
I would say the formation of test in v3 leads to flaky test.

bq. is this just going to be a flaky test because it's using System#currentTimeMillis

The above is a possible scenario.

I also want to point out that the failed assertion was on check for value, not whether the TimeRange is correctly delivered to the server side which was the cause for regression in the first place.
Looking back on the test in v3, it doesn't make sense to send two Increments for the same row, family and qualifier in one batch.

bq. It would be better to inject the ManualEnvironmentEdge

Can you elaborate a bit more on where the injection takes place ?

In v4, code paths for passing TimeRange in both table.increment() and table.batch() are covered.

I can add an Increment for ROW_B in the same batch call and verify the value afterwards. What do you think ?

bq. Looking back on the test in v3, it doesn't make sense to send two Increments for the same row, family and qualifier in one batch.

Maybe not for the purposes of this test but why wouldn't we expect increments in batch to all be processed and sum to the expected amount even if to the same location?

bq. Can you elaborate a bit more on where the injection takes place ?

In test setup you'd do:
{code}
// static or test class field
ManualEnvironmentEdge me;

// somewhere in init
me = new ManualEnvironmentEdge();
EnvironmentEdgeManager.injectEdge(me);
{code}

and then use the reference to 'me' to adjust the clock for the test cases. 


See if patch v5 is better.

Two Increments are in the batch() call.

Tried the test on Mac and Linux over 10 times which all passed.

The reason for test failure of patch v3 was that:
{code}
+    TimeRange range2 = new TimeRange(1, EnvironmentEdgeManager.currentTime()+2);
+    List<Row> actions =
+        Arrays.asList(new Row[] { new Increment(ROW_A).addColumn(TEST_FAMILY, qualifierCol1, 2L)
+            .setTimeRange(range2.getMin(), range2.getMax()),
+            new Increment(ROW_A).addColumn(TEST_FAMILY, qualifierCol1, 2L)
+            .setTimeRange(range2.getMin(), range2.getMax()) });
{code}
By the time the first Increment is done, range2.getMax() is exceeded (I wasn't careful when choosing the 2).
The second Increment wouldn't find the value resulting from the first Increment.

Patch v5 doesn't have this shortcoming.

bq. Patch v5 doesn't have this shortcoming.

Ok, I see that, but because you're still using the default clock source and small timeranges (10ms, 2ms), this test will be flaky on slow hardware or loaded test VMs. I really think you should inject the ManualEnvironmentEdge to avoid this. 


{quote}
bq. Sean Busbey is on vacation this week
Bah. I owe you a favor Sean Busbey as apology so please feel free to call it in whenever.
{quote}

No worries. Sorry I needed to disappear for a bit without any notice. FWIW, my plan on my return was just to commit whatever Ted had come up with as long as tests were passing.

See if patch v6 is closer to what you're looking for.

Both Increment's in the batch carry the same TimeRange.

Haven't been able to get v6 to pass.
{code}
testHTableInterfaceMethods(org.apache.hadoop.hbase.coprocessor.TestIncrementTimeRange)  Time elapsed: 1.773 sec  <<< ERROR!
java.lang.NullPointerException: null
	at org.apache.hadoop.hbase.coprocessor.TestIncrementTimeRange.checkHTableInterfaceMethods(TestIncrementTimeRange.java:178)
	at org.apache.hadoop.hbase.coprocessor.TestIncrementTimeRange.testHTableInterfaceMethods(TestIncrementTimeRange.java:151)
{code}
The above meant that observer wasn't activated for the two Increment's of 2L.

See if I used ManualEnvironmentEdge correctly.

bq. See if I used ManualEnvironmentEdge correctly.

Haven't looked at the patch. Are you manually incrementing the clock as needed? I'm pretty busy. Don't wait on me. 


Turned out that I missed one operation which needs manually incrementing the clock.

Patch v7 passes locally.

Let's see what QA bot says.

| (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} patch {color} | {color:blue} 0m 2s {color} | {color:blue} The patch file was not named according to hbase's naming conventions. Please see https://yetus.apache.org/documentation/0.2.1/precommit-patchnames for instructions. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green} 0m 0s {color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 10s {color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 2m 51s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 1m 3s {color} | {color:green} master passed with JDK v1.8.0 {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 50s {color} | {color:green} master passed with JDK v1.7.0_79 {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 49s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 28s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 2m 48s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 53s {color} | {color:green} master passed with JDK v1.8.0 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 51s {color} | {color:green} master passed with JDK v1.7.0_79 {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 9s {color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 1m 1s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 1m 12s {color} | {color:green} the patch passed with JDK v1.8.0 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 1m 12s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 0m 49s {color} | {color:green} the patch passed with JDK v1.7.0_79 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 0m 49s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 49s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 0m 24s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} Patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 25m 40s {color} | {color:green} Patch does not cause any errors with Hadoop 2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.1 2.6.2 2.6.3 2.7.1. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 3m 24s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 53s {color} | {color:green} the patch passed with JDK v1.8.0 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 0m 53s {color} | {color:green} the patch passed with JDK v1.7.0_79 {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 0m 57s {color} | {color:green} hbase-client in the patch passed. {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 85m 30s {color} | {color:green} hbase-server in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 30s {color} | {color:green} Patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 133m 42s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12808449/15698.v7.txt |
| JIRA Issue | HBASE-15698 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux asf907.gq1.ygridcore.net 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / b21c56e |
| Default Java | 1.7.0_79 |
| Multi-JDK versions |  /home/jenkins/tools/java/jdk1.8.0:1.8.0 /usr/local/jenkins/java/jdk1.7.0_79:1.7.0_79 |
| findbugs | v3.0.0 |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/2124/testReport/ |
| modules | C: hbase-client hbase-server U: . |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/2124/console |
| Powered by | Apache Yetus 0.2.1   http://yetus.apache.org |


This message was automatically generated.



Great. Thanks [~tedyu]. I will try committing the v7 patch now back to 0.98 with fixups. Back soon.

Pushed up to all branches

SUCCESS: Integrated in HBase-1.3-IT #693 (See [https://builds.apache.org/job/HBase-1.3-IT/693/])
HBASE-15698 Increment TimeRange not serialized to server (Ted Yu) (apurtell: rev 05e1013b08f7bd3699a6417014833efe7340c91b)
* hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestIncrementTimeRange.java


SUCCESS: Integrated in HBase-1.2-IT #525 (See [https://builds.apache.org/job/HBase-1.2-IT/525/])
HBASE-15698 Increment TimeRange not serialized to server (Ted Yu) (apurtell: rev 8507446891a5e3506f4f585811aaeecab5079adf)
* hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestIncrementTimeRange.java


SUCCESS: Integrated in HBase-1.3 #726 (See [https://builds.apache.org/job/HBase-1.3/726/])
HBASE-15698 Increment TimeRange not serialized to server (Ted Yu) (apurtell: rev 05e1013b08f7bd3699a6417014833efe7340c91b)
* hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestIncrementTimeRange.java


SUCCESS: Integrated in HBase-1.2 #643 (See [https://builds.apache.org/job/HBase-1.2/643/])
HBASE-15698 Increment TimeRange not serialized to server (Ted Yu) (apurtell: rev 8507446891a5e3506f4f585811aaeecab5079adf)
* hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestIncrementTimeRange.java
* hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java


FAILURE: Integrated in HBase-Trunk_matrix #1003 (See [https://builds.apache.org/job/HBase-Trunk_matrix/1003/])
HBASE-15698 Increment TimeRange not serialized to server (Ted Yu) (apurtell: rev 376ad0d9868e563e4153f8725afbf00a0293f72c)
* hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestIncrementTimeRange.java


FAILURE: Integrated in HBase-1.4 #200 (See [https://builds.apache.org/job/HBase-1.4/200/])
HBASE-15698 Increment TimeRange not serialized to server (Ted Yu) (apurtell: rev 76404238a8398a52674c4de5cebb7d273907adbc)
* hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestIncrementTimeRange.java
* hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java


SUCCESS: Integrated in HBase-1.1-JDK8 #1814 (See [https://builds.apache.org/job/HBase-1.1-JDK8/1814/])
HBASE-15698 Increment TimeRange not serialized to server (Ted Yu) (apurtell: rev ac0234811383cedb85cd64848aef21c78d88d5ce)
* hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestIncrementTimeRange.java


SUCCESS: Integrated in HBase-1.1-JDK7 #1727 (See [https://builds.apache.org/job/HBase-1.1-JDK7/1727/])
HBASE-15698 Increment TimeRange not serialized to server (Ted Yu) (apurtell: rev ac0234811383cedb85cd64848aef21c78d88d5ce)
* hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestIncrementTimeRange.java


FAILURE: Integrated in HBase-0.98-matrix #352 (See [https://builds.apache.org/job/HBase-0.98-matrix/352/])
HBASE-15698 Increment TimeRange not serialized to server (Ted Yu) (apurtell: rev 8e132aa09968a9b92ac87fae6d0d94916fe2a718)
* hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestIncrementTimeRange.java
* hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java


FAILURE: Integrated in HBase-0.98-on-Hadoop-1.1 #1224 (See [https://builds.apache.org/job/HBase-0.98-on-Hadoop-1.1/1224/])
HBASE-15698 Increment TimeRange not serialized to server (Ted Yu) (apurtell: rev 8e132aa09968a9b92ac87fae6d0d94916fe2a718)
* hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestIncrementTimeRange.java
* hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java


