I saw it in trunk, but I guess it might be a good idea to check also the other branches when working on a fix.

Just saw this again here: https://app.circleci.com/pipelines/github/maedhroz/cassandra/410/workflows/b11dcf8a-2823-4fc3-91d3-dcb3d0379052/jobs/3098/tests#failed-test-0

Seen again in this run:

https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1929/workflows/8c22347c-4b63-488d-98d6-5c0a81bc47b7/jobs/15213/tests#failed-test-0

[~elamparuthiece] I noticed you moved the ticket to Work In progress, are you working on it? Please, feel free to assign it to yourself. Thanks

This is flaky also on trunk. Popped up in [this run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2130/workflows/50f35fc1-12e6-4ffb-af2e-cc5791a51152/jobs/16650/tests#failed-test-0] today.
{code:java}
AssertionError: assert 'DEFLATE' == 'UNKNOWN'
  - DEFLATE
  + UNKNOWN
self = <compression_test.TestCompression object at 0x7f2dd7ef3940>

    @since("3.0")
    def test_compression_cql_options(self):
        """
            @jira_ticket CASSANDRA-8384
            using new cql create table syntax to configure compression
            """
        cluster = self.cluster
        cluster.populate(1).start()
        [node] = cluster.nodelist()
    
        session = self.patient_cql_connection(node)
        create_ks(session, 'ks', 1)
        session.execute("""
                create table compression_opts_table
                    (id uuid PRIMARY KEY )
                    WITH compression = {
                        'class': 'DeflateCompressor',
                        'chunk_length_in_kb': 256
                    }
                    AND crc_check_chance = 0.25;
                """)
    
        session.cluster.refresh_schema_metadata()
        meta = session.cluster.metadata.keyspaces['ks'].tables['compression_opts_table']
        assert 'org.apache.cassandra.io.compress.DeflateCompressor' == meta.options['compression']['class']
        assert '256' == meta.options['compression']['chunk_length_in_kb']
        assert_crc_check_chance_equal(session, "compression_opts_table", 0.25)
    
        warn = node.grep_log("The option crc_check_chance was deprecated as a compression option.")
        assert len(warn) == 0
        session.execute("""
                alter table compression_opts_table
                    WITH compression = {
                        'class': 'DeflateCompressor',
                        'chunk_length_in_kb': 256,
                        'crc_check_chance': 0.6
                    }
                """)
        warn = node.grep_log("The option crc_check_chance was deprecated as a compression option.")
        assert len(warn) == 1
    
        # check metadata again after crc_check_chance_update
        session.cluster.refresh_schema_metadata()
        meta = session.cluster.metadata.keyspaces['ks'].tables['compression_opts_table']
        assert 'org.apache.cassandra.io.compress.DeflateCompressor' == meta.options['compression']['class']
        assert '256' == meta.options['compression']['chunk_length_in_kb']
        assert_crc_check_chance_equal(session, "compression_opts_table", 0.6)
    
        for n in range(0, 100):
            session.execute("insert into compression_opts_table (id) values (uuid());")
    
        self.flush('compression_opts_table')
        # Due to CASSANDRA-15379 we have to compact to get the actual table
        # compression to take effect since deflate is a slow compressor
        self.perform_node_tool_cmd(cmd='compact', table='compression_opts_table', indexes=list())
        sstables = self.get_sstables(table='compression_opts_table', indexes=list())
        sstable_paths = self.get_table_paths('compression_opts_table')
        found = False
        for sstable_path in sstable_paths:
            sstable = os.path.join(sstable_path, sstables['compression_opts_table'][1])
            if os.path.exists(sstable):
>               assert 'DEFLATE' == self._get_compression_type(sstable)
E               AssertionError: assert 'DEFLATE' == 'UNKNOWN'
E                 - DEFLATE
E                 + UNKNOWN

compression_test.py:116: AssertionError
{code}
 

 

 

I think the problem is still relevant. I can reproduce it on the trunk branch.
https://github.com/apache/cassandra/commit/08c46d09634ed4639246036b84caf817d14fa188
https://github.com/apache/cassandra-dtest/commit/24d6b291eeb8842fab22b5b3936539b66a036d86

{code:java}
===================================== test session starts =====================================
platform darwin -- Python 3.9.6, pytest-7.3.1, pluggy-1.0.0
rootdir: /Users/m/pycharm/cassandra-dtest
configfile: pytest.ini
plugins: flaky-3.7.0, repeat-0.9.1, timeout-1.4.2
timeout: 900.0s
timeout method: signal
timeout func_only: False
collected 1 item                                                                                                                                                                                                                                                                                                       

compression_test.py F                                                                                                                                                                                                                                                                                            [100%]  
===================================== FAILURES ===================================== ____________________________________________________________________________________
TestCompression.test_compression_cql_options 
____________________________________________________________________________________


self = <compression_test.TestCompression object at 0x1051e1790>

    @since("3.0")
    def test_compression_cql_options(self):
        """
        @jira_ticket CASSANDRA-8384
        using new cql create table syntax to configure compression
        """
        cluster = self.cluster
        cluster.populate(1).start()
        [node] = cluster.nodelist()
    
        session = self.patient_cql_connection(node)
        create_ks(session, 'ks', 1)
        session.execute("""
            create table compression_opts_table
                (id uuid PRIMARY KEY )
                WITH compression = {
                    'class': 'DeflateCompressor',
                    'chunk_length_in_kb': 256
                }
                AND crc_check_chance = 0.25;
            """)
    
        session.cluster.refresh_schema_metadata()
        meta = session.cluster.metadata.keyspaces['ks'].tables['compression_opts_table']
        assert 'org.apache.cassandra.io.compress.DeflateCompressor' == meta.options['compression']['class']
        assert '256' == meta.options['compression']['chunk_length_in_kb']
        assert_crc_check_chance_equal(session, "compression_opts_table", 0.25)
    
        warn = node.grep_log("The option crc_check_chance was deprecated as a compression option.")
        assert len(warn) == 0
>       session.execute("""
            alter table compression_opts_table
                WITH compression = {
                    'class': 'DeflateCompressor',
                    'chunk_length_in_kb': 256,
                    'crc_check_chance': 0.6
                }
            """)

compression_test.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
cassandra/cluster.py:2618: in cassandra.cluster.Session.execute
    ??? 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
>   ???
E   cassandra.protocol.ConfigurationException: <Error from server: code=2300 [Query invalid because of configuration issue] message="Unknown compression options crc_check_chance">

cassandra/cluster.py:4894: ConfigurationException
{code}

Found the cause, the param was removed here - 
https://issues.apache.org/jira/browse/CASSANDRA-18872

EDIT: I updated the local branch and the test passed, so I guess the issue is no longer relevant for the 5.x branch, as the configuration parameter has been removed there.

