Moved shared test resources to test-resources and did some other very small test clean ups.

One oddity that I'm not sure how to handle or if it is a problem is that tika-test-resources now has junit in full scope (not just test).  My thinking is that all other modules will use tika-test-resources in test scope only so this won't be a problem. If there's a cleaner way of handling this, please let me know.

Had to duplicate a small bit of code from AbstractTikaConfigTest in tika-core to avoid circular dependency, but now we have clean(er) separation of tika-core and tika-test-resources.  My goal was to get to something akin to Lucene's lucene-test-framework.

After working through our unit tests across a variety of parsers recently, I see a large opportunity to refactor many tests and make more use of TikaTest functionality...that's for another ticket.

UNSTABLE: Integrated in tika-2.x #18 (See [https://builds.apache.org/job/tika-2.x/18/])
TIKA-1851:factor out test resources that used to be in core to (tallison: rev afb6cf2630b5006091b9862df661efa1d1ac1593)
* tika-parser-modules/tika-parser-pdf-module/pom.xml
* tika-parser-modules/tika-parser-scientific-module/src/test/java/org/apache/tika/parser/gdal/TestGDALParser.java
* tika-core/src/test/java/org/apache/tika/parser/mock/MockParser.java
* tika-core/src/test/java/org/apache/tika/parser/DummyParser.java
* tika-parser-modules/tika-parser-database-module/pom.xml
* tika-parsers/src/test/java/org/apache/tika/parser/mock/MockParserTest.java
* tika-test-resources/pom.xml
* tika-parser-modules/tika-parser-multimedia-module/pom.xml
* tika-parent/pom.xml
* tika-batch/pom.xml
* tika-parser-modules/tika-parser-package-module/pom.xml
* tika-server/pom.xml
* tika-parsers/pom.xml
* tika-test-resources/src/main/java/org/apache/tika/parser/mock/MockParser.java
* tika-parser-modules/tika-parser-advanced-module/pom.xml
* tika-parser-modules/tika-parser-office-module/pom.xml
* tika-test-resources/src/main/java/org/apache/tika/TikaTest.java
* tika-parser-modules/tika-parser-crypto-module/pom.xml
* tika-core/src/test/java/org/apache/tika/config/DummyExecutor.java
* tika-parser-modules/tika-parser-ebook-module/pom.xml
* tika-parser-modules/tika-parser-scientific-module/src/test/java/org/apache/tika/parser/dif/DIFParserTest.java
* tika-parser-modules/tika-parser-cad-module/pom.xml
* tika-parser-modules/pom.xml
* tika-test-resources/src/main/java/org/apache/tika/config/AbstractTikaConfigTest.java
* tika-parser-modules/tika-parser-scientific-module/pom.xml
* tika-parser-modules/tika-parser-journal-module/pom.xml
* tika-parser-modules/tika-parser-code-module/pom.xml
* tika-core/pom.xml
* tika-parser-modules/tika-parser-text-module/pom.xml
* tika-parser-modules/tika-parser-web-module/pom.xml
* tika-core/src/test/java/org/apache/tika/config/TikaConfigTest.java
* tika-core/src/test/java/org/apache/tika/config/DummyParser.java
* tika-test-resources/src/test/java/org/apache/tika/parser/mock/MockParserTest.java
* tika-core/src/test/java/org/apache/tika/config/AbstractTikaConfigTest.java
* tika-core/src/test/java/org/apache/tika/TikaTest.java
* tika-parser-modules/tika-parser-multimedia-module/src/test/java/org/apache/tika/parser/ocr/TesseractOCRConfigTest.java


[~bobpaulin], any chance you could look into why we've been getting the following in 2.x's tika-bundle since we moved to git (https://builds.apache.org/job/tika-2.x/14/)?  

I'm sure the move didn't do it, but thanks to [~lewismc] for aiming Hudson at git, this has made this issue ever so much clearer. :)

{noformat}
java.lang.Exception: Unable to lock bundle cache: java.nio.channels.OverlappingFileLockException
	at org.apache.felix.framework.cache.BundleCache.<init>(BundleCache.java:176)
	at org.apache.felix.framework.Felix.init(Felix.java:689)
	at org.apache.felix.framework.Felix.init(Felix.java:624)
	at org.ops4j.pax.exam.nat.internal.NativeTestContainer.start(NativeTestContainer.java:176)
	at org.ops4j.pax.exam.spi.reactors.AllConfinedStagedReactor.invoke(AllConfinedStagedReactor.java:79)
	at org.ops4j.pax.exam.junit.impl.ProbeRunner$2.evaluate(ProbeRunner.java:267)
{noformat}

Are we using the most recent osgi/Felix dependencies?
I haven't looked at the build myself, however I assume that this may be a permissions issue with accessing the bundle cache. Does anyone know where this cache is stored by default?

Dunno, but I should have mentioned that I'm getting this when I try to build 2.x locally, too; this isn't just a Hudson issue.   

wrong reason for resolving...need to fix

Hi [~tallison@apache.org] - I'm also getting a local build failure with 2.0, but the output i see is:

[ERROR] Failed to execute goal org.codehaus.groovy.maven:gmaven-plugin:1.0:execute (testSetup) on project tika-test-resources: startup failed, /Users/kenkrugler/git/tika/tika-test-resources/src/test/resources/org/apache/tika/parser/ner/opennlp/ModelGetter.groovy: 23: unable to resolve class org.apache.commons.io.IOUtils
[ERROR] @ line 23, column 1.
[ERROR] import org.apache.commons.io.IOUtils

Is this something different than the issue you ran into?

And any way to work around it? I'd like to port the language detector changes.


I'm also curious why we have Groovy code and shell scripts inside of src/test/resources (e.g. in tika-test-resources/src/test/resources/org/apache/tika/parser/ner/opennlp/). Shouldn't groovy code be in src/test/groovy (or src/test/java would also work)? Not sure about shell files, maybe that's OK as a resource.

Hi Ken,
  [~thammegowda] is working on making the opennlp test suite work on the 2.x branch over on TIKA-1816.  I ran into the same error that you did above, but then I manually copied/downloaded the models: ner-date.bin, ner-location.bin, ner-organization.bin and ner-person.bin from {{http://opennlp.sourceforge.net/models-1.5}} to {{src/test/resources/org/apache/tika/parser/ner/opennlp/}}. 

At least in my environment for now, ModelGetter.groovy is working in trunk (1.x).  But, right, that is still broken in 2.x.

As for where Groovy goes, I leave that to [~chrismattmann] and [~thammegowda].  I suspect that wound up there because it should be a one-off download task, but I don't have a strong preference for location.  I was wondering if it should go in the general test-resources package or should be moved to the test cases for that particular parser, but I don't have a strong feeling where it goes.

[~tallison@mitre.org] I have seen that felix error before and it one of the more misleading ones.  I'll take a look today.  Probably something incorrect in the construction of the jar or manifest file. 

Added some fixes for the gmaven error and osgi tests.  Working locally again.  Not quite sure how this got out of whack when we switched to git.

UNSTABLE: Integrated in tika-2.x #20 (See [https://builds.apache.org/job/tika-2.x/20/])
TIKA-1851 - Removed duplicate sun.misc entry in optional OSGi imports. (bob: rev d6d5b8fe31404235208eefe6a4669b6190a03195)
* tika-bundle/pom.xml
TIKA-1851 - Added commons-io dependency for gmaven plugin. (bob: rev 7fc182f3af6a461426985dd29e36175418d5c1b3)
* tika-test-resources/pom.xml


Back to normal-ish exceptions.  Thank you, [~bobpaulin]!  I'll take a look at these shortly.

I did a top-level "mvn clean install", which failed with:

[ERROR] Failed to execute goal org.codehaus.groovy.maven:gmaven-plugin:1.0:execute (testSetup) on project tika-test-resources: java.net.SocketException: Connection reset -> [Help 1]

I re-ran that inside of tika-test-resources, and this time it worked - I assume the failure was in downloading resources from the opennlp project in SourceForge (e.g. GET : http://opennlp.sourceforge.net/models-1.5/en-ner-person.bin -> src/test/resources/org/apache/tika/parser/ner/opennlp/ner-person.bin)

In general I'm not a big fan of relying on SF infrastructure for builds, as it's too flaky to be reliable. Other solutions here?

Hmm, now the top-level build fails on the tika parser text module, with:

"[ERROR] Failed to execute goal org.apache.maven.plugins:maven-dependency-plugin:2.10:unpack (unpack) on project tika-parser-text-module: Unable to find artifact. Could not find artifact org.apache.tika:tika-test-resources:jar:tests:2.0-SNAPSHOT in apache.snapshots (http://repository.apache.org/snapshots)" 

But tika-test-resources-2.0-SNAPSHOT.jar was installed locally during the build.

I'm the same Ken. We have been using cTAKES and the dictionaries are
giagantic. They are hosted at SF IIRC however it is assumed that you will
obtain them yourself... They are not part of a build. We could possibly
have a build profile for these large supporting artifacts which is disabled
by default. In addition I think we could probably be a bit more creative
with the artifacts we make available in every release candidate. A an
artifacts with all dependencies would solve this issue. We do that in
any23. The Any23 server packaging can probably be replicated here in Tika
to solve the issue.





-- 
*Lewis*


We could potentially refactor so that we assumeTrue on the NER tests if the models aren't there and they fail, then we fail but still pass tests. [~thammegowda] and I put the Groovy download script in there to simplify the obtaining of models.

Let's see how this plays out. I feel like if we got Tim's 1.x environment working e.g., at MITRE which I consider the corner case, we shouldn't be far off from 2.x working in general.

Hi [~tallison@mitre.org]  [~chrismattmann]  and [~bobpaulin]

I spent some time in debugging tests on 2.x branch.

I think there's an issue with test setup in this multi module maven project.
I found that when tests are run on parser-modules and the *tika-test-resources* artifact is downloaded from the public repository (http://repository.apache.org/snapshots/org/apache/tika/tika-test-resources/2.0-SNAPSHOT/tika-test-resources-2.0-XXX-tests.jar) instead of locally building it. Is it an expected behaviour? 

Probably this is the reason why the tests are failing.

I think it is required to pull the jar from tika-test-resources module's build instead of public snapshot repo.
Something like calling mvn install on tika-test-resources first before the tests on other modules should pass.
(Sorry, I haven't figured out a way to configure this in maven yet.) But here is how you can reproduce this:
{code}
$ rm -r ~/.m2/repository/org/apache/tika/tika-test-resources/
$ rm tika-test-resources/src/test/resources/org/apache/tika/parser/ner/opennlp/*.bin
$ mvn package -pl tika-test-resources    # This should download NER files and result in SUCCESS. Otherwise it is connection/proxy problem, we have fixed it on 1.x just need to port it to 2.x. 
# Get into flight mode: plug out your internet connection
$ mvn package -pl tika-test-resources       # Once more but this time offline. It did pass for me! Sounds good
$ mvn test -pl tika-parser-modules/tika-parser-advanced-module/  # it fails because tika-test-resources is not built, not available
$ mvn install -pl tika-test-resources/ -DskipTests        # lets install, skipped tests because we just seen pass in previous step
$ mvn test -pl tika-parser-modules/tika-parser-advanced-module/   # Did it pass?  No for me. It tries to download test-resources and fails. But we just installed the test resources to local repo, it should have added to the class path. Why not? 
# get off from flight mode, plug in the internet
$ mvn test -pl tika-parser-modules/tika-parser-advanced-module/ -U    # Did it pass? Yes for me.
{code}

https://builds.apache.org/job/tika-2.x/20/#showFailuresLink

For these two:
{noformat}
org.apache.tika.server.StackTraceOffTest.testNullPointerOnTika
org.apache.tika.server.StackTraceTest.testNullPointerOnTika
{noformat}
The MockParser isn't making it into tika-server.  Need to add tika-test-resources as a dependency and move services to "main" instead of "test" in tika-test-resources.




Shell script was the initial version we had for manual setup (we must have deleted it from source control to avoid this ambiguity). The groovy script is actually used in the build to automate the test setup. 
We chose groovy over shell script because it makes the setup portable to windows since it doesnt need tools like wget or curl.

I tried to include the groovy script in src/test/groovy first, that forced me to setup groovy for the entire test goal of the project. But actually, the script is part of build tools (i.e. maven plugins) and not part of tika's test cases, so it was kept outside.


As always, open to any suggestions you will have.

FAILURE: Integrated in tika-2.x #21 (See [https://builds.apache.org/job/tika-2.x/21/])
TIKA-1851: fix dependency in tika-server to pickup MockParser in (tallison: rev 73d720a83d759f53f531042f7bc204bcb6714660)
* tika-test-resources/src/test/resources/META-INF/services/org.apache.tika.parser.Parser
* tika-test-resources/src/main/resources/META-INF/services/org.apache.tika.parser.Parser
* tika-server/pom.xml
* tika-server/src/test/resources/META-INF/services/org.apache.tika.parser.Parser


All dependencies should always come from first local maven cache e.g.
~/.m2, then snapshots present within repository.apache.org. This is a
development build and upon a stable build we should be pushing artifacts to
our snapshots repository so the behavior is correct.

I think an issue here is with the reliance upon SF for effectively
downloading the language additions required for the entire TIKA package.

It looks like Tim's suggestion is bang on with correct scope for
definitions. All of this stuff can also be gleaned from Any23 setup.

Good work gents.




-- 
*Lewis*


Build now works locally for me after manual download of ner models.  The fix to tika-server works at least locally.

I can't figure out what Hudson/Jenkins didn't like here.  It finished building tika-test-resources, and then failed on tika-parser-text module:

{noformat}
[INFO] --- maven-dependency-plugin:2.10:unpack (unpack) @ tika-parser-text-module ---
[INFO] Configured Artifact: org.apache.tika:tika-test-resources:2.0-SNAPSHOT:test-jar
Downloading: http://repository.apache.org/snapshots/org/apache/tika/tika-test-resources/2.0-SNAPSHOT/tika-test-resources-2.0-SNAPSHOT-tests.jar
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Skipping Apache Tika
[INFO] This project has been banned from the build due to previous failures.
[INFO] ------------------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
{noformat}

Then ...
{noformat}
Could not find artifact org.apache.tika:tika-test-resources:jar:tests:2.0-SNAPSHOT in Nexus (http://repository.apache.org/snapshots)
{noformat}

But the tika-test-resources.jar is available here: https://repository.apache.org/content/repositories/snapshots/org/apache/tika/tika-test-resources/2.0-SNAPSHOT/

That's exciting...

hmmm....

If you can build locally then can you try a manual deployment to
repository.a.o?

https://maven.apache.org/plugins/maven-deploy-plugin/deploy-file-mojo.html

I'm sorry I am not at my laptop or else I would be helping you guys.




-- 
*Lewis*


Apologies for the following display of ignorance...but I _think_ the tika-test-resources.jar *was* deployed

{noformat}
Uploading: https://repository.apache.org/content/repositories/snapshots/org/apache/tika/tika-test-resources/2.0-SNAPSHOT/tika-test-resources-2.0-20160206.022320-24.jar
Uploaded: https://repository.apache.org/content/repositories/snapshots/org/apache/tika/tika-test-resources/2.0-SNAPSHOT/tika-test-resources-2.0-20160206.022320-24.jar (20 KB at 24.5 KB/sec)
Uploading: https://repository.apache.org/content/repositories/snapshots/org/apache/tika/tika-test-resources/2.0-SNAPSHOT/tika-test-resources-2.0-20160206.022320-24.pom
Uploaded: https://repository.apache.org/content/repositories/snapshots/org/apache/tika/tika-test-resources/2.0-SNAPSHOT/tika-test-resources-2.0-20160206.022320-24.pom (3 KB at 3.5 KB/sec)
Downloading: https://repository.apache.org/content/repositories/snapshots/org/apache/tika/tika-test-resources/maven-metadata.xml
Downloaded: https://repository.apache.org/content/repositories/snapshots/org/apache/tika/tika-test-resources/maven-metadata.xml (292 B at 0.5 KB/sec)
Uploading: https://repository.apache.org/content/repositories/snapshots/org/apache/tika/tika-test-resources/2.0-SNAPSHOT/maven-metadata.xml
Uploaded: https://repository.apache.org/content/repositories/snapshots/org/apache/tika/tika-test-resources/2.0-SNAPSHOT/maven-metadata.xml (992 B at 1.3 KB/sec)
Uploading: https://repository.apache.org/content/repositories/snapshots/org/apache/tika/tika-test-resources/maven-metadata.xml
Uploaded: https://repository.apache.org/content/repositories/snapshots/org/apache/tika/tika-test-resources/maven-metadata.xml (292 B at 0.4 KB/sec)
{noformat}

And the jar and poms really are [there|https://repository.apache.org/content/repositories/snapshots/org/apache/tika/tika-test-resources/2.0-SNAPSHOT/]:

{noformat}tika-test-resources-2.0-20160206.022320-24.jar Sat Feb 06 02:23:20 UTC 2016 19898   
tika-test-resources-2.0-20160206.022320-24.jar.md5 Sat Feb 06 02:23:20 UTC 2016 32   
tika-test-resources-2.0-20160206.022320-24.jar.sha1 Sat Feb 06 02:23:20 UTC 2016 40   
tika-test-resources-2.0-20160206.022320-24.pom Sat Feb 06 02:23:21 UTC 2016 2795   
tika-test-resources-2.0-20160206.022320-24.pom.md5 Sat Feb 06 02:23:21 UTC 2016 32   
tika-test-resources-2.0-20160206.022320-24.pom.sha1 Sat Feb 06 02:23:21 UTC 2016 40  
{noformat}


Can you check which modules failed. If something in Jenkins is banned from.
Holding it means that some previous module/project filed to build
successfully and/or stable.




-- 
*Lewis*


I see the issue.  It looks like the test-jar was removed so that the jar file used was only 20 KB which means the test documents are not there.  We either need to go back to using the test-jar or we could consider moving the src/test/resources to src/main/resources but I think that's the wrong move.  It's a test resource so we should use the test jar.  Please let me know if this make sense.

Ah, ok, thank you.  Y, I was inclined to put the test resources in main and then import the package only as <scope>test<scope> in the other modules...I think this is what Lucene does.  But, y, we can move everything back to test if that's the norm...sorry about that.  

Ah I was following [~lewismc] lead from any23 using the test-jar.  I personally feel it's more clear so people don't accidentally use it as dependency for anything but tests.

K.  Moving everything back to test now.

Ack




-- 
*Lewis*


Looks like I have to move the MockParserTest out of the test-resources module or else it will get called by every module that uses the test-resources. Ha!

So, we're zipping _all_ the test files into a jar, and then each parser module has to grab tika-test-resources-tests.jar and unzip it even though it might use only a few of the files.  The total tika-2.x directory after a build takes up ~2.0gb vs 0.6gb for 1.x, and then there's the time.  I wonder if there's a more efficient way to do this...or is this acceptable to everyone?

I remember [~tpalsulich] and I were advocating for moving the test-docs into subfolders by file type, -but [~nick] had a persuasive argument for leaving the test-docs all in one folder- [0].  I wonder if it might be time to consider moving the test files into the appropriate modules?  Not part of this ticket.:)

Misremembered Nick's point: http://mail-archives.us.apache.org/mod_mbox/tika-dev/201503.mbox/%3Calpine.DEB.2.02.1503111540010.19892@urchin.earth.li%3E

Yep it may make sense to move the test-docs into sub folders by type in the appropriate modules.

K.  Just pushed the "undo" moving all tika-test-resources back to src/test.  Sorry about that, [~bobpaulin], and thank you for figuring out how I had botched it.

I'm getting a clean local build with the ner models pre-pulled.  

I like the idea of putting the docs in each module.  I tried to do this initially only to find many of the tests include asserts for documents that have nothing to do with the parser under test.  So I feel if we go this route we're going to end up doing more than moving documents around but also refactoring a number of tests. 

Near term it might be easier to keep the docs in one place.  The unzipping is something that could be addressed however with some modifications to some of the test classes to use getResourceAsStream.  There might be some limitations here.  But that would remove the need to unzip.  Might be worthwhile to understand how much time is spent unzipping before going down this route.

In all honesty, if one takes a step back, regardless of of test resources
are packaged, the important thing is that they are NOT bundles with the
modules which rely upon them.
Everyone, always, has the ability to run with a -DskipTests or
alternatively, for development purposes, run an individual Maven test via
-Dtest=testXYZ.
Lucene is really struggling with all of this stuff for the last year or so,
if you look at the blocking tickets over there a number of them are related
to more or less this exact same thing.
Once we get this sorted it will be much better for Tika in general. Good
work troops




-- 
*Lewis*


FAILURE: Integrated in tika-2.x #22 (See [https://builds.apache.org/job/tika-2.x/22/])
TIKA-1851: move all test resources back to src/test from src/main in (tallison: rev 249105aa397f962fae8b0ac1980ae7b20ea82b25)
* tika-parsers/src/test/java/org/apache/tika/parser/mock/MockParserTest.java
* tika-test-resources/src/test/java/org/apache/tika/parser/mock/MockParser.java
* tika-batch/pom.xml
* tika-test-resources/src/test/java/org/apache/tika/parser/mock/MockParserTest.java
* tika-test-resources/src/main/java/org/apache/tika/TikaTest.java
* tika-test-resources/src/test/java/org/apache/tika/config/AbstractTikaConfigTest.java
* tika-parser-modules/pom.xml
* tika-parsers/src/test/java/org/apache/tika/config/TikaDetectorConfigTest.java
* tika-test-resources/src/test/java/org/apache/tika/TikaTest.java
* tika-test-resources/src/main/java/org/apache/tika/parser/mock/MockParser.java
* tika-test-resources/src/main/java/org/apache/tika/config/AbstractTikaConfigTest.java
* tika-test-resources/src/test/resources/META-INF/services/org.apache.tika.parser.Parser
* tika-server/pom.xml
* tika-test-resources/src/main/resources/META-INF/services/org.apache.tika.parser.Parser
* tika-test-resources/pom.xml
* tika-parsers/pom.xml


Regression in Tika advanced module and also multiple versions of logging
interface slf4j. We should log a ticket to look into scope and exclusions
for the advanced module.




-- 
*Lewis*


SUCCESS: Integrated in tika-2.x #23 (See [https://builds.apache.org/job/tika-2.x/23/])
TIKA-1851: remove dependency in tika-examples on tika-core-tests.jar (tallison: rev 2b3cce22caa2387dd8174b9bfc0179a6d7225e41)
* tika-example/pom.xml
* tika-batch/src/test/java/org/apache/tika/batch/fs/BatchDriverTest.java
* tika-batch/src/test/java/org/apache/tika/batch/fs/BatchProcessTest.java


I got a clean build w/o any pre-installed modules, so much better, thanks!

After poking around a bit, my vote would be to (a) move the test resources to their respective modules, and (b) move the test code back into tika-core. I don't see a lot of benefit from having a separate test-resources module, and the oddity of having test files outside of the modules, the unpacking of this artifact, etc. feels like enough of a minus to warrant the effort to segment resources.

Y, thank you, [~bobpaulin]! 

I'm attaching the output of a bit of hackery to find which files are used in which modules.  ***WARNING: the script pulled file names from anywhere in the java source code, including comments and unit tests so there are some false positives (e.g. a unit test in the SQLite parser that ensures that an embedded testWORD_1img.doc is extracted) ***

If we assume that tika-parsers would be able to draw all test files from the child modules within tika-parser-modules, there appear to be only 15ish files that are used in more than one child parser-module. 

This might help us figure out what the best arrangement is.

[~kkrugler], y, I'm happy to move the classes back to tika-core, and I'd slightly prefer to move the test files to their appropriate modules.

How do we handle the 15ish files?  Are there other items that should cause concern with this move?  What are the other options?

[~lewismc], do I understand correctly, that you'd be against putting the test files into the specific parser modules?

Thank you, all!

Hi [~tallison@apache.org] - thanks for generating this output.

Unless someone objects soon, I think I might take a whack at moving all of the HTML parser test files back into that module, and verifying that nothing breaks. Though I want to finish my hacking on the language detector stuff first.

[~tallison@apache.org]
bq. Lewis John McGibbney, do I understand correctly, that you'd be against putting the test files into the specific parser modules?
If they are packaged along with the artifact then this is adding to the size of the bundle artifact. I would be all for them being in their own module which other bundles rely upon.

They'll be packaged along with the each tika-parser-x-module's tests.jar but not with any main code that someone would actually use.  Or, [~bobpaulin], do I have this wrong, and the test files will be packaged with the bundles if we make those?

[~tallison@mitre.org] You are correct.  If they are in the test directory they would not be packaged with the main jars.  They would only be a part of the test jars if we were creating them for the individual modules, which we are not.  I think the bigger issue is all the documents that are shared in the individual tests.  So there's the choice of duplicating them in each module,  keeping them in tika-test-resources, or refactoring tests to not require the shared documents.  In the case of the later perhaps integration tests requiring different combinations of documents would be better served in tika-app.  There are risks to moving these things around.  I am curious what [~lewismc] is seeing in Lucene.  I think the purest in me says unit tests should only involve code/documents specific to the module, but the pragmatist says it's risky to change these things.  To manage the pain it would be good hear what's up with Lucene.

Y. Thought that was a crazy question but wanted to make sure I wasn't misunderstanding [~lewismc]'s concern.

Hi folks, I was referring to the [obscene size of the Lucene artifacts|https://issues.apache.org/jira/browse/LUCENE-6572?jql=project%20%3D%20LUCENE%20AND%20resolution%20%3D%20Unresolved%20AND%20priority%20%3D%20Blocker%20ORDER%20BY%20key%20DESC] discussion which is going on. 
In all honesty, as long as we are not shipping test documents around with code then I am fully behind us obtaining consensus. I looks like you guys are making a serious dent in the workload here (and maybe even having fun whilst doing it ;) )


bq. as long as we are not shipping test documents around with code then I am fully behind us obtaining consensus.

Done!

bq. In the case of the later perhaps integration tests requiring different combinations of documents would be better served in tika-app. 

Could we do those in tika-parsers, er, tika-test-resources?  

A proposal (is this the consensus for Step 1?):
# Move all test code out of test resources back to tika-core-tests
# Move test documents from monolithic directory to relevant modules
# Accept a very small amount of duplication of test documents (mostly between the package and office modules)

Step 2:
# Get rid of tika-parsers -- clear out the src/main directory: delete the Activator ([~bobpaulin], do I remember you saying we don't need this?) and move the DigestingParser to core (with a hit on adding a dependency in core on codec)
# Move all tests from tika-parsers to tika-test-resources


+1 for the proposal. Let me know if you want me to take a swing at step 1 for the html parser.

If you beat me to it, please do.  I don't think I'll be able to work on this until mid next week.  Otherwise, I'm happy to take it.

Change course.  See discussion below.  Opened TIKA-1855 to track the new path.

+1 [~tallison@mitre.org] So sounds like we're ok duplicating which is probably the easiest way to distribute the work.  I'm good with step 2.1 but for step 2.2 do we want to keep tika-test-resources our would these tests better fit in tika-app as integration tests?  
also 2.3 Update references to tika-parsers internally to point to the individual parser modules.

UNSTABLE: Integrated in tika-2.x #27 (See [https://builds.apache.org/job/tika-2.x/27/])
TIKA-1851: remove dependency in tika-examples on tika-core-tests.jar (tallison: rev 8debbe1c5441cdd0955ee9634f302f537be3d69e)
* tika-parser-modules/tika-parser-database-module/pom.xml
* CHANGES.txt


