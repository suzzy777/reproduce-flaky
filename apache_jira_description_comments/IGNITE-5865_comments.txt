GitHub user BiryukovVA opened a pull request:

    https://github.com/apache/ignite/pull/2415

    IGNITE-5865: Test fixed.

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/BiryukovVA/ignite IGNITE-5865

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/ignite/pull/2415.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2415
    
----
commit af94f2708c93e9a904f3dac65638f297c93e5543
Author: Vitaliy Biryukov <biryukovvitaliy92@gmail.com>
Date:   2017-08-08T17:29:21Z

    IGNITE-5865: Test fixed.

----


Fixed.

[TC run|https://ci.ignite.apache.org/viewLog.html?buildId=762413&tab=buildResultsDiv&buildTypeId=Ignite20Tests_RunAll]

Hi, currently tests are muted on TC, see https://ci.ignite.apache.org/project.html?projectId=Ignite20Tests&tab=mutedProblems&branch_Ignite20Tests=__all_branches__ for example

I suggest to re-run TC with umuted tests to find out if it is failing now TxDeadlockDetectionTestSuite

[~dpavlov],
Hi, muted tests are run too.
Please, take a look at these links:
[testDeadlocksPartitionedNear|https://ci.ignite.apache.org/project.html?projectId=Ignite20Tests&testNameId=8803221386026271009&tab=testDetails]
[testDeadlocksPartitioned|https://ci.ignite.apache.org/project.html?projectId=Ignite20Tests&testNameId=-6871793332841198308&tab=testDetails]

Hi [~VitaliyB], 

thank you for your reply. It is OK if test results were checked manually
I can see in PR test is passing https://ci.ignite.apache.org/project.html?projectId=Ignite20Tests&tab=testDetails&testNameId=-6871793332841198308&branch_Ignite20Tests=pull%2F2415%2Fhead

I've run some TC builds and realized that not all bugs are fixed.

Github user BiryukovVA closed the pull request at:

    https://github.com/apache/ignite/pull/2415


GitHub user BiryukovVA reopened a pull request:

    https://github.com/apache/ignite/pull/2415

    IGNITE-5865: Test fixed.

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/BiryukovVA/ignite IGNITE-5865

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/ignite/pull/2415.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2415
    
----
commit aedf1ca7dd9b71c923aba4254b93a9055c55bf22
Author: Vitaliy Biryukov <biryukovvitaliy92@gmail.com>
Date:   2017-09-04T15:29:19Z

    IGNITE-5865: Fixed wrong partitioning.

----


[~dpavlov], Fixed.
I've run some builds:
https://ci.ignite.apache.org/viewType.html?buildTypeId=Ignite20Tests_IgniteCacheDeadlockDetection&tab=buildTypeHistoryList&branch_Ignite20Tests=pull%2F2415%2Fhead

The problem was that the test began to work incorrectly after changes in the BinaryMarshaler, hashes of original objects and binary became different. And this led to an incorrect partition of entities in the test. But in some cases, it had to work. I found bugs and fix them in another task. 


Implement primaryKeys method for custom objects.

[~avinogradov], Done. Please, take a look.

Hi, [~agura].  Please, review this issue. [Upsourse|https://reviews.ignite.apache.org/ignite/review/IGNT-CR-331]
The first problem was that the test began to work incorrectly after changes in the BinaryMarshaler, hashes of original objects and binary became different. And this led to an incorrect partition of entities in the test.
The second problem was that transaction timeout was too little and sometimes one of the transactions did not have time to process all the keys.

I've implemented new methods "primaryKeys" and "primaryKey" for custom objects and refactored this test using new methods. As well I' ve increased transaction timeout.

Also, I found new bugs:
#  In case of a configuration with near cache and if all entities of one of the transactions involved in the deadlock are on the node being the initiator of this transaction, then immediately after the timeout, the transaction rolls back (without calling DD).
# In some cases "IgniteTxManager.txLocksInfo" method (searches for locks) misses locks.
For example:
In case of a configuration with near cache, entities are created for the near cache and for the ordinal cache. For each entity, their own MVCC candidates are created.
For non-custom objects of type (Integer, etc.), the entity stored in "GridNearTxLocal" is not associated with MVCC candidates with which the same entity is associated in another format stored in "GridDhtTxLocal"

I will add tests for new cases and fix this bags after the merging of this issue.

Also during debugging, I noticed that the "TxDeadlockDetection.findCycle" method sometimes finds a non-existent cycle, but I have not yet reproduced this bug.

[TC run|https://ci.ignite.apache.org/viewLog.html?buildId=826480&tab=buildResultsDiv&buildTypeId=Ignite20Tests_RunAll]

[~VitaliyB] LGTM, but I don't like changes in {{GridCommonAbstractTest}} because :

1. {{IncrementalTestObject}} interface actually is needed only for deadlock detection tests
2. Generalized {{findKeys}} method supports only {{Integer}} and implementations of {{IncrementalTestObject}} interface. It's very strange utility method from developer point of view and can confuse.

Could you please revert changes in {{GridCommonAbstractTest}} and implement this functionality in package that contains deadlock detection tests?

Thanks.

[~agura], Done. Please, take a look.

Thanks.

LGTM! Thanks for your contribution! Merged to master branch.

Hi [~VitaliyB], were tests umuted on Teamcity? Or it is still required to unmute?

Hi [~VitaliyB], I've found tests were still muted. I've enabled tests.

Github user BiryukovVA closed the pull request at:

    https://github.com/apache/ignite/pull/2415


