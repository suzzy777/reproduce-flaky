Here is the initial implementation of guardrails:
||PR||CI||
|[trunk|https://github.com/apache/cassandra/pull/1321]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1145/workflows/9163675f-0392-447b-baab-e2456a4fef40] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1145/workflows/b936cd54-1220-4b9b-8414-81f3be5ac59b]|
The proposed PR is based on a series of patches by [~slebresne], [~jasonstack], [~Gerrrr], [~jakubzytka] and myself.

Some characteristics of this implementation are:
* Guardrails configuration is under [a new section|https://github.com/apache/cassandra/blob/c900258b2de05315706e3733fe7cff254fcc33fb/conf/cassandra.yaml#L1614-L1643] in {{cassandra.yaml}}.
* Each guardrail and the framework itself is disabled by default.
* Guardrails can be dynamically modified through JMX using [this mbean|https://github.com/apache/cassandra/blob/c900258b2de05315706e3733fe7cff254fcc33fb/src/java/org/apache/cassandra/db/guardrails/GuardrailsConfigMBean.java]. Future work will make them updatable also through virtual tables, as soon we have writable VTs.
* Guardrails are only applied to the queries of regular users, superusers and internal queries are excluded from guardrails.
* Guardrails associated to client requests can only be triggered on the coordinator. We will support replica-side guardrails associated to client requests in a followup ticket.
* There are initial threshold guardrails for the number of tables, indexes and materialized views.
* There is an enable/disable guardrail for user-provided timestamps.
* There are guardrails for disallowing and/or warning on a set of table properties.

started first batch of review, left comments in PR but had a few high level ones

* Why try to offer a pluggable implementation for the leaf types?   What value do we get allowing a pluggable way to override how we check a volatile field?
* what are the plans for listeners?  They are mostly dead code
* why 2 different configuration systems?  I 100% get why you would want a new MBean, but don't get why we need 2 different config systems: GuardrailOptions vs GuardrailConfig
* ClientState being part of the base interface could become a problem when you integrate with track_warnings, as they plugin to places shared by query and background services (compaction/repair); not a blocker for this patch as you have scoped moving track_warnings to guardrails, but just something to think about
* some checks offer warn/fail, and others make this 2 different checks: disallowTableProperties, etc.  Should these not be simplified to a single check?

moved to 4.x not because I am saying "this doesn't belong into 4.1" but more that this was not committed, so should use the .x versions

I am off for the year after this week (Friday is my last day).  Ill try to prioritize review to make sure I don't drop it, but if still pending by then can pick back up January 3rd

bq. I am off for the year after this week (Friday is my last day). Ill try to prioritize review to make sure I don't drop it, but if still pending by then can pick back up January 3rd 

Thanks for the update, I'll also try to prioritize this during this week. It would be great if we manage to get this ready by the end of the week so we can start working on the rest of the tickets in the guardrails epic.

I think our main concern at this point is the nested yaml config. We don't have a clear outcome for the discussion about that in the mail list, although it seems that probably we are going in that direction. I'll try to get ready a version of the patch with nested config, even if we miss some of the ongoing config improvements.

bq. We don't have a clear outcome for the discussion about that in the mail list, although it seems that probably we are going in that direction

Thats my reading as well; there are some small concerns with nesting but most are leaning towards nesting; the main talking point now is how deep and what groupings.  I am also planning to flesh out CASSANDRA-17166 once Ekaterina's work gets merged, so would allow getter/setters, using camel case and have yaml convert to snake, and support "." notation for nested configs.

bq. I think our main concern at this point is the nested yaml config

As long as we are not releasing 4.1 soon, we can also prob go with "every commit can break the yaml" until the epic is fully closed; so can prob move forward even though the email thread isn't fully complete.

bq. I'll try to get ready a version of the patch with nested config, even if we miss some of the ongoing config improvements.

works for me.

[Here|https://github.com/adelapena/cassandra/commit/e2cadadd628ff70970cda6b8ecb9e2f3f45a6123] is a first, minimal version of nested config. Nesting is limited to {{GuardrailOptions}} and {{cassandra.yaml}} and the rest is as flat as before. [This other commit|https://github.com/adelapena/cassandra/commit/bb24a63cce0f2c6576875b48d8f7854edcc8af49] extends this a bit so the guardrail classes accept the nested objects, although JMX is still flat for convenience. If it looks good I'll add it to the PR.

{code}
# Guardrail to warn or fail when creating more user tables than threshold. Defaults to -1 to disable.
     tables:
         warn_threshold: -1
         fail_threshold: -1

     # Guardrail to warn or fail when creating more columns per table than threshold. Defaults to -1 to disable.
     columns_per_table:
         warn_threshold: -1
         fail_threshold: -1

     # Guardrail to warn or fail when creating more secondary indexes per table than threshold. Defaults to -1 to disable.
     secondary_indexes_per_table:
         warn_threshold: -1
         fail_threshold: -1

     # Guardrail to warn or fail when creating more materialized views per table than threshold. Defaults to -1 to disable.
     materialized_views_per_table:
         warn_threshold: -1
         fail_threshold: -1

     # Guardrail to ignore or reject properties when creating tables. By default all properties are allowed.
     table_properties:
         ignored_values: []
         disallowed_values: []
{code}

LGTM; though would drop "_values" in table_properties

{code}
validate("guardrails.materialized_views_per_table")
{code}

we did the same for TrackWarnings; LGTM.

If we assume the nested convo doesn't get flat out rejected (mostly people are positive to it) then CASSANDRA-17166 can fix your concerns for getter/setters; I know that the yaml will be interesting with your patch, but prefer CASSANDRA-17166 fixes those issues rather than you dealing with it in this patch (your getter/setters are currently exposed as camel case in yaml; found the same bug in TrackWarnings).

Once you merge into the PR can view whole patch together; think we are close!

bq. Once you merge into the PR can view whole patch together; think we are close!

I have added the nested config to the PR, rebased and run CI for [j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1184/workflows/2c0a4c55-f740-41db-8356-9b222bb38815] and [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1184/workflows/ecab9e8a-f7a5-430b-bf13-884a7c54852f].

bq.  though would drop "_values" in table_properties

Makes sense, done.

bq. then CASSANDRA-17166 can fix your concerns for getter/setters; I know that the yaml will be interesting with your patch, but prefer CASSANDRA-17166 fixes those issues rather than you dealing with it in this patch (your getter/setters are currently exposed as camel case in yaml; found the same bug in TrackWarnings).

It would be great if we were able to use Jackson annotations and have private attributes. I guess that those annotations would also make things easier for the settings virtual table. In the meantime, I guess we could leave the camel case getters/setters and public snake case attributes and wait for a better solution in CASSANDRA-17166. We could also use snake casing in the getters/setters, but that would mean extending the snake casing workaround up to the getters in the {{Threshold.Config}}/{{Values.Config}} interfaces, which is not ideal IMO.

bq.  able to use Jackson annotations and have private attributes.

The patch allows plugging SnakeYAML and Jackson for object mapping, but currently defaults to SnakeYAML; though I did add support for @JsonIgnore, but other stuff like @JsonProperty are not supported (so can't rename).

bq. I guess that those annotations would also make things easier for the settings virtual table.

ATM harder!  That is another issue we need to solve in Cassandra, settings vtable makes assumptions which are not valid today (well, if it supported nested that is), so I am in favor of centralizing the logic of "what is a property" so YAML AND vtable both use the same code path (it is so much easier to enhance our logic down the line...); but again, not in this ticket.

bq.  I guess we could leave the camel case getters/setters and public snake case attributes and wait for a better solution

Yeah, I am in favor of that as well.  I see this as a bug in our config layer, so fixing config layer is best IMO.  Its present in more than guardrails, so patching every access is... yeah lets just fix config layer...

bq. We could also use snake casing in the getters/setters

I wouldn't, again I see this as a bug in the config layer, so lets fix config layer.

So it seems we are in agreement regarding config, we'll go back over this once we fix the config layer.

I have pushed one last commit renaming "fail" thresholds and related stuff to "abort". I think the PR is ready for another round of review, I hope I'm not missing anything from the previous comments.

cool, wrapping things up for something else, so can take a look later today.

bq. renaming "fail" thresholds and related stuff to "abort"

for this ticket sounds good, but will leave the final desired naming to CASSANDRA-15234; I know Benedict had issues as this is not consistent in the code.  [~e.dimitrova] will solve all problems!

oh, said this to her in slack... just to be public..

[~e.dimitrova], if this ticket goes in before CASSANDRA-15234 don't worry about "fixing" the configs, we can pick that up in January after the fact.

{quote}[~e.dimitrova] will solve all problems!
{quote}
Only putting general framework; if I strive for "all problems" we will never commit that work :D 

About "fail" and "abort", I haven't thought about or discussed this with anyone. CASSANDRA-15234 is more about a liberation of the parameters' names from the units suffixes and to have a common format noun_verb, things like that :) But I would be happy to address this topic too when the time comes. 
{quote} [~e.dimitrova], if this ticket goes in before CASSANDRA-15234 don't worry about "fixing" the configs, we can pick that up in January after the fact.
{quote}
Thank you! My plan Is no rebase until we are done with the current review cycle as otherwise it becomes never ending story, running in circles. 

bq. But I would be happy to address this topic too when the time comes. 

Lets include that in followup work for  CASSANDRA-15234, maybe include it as an umbrella for guardrails?

bq. if I strive for "all problems" we will never commit that work

Believe in yourself!

[~adelapena] did another pass (closer this time) and think we are almost there, the PR comments are mostly small.

Thanks for all the hard work, only remaining comment is https://github.com/apache/cassandra/pull/1321#discussion_r761513040 (make the field final).

Can you run the upgrade (python and jvm-dtest) tests?  Can you also run the new tests in the repeated logic to make sure no unexpected flaky behavior comes in?

Overall LGTM, +1 assuming field becomes final, and the upgrade/repeat tests are passing.

[~dcapwell] thanks for the careful review :)

I have just incorporated the last suggestions about those final fields and the insertion-ordered set.

The PR is rebased and CI is running for [j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1197/workflows/cc92de49-182b-4995-81d9-cf760fd8d2a6] and [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1197/workflows/6c5a4e15-1520-48ca-92bf-2b970c7060e2] with upgrade tests and 100 repetitions of the new tests. That's not a very high number of repetitions but the previous CI runs also included repeated runs and they weren't very different.

As it's mentioned on the PR, this was initially meant to go into a feature branch, but we haven't included anything in the framework that isn't used by the six guardrails that are being added, and these guardrails deliver some useful new features, so this can go straight into trunk. The rest of the guardrails and features will be added by the other tickets in the epic (CASSANDRA-17146).

[~stefan.miklosovic] anything else to add? Are we ready to merge, assuming CI looks good?

[~adelapena] would you mind to elaborate on CASSANDRA-17180 in the light of the proposed patch? Do you think if that is feasible?

One thing I am not sure about is that where we do a "cut" between guardrails and startup checks. As I went through the patch, it seems to me that the guardrails framework is "request oriented", having ClientState passed around and so on. I do not want that nor I need that for tasks related to startup of the node. How is this framework coping with it?

[~smiklosovic] guardrails are meant to be used to repeatedly evaluate values, mainly in queries but also in background processes such as compaction. For the latter case the guardrail would simply use a {{null}} {{ClientState}}. However, guardrails aren't meant to replace startup checks, which have a different lifecycle and trigger different actions. So I don't think that CASSANDRA-17180 should be implemented with guardrails.

I have rebased, squashed and run pre-commit CI:
||PR||CI||
|[trunk|https://github.com/apache/cassandra/pull/1321]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1202/workflows/7b16e36a-74e8-487d-ac57-95aac3fa837c] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1202/workflows/3e48ee8f-3695-4cd1-b8e5-9c1ed90d989a]|

The test failures seem [unrelated|https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-trunk/trunk], and the repeated runs on the new tests pass. I think we are ready to commit.

Committed to {{trunk}} as [7871a2854217acc89d2f885619243a442cf68e22|https://github.com/apache/cassandra/commit/7871a2854217acc89d2f885619243a442cf68e22]. Thanks for reviewing.

