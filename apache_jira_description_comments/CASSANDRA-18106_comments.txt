Initial patch I was using in testing can be seen here - [https://github.com/riptano/ccm/compare/master...ekaterinadimitrova2:ccm:16895-trunk?expand=1]

A few remarks:
 * it was created when trunk was 4.1, but I believe we will have to go for 5.0
 * It relies on CASSANDRA_USE_JDK17 but this will have to change for 5.0+ considering CASSANDRA-18133 where CASSANDRA_USE_JDK11 or respectively CASSANDRA_USE_JDK17  (when we switch to 11+17) will be removed in favor of JdkProperties
 * I think we will need to push the CCM patch and the switch to JdkProperties one after another as otherwise we need to add intermediate code which sounds counter-productive to me

 

CC [~mck] and [~brandon.williams] 

We do not have CCM component so assigning it to CI. Assigning 4.x for fix version but if we see some issue with the JDK detection we might want to test any patches with the previous Cassandra versions too

I have a branch in progress [here|https://github.com/driftx/ccm/tree/CASSANDRA-18106] that builds on Ekaterina's initial patch, and is enough to run the dtests without any errors that seem to be python's fault.  It keys on '4.2' but this should continue to work after CASSANDRA-17973.

The problem with not having CASSANDRA_USE_JDK17 is that 4.0 uses CASSANDRA_USE_JDK11 to adjust not just build versions, but [run versions as well|https://github.com/riptano/ccm/blob/master/ccmlib/common.py#L915], and JdkProperties only really indicates build versions.  Currently, if you have CASSANDRA-18133, this patch will always use 17 because it appears in the supported versions.  I'm not sure if we need a way to control this, or what the best way would be now.

bq. I think we will need to push the CCM patch and the switch to JdkProperties one after another as otherwise we need to add intermediate code which sounds counter-productive to me

If this patch doesn't find the supported versions from JdkProperties it will default to 11, so I think it should be safe to push first in that regard.

{quote}If this patch doesn't find the supported versions from JdkProperties it will default to 11, so I think it should be safe to push first in that regard.
{quote}
Considering this is in a check that we have Cassandra version post 4.2, I agree. 
{quote}to push first in that regard.
{quote}
JdkProperties is already in trunk and it uses some hack to workaround the need of CASSANDRA_USE_JDK11 in CI, if I didn't misunderstand anything.

We need to be careful that we do not change anything for DSE or other products using CCM. The explicit approach with Cassandra version sounds reasonable to me in that regard

Please ignore JdkProperties. It has no meaning in this ticket. It does not set or workaround {{CASSANDRA_USE_JDK11 CASSANDRA_USE_JDK11}}. All it does, during the build, is set the properties {{java.version.X}} and {{use-jdkX}} which are used in the build.xml for codepaths (if/depends).

Testing on older branches to ensure nothing broke:

||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18106-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/861/workflows/7c29fe94-dbf4-42eb-ab01-f010259f2f2d]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18106-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/862/workflows/40e324e2-42b8-49d1-b15a-36d644d306a2]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18106-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/859/workflows/d4c4d4e1-72be-426a-b74e-9f67682d4e20], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/859/workflows/8c4a4db1-eae0-43f6-9480-2f118e8988b9]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18106-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/860/workflows/05c06d65-9ae5-461c-a0df-e6f900c5d202], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/860/workflows/b7ebdda7-451a-486c-adb4-8908a8ff9124]|


+1 (EDIT: on the patch)

 
{quote}+1 
{quote}
 I am lost considering our earlier conversation. +1 on the approach or +1 to commit?

My understanding from the previous conversation in Slack is the current patch will break Java 8 Python tests with trunk. So I am +1 on the patch, but not on commit/retag yet as this will break trunk. Thank you

it won't break j8 on trunk source building ccm usage. so long as both JAVA_HOME and PATH is set to the jdk you want to use. 

bq. My understanding is the current patch will break Java 8 Python tests with trunk.

I think there's a good chance that's true, I will investigate and update.

{quote}I think there's a good chance that's true, I will investigate and update.
{quote}
Thanks. :)

||Branch||CI||
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18106-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/863/workflows/7fde3481-a4fe-4dc3-87a5-85efe0444910], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/863/workflows/3d4b4877-d2e3-4dd3-81bf-cf2a0874f278]|

Looks like I was wrong, 8 passes.


Please check here, 8 passes with 11:

[https://app.circleci.com/pipelines/github/driftx/cassandra/863/workflows/7fde3481-a4fe-4dc3-87a5-85efe0444910/jobs/12336/steps]

It is visible in step "Run dtests"

Easy to miss, I did before so always checking since then :) 

I suspect you need to add 8 in the array maybe?

It did indeed run with 11, but it detected 8 correctly: 

bq. 20:57:54,193 ccm INFO Starting node1 with JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64 java_version=8 cassandra_version=4.2, 

Whatever set JAVA_HOME pointed at 11.

Got the same result [here|https://app.circleci.com/pipelines/github/driftx/cassandra/863/workflows/43619e1b-e52e-4b0a-ab36-f520ada13c18/jobs/12380] but instead of adding to the array, I [removed it|https://github.com/driftx/ccm/commit/8cbcebaab021f0812c678a2912616cbde0898c9b].

Well I still see pointing to 11 unfortunately :( 

Yes, I also noticed it detected it which is definitely step forward in the right direction :) Thanks

{quote}
Please check here, 8 passes with 11:
https://app.circleci.com/pipelines/github/driftx/cassandra/863/workflows/7fde3481-a4fe-4dc3-87a5-85efe0444910/jobs/12336/steps
{quote}

{noformat}
20:57:31,597 ccm INFO node1: current_java_version=8, current_java_home_version=8, jvm_version=None, for_build=False, cassandra_version=4.2, install_dir=/home/cassandra/cassandra, env={'CIRCLE_WORKFLOW_JOB_ID': '5b542db9-b7e6-4dc1-a777-17c39954de86', 'PYTHONUNBUFFERED': 'true', 'JDK_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_CYTHON': 'true', 'REPEATED_UTESTS_STRESS': '<nil>', 'REPEATED_ANT_TEST_CLASS': '<nil>', 'HOSTNAME': 'de4e43665ea0', 'REPEATED_JVM_UPGRADE_DTESTS_COUNT': '500', 'REPEATED_UTESTS_COUNT': '500', 'REPEATED_UTESTS_LONG_COUNT': '100', 'JAVA_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'SSH_AUTH_SOCK': '/tmp/circleci-2863131836/ssh_auth_sock', 'CIRCLE_REPOSITORY_URL': 'git@github.com:driftx/cassandra.git', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPEATED_UTESTS_LONG': '<nil>', 'CIRCLE_WORKING_DIRECTORY': '~/', 'CIRCLE_INTERNAL_CONFIG': '/.circleci-runner-config.json', 'CIRCLECI': 'true', 'REPEATED_DTESTS_COUNT': '500', 'CCM_HEAP_NEWSIZE': '256M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'CIRCLE_PROJECT_REPONAME': 'cassandra', 'SPLIT_TESTS': 'compression_test.py::TestCompression::test_compression_cql_disabled_with_alter cqlsh_tests/test_cqlsh.py::TestCqlsh::test_describe_describes_non_default_compaction_parameters cqlsh_tests/test_cqlsh.py::TestCqlshUnicode::test_cqlsh_file_cmdline cqlsh_tests/test_cqlsh_copy.py::TestCqlshCopy::test_reading_max_insert_errors ', 'REPEATED_LARGE_DTESTS_COUNT': '100', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra-dtest', 'CQLSH_PYTHON': '/usr/bin/python3.8', 'REPEATED_UTESTS_FQLTOOL': '<nil>', 'CIRCLE_WORKFLOW_ID': '7fde3481-a4fe-4dc3-87a5-85efe0444910', 'REPEATED_JVM_DTESTS': '<nil>', 'KEEP_TEST_DIR': 'true', 'REPEATED_ANT_TEST_TARGET': 'testsome', 'CIRCLE_USERNAME': 'driftx', 'DTEST_REPO': 'https://github.com/driftx/cassandra-dtest.git', 'REPEATED_UPGRADE_DTESTS': '<nil>', 'CIRCLE_BRANCH': 'CASSANDRA-18106-trunk', 'DEFAULT_DIR': '/home/cassandra/cassandra-dtest', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'VIRTUAL_ENV': '/home/cassandra/env3.8', 'CIRCLE_PROJECT_USERNAME': 'driftx', 'CIRCLE_BUILD_NUM': '12336', 'REPEATED_TESTS_STOP_ON_FAILURE': 'false', 'REPEATED_SIMULATOR_DTESTS_COUNT': '500', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CIRCLE_NODE_TOTAL': '50', 'REPEATED_ANT_TEST_VNODES': 'false', 'REPEATED_DTESTS': '<nil>', 'CIRCLE_SHA1': 'ce8134b0cccfbd4a20d9e235f5a8818a91acf95d', 'REPEATED_ANT_TEST_COUNT': '500', 'NO_PROXY': '127.0.0.1,localhost,circleci-internal-outer-build-agent', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '0', 'CIRCLE_BUILD_URL': 'https://circleci.com/gh/driftx/cassandra/12336', 'BASH_ENV': '/tmp/.bash_env-63efe9fd3252f1288bc39f49-0-build', 'REPEATED_JVM_DTESTS_COUNT': '500', 'REPEATED_UTESTS': '<nil>', 'REPEATED_UTESTS_FQLTOOL_COUNT': '500', 'CIRCLE_NODE_INDEX': '0', 'REPEATED_JVM_UPGRADE_DTESTS': '<nil>', 'REPEATED_UTESTS_STRESS_COUNT': '500', 'REPEATED_ANT_TEST_METHODS': '<nil>', 'CIRCLE_WORKFLOW_WORKSPACE_ID': '7fde3481-a4fe-4dc3-87a5-85efe0444910', 'DTEST_BRANCH': 'CASSANDRA-18106', 'CIRCLE_JOB': 'j8_cqlsh_dtests_py38', 'PS1': '(env3.8) ', 'REPEATED_UPGRADE_DTESTS_COUNT': '25', 'CIRCLE_SHELL_ENV': '/tmp/.bash_env-63efe9fd3252f1288bc39f49-0-build', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/usr/lib/jvm/java-8-openjdk-amd64/bin:/home/cassandra/env3.8/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'CIRCLE_INTERNAL_SCRATCH': '/tmp/circleci-2863131836', 'CI': 'true', 'CIRCLE_INTERNAL_TASK_DATA': '/tmp/.circleci-task-data-63efe9fd3252f1288bc39f49-0-build', 'REPEATED_LARGE_DTESTS': '<nil>', 'REPEATED_SIMULATOR_DTESTS': '<nil>', 'OLDPWD': '/home/cassandra/cassandra-dtest', '_': '/home/cassandra/env3.8/bin/pytest', 'PYTEST_CURRENT_TEST': 'compression_test.py::TestCompression::test_compression_cql_disabled_with_alter (call)', 'CASSANDRA_INCLUDE': '/tmp/dtest-nhq_jsqs/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '256M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/tmp/dtest-nhq_jsqs/test/node1/conf'}
20:57:31,597 ccm INFO node1: using Java 11 for the current invocation
20:57:31,698 ccm INFO node1: current_java_version=8, current_java_home_version=11, jvm_version=None, for_build=False, cassandra_version=4.2, install_dir=/home/cassandra/cassandra, env={'CIRCLE_WORKFLOW_JOB_ID': '5b542db9-b7e6-4dc1-a777-17c39954de86', 'PYTHONUNBUFFERED': 'true', 'JDK_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'CASS_DRIVER_NO_CYTHON': 'true', 'REPEATED_UTESTS_STRESS': '<nil>', 'REPEATED_ANT_TEST_CLASS': '<nil>', 'HOSTNAME': 'de4e43665ea0', 'REPEATED_JVM_UPGRADE_DTESTS_COUNT': '500', 'REPEATED_UTESTS_COUNT': '500', 'REPEATED_UTESTS_LONG_COUNT': '100', 'JAVA_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'SSH_AUTH_SOCK': '/tmp/circleci-2863131836/ssh_auth_sock', 'CIRCLE_REPOSITORY_URL': 'git@github.com:driftx/cassandra.git', 'CASS_DRIVER_NO_EXTENSIONS': 'true', 'REPEATED_UTESTS_LONG': '<nil>', 'CIRCLE_WORKING_DIRECTORY': '~/', 'CIRCLE_INTERNAL_CONFIG': '/.circleci-runner-config.json', 'CIRCLECI': 'true', 'REPEATED_DTESTS_COUNT': '500', 'CCM_HEAP_NEWSIZE': '256M', 'CASSANDRA_SKIP_SYNC': 'true', 'ANT_HOME': '/usr/share/ant', 'CIRCLE_PROJECT_REPONAME': 'cassandra', 'SPLIT_TESTS': 'compression_test.py::TestCompression::test_compression_cql_disabled_with_alter cqlsh_tests/test_cqlsh.py::TestCqlsh::test_describe_describes_non_default_compaction_parameters cqlsh_tests/test_cqlsh.py::TestCqlshUnicode::test_cqlsh_file_cmdline cqlsh_tests/test_cqlsh_copy.py::TestCqlshCopy::test_reading_max_insert_errors ', 'REPEATED_LARGE_DTESTS_COUNT': '100', 'JAVA8_HOME': '/usr/lib/jvm/java-8-openjdk-amd64', 'PWD': '/home/cassandra/cassandra-dtest', 'CQLSH_PYTHON': '/usr/bin/python3.8', 'REPEATED_UTESTS_FQLTOOL': '<nil>', 'CIRCLE_WORKFLOW_ID': '7fde3481-a4fe-4dc3-87a5-85efe0444910', 'REPEATED_JVM_DTESTS': '<nil>', 'KEEP_TEST_DIR': 'true', 'REPEATED_ANT_TEST_TARGET': 'testsome', 'CIRCLE_USERNAME': 'driftx', 'DTEST_REPO': 'https://github.com/driftx/cassandra-dtest.git', 'REPEATED_UPGRADE_DTESTS': '<nil>', 'CIRCLE_BRANCH': 'CASSANDRA-18106-trunk', 'DEFAULT_DIR': '/home/cassandra/cassandra-dtest', 'HOME': '/home/cassandra', 'LANG': 'en_US.UTF-8', 'VIRTUAL_ENV': '/home/cassandra/env3.8', 'CIRCLE_PROJECT_USERNAME': 'driftx', 'CIRCLE_BUILD_NUM': '12336', 'REPEATED_TESTS_STOP_ON_FAILURE': 'false', 'REPEATED_SIMULATOR_DTESTS_COUNT': '500', 'JAVA11_HOME': '/usr/lib/jvm/java-11-openjdk-amd64', 'CIRCLE_NODE_TOTAL': '50', 'REPEATED_ANT_TEST_VNODES': 'false', 'REPEATED_DTESTS': '<nil>', 'CIRCLE_SHA1': 'ce8134b0cccfbd4a20d9e235f5a8818a91acf95d', 'REPEATED_ANT_TEST_COUNT': '500', 'NO_PROXY': '127.0.0.1,localhost,circleci-internal-outer-build-agent', 'PYTHONIOENCODING': 'utf-8', 'SHLVL': '0', 'CIRCLE_BUILD_URL': 'https://circleci.com/gh/driftx/cassandra/12336', 'BASH_ENV': '/tmp/.bash_env-63efe9fd3252f1288bc39f49-0-build', 'REPEATED_JVM_DTESTS_COUNT': '500', 'REPEATED_UTESTS': '<nil>', 'REPEATED_UTESTS_FQLTOOL_COUNT': '500', 'CIRCLE_NODE_INDEX': '0', 'REPEATED_JVM_UPGRADE_DTESTS': '<nil>', 'REPEATED_UTESTS_STRESS_COUNT': '500', 'REPEATED_ANT_TEST_METHODS': '<nil>', 'CIRCLE_WORKFLOW_WORKSPACE_ID': '7fde3481-a4fe-4dc3-87a5-85efe0444910', 'DTEST_BRANCH': 'CASSANDRA-18106', 'CIRCLE_JOB': 'j8_cqlsh_dtests_py38', 'PS1': '(env3.8) ', 'REPEATED_UPGRADE_DTESTS_COUNT': '25', 'CIRCLE_SHELL_ENV': '/tmp/.bash_env-63efe9fd3252f1288bc39f49-0-build', 'CCM_MAX_HEAP_SIZE': '1024M', 'PATH': '/usr/lib/jvm/java-11-openjdk-amd64/bin:/usr/lib/jvm/java-8-openjdk-amd64/bin:/home/cassandra/env3.8/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 'CIRCLE_INTERNAL_SCRATCH': '/tmp/circleci-2863131836', 'CI': 'true', 'CIRCLE_INTERNAL_TASK_DATA': '/tmp/.circleci-task-data-63efe9fd3252f1288bc39f49-0-build', 'REPEATED_LARGE_DTESTS': '<nil>', 'REPEATED_SIMULATOR_DTESTS': '<nil>', 'OLDPWD': '/home/cassandra/cassandra-dtest', '_': '/home/cassandra/env3.8/bin/pytest', 'PYTEST_CURRENT_TEST': 'compression_test.py::TestCompression::test_compression_cql_disabled_with_alter (call)', 'CASSANDRA_INCLUDE': '/tmp/dtest-nhq_jsqs/test/node1/bin/cassandra.in.sh', 'MAX_HEAP_SIZE': '1024M', 'HEAP_NEWSIZE': '256M', 'CASSANDRA_HOME': '/home/cassandra/cassandra', 'CASSANDRA_CONF': '/tmp/dtest-nhq_jsqs/test/node1/conf', 'CASSANDRA_LIBJEMALLOC': '-', 'JVM_EXTRA_OPTS': ' -Dcassandra.migration_task_wait_in_seconds=2'}
20:57:31,699 ccm INFO node1: using Java 11 for the current invocation
20:57:31,741 ccm INFO Starting node1 with JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64 java_version=8 cassandra_version=4.2, install_dir=/home/cassandra/cassandra
{noformat}

Oh, java.supported is providing "1.8" instead of just "8.
{code}
<property name="java.supported" value="1.8,11,17" />
{code}
https://github.com/driftx/cassandra/blob/CASSANDRA-18106-trunk/build.xml#L47

In common.py:: get_supported_jdk_versions  can you strip the leading "1.", like we also do in JdkProperties: https://github.com/apache/cassandra/commit/d7352209b214559cea944b5df564b653a3379e3a#diff-9a83d3b5c7d2f3fbd1688f184201fe8b64d80935943ff359e0de69f80917f869R30 

Also, trivial, but can we remove the JAVAx_HOME lines (in just trunk): 
https://github.com/apache/cassandra/blob/trunk/.circleci/config.yml#L7971-L7972 

{quote} java.supported is providing "1.8" instead of just "8.
{quote}
Thanks for spotting it
{quote}Also, trivial, but can we remove the JAVAx_HOME lines (in just trunk): 
{quote}
Honestly, we should also take care of CASSANDRA_USE_JDK11 [here|https://github.com/apache/cassandra/blob/trunk/.circleci/config.yml#L231] or to be more accurate in config-2_1.yml and then use generate.sh to propagate the change, etc

One more thing, CCM has its own tests and [JDK tests|https://github.com/riptano/ccm/blob/master/tests/test_lib.py] also exist. I know some of the CCM tests had some trouble to be run and Ariel has a suggested fix that we keep on forgetting (published in CASSANDRA-17861) so might be a good time to look at that one and then update here also the JDK CCM tests accordingly. 

Stripping the '1.8' version down did the trick [here|https://app.circleci.com/pipelines/github/driftx/cassandra/863/workflows/1dedc810-9884-42d5-9d2c-eb911dcd4495].

bq. Also, trivial, but can we remove the JAVAx_HOME lines (in just trunk): 

That's in the templates too, we should probably make another ticket to cleanup circle.  I believe you found the root cause of CASSANDRA-18039 though.

bq. CCM has its own tests and JDK tests also exist

Let me take a look.

With Ariel's [PR|https://github.com/riptano/ccm/pull/746] and then [this patch|https://github.com/driftx/ccm/commit/14f2434e94b39dd51032f88e90e054c1b89ff6e3] everything will pass on java 8 and 11, and 17 only fails because C* doesn't yet run.  I had to remove the cleanup calls as those actually run nodetool cleanup, which doesn't make any sense in that context.

I think we should be ready to commit this, and also Ariel's PR for CASSANDRA-17861.

Alright, so I guess the plan is:
- finish with the other one and commit (CASSANDRA-17861)
- update the JDK tests for 17 for CCM and test
For 17 there is already a patch in CASSANDRA-18258 which I think can be used for testing but it is not yet committed. 
Shall we consider the order of commit being CASSANDRA-17861 and CASSANDRA-18258 and then this one?
I will push also today the patch for CASSANDRA-18247 and I think it will be best to commit it after this one so people do not try to run the python tests and run into weird results because CCM is still not updated
Let me know if you think differently or I missed anything.

That sounds like a good plan to me.

In the last run pushed DTests seems to have failed with JDK11, something weird with Jolokia?

Can you, please, maybe rerun them?

CASSANDRA-18258 got committed today.

I can confirm I tried locally with your CCM branch to start node, run some tests. As expected, it correctly works with 17 with trunk builds 11 and 17. 

I am +1 on clean CI, thanks 

PS I had to remove the "-e" from requirements.txt to be able to install your branch locally. Not sure why

Interesting, they [failed again|https://app.circleci.com/pipelines/github/driftx/cassandra/863/workflows/b154a40b-891a-42d4-9b4e-8e83db4881b3/jobs/12465/tests]. Odd since they passed [before|https://app.circleci.com/pipelines/github/driftx/cassandra/863/workflows/3d4b4877-d2e3-4dd3-81bf-cf2a0874f278] although that was the j11 tests. I'll take a look.

bq. I had to remove the "-e" from requirements.txt to be able to install your branch locally. Not sure why

Well to be honest, I'm not sure why it's there, I just followed what the comment said to do..which is from you :)


That is weird.... we had before that issue around not updating the branch on a second run.

The issue you see now is different and also I can see it installed your branch 

From Configure Virtual Environment and Python dependencies:
-e git+[https://github.com/driftx/ccm.git@14f2434e94b39dd51032f88e90e054c1b89ff6e3#egg=ccm]
{code:java}
Obtaining ccm from git+https://github.com/driftx/ccm.git@CASSANDRA-18106#egg=ccm (from -r /home/cassandra/cassandra-dtest/requirements.txt (line 13))
Cloning https://github.com/driftx/ccm.git (to revision CASSANDRA-18106) to ./env3.6/src/ccm
Running command git clone --filter=blob:none -q https://github.com/driftx/ccm.git /home/cassandra/env3.6/src/ccm
Running command git checkout -b CASSANDRA-18106 --track origin/CASSANDRA-18106
Switched to a new branch 'CASSANDRA-18106'
Branch 'CASSANDRA-18106' set up to track remote branch 'CASSANDRA-18106' from 'origin'.
Resolved https://github.com/driftx/ccm.git to commit 14f2434e94b39dd51032f88e90e054c1b89ff6e3
Preparing metadata (setup.py) ... - \ done{code}

 

I assume it is not CASSANDRA-18258 as your previous run that failed that way was when CASSANDRA-18258 it was still not committed. 

I have had no luck reproducing this yet.

bq. I assume it is not CASSANDRA-18258 as your previous run that failed that way was when CASSANDRA-18258 it was still not committed.

Indeed, it can't be CASSANDRA-18258 for that reason.  I rebased to include it though (because why not) and ran again with the same failures [here|https://app.circleci.com/pipelines/github/driftx/cassandra/874/workflows/09dd4abd-a0bb-4b03-9364-c12d84b46f65]. I feel like there must be bad jdk interaction here somewhere, but everything looks correct in the logs, and it's especially strange that it fails to _stop_ jolokia, but all the important bits it's used for pass.

What I noticed is that the number of failures is different between 30 and 40 so they are flaky tests. The issue is only with JDK11 but we didn't change the image, introducing newer JDK or the jolokia jar that the DTest repo comes with.

I started digging further and I noticed you probably give rerun to the workflow from the UI? Is this correct?
Could it be anything else get cached?
I did another test now - pushed on my end a branch with your ccm repo and I ran into different problem:
This was trying on an 11 build to run the tests with 8 - https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2312/workflows/f7c3bf3f-b3f0-4ab0-82c8-408866dd363c/jobs/18973 This is your commit to your branches on latest trunk.

Then on the same branch with trunk and the current ccm without your branch I didn't notice that problem:
https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2313/workflows/0df1adfb-bf74-4477-86d1-bb4830d8d697/jobs/18976
(I cancelled both builds but if you scroll through the steps)

Can you try to trigger your branch by pushing empty commit? I think what you see is probably cached ccm maybe? 

bq. Interesting, they [failed|https://app.circleci.com/pipelines/github/driftx/cassandra/863/workflows/b154a40b-891a-42d4-9b4e-8e83db4881b3/jobs/12465/tests] again. 

I see in its [logs|https://circleci.com/api/v1.1/project/github/driftx/cassandra/12556/output/106/0?file=true&allocation-id=63fe8dc3d05a281ea75445cf-0-build%2F781E9B7A] that ccm is trying to start up with jdk8, not 11.

I pushed your branch and repeated this failure [here|https://app.circleci.com/pipelines/github/michaelsembwever/cassandra/108/workflows/a84d9a40-2090-4844-a7ad-96490f17ebb5/jobs/4027].

When I removed all {{JAVA8_HOME}} and {{JAVA11_HOME}} env properties from the circleci configs, it correctly runs ccm with jdk11 and fixed the tests, see [here|https://app.circleci.com/pipelines/github/michaelsembwever/cassandra/109/workflows/f4206b43-b6b1-415b-944f-2015ab70ab1c/jobs/4029].


Aha, that gift keeps on giving, thanks!  I've created CASSANDRA-18293 to remove those properly and I think we'll need to do that before we commit here.

And how about Jenkins? (Haven’t checked but I assume the approach was similar)

For the record I would have been fine if this all was handled once in this one ticket. 

I see it being used [here|https://github.com/apache/cassandra-builds/blob/trunk/build-scripts/cassandra-dtest-pytest.sh#L27] and [in the docker image|https://github.com/apache/cassandra-builds/blob/trunk/docker/testing/ubuntu2004_j11.docker#L113] but those affect all versions :(

bq. I see it being used here 

{code}
grep -q _build_multi_java $CASSANDRA_DIR/build.xml
{code}
is never true in any branch, and hasn't been for _a long time_.

bq. and in the docker image but those affect all versions 

Weird, because isn't that the same docker image we're using in circleci ??


{quote}{color:#172b4d}Weird, because isn't that the same docker image we're using in circleci ??{color}
{quote}
Yes, exporting those variables does not change anything here {_}I think{_}?

 

If they are set at all we know they will be used, and they are going into the cassandra user's .bashrc in the docker image, so it seems like it could be problem, but Mck's run used the same image as he points out, so I don't know what's going on.

I believe the answer is circle uses a clean bash env only populated with its own vars and what is put the in the "environment" yaml directive, so the .bashrc is irrelevant there.

So CASSANDRA-18293 should still remove those envs being set in the docker image's .bashrc for the sake of ci-cassandra.a.o (and CASSANDRA-17869 ) ?

CASSANDRA-18293 is targeting them in the circle config where they do have effect; I would remove them as part of CASSANDRA-17869, or even another ticket since that's going to require a docker push.

I am not sure why docker push should be in a separate ticket? 

The only reason is if we decide that those do not have any effect and they are not urgent?

I don't know if they have any effect on Jenkins. They could be necessary, I only know they can be safely removed from circle.

Those are definitely needed for previous versions of Cassandra

I don't think we can remove them anyway... how do you test jvm upgrades when all you have is a single JAVA_HOME?

bq. Those are definitely needed for previous versions of Cassandra

Where? cassandra-builds isn't versioned, nor is ccm. Only since 4.0 were they introduced.

bq. how do you test jvm upgrades when all you have is a single JAVA_HOME?

We only use the jdk that the from and to version has in common. (And we only test adjacent major versions which means there is always a common jdk.)

bq. Where?

[Here|https://github.com/apache/cassandra-dtest/blob/trunk/upgrade_tests/upgrade_base.py#L20].

Gotcha, _python upgrade dtest upgrade_ that are upgrading the jvm during the test… TIL.

Are there really any tests that switch the jdk during the test…? and if so, why any longer? 
A quick search and I cannot find any such tests, and my vote is on not recommending to users (or supporting) switching both C* versions and JDK version on the same node restart (Operators should be de-risking by default, and it's also a significant requirement on us to test and support, as this ticket shows…). 

If we [disable|https://github.com/driftx/cassandra-dtest/commit/e0c1a9ed329a3a15120c409f4317be1351488600] that code and just run with JAVA_HOME, the upgrade test [will pass|https://app.circleci.com/pipelines/github/driftx/cassandra/880/workflows/775218f7-8bdc-49ee-90e1-a00637c53502/jobs/12686].  This is only because it's java8, however, since the upgrade_through_versions test starts at 2.2 and upgrades through majors up to trunk.  At some point, the jdk will need to actually switch in that lineage while the test is executing, which will probably require more information than a single JAVA_HOME provides.

bq. since the upgrade_through_versions test starts at 2.2 and upgrades through majors up to trunk.

i thought we minimised this (already) to only do upgrade paths between adjacent major versions?
(This is what I'm doing in CASSANDRA-17973, i.e. the bump to 5.0 means all upgrade tests from 3.x versions no longer happen.) 

bq. only do upgrade paths between adjacent major versions?

You're right, it's [not that bad|https://github.com/apache/cassandra-dtest/blob/trunk/upgrade_tests/upgrade_manifest.py#L182].  I guess that does it, then? We'll just follow JAVA_HOME.

I am thinking - if we consider Java 8 breaking change, then I would expect we don't change JDKs but we test the paths with 8 and then when we remove 8, we test those that are capable of handling 11. Considering we agreed as a community to maintain three versions at a time (with exception for 3.0) this sounds almost already limiting to testing adjacent versions. 

But let's consider if those were 4, 5, 6 (ignore 4.1 for a moment which someone will say it is minor) and they all run with Java 11, we are not going to test the upgrade from 4 to 6?

So the way I understand is that whatever is the common JDK version dictates to some extend the upgrade path. 

Our upgrade tests also follow the upgrade paths people will take. So I guess we consider people are on Java 8 upgrading from 3.11 to 4.1. Then they switch to 11 and then they upgrade to 5? While we have only JAVA_HOME how would we have such a complete test? I _guess_ that was the past goal having those separate JAVAX_HOME, no? To be able to exercise the whole path and not stop on certain version and separately test that version upgrade etc?

Just trying to create a proper mental model and not to miss anything. As I fear I do miss something...

bq. we are not going to test the upgrade from 4 to 6?

No, because they are not adjacent. We ask users to go through each major version.

bq. So I guess we consider people are on Java 8 upgrading from 3.11 to 4.1. Then they switch to 11 and then they upgrade to 5? While we have only JAVA_HOME how would we have such a complete test? I guess that was the past goal having those separate JAVAX_HOME, no? 

That's two separate tests. The 3.11 to 4.1 upgrade test is found in the cassandra-4.1 branch (and uses jdk8). Then the 4.1 to 5.0 test is found in the cassandra-5.0 branch (currently trunk) (and uses jdk11).

Ok, thank you for confirming. So I see the case that we are also saving on resources that way. As you run tests on every version, you won't be repeating.

What I mean - running the full test 3.11 to 5 and then the test 4 or 4.1 to 5, skipping the overlap and running only what you need. 

Looking into CASSANDRA-18285, I think you actually reminded me there that there is also the case of 4.0 to 4.1 with 11 residing on 4.0. Another layer of duplication? 

bq. So I guess we consider people are on Java 8 upgrading from 3.11 to 4.1. Then they switch to 11 and then they upgrade to 5? While we have only JAVA_HOME how would we have such a complete test? I guess that was the past goal having those separate JAVAX_HOME, no? 

Yes very good point, you're 100% right [~e.dimitrova]. The matrix of upgrade paths for the python dtests can be both multi-step (so long as the bounds are adjacent major versions) and also forward upgrades (from the current branch version to higher adjacent major versions). This (CASSANDRA-18285) illustrates we can't use the same jdk for all tests in the one CI run, and we can't simply select the '{{java.supported}}' jdk from the build.xml. We don't do forward upgrades in the jvm-dtests.

You can see this in action [here|https://ci-cassandra.apache.org/view/Cassandra%203.0/job/Cassandra-3.0/333/testReport/dtest-upgrade.upgrade_tests.cql_tests/] (screenshot also attached).
 
I'm thinking this means that either we a) have some way of switching JDKs inside the python dtest codebase (like it is today or some other approach), or b) we run the python dtest upgrade tests twice and each run ignores (filters out) upgrade paths that are not valid for the current JAVA_HOME jdk.

(a) maybe requires the least work, if we can limit JAVAn_HOME usage to dtest python codebase and only use it on upgrade tests.
(b) has the advantage that we get the jdkX name in the tests names (because of '{{testtag}}', [ref|https://github.com/apache/cassandra/blob/d1e3c78/build.xml#L1132]), and allows us to reduce code.

And separately, back to…

bq. CASSANDRA-18293 is targeting them in the circle config where they do have effect; I would remove them as part of CASSANDRA-17869, or even another ticket since that's going to require a docker push.

I've tested and confirmed that ci-cassandra.a.o needs and works without the JAVAX_HOME envs set. That is, jdks 8, 11, and 17 all work. (Note these scripts don't support compiling with one jdk and then running with a higher.)

Furthermore, we can work around the docker push by unsetting those envs in {{cassandra-dtest-pytest.sh}} like [this|https://github.com/thelastpickle/cassandra-builds/commit/66a8484059561a7381ae829b4a39a52fb9104ccc].

bq.  b) we run the python dtest upgrade tests twice and each run ignores (filters out) upgrade paths that are not valid for the current JAVA_HOME jdk.

I'm not sure I understand this, how would this look exactly for the 3.11 to 5 scenario?



{quote}
bq. b) we run the python dtest upgrade tests twice and each run ignores (filters out) upgrade paths that are not valid for the current JAVA_HOME jdk.

…how would this look exactly for the 3.11 to 5 scenario?
{quote}

There is no 3.11 to 5 scenario.

But both cassandra-4.0 and cassandra-4.1 branches will run both (python dtest) scenarios
- 3.x to 4.x upgrade tests [past to current]
- 4.x to 5.0/trunk [current forward]

See same [link|https://github.com/apache/cassandra-dtest/blob/trunk/upgrade_tests/upgrade_manifest.py#L192-L193] you posted above.

But neither of those requires switching JDKs, one can be covered by 8, the other by 11.  Are you saying we need a way to switch inside while running the matrix, so both these scenarios can run with their respective JDKs?  And that is where running them twice comes in, but they filter out invalid JDKs?

The former needs jdk8, the latter will need jdk11.

bq. Are you saying we need a way to switch inside while running the matrix, so both these scenarios can run with their respective JDKs?

Correct.

bq. And that is where running them twice comes in, but they filter out invalid JDKs?

Correct. But just an idea to put options on the table.

I see.  To put another on the table, I think we could make a matrix for each java version and then run the dtests by java matrix, that way you are declaring 'run all the upgrade tests that work with this java version.'  I don't think of any this will need CCM support to accomplish these goals though.

bq. To put another on the table, I think we could make a matrix for each java version and then run the dtests by java matrix …

Yes! ( that's what I was trying to describe :D )

Do we need anything else on this ticket for CCM?  I think it would make sense to get this committed sooner than later so that we don't have to float my CCM dependency to do further testing for j17.

bq. Do we need anything else on this ticket for CCM?

No, it's good for me.

Freshly rebased, running against my dtest repo+my ccm, and trunk has JAVAx_HOME removed from the circle config, ala CASSANDRA-18293.

||Branch||CI||
|[3.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18106-3.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/899/workflows/5e415c0e-e75f-4165-af4a-f0661cb884f3]|
|[3.11|https://github.com/driftx/cassandra/tree/CASSANDRA-18106-3.11]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/900/workflows/2441dbb8-0451-4ae6-8112-e58a28ddf3e3]|
|[4.0|https://github.com/driftx/cassandra/tree/CASSANDRA-18106-4.0]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/897/workflows/b3032740-49e9-4a64-928f-5158cec5787c], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/897/workflows/d4d985cd-42e6-45ff-9b30-7a6e08b5e615]|
|[4.1|https://github.com/driftx/cassandra/tree/CASSANDRA-18106-4.1]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/898/workflows/b5c55b1d-fede-4004-8a2d-38c56bba1edc], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/898/workflows/9f5587ea-651f-4753-a9a6-f3a0bf24789b]|
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18106-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/901/workflows/c2bf3302-4eb4-4e70-95dc-2ce419ad56af], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/901/workflows/bbd09455-317b-4c83-be8a-4ee97ca3497e]|


Please run also the Python upgrade tests.

I believe it is a good idea to run also at least trunk tests in Jenkins. My past experience makes me believe that until we have the build scripts in-tree used by both CI systems, such changes is better to be run in both CI systems pre-commit as they very often surprise us with differences. Thank you in advance

bq. Please run also the Python upgrade tests.

Whoops, forgot to start those initially.

I ran trunk though Jenkins [here|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2338/].

The CircleCI tests failed, any chance something got cached again? 

I don't see any jdk-related failures.

Maybe we look at different links?

I see [here|https://app.circleci.com/pipelines/github/driftx/cassandra/901/workflows/c2bf3302-4eb4-4e70-95dc-2ce419ad56af/jobs/13028] (took it from the last table, trunk [j8|https://app.circleci.com/pipelines/github/driftx/cassandra/901/workflows/c2bf3302-4eb4-4e70-95dc-2ce419ad56af] you posted earlier, maybe you have newer run):
{code:java}
test_parallel_upgrade failed and was not selected for rerun.
<class 'RuntimeError'>
You need to set JAVA8_HOME to run these tests!{code}

Can we avoid the switch if the requested jdk is the current jdk ?  (or just remove {{.java_version}} from {{test_version_metas}} as suggested to do afterwards…?)
ref: https://github.com/apache/cassandra-dtest/blob/trunk/upgrade_tests/upgrade_through_versions_test.py#L331


We can remove jdk switching altogether, which I thought I did, but I missed that one.  I've updated it and -am running again- it passed [here|https://app.circleci.com/pipelines/github/driftx/cassandra/901/workflows/30e2c354-80e9-4eb9-984f-e1f4629032e6/jobs/13076].

[Here|https://app.circleci.com/pipelines/github/driftx/cassandra/904/workflows/ff4df323-6426-45a7-88cd-7579b397af60] is trunk rebased, and back down to 1448 tests.

{quote}back down to 1448 tests
{quote}
Looks good to me, also correct JDK version from a quick look.

I don't think we should rerun other tests as the change that was affecting the upgrade tests in the DTest repo (the bump 4.2 to 5.0) was affecting only upgrade tests.

With this IMHO we can commit in the following order:

1) CCM patch + retag after that so that CI can pick up the latest commits

2) DTest patch

3) Cassandra patch (CASSANDRA-18293)

And with that we can close both this ticket and CASSANDRA-18293.

My suggestion is to send a message to the community to put on pause any commits until those 3 are in to prevent any conflicts and confusion. WDYT?

Of course, all this said in case [~mck] being also a reviewer is still +1 after the latest runs/changes

 

+1

And finally here is trunk with what was CASSANDRA-18293 rebased and applied (no more JAVAx_HOME):

||Branch||CI||
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-18106-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/908/workflows/6f8013a1-041e-4ed2-a82b-99512eba806f], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/908/workflows/a858c49d-9647-4bf6-940d-9b8b154ebe18]|


As requested offline, I checked the CircleCI patches, they seem fine to me. Also, I took a quick look into the tests submitted and I didn't see any issues.

Upgrade tests were not run, but if the CircleCI patches were the only change I do not expect surprises.

Thank you. my +1 still stands

Committed and tagged CCM, cassandra-dtest, and the circle configs.  Thanks!

