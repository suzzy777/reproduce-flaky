OK, the good news: I was able to build and reproduce the error, even though I'm on Windows (Cygwin). And indeed, it looks funny. I'll take a closer look.

Ok, it's great you reproduced it, I was quite afraid of the "not reproduced" scenario. Please tell me if you need anything from me.

Last night I found the problem and fixed it. I'll create an IT for it and commit tonight. The way I see the code, it's much likely that the issue is much older than 2.14 - the code that causes the trouble is there now for at least a year.

You can probably use the following work-around, in case you don't want to wait for the next release:
{code}
..
@Parameterized.Parameters(name = "{index} - " + TestSurefire.class.getName())
public static Collection ...
..
{code}

That was fast! Thanks a lot. We're using a fork of the 2.11, that could explain why we don't have the issue. The workaround is great, I'm going to try it.

@Nicolas Is there a jira that documents the reason you forked 2.11 ? I'm just curious since I'm gathering some use-cases for version "3.0" where we try to make more extensibility cases

The full story is in HBASE-4763 and HBASE-4955, but basically it was just to get the features we needed (categorization and parallelization) before they were officially integrated in surefire. When I did it, I was not expecting that going back to the official version will take more than a year :-). We're close now, I think the last issue is  SUREFIRE-969. We also patched JUnit, and as they release a version a year we had to wait as well.

If I list my pain points, or what we did, it would be:
 - all this work on categories/parallelisation, it's integrated now.
 - the double path junit4 / junit47: changing some setting was going to a totally different behavior in junit, so we discovered new bugs
 - when a process dies or does not terminate, surefire does not always says there is an issue nor kill the process. We added some ps | jstack | kill to do that (see zombie related stuff in https://github.com/apache/hbase/blob/trunk/dev-support/test-patch.sh). 
 - we added a junit listener to add some info on the context. Having the workload of the machine, the number of threads, this kind of things, helps when the tests don't work as expected.
 - timeouts are difficult to manage. People use test timeout to workaround that when surefire kills a process, you don't know what was executed. So they put the timeout in the test vs. the global surefire timeout. And then if the build machine is too slow your test suite becomes flaky.


Fixed with 199c6162596b19d5b6e25cc0c3706bd657d92b1e

