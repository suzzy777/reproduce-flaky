Patches:
 * [4.0|https://github.com/apache/cassandra/compare/trunk...Gerrrr:14795-4.0]
 * [dtest|https://github.com/Gerrrr/cassandra-dtest/commit/54639ab84bd9a404ce9fbefb83a40c626f0d57a8]

I have created patches also for 3.0 and 3.11 as it does not change the existing code, but only exposes information via JMX.

this might be nice as a virtual table instead of a new nodetool command (or both)

This might have to wait until 5.0 unfortunately. 3.0 and 3.11 should be only accepting bug fixes now, and 4.0 is feature-frozen currently.

Thanks for the feedback! I will remove branches for 3.0, 3.11 and add a virtual table implementation 

Its deprecated, but since you have implemented it can you add the call to the HintedHandOffManager?

This patch introduces both a nodetool command and a virtual table for pending hints.

||Branch||CI||
|[dtest|https://github.com/apache/cassandra-dtest/pull/162]| |
|[trunk|https://github.com/apache/cassandra/compare/trunk...Gerrrr:14795?expand=1] |[j8|https://app.circleci.com/pipelines/github/Gerrrr/cassandra/203/workflows/81678055-f5ee-44cc-b975-49225a2dc6b0] [j11|https://app.circleci.com/pipelines/github/Gerrrr/cassandra/203/workflows/3a1b9c54-befb-4a7a-957c-a18cf536ab93]|

 

I left a few small comments but in general the patch looks good to me! Also, thank you for the tests. I would suggest running the two new tests in a loop in the Circle CI multiplexer to ensure no weird flakiness appears in the future. There is info how to do it in the Readme in the circle folder. 

[~cnlwsu], [~mck] - anyone of you up for review as you have more experience with the virtual tables? 

Or maybe [~aleksey]? :) 

How about [~azotcsit]?

Definitely! 

[~Gerrrr]

Could you please raise a PR for your changes, so it is easy to manage the changes and review feedback. PRs allow to post all comments at once (to prevent spamming you with separate notification on every comment). Also it is easier to review because it is possible to mark a file "viewed" and see changes for all commits in a single place.

I put some comments to your changes, please, take a look. The part related to the VT looks good though.

[~Gerrrr]  [~brandon.williams] [~e.dimitrova] 

I have a couple of general questions on this change: 
 # Do we want to see just total hints or hints per target node?
 # It is nice to see _dc, rack, status, etc_ details in the output, but since we list these details that for a local node only, I'm not sure they are very useful. There are alternative commands to see such details. We could simplify the code a lot by removing them from output. WDYT? I'm not proposing to remove them, just raising a question to see your opinions.

 

Thank you for the review [~azotcsit], [~e.dimitrova]! I've created a PR https://github.com/apache/cassandra/pull/1232 as you asked.

In my opinion, per-target hints together with the status column are helpful to understand what nodes we accumulate hints for and what nodes are ready for the hand-off. I added information about dc and rack to correlate the number of hints and the nodes' status with their location in a single output.

I don't have too much experience operating C*, so maybe I am over-complicating it in an attempt to design a convenient UX :) Looking forward to seeing other opinions.



I used to operate C* many years ago, so it is hard for me as well :) Brainstorm and debate are strong tools for finding the best options :) 

 
{quote}about dc and rack to correlate the number of hints and the *nodes'* status with their location in a single output
{quote}
Here is where my confusion is. Nodetool is a command that is executed against a particular node. And in our case it provides hints details for that single node (not for all nodes in the cluster). So as per my understanding, in the output we will see a single node that we connected to. Could you please check and confirm / refute this statement.

If it is true, then you may want to re-consider your opinion on having additional details in the output (node is not up -> it is impossible to connect, "status" command can be used for other details).

If it is false, then I totally support having such details in the output.

bq. So as per my understanding, in the output we will see a single node that we connected to.

This is correct, however that is a strength in my opinion, since you can have the network broken to not only specific nodes, but also in either direction since C* expects a fully connected mesh.  What is up or down in one node's perspective may not agree with what another node observes, and that is useful to know.

Ok, that makes sense then! I need to get familiar with sidecar project because I can barely imagine how the combined output would look like.

[~e.dimitrova]

{quote}
I would suggest running the two new tests in a loop in the Circle CI multiplexer to ensure no weird flakiness appears in the future.
{quote}

* [j8 repeated tests|https://app.circleci.com/pipelines/github/Gerrrr/cassandra/216/workflows/c789a0c0-2974-48b5-bd27-2a33de2d72b0]
* [j11 repeated tests|https://app.circleci.com/pipelines/github/Gerrrr/cassandra/216/workflows/b59c5c5a-4f25-47ba-ae3b-917b01db8b67]

[~e.dimitrova], [~azotcsit]

 

I rebased the PR against latest trunk and squashed review commits; haven't started new CI runs as I no longer have access to the CircleCi's enterprise account.

 

Please let me know if you have more suggestions.

[~Gerrrr]

Thanks for fixing all review comments!

As for me two points are remaining:
 # I'd like to hear [~e.dimitrova] / [~brandon.williams] opinion on whether we need to sort columns in the output of {{nodetool}} output and the VT
 # We agreed on having dtests, so I feel it makes sense to merge everything in one batch

Apart from these two points, everything looks good to me. In the meantime, I've [triggered Jenkins CI|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1174/], so we can ensure the changes do not break anything at the moment.

 

bq. whether we need to sort columns in the output of nodetool output and the VT

If this is the same issue raised on CASSANDRA-16976, then my stance is the same:

* VTs are sorted by PK and clustering columns, by default. This can be changed in the query if desired, and it's trivial to make a little wrapper for cqlsh executing a file to get whatever you like.  VTs should act like any other CQL table, so this is the correct behavior.

* Nodetool should sort in the friendliest manner, diverging from the default VT behavior, since modifying it to get better output requires greater than trivial effort for an end user.

+1 on what [~brandon.williams] says. Also, I was swamped yesterday and today but I will do last check tomorrow on the latest changes and the CI run should be finished until then. I think we also need [~stefan.miklosovic]'s vote as he is also a reviewer. 

I would like to know if this patch collides with (1) and if it does, what impact it has, mostly related to timestamps here. By mere looking, I do not think that the logic / code introduced here would interfere with that patch. Just something to raise awareness of as I would like to merge that one sooner or later and I do not want to break other stuff.

Otherwise I am fine with this.

https://issues.apache.org/jira/browse/CASSANDRA-14309

Thank you for the review [~stefan.miklosovic]!

I do not think that CASSANDRA-14309 collides with this patch. Brief review of the code did not show any conceptual clash - the changes in 14309 should not be affected by the changes in my patch. I also cherry-picked [https://github.com/instaclustr/cassandra/tree/CASSANDRA-14309] and [https://github.com/apache/cassandra-dtest/pull/153.] Resolving git conflicts was trivial and all tests added by both patches passed.

The last version looks good to me but _org.apache.cassandra.hints.HintsServiceTest.testListPendingHints_ is failing in Jenkins unfortunately. It seems a test issue? [~Gerrrr], can you check it, please? 

 

I have a suspicion that the test times out because the entire suite takes too long to run for the given timeout. We observe it as {{HintsServiceTest.testListPendingHints}} failure because it is the last test case in the suite.

For test report and logs see e.g. https://nightlies.apache.org/cassandra/devbranch/Cassandra-devbranch/1187/

{{test.timeout}} is set to 240 seconds. On successful runs the suite takes a bit longer than 200 seconds to finish, each case taking between 30 and 60 seconds. As a speculation, a small hiccup or a slight deviation in test time might lead to a timeout. I'd like to verify this idea by increasing {{test.timeout}} to 360 seconds and re-running the CI. If this theory is correct, {{HintsServiceTest}} should succeed and overall test duration might exceed 240 seconds on 1 or more attempts.

[~azotcsit], [~e.dimitrova] Can I kindly ask you to re-run https://ci-cassandra.apache.org/job/Cassandra-devbranch/1187/?



[~Gerrrr]

I see that Stefan has already started [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/1191/]. In the meantime, I put a couple of comments to the PR.

Also I mentioned that Python dtest already exists. I missed that Jira comment and that's why kept asking about that on PR, sorry for that!

Thank you [~stefan.miklosovic] for starting the CI! In this run there were no timeout failures which confirms overall running time of {{HintsServiceTest}} as a likely reason. To fix it, I moved newly added {{testListPendingHints}} to a separate test suite and reverted increased timeout.

[~azotcsit] I don't see any new comments in the PR. Perhaps, you should click "Submit review" for them to appear in the PR?

As there are no more outstanding review feedback, I squashed the changes to prepare for commit:

* [patch|https://github.com/apache/cassandra/pull/1232/commits/989ace231731a822a7d583625f3f0615ceba4a35]
* [dtest|https://github.com/apache/cassandra-dtest/pull/162/commits/ca882c704e0cba48027a2f6b84e603b63b81f882]
* [CI|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1202/]

The CI results are a bit far from green, but none of the failures seem to be related to this patch. Is there anything else I should do before this patch is ready to commit [~e.dimitrova] [~azotcsit] [~stefan.miklosovic]?

I checked the CI and mentioned no failures related to this PR. I'm wondering whether we need to update corresponding documentation (_virtualtables.rst_) - I'm not really sure what the policy on that is. The documentation states that it mentions only a part of the tables:
{code:java}
Some of the salient virtual tables in ``system_views`` virtual keyspace are described in Table 1.

We shall discuss some of the virtual tables in more detail next.
{code}
So I do not feel we are enforced to describe every table. On the other hand, it would not make worse. I hope [~e.dimitrova] can judge on that.

Code-wise the changes LGTM, +1.

+1 from me too. There is ongoing unrelated issue with CI. 

About the documents, it is a valid point that I intentionally skipped. There is currently ongoing migration and the following [mail thread|https://lists.apache.org/thread.html/ref1e9a7e911b50f0643e13fe04fd10f140d1e01a55c68148a9b7b723%40%3Cdev.cassandra.apache.org%3E]

RST is converted to AsciiDoc. Any new commits to the rst docs now will have to be converted later to AsciiDoc, double work.
So what I suggest is we commit the current work and open a follow up ticket for the docs which can be worked when the initial conversion is committed, hopefully this week. 

Ops, almost forgot, we should update NEWS.txt.

Otherwise, +1 and we are ready to commit if [~stefan.miklosovic] is also fine with the latest version.

Yeah I am still +1, no worries. Thanks everybody.

I'll get it merged soon (tmrw afternoon my time).

Committed! Thank you [~Gerrrr]!

