Steps to repro:

-- Create two functions, both pointing to the same jar
create function foo() returns string 
location '/test-warehouse/impala-hive-udfs.jar'
symbol='org.apache.impala.TestUpdateUdf';

create function bar(string) returns string 
location '/test-warehouse/impala-hive-udfs.jar'
symbol='org.apache.impala.TestUdf';

-- Run the following query to make sure that all nodes in the local mini-cluster run the udf
select * from
(select max(int_col) from functional.alltypesagg
 where bar(string_col) = 'blah' union all
(select max(int_col) from functional.alltypesagg
 where bar(string_col) > '1' union all
(select max(int_col) from functional.alltypesagg
 where bar(string_col) > '1'))) v;

-- From another client, 
drop function foo;

Its useful to include a Sleep + logging before creating the classloader in UdfExecutor.java::getClassLoader.
Looking at the logs, when the sleep starts on the executors, drop the function. If the sleep is long enough for
one statestore refresh, the backends will handle the dropped function by removing the jar. When the sleep finishes,
the classloader will be instantiated with an invalid path and promptly fail.


Couple of notes:

1. Its conservative that the jar is blown away if some function that it contains is dropped. This will just cause a higher
    miss rate in the lib-cache. However, its incorrect that we hold on to a path that could become invalid.

2. One possibility for removing this race is to have UdfExector use the backend cache.

I think I hit this on a GVO: https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/980/consoleFull

[IMPALA-6215|http://issues.cloudera.org/browse/IMPALA-6215]: Removes race when using LibCache. LibCache's api to provide access to locally cached files has a race. Currently, the client of the cache accesses the locally cached path as a string, but nothing guarantees that the associated file is not removed before the client is done using it. This race is suspected as the root cause for the flakiness seen in [IMPALA-6092|http://issues.cloudera.org/browse/IMPALA-6092]. These tests fail once in a while with classloader errors unable to load java udf classes. In these tests, the lib cache makes no guarantee that the path to the jar will remain valid from the time the path is acquired through the time needed to fetch the jar and resolve the needed classes. LibCache offers liveness guarantees for shared objects via reference counting. The fix in this patch extends this API to also cover paths to locally cached files. Testing: - added a test to test_udfs.py that does many concurrent udf uses and removals. By increasing the concurrent operations to 100, the issue in [IMPALA-6092|http://issues.cloudera.org/browse/IMPALA-6092] is locally reproducible on every run. With this fix, the problem is no longer reproducible with this test.

Change-Id: I9175085201fe8b11424ab8f88d7b992cb7b0daea

Reviewed-on: [http://gerrit.cloudera.org:8080/9089]

Reviewed-by: Tim Armstrong <tarmstrong@cloudera.com>

Tested-by: Impala Public Jenkins

reverted. caused a crash in tests so needs more testing.

Commit 136267e87ff3b9304b9aefa70947b160721ca32b in impala's branch refs/heads/master from [~vercego]
[ https://git-wip-us.apache.org/repos/asf?p=impala.git;h=136267e ]

Revert "IMPALA-6215: Removes race when using LibCache."

This reverts commit 4aafa5e9ba9fe22d2dbc7764a796b3cd04136cc0.

See IMPALA-6488 for an example of a crash that this revert is
trying  to avoid.

Change-Id: I2e0a22d38f15fb3e34f08633ab0fc7c87c92d40f
Reviewed-on: http://gerrit.cloudera.org:8080/9244
Reviewed-by: Alex Behm <alex.behm@cloudera.com>
Reviewed-by: Tim Armstrong <tarmstrong@cloudera.com>
Reviewed-by: Vuk Ercegovac <vercegovac@cloudera.com>
Tested-by: Thomas Tauber-Marshall <tmarshall@cloudera.com>


Commit d609fe1b44745abc979dc8b7884ecff356ea73cf in impala's branch refs/heads/2.x from [~vercego]
[ https://git-wip-us.apache.org/repos/asf?p=impala.git;h=d609fe1 ]

Revert "IMPALA-6215: Removes race when using LibCache."

This reverts commit 4aafa5e9ba9fe22d2dbc7764a796b3cd04136cc0.

See IMPALA-6488 for an example of a crash that this revert is
trying  to avoid.

Change-Id: I2e0a22d38f15fb3e34f08633ab0fc7c87c92d40f
Reviewed-on: http://gerrit.cloudera.org:8080/9244
Reviewed-by: Alex Behm <alex.behm@cloudera.com>
Reviewed-by: Tim Armstrong <tarmstrong@cloudera.com>
Reviewed-by: Vuk Ercegovac <vercegovac@cloudera.com>
Tested-by: Thomas Tauber-Marshall <tmarshall@cloudera.com>


We seem to be hitting this (or potentially another CNF bug) fairly consistently.

Query that works for us:
{code:java}
SELECT ua_device_family, ua_browser_family, ua_os_family, device_type(ua_device_family, ua_browser_family, ua_os_family) as device FROM bi_arbitrage_full WHERE day='2017-10-04';{code}

One of the queries that fails:
{code}
SELECT device_type(ua_device_family, ua_browser_family, ua_os_family) as device FROM bi_arbitrage_full WHERE day='2017-10-04' group by device_type(ua_device_family, ua_browser_family, ua_os_family);
Query: select device_type(ua_device_family, ua_browser_family, ua_os_family) as device FROM bi_arbitrage_full WHERE day='2017-10-04' group by device_type(ua_device_family, ua_browser_family, ua_os_family)
…
WARNINGS: ImpalaRuntimeException: Unable to find class.
CAUSED BY: ClassNotFoundException: com.criteo.hadoop.hive.udf.UDFUserAgentToDeviceType
{code}

It doesn't seem to be restricted to the function being used in the group by. I am seeing failures when the UDF is also part of a select clause which is pulling data from some nested queries doing a join). 

First, thanks for the repro... there were several changes that were blocking the fix for this one. Here's a link to the change that re-applies the previous fix for this issue: [https://gerrit.cloudera.org/#/c/9968/]

That said, I tried to repro the issue with and without the fix, and was unable to repro it. Here are my steps:
{noformat}
// impala-hive-udfs.jar is generated and used by Impala's unit tests
create function foo(string) returns string location '/test-warehouse/impala-hive-udfs.jar' SYMBOL='org.apache.impala.TestUdf';

// alltypes is Impala's unit test data set
select id, bool_col, string_col, scratch.foo(string_col) from functional.alltypes where int_col > 5;

select scratch.foo(string_col) from functional.alltypes where int_col > 5 group by scratch.foo(string_col);{noformat}
 

When the fix is merged, we can try it with your query/env. If there is still an issue, then I'll need to find alternatives to repro this.

Commit 27c028f0578ac5edb42ba55c2c54ab8b7c195422 in impala's branch refs/heads/master from [~vercego]
[ https://git-wip-us.apache.org/repos/asf?p=impala.git;h=27c028f ]

IMPALA-6215: Removes race when using LibCache.

Re-do the previously reverted change for IMPALA-6215. This patch
addresses the flakes listed in IMPALA-6092, which have become more
urgent recently.

LibCache's api to provide access to locally cached files has a race.
Currently, the client of the cache accesses the locally cached path
as a string, but nothing guarantees that the associated file is not
removed before the client is done using it. This race is suspected
as the root cause for the flakiness seen in IMPALA-6092. These tests
fail once in a while with classloader errors unable to load java udf
classes. In these tests, the lib cache makes no guarantee that the path
to the jar will remain valid from the time the path is acquired through
the time needed to fetch the jar and resolve the needed classes.

LibCache offers liveness guarantees for shared objects via reference
counting. The fix in this patch extends this API to also cover paths
to locally cached files.

This fix *only* addresses the path race. General cleanup of the api will
be done separately.

Testing:
   - added a test to test_udfs.py that does many concurrent udf uses and
     removals. By increasing the concurrent operations to 100, the issue
     in IMPALA-6092 is locally reproducible on every run. With this fix,
     the problem is no longer reproducible with this test.

Change-Id: I72ac0dfb13cf37d79e25c5b8a258b65f2dad097f
Reviewed-on: http://gerrit.cloudera.org:8080/9968
Reviewed-by: Vuk Ercegovac <vercegovac@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Commit 27c028f0578ac5edb42ba55c2c54ab8b7c195422 in impala's branch refs/heads/master from [~vercego]
[ https://git-wip-us.apache.org/repos/asf?p=impala.git;h=27c028f ]

IMPALA-6215: Removes race when using LibCache.

Re-do the previously reverted change for IMPALA-6215. This patch
addresses the flakes listed in IMPALA-6092, which have become more
urgent recently.

LibCache's api to provide access to locally cached files has a race.
Currently, the client of the cache accesses the locally cached path
as a string, but nothing guarantees that the associated file is not
removed before the client is done using it. This race is suspected
as the root cause for the flakiness seen in IMPALA-6092. These tests
fail once in a while with classloader errors unable to load java udf
classes. In these tests, the lib cache makes no guarantee that the path
to the jar will remain valid from the time the path is acquired through
the time needed to fetch the jar and resolve the needed classes.

LibCache offers liveness guarantees for shared objects via reference
counting. The fix in this patch extends this API to also cover paths
to locally cached files.

This fix *only* addresses the path race. General cleanup of the api will
be done separately.

Testing:
   - added a test to test_udfs.py that does many concurrent udf uses and
     removals. By increasing the concurrent operations to 100, the issue
     in IMPALA-6092 is locally reproducible on every run. With this fix,
     the problem is no longer reproducible with this test.

Change-Id: I72ac0dfb13cf37d79e25c5b8a258b65f2dad097f
Reviewed-on: http://gerrit.cloudera.org:8080/9968
Reviewed-by: Vuk Ercegovac <vercegovac@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Commit 226b914dd02dba4aa389ed7b4c0023ddfd229096 in impala's branch refs/heads/2.x from [~vercego]
[ https://git-wip-us.apache.org/repos/asf?p=impala.git;h=226b914 ]

IMPALA-6215: Removes race when using LibCache.

Re-do the previously reverted change for IMPALA-6215. This patch
addresses the flakes listed in IMPALA-6092, which have become more
urgent recently.

LibCache's api to provide access to locally cached files has a race.
Currently, the client of the cache accesses the locally cached path
as a string, but nothing guarantees that the associated file is not
removed before the client is done using it. This race is suspected
as the root cause for the flakiness seen in IMPALA-6092. These tests
fail once in a while with classloader errors unable to load java udf
classes. In these tests, the lib cache makes no guarantee that the path
to the jar will remain valid from the time the path is acquired through
the time needed to fetch the jar and resolve the needed classes.

LibCache offers liveness guarantees for shared objects via reference
counting. The fix in this patch extends this API to also cover paths
to locally cached files.

This fix *only* addresses the path race. General cleanup of the api will
be done separately.

Testing:
   - added a test to test_udfs.py that does many concurrent udf uses and
     removals. By increasing the concurrent operations to 100, the issue
     in IMPALA-6092 is locally reproducible on every run. With this fix,
     the problem is no longer reproducible with this test.

Change-Id: I72ac0dfb13cf37d79e25c5b8a258b65f2dad097f
Reviewed-on: http://gerrit.cloudera.org:8080/9968
Reviewed-by: Vuk Ercegovac <vercegovac@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Commit 226b914dd02dba4aa389ed7b4c0023ddfd229096 in impala's branch refs/heads/2.x from [~vercego]
[ https://git-wip-us.apache.org/repos/asf?p=impala.git;h=226b914 ]

IMPALA-6215: Removes race when using LibCache.

Re-do the previously reverted change for IMPALA-6215. This patch
addresses the flakes listed in IMPALA-6092, which have become more
urgent recently.

LibCache's api to provide access to locally cached files has a race.
Currently, the client of the cache accesses the locally cached path
as a string, but nothing guarantees that the associated file is not
removed before the client is done using it. This race is suspected
as the root cause for the flakiness seen in IMPALA-6092. These tests
fail once in a while with classloader errors unable to load java udf
classes. In these tests, the lib cache makes no guarantee that the path
to the jar will remain valid from the time the path is acquired through
the time needed to fetch the jar and resolve the needed classes.

LibCache offers liveness guarantees for shared objects via reference
counting. The fix in this patch extends this API to also cover paths
to locally cached files.

This fix *only* addresses the path race. General cleanup of the api will
be done separately.

Testing:
   - added a test to test_udfs.py that does many concurrent udf uses and
     removals. By increasing the concurrent operations to 100, the issue
     in IMPALA-6092 is locally reproducible on every run. With this fix,
     the problem is no longer reproducible with this test.

Change-Id: I72ac0dfb13cf37d79e25c5b8a258b65f2dad097f
Reviewed-on: http://gerrit.cloudera.org:8080/9968
Reviewed-by: Vuk Ercegovac <vercegovac@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


