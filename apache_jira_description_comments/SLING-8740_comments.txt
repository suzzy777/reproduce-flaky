Confirmed, the tests are still flaky and typically fail with one of the below errors:

{code}
java.lang.IllegalStateException: unable to get a service reference, class=org.apache.sling.jcr.api.SlingRepository, filter='null'
	at org.apache.sling.jcr.repoinit.it.ProvisioningModelIT.setup(ProvisioningModelIT.java:48)

java.lang.IllegalStateException: unable to get a service reference, class=org.apache.sling.jcr.api.SlingRepository, filter='null'
	at org.apache.sling.jcr.repoinit.it.RepoInitTextIT.setup(RepoInitTextIT.java:55)
{code}

Various tests fail so it really looks like a test setup issue.

A note [~bdelacretaz] - I remember seeing error entries which pointed to the Sling repository being restarted but failing due to Oak trying to re-register MBeans. Ideally the repository service would not restart, but if that is still the case then upgrading to Oak 1.18.0 may help, as there were some restart-related issues fixed.

Thank you [~rombert] - considering that those tests were implemented using teleported tests which are fairly hard to troubleshoot, I have taken a different approach and moved to pax exam.

The {{ProvisioningModelIT}} was not really useful as a very similar behavior is tested by {{sling-org-apache-sling-launchpad-integration-tests/RepoinitPathTest}}, so I have removed it and adapted the remaining {{RepoInitTextIT}} to run with pax exam.

I still need to re-add a test that validates an {{org.apache.sling.jcr.repoinit.impl.RepositoryInitializer}} config with multiple URLs, working on that.

For now I have committed the {{RepoInitTextIT}} + pax exam setup changes, let's see how the tests behave atÂ [https://builds.apache.org/job/Sling/job/sling-org-apache-sling-jcr-repoinit/job/master/] - on my box they look to be stable.

I have added a Pax Exam based {{RepositoryInitializerIT}} to bring the test coverage back to what it was with the old {{ProvisioningModelIT}}.

The tests are now stable, ran a number of them successfully at https://builds.apache.org/job/Sling/job/sling-org-apache-sling-jcr-repoinit/job/master/

One unit test failed in one of those runs but it is unrelated, see below, looks like a different issue.

With these changes the tests that were problematic are stable, marking this issue resolved.

I have set the tests to run hourly (via a {{.sling-module.json}} file), will leave that for a few days so we get more data.

The unrelated unit test that failed once in many runs is

{code}
build #96, PrincipalBasedAclTest.globRestriction:292->assertPermission:175
Expecting read for path /tmp_11e74abc-dc7c-4d7d-9cdc-264f4a3fb352/testxyz_11e74abc-dc7c-4d7d-9cdc-264f4a3fb352
to be denied expected:<false> but was:<true>
{code}

Another unit test failure, among many builds. I'll list those here for now, at this point I have no idea what could cause this. Maybe some things happen asynchronously and the unit tests don't take that into account.

Note that the other failing unit test, mentioned above, is also about glob restrictions.

{code}
org.apache.sling.jcr.repoinit.GeneralAclTest.globRestrictionTest
...
java.lang.AssertionError: Error adding test_aaf54842-1227-45c0-b4a3-611a84abc699 to Node[NodeDelegate{tree=/testxyz_aaf54842-1227-45c0-b4a3-611a84abc699: { jcr:primaryType = nt:unstructured}}]OakAccess0000: Access denied
	at org.apache.sling.jcr.repoinit.GeneralAclTest.verifyAddChildNode(GeneralAclTest.java:319)
	at org.apache.sling.jcr.repoinit.GeneralAclTest.globRestrictionTest(GeneralAclTest.java:609)
{code}

