Simple reproducer

{panel:title=--&gt; Run :: All: Possible Blockers|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1}
{color:#d04437}SPI{color} [[tests 14|https://ci.ignite.apache.org/viewLog.html?buildId=3331207]]
* IgniteSpiTestSuite: TcpDiscoverySelfTest.testOrdinaryNodeLeave - 0,0% fails in last 356 master runs.
* IgniteSpiTestSuite: IgniteDiscoveryMassiveNodeFailTest.testMassiveFailSelfKill - 0,0% fails in last 356 master runs.
* IgniteSpiTestSuite: IgniteDiscoveryMassiveNodeFailTest.testMassiveFailAndRecovery - 0,0% fails in last 356 master runs.
* IgniteSpiTestSuite: TcpDiscoverySslSelfTest.testJoinTimeout - 0,0% fails in last 356 master runs.
* IgniteSpiTestSuite: TcpDiscoverySelfTest.testJoinTimeout - 0,0% fails in last 356 master runs.
* IgniteSpiTestSuite: TcpDiscoverySslTrustedSelfTest.testJoinTimeout - 0,0% fails in last 356 master runs.
* IgniteSpiTestSuite: IgniteDiscoveryMassiveNodeFailTest.testRecoveryOnDisconnect - 0,0% fails in last 356 master runs.
* IgniteSpiTestSuite: TcpDiscoverySslTrustedSelfTest.testNodeWithReceiptFailure
* IgniteSpiTestSuite: TcpDiscoverySslSelfTest.testOrdinaryNodeLeave - 0,0% fails in last 356 master runs.
* IgniteSpiTestSuite: TcpDiscoverySslSelfTest.testNodeWithReceiptFailure
* IgniteSpiTestSuite: TcpDiscoverySslTrustedSelfTest.testOrdinaryNodeLeave - 0,0% fails in last 356 master runs.
* IgniteSpiTestSuite: TcpDiscoverySelfTest.testNodeWithReceiptFailure

{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=3322414&amp;buildTypeId=IgniteTests24Java8_RunAll]

[~zstan],
As I can see from TC Bot report there are non-flaky failures *IgniteDiscoveryMassiveNodeFailTest.testMassiveFailSelfKill* and *IgniteDiscoveryMassiveNodeFailTest.testMassiveFailAndRecovery* that don't fail in master.

These tests cover connection recovery mechanism so it seems that your change breaks something in it.

I think we need to come up with another way to fix the issue, either by modifying connection recovery mechanism to segment node facing read receipt failures or by improving timeouts handling.

This reproducer (described case) is not possible on current [master] code and probably has been erroneously reported earlier, cause if it would be problems on *readReceipt* side, similar problems would be on sending *TcpDiscoveryHandshakeRequestmessage*, witch prevents from infinite loop.

