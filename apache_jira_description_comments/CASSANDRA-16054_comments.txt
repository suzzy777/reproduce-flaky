[branch | https://github.com/jrwest/cassandra/tree/jwest/16054]
[tests | https://app.circleci.com/pipelines/github/jrwest/cassandra?branch=jwest%2F16054]

[~jwest] Made a first pass at review...

*General Impressions*
* Dropping COMPACT STORAGE seems like mostly a concern for the local storage engine, so my initial reaction to having even a 2-node cluster was that it might not be strictly necessary. Reading further, I see that we're looking at operational scenarios like schema not being in agreement, so I suppose a cluster makes sense if we're worried about that somehow confusing the coordinator. (I'm also not sure if we strictly need to query both coordinators post-drop, but perhaps that would only be a real problem if we were executing many more queries.) If this were a unit test, I might try to isolate something like the behavior w/ a schema mismatch in its own test, but I know our threshold for that kind of thing is higher when spinning up a new cluster (even in-JVM) isn't free :)
* In {{testDropCompactWithClusteringAndValueColumn}}, it might be interesting to test a range query on the last clustering key and include a query or two that return no results by design.
* In {{testDropCompactWithClusteringAndValueColumnWithDeletesAndWrites}}, was the intent to write new partitions, or just overwrite some of the partitions from the first set of 10? Testing a range delete might be interesting, but we might need to add a second clustering key?

*Minor Things *
 * {{import org.apache.cassandra.distributed.shared.NetworkTopology}} looks unused in {{DelegatingInvokableInstance}}
* Were the field visibility changes in {{AbstractCluster}} and {{DelegatingInvokableInstance}} necessary?
* {{preUpgradeResults}} can be final in {{DropCompactTestHelper}}
* {{DropCompactTestHelper}} could be named something like {{ResultRecorder}} (class) / {{recorder}} (local). (My guess is that this construct might end up being used more and more as we add upgrade tests?) It might even make sense to move things like {{validateResults()}} into it, and you'd have the beginnings of a "differ" / "validator" that you can populate however you want and then throw other clusters at.
* Both tests issue coordinator queries at CL=ONE rather than using {{executeInternal()}}. Are we guaranteed that the former can't hit the wrong node?
* We might be able to factor out the {{upgradesstables}} call from the two new tests.

Thanks [~maedhroz]! Pushed a new commit (will squash) with some updates based on your review. Some comments below:
 * I wanted to use a cluster because of the schema agreement reason you noticed as well as wanting to test the entire stack for how it behaved in this state, not just the local engine. The upgradesstables call is there because the test is only meant to show these guarantees hold after its been run.
 * I've made the suggested changes to {{testDropCompactWithClusteringAndValueColumn,}} {{testDropCompactWithClusteringAndValueColumnWithDeletesAndWrites}}, along with some of your other suggestions.
 * The visibility changes in {{AbstractCluster}} and {{DelegatingInvokableInstance}} were from another test. I've removed them. Since I'm not modifying the files anymore I didn't remove the import of {{org.apache.cassandra.distributed.shared.NetworkTopology}} in {{DelegatingInvokableInstance}}

{quote}Both tests issue coordinator queries at CL=ONE rather than using executeInternal(). Are we guaranteed that the former can't hit the wrong node?
{quote}
That is my understanding.

+1

[3.11 branch | https://github.com/jrwest/cassandra/tree/jwest/16054-3.11] [tests | https://app.circleci.com/pipelines/github/jrwest/cassandra?branch=jwest%2F16054-3.11]

Tests passed. The only failing test was a known SASI flaky unit test. 

Committed to 3.0 and merged up to 3.11 and trunk (which is a no-op because the test has been removed in trunk). Commit: https://github.com/apache/cassandra/commit/1575649888ec2632e02e5199bd57fb7de274d561

