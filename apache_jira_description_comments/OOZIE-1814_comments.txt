A generic solution that masks each and every password (key contains {{pass}}) with the characters {{*****}} inside Java system properties and environment variables.

Note that {{Instrumentation.getJavaSystemProperties()}} and {{Instrumentation.getOSEnv()}} are masked so that {{instrumentation.log}} and REST interfaces are both filtered, as well as CLI and UI.

Thank you for the patch [~andras.piros]!
Could you extract the regex {noformat}".*[((\\s)+-[D|X][\\w[.\\w]*]*(?i)pass[\\w[.\\w]*]*=)([\\w]+)]+.*"{noformat} into a constant and create a short explanation about what it does in javadoc?


Some confusing regexes have been given names.

Done.

Testing JIRA OOZIE-1814

Cleaning local git workspace

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------

Testing JIRA OOZIE-1814

Cleaning local git workspace

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------

[~andras.piros], can you regenerate the patch from the latest master branch?  I can't get the 003 patch to apply (I think it's based on the 002 patch, but I couldn't get it to apply even with that).

A few quick comments from the patch in the meantime:
# We generally name tests {{TestFoo}} not {{FooTest}}.  {{PasswordMaskerTest}} should be {{TestPasswordMasker}}
# It's best to compile the regexes in a static field once, instead of doing it every time a method is called

[~rkanter] All mentioned issues fixed and I can apply the latest patch to the current {{master}} using {{git apply}}.

Testing JIRA OOZIE-1814

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 11 line(s) longer than 132 characters
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:red}-1 RAT{color}
.    {color:red}-1{color} the patch seems to introduce 4 new RAT warning(s)
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 1810
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/3330/

Java files: license header added.

Note that for JSON files it's not possible to add license headers, neither is it feasible to cut lines below 132 chars for that.

Testing JIRA OOZIE-1814

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 11 line(s) longer than 132 characters
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:red}-1 RAT{color}
.    {color:red}-1{color} the patch seems to introduce 2 new RAT warning(s)
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1810
.    Tests failed: 2
.    Tests errors: 1

.    The patch failed the following testcases:

.      testActionKillCommandActionNumbers(org.apache.oozie.command.coord.TestCoordActionsKillXCommand)
.      testCoord_throwException(org.apache.oozie.command.coord.TestCoordChangeXCommand)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/3331/

The test cases pass locally - probably flaky tests.

Looks good overall.  Here's a few things:
# Right, the JSON files can't have the Apache headers.  In those cases, we add them to the exclusion list (see https://github.com/apache/oozie/blob/master/pom.xml#L1801)
# Why make {{initLogging}} package private instead of protected?  It only gets called by a subclass, so it can be protected.
# It looks like {{PasswordMasker#mask}} (and the private methods) could be made static, and then there's no reason to instantiate a {{PasswordMasker}} object.  It has no constructor and all member variables are already static.


Thanks :) My thoughts on that few thingies:
# OK, putting to whitelist all the {{.json}} files
# This subclass {{MetricsLoggerService}} is really in the same package. Existing test classes are also in the same package. Right now I don't feel the need of inheriting classes not in the same package. If there will be one, or the only existing child will be moved to another package, we can relax the [*visibility constraint*|http://stackoverflow.com/questions/215497/in-java-difference-between-default-public-protected-and-private] once again
# For the sake of testability it's best [*not to have static methods*|http://misko.hevery.com/2008/07/30/top-10-things-which-make-your-code-hard-to-test]. At the moment {{PasswordMasker.mask()}} is a leaf method (no collaborators of other classes are called) so if you really want I can make it {{static}}. But later when this class won't be leaf anymore the one performing extension will be responsible to make it non-{{static}} again... Best not to have it in the first place. For the JVM creating many small short-lived {{Object}} instances and getting rid of them I also wouldn't feel [*any headache*|http://programmers.stackexchange.com/questions/149563/should-we-avoid-object-creation-in-java]

JSON files ignored when performing RAT analysis as these cannot have comments and line break is impractical.

Testing JIRA OOZIE-1814

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 11 line(s) longer than 132 characters
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 1814
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/3336/

Thanks for the StackOverflow on the JVM object creation.  Avoiding Objects for small short-lived one-off objects was something I was taught a long time ago, and it looks like that's no longer a problem.  Cool.

I'm fine with changing the visibility.

Two last trivial things, and then I think we're ready:
# Let's make {{PasswordMasker.PASSWORD_MASK}} private.  In the tests that are currently using this, instead hardcode the value ({{"*****"}}).  We typically don't use constants in tests; the idea being that if someone were to accidentally change a constant, that'll cause the test to fail, so it will be easier to notice.
# There's 11 lines longer than 132 characters.  Can you check and fix these?  It's okay if they're in the json test files (just mention that in your next comment), we'll just ignore test-patch in that case.


Some small refactoring.

Thanks so much!
# Done.
# These 11 lines are all in the new {{.json}} files that are also filtered out in the patch.

Testing JIRA OOZIE-1814

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 11 line(s) longer than 132 characters
.    {color:green}+1{color} the patch does adds/modifies 3 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1814
.    Tests failed: 0
.    Tests errors: 1

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/3349/

The build breaks because of a flaky test.

+1

Thanks [~andras.piros].  Committed to master and branch-4.3!

Closing issue; Oozie 4.3.0 is released.

