GitHub user udaykale opened a pull request:

    https://github.com/apache/ignite/pull/4720

    IGNITE-9532 Binary mode for Ignite Queue

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/udaykale/ignite IGNITE-9532

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/ignite/pull/4720.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #4720
    
----
commit abf6cebf989305c4bc5d5cb51f2b8415b34cdd5f
Author: uday <udaygkale@...>
Date:   2018-09-11T08:40:22Z

    IGNITE-9532 Binary mode for Ignite Queue

----


Hi [~avinogradov] could you please take a look?

[~uday], 

I've checked the changes, and have some comments 

1) Changes like 
{noformat}
if (opCtx != null && opCtx.isKeepBinary())
	return delegate.contains(item);

return delegate.contains(item);
{noformat}
looks odd, you'll perform {{delegate.contains(item)}} in any case. 
Is it a typo?

2) at {{GridCacheQueueProxy.withKeepBinary()}} you're creating new {{CacheOperationContext}}. 
Correct case is to use {{org.apache.ignite.internal.processors.cache.CacheOperationContext#keepBinary}} instead like cache do.

3) I see a lot of changes not related to the issue. 
Newlines and documentation reformation.
Please rollback such changes.

4) I see you duplicated each test inside GridCacheQueueApiSelfAbstractTest.
Please find a way to reduce changes amount.

[~avinogradov],

Following are the replies to your comments:
 # Should have removed this. Overlooked it.
 # Will make the changes
 # I have set the Ignite recommend properties in IntelliJ. The formatting shortcut is making such changes. I thought it would be ok. I will revert them from now on.
 # Can I merge the tests into a single function, instead of duplicating them?

I have a question of my own:
 # Should the following unit test be successful?

{code:java}
public void testCollectionMethods() throws Exception {
	IgniteQueue<SameHashItem> queue = grid(0).queue("q1", 0, config(false));
	IgniteQueue<BinaryObject> queueBin = grid(0).queue("q1", 0, config(false)).withKeepBinary();

	int retries = 100;

	// Initialize queue.
	for (int i = 0; i < retries; i++) {
	    queue.addAll(Arrays.asList(new SameHashItem(Integer.toString(i)), new SameHashItem(Integer.toString(i))));
	    queueBin.addAll(Arrays.asList(sameHashBinObj(grid(0), i), sameHashBinObj(grid(0), i)));
	}

	assertTrue(queue.contains(new SameHashItem(Integer.toString(14))));
}

private static BinaryObject sameHashBinObj(Ignite ignite, int i) {
    return ignite.binary().toBinary(new SameHashItem(Integer.toString(i)));
}
{code}

[~uday] ,

3) BTW, since you're using IDEA, I recommend you to use codestyle and inspections from ./idea folder.
4) There are a lot of cases. 
For example you can create KeepBinaryTest extends GridCacheQueueApiSelfAbstractTest

1) both cases 
{noformat}
IgniteQueue<SameHashItem> queue = grid(0).queue("q1", 0, config(false));
IgniteQueue<BinaryObject> queueBin = grid(0).queue("q1", 0, config(false)).withKeepBinary();
{noformat}
and 
{noformat}
IgniteQueue<SameHashItem> queue = grid(0).queue("q1", 0, config(false));
IgniteQueue<BinaryObject> queueBin = queue.withKeepBinary();
{noformat}

should be ok, I think.
But, I'm not sure I understand thу question about the test.

[~avinogradov] 

The unit test fails currently, for line

{code:java}
assertTrue(queue.contains(new SameHashItem(Integer.toString(14))));
{code}

I want to know should it be successful?

[~uday]

Could you simplify the test?

What are you checking?

I am trying to check if the SameHash object exists in the queue 'q1' after adding both Binary Object and SameHash Object to it. Currently this is failing. It is successful only if the object is converted to Binary Object. Below is a simplified test.
{code:java}
    public void testContains() throws Exception {
        IgniteQueue<SameHashItem> queue = grid(0).queue("q1", 0, config(false));
        IgniteQueue<BinaryObject> queueBin = grid(0).queue("q1", 0, config(false)).withKeepBinary();

        queue.add(new SameHashItem(Integer.toString(14)));
        queueBin.add(sameHashBinObj(grid(0), 14));

        assertTrue(queue.contains(new SameHashItem(Integer.toString(14)))); // Fails
        assertTrue(queueBin.contains(sameHashBinObj(grid(0), 14))); // Succeeds
    }

    private static BinaryObject sameHashBinObj(Ignite ignite, int i) {
        return ignite.binary().toBinary(new SameHashItem(Integer.toString(i)));
    }
{code}
Is this the expected behaviour?

[~uday]
Please make sure that 
{noformat}
SameHashItem a = new SameHashItem(Integer.toString(14)));
SameHashItem b = new SameHashItem(Integer.toString(14)));
assert a.hashCode() == b.hashCode();
assert a.equals(b);
{noformat}

In case asserts are ok, just debug comparison and let me know the reason, please.


[~avinogradov],

The asserts in your code snippets are working. Do you want me to debug your snippet or mine? In case I wasn't clear, I just want to know whether the unit test I shared should succeed or not.

[~uday]
It looks like it should be successful.
Please debug why comparison returns {{false}}.
It will be easy to answer should it be successful or not once we find the reason.

[~avinogradov]

The code in my PR at GridCacheQueueProxy:484 is changing the operating context for the queue objects already initialised in the thread. It can be confirmed since the unit test below works but the unit test in the comments above does not:
{code:java}
    public void testContains() throws Exception {
        IgniteQueue<SameHashItem> queue = grid(0).queue("q1", 0, config(false));

        queue.add(new SameHashItem(Integer.toString(14)));

        assertTrue(queue.contains(new SameHashItem(Integer.toString(14)))); // Succeeds

        IgniteQueue<BinaryObject> queueBin = grid(0).queue("q1", 0, config(false)).withKeepBinary();

        queueBin.add(sameHashBinObj(grid(0), 14));

        assertTrue(queueBin.contains(sameHashBinObj(grid(0), 14))); // Succeeds
    }

    private static BinaryObject sameHashBinObj(Ignite ignite, int i) {
        return ignite.binary().toBinary(new SameHashItem(Integer.toString(i)));
    }
{code}
 

Is this acceptable?

 

[~uday],

Not sure I understand your question. 
What I see, you relocated {{IgniteQueue<BinaryObject> queueBin = grid(0).queue("q1", 0, config(false)).withKeepBinary();}} to another line and gain "Succeeds" in both cases.
Reason still not clear to me. Why relocation cause another behavior?


[~avinogradov]

I have updated the PR. I am just doubtful of my changes to GridCacheQueueProxy#withKeepBinary().

[~uday],

1) I see an incorrect comparison in the {{clear}} method.
Use {{obj instanceof BinaryObject}} check instead.

2) {{withKeepBinary}} should be implemented inside {{GridCacheQueueAdapter}}
 {{GridCacheQueueProxy}}'s {{withKeepBinary}} should only control the {{gate}}.

3) It's incorrect to have such constructor {{new CacheOperationContext(cctx.skipStore(), ...}} since {{cctx.skipStore()}} uses {{opCtx}} and we know it's {{null}}.
{noformat}
CacheOperationContext opCtx = opCtxPerCall.get();

return (opCtx != null && opCtx.skipStore());
{noformat}
4) I like your idea of {{initQueue}} method, 
but I see no reason to create 6 additional tests. 
You can just create a queue with keepBinary because of some flag and run existing tests twice (with keeping binary and without).
Easiest case to do this is to create special "binary" suite like {{org.apache.ignite.testsuites.IgniteBinaryHibernate5TestSuite}}.
Please check Ignite's code to find a good way to do that. I'm pretty sure we already have something similar.

[~avinogradov],

I have done the review changes. Please have a look.

[~uday]

 1) Can we avoid copy-paste at {{withKeepBinary}} javadoc?
Let's make it smaller and simpler :)

2) rollback changes not related to the issue. 
I see formatting changes at {{testPutGetMultithreadUnbounded}} method and at {{testIsolation}} javadoc.

3) I see code duplication between {{testCollectionMethods}} and {{testCollectionMethodsBin}}.

[~avinogradov]

I will make the first to changes. For the third change, the duplication is because the a binary cache will only support primitives, {{String}} and {{BinaryObject}} types. This is mentioned in the comments of {{IgniteCache#withKeepBinary()}}. The {{testCollectionMethods}} uses the {{SameHashItem}} POJO which is not directly supported by the binary cache. That is why I have created {{testCollectionMethodsBin}} which uses the binary cache friendly object type.

[~uday]

Just wanted to ask to find a way to solve duplication properly. To minimize changes.

[~avinogradov]

Oh ok. I have updated the PR with first two changes only.

[~uday]

Hello, what's the current status?
Any help needed?

[~avinogradov],

I have updated the changes based on the last review. I forgot to mark it as 'patch submit'

[~uday]

I still see duplication between testCollectionMethodsBin and testCollectionMethods which is not acceptable.
Please find a way to solve this issue.

[~avinogradov],

I have removed the duplicate code and updated the PR. Please share your feedback.

[~uday]

Looks good to me now.

[~dpavlov]

I'm not an expert at binary. 

Could you please 
- check the solution using tcBot
- find the final reviewer to check the API and implementation

{panel:title=Possible Blockers|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1}
{color:#d04437}PDS (Indexing){color} [[tests 0 Exit Code |https://ci.ignite.apache.org/viewLog.html?buildId=2045585]]

{color:#d04437}_Licenses Headers_{color} [[tests 0 Exit Code |https://ci.ignite.apache.org/viewLog.html?buildId=2045594]]

{color:#d04437}Binary Objects (Simple Mapper Basic){color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=2045526]]
* IgniteBinarySimpleNameMapperBasicTestSuite: BPlusTreeSelfTest.testSizeForRandomPutRmvMultithreadedAsync_3 - 0,0% fails in last 100 master runs.

{color:#d04437}Continuous Query 1{color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=2045535]]
* IgniteCacheQuerySelfTestSuite3: GridCacheContinuousQueryReplicatedSelfTest.testExpired - 0,0% fails in last 100 master runs.

{color:#d04437}Queries 2{color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=2045556]]
* IgniteBinaryCacheQueryTestSuite2: DynamicColumnsConcurrentAtomicReplicatedSelfTest.testDropColumnCoordinatorChange - 0,0% fails in last 100 master runs.

{color:#d04437}Cache (Deadlock Detection){color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=2045614]]
* TxDeadlockDetectionTestSuite: TxPessimisticDeadlockDetectionTest.testDeadlocksReplicated - 0,0% fails in last 100 master runs.

{panel}
[TeamCity Run All|http://ci.ignite.apache.org/viewLog.html?buildId=2045627&amp;buildTypeId=IgniteTests24Java8_RunAll]

[~uday]

Please merge current master and rerun TcBot. 
Looks like this issues already solved.

[~avinogradov],

I think the branch was merged with before the bot ran.

[~uday]

I don't see have you merged master or not since you squashed commits.
Tc bot does not merge master before the check.

[~avinogradov],

Yes, I had messed up a bit. I have now rebased against master and pushed my changes. Should i now trigger the TeamCity RunAll?

[~uday]

Yes, please run it. 

{panel:title=Possible Blockers|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1}
{color:#d04437}Hadoop{color} [[tests 0 TIMEOUT , Exit Code |https://ci.ignite.apache.org/viewLog.html?buildId=2050788]]
* IgniteHadoopFileSystemClientBasedDualAsyncSelfTest.testClientReconnect (last started)

{color:#d04437}Client Nodes{color} [[tests 0 TIMEOUT , Exit Code |https://ci.ignite.apache.org/viewLog.html?buildId=2050774]]
* IgniteClientReconnectApiExceptionTest.testErrorOnDisconnect (last started)

{color:#d04437}Platform .NET (Core Linux){color} [[tests 0 Exit Code |https://ci.ignite.apache.org/viewLog.html?buildId=2050819]]

{color:#d04437}ZooKeeper (Discovery) 2{color} [[tests 2|https://ci.ignite.apache.org/viewLog.html?buildId=2050813]]
* ZookeeperDiscoverySpiTestSuite2: IgniteCachePutRetryTransactionalSelfTest.testAtomicLongRetries - 0,0% fails in last 100 master runs.
* ZookeeperDiscoverySpiTestSuite2: IgniteCachePutRetryTransactionalSelfTest.testPutAsyncStoreEnabled - 0,0% fails in last 100 master runs.

{color:#d04437}Queries 2{color} [[tests 2|https://ci.ignite.apache.org/viewLog.html?buildId=2050800]]
* IgniteBinaryCacheQueryTestSuite2: DynamicColumnsConcurrentAtomicReplicatedSelfTest.testDropColumnCoordinatorChange - 1,0% fails in last 100 master runs.

{color:#d04437}Cache (Full API Multi JVM){color} [[tests 39|https://ci.ignite.apache.org/viewLog.html?buildId=2050843]]
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testGetAll - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testGetAllWithFirstNull - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testGetAndPutAsync - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testGetAndRemove - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testGetAsyncOld - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testGetOutTxAsync - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testGlobalClearAllAsync - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testGlobalClearAllAsyncOld - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testGlobalClearKeys - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testGlobalClearKeysAsync - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testIgniteTransformOptimisticRepeatableRead - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testInvoke - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testIterator - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testLocalClearKey - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testLockInsideTransaction - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testOptimisticTxMissingKeyNoCommit - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testOptimisticTxReadCommittedInTx - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testPeekExpired - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testPessimisticTxReadCommittedInTx - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testPessimisticTxRepeatableRead - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testPutAll - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testPutAllAsyncOld - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testPutAsyncOld0 - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testPutIfAbsentAsyncConcurrent - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testPutIfAbsentAsyncConcurrentOld - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testRemove - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testRemoveAfterClear - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testRemoveAsyncOld - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testRemovexAsync - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testRemovexAsyncOld - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testReplacexAsyncOld - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testTransformAfterRemovePessimistic - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testTransformOptimisticReadCommitted - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testTransformOptimisticRepeatableRead - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testTransformPessimisticRepeatableRead - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testTransformReturnValueGetPessimisticReadCommitted - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testTransformReturnValueGetPessimisticRepeatableRead - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testTransformSequentialPessimisticNoStart - 0,0% fails in last 100 master runs.
* IgniteCacheFullApiMultiJvmSelfTestSuite: GridCachePartitionedOnheapMultiJvmFullApiSelfTest.testTtlNoTxOldEntry - 0,0% fails in last 100 master runs.

{color:#d04437}Cache (Full API Config Variations / Basic){color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=2050859]]
* IgniteCacheBasicConfigVariationsFullApiTestSuite: IgniteCacheConfigVariationsFullApiTest.testTtlNoTx - 0,0% fails in last 100 master runs.

{panel}
[TeamCity Run All|http://ci.ignite.apache.org/viewLog.html?buildId=2045627&amp;buildTypeId=IgniteTests24Java8_RunAll]

[~dpavlov]

I checked the results. Seems we have no failures related to the changes. 

Please ask a proper person to perform the final review.

{panel:title=Possible Blockers|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1}
{color:#d04437}PDS (Indexing){color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=2050829]]
* IgnitePdsWithIndexingCoreTestSuite: IgnitePersistentStoreCacheGroupsTest.testExpiryPolicy - 0,0% fails in last 100 master runs.

{color:#d04437}Cache 8{color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=2050861]]
* IgniteCacheTestSuite8: CacheMetricsForClusterGroupSelfTest.testMetricsStatisticsEnabled - 0,0% fails in last 100 master runs.

{panel}
[TeamCity Run All|http://ci.ignite.apache.org/viewLog.html?buildId=2050871&amp;buildTypeId=IgniteTests24Java8_RunAll]

[~dpavlov], 

Just a reminder that your help needed.

Patch looks good to me.

[~uday] , 

 Could you please merge actual master into your branch?

Then I'll check TeamCity and merge the solution.

[~avinogradov] because we had just 2 tests which may be flaky, we can omit this stage to get an absolutely green visa.

I have rebased the changes against the master.

Retriggered: https://ci.ignite.apache.org/viewQueued.html?itemId=2539366 Comment should appear here later

{panel:title=--&gt; Run :: All: No blockers found!|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=2539366&amp;buildTypeId=IgniteTests24Java8_RunAll]

[~vozerov], [~sergey-chugunov], [~avinogradov] thank you for review.

[~uday] thank you for the contribution!

Merged to master.

Github user asfgit closed the pull request at:

    https://github.com/apache/ignite/pull/4720


