This shows up on a number of tests, making them flaky:
- Peer::ProcessResponse holds the lock on the Peer and calls queue->ResponseFromPeer which calls Consensus::UpdateCommittedIndex which tries to lock ReplicaState
- RaftConsensus::Shutdown takes the ReplicaState lock and calls Peer::Close which waits on the latch for the current in-flight request to finish.

If a ProcessResponse call comes right after Shutdown acquires the lock, it will block on that lock. Then Shutdown blocks waiting for the ProcessResponse call to finish, and we get a deadlock.