As an example, suppose the Hive QL contains the following statement:

export table $ {sourceDatabase}.$ {sourceTable} partition $ {sourcePartition} to '$ {sourceStagingDir}';

where the value of $ { sourcePartition} is populated by $ {coord:dataInPartitionFilter('input', 'hive')}. The sample output of partition value looks like: (minute='00' AND month='03' AND year='2014' AND hour='09' AND day='11'). 

The resulting Hive job fails with the following error:
FAILED: ParseException line 1:51 mismatched input 'AND' expecting ) near ''00'' in export statement


Attaching the patch that resolves this issue.

Testing JIRA OOZIE-1741

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1398
.    Tests failed: 0
.    Tests errors: 1

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/1103/

The above test org.apache.oozie.event.TestEventGeneration.testCoordinatorActionEvent has passed on my local setup. Seems to be a transient test failure.

Hi, can someone please review the patch?

Raised review board request @ https://reviews.apache.org/r/19449/

Adding comments from reviewboard:

{noformat}
*Rohini Palaniswamy Posted 4 days, 19 hours ago (March 20, 2014, 4:57 p.m.)*

What is the expected string to be returned from the function, when the data-in has current(0) to current(-23)? Can you give some examples where more than one instance of the dataset is involved?

*Satish Mittal 4 days, 5 hours ago (March 21, 2014, 7:08 a.m.)*

Hi, This function is intended to be used when there is only one data-set instance. E.g. for current(0), a sample output is:

(year='2014',month='03',day='11',hour='09',minute='00')

I haven't added a check for multiple instances scenario. Will do that in the updated patch.
{noformat}

{noformat}
*Ryota Egashira Posted 17 hours, 27 minutes ago (March 24, 2014, 7:11 p.m.)*

in addition to rohini's comment.
how about making it more generic EL funct, where user can specify separator(e.,g ',' 'AND' 'OR') and equal symbol (e.g, '=', '==', etc) in argument?, since there could be new requirement in future more than "," "=" pair for hive export/import.
current dataInPartitionFilter somehow trying to hide the detail, only asking user to specify action type to make it easy.  but also good to provide new configurable EL funct for those who know what they are doing.

*Satish Mittal 7 minutes ago (March 25, 2014, 12:32 p.m.)*

Hi Ryota, 
I like your idea of generalizing various aspects of new EL function (separator, equal symbol) so that it can handle newer use-cases to generate single partition value in future, without the need to add a new function for each of them. Will do that.
{noformat}

Attaching updated patch that incorporates the review comments.

Testing JIRA OOZIE-1741

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:red}-1{color} the patch contains 14 line(s) with tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 9 line(s) longer than 132 characters
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1409
.    Tests failed: 0
.    Tests errors: 1

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/1136/

The test org.apache.oozie.event.TestEventGeneration.testCoordinatorActionEvent has successfully passed on my local setup. Seems to be a transient test failure.

{noformat}
satish@ubuntu:~/work/oozie/core$ mvn test -Dtest=org.apache.oozie.event.TestEventGeneration
...
...
Results :

Tests run: 6, Failures: 0, Errors: 0, Skipped: 0
{noformat}

[~rohini] can you respond to review comments?

Attaching updated patch with review comments.

Testing JIRA OOZIE-1741

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 1 line(s) longer than 132 characters
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1410
.    Tests failed: 0
.    Tests errors: 2

.    The patch failed the following testcases:

.      

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/1148/

All tests of class org.apache.oozie.event.TestEventGeneration and org.apache.oozie.servlet.TestV1JobServletBundleEngine have successfully passed on my local setup. Seem to be transient failures.

[~rohini] can you review the updated patch?

[~rohini] [~egashira] Can someone review the updated patch please?

Gentle reminder for review.

Code is mostly fine, but dataInPartitions() function returns in the format (year='2014',month='03',day='28',hour='08') and only allows one partition. The convention/naming does not sound right with its current functionality and also doesn't gel with the existing ones. Let me dig up a little more on hive to see if there are other cases or if not think of a better naming.

[~rohini] any thoughts on better naming/abstraction for the EL function?

Sorry. was out couple of days. 
[~thiruvel],
   Did you get time to look into this?

[~thiruvel], one naming option I could think of is dataInPartition(String type), given that it returns only 1 partition. It already accepts action type as input for handling various action types. Can you please provide your inputs?

Hi [~thiruvel], [~rohini], if there are no concerns/comments, can we go ahead with the original proposal in the patch?

There are different ways in which we can use the partitions values that triggered the coordinator.

1. In queries as filters.
a. This can be all partition filters - (p1=v1 and p2=v2 and p3=v3) - when we want to look at only one complete partition spec.
b. By not specifying all the partition keys, say (p1 = v1) and not include p2 and p3.

2. In metadata related queries.
a. Like 'alter table t1 drop partition (p1=v1, p2=v2, p3=v3) - where all partition keys are specified.
b. Might not include all partition keys, say 'alter table t1 drop partition (p1=v1) - where all partitions that match p1=v1 will be dropped.

3. In other miscellaneous scenarios
a. HCat/Metastore client APIs or even Hive Commands. Conditions like 'p1 > v1' or 'p1 != v1' etc are possible. Eg: When a new partition is registered, drop all the partitions which are older than 30 days.

I can't think of any other possibility. Please ensure there are no confusions w.r.t API usage. Will let [~rohini] add her comments.

Thanks [~thiruvel] for your inputs!

- For 1), we already have an EL dataInPartitionFilter().
- For 2), the proposed EL in this jira dataInPartitions() can serve the purpose.
- For 3), I think we should add new ELs as per the requirement, since a large number of combinations are possible here (comparator:- =, !=, <, > etc and separator:- AND, OR). 

The use-case of 3) is closer to 1) since it aims to generate a filter criteria, as against 2) which aims to generate the value of a partition spec to be used in DDL/import/export queries.

I checked that in Hive, the format of partition spec in various DDL queries (alter, truncate, drop, show, describe), DML queries (load, insert) is: (partcol1=val1, partcol2=val2 ...). The format of partition spec for IMPORT/EXPORT queries is: (partcol1="val1", partcol2="val2" ...). I verified that the latter format is a super-set, i.e. specifying (partcol1="val1", partcol2="val2" ...) works for all these queries. That is the format generated by EL dataInPartitions() in this patch as well.

Regarding partial/full partition spec, even the existing EL dataInPartitionSpec writes all partition cols specified in HCat URI for dataset. The same approach is taken for EL dataInPartitions() introduced in this patch.

[~rohini], can you provide your comments here?

Instead of datainPartitions() which is very specific can we do a dataInPartitionValue() similar to dataoutPartitionValue() which will cover both cases 2 and 3 and is more generic?

dataoutPartitionValue() works nicely as there is a single instance in output. But input has multiple instances of input data and dataInPartitionValue() has to take an instance time to give a meaningful value. How about new EL function dataInPartitions() return an array of partitions of format (col1='val1', col2='val2'), (col1='val3', col2='val4')?

[~shwethags],
   For this use case there is only one instance and hence I suggested dataInPartitionValue. Even the submitted patch throws error when there is more than one partition. What you have suggested has comma  as separator in two different places which will not work with splitting on comma.

[~rohini], I can update the patch to relax the restriction and support multiple partitions to generalize it. We can choose a different separator between partitions (e.g. ';'). Please let me know.

In that case, you can do dataInPartitions() with type as "hive-export" and still throw error if there is more than one partition. Does not make sense to add something (list all with a different separator) when there is no possibility of using it in some scenario. 

I prefer the dataInPartitionValue() for this scenario as it is clean and also might be useful in other cases. But if you want to make it easier for the user by avoiding user have to manually specify the partition column names again and dataInPartitionValue() once for each partition in the export query, then we can do dataInPartitions() with type as "hive-export" and throw error if there is more than one partition. 

Lets add dataInPartitions() with type as "hive-export" and throw error if there is more than one partition. I like specifying the type here so that we can extend for other use cases later if required. 

Attaching revised patch with dataInPartitions() and type as hive-export.

Testing JIRA OOZIE-1741

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 1 line(s) longer than 132 characters
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:red}-1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:red}-1{color} the patch seems to introduce 1 new javac warning(s)
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1470
.    Tests failed: 2
.    Tests errors: 1

.    The patch failed the following testcases:

.      testBundleEngineReRun(org.apache.oozie.servlet.TestV1JobServletBundleEngine)
.      testActionCheckTransientDuringMRAction(org.apache.oozie.command.wf.TestActionCheckXCommand)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/1315/

Thanks [~rohini] and [~shwethags] for review comments. Attaching updated patch.

Testing JIRA OOZIE-1741

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 1 line(s) longer than 132 characters
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1474
.    Tests failed: 2
.    Tests errors: 2

.    The patch failed the following testcases:

.      testActionInputCheckLatestActionCreationTime(org.apache.oozie.command.coord.TestCoordActionInputCheckXCommandNonUTC)
.      testBundleEngineResume(org.apache.oozie.servlet.TestV1JobServletBundleEngine)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/1320/

The test 'org.apache.oozie.command.coord.TestCoordActionInputCheckXCommandNonUTC' failure is unrelated and it fails on my setup even without applying these changes. 

Other test failures seem to be transient since they are passing on my setup.

More comments; updated patch.

Testing JIRA OOZIE-1741

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 1 line(s) longer than 132 characters
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1477
.    Tests failed: 4
.    Tests errors: 2

.    The patch failed the following testcases:

.      testActionInputCheckLatestActionCreationTime(org.apache.oozie.command.coord.TestCoordActionInputCheckXCommand)
.      testCoordStatusTransitServiceKilledByUser2(org.apache.oozie.service.TestStatusTransitService)
.      testResetSequence_withMultiThread(org.apache.oozie.service.TestZKUUIDService)
.      testActionInputCheckLatestActionCreationTime(org.apache.oozie.command.coord.TestCoordActionInputCheckXCommandNonUTC)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/1325/

+1, can commit if the test failures are not related to this patch

[~satish.mittal], can you check the test failures please?

As earlier, except org.apache.oozie.command.coord.TestCoordActionInputCheckXCommand. testActionInputCheckLatestActionCreationTime which is unrelated and failing without the changes, all other tests are succeeding on my setup.

Can one of the committers commit this please?

Hi [~rohini], can you please commit it?

+1. Committed to trunk. Thanks Satish for the patch.

Test failures are due to OOZIE-1811 and OOZIE-1872 and TestZKUUIDService was just flaky. Line exceeding 132 chars is the hive sql in documentation.

Made a slight change before commit. Changed new section 6.8.9 to 6.8.8 as it had skipped 8.

Thanks [~rohini] for the change and commit!

