Here is a basic test which is non-deterministic.

I can get it to timeout in branch-1 code without HBASE-14313 ({{HEAD detached at b8c7a08}}) if run 10 times. 

Interesting this is that async rpc client always runs into timeout, but did not inspect what is going on there. I'll try to get the stack traces.  

Since this is non-deterministic can we make it an IT instead of a UT? 

bq. Since this is non-deterministic can we make it an IT instead of a UT?
I thought about it, but decided that a UT maybe more helpful even if it is non-deterministic. We already have the actual CM tests as IT tests which surfaced HBASE-14474 and Elliott says he ran into HBASE-14313 in an IT. Having this as UT makes it so that it runs in every commit at least. Even if it fails 10-20%, we can find it useful (otherwise, we can rip this off later). 

A non-deterministic UT is a broken UT by definition IMHO. When we find such creatures when debugging builds they tend to get disabled with prejudice, later removed. 

bq. A non-deterministic UT is a broken UT by definition IMHO. When we find such creatures when debugging builds they tend to get disabled with prejudice, later removed.
I disagree. There are some code paths or race conditions that doing a unit test against is not possible or easy. Current lack of unit testing against the RPC client is a perfect example of this. We do not want to leave discovering issues like HBASE-14474 or HBASE-14313 to the IT framework which does not run periodically in different branches. 

This test for example, fails with the branch-1 checkout of b8c7a08 (before HBASE-14313) every couple of runs. We can make it to run longer to catch any issue earlier, but it is about finding a balance. 

{code}
HEAD detached at b8c7a08:
"Time-limited test" daemon prio=5 tid=0x00007fbda48ad800 nid=0x5303 waiting on condition [0x000000012073a000]
   java.lang.Thread.State: TIMED_WAITING (sleeping)
  at java.lang.Thread.sleep(Native Method)
  at org.apache.hadoop.hbase.ipc.RpcClientImpl.close(RpcClientImpl.java:1174)
  at org.apache.hadoop.hbase.ipc.TestRpcWithChaosMonkey.testRpcWithChaosMonkey(TestRpcWithChaosMonkey.java:330)
{code}

I agree with Enis as long as a test doesn't give a false failure. Every failure should be real. A passing when something has been messed up is not ideal but is no worse than no test.

I agree with Andrew (till I understand more). We've already got a fleet of 'non-deterministic' tests, so many, our CI runs are of no value. The difference here is that it would be known non-deterministic? How is distingushed from tests that are non-known-to-be-non-deterministic?

bq. Even if it fails 10-20%, we can find it useful

Trying to understand. So, before checkin, you can make it fail? If so, can we fix before commit?

bq. I agree with Andrew (till I understand more). We've already got a fleet of 'non-deterministic' tests, so many, our CI runs are of no value
A non-deterministic test in this context is different from a flaky test. We have a bunch of flaky tests that fail due to false negatives making jenkins runs useless. This test in particular will not fail for false negatives, but it might fail to catch deadlocks (false positive). If this test fails, I imagine we take a look at it rather than classify as a flaky test. 

bq.  I imagine we take a look at it rather than classify as a flaky test.

Thanks for the explanation.

How to designate difference between a flakey and a test that might fail with 'real' issue that needs looking at? An outsider like myself trying to cleanup test failures would need to be able to distinguish between the two. Devs trying to get a clean run against their patch would need to be able to look at results and see that the fail was not theirs but because the test is a 'non-deterministic'.

[~enis] are you saying here that failures of this test would always be legitimate product issues (even if not always reproducible due to non-determinism) and not the false-negatives that we're calling "flakey"?

If I parachuted in and found this test only failing in some cases but not in others, while trying to clean up a slew of flakes, I'd likely disable this or move it out to an IT. True, every failure should be looked at, but we let flakiness build up in our suite and leave it to angels to come in later and triage. When triaging, deep analysis is deferred, by definition.

On the other hand, integration tests are expected to have some level of nondeterminism as they are designed to run against a full cluster with a lot of moving parts. 


I have converted the test to be an IT instead in the hopes that we can get it in and running at least. It has already been useful in analyzing the patches for the parent.

I've also made some changes and added a big payload to the RPCs (2MB) to simulate the write + close deadlock better. However, now I am running into timeouts in master code. I was testing with branch-1.1  which was ok, but it is failing in master now. I have to inspect the thread dump to see what is happening.  

Here is the v3 patch. I was testing with an older version of master which is why the test was failing. 

Now, we default to doing 10 iterations takes 5 mins to run. 

The IT can be run like this: 
{code}
bin/hbase  org.apache.hadoop.hbase.IntegrationTestsDriver -regex IntegrationTestRpcClient 2>&1 | tee /tmp/log
{code}

I've opened HBASE-14610 for the async client. 

Should I commit this now that it is an IT now and passing? 

+1 from me, but maybe [~apurtell], [~eclark], or [~stack] can retract their objection first.

+1

Pushed to 0.98+. Thanks everyone. 

Belated +1.
Sorry, was away dealing with a kidney stone :-/

FAILURE: Integrated in HBase-TRUNK #6946 (See [https://builds.apache.org/job/HBase-TRUNK/6946/])
HBASE-14535 Integration test for rpc connection concurrency / deadlock (enis: rev b4ba615c70e89aa00ec0878d64e6e0f42e437df0)
* hbase-it/src/test/java/org/apache/hadoop/hbase/ipc/IntegrationTestRpcClient.java


SUCCESS: Integrated in HBase-1.0 #1096 (See [https://builds.apache.org/job/HBase-1.0/1096/])
HBASE-14535 Integration test for rpc connection concurrency / deadlock (enis: rev 29d3b110ea575213f127d93bcdc281289ae20849)
* hbase-it/src/test/java/org/apache/hadoop/hbase/ipc/IntegrationTestRpcClient.java


SUCCESS: Integrated in HBase-1.1 #720 (See [https://builds.apache.org/job/HBase-1.1/720/])
HBASE-14535 Integration test for rpc connection concurrency / deadlock (enis: rev 2b84cd5cf0741b6531474ddc956a019d6f890cf4)
* hbase-it/src/test/java/org/apache/hadoop/hbase/ipc/IntegrationTestRpcClient.java


SUCCESS: Integrated in HBase-1.3 #296 (See [https://builds.apache.org/job/HBase-1.3/296/])
HBASE-14535 Integration test for rpc connection concurrency / deadlock (enis: rev 6588ca5654bba540c186acc7021b954cde82f8e2)
* hbase-it/src/test/java/org/apache/hadoop/hbase/ipc/IntegrationTestRpcClient.java


SUCCESS: Integrated in HBase-1.2-IT #237 (See [https://builds.apache.org/job/HBase-1.2-IT/237/])
HBASE-14535 Integration test for rpc connection concurrency / deadlock (enis: rev b3219d0d292939ff030753e19c3ad286022cb448)
* hbase-it/src/test/java/org/apache/hadoop/hbase/ipc/IntegrationTestRpcClient.java


FAILURE: Integrated in HBase-0.98-on-Hadoop-1.1 #1118 (See [https://builds.apache.org/job/HBase-0.98-on-Hadoop-1.1/1118/])
HBASE-14535 Integration test for rpc connection concurrency / deadlock (enis: rev 2d68af9004c9c5f43f97b28003b00eea76844753)
* hbase-it/src/test/java/org/apache/hadoop/hbase/ipc/IntegrationTestRpcClient.java


SUCCESS: Integrated in HBase-1.3-IT #265 (See [https://builds.apache.org/job/HBase-1.3-IT/265/])
HBASE-14535 Integration test for rpc connection concurrency / deadlock (enis: rev 6588ca5654bba540c186acc7021b954cde82f8e2)
* hbase-it/src/test/java/org/apache/hadoop/hbase/ipc/IntegrationTestRpcClient.java


FAILURE: Integrated in HBase-1.2 #296 (See [https://builds.apache.org/job/HBase-1.2/296/])
HBASE-14535 Integration test for rpc connection concurrency / deadlock (enis: rev b3219d0d292939ff030753e19c3ad286022cb448)
* hbase-it/src/test/java/org/apache/hadoop/hbase/ipc/IntegrationTestRpcClient.java


FAILURE: Integrated in HBase-0.98 #1165 (See [https://builds.apache.org/job/HBase-0.98/1165/])
HBASE-14535 Integration test for rpc connection concurrency / deadlock (enis: rev 2d68af9004c9c5f43f97b28003b00eea76844753)
* hbase-it/src/test/java/org/apache/hadoop/hbase/ipc/IntegrationTestRpcClient.java


Bulk closing 1.1.3 issues.

