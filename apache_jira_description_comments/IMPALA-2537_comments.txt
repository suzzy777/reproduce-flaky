tests/metadata/test_hms_integration.py does this, and if name randomization is done more widely, it would be good to reuse code rather than duplicate it.

Michael, can you please take a look at this one? Hopefully, it will help to speed up our EE tests and remove some flakiness. Let me know if I can clarify anything. As we discussed over lunch some time ago, using random names is probably not too great. We should generate unique names based on the test vector instead.

[~hsheinblatt_impala_e511], fyi, this JIRA will introduce a new best practice for generating tmp dbs/tables for EE tests.

commit 6f3a1d52dfc8e1103dadface751d18812e7e4345
Author: Michael Brown <mikeb@cloudera.com>
Date:   Wed Jan 6 13:53:25 2016 -0800

    IMPALA-2537: EE tests: create and use unique database fixture
    
    To speed up tests and reduce flakiness, introduce a pytest fixture
    whereby a test maintainer may request a database unique to his test.
    Such databases are suitable for tests that need to create tables within
    Python test code. Because the database name is unique to the test, the
    test can create any tables within that database it wants without fear
    that the same tables will be picked up by another test. Unique databases
    effectively guarantee a unique namespace for tables.
    
    To generate the database name, we use the CRC32 checksum of the test's
    so-called pytest test ID. This ID is a long string containing the test's
    module path, class (if applicable), function name, and parameter set
    (e.g., vector). We then concatenate the CRC32 checksum with the test
    function name, so that it's easier to identify the test to which the
    database belongs. The test author may also override the prefix by
    parametrizing the fixture.
    
    We then use a pytest fixture to create the database, hand the name to
    the test using the fixture, and clean up the database automatically
    after the test completes.
    
    The command `impala-py.test --fixtures` executed from the tests/
    directory explains the full usage.
    
    Finally, we modify a few tests to show how test maintainers can use this
    fixture.
    
    Not supported here are databases used by .test files, creation of hive
    databases, databases with special CREATE parameters such as LOCATION and
    COMMENT, or asking the fixture to create multiple databases. Also not
    supported would be attempted parallel runs of the same test with the
    same test parameters.

    Testing:
    
    1. Manual testing of the fixture usage, both in vanilla and
       parametrized context.
    
    2. Manual runs of the tests modified.
    
    3. An exhaustive exploration strategy test run.
    
    Change-Id: I74d200da8a59379388e1edfbb849828f92a1b3b7
    Reviewed-on: http://gerrit.cloudera.org:8080/1821
    Reviewed-by: Michael Brown <mikeb@cloudera.com>
    Tested-by: Internal Jenkins

