As an example this build is running at https://travis-ci.org/OhmData/hbase-public. Once we get the patch into mainline we should be able to run builds against the apache/hbase mirror on github and also your own personal forks of the apache repo.

Here's one that supports travis and circle-ci

Here's an example on circle-ci
https://circleci.com/gh/OhmData/hbase-public/164



Adding these files for support shouldn't be objectionable, it's a nice contribution. 

Worried about the maintainability of dev-support/split_across_ci.sh though. That's going to bit rot almost instantly. 

Actually the same issue with travis.yaml. Any way to do this without listing out test packages. How tests are structured is project private and subject to disruptive change at any time. Without an active maintainer of these meta files their utility will rapidly decline.

Agreed. These are preview patches. I want to do it more generically. Ideally users could use a higher level abstraction to split builds across multiple docker instances (for instance).

I agree, we should be able to programatically break them up, rather than listing them manually. However breaking them up is extremely important. Running the build without proper isolation between tests will never work consistently until we gut a large amount of tests.

[~apurtell] What do you think about adding new test categories for this purpose?

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12665040/HBASE-11853-testing-v1.patch
  against trunk revision .
  ATTACHMENT ID: 12665040

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:red}-1 release audit{color}.  The applied patch generated 3 release audit warnings (more than the trunk's current 0 warnings).

    {color:red}-1 lineLengths{color}.  The patch introduces the following lines longer than 100:
    +  - BUILD="-pl hbase-server test -P runAllTests -Dtest=`dev-support/listNonPackagedHBaseServerTests.sh`"
+  - BUILD="-pl hbase-server test -P runAllTests -Dtest=org.apache.hadoop.hbase.coprocessor.*" - BUILD="-pl hbase-server test -P runAllTests -Dtest=org.apache.hadoop.hbase.backup.*,org.apache.hadoop.hbase.codec.*,org.apache.hadoop.hbase.errorhandling.*,org.apache.hadoop.hbase.executor.*,org.apache.hadoop.hbase.filter.*,org.apache.hadoop.hbase.fs.*,org.apache.hadoop.hbase.http.*,org.apache.hadoop.hbase.io.*,org.apache.hadoop.hbase.ipc.*"
+  - BUILD="-pl hbase-server test -P runAllTests -Dtest=org.apache.hadoop.hbase.metrics.*,org.apache.hadoop.hbase.monitoring.*,org.apache.hadoop.hbase.procedure.*,org.apache.hadoop.hbase.protobuf.*,org.apache.hadoop.hbase.security.*,org.apache.hadoop.hbase.trace.*,org.apache.hadoop.hbase.zookeeper.*"
+  - BUILD="-pl hbase-client,hbase-common,hbase-examples,hbase-hadoop-compat,hbase-hadoop2-compat,hbase-prefix-tree,hbase-thrift test -P runAllTests"
+#"mvn -pl hbase-server test -P runAllTests -Dtest="`dev-support/listNonPackagedHBaseServerTests.sh` \
+"mvn -pl hbase-server test -P runAllTests -Dtest=org.apache.hadoop.hbase.backup.*,org.apache.hadoop.hbase.codec.*,org.apache.hadoop.hbase.errorhandling.*,org.apache.hadoop.hbase.executor.*,org.apache.hadoop.hbase.filter.*,org.apache.hadoop.hbase.fs.*,org.apache.hadoop.hbase.http.*,org.apache.hadoop.hbase.io.*,org.apache.hadoop.hbase.ipc.*" \
+"mvn -pl hbase-server test -P runAllTests -Dtest=org.apache.hadoop.hbase.metrics.*,org.apache.hadoop.hbase.monitoring.*,org.apache.hadoop.hbase.procedure.*,org.apache.hadoop.hbase.protobuf.*,org.apache.hadoop.hbase.security.*,org.apache.hadoop.hbase.trace.*,org.apache.hadoop.hbase.zookeeper.*" \
+"mvn -pl hbase-client,hbase-common,hbase-examples,hbase-hadoop-compat,hbase-hadoop2-compat,hbase-prefix-tree,hbase-thrift test -P runAllTests"

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.TestRegionRebalancing

     {color:red}-1 core zombie tests{color}.  There are 1 zombie test(s): 

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/10623//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/10623//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/10623//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/10623//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/10623//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/10623//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/10623//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/10623//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/10623//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/10623//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/10623//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/10623//console

This message is automatically generated.

bq. What do you think about adding new test categories for this purpose?

Consider putting up a patch. Let's see what you mean.

Will do!

Here's an example file. I only did the work for some of the tests, but I think you catch the drift. One mvn comman builds everything that's not hbase-server. Then we break up the hbase-server  tests into smaller categories. Since we have fixed categories to assign to tests (just like small, medium and large), it should never go stale, as long as we remember to assign them to a category. 

The one tricky part is figuring out what categories we want for the hbase-server. We don't want too many as it will cause too many builds, but it is important that any category can run fast enough to complete within travis/ci's limits. As far as HBase-server categories go I am thinking

- misc 
- client
- coprocessor
- mapred 
- mapreduce 
- master
- metrics-monitoring 
- regionserver
- replication
- rest 
- snapshot 
- util

I've provided an example for client and also the non hbase-server tests. It's currently running on travis
https://travis-ci.org/OhmData/hbase-public/

If we like this approach, i'll complete the patch for travis and circleci (both free for open source)

I have updated the github to represent a more complete set of the patches. http://github.com/OhmData/hbase-public feel free checkout the travis and circle-ci branches. I should have a patch very soon. One thing I am a bit worried about is our ability to run these tests on machines with 4GB of memory. I know it has been a goal of ours, but I keep on having circle-ci and travis timing out due to us crossing that limit. I'll continue to track down the source.

As we can see from https://circle-artifacts.com/gh/OhmData/hbase-public/197/artifacts/2/tmp/memory-usage.txt we are clearly exceeding 4GB  for some of our map reduce based tests, in this case Running org.apache.hadoop.hbase.mapreduce.TestTableMapReduce exceeded this limit on https://circleci.com/gh/OhmData/hbase-public/197. I am going to tune down the number of simultaneous map tasks so as to limit the memory required to run the build down to 4GB

Why two categories for mapreduce tests? Otherwise, lgtm. Would be good if the categories are applied consistently to all modules not just hbase-server. Then you could run by category or by module, or by module filtering on category.

I broke them up by package. However, where I split them is not arbitrary. Part of the categorization is setup  so that no portion of the build takes longer than an hour or so on travis. However, applying them to every category is trivial because hbase-server is the only module which takes more than a trivial amount of time to run. 

If we can get mapreduce to run faster, combining them should be easy.

[~apurtell] So another problem. It seems as though the tests in the compat directories aren't categorized at all. In fact they don't pull in hbase-common. Perhaps we could do packages which are not categorized at all in another commit?

bq.  Perhaps we could do packages which are not categorized at all in another commit?

Ok by me

So this new patch is way smaller as most of the work is done in the jira this is dependent on.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12667268/HBASE-11853-v4.patch
  against trunk revision .
  ATTACHMENT ID: 12667268

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:red}-1 release audit{color}.  The applied patch generated 2 release audit warnings (more than the trunk's current 0 warnings).

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
     

     {color:red}-1 core zombie tests{color}.  There are 1 zombie test(s): 	at org.apache.hadoop.hbase.client.TestHCM.testClusterStatus(TestHCM.java:250)

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/10743//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/10743//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/10743//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/10743//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/10743//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/10743//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/10743//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/10743//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/10743//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/10743//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/10743//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/10743//console

This message is automatically generated.

Not sure how to track down the build. Let me see if i can restart it.

I could commit this.  Its just a dot file and a tool in dev-tools.  It seems to only test hbase-server content though.  Is that intended?  Why run lots of small bits instead of just passing the lump of all hbase-server tests?  Because we need to run pieces in < 1 hour?  Looks like you need to add some apache licenses on heads of files.  See related for how to do it.

See above comment [~posix4e] ?  What else to make it so build on travis?  Any doc on what you do to make it run?

Good question. I have everything but yarn working on circle-ci, running in 45 minutes.
https://circleci.com/gh/OhmData/hbase-public/329

 Every once in a while we get a flakey failure but it works (sans yarn). I am reaching out to the yarn guys, i need to rebase and i need to a  bit more for travis. However, it's probably good enough for a start. I'll try to put a patch up for circle today.

Here's the patch. MR/YARN tests don't run yet. 

Is that build on circle-ci skipping tests? When you say except mr/yarn, you mean not running hbase tests that have been annotated as mr?

Correct. Currently the yarn tests take more than 4G of memory.  I'm working
with the yarn guys on fixing it now.



{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12671822/HBASE-11853-v0.patch
  against trunk revision .
  ATTACHMENT ID: 12671822

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 6 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:red}-1 release audit{color}.  The applied patch generated 2 release audit warnings (more than the trunk's current 0 warnings).

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.client.TestMultiParallel
                  org.apache.hadoop.hbase.TestZooKeeper

     {color:red}-1 core zombie tests{color}.  There are 2 zombie test(s): 	at org.apache.hadoop.hbase.mapreduce.TestLoadIncrementalHFiles.testSimpleLoad(TestLoadIncrementalHFiles.java:100)
	at org.apache.hadoop.hbase.mapreduce.TestLoadIncrementalHFilesSplitRecovery.testSplitWhileBulkLoadPhase(TestLoadIncrementalHFilesSplitRecovery.java:339)

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/11124//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11124//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11124//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11124//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11124//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11124//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11124//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11124//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11124//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11124//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11124//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11124//artifact/patchprocess/newPatchFindbugsWarningshbase-annotations.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/11124//console

This message is automatically generated.

Rebased off of todays master. rerunning tests at https://circleci.com/gh/OhmData/hbase-public/333

Is that running tests?

Looks like it is running, although every once in a while we get flakey builds. I will take a deeper look at it soon.

A couple of things

 - Rebased off of master
 - Made TestHCM more idempotent (table name wise)
 - Enabled flakey tests in travis and circle-ci
 - Add a retryrunner for flakey tests

We still have TestHCM failing a bunch. 

I realized the extra changes I made to TestHCM might not be needed. Testing on travis now.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12673480/HBASE-11853-v6.patch
  against trunk revision .
  ATTACHMENT ID: 12673480

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 50 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:red}-1 release audit{color}.  The applied patch generated 2 release audit warnings (more than the trunk's current 0 warnings).

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/11255//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11255//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11255//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11255//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11255//artifact/patchprocess/newPatchFindbugsWarningshbase-annotations.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11255//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11255//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11255//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11255//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11255//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11255//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11255//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/11255//console

This message is automatically generated.

Looks like a file that is missing an apache license Alex.

We seem to have managed stablilizing tests here on apache for the most part.... still some work to do ... but still failures on internal rig to address.  Will be interesting to see what your experience is.



Yea sorry about that license. Expect a patch which fixes that. 


Before the patch I have some questions first

- For the "flaky tests", I added test retries. How many retries are ideal? I have it set to 10 currently.
- I removed my changes to TestHCM now that i have the advanced retry runner. 
- It looks like the build is finally passing in travis and circle-ci (for the first time), however TestHCM is still a bit flakey. Perhaps we can handle this in a different issue

On our internal build, we have had about 80% successes using the category based builds. It takes about 45 minutes to run. It seems fine locally.

10 works. 3 would be good too.

Yes to handling TestHCM in different issue.

I granted Ryan access to apache jenkins if you fellas want to mess setting up a category based build of hbase trunk.

Ryans' login is rawson and his apache password will be what he needs to log in builds.apache.org

The travis spec in patch only does hbase-server?  Same for circle.

Whats this

  - BUILD="test -PskipServerTests"

Both travis and circle specs say skipTests?

The RetryRunner is an interesting idea.  How does a test ever leave the flakey/retryrunner category?

Good stuff.




I'll talk to ryan about it.

on skipServerTests. This skips the tests in hbase-server. The other
runs run hbase-server tests by categories. Basically I wanted to run
all the non server tests in one test instance (They run really fast)

As far as how to leave the flakey/retry runner. If the test
consistently runs green, it's not flakey and doesn't need a retry.




Running on 

https://circleci.com/gh/OhmData/hbase-public/370
https://travis-ci.org/OhmData/hbase-public/jobs/38370978

This is looking good. How I read it?  I see we are running a shell command to run each of the categories... in //?  Takes 30mins?  Where I look for tests that failed?

Nice.

Looking at patch, are we pulling all dependencies each time?

	  - $HOME/.m2

The travis spec is still only hbase-server tests?

Ditto for circle-ci set?



If you want to check in the unit test changes separate from this work, just make new issue for retryrunner, etc.

{color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12675693/HBASE-11853-v7.patch
  against trunk revision .
  ATTACHMENT ID: 12675693

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 17 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/11396//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11396//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11396//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11396//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11396//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11396//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11396//artifact/patchprocess/newPatchFindbugsWarningshbase-rest.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11396//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11396//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11396//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11396//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/11396//artifact/patchprocess/newPatchFindbugsWarningshbase-annotations.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/11396//console

This message is automatically generated.

> This is looking good. How I read it? I see we are running a shell command to run each of the categories... in //?
That's correct

 > Takes 30mins? Where I look for tests that failed?
Internally on our jenkins we can get it to run that fast. Do you mean on jenkins/travis or circle. I'll assume you mean for travis or jenkins. The web interface will show if any of the categories failed. If you click on the category run it will show the failed test at the bottom.

>Looking at patch, are we pulling all dependencies each time?
> $HOME/.m2
Circle will cache the dependencies. Travis will as well, but only for paid accounts.

> The travis spec is still only hbase-server tests?
>Ditto for circle-ci set?

Nah they run all the others with the line "test -PskipServerTests" \" in circle and   - BUILD="test -PskipServerTests"
in travis

I'll post a trimmed down patch after we close 12287

What does this buy us over the ASF jenkins? The ASF Jenkins will happily run a pre-commit build for any developer who posts a patch to JIRA, no one has to be a committer.

Based on the last comment and how Jenkins build is happening for patch submissions, this may be a non issue. Can we close this? [~apurtell], [~busbey]

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m  0s{color} | {color:blue} Docker mode activated. {color} |
| {color:red}-1{color} | {color:red} patch {color} | {color:red}  0m  6s{color} | {color:red} HBASE-11853 does not apply to master. Rebase required? Wrong Branch? See https://yetus.apache.org/documentation/in-progress/precommit-patchnames for help. {color} |
\\
\\
|| Subsystem || Report/Notes ||
| JIRA Issue | HBASE-11853 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12675693/HBASE-11853-v7.patch |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/309/console |
| Powered by | Apache Yetus 0.9.0 http://yetus.apache.org |


This message was automatically generated.



personally I think this can be closed. We've got initial integration of QABot checks against PRs. Some of the repos support rerunning tests via comment on the PR. our goal should be to update those that don't to allow that rather than stand up another testing chain for us to maintain.

Please see the previous comment. If this is something which need to be pursued, re-open.

