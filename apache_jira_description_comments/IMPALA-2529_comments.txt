I can't even get this query to run on the new PHJ/PAgg, fetched the latest release branch changes as of 11:50am, changes include:

{code}
* 58309c2 - (upstream/cdh5-2.3.0_5.5.x) Update the Avro scanner bad version header error message to include the file. (15 hours ago) <Skye Wanderman-Milne>
* 1f617ef - IMPALA-2512: skip TestRewrittenFile.test_new_file_shorter on S3 (17 hours ago) <Skye Wanderman-Milne>
* c2b8f9e - IMPALA-2510: Temp fix for failed TestHdfsCachingDdl test (19 hours ago) <Dimitris Tsirogiannis>
* 15027b6 - IMPALA-2514: DCHECK on destroying an ExprContext (19 hours ago) <Sailesh Mukil>
* 80fcdf0 - (gerrit/cdh5-2.3.0_5.5.x) IMPALA-2484: make array allocation failure test less flaky (20 hours ago) <Skye Wanderman-Milne>
* 0719292 - Fix expected locality of parquet column ranges. (21 hours ago) <Skye Wanderman-Milne>
Failing Test added here ==> * 1edd90b - IMPALA-2495: make Expr::IsConstant() recurse on children (21 hours ago) <Skye Wanderman-Milne> 
{code}
 
Running there results in a crash:
{code}
F1010 11:55:45.192003 12749 in-predicate-ir.cc:65] Check failed: ctx->IsArgConstant(i)
*** Check failure stack trace: ***
    @          0x11540bd  google::LogMessage::Fail()
    @          0x115685f  google::LogMessage::SendToLog()
    @          0x1153c27  google::LogMessage::Flush()
    @          0x11570ed  google::LogMessageFatal::~LogMessageFatal()
    @     0x7f603f9cdbb5  impala::InPredicate::SetLookupPrepare<>()
    @     0x7f603f9cc39c  impala::InPredicate::SetLookupPrepare_tinyint()
    @     0x7f603fa2bf46  impala::ScalarFnCall::Open()
    @     0x7f603f9c47e3  impala::ExprContext::Open()
    @     0x7f603f9b1157  impala::Expr::Open()
    @     0x7f604000cae3  impala::ExecNode::Open()
    @     0x7f603ffc62b3  impala::BlockingJoinNode::Open()
    @     0x7f604014388d  impala::PartitionedHashJoinNode::Open()
    @     0x7f6040131138  impala::PartitionedAggregationNode::Open()
    @     0x7f603e692cf0  impala::PlanFragmentExecutor::OpenInternal()
    @     0x7f603e692af0  impala::PlanFragmentExecutor::Open()
    @     0x7f603dda60ee  impala::FragmentMgr::FragmentExecState::Exec()
    @     0x7f603ddc8b27  impala::FragmentMgr::FragmentExecThread()
{code}

[~dhecht] does this query work for you?

[~skye] Do you know what's going on?

I commented on IMPALA-2495 as well. The fix for that JIRA doesn't seem to be working for me.

Scratch my last comment, my FE build after fetching didn't finish as I thought it did. I do not see the DCHECK failure anymore w/ the PHJ. Still investigating what's happening with the non-partitioned HJ.

Ok, now that I'm reproducing it, I've realized it's the same issue with NULL tuples we saw in IMPALA-2375 where the following query produces incorrect results as well because we have NULL tuples coming from the right side of the join which has no slots:

{code}
select t1.int_col, t3.c1
from alltypestiny t1
left outer join
(select 0 as c1 from alltypestiny) t3
on t1.int_col = t3.c1
{code}

We decided to punt on that issue because the fix won't be trivial and we thought it might not happen so often as it happens w/ the old HJ only (the new PHJ gets non-null tuples from the BufferedTupleStream even if there are 0 slots).

If we're OK with maintaining our decision from IMPALA-2375, I'll just move this test into the test file that only runs for the PHJ.

commit 70e7ffc99b874f1450fd7347a7a4a8937f65f9ef
Author: Matthew Jacobs <mj@cloudera.com>
Date:   Sat Oct 10 13:42:03 2015 -0700

    IMPALA-2529: expr test case fails on non-partitioned HJ

    Failure due to an issue with NULL tuples (IMPALA-2375)
    where NULL tuples come from the right side of a left
    outer join where the right side comes from an inline view
    which produces 0 slots (e.g. the view selects a constant).
    The HJ doesn't handle them correctly because the planner
    inserts an IsTupleNull expr. This isn't an issue for the
    PHJ because the BufferedTupleStream returns non-NULL Tuple*
    ptrs even for tuples with no slots.

    Per IMPALA-2375, we're going to address this after 2.3, so
    moving this test case into joins-partitioned.test which only
    runs on the PHJ.

    Change-Id: I64cb7e8ffd60f3379aa8860135db5af8e66d686f
    Reviewed-on: http://gerrit.cloudera.org:8080/1231
    Reviewed-by: Marcel Kornacker <marcel@cloudera.com>
    Tested-by: Internal Jenkins

