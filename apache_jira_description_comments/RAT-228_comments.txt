The culprit lines are the following {{report-normal-operation.xml}}:
{code:xml}
  <target name="allTests">
    <au:antunit xmlns:au="antlib:org.apache.ant.antunit"
                failonerror="false" errorproperty="antunit.failed">
      <file file="${ant.file}"/>
      <au:plainlistener/>
      <propertyset>
        <propertyref name="test.classpath"/>
        <propertyref name="jar.name"/>
      </propertyset>
    </au:antunit>
  </target>
{code}
In particular the following:
{{failonerror="false" errorproperty="antunit.failed"}} which make ant to ignore the test failures...


So after more diving into this I have identified one of the following Ant Test:
{code:xml}
  <target name="testFullTextMatcherNotApprovedSentToFile"
          depends="fileReportTest">
    <rat:report reportFile="${report.file}"
                addDefaultLicenseMatchers="false">
      <file file="${ant.file}"/>
      <rat:fullTextMatcher
          licenseFamilyCategory="YASL1"
          licenseFamilyName="Yet Another Software License (YASL) 1.0"
          notes="Interesting License">
        License Family Name: Yet Another Software License (YASL) 1.0
      </rat:fullTextMatcher>
    </rat:report>
    <assertReportContains text="!YASL1 ${file.name}"/>
    <assertReportDoesntContain text=" YASL1 ${file.name}"/>
  </target>
{code}
which expects to have the text {{!YASL1}} in the resulting report...which seemed to be not the case:
{code}
[au:antunit] Tests run: 1, Failures: 0, Errors: 1, Time elapsed: 0.124 sec
[au:antunit] Target: testFullTextMatcherNotApprovedSentToFile  caused an ERROR
[au:antunit] 	at line 208, column 55
[au:antunit] 	Message: The following error occurred while executing this line:
[au:antunit]  ../apache-rat/apache-rat-tasks/src/test/resources/antunit/report-normal-operation.xml:283: expected report to contain
  '!YASL1 ../apache-rat/apache-rat-tasks/src/test/resources/antunit/report-normal-operation.xml' but was '
[au:antunit] *****************************************************
[au:antunit] Summary
[au:antunit] -------
[au:antunit] Generated at: 2017-03-18T11:55:24+01:00
[au:antunit] 
[au:antunit] Notes: 0
[au:antunit] Binaries: 0
[au:antunit] Archives: 0
[au:antunit] Standards: 1
[au:antunit] 
[au:antunit] Apache Licensed: 0
[au:antunit] Generated Documents: 0
[au:antunit] 
[au:antunit] JavaDocs are generated, thus a license header is optional.
[au:antunit] Generated files do not require license headers.
[au:antunit] 
[au:antunit] 1 Unknown Licenses
[au:antunit] 
[au:antunit] *****************************************************
[au:antunit] 
[au:antunit] Files with unapproved licenses:
[au:antunit] 
[au:antunit]   ../apache-rat/apache-rat-tasks/src/test/resources/antunit/report-normal-operation.xml
[au:antunit] 
[au:antunit] *****************************************************
[au:antunit] 
[au:antunit] *****************************************************
[au:antunit]   Files with Apache License headers will be marked AL
[au:antunit]   Binary files (which do not require any license headers) will be marked B
[au:antunit]   Compressed archives will be marked A
[au:antunit]   Notices, licenses etc. will be marked N
[au:antunit]  !????? ../apache-rat/apache-rat-tasks/src/test/resources/antunit/report-normal-operation.xml
{code}
Which makes me think this test must be changed to expect {{!?????}} contained in the report...


[~khmarbaise] I do not really know the inner workings of the ANT Plugin but assume that an additional license is added (YASL) and this license is supposed to be recognized by the ANT run .... this functionality was augmented in the last release on the Maven site, but most probably not completely on the ANT side? Just a wild guess.

While I was passing by I saw this report - and I happen to be the one who wrote the code :-)

The Ant task allows detecting additional licenses and this test verifies you can actually do so using the invented "Yet Another Software License ". If the test fails, then the task no longer seems to recognize the license and it indicates a real bug.

the {{failonerror="false" errorproperty="antunit.failed"}} are probably a copy-paste error of mine and can be removed in both files that contain them.

[~bodewig] I tried your idea:
{code}
--- src/test/resources/antunit/report-normal-operation.xml	(Revision 1792807)
+++ src/test/resources/antunit/report-normal-operation.xml	(Arbeitskopie)
@@ -55,8 +55,7 @@
   </target>
 
   <target name="allTests">
-    <au:antunit xmlns:au="antlib:org.apache.ant.antunit"
-                failonerror="false" errorproperty="antunit.failed">
+    <au:antunit xmlns:au="antlib:org.apache.ant.antunit">
{code}
which yields to a test failure:
{code}
snip
[au:antunit]   <taskdef uri="antlib:org.apache.ant.antunit" 
[au:antunit]            resource="org/apache/ant/antunit/antlib.xml" 
[au:antunit]            classpathref="all-classes-needed-for-tests"
[au:antunit]            loaderref="testloader"/>
[au:antunit] 
[au:antunit]   <taskdef uri="antlib:org.apache.rat.anttasks"
[au:antunit]            resource="org/apache/rat/anttasks/antlib.xml"
[au:antunit]            classpathref="all-classes-needed-for-tests"
[au:antunit]            loaderref="testloader"/>
[au:antunit] 
[au:antunit]   <target name="setUp">
[au:antunit]     <pathconvert dirsep="/" property="file.name">
[au:antunit]       <path>
[au:antunit]         <pathelement location="/home/user/rat-trunk/apache-rat-tasks/src/test/resources/antunit/report-normal-operation.xml"/>
[au:antunit]       </path>
[au:antunit] '
[au:antunit] 	took 0,078 sec
[au:antunit] Target: testWithALUnknownSentToFile took 0,082 sec
[au:antunit] Target: testWithReportSentToFile took 0,078 sec
[au:antunit] Target: testCustomMatcherSentToFile  caused an ERROR
[au:antunit] 	at line 332, column 43
[au:antunit] 	Message: Unable to find a javac compiler;
[au:antunit] com.sun.tools.javac.Main is not on the classpath.
[au:antunit] Perhaps JAVA_HOME does not point to the JDK.
[au:antunit] It is currently set to "/home/user/jdk1.8.0_121/jre"
[au:antunit] 	took 0,018 sec
{code}

I'm not really into ANT but how do I configure a JDK for ANT? Due to the fact that Maven is running properly and my bash has a JAVA_HOME set I'm not really sure what to change where ....

Thanks for any hints/ideas :-)

Well, I'm not really an expert for running Ant via Maven. Without Maven around it, Ant uses the JAVA_HOME environment variable. I get the same error locally while running {{ant -f run-antunit.xml}} passes (after I change the file to look for AntUnit 1.3 rather than 1.1.

JAVA_HOME would be used by the Ant wrapper script to put {{tools.jar}} on the CLASSPATH, it seems the ant-run plugin isn't doing the same (add tools.jar, that is). I can get the test to run when adding {{fork="true"}} to the {{<javac>}} task, that way you get independent of the CLASSPATH and only use JAVA_HOME.

[~bodewig] the error is still there with newer Ant and AntUnit versions .... is it somehow related to Jigsaw or where is the bug?
{code:java}
[au:antunit] '
[au:antunit]     took 0,073 sec
[au:antunit] Target: testWithALUnknownSentToFile took 0,077 sec
[au:antunit] Target: testWithReportSentToFile took 0,069 sec
[au:antunit] Target: testCustomMatcherSentToFile  caused an ERROR
[au:antunit]     at line 333, column 43
[au:antunit]     Message: Unable to find a javac compiler;
[au:antunit] com.sun.tools.javac.Main is not on the classpath.
[au:antunit] Perhaps JAVA_HOME does not point to the JDK.
[au:antunit] It is currently set to "/home/user/jdk1.8.0_172/jre"
[au:antunit]     took 0,022 sec
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
{code}
with the following changes:
{code:java}
$ svn diff
Index: run-antunit.xml
===================================================================
--- run-antunit.xml    (Revision 1834529)
+++ run-antunit.xml    (Arbeitskopie)
@@ -29,7 +29,7 @@
     <pathelement location="${jar.name}"/>
     <pathelement location="../apache-rat-core/target/classes"/>
     <pathelement location="target/test-classes"/>
-    <pathelement location="${user.home}/.m2/repository/org/apache/ant/ant-antunit/1.1/ant-antunit-1.1.jar"/>
+    <pathelement location="${user.home}/.m2/repository/org/apache/ant/ant-antunit/1.4/ant-antunit-1.4.jar"/>
     <pathelement location="${user.home}/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar"/>
     <pathelement location="${user.home}/.m2/repository/commons-cli/commons-cli/1.3.1/commons-cli-1.3.1.jar"/>
     <pathelement location="${user.home}/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar"/>
Index: src/test/resources/antunit/report-bad-configurations.xml
===================================================================
--- src/test/resources/antunit/report-bad-configurations.xml    (Revision 1834529)
+++ src/test/resources/antunit/report-bad-configurations.xml    (Arbeitskopie)
@@ -38,7 +38,7 @@
 
   <target name="allTests">
     <au:antunit xmlns:au="antlib:org.apache.ant.antunit"
-                failonerror="false" errorproperty="antunit.failed">
+                failonerror="true">
       <file file="${ant.file}"/>
       <au:plainlistener />
     </au:antunit>
Index: src/test/resources/antunit/report-normal-operation.xml
===================================================================
--- src/test/resources/antunit/report-normal-operation.xml    (Revision 1834529)
+++ src/test/resources/antunit/report-normal-operation.xml    (Arbeitskopie)
@@ -56,7 +56,7 @@
 
   <target name="allTests">
     <au:antunit xmlns:au="antlib:org.apache.ant.antunit"
-                failonerror="false" errorproperty="antunit.failed">
+                failonerror="true" >
       <file file="${ant.file}"/>
       <au:plainlistener/>
       <propertyset>
{code}
I stumbled upon this while working on RAT-245 and updating RAT.

Sorry, have been (actually still am) on vacation.

I did a fresh svn checkout and got a test error in the maven plugin:
{quote}Failed tests: 
  RatCheckMojoTest.testIt4:245 Report should contain test umlauts
{quote}
but no test failures at all for the tasks maven module.

spoke too soon, there are tons of errors but the build doesn't fail. I'll look into it.

OK, running Ant via Maven overrides JAVA_HOME. In my setup

 {code}
[au:antunit] Perhaps JAVA_HOME does not point to the JDK.
[au:antunit] It is currently set to "/usr/lib/jvm/java-8-oracle/jre"
[au:antunit] 	took 0.013 sec
[INFO] Executed tasks
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 12.389 s
[INFO] Finished at: 2018-07-28T17:49:38+02:00
[INFO] Final Memory: 36M/552M
[INFO] ------------------------------------------------------------------------
stefan@numpad:~/devel/ASF/rat/apache-rat-tasks$ echo $JAVA_HOME
/usr/lib/jvm/java-8-oracle
{code}

and I have no idea how to fix it. I have barely used the Maven Antrun plugin and as long as I contributed to RAT I have used Ant to build the Ant tasks, not Maven.

{code}
stefan@numpad:~/devel/ASF/rat/apache-rat-tasks$ ant -f run-antunit.xml 
Buildfile: /home/stefan/devel/ASF/rat/apache-rat-tasks/run-antunit.xml

antunit:

allTests:
...
[au:antunit] Target: testCustomMatcherSentToFile took 0.317 sec

BUILD SUCCESSFUL
Total time: 1 second
{code}

with

{code}
$ svn diff
Index: run-antunit.xml
===================================================================
--- run-antunit.xml	(revision 1836930)
+++ run-antunit.xml	(working copy)
@@ -29,7 +29,7 @@
     <pathelement location="${jar.name}"/>
     <pathelement location="../apache-rat-core/target/classes"/>
     <pathelement location="target/test-classes"/>
-    <pathelement location="${user.home}/.m2/repository/org/apache/ant/ant-antunit/1.1/ant-antunit-1.1.jar"/>
+    <pathelement location="${user.home}/.m2/repository/org/apache/ant/ant-antunit/1.4/ant-antunit-1.4.jar"/>
     <pathelement location="${user.home}/.m2/repository/commons-lang/commons-lang/2.6/commons-lang-2.6.jar"/>
     <pathelement location="${user.home}/.m2/repository/commons-cli/commons-cli/1.3.1/commons-cli-1.3.1.jar"/>
     <pathelement location="${user.home}/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar"/>
{code}

So all I can say is the tests pass if you use Ant to run them and fail if you use Maven. Unfortunately I'm not the right person to help with the Maven side of things.

Commit 1836958 from pottlinger@apache.org in branch 'rat/trunk'
[ https://svn.apache.org/r1836958 ]

RAT-228: Enable build failure if tests fail

ANT tests were disabled to break the build, thus we did not spot the problems for quite a while.

To show the problem I've enabled build failure if tests fail -

I'm (also) not aware of the inner workings for the Maven<->Ant-integration .... so any help is greatly appreciated.

 

The umlaut-Tests are flaky ;(

Commit 1842757 from pottlinger@apache.org in branch 'rat/trunk'
[ https://svn.apache.org/r1842757 ]

RAT-228: Fix broken Ant integration tests

Make tests more deterministic and fix matcher setup.
Thanks to Romain Manni-Bucau

Thanks [~romain.manni-bucau]

