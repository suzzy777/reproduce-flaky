PR [here|https://github.com/apache/cassandra/pull/570]

If I'm understanding the patch, if we create a regular index on a table any write to that base table (including compaction) will fail until the index is completely build. I'm not sure we want this very restrictive behaviour, especially when the index build hasn't even failed. I guess we should have a different behaviour for unfinished and failed index builds, WDYT?

I'm not sure about what making the index not available for writes should mean. The patch is making to fail even compactions of the base table, which might be excessive. Perhaps we should just ignore writes to a problematic index, without making the base table operation to fail?

 

[~adelapena] thx for reviewing this. I also was wondering about what a 'failed built' index should do regarding writes. On reads it simply fails so I did the same for writes. Yes it is very restrictive.

The alternative would be to ignore those writes as you state. What about instead calling a {{writeRequestedWhileIndexFailed()}} method on the index itself? That would allow the implementation to count, noSpamLog them, throw an exception or whatever. wdyt?

The index initialization failure is already logged, so I'm not sure whether it would be useful to log every write to the base table that can't go into the not-writable index. Perhaps we could the {{SIM.writableIndexes}} set instead of {{SIM#indexes}} when we decide which indexes are going to be affected be a write transaction, so we would just silently exclude not-writable indexes from every write until we they have recovered.

As for providing a method to recover distinct from index rebuilds, and not missing initialization work, I see two problems:
 * The new {{Index#getRecoveryTaskSupport}} method is only called from {{SIM#recoverIndexesBlocking}}, and I think the later is never called.
 * Doing a full index rebuild with {{nodetool rebuild_index}} invokes {{SIM#rebuildIndexesBlocking}}, that makes the index available for both reads and writes without calling neither {{Index#getInitializationTask}} nor {{Index#getRecoveryTaskSupport}}.

I can think of two different ways of differentiating the rebuild of a properly initialized index from recovering from an initialization failure:
 - Having a separate nodetool command, for example {{nodetool recover_index}}, that calls {{SIM#recoverIndexesBlocking}}, that calls the new {{Index#getRecoveryTaskSupport}}.
 - Keep the current {{nodetool rebuild_index}} command for both rebuild and recovery, but use {{Index#getRecoveryTaskSupport}} under the hood if we know that the index has failed during its initialization.

WDYT?

[~adelapena]

- If I understood correctly your first point, I'll log writable (and queryable while I am at it) index set [here|https://github.com/apache/cassandra/pull/570/files#diff-3f2c8994c4ff8748c3faf7e70958520dR658] and we silently ignore writes to a failed index.  +1 on that.
- Correct, I left the 'recovery path' unused as I saw it more as a future proofing thing than an actual replacement to the rebuild. I am -1 on adding a {{recover_index}}. What if we add to {{rebuild_index}} a {{recover}} param that defaults to false? That would be less 'noisy' and backwards compatible etc.

wdyt?

Adding a new param to {{rebuild_index}} might not be an option. I'll go for your last suggestion of calling recovery if index failed during init, thx.

[~adelapena] I think I addressed your comments in the [PR|https://github.com/apache/cassandra/pull/570]. New CI runs are also included there.

Committed to master as [595dc61290a9fda15b6765711141039ec9609bb3|https://github.com/apache/cassandra/commit/595dc61290a9fda15b6765711141039ec9609bb3]. Dtests changes committed as [b525ad4129a7963e270b74e8107887ef597cf0d6|https://github.com/apache/cassandra-dtest/commit/b525ad4129a7963e270b74e8107887ef597cf0d6].

bq. I'm not sure about what making the index not available for writes should mean...

Not sure why index needs to skip writes when its build failed...if no index uses `LoadType read/no_op`, having `writableIndex` is giving extra overhead..

Perhaps we should unify both {{`queryableIndex`}} and {{`writableIndex`}} into {{`indexStatus`}}, aka. "Map<String, LoadType>".

bq. Not sure why index needs to skip writes when its build failed...if no index uses `LoadType read/no_op`, having `writableIndex` is giving extra overhead..

[~jasonstack] those writes will be replayed during rebuild, so it seems pointless to process them twice. None current implementation make use of this, but we might change that in a followup ticket, as an improvement. There's also the idea of making the entire write fail, but it seems that that would have more serious implications for availability, especially if the coordinator is not aware of index availability.

bq. Perhaps we should unify both {{queryableIndex}} and {{writableIndex}} into {{indexStatus}}, aka. {{Map<String, LoadType>}}.

Sounds like a good idea.

