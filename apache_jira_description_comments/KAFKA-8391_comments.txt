Failed again: [https://builds.apache.org/job/kafka-pr-jdk11-scala2.12/5415/console]

Failed again: [https://builds.apache.org/job/kafka-pr-jdk11-scala2.12/5626/console]

[~kkonstantine] Do you have idea why it keeps timing out?

Failed again: [https://builds.apache.org/job/kafka-pr-jdk11-scala2.12/5883/console]

rhauch commented on pull request #7019: KAFKA-8391: Improved the integration tests to make them less flaky
URL: https://github.com/apache/kafka/pull/7019
 
 
   Added the ability for the connector handles and task handles, which are used by the monitorable source and sink connectors used to verify the functionality of the Connect framework, to record the number of times the connector and tasks have each been started, and to allow a test to obtain a `RestartLatch` that can be used to block until the connectors and/or tasks have been restarted a specified number of types.
   
   Typically, a test will get the `ConnectorHandle` for a connector, and call the `ConnectorHandle.expectedRestarts(int)` method with the expected number of times that the connector and/or tasks will be restarted, and will hold onto the resulting `RestartLatch`. The test will then change the connector (or otherwise cause the connector to restart) one or more times as desired, and then call `RestartLatch.await(long, TimeUnit)` to block the test up to a specified duration for the connector and all tasks to be started the specified number of times.
   
   This commit also increases several of the maximum wait times used in other integration tests. It doesn’t hurt to potentially wait longer, since most test runs will not need to wait the maximum amount of time anyway. However, in the rare cases that do need that extra time, waiting a bit more is fine if we can reduce the flakiness and minimize test failures that happened to time out too early.
   
   Unit tests were added for the new `RestartLatch` and `StopAndStartCounter` utility classes. This PR only affects the tests and does not affect any runtime code or API.
   
   ### Committer Checklist (excluded from commit message)
   - [ ] Verify design and implementation 
   - [ ] Verify test coverage and CI build status
   - [ ] Verify documentation (including upgrade notes)
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


Finally got a chance to look at this. Here's what I think is going on:

The integration test does the following:
# start Connect distributed (3 workers)
# start the connector and wait for the connector and all tasks to start completely 
# verify at least N records were produced on the output topic
# change the configuration of the connector to use a different topic
# waits for the connector and all tasks to be running
# verify at least N records were produced on the new output topic

Logs show that after the test changes the connector configuration (step 4), the distributed worker immediately updates the connector config, restarts the connector with the new configuration, gets the latest task configurations and writes them to the internal config topic -- all before the `PUT` request returns and before step 4 completes. However, the tasks actually don't get restarted until the workers running those tasks detect the new task configurations, and this could take a few seconds. Note that step 5 occurs immediately after step 4 ends, so it's possible that step 5 starts before the workers all see the updates and stop their tasks. IOW, step 5 might actually succeed *before* any of the tasks are restarted. And because restarting the tasks takes a bit of time, the test's self-imposed constraint of completing step 6 within 15 seconds might not actually work.

This could be corrected a few ways. One option would be to just increase the maximum time required to complete step 6, but this could still result in flaky tests. Another option is to sleep for some fixed period of time after step 4 before starting step 5, but this might still be flaky if the sleep time is too short or result in the test sleeping much longer than needed if the sleep time is too long.

The best way to fix this is to actually wait for the tasks to restart. Because we're testing the Connect framework, the integration tests already use `MonitorableSourceConnector` and `MonitorableSinkConnector`, which are special connectors that make use of the statically-accessible connector and task handles to record various activities within the connector and tasks. We can modify these handles to allow the tests to set an expectation that the connector and tasks will be restarted, so that the tests can subsequently cause the restart and then wait for the restart to complete. This requires a bit of code, but it will be the most reliable way of waiting until the connectors and tasks are restarted without being flaky and without waiting too long.

See https://github.com/apache/kafka/pull/7019 for a proposed solution / fix.

[https://builds.apache.org/job/kafka-pr-jdk11-scala2.12/6745/testReport/junit/org.apache.kafka.connect.integration/RebalanceSourceConnectorsIntegrationTest/testDeleteConnector/]

gwenshap commented on pull request #7019: KAFKA-8391: Improved the Connect integration tests to make them less flaky
URL: https://github.com/apache/kafka/pull/7019
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


rhauch commented on pull request #7224: KAFKA-8391, KAFKA-8661: Improve flaky Connect rebalance integration tests
URL: https://github.com/apache/kafka/pull/7224
 
 
   Increased the timeout by a substantial amount, though this will only take effect if the test conditions are not met successfully.
   
   Added logic to allow tests to wait for a number of records to have been written to / consumed from a specific topic. This involved extracting the previously-duplicated logic in `ConnectorHandle` and TaskHandle (test framework classes) into a new `RecordLatches` class that can be easily reused by both those handle classes.
   
   These integration tests are passing were occasionally failing for me locally, but now I’ve run them successfully nearly a dozen times in a row. If the Jenkins builds are a bit slower, this might help the tests fail less frequently.
   
   ### Committer Checklist (excluded from commit message)
   - [ ] Verify design and implementation 
   - [ ] Verify test coverage and CI build status
   - [ ] Verify documentation (including upgrade notes)
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


rhauch commented on pull request #7237: KAFKA-8391: Temporarily ignore flaky Connect rebalance integration tests
URL: https://github.com/apache/kafka/pull/7237
 
 
   I've spent quite a bit of time on trying to discover the root cause, with no luck so far. I have been able to reproduce it locally by running the following 100 times:
   ```
   ./gradlew connect:runtime:clean connect:runtime:test --tests org.apache.kafka.connect.integration.RebalanceSourceConnectorsIntegrationTest
   ```
   The `testReconfigConnector` test failed 28% of the time and the others failed 0%. This issue and KAFKA-8661 suggest that `testDeleteConnector` and `testStartTwoConnectors` are also flaky, though I've not seen those tests fail locally.
   
   Because this flakiness is causing issues for the rest of the project, I'm going to temporarily ignore several of the flaky ITs while I continue to investigate:
   * `RebalanceSourceConnectorsIntegrationTest.testReconfigConnector`
   * `RebalanceSourceConnectorsIntegrationTest.testDeleteConnector`
   * `RebalanceSourceConnectorsIntegrationTest.testStartTwoConnectors`
   
   
   **This should be backported to the `2.3` branch, which is when these integration tests were first added.**
   
   ### Committer Checklist (excluded from commit message)
   - [ ] Verify design and implementation 
   - [ ] Verify test coverage and CI build status
   - [ ] Verify documentation (including upgrade notes)
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


I've spent quite a bit of time on trying to discover the root cause, with no luck so far. I have been able to reproduce it locally by running  {{./gradlew connect:runtime:clean connect:runtime:test --tests org.apache.kafka.connect.integration.RebalanceSourceConnectorsIntegrationTest}} 100 times; the {{testReconfigConnector}} test failed 28% of the time and the others failed 0%. This issue and KAFKA-8661 suggest that {{testDeleteConnector}} and {{testStartTwoConnectors}} are also flaky, though I've not seen those tests fail locally.

Because this flakiness is causing issues for the rest of the project, I'm going to temporarily ignore several of the flaky ITs while I continue to investigate:
* {{RebalanceSourceConnectorsIntegrationTest.testReconfigConnector}}
* {{RebalanceSourceConnectorsIntegrationTest.testDeleteConnector}}
* {{RebalanceSourceConnectorsIntegrationTest.testStartTwoConnectors}}

See https://github.com/apache/kafka/pull/7237. *That PR should not resolve this issue!*


gwenshap commented on pull request #7237: KAFKA-8391: Temporarily ignore flaky Connect rebalance integration tests
URL: https://github.com/apache/kafka/pull/7237
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


Removed Fix Version 2.2.2 as this issue is not blocking that release.

Uploaded a tar file with the build output of 100 runs of the RebalanceSourceConnectorsIntegrationTest, which failed 14 / 100 times. I haven't had a chance to find a root cause, though.

The tests have been fixed and reenabled with 


[https://github.com/apache/kafka/pull/8805]

and have been running dependably since then 

[~rhauch] [~kkonstantine] this test failed again -- based on the error message it looks like it may be a "real" failure this time, not environmental.

Stacktrace
java.lang.AssertionError: Tasks are imbalanced: 
localhost:35163=[seq-source11-0, seq-source11-3, seq-source10-1, seq-source12-1]
localhost:36961=[seq-source11-1, seq-source10-2, seq-source12-2]
localhost:39023=[seq-source11-2, seq-source10-0, seq-source10-3, seq-source12-0, seq-source12-3]
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.assertTrue(Assert.java:42)
	at org.apache.kafka.connect.integration.RebalanceSourceConnectorsIntegrationTest.assertConnectorAndTasksAreUniqueAndBalanced(RebalanceSourceConnectorsIntegrationTest.java:365)
	at org.apache.kafka.test.TestUtils.lambda$waitForCondition$3(TestUtils.java:319)
	at org.apache.kafka.test.TestUtils.retryOnExceptionWithTimeout(TestUtils.java:367)
	at org.apache.kafka.test.TestUtils.waitForCondition(TestUtils.java:316)
	at org.apache.kafka.test.TestUtils.waitForCondition(TestUtils.java:300)
	at org.apache.kafka.test.TestUtils.waitForCondition(TestUtils.java:290)
	at org.apache.kafka.connect.integration.RebalanceSourceConnectorsIntegrationTest.testDeleteConnector(RebalanceSourceConnectorsIntegrationTest.java:213)


https://ci-builds.apache.org/job/Kafka/job/kafka-pr/job/PR-10512/5/testReport/org.apache.kafka.connect.integration/RebalanceSourceConnectorsIntegrationTest/Build___JDK_15_and_Scala_2_13___testDeleteConnector/

{code:java}
java.lang.AssertionError: Tasks are imbalanced: 
localhost:37981=[seq-source11-1, seq-source10-2, seq-source12-0, seq-source12-1, seq-source12-2, seq-source12-3]
localhost:38455=[seq-source10-3]
localhost:41613=[seq-source11-0, seq-source11-2, seq-source11-3, seq-source10-0, seq-source10-1]
{code}

https://ci-builds.apache.org/job/Kafka/job/kafka-pr/job/PR-11752/8/testReport/junit/org.apache.kafka.connect.integration/RebalanceSourceConnectorsIntegrationTest/Build___JDK_11_and_Scala_2_13___testDeleteConnector/

This issue might be related (caused by) KAFKA-12495

Just bumped upon this. The issue mentioned above (https://issues.apache.org/jira/browse/KAFKA-12495)was fixed last year and this specific test was enabled https://github.com/apache/kafka/pull/12561/files#diff-7c0517709aeed38eadffb16dc43b7fc3ba8a7e9b3069f3c5a5c423caf6473470L191. We haven't noticed flakiness around this test since then. Closing this one. cc [~showuon]

Fixed with https://github.com/apache/kafka/pull/12561

