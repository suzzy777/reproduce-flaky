Seems like a legit issue, but I don't see why it would be critical.


If I send the next sql's:

delete from DUMMYTABLE;  

(just only to have a clean table)

upsert into DUMMYTABLE (id,text,testbin) values (1,'any text',null);

(to have the row with wrong initialized bytes)

select count(*) from DUMMYTABLE where testbin is null;

(it returns 0)

select count(*) from DUMMYTABLE where testbin is not null;

(it returns 1)

 

But if you do the same with other data type, for example, string, it works fine:

delete from DUMMYTABLE;

upsert into DUMMYTABLE (id,text,testbin) values (1,null,null);

select count(*) from DUMMYTABLE where text is null;

it returns 1 => ok

select count(*) from DUMMYTABLE where text is not null;

it returns 0 => ok

 

 

Well, in my opinion, it is a serious semantic mistake. If I set null, first select should be 1, and second 0.

Another reason is that the hbase concept, should be that null values are 'free'. If null values are stored as an array with 0x00 values, it drops town the benefits of hbase (storage and performance).

Just imagine that I an using a binary data for store PDF's. If there is no PDF, it is taking up a lot of dummy disk space and getting down performance in lookups.

 

Hi,

after a investigation, I think I found the origin of the bug.

 in class (phoenix-core module):

org.apache.phoenix.schema.types.PBinary.java line 44, now it is:

pad(ptr, desiredMaxLength, expectedModifier);

and desiredMaxLength should by zero if Object o is null. So the line, in my opinion, should be like this:

pad(ptr, (o==null ? 0 : desiredMaxLength), expectedModifier);

 

I've tried it and it seems to work; But I don't know if there is a test that I didn't do.

 

(I would like to contribute to the source code but I don't know how to do it)

 

Fixes are very welcome.

See https://phoenix.apache.org/contributing.html

It's a bit outdated, don't bother with patch files, 

just open a pull request in github for the apache/phoenix project with the fix. The first line of the commit message should be the same as ticket number and summary.

i.e "PHOENIX-6583 in binary fields, if upsert with null, dont insert null, it insert 0 byte array"

Don't forget to add a test case for the fix, you can look at the existing tests for inspiration.

Hi,

I'd like to first apologize for my poor English; I am not native English.

Second  I am allmost done for the fix. Just prepared two posible fixed.

 After studying the class org.apache.phoenix.schema.types.PBinary.java, I have come to the conclusion that the problem is that the byte array is being padded to the size declared in the table definition. For me it is clear that there is a bug. if I put a null in the field, the null is not being putted. And this should be fixed.

But the question is: if in the table I declare a field like ' 'testbin binary(7)'  and I put an array of only 3 bytes, should it be padded with another 4 bytes with 0x00? In my opinion not. If I put 3 bytes, only should be stores 3 bytes, not 7.

But the question is:

After looking at the source code, it seems that this adjustment is made on purpose; and I do not see the explanation. Either there is some reason that I do not know or it is a bug and should be also fixed.

 

So I have two posible solitions:

1)The one that only solves the null asigment and keeping the padding.

2)The other that is removing the padding and if I store 3 bytes, it store 3 bytes; not the one that are declared en the creation of table. Even so, with this solution I can declare a fiels like 'testbin binary(7)' or 'testbin binary' (without a fixed size that is more flexibe).

which do you think is correct? in my opinion the second.

 

Forget what I am saing. It must be implement the first solution. If we want the second behaviour, we just have it: varbinary type.

[https://phoenix.apache.org/language/datatypes.html#varbinary_type]

 

Sorry for my previuos commet.

alejandro-anadon opened a new pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342


   PHOENIX-6583 Inserting explicit Null into a (fixed length) binary field is stored as an array of zeroes
   
   In the test BinaryTypeIT:
   1) it  create the table
   2) it make a simple upsert without using the binary field and test if it is null.
   3)it makes an upsert to the binary field but with a null value. Without the change, it stores a 0x00 array of bytes instead of a null.
   4) it makes an upsert to the binary field but now with a value.
   5)it makes an upsert to the binary field again with a null. Without the change, it does not remove the data and it is not a null value.
   
   IMPORTANT: while I was doing the tests, I tried to pass all the test, but failed in the test "org.apache.phoenix.end2end.DefaultColumnValueIT.testDefaultAllDataTypesKeyValueCol" , but in my opinion the fail is regarding what I have explained it in JIRA PHOENIX-6585 report. This is the stack trace of the test:
   
   [ERROR] Tests run: 24, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 230.567 s <<< FAILURE! - in org.apache.phoenix.end2end.DefaultColumnValueIT
   [ERROR] org.apache.phoenix.end2end.DefaultColumnValueIT.testDefaultAllDataTypesKeyValueCol  Time elapsed: 4.806 s  <<< FAILURE!
   arrays first differed at element [4]; expected:<0> but was:<2>
           at org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:78)
           at org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:28)
           at org.junit.Assert.internalArrayEquals(Assert.java:534)
           at org.junit.Assert.assertArrayEquals(Assert.java:343)
           at org.junit.Assert.assertArrayEquals(Assert.java:354)
           at org.apache.phoenix.end2end.DefaultColumnValueIT.testDefaultAllDataTypes(DefaultColumnValueIT.java:581)
           at org.apache.phoenix.end2end.DefaultColumnValueIT.testDefaultAllDataTypesKeyValueCol(DefaultColumnValueIT.java:506)
           at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
           at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
           at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
           at java.base/java.lang.reflect.Method.invoke(Method.java:566)
           at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
           at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
           at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
           at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
           at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
           at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
           at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
           at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
           at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
           at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunne
   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alejandro-anadon opened a new pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342


   PHOENIX-6583 Inserting explicit Null into a (fixed length) binary field is stored as an array of zeroes
   
   In the test BinaryTypeIT:
   1) it  create the table
   2) it make a simple upsert without using the binary field and test if it is null.
   3)it makes an upsert to the binary field but with a null value. Without the change, it stores a 0x00 array of bytes instead of a null.
   4) it makes an upsert to the binary field but now with a value.
   5)it makes an upsert to the binary field again with a null. Without the change, it does not remove the data and it is not a null value.
   
   IMPORTANT: while I was doing the tests, I tried to pass all the test, but failed in the test "org.apache.phoenix.end2end.DefaultColumnValueIT.testDefaultAllDataTypesKeyValueCol" , but in my opinion the fail is regarding what I have explained it in JIRA PHOENIX-6585 report. This is the stack trace of the test:
   
   [ERROR] Tests run: 24, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 230.567 s <<< FAILURE! - in org.apache.phoenix.end2end.DefaultColumnValueIT
   [ERROR] org.apache.phoenix.end2end.DefaultColumnValueIT.testDefaultAllDataTypesKeyValueCol  Time elapsed: 4.806 s  <<< FAILURE!
   arrays first differed at element [4]; expected:<0> but was:<2>
           at org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:78)
           at org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:28)
           at org.junit.Assert.internalArrayEquals(Assert.java:534)
           at org.junit.Assert.assertArrayEquals(Assert.java:343)
           at org.junit.Assert.assertArrayEquals(Assert.java:354)
           at org.apache.phoenix.end2end.DefaultColumnValueIT.testDefaultAllDataTypes(DefaultColumnValueIT.java:581)
           at org.apache.phoenix.end2end.DefaultColumnValueIT.testDefaultAllDataTypesKeyValueCol(DefaultColumnValueIT.java:506)
           at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
           at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
           at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
           at java.base/java.lang.reflect.Method.invoke(Method.java:566)
           at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
           at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
           at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
           at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
           at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
           at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
           at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
           at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
           at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
           at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunne
   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


stoty commented on a change in pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342#discussion_r742576144



##########
File path: phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java
##########
@@ -0,0 +1,88 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.phoenix.end2end;
+
+import static org.junit.Assert.assertTrue;
+
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.Properties;
+
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+
+
+@Category(ParallelStatsDisabledTest.class)
+public class BinaryTypeIT  extends ParallelStatsDisabledIT  {
+
+    @Test
+    public void testBinaryNullAssignment() throws SQLException {
+        Properties props = new Properties();
+        Connection conn = DriverManager.getConnection(getUrl(), props);
+        
+        ResultSet rs;
+        
+        try (Statement stmt = conn.createStatement()) {
+        
+            String binTestTable=generateUniqueName();
+            
+            stmt.execute("create table "+binTestTable+" (id integer not null, text varchar(255), testbin binary(16), CONSTRAINT pk primary key (id))");
+            conn.commit();
+        
+            String queryIsNull = "select id, text , testbin from "+binTestTable+" where testbin is null";
+        
+            
+            // Let's see if without using it, it is stored as null

Review comment:
       language: use "specifying"  or "providing"

##########
File path: phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java
##########
@@ -0,0 +1,88 @@
+/*

Review comment:
       This is a fairly minor test.
   You should add it the existing NullIT test class (or some other appropriate one) instead of creating a new class for it.




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alejandro-anadon commented on pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342#issuecomment-962069545


   Hi,
   
   I think that I solved. I forget to check ptr. Before I was checking only for the Object. In my test, now is not having failures.
   
   But now, I found something that for me is streange. I tested it not only with fixed binaries, but algo with integers. At the begining I thought that it was bacause my fixed; so I proved without my changes. But I had the same result, so I thing that it is not because of my changes and it comes before.
   
   The question is that it seems that there is a conflict between "field is null" and "filed=null". It is supoused that the result should be the same; but it is not. Followin is what I mean (you can try in master branch without my changes):
   
   0: jdbc:phoenix:> create table  DUMMY (id integer not null, int2 INTEGER, text varchar(255), testbin binary(16), CONSTRAINT pk primary key (id));
   No rows affected (2.478 seconds)
   
   
   0: jdbc:phoenix:> upsert into dummy values (1);
   1 row affected (0.055 seconds)
   
   0: jdbc:phoenix:> select * from dummy;
   +----+------+------+---------+
   | ID | INT2 | TEXT | TESTBIN |
   +----+------+------+---------+
   | 1  | null |      |         |
   +----+------+------+---------+
   1 row selected (0.039 seconds)
   
   0: jdbc:phoenix:> select * from dummy where int2 is null;
   +----+------+------+---------+
   | ID | INT2 | TEXT | TESTBIN |
   +----+------+------+---------+
   | 1  | null |      |         |
   +----+------+------+---------+
   1 row selected (0.03 seconds)
   
   0: jdbc:phoenix:> select * from dummy where int2=null;
   +----+------+------+---------+
   | ID | INT2 | TEXT | TESTBIN |
   +----+------+------+---------+
   +----+------+------+---------+
   No rows selected (0.033 seconds)
   
   
   "select * from dummy where int2 is null;" should returns the same as "select * from dummy where int2=null;". should't ?
   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alejandro-anadon closed pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alejandro-anadon opened a new pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342


   PHOENIX-6583 Inserting explicit Null into a (fixed length) binary field is stored as an array of zeroes
   
   In the test BinaryTypeIT:
   1) it  create the table
   2) it make a simple upsert without using the binary field and test if it is null.
   3)it makes an upsert to the binary field but with a null value. Without the change, it stores a 0x00 array of bytes instead of a null.
   4) it makes an upsert to the binary field but now with a value.
   5)it makes an upsert to the binary field again with a null. Without the change, it does not remove the data and it is not a null value.
   
   IMPORTANT: while I was doing the tests, I tried to pass all the test, but failed in the test "org.apache.phoenix.end2end.DefaultColumnValueIT.testDefaultAllDataTypesKeyValueCol" , but in my opinion the fail is regarding what I have explained it in JIRA PHOENIX-6585 report. This is the stack trace of the test:
   
   [ERROR] Tests run: 24, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 230.567 s <<< FAILURE! - in org.apache.phoenix.end2end.DefaultColumnValueIT
   [ERROR] org.apache.phoenix.end2end.DefaultColumnValueIT.testDefaultAllDataTypesKeyValueCol  Time elapsed: 4.806 s  <<< FAILURE!
   arrays first differed at element [4]; expected:<0> but was:<2>
           at org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:78)
           at org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:28)
           at org.junit.Assert.internalArrayEquals(Assert.java:534)
           at org.junit.Assert.assertArrayEquals(Assert.java:343)
           at org.junit.Assert.assertArrayEquals(Assert.java:354)
           at org.apache.phoenix.end2end.DefaultColumnValueIT.testDefaultAllDataTypes(DefaultColumnValueIT.java:581)
           at org.apache.phoenix.end2end.DefaultColumnValueIT.testDefaultAllDataTypesKeyValueCol(DefaultColumnValueIT.java:506)
           at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
           at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
           at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
           at java.base/java.lang.reflect.Method.invoke(Method.java:566)
           at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
           at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
           at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
           at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
           at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
           at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
           at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
           at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
           at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
           at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunne
   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alejandro-anadon opened a new pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342


   PHOENIX-6583 Inserting explicit Null into a (fixed length) binary field is stored as an array of zeroes
   
   In the test BinaryTypeIT:
   1) it  create the table
   2) it make a simple upsert without using the binary field and test if it is null.
   3)it makes an upsert to the binary field but with a null value. Without the change, it stores a 0x00 array of bytes instead of a null.
   4) it makes an upsert to the binary field but now with a value.
   5)it makes an upsert to the binary field again with a null. Without the change, it does not remove the data and it is not a null value.
   
   IMPORTANT: while I was doing the tests, I tried to pass all the test, but failed in the test "org.apache.phoenix.end2end.DefaultColumnValueIT.testDefaultAllDataTypesKeyValueCol" , but in my opinion the fail is regarding what I have explained it in JIRA PHOENIX-6585 report. This is the stack trace of the test:
   
   [ERROR] Tests run: 24, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 230.567 s <<< FAILURE! - in org.apache.phoenix.end2end.DefaultColumnValueIT
   [ERROR] org.apache.phoenix.end2end.DefaultColumnValueIT.testDefaultAllDataTypesKeyValueCol  Time elapsed: 4.806 s  <<< FAILURE!
   arrays first differed at element [4]; expected:<0> but was:<2>
           at org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:78)
           at org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:28)
           at org.junit.Assert.internalArrayEquals(Assert.java:534)
           at org.junit.Assert.assertArrayEquals(Assert.java:343)
           at org.junit.Assert.assertArrayEquals(Assert.java:354)
           at org.apache.phoenix.end2end.DefaultColumnValueIT.testDefaultAllDataTypes(DefaultColumnValueIT.java:581)
           at org.apache.phoenix.end2end.DefaultColumnValueIT.testDefaultAllDataTypesKeyValueCol(DefaultColumnValueIT.java:506)
           at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
           at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
           at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
           at java.base/java.lang.reflect.Method.invoke(Method.java:566)
           at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
           at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
           at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
           at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
           at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
           at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
           at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
           at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
           at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
           at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunne
   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alejandro-anadon closed pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alejandro-anadon commented on pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342#issuecomment-962069545


   Hi,
   
   I think that I solved. I forget to check ptr. Before I was checking only for the Object. In my test, now is not having failures.
   
   But now, I found something that for me is streange. I tested it not only with fixed binaries, but algo with integers. At the begining I thought that it was bacause my fixed; so I proved without my changes. But I had the same result, so I thing that it is not because of my changes and it comes before.
   
   The question is that it seems that there is a conflict between "field is null" and "filed=null". It is supoused that the result should be the same; but it is not. Followin is what I mean (you can try in master branch without my changes):
   
   0: jdbc:phoenix:> create table  DUMMY (id integer not null, int2 INTEGER, text varchar(255), testbin binary(16), CONSTRAINT pk primary key (id));
   No rows affected (2.478 seconds)
   
   
   0: jdbc:phoenix:> upsert into dummy values (1);
   1 row affected (0.055 seconds)
   
   0: jdbc:phoenix:> select * from dummy;
   +----+------+------+---------+
   | ID | INT2 | TEXT | TESTBIN |
   +----+------+------+---------+
   | 1  | null |      |         |
   +----+------+------+---------+
   1 row selected (0.039 seconds)
   
   0: jdbc:phoenix:> select * from dummy where int2 is null;
   +----+------+------+---------+
   | ID | INT2 | TEXT | TESTBIN |
   +----+------+------+---------+
   | 1  | null |      |         |
   +----+------+------+---------+
   1 row selected (0.03 seconds)
   
   0: jdbc:phoenix:> select * from dummy where int2=null;
   +----+------+------+---------+
   | ID | INT2 | TEXT | TESTBIN |
   +----+------+------+---------+
   +----+------+------+---------+
   No rows selected (0.033 seconds)
   
   
   "select * from dummy where int2 is null;" should returns the same as "select * from dummy where int2=null;". should't ?
   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alejandro-anadon opened a new pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342


   PHOENIX-6583 Inserting explicit Null into a (fixed length) binary field is stored as an array of zeroes
   
   In the test BinaryTypeIT:
   1) it  create the table
   2) it make a simple upsert without using the binary field and test if it is null.
   3)it makes an upsert to the binary field but with a null value. Without the change, it stores a 0x00 array of bytes instead of a null.
   4) it makes an upsert to the binary field but now with a value.
   5)it makes an upsert to the binary field again with a null. Without the change, it does not remove the data and it is not a null value.
   
   IMPORTANT: while I was doing the tests, I tried to pass all the test, but failed in the test "org.apache.phoenix.end2end.DefaultColumnValueIT.testDefaultAllDataTypesKeyValueCol" , but in my opinion the fail is regarding what I have explained it in JIRA PHOENIX-6585 report. This is the stack trace of the test:
   
   [ERROR] Tests run: 24, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 230.567 s <<< FAILURE! - in org.apache.phoenix.end2end.DefaultColumnValueIT
   [ERROR] org.apache.phoenix.end2end.DefaultColumnValueIT.testDefaultAllDataTypesKeyValueCol  Time elapsed: 4.806 s  <<< FAILURE!
   arrays first differed at element [4]; expected:<0> but was:<2>
           at org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:78)
           at org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:28)
           at org.junit.Assert.internalArrayEquals(Assert.java:534)
           at org.junit.Assert.assertArrayEquals(Assert.java:343)
           at org.junit.Assert.assertArrayEquals(Assert.java:354)
           at org.apache.phoenix.end2end.DefaultColumnValueIT.testDefaultAllDataTypes(DefaultColumnValueIT.java:581)
           at org.apache.phoenix.end2end.DefaultColumnValueIT.testDefaultAllDataTypesKeyValueCol(DefaultColumnValueIT.java:506)
           at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
           at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
           at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
           at java.base/java.lang.reflect.Method.invoke(Method.java:566)
           at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
           at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
           at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
           at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
           at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
           at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
           at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
           at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
           at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
           at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunne
   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alejandro-anadon closed pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alejandro-anadon commented on pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342#issuecomment-962069545


   Hi,
   
   I think that I solved. I forget to check ptr. Before I was checking only for the Object. In my test, now is not having failures.
   
   But now, I found something that for me is streange. I tested it not only with fixed binaries, but algo with integers. At the begining I thought that it was bacause my fixed; so I proved without my changes. But I had the same result, so I thing that it is not because of my changes and it comes before.
   
   The question is that it seems that there is a conflict between "field is null" and "filed=null". It is supoused that the result should be the same; but it is not. Followin is what I mean (you can try in master branch without my changes):
   
   0: jdbc:phoenix:> create table  DUMMY (id integer not null, int2 INTEGER, text varchar(255), testbin binary(16), CONSTRAINT pk primary key (id));
   No rows affected (2.478 seconds)
   
   
   0: jdbc:phoenix:> upsert into dummy values (1);
   1 row affected (0.055 seconds)
   
   0: jdbc:phoenix:> select * from dummy;
   +----+------+------+---------+
   | ID | INT2 | TEXT | TESTBIN |
   +----+------+------+---------+
   | 1  | null |      |         |
   +----+------+------+---------+
   1 row selected (0.039 seconds)
   
   0: jdbc:phoenix:> select * from dummy where int2 is null;
   +----+------+------+---------+
   | ID | INT2 | TEXT | TESTBIN |
   +----+------+------+---------+
   | 1  | null |      |         |
   +----+------+------+---------+
   1 row selected (0.03 seconds)
   
   0: jdbc:phoenix:> select * from dummy where int2=null;
   +----+------+------+---------+
   | ID | INT2 | TEXT | TESTBIN |
   +----+------+------+---------+
   +----+------+------+---------+
   No rows selected (0.033 seconds)
   
   
   "select * from dummy where int2 is null;" should returns the same as "select * from dummy where int2=null;". should't ?
   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


stoty commented on pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342#issuecomment-962917518


   The null behaviour you describe is correct, as defined by SQL spec. Look it up.
   Please fix the formatting problems reported by Yetus.
   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alejandro-anadon commented on pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342#issuecomment-962952786


   Done.
   About SQL spec, I do not know why it was speced like that , but I do not agree (for me it has no sense, but I tested it postgres and the  behaviour is the same)... but  it's like fighting giants.
   
   
   NOTE: I am always getting the same error report in test, both before and after the changes I made in PhoenixMetricsIT.testGlobalPhoenixMetricsForQueries. This is the stack trace:
   
   [INFO] Running org.apache.phoenix.monitoring.PhoenixTableLevelMetricsIT
   [ERROR] Tests run: 24, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 289.222 s <<< FAILURE! - in org.apache.phoenix.monitoring.PhoenixMetricsIT
   [ERROR] org.apache.phoenix.monitoring.PhoenixMetricsIT.testGlobalPhoenixMetricsForQueries  Time elapsed: 7.059 s  <<< FAILURE!
   java.lang.AssertionError
           at org.junit.Assert.fail(Assert.java:87)
           at org.junit.Assert.assertTrue(Assert.java:42)
           at org.junit.Assert.assertTrue(Assert.java:53)
           at org.apache.phoenix.monitoring.PhoenixMetricsIT.testGlobalPhoenixMetricsForQueries(PhoenixMetricsIT.java:199)
           at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
           at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
           at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
           at java.base/java.lang.reflect.Method.invoke(Method.java:566)
           at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
           at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
           at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
           at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
           at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
           at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
           at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
           at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
           at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
           at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
           at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
           at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
           at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
           at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
           at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
           at org.apache.phoenix.SystemExitRule$1.evaluate(SystemExitRule.java:40)
           at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:54)
           at org.junit.rules.RunRules.evaluate(RunRules.java:20)
           at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
           at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
           at org.junit.runners.Suite.runChild(Suite.java:128)
           at org.junit.runners.Suite.runChild(Suite.java:27)
           at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
           at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
           at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
           at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
           at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
           at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
           at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
           at org.apache.maven.surefire.junitcore.JUnitCore.run(JUnitCore.java:55)
           at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.createRequestAndRun(JUnitCoreWrapper.java:137)
           at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.executeEager(JUnitCoreWrapper.java:107)
           at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.execute(JUnitCoreWrapper.java:83)
           at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.execute(JUnitCoreWrapper.java:75)
           at org.apache.maven.surefire.junitcore.JUnitCoreProvider.invoke(JUnitCoreProvider.java:157)
           at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
           at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
           at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
           at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alejandro-anadon commented on pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342#issuecomment-962999312


   (I apologies if this is not the correct place to say following, but I think that if somebody read this conversation may get the the same doubt that I had about regarding SQL spec)
   I read the following article I clarified my ideas:
   https://www.xaprb.com/blog/2006/05/18/why-null-never-compares-false-to-anything-in-sql/
   
   It remenber me a puzzle that I read in this book (http://www.javapuzzlers.com/) where you can have a instance like this:
   ---
   if (a!=a)
       System.out.println('Hello!! I am here");
   ---
   And the mesage will be shown. How? well... initializating a like:
   double a = Math.log(-1);
   
   In this case, a is 'NaN'; and java spec saiys that 'NaN' is not equal to anything... neither NaN, so ' NaN  != NaN' is true.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alejandro-anadon commented on pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342#issuecomment-963032613


   sorry for hightlighting the parragraph about the book. It was not my intent. I don't know why it did it... I only write simple text... next time I will "preview" the mesage. This is my first time using github


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alejandro-anadon commented on pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342#issuecomment-963418459


   Hi,
   I do not understand the error that Yetus(jenkins) is reporting because the file phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java was deleted from the branck and it does not exists. You can check it in the PHOENIX-6583 branch on alejandro-anadon/phoenix. 
   
   Here is when I deletted it:
   https://github.com/apache/phoenix/pull/1342/commits/eae4b115e18f932debb6aca9ce1b6d8a7ff5c2df
   
   Just as you suggested, that test was moved to phoenix-core/src/it/java/org/apache/phoenix/end2end/NullIT.java.
   
   In my enviroment, the only failed test is PhoenixMetricsIT.testGlobalPhoenixMetricsForQueries; but I passed also all the test before my changes, and I have the same failed test; so I guess it has nothing to do with my changes that I have made.
   
   I am going to post ascreen log file in case it may help. It is absolutly from begining. I mean, from firt 'git clone' of my repositorie.
   
   (I also have an error after all the test has been done. It is  another error when it is supoused to begin to generate the report when it try to execute' org.jacoco:jacoco-maven-plugin:0.8.7:report' and I do not know why. But It has nothing of relation with , and I do not care too much because if I try to build the binaries without test, it works until the end.
   
   (I am trying to build with hbase profile 2.1.9 and using -Dmaven.compiler.executable=/usr/lib/jvm/jdk1.8.0_202/bin/javac  because I have by default an openjdk version "11.0.12" 2021-07-20).


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alejandro-anadon commented on pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342#issuecomment-963419928


   Here is the file log
   [PHOENIX-6583-SCREEN-LOG-IN-BUILDING.txt](https://github.com/apache/phoenix/files/7499097/PHOENIX-6583-SCREEN-LOG-IN-BUILDING.txt)
   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alejandro-anadon removed a comment on pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342#issuecomment-963419928


   Here is the file log
   [PHOENIX-6583-SCREEN-LOG-IN-BUILDING.txt](https://github.com/apache/phoenix/files/7499097/PHOENIX-6583-SCREEN-LOG-IN-BUILDING.txt)
   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alejandro-anadon removed a comment on pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342#issuecomment-963418459


   Hi,
   I do not understand the error that Yetus(jenkins) is reporting because the file phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java was deleted from the branck and it does not exists. You can check it in the PHOENIX-6583 branch on alejandro-anadon/phoenix. 
   
   Here is when I deletted it:
   https://github.com/apache/phoenix/pull/1342/commits/eae4b115e18f932debb6aca9ce1b6d8a7ff5c2df
   
   Just as you suggested, that test was moved to phoenix-core/src/it/java/org/apache/phoenix/end2end/NullIT.java.
   
   In my enviroment, the only failed test is PhoenixMetricsIT.testGlobalPhoenixMetricsForQueries; but I passed also all the test before my changes, and I have the same failed test; so I guess it has nothing to do with my changes that I have made.
   
   I am going to post ascreen log file in case it may help. It is absolutly from begining. I mean, from firt 'git clone' of my repositorie.
   
   (I also have an error after all the test has been done. It is  another error when it is supoused to begin to generate the report when it try to execute' org.jacoco:jacoco-maven-plugin:0.8.7:report' and I do not know why. But It has nothing of relation with , and I do not care too much because if I try to build the binaries without test, it works until the end.
   
   (I am trying to build with hbase profile 2.1.9 and using -Dmaven.compiler.executable=/usr/lib/jvm/jdk1.8.0_202/bin/javac  because I have by default an openjdk version "11.0.12" 2021-07-20).


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


stoty commented on a change in pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342#discussion_r745328378



##########
File path: phoenix-core/src/main/java/org/apache/phoenix/schema/types/PBinary.java
##########
@@ -36,11 +36,13 @@ private PBinary() {
     }
 
     @Override
-    public void coerceBytes(ImmutableBytesWritable ptr, Object o, PDataType actualType, Integer actualMaxLength,
-            Integer actualScale, SortOrder actualModifier, Integer desiredMaxLength, Integer desiredScale,
-            SortOrder expectedModifier) {
-        PVarbinary.INSTANCE.coerceBytes(ptr, o, actualType, actualMaxLength, actualScale, actualModifier, desiredMaxLength, desiredScale, expectedModifier);
-        if (null != desiredMaxLength && null != expectedModifier) {
+    public void coerceBytes(ImmutableBytesWritable ptr, Object o, PDataType actualType,
+            Integer actualMaxLength, Integer actualScale, SortOrder actualModifier,
+            Integer desiredMaxLength, Integer desiredScale, SortOrder expectedModifier) {
+        PVarbinary.INSTANCE.coerceBytes(ptr, o, actualType, actualMaxLength, actualScale,
+                actualModifier, desiredMaxLength, desiredScale, expectedModifier);
+        if ((o != null || ptr.getLength() > 0)

Review comment:
       The `o != null` check seems redundant.
   




-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alejandro-anadon commented on pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342#issuecomment-964417332


   You are right. With 'ptr.getLength() > 0' is enough.
   At the begining I thought that only 'o' should be checked.
   Later I added ptr.lenght (it was necesary for default values) without cheking if 'o != null' could be removed.
   Finally, as you sugest, I tested  with only  'ptr.getLength() > 0'.
   And, of course, if there is not something that I do not see, It can be removed.
   
   
   About the test, in my enviroment, I tested the changes sereval times. the results are:
   default-test -> never fails
   ParallelStatsEnabledTest ->  never fails
   ParallelStatsDisabledTest -> never fails
   NeedTheirOwnClusterTests -> randon failures
   
   Those random test are not allways the same failures.
   
    for example, in my last test, the failure is in: 'PermissionNSEnabledWithCustomAccessControllerIT>BasePermissionsIT.testSystemTablePermissions:1027->BasePermissionsIT.verifyAllowed:894->BasePermissionsIT.verifyAllowed:901 » UndeclaredThrowable'.
   
   But other time, I have 'PhoenixMetricsIT.testGlobalPhoenixMetricsForQueries:199' (now I don't know if that error was with jdk8 or jdk11)
   
   Another time I had:
   'MaxConcurrentConnectionsIT.testDeleteRuntimeFailureClosesConnections:124 Found 1 connections still open. expected:<0> but was:<1>'
   and 'LogicalTableNameIT.testUpdatePhysicalIndexTableName_runScrutiny:215->LogicalTableNameBaseIT.test_IndexTableChange:187 » SnapshotCreation'.
   
   Summing up, in 'NeedTheirOwnClusterTests', I can't give a fault pattern, but I think the faults I have have nothing to do with the change I am proposing.
   
   Finally, when maven is going to build the report with jacoco, it allways fails (in my enviroment).
   
   [ERROR] Failed to execute goal org.jacoco:jacoco-maven-plugin:0.8.7:report (report) on project phoenix-core: Execution report of goal org.jacoco:jacoco-maven-plugin:0.8.7:report failed: Incompatible execution data for class org/apache/hadoop/hbase/regionserver/MetricsRegionAggregateSourceImpl with id 2687434e0753a2bc. -> [Help 1]
   
   (I drop the screen log of my last execution).
   
   [PHOENIX-6583-SCREEN-LOG-IN-BUILDING.txt](https://github.com/apache/phoenix/files/7507090/PHOENIX-6583-SCREEN-LOG-IN-BUILDING.txt)
   
   I wanted to point out that, regarding test, I had lots of problems and fails when using 'openjdk version "11.0.12" 2021-07-20' with semi-random test failures. So I decided to change all to 'java version "1.8.0_202"'.
   Since them, I only have random failures in NeedTheirOwnClusterTests . I followed the instruction in https://github.com/apache/phoenix/blob/master/BUILDING.md . so I sugest, if it is necesary a specific jvm to compile and test, it is advisable to indicate it that file.
   
   Besides, when you ask to 'Please also fix the remaining spaces at the end of lines.', I thing that there is some king of cache with file 'phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java' beacuse it was removed from the branch in the commit eae4b11. I saw several times to "remove spaces' in that file. But the file is removed. You can check it int the PHOENIX-6583 branch on alejandro-anadon/phoenix.
   (https://github.com/alejandro-anadon/phoenix).
   
   In the checkstile chekers I see follow (but not allways apears... sometimes appers, another not):
   
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:40:        
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:42:        
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:44:        
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:46:            
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:49:        
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:51:        
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:52:            
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:59:            
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:66:            
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:73:            
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:80:           
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:81:        
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:84:    
   
   But that file does not exist anymore. The test that I propose was moved to phoenix-core/src/it/java/org/apache/phoenix/end2end/NullIT.java as you sugested.
   
   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alejandro-anadon commented on pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342#issuecomment-964616107


   It keeps saying: "Apache Yetus(jenkins) error: blanks — The patch has 13 line(s) that end in blanks. " over the file that does not exits any more in  PHOENIX-6583 branch on alejandro-anadon/phoenix:
   
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:40:        
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:42:        
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:44:        
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:46:            
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:49:        
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:51:        
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:52:            
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:59:            
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:66:            
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:73:            
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:80:           
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:81:        
   phoenix-core/src/it/java/org/apache/phoenix/end2end/BinaryTypeIT.java:84:        
   
   That file was deleted in the commit https://github.com/apache/phoenix/commit/eae4b115e18f932debb6aca9ce1b6d8a7ff5c2df


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


stoty commented on pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342#issuecomment-964821571


   Thank you @alejandro-anadon.
   The blank lines issue is indeed a Yetus problem.
   The Jacoco instability is also known, but we do no have a solution for it.
   There are also some flaky tests, so that's OK.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


stoty commented on pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342#issuecomment-964824176


   BTW the solution you found to is te same the code that is used in PChar.
   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


stoty commented on pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342#issuecomment-964825312


   @alejandro-anadon 
   The patch is good commit, but I have noticed that your email address has an IP address in it.
   Do you want to use that as your committer email ?
   If not, then please push another commit with the email that you want to use.
   If yes, please confirm it.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


stoty edited a comment on pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342#issuecomment-964825312


   @alejandro-anadon 
   The patch is good to commit, but I have noticed that your email address has an IP address in it.
   Do you want to use that as your author email ?
   If not, then please push another commit with the email that you want to use.
   If yes, please confirm it.


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


stoty closed pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342


   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


Committed to all active branches.
Thanks for the fix [~alejandro_anadon@hotmail.com] .

alejandro-anadon commented on pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342#issuecomment-964987748


   Hi,
   
   now I am lost. I saw that you closed the PR with unmerged commits. Now I don't know how to proceed.
   Should I  delete alejandro-anadon:PHOENIX-6583 branch, open a new one (same name?) and do a new PR ? (Belive or not... I am a new user of git. I had been using subversion until this colavolarion)
   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


stoty commented on pull request #1342:
URL: https://github.com/apache/phoenix/pull/1342#issuecomment-964990722


   I've merged this patch manually, not via the GitHub interface. It's already in the master repo (check it).
   You can delete this PR, or leave it as it is, it doesn't matter.
   


-- 
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

To unsubscribe, e-mail: issues-unsubscribe@phoenix.apache.org

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


