Hello,

It seems that with ORC-361, the use of MemoryManagerImpl in LlapAwareMemoryManager is inconsistent. 

Before merging ORC-361, LlapAwareMemoryManager sets its own totalMemoryPool and MemoryManagerImpl accesses totalMemoryPool via getTotalMemoryPool(), so everything is fine.

With ORC-361 merged, we have the following:

1. LlapAwareMemoryManager sets its own totalMemoryPool as a private field.
 2. MemoryManagerImpl sets its own totalMemoryPool as a private field.
 3. LlapAwareMemoryManager overrides getTotalMemoryPool() using its own totalMemoryPool.

Now it is unclear whether or not getTotalMemoryPool() should be overridden.

Here are my thoughts on ORC-361:

1. Is MemoryManagerImpl intended to coordinate all threads writing to ORC files inside a process (like LLAP Daemon)? Then is it necessary to create LlapAwareMemoryManager as a ThreadLocal object? Why not just call OrcFile.getStaticMemoryManager() to obtain the shared MemoryManagerImpl?

3. LlapAwareMemoryManager sets its own totalMemoryPool:
{code:java}
      long memPerExecutor = LlapDaemonInfo.INSTANCE.getMemoryPerExecutor();
      totalMemoryPool = (long) (memPerExecutor * maxLoad);
{code}
From my understanding, this has no effect because MemoryManagerImpl sets its own totalMemoryPool.

Any comment would be appreciated.

cc [~omalley]

Hey [~glapark] thanks for bringing this up -- taking a look at MemoryManagerImpl looks like checkMemory() is the new method that determines if the scale has changed and since ORC-361 removed getTotalMemoryPool() calls from multiple places we are loosing the effect of controlling the memory pool.

The intention behind  LlapAwareMemoryManager  was to have memory per executor instead of the entire heap since multiple writers are involved. An idea could be to restore getTotalMemoryPool calls where needed .

Closing issues addressed for Apache 3.1.3

