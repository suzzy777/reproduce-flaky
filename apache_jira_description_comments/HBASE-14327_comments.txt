I met this problem too.
https://builds.apache.org/job/PreCommit-HBASE-Build/15313//testReport/



After analysis the log,  we can see the storefile which not found was archived into other place. 
{code}
2015-08-27 18:50:14,341 DEBUG [RS:0;hemera:35619-longCompactions-1440701391112] backup.HFileArchiver(438): Finished archiving from class org.apache.hadoop.hbase.backup.HFileArchiver$FileableStoreFile, file:hdfs://localhost:34675/user/jenkins/test-data/19edea13-027b-4c6a-9f3f-edaf1fc590ab/data/default/tabletest/94d6f21f7cf387d73d8622f535c67311/family/7067addd325446089ba15ec2c77becbc, to hdfs://localhost:34675/user/jenkins/test-data/19edea13-027b-4c6a-9f3f-edaf1fc590ab/archive/data/default/tabletest/94d6f21f7cf387d73d8622f535c67311/family/7067addd325446089ba15ec2c77becbc
{code}

So the reader to this storefile closed,  and NPE throws when we use this reader to generate log message
{code}
1340      for (StoreFile sf: sfs) {
1341        message.append(sf.getPath().getName());
1342        message.append("(size=");
1343        message.append(TraditionalBinaryPrefix.long2String(sf.getReader().length(), "", 1));
1344        message.append("), ");
1345      }
{code}

So, to fix this issue.  We can stop archive store files or delay it.



As testcase comments.
{code}
Test that puts up a regionserver, starts a compaction on a loaded region but holds the
   * compaction completion until after we have killed the server and the region has come up on
   * a new regionserver altogether.  
{code}

It seems we should check the store files on new region before compaction finished. But as code below
{code}
      LOG.info("Allowing compaction to proceed");
      compactingRegion.allowCompactions();
      while (compactingRegion.compactCount == 0) {
        Thread.sleep(1000);
      }
      // The server we killed stays up until the compaction that was started before it was killed completes.  In logs
      // you should see the old regionserver now going down.
      LOG.info("Compaction finished");
      // After compaction of old region finishes on the server that was going down, make sure that
      // all the files we expect are still working when region is up in new location.
      FileSystem fs = newRegion.getFilesystem();
      for (String f: newRegion.getStoreFileList(new byte [][] {FAMILY})) {
        assertTrue("After compaction, does not exist: " + f, fs.exists(new Path(f)));
      }
{code}

It seems we check store files after compaction.  Is it right?






The archiver is running in between close and open of the region in the new location? Is the file removed the result of the compaction or is it one of the inputs on the original region? The archive thinks it is safe to remove though the compaction has not 'completed' yet? That sounds like another issue. In this case, if the archiver is moving the file aside, before the new region open has a chance to work on it, yeah, delay or stop the archiver in the test.

Thank you for digging in on this [~chenheng]

{quote}
The archiver is running in between close and open of the region in the new location?
{quote}
Yes

{quote}
Is the file removed the result of the compaction or is it one of the inputs on the original region? 
{quote}
It is one of the inputs on the original region. 

{quote}
The archive thinks it is safe to remove though the compaction has not 'completed' yet? 
{quote}

The archive runs in {{Compaction.completeCompaction}},  the compaction has finished.


If i enlarge the number of {{TestIOFencing.FIRST_BATCH_COUNT}}.  The problem will be reproduced absolutely. 

IMO the point is that we check store files on new region after compaction finished.  I think it is wrong.  
Because when compaction finished, the archiver will run, and store files will be removed.

So we can do check store files before archiver run.  

I will upload my patch.  




Suggetions are welcomed! [~stack]

{color:green}+1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12753244/HBASE-14327.patch
  against master branch at commit f8dd99d7380e5eafae62a9f0c526ba24f98eb2e5.
  ATTACHMENT ID: 12753244

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 4 new or modified tests.

    {color:green}+1 hadoop versions{color}. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 protoc{color}.  The applied patch does not increase the total number of protoc compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 checkstyle{color}.  The applied patch does not increase the total number of checkstyle errors

    {color:green}+1 findbugs{color}.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 lineLengths{color}.  The patch does not introduce lines longer than 100

  {color:green}+1 site{color}.  The mvn post-site goal succeeds with this patch.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/15388//testReport/
Release Findbugs (version 2.0.3) 	warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/15388//artifact/patchprocess/newFindbugsWarnings.html
Checkstyle Errors: https://builds.apache.org/job/PreCommit-HBASE-Build/15388//artifact/patchprocess/checkstyle-aggregate.html

  Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/15388//console

This message is automatically generated.

Excellent. Thank you [~chenheng] Pushed to branch-1.0+

FAILURE: Integrated in HBase-1.2 #151 (See [https://builds.apache.org/job/HBase-1.2/151/])
HBASE-14327 TestIOFencing#testFencingAroundCompactionAfterWALSync is flaky (Heng Chen) (stack: rev 2c4062ae0ef87fabb7af5d367f8cfdbef266657d)
* hbase-server/src/test/java/org/apache/hadoop/hbase/TestIOFencing.java


FAILURE: Integrated in HBase-1.1 #650 (See [https://builds.apache.org/job/HBase-1.1/650/])
HBASE-14327 TestIOFencing#testFencingAroundCompactionAfterWALSync is flaky (Heng Chen) (stack: rev 43d5523b66c2ba82a95d6f214272716658a0d92f)
* hbase-server/src/test/java/org/apache/hadoop/hbase/TestIOFencing.java


FAILURE: Integrated in HBase-1.3 #149 (See [https://builds.apache.org/job/HBase-1.3/149/])
HBASE-14327 TestIOFencing#testFencingAroundCompactionAfterWALSync is flaky (Heng Chen) (stack: rev 1ac42c9634873a626bfdb75298b4a10fbb64edfc)
* hbase-server/src/test/java/org/apache/hadoop/hbase/TestIOFencing.java


SUCCESS: Integrated in HBase-1.2-IT #127 (See [https://builds.apache.org/job/HBase-1.2-IT/127/])
HBASE-14327 TestIOFencing#testFencingAroundCompactionAfterWALSync is flaky (Heng Chen) (stack: rev 2c4062ae0ef87fabb7af5d367f8cfdbef266657d)
* hbase-server/src/test/java/org/apache/hadoop/hbase/TestIOFencing.java


SUCCESS: Integrated in HBase-1.3-IT #133 (See [https://builds.apache.org/job/HBase-1.3-IT/133/])
HBASE-14327 TestIOFencing#testFencingAroundCompactionAfterWALSync is flaky (Heng Chen) (stack: rev 1ac42c9634873a626bfdb75298b4a10fbb64edfc)
* hbase-server/src/test/java/org/apache/hadoop/hbase/TestIOFencing.java


FAILURE: Integrated in HBase-TRUNK #6782 (See [https://builds.apache.org/job/HBase-TRUNK/6782/])
HBASE-14327 TestIOFencing#testFencingAroundCompactionAfterWALSync is flaky (Heng Chen) (stack: rev de0e72f464560cd59d836f651291e12fcbf78e73)
* hbase-server/src/test/java/org/apache/hadoop/hbase/TestIOFencing.java


Picked test fix to 0.98. I'm not aware of a frequent test failure there but without this change the possibility of timing changes elsewhere exposing are there.

FAILURE: Integrated in HBase-0.98 #1112 (See [https://builds.apache.org/job/HBase-0.98/1112/])
HBASE-14327 TestIOFencing#testFencingAroundCompactionAfterWALSync is flaky (Heng Chen) (apurtell: rev 4367a94aa9d1a0d33a38b65f098f8a21ffc68fd5)
* hbase-server/src/test/java/org/apache/hadoop/hbase/TestIOFencing.java


FAILURE: Integrated in HBase-0.98-on-Hadoop-1.1 #1065 (See [https://builds.apache.org/job/HBase-0.98-on-Hadoop-1.1/1065/])
HBASE-14327 TestIOFencing#testFencingAroundCompactionAfterWALSync is flaky (Heng Chen) (apurtell: rev 4367a94aa9d1a0d33a38b65f098f8a21ffc68fd5)
* hbase-server/src/test/java/org/apache/hadoop/hbase/TestIOFencing.java


[~chenheng] I just saw a failure here post test.

Says this:

-------------------------------------------------------------------------------
Test set: org.apache.hadoop.hbase.TestIOFencing
-------------------------------------------------------------------------------
Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 158.747 sec <<< FAILURE! - in org.apache.hadoop.hbase.TestIOFencing
testFencingAroundCompactionAfterWALSync(org.apache.hadoop.hbase.TestIOFencing)  Time elapsed: 50.545 sec  <<< FAILURE!
java.lang.AssertionError: After compaction, does not exist: hdfs://localhost:44128/user/stack/test-data/78751de8-633e-4fb4-a9ec-ee255377b3f2/data/default/tabletest/52ba2b9dfece9e9e8e241586779794c9/family/659140de148948ec8d1c116de5726889
        at org.junit.Assert.fail(Assert.java:88)
        at org.junit.Assert.assertTrue(Assert.java:41)
        at org.apache.hadoop.hbase.TestIOFencing.doTest(TestIOFencing.java:338)
        at org.apache.hadoop.hbase.TestIOFencing.testFencingAroundCompactionAfterWALSync(TestIOFencing.java:240)


Here is exception:

{code}
2015-09-09 11:14:22,109 DEBUG [main-EventThread] zookeeper.ZooKeeperWatcher(494): master:34005-0x14fb3508a800000, quorum=localhost:57728, baseZNode=/hbase Received ZooKeeper Event, type=NodeDeleted, state=SyncConnected, path=/hbase/recovering-regions/460a087fe498f8817211fd64d7189b66
2015-09-09 11:14:22,111 INFO  [ProcedureExecutor-4] master.SplitLogManager(317): finished splitting (more than or equal to) 83 bytes in 1 log files in [hdfs://localhost:56695/user/stack/test-data/d7c3b32a-7989-4622-bb8c-11b08322b72a/WALs/c2023.halxg.cloudera.com,38754,1441822444821-splitting] in 4487ms
2015-09-09 11:14:22,111 DEBUG [ProcedureExecutor-4] master.RegionStates(499): Adding to log splitting servers c2023.halxg.cloudera.com,38754,1441822444821
2015-09-09 11:14:22,111 INFO  [RS_OPEN_REGION-c2023:60880-1] handler.FinishRegionRecoveringHandler(52): /hbase/recovering-regions/460a087fe498f8817211fd64d7189b66 deleted; 460a087fe498f8817211fd64d7189b66 recovered.
2015-09-09 11:14:22,202 WARN  [HBase-Metrics2-1] impl.MetricsConfig(125): Cannot locate configuration: tried hadoop-metrics2-datanode.properties,hadoop-metrics2.properties
2015-09-09 11:14:22,202 INFO  [main] hbase.TestIOFencing(326): Allowing compaction to proceed
2015-09-09 11:14:22,202 DEBUG [main] hbase.TestIOFencing$CompactionBlockerRegion(110): allowing compactions
2015-09-09 11:14:22,203 INFO  [RS:0;c2023:38754-shortCompactions-1441822454215] regionserver.HStore(1225): Starting compaction of 2 file(s) in family of tabletest,,1441822450143.460a087fe498f8817211fd64d7189b66. into tmpdir=hdfs://localhost:56695/user/stack/test-data/d7c3b32a-7989-4622-bb8c-11b08322b72a/data/default/tabletest/460a087fe498f8817211fd64d7189b66/.tmp, totalSize=51.5 K
2015-09-09 11:14:22,203 INFO  [RS:0;c2023:38754-longCompactions-1441822445929] regionserver.HStore(1225): Starting compaction of 2 file(s) in family of tabletest,,1441822450143.460a087fe498f8817211fd64d7189b66. into tmpdir=hdfs://localhost:56695/user/stack/test-data/d7c3b32a-7989-4622-bb8c-11b08322b72a/data/default/tabletest/460a087fe498f8817211fd64d7189b66/.tmp, totalSize=52.1 K
2015-09-09 11:14:22,203 DEBUG [RS:0;c2023:38754-longCompactions-1441822445929] compactions.Compactor(182): Compacting hdfs://localhost:56695/user/stack/test-data/d7c3b32a-7989-4622-bb8c-11b08322b72a/data/default/tabletest/460a087fe498f8817211fd64d7189b66/family/3a3e31190a36474589c6e4fa1076ab9e, keycount=596, bloomtype=NONE, size=26.1 K, encoding=NONE, seqNum=3682
2015-09-09 11:14:22,203 DEBUG [RS:0;c2023:38754-longCompactions-1441822445929] compactions.Compactor(182): Compacting hdfs://localhost:56695/user/stack/test-data/d7c3b32a-7989-4622-bb8c-11b08322b72a/data/default/tabletest/460a087fe498f8817211fd64d7189b66/family/5dbe68678245437da49aad5f2a8478da, keycount=596, bloomtype=NONE, size=26.1 K, encoding=NONE, seqNum=4877
2015-09-09 11:14:22,204 ERROR [RS:0;c2023:38754-shortCompactions-1441822454215] regionserver.CompactSplitThread$CompactionRunner(541): Compaction failed Request = regionName=tabletest,,1441822450143.460a087fe498f8817211fd64d7189b66., storeName=family, fileCount=2, fileSize=51.5 K (25.5 K, 26.0 K), priority=998, time=33700359474947254
java.io.FileNotFoundException: File does not exist: hdfs://localhost:56695/user/stack/test-data/d7c3b32a-7989-4622-bb8c-11b08322b72a/data/default/tabletest/460a087fe498f8817211fd64d7189b66/family/e0be378e04ee4413b9c2ad23c3cba0fe
        at org.apache.hadoop.hdfs.DistributedFileSystem$22.doCall(DistributedFileSystem.java:1309)
        at org.apache.hadoop.hdfs.DistributedFileSystem$22.doCall(DistributedFileSystem.java:1301)
        at org.apache.hadoop.fs.FileSystemLinkResolver.resolve(FileSystemLinkResolver.java:81)
        at org.apache.hadoop.hdfs.DistributedFileSystem.getFileStatus(DistributedFileSystem.java:1317)
        at org.apache.hadoop.fs.FilterFileSystem.getFileStatus(FilterFileSystem.java:421)
        at org.apache.hadoop.hbase.regionserver.StoreFileInfo.getReferencedFileStatus(StoreFileInfo.java:348)
        at org.apache.hadoop.hbase.regionserver.StoreFileInfo.getFileStatus(StoreFileInfo.java:361)
        at org.apache.hadoop.hbase.regionserver.StoreFileInfo.getModificationTime(StoreFileInfo.java:366)
        at org.apache.hadoop.hbase.regionserver.StoreFile.getModificationTimeStamp(StoreFile.java:292)
        at org.apache.hadoop.hbase.regionserver.compactions.Compactor.getFileDetails(Compactor.java:122)
        at org.apache.hadoop.hbase.regionserver.compactions.DefaultCompactor.compact(DefaultCompactor.java:55)
        at org.apache.hadoop.hbase.regionserver.DefaultStoreEngine$DefaultCompactionContext.compact(DefaultStoreEngine.java:124)
        at org.apache.hadoop.hbase.regionserver.HStore.compact(HStore.java:1231)
        at org.apache.hadoop.hbase.regionserver.HRegion.compact(HRegion.java:1816)
        at org.apache.hadoop.hbase.TestIOFencing$CompactionBlockerRegion.compact(TestIOFencing.java:127)
        at org.apache.hadoop.hbase.regionserver.CompactSplitThread$CompactionRunner.run(CompactSplitThread.java:525)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:745)
..

{code}

I'll reopen?

Bad news...   Could your tell me which branch you are using?  I will dig in.  [~stack]

[~chenheng] Argh! Pardon me. I see my test runs did NOT have this patch included. Ignore the above. Sorry about that.

:)  Never mind, [~stack]   If you find any problem about this patch, please let me know, i will dig in it.

SUCCESS: Integrated in HBase-1.0 #1067 (See [https://builds.apache.org/job/HBase-1.0/1067/])
HBASE-14327 TestIOFencing#testFencingAroundCompactionAfterWALSync is (stack: rev 0cc5a5d8cffd901c7e0883f24da4e6e808aefb39)
* hbase-server/src/test/java/org/apache/hadoop/hbase/TestIOFencing.java


Bulk closing 1.1.3 issues.

