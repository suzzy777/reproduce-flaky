Hey [~samt], 

CASSANDRA-15239 is opened for this test on 3.0; the test is flaky. Then I figured out that it Is missing in trunk and that led me to this ticket.

I see all tickets mentioned by you being already closed, should I add the test now in trunk? Any concerns I need to know about?

bq. I see all tickets mentioned by you being already closed, should I add the test now in trunk? Any concerns I need to know about?

No, nothing that I can think of. I'm afraid I don't recall the details of exactly what the interactions with CASSANDRA-15066 were either, sorry (I think it was just that the messaging system being rewritten required quite a bit of re-work on the tests).

Thank you [~samt], I added the test [here|https://github.com/ekaterinadimitrova2/cassandra/commit/eea1204e14de549fb37425485308298adad68a30] but it fails with:
{code:java}
java.lang.ClassCastException: org.apache.cassandra.locator.InetAddressAndPort cannot be cast to org.apache.cassandra.locator.InetAddressAndPortjava.lang.ClassCastException: org.apache.cassandra.locator.InetAddressAndPort cannot be cast to org.apache.cassandra.locator.InetAddressAndPort
 at org.apache.cassandra.distributed.impl.IsolatedExecutor.lambda$null$8(IsolatedExecutor.java:115) at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) at java.lang.Thread.run(Thread.java:748){code}
I have to see in details what is going on today

Hi [~e.dimitrova]

I think that you're seeing that error because {{InetAddressAndPort}} isn't properly serializable, despite it being marked as such. Other tests which need to pass {{IAAP}} to test instances use {{InetSocketAddress}} and a helper function to convert on the the target. I've pushed [a commit|https://github.com/apache/cassandra/commit/37140e2476d2a23f10937c1e9895df7952f548cb] which does that in {{GossipTest}} and I no longer see the errors. 

The test itself still fails though (actually times out), because the {{late}} instance never receives the {{MOVING}} state for the {{fail}} instance. This is down to a difference in implementation of {{Instance::shutdown}} between trunk and earlier branches. In a non-graceful shutdown, the messaging service needs to be abruptley stopped before the shutting down instance has chance to broadcast a gossip shutdown message to live peers. This was not happening on trunk, so the remaining live instance (node1) would receive the message and update the {{STATUS}} of node2 to {{SHUTDOWN}}, which was then being propagated to node3. I've fixed that and the test passes for me locally now.

While I was at it, I've updated the wait conditions to check {{STATUS_WITH_PORT}} as {{STATUS}} is now deprecated, but this wasn't strictly necessary.

LMK what you think about these tweaks.


Hey [~samt],

Thank you for your help and explanation! 
{quote}{{late}} instance never receives the {{MOVING}}
{quote}
Yes, I saw the same last night, just didn't have the time to dig at that time and left it for today; so appreciate you worked it out and also agree with your explanation.
{quote}STATUS_WITH_PORT as STATUS is now deprecated
{quote}
Actually I think it is changed in the latest commit I published. But I saw it in _MoveTest_ for example that STATUS is still used. I am planning to change it also in the other tests as part of this ticket, not only for this test, WDYT?

I had also a few other observations:
 * Below settings are actually [set |https://github.com/apache/cassandra/blob/1ca27e456d9b4bd51bc7808c162ddba4366b1cfc/test/distributed/org/apache/cassandra/distributed/impl/Instance.java#L459] already in trunk if GOSSIP will be used so I removed them from the test: _itselfSystem.setProperty("cassandra.ring_delay_ms", "5000"); // down from 30s default System.setProperty("cassandra.consistent.rangemovement", "false");System.setProperty("cassandra.consistent.simultaneousmoves.allow", "true");_
 * I observed in 3.11 that the cassandra.ring_delay_ms is being overwritten by the default of 30000ms during start. 

 

 

bq. Yes, I saw the same last night...and also agree with your explanation.

Awesome, I'll add myself as reviewer if that's cool with you.

bq. Actually I think it is changed in the latest commit I published.

You're right, sorry I missed that.

bq. I am planning to change it also in the other tests as part of this ticket, not only for this test, WDYT?

SGTM.

Actually, considering you debugged it while I was sleeping in my time zone, I set you as an author as I believe that is fair. :) I wrapped it [here |https://github.com/ekaterinadimitrova2/cassandra/commit/3db3e2a9a7cb0c7bc6c36654003c81b292c01613] and marking myself as a reviewer. +1 on green CI from me :D LMK what you think.
{quote}{quote} I am planning to change it also in the other tests as part of this ticket, not only for this test, WDYT?
{quote}{quote}
 I decided to leave this out of the scope of this ticket as it seems there are a lot of occurrences and not all of them should be directly changed; careful revision should be done not only in the test framework but also in the actual product source.

Pushing CircleCI run [here|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=15148]

CI looks good; +1 from me :) 

Great, LGTM too, thanks!

Thanks, committed to trunk in {{bf96367f4d55692017e144980cf17963e31df127}}

