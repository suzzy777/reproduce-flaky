Thanks for filing this.  FYI I wrote #3 in the code comments during early S3Guard development.  I don't think we need it anymore since we can set the isAuthoritative (fully cached directory) bit in the DirListingMetadata instead.

Might tweak the title here a bit to capture my original intent better.

the new getDiagnostics() call in HADOOP-14220 provides a string -> string map of diagnostics info to callers; I'm already using this for the functional tests of set-capacity by having standard name for read-capacity and write-capacity. Authoritative -> bool would be another field and used the same way...no need to put in another method

Hi [~fabbri], [~stevel@apache.org],
I've started progress on this issue, and I have some questions about it.

#3: 
* In case the "isNew" flag implementation is needed I assume it would be an additional attribute in dynamodb table for the entries. Is this correct?
* Right now there is a comment about it in org/apache/hadoop/fs/s3a/s3guard/LocalMetadataStore.java:246 - Is it still valid?
* As [~fabbri] said, as the DirListingMetadata supports the isAuthoritative flag there is no need for this change. If there's no need for it, could it be removed from the description?



Hey [~gabor.bota] thank you for looking at this.
{quote}In case the "isNew" flag implementation is needed I assume it would be an additional attribute in dynamodb table for the entries. Is this correct?
{quote}
I don't think there is anything to do here, or it is pretty low priority.  I will explain, just for history's sake:

When writing the code, I observed a small optimization: Consider mkdir() codepath. Since it is a new dir, we know it is empty, and thus its contents are "fully cached" or "authoritative" in the MetadataStore. I.e.

{color:#654982}After {{fs.mkdir(new_dir_path)}}, then fs.getMetadataStore().listChildren(new_dir_path).isAuthoritative() should be true if the metadata store supports authoritative mode (if it persists the isAuthoritative bit).{color}

Today, a fs client can accomplish this with two calls (in pseudocode):

metadataStore.put(new PathMetadata(new_dir_path))
 metadataStore.put(new DirListingMetadata(new_dir_path, children={}, isAuthoritative=true)  // <-- all this just to set auth. bit

Instead, if {{put(PathMetadata)}} had a second parameter, {{boolean isNew}} we could skip the second call to {{put(DirListingMetadata)}}, potentially making mkdirs() codepath faster and saving a DynamoDB write.

I don't think there is any additional new state that needs to be stored in the database--it would be covered by the isAuthoritative (i.e. isFullyCached) bit on a directory path.

So it is not a required change, only a low-priority optimization for codepaths that create empty directories.

I'll comment on patch separately.

Some comments on v1 patch:
{noformat}
+++ b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java
@@ -202,6 +202,8 @@
   static final String STATUS = "status";
   @VisibleForTesting
   static final String TABLE = "table";
+  @VisibleForTesting
+  static final String METADATASTORE_AUTHORITATIVE = "authoritative";
{noformat}

We'd like to be able to query *any* MetadataStore implementation whether or not it supports persisting the {{isAuthoritative}} bit set by {{put(DirListingMetadata)}}, so I'd suggest:
- Putting this constant somewhere else. Maybe just a separate class "MetadataStoreCapabilities". That way, {{LocalMetadataStore}} and other future back-ends can use it without depending on Dynamo class.
- Naming the constant "PERSISTS_AUTHORITATIVE_BIT".  Want to be as clear as possible since this is a confusing part of the S3Guard codebase. It doesn't mean the MetadataStore is source of truth, only that it will persist the isAuthoritative bit.
- Document the constant, including that if a MetadataStore's getDiagnositics(PERSISTS_AUTHORITATIVE_BIT) returns null, that is interpreted as {{false}}.

{noformat}
-    // TODO HADOOP-14756 instrument MetadataStore for asserting & testing
     dirMeta = ms.listChildren(strToPath("/a1/b1"));
-    if (!allowMissing() || dirMeta != null) {
+    if (isMetadataStoreAuthoritative()) {
       assertListingsEqual(dirMeta.getListing(), "/a1/b1/file1", "/a1/b1/file2",
           "/a1/b1/c1");
     }
   }
{noformat}

Is the authoritative bit set on /a1/b1 here?  I'm not following the logic here.

I would create a separate test for authoritative mode, say "testListChildrenAuthoritative()".  Also make sure {{isMetadataStoreAuthoritative()}} handles null values from getDiagnostics(). I can help give some suggestions if it is not obvious what needs testing.

FYI the {{allowMissing()}} predicate is only to avoid flaky tests when a MetadataStore may discard old results.  Technically all implementations do sometimes discard state: LocalMetadataStore is MRU of fixed max-size, and Dynamo can drop old stuff when prune() is called. Only the first case (Local) affects tests, though.  There might be a better way to handle this than {{allowMissing()}}. (BTW NullMetadataStore also counts here: it always discards everything immediately but still meets the logical criteria to being a *correct* MetadataStore).





Thank you for the review [~fabbri]. This cleared what's the expected behavior. I'll be able to create a patch soon.

I've uploaded a new patch, and I also have some questions:
* Right now the MetadataStore#getDiagnostics javadoc describes that the information from the returned map is for debugging only. If this information still valid? If it is true, is it really a good place to store capabilities then?
* I use final class with private constructor for MetadataStoreCapabilities - to store constants because I've seen in the project this is the general way (e.g org.apache.hadoop.fs.s3a.Constants) to store constants. Is this sufficient, or should I use interface - where all String constants are public static final by default? Which choice is preferred? 

(Test & verify ran on us-west-2 successfully for the patch.)

| (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 19s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 29m 19s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 36s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 21s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 36s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 11m 46s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 46s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 22s{color} | {color:green} trunk passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 38s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 29s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 29s{color} | {color:green} the patch passed {color} |
| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  0m 17s{color} | {color:orange} hadoop-tools/hadoop-aws: The patch generated 1 new + 3 unchanged - 0 fixed = 4 total (was 3) {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 34s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 12m 28s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 52s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 23s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  4m 51s{color} | {color:green} hadoop-aws in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 26s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 65m 10s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hadoop:8620d2b |
| JIRA Issue | HADOOP-14756 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12918958/HADOOP-14756.002.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  shadedclient  findbugs  checkstyle  |
| uname | Linux 9768a2008245 3.13.0-139-generic #188-Ubuntu SMP Tue Jan 9 14:43:09 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 0725953 |
| maven | version: Apache Maven 3.3.9 |
| Default Java | 1.8.0_162 |
| findbugs | v3.1.0-RC1 |
| checkstyle | https://builds.apache.org/job/PreCommit-HADOOP-Build/14486/artifact/out/diff-checkstyle-hadoop-tools_hadoop-aws.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/14486/testReport/ |
| Max. process+thread count | 312 (vs. ulimit of 10000) |
| modules | C: hadoop-tools/hadoop-aws U: hadoop-tools/hadoop-aws |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/14486/console |
| Powered by | Apache Yetus 0.8.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.



Thanks for the v2 patch!
{quote}
Right now the MetadataStore#getDiagnostics javadoc describes that the information from the returned map is for debugging only. If this information still valid? If it is true, is it really a good place to store capabilities then?
{quote}
I guess we are expanding the definition to "for debugging and testing only". We can add an explicit "getProperty()" API later on if we want. For now I am OK with using the getDiagnostics method.

{quote}
I use final class with private constructor for MetadataStoreCapabilities - to store constants because I've seen in the project this is the general way (e.g org.apache.hadoop.fs.s3a.Constants) to store constants. Is this sufficient, or should I use interface - where all String constants are public static final by default? Which choice is preferred?
{quote}
Not sure it matters, but I slightly prefer {{final class}}, as it seems to capture intent better (not an interface to be implemented).

{noformat}
--- a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java
+++ b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java
@@ -1154,6 +1154,8 @@ private static void checkPathMetadata(PathMetadata meta) {
       map.put(READ_CAPACITY, throughput.getReadCapacityUnits().toString());
       map.put(WRITE_CAPACITY, throughput.getWriteCapacityUnits().toString());
       map.put(TABLE, desc.toString());
+      map.put(MetadataStoreCapabilities.PERSISTS_AUTHORITATIVE_BIT,
+        Boolean.toString(true));
{noformat}
This is actually {{false}}, and you will know your test is correct when it fails if this one is set to {{true}}.

{noformat}
+
+  @Test
+  public void testListChildrenAuthoritative() throws IOException {
+    Assume.assumeFalse("Missing elements should not be allowed "
+        + "to run this test.", allowMissing());
{noformat}
Correct, but it would be nice to run this test on LocalMetadataStore, since it is currently the only one that persists the authoritative bit.  You might want to switch this to something like {{Assume.assumeFalse(fs.hasMetadataStore())}}.

{noformat}
+    Assume.assumeTrue("MetadataStore should be capable for authoritative "
+        + "storage of directories to run this test.",
+        isMetadataStoreAuthoritative());
+
+    setupListStatus();
+
+    DirListingMetadata dirMeta = ms.listChildren(strToPath("/a1/b1"));
+    dirMeta.setAuthoritative(true);
+    dirMeta.put(makeFileStatus("/a1/b1/file_new", 100));
+    ms.put(dirMeta);
+
+    assertTrue(dirMeta.isAuthoritative());
+    dirMeta = ms.listChildren(strToPath("/a1/b1"));
+    assertListingsEqual(dirMeta.getListing(), "/a1/b1/file1", "/a1/b1/file2",
+        "/a1/b1/c1", "/a1/b1/file_new");
+  }
{noformat}
I think if you move that last {{assertTrue(dirMeta.isAuthoritative())}} to the end of the function it will be correct.  As is you are not testing to see if the bit was persisted by the {{MetadataStore}}.

Thanks [~fabbri]!

The things I modified in .003:
* added "for debugging and testing only" to MetadataStore#getDiagnostics javadoc
* moved the assertTrue(dirMeta.isAuthoritative()); to the end of the test - where it should be to test the listing of children elements. This, of course, broke the test for DynamoDBMetadataStore, so I've
* changed the PERSISTS_AUTHORITATIVE_BIT to false in DynamoDBMetadataStore.
* removed the assert for allowMissing() from the beginning of the test. I think this is a kind of check which could be easily misunderstood. The reason that I wanted to include this is that the javadoc for it is slightly misleading: "Tests assume that implementations will return recently set results", and I need recently set test result for my tests obviously - so I wanted to check that. 

(Test & verify ran on us-west-2 successfully for the patch.)


| (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 23s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
|| || || || {color:brown} trunk Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 24m 57s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 29s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 18s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 32s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 10m 59s{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 36s{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 20s{color} | {color:green} trunk passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 32s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 24s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 24s{color} | {color:green} the patch passed {color} |
| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  0m 14s{color} | {color:orange} hadoop-tools/hadoop-aws: The patch generated 1 new + 3 unchanged - 0 fixed = 4 total (was 3) {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  0m 28s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 11m 25s{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 43s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 20s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  4m 41s{color} | {color:green} hadoop-aws in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 23s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 57m 53s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hadoop:8620d2b |
| JIRA Issue | HADOOP-14756 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12919799/HADOOP-14756.003.patch |
| Optional Tests |  asflicense  compile  javac  javadoc  mvninstall  mvnsite  unit  shadedclient  findbugs  checkstyle  |
| uname | Linux 741c086130fe 3.13.0-137-generic #186-Ubuntu SMP Mon Dec 4 19:09:19 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /testptch/patchprocess/precommit/personality/provided.sh |
| git revision | trunk / 351e509 |
| maven | version: Apache Maven 3.3.9 |
| Default Java | 1.8.0_162 |
| findbugs | v3.1.0-RC1 |
| checkstyle | https://builds.apache.org/job/PreCommit-HADOOP-Build/14504/artifact/out/diff-checkstyle-hadoop-tools_hadoop-aws.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HADOOP-Build/14504/testReport/ |
| Max. process+thread count | 289 (vs. ulimit of 10000) |
| modules | C: hadoop-tools/hadoop-aws U: hadoop-tools/hadoop-aws |
| Console output | https://builds.apache.org/job/PreCommit-HADOOP-Build/14504/console |
| Powered by | Apache Yetus 0.8.0-SNAPSHOT   http://yetus.apache.org |


This message was automatically generated.



Thanks [~gabor.bota], this looks great.  Sorry for the confusion on {{allowMissing()}}. I was thinking that it still returned true for TestLocalMetadataStore, but that is no longer the case, so allowMissing() would be ok. I see you use isMetadataStoreAuthoritative() here, which is also ok because we don't need to run this test on stores that do not persist the authoritative directory flag (the other test case already covers it).

+1 on latest patch. I will do some testing and commit if I don't find any issues.

Committed to trunk after fixing the remaining checkstyle issue.  Thank you for the contribution [~gabor.bota].

FAILURE: Integrated in Jenkins build Hadoop-trunk-Commit #14050 (See [https://builds.apache.org/job/Hadoop-trunk-Commit/14050/])
HADOOP-14756 S3Guard: expose capability query in MetadataStore and add (fabbri: rev 989a3929a92edb000cfa486146987fb75a9eda61)
* (edit) hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/MetadataStoreTestBase.java
* (edit) hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java
* (add) hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/MetadataStoreCapabilities.java
* (edit) hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/LocalMetadataStore.java
* (edit) hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/MetadataStore.java


