Figured this out. tl;dr is that full repairs are completely broken. We add the repaired sstables to the transaction for anti-compaction but we never do anything with them or re-write them (because they are already repaired), and thus they get "removed" from the compaction strategies SSTables along with the unrepaired SSTables that got anti-compacted.

 

This essentially means that full repairs has been terribly broken for a long time, haven't checked how far back yet but it seems reasonable to say 2.1. Going to mark this as a blocker for 3.11.3 only while doing more research.

Looks like we only _stopped_ anti-compacting repaired SSTables in CASSANDRA-13153, so this bug only occurs since 2.2.10, 3.0.13, and 3.11.0.

got a patch & test for 3.11 [here|https://github.com/apache/cassandra/compare/cassandra-3.11...kgreav:14423-3.11]. Started on the wrong branch so will backport to 2.2 and 3.0 tomorrow...

{quote} and thus they get "removed" from the compaction strategies SSTables along with the unrepaired SSTables that got anti-compacted.{quote}

Where exactly does this happen?

In {{org.apache.cassandra.db.compaction.CompactionManager#submitAntiCompaction}} we create a transaction over all SSTables included in the repair (including repaired SSTables when doing full repair) and pass that through to {{performAntiCompaction}} in which two things can happen:

1. The SSTable is fully contained within the repairing ranges, and in that case we mutate repairedAt to the current time of repair and add it to {{mutatedRepairStatuses}}
2. The SSTable isn't fully contained within the repairing ranges (highly likely if vnodes or single tokens with >RF nodes). In this case we don't add the _already repaired_ SSTable to {{mutatedRepairStatuses}}.

We then remove all SSTables from the transaction in {{mutatedRepairStatuses}} [here|https://github.com/apache/cassandra/blob/191ad7b87a4ded26be4ab0bd192ef676f059276c/src/java/org/apache/cassandra/db/compaction/CompactionManager.java#L704].

If *2* occured, the already repaired SSTables were not in {{mutatedRepairStatuses}} and thus didn't get removed from the transaction and when {{txn.finish()}} is called they get removed from the CompactionStrategy's view of sstables via {{org.apache.cassandra.db.lifecycle.LifecycleTransaction#doCommit}} calling {{Tracker#notifySSTablesChanged}} which will not include the already repaired SSTables.

The reason CASSANDRA-13153 brought this bug to light was because up until that point we _were_ anti-compacting already repaired SSTables, and thus upon anti-compaction (rewrite) they would be added back into the transaction and the old SSTable would be removed as usual and the new SSTable would take its place.

Seeing as the existing consensus seems to be that there's no real value at the moment in mutating repaired times on already repaired SSTables I think the best solution is to not include the repaired SSTables in the transaction in the first place. This corresponds with how trunk currently works and also is a lot cleaner, which is how it works in my patch mentioned above. The alternative would be to remove them from the transaction regardless of if they were mutated, but this seems pointless considering we don't do anything with it. If we ever decide there is value in updating repairedAt on already repaired SSTables, we can add it back and handle it then. 

Patches for all branches:

|[2.2|https://github.com/apache/cassandra/compare/cassandra-2.2...kgreav:14423-2.2]|
|[3.0|https://github.com/apache/cassandra/compare/cassandra-3.0...kgreav:14423-3.0]|
|[3.11|https://github.com/apache/cassandra/compare/cassandra-3.11...kgreav:14423-3.11]|

Thanks for the detailed description. Finishing a LifecycleTransaction does indeed seem to remove the sstables the transactions has been created for from the compaction strategy. Simply ignoring repaired sstables, by filtering them as currently implemented, should be changed in that case. 

But it looks like your patch effectively reverts [67637d1|https://github.com/apache/cassandra/commit/67637d1] (CASSANDRA-11172) which needs some more careful consideration.

/cc [~krummas]



[~spodxx@gmail.com] That change was to ensure that we didn't send repair status change notifications where the SSTable was already marked as repaired. My change doesn't revert that,  as we no longer pass through the repaired SSTables to {{performAntiCompaction}} so there is no need to filter them out. Granted it does change the behaviour of {{performAntiCompaction}} and if someone were to call it and pass in repaired SSTables, it would produce the old behaviour. But arguably you should never be passing already repaired SSTables to {{performAntiCompaction}}. At the moment {{performAntiCompaction}} is only ever used by submitAntiCompaction in the codebase, so it's only a problem if 3rd party tools are using it. If we're worried maybe adding a test to the start of {{performAntiCompaction}} to check the SSTables aren't already repaired would be the way to go?

utests:
[3.11|https://circleci.com/gh/kgreav/cassandra/163]
[3.0|https://circleci.com/gh/kgreav/cassandra/167]
[2.2|https://circleci.com/gh/kgreav/cassandra/165]

Can we move the status check into {{performAnticompaction}} by adding already repaired sstables to {{nonAnticompacting}}? I think filtering there would be more coherent, given we also create a corresponding log message and use the same code path for canceling/releasing such sstables. We also keep updating repairedAt this way, in case of fully contained sstables (and the triggered event notification related to that).

I'd like to add for interested readers that full repairs on subranges (e.g. using reaper) will not be affected by this issue. In this case, "Not a global repair, will not do anticompaction" will occur in your logs.

OK. I've updated all 3 branches to use {{nonAnticompacting}} for filtering. Personally, I'm not a huge fan of this but it avoids the behaviour change issues previously mentioned and still fixes the problem. Also as I see it, a cleaner fix would require some refactoring of {{submitAntiCompaction}} and {{performAntiCompaction}} to decouple anti-compaction from repair, which is not possible in current releases anyway (to clarify, I don't think {{performAntiCompaction}} should care about whether SSTables are repaired or not). I can see a future though where it's possible to anti-compact SSTables separate to a repair, but I'll think about that for a separate ticket for trunk.

Side-notes related to patches: I took the liberty of making one log message less spammy "SSTable x will be anticompacted on range..." - with many vnodes this becomes ridiculously spammy. It's not a lot better in the patched version, but at least it's a one line log message with no repeated information.

And I took the liberty of fixing the "anti-compacted from x to y SSTables" log message in {{doAntiCompaction}}. This was broken as {{repaired.originals.size}} could/would return a wrong size after \{{repaired.split(sstableGroup)}} was called.

Also, the assert at the end of {{performAntiCompaction}} had to be removed as we're removing {{nonAnticompacting}} from the transaction which violates the assert, this is fine however as the assert was effectively incorrect in the first place, and only valid due to the bug.

Finally, I split the tests out into a separate method ({{shouldAntiCompact}}), and added more test cases

|[2.2|https://github.com/apache/cassandra/compare/cassandra-2.2...kgreav:14423-2.2]|[utests|https://circleci.com/gh/kgreav/cassandra/169]|
|[3.0|https://github.com/apache/cassandra/compare/cassandra-3.0...kgreav:14423-3.0]|[utests|https://circleci.com/gh/kgreav/cassandra/171]|
|[3.11|https://github.com/apache/cassandra/compare/cassandra-3.11...kgreav:14423-3.11]|[utests|https://circleci.com/gh/kgreav/cassandra/173]|

I'm working on a unit test for trunk, but it's going to have to be a fair bit different, as the repaired SSTables are filtered out prior to creation of the transaction. I don't think it needs to block review of the other branches however.

 

 

I think this is going in the right direction.

As for log messages, the "does not intersect repaired ranges" message seems to be now incorrectly shown for already repaired sstables.
{quote}Also, the assert at the end of performAntiCompaction had to be removed as we're removing nonAnticompacting from the transaction which violates the assert, this is fine however as the assert was effectively incorrect in the first place, and only valid due to the bug.
{quote}
Help me out, in which case do we end up removing an sstable in nonAnticompacting from txn.originals that would not also be removed from sstableIterator?

Took another closer look at the patch today and I think that this should work. I put the assert back in, as I still can't see why it should not hold anymore. Also did some minor wording changes to a log message, changelog and git log, if that's ok for you, [~KurtG].
 
* [2.2|https://github.com/spodkowinski/cassandra/tree/CASSANDRA-14423-2.2]
 [circleci|https://circleci.com/gh/spodkowinski/cassandra/tree/CASSANDRA-14423-2.2]
[dtests|https://builds.apache.org/view/A-D/view/Cassandra/job/Cassandra-devbranch-dtest/578/]
* [3.0|https://github.com/spodkowinski/cassandra/tree/CASSANDRA-14423-3.0]
[circleci|https://circleci.com/gh/spodkowinski/cassandra/tree/CASSANDRA-14423-3.0]
[dtests|https://builds.apache.org/view/A-D/view/Cassandra/job/Cassandra-devbranch-dtest/579/]
* [3.11|https://github.com/spodkowinski/cassandra/tree/CASSANDRA-14423-3.11]
[circleci|https://circleci.com/gh/spodkowinski/cassandra/tree/CASSANDRA-14423-3.11]
[dtests|https://builds.apache.org/view/A-D/view/Cassandra/job/Cassandra-devbranch-dtest/580/]

The 2.2 circleci test failures seem to be flaky. Dtests still running.

Sorry for the delay, was looking at this yesterday but yeah, it turned out the assert failing was just me imagining things. That all seems good to me [~spodxx@gmail.com].

Should we stop doing anticompaction at all after full repairs instead? Clearly no one does {{--full}} repairs right now and letting users do non-incremental full repairs might be good until 4.0 (CASSANDRA-9143).

[~krummas] I've suggested that we at the very least provide a flag to skip anti-compaction from full repairs before, but it was all deemed too [complicated|https://issues.apache.org/jira/browse/CASSANDRA-13885?focusedCommentId=16206922&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16206922]. Regardless, I think a flag would be perfectly fine and it's still desirable so at least people can go back to at the very least running full repairs successfully without having to worry about SSTables being marked repaired. However, I don't think we can go and change the default behaviour, purely because people _could_ still be running full repairs on earlier versions of 3.x/3.0 before this bug came along.

the patches lgtm

[~KurtG], do you mind to go on by committing 2.2/3.0/3.11 patches now and address trunk in a separate ticket?

[~spodxx@gmail.com], not at all. Probably won't have time to look at trunk until next week, and I'm fairly sure it'll just be a case of making the test work so I'll create another ticket for trunk.

Created CASSANDRA-14550 for the trunk port.

Jumping on this to commit. Two (other) reviewers have +1 this now, and tests have passed.

Repeating for clarity, the patches and their tests were…
||Branch||uTest||dTest||
|[cassandra-2.2_14423|https://github.com/spodkowinski/cassandra/tree/CASSANDRA-14423-2.2]|[!https://circleci.com/gh/spodkowinski/cassandra/tree/CASSANDRA-14423-2.2.svg?style=svg!|https://circleci.com/gh/spodkowinski/cassandra/tree/CASSANDRA-14423-2.2]|[!https://builds.apache.org/view/A-D/view/Cassandra/job/Cassandra-devbranch-dtest/583/badge/icon!|https://builds.apache.org/view/A-D/view/Cassandra/job/Cassandra-devbranch-dtest/583]|
|[cassandra-3.0_14423|https://github.com/spodkowinski/cassandra/tree/CASSANDRA-14423-3.0]|[!https://circleci.com/gh/spodkowinski/cassandra/tree/CASSANDRA-14423-3.0.svg?style=svg!|https://circleci.com/gh/spodkowinski/cassandra/tree/CASSANDRA-14423-3.0]|[!https://builds.apache.org/view/A-D/view/Cassandra/job/Cassandra-devbranch-dtest/581/badge/icon!|https://builds.apache.org/view/A-D/view/Cassandra/job/Cassandra-devbranch-dtest/581]|
|[cassandra-3.11_14423|https://github.com/spodkowinski/cassandra/tree/CASSANDRA-14423-3.11]|[!https://circleci.com/gh/spodkowinski/cassandra/tree/CASSANDRA-14423-3.11.svg?style=svg!|https://circleci.com/gh/spodkowinski/cassandra/tree/CASSANDRA-14423-3.11]|[!https://builds.apache.org/view/A-D/view/Cassandra/job/Cassandra-devbranch-dtest/580/badge/icon!|https://builds.apache.org/view/A-D/view/Cassandra/job/Cassandra-devbranch-dtest/580]|

committed as  f8912ce9329a8bc360e93cf61e56814135fbab39

Build fails on JDK7.
{noformat}
((2.2.13-tentative))mshuler@hana:~/git/cassandra$ java -version
java version "1.7.0_80"
Java(TM) SE Runtime Environment (build 1.7.0_80-b15)
Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode)
((2.2.13-tentative))mshuler@hana:~/git/cassandra$ ant
Buildfile: /home/mshuler/git/cassandra/build.xml

init:
    [mkdir] Created dir: /home/mshuler/git/cassandra/build/classes/main
    [mkdir] Created dir: /home/mshuler/git/cassandra/build/classes/thrift
    [mkdir] Created dir: /home/mshuler/git/cassandra/build/test/lib
    [mkdir] Created dir: /home/mshuler/git/cassandra/build/test/classes
    [mkdir] Created dir: /home/mshuler/git/cassandra/src/gen-java
    [mkdir] Created dir: /home/mshuler/git/cassandra/build/lib
    [mkdir] Created dir: /home/mshuler/git/cassandra/build/jacoco
    [mkdir] Created dir: /home/mshuler/git/cassandra/build/jacoco/partials

maven-ant-tasks-localrepo:
     [copy] Copying 1 file to /home/mshuler/git/cassandra/build

maven-ant-tasks-download:

maven-ant-tasks-init:

maven-declare-dependencies:

maven-ant-tasks-retrieve-build:
[artifact:dependencies] Building ant file: /home/mshuler/git/cassandra/build/build-dependencies.xml
[artifact:dependencies] Building ant file: /home/mshuler/git/cassandra/build/build-dependencies-sources.xml
     [copy] Copying 65 files to /home/mshuler/git/cassandra/build/lib/jars
     [copy] Copying 41 files to /home/mshuler/git/cassandra/build/lib/sources
     [copy] Copying 25 files to /home/mshuler/git/cassandra/build/lib/jars
    [unzip] Expanding: /home/mshuler/git/cassandra/build/lib/jars/org.jacoco.agent-0.7.5.201505241946.jar into /home/mshuler/git/cassandra/build/lib/jars

check-gen-cql3-grammar:

gen-cql3-grammar:
     [echo] Building Grammar /home/mshuler/git/cassandra/src/java/org/apache/cassandra/cql3/Cql.g  ...

generate-cql-html:

build-project:
     [echo] apache-cassandra: /home/mshuler/git/cassandra/build.xml
    [javac] Compiling 45 source files to /home/mshuler/git/cassandra/build/classes/thrift
    [javac] warning: Supported source version 'RELEASE_6' from annotation processor 'org.openjdk.jmh.generators.BenchmarkProcessor' less than -source '1.7'
    [javac] Note: /home/mshuler/git/cassandra/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java uses or overrides a deprecated API.
    [javac] Note: Recompile with -Xlint:deprecation for details.
    [javac] Note: Some input files use unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.
    [javac] 1 warning
    [javac] Compiling 1168 source files to /home/mshuler/git/cassandra/build/classes/main
    [javac] Note: Processing compiler hints annotations
    [javac] warning: Supported source version 'RELEASE_6' from annotation processor 'org.openjdk.jmh.generators.BenchmarkProcessor' less than -source '1.7'
    [javac] Note: Processing compiler hints annotations
    [javac] Note: Writing compiler command file at META-INF/hotspot_compiler
    [javac] Note: Done processing compiler hints annotations
    [javac] /home/mshuler/git/cassandra/src/java/org/apache/cassandra/db/compaction/CompactionManager.java:584: error: cannot find symbol
    [javac]                     logger.info("SSTable {} ({}) will be anticompacted on ranges: {}", sstable, sstableBounds, String.join(", ", anticompactRanges));
    [javac]                                                                                                                      ^
    [javac]   symbol:   method join(String,List<String>)
    [javac]   location: class String
    [javac] Note: Some input files use or override a deprecated API.
    [javac] Note: Recompile with -Xlint:deprecation for details.
    [javac] Note: Some input files use unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.
    [javac] 1 error
    [javac] 1 warning

BUILD FAILED
/home/mshuler/git/cassandra/build.xml:827: Compile failed; see the compiler error output for details.

Total time: 32 seconds
{noformat}

This will break running Cassandra-2.2 on jdk1.7


||Branch||uTest||
|[cassandra-2.2_14423.1|https://github.com/thelastpickle/cassandra/tree/mck/cassandra-2.2_14423.1]|[!https://circleci.com/gh/thelastpickle/cassandra/tree/mck%2Fcassandra-2.2_14423.1.svg?style=svg!|https://circleci.com/gh/thelastpickle/cassandra/tree/mck%2Fcassandra-2.2_14423.1]|

[~mshuler], can you quick review this?

(also created CASSANDRA-14563)

Thanks! That commit looks good to me.
- {{ant artifacts}} builds again successfully on JDK7
- {{ant test -Dtest.name=AntiCompactionTest}} passes successfully on JDK7

Committed as 3482370df5672c9337a16a8a52baba53b70a4fe8

