[~avi.kivity] brings up an interesting point around NULLness checking in CASSANDRA-17762:

bq. In SQL, any comparison with NULL is NULL, which is interpreted as FALSE in a condition. To test for NULLness, you use IS NULL or IS NOT NULL. But LWT uses IF col = NULL as a NULLness test. This is likely to confuse people coming from SQL and hamper attempts to extend the dialect.

I'll leave that Jira open to address what to do in the legacy case, but I'd support a SQL-congruent syntax here, where we have something closer to a blank slate.

CC [~bdeggleston] [~benedict]

Yep, agreed.

Posting WIP [here|https://github.com/maedhroz/cassandra/tree/CASSANDRA-17719-v2]. Right now, I'm still reviewing Blake's prototype and slowly moving that syntax to the new one (described above).

Updated the main description to include recent evolution of the syntax from the mailing list.

I'm not sure if this addition is new:

bq. I haven't seen an example of an unconditional update (ie: not contained in an if block), but I don't see any reason not to support them. Though they don't need to be delivered in v1.

I think this _is_ a requirement for v1, but could be implemented as simply as permitting the literal {{true}} in the {{IF}} guard. Users need a simple way to perform unconditional writes.

[~benedict] I've already got unconditional updates working anyway, so I just removed that bit above.

Can we move the fixVersion back to 4.x (please)? 

All new code is expected to maintain compatibility.  And I am unaware if there's anything 4.x deprecated intended to be removed here, or that this will break upgrades from 3.x ? 

[~mck] When this issue resolves, it will almost certainly be committed to a feature branch for CEP-15 (probably CASSANDRA-17091?), and its version will therefore depend on that. I've just cleared the release version for now.

I'll be posting a patch for review soon, but before I do, here's a summary of what it does and does not (yet) contain. As the title of this issue now indicates, what we'll hopefully commit here is a basic CQL integration, with a follow-up Jira addressing those items we still need to complete before the CEP-15/Accord work completes and we release something to our users.

*In this Patch*

* Support for the basic syntax outlined in the description of this issue
* Support for all scalar, (frozen and unfrozen) collection, and tuple-based C* data types in LET references in SELECT, IF, and INSERT/UPDATE
* Read-only and write-only transactions
* Basic statement validation (ensuring LET deals with single rows, transaction-specific syntax is not supported outside one, ignoring user timestamps, etc.) and tests to go along with it (see {{TransactionStatementTest}})
* Basic authorization and audit log support
* Support for bind variables in transactions
* Support for shorthand decrement operations (which are not supported in standard CQL) in transactions
* Copious in-JVM dtests that cover the above cases (see {{AccordCQLTest}})
* A new configurable timeout for transaction coordination
* CQL-based simulator support (although as of this writing it can be finicky, depending on the number of threads the run uses)
* Support for executing transactions at {{NODE_LOCAL}} consistency level (which doesn't really matter, outside of the fact I wanted to make sure {{TransactionStatement#executeLocally()}} worked)

*Not in this Patch (...and to be dealt with in a follow-up issue, which will also have more detail on these items)*

* Useful error messages for every validation failure
* Complete {{estimatedSizeOnHeap()}} implementations for all the {{Txn*}} classes
* Determining whether there's a way leverage the {{Selector}} hierarchy at all to squeeze out a bit more reuse around {{LET}} references we return in {{SELECT}}.
* An attempt to make the {{Bound}} hierarchy serializable, prepare {{Bound}} subtypes from transaction statement conditions, and use them directly for predicate evaluation.
* Partial state replication for transaction conditions.
* Support for returning the result of IF statements to the client.
* Constant terms on the RHS of LET statements (ex. {{LET a = ?}} and bind a scalar value)
* LET references on the RHS of condition predicates
* Support for {{CONTAINS}}, {{CONTAINS KEY}}, and {{IN}} operators in condition predicates
* LET references to nested UDTs
* Support for mixed conditional and unconditional updates (although this might not even be something we need in a first release of Accord)
* Latency metrics for transaction execution at the coordinator
* Reasonable JavaDoc for the major new classes and concepts (although this is something that I'd feel better adding if we're past initial review and major changes aren't very likely)
* Updates to the user-facing CQL docs (which would include bumping the CQL language version)
* A definitive answer for how transactions will interact w/ TTLs
* Validation/testing to ensure we do not execute transactions w/ potentially harmful Guardrails
* New transaction-specific tracing support

|[patch (based on {{cep-15-accord}})|https://github.com/apache/cassandra/pull/1962]|[CircleCi J8|https://app.circleci.com/pipelines/github/maedhroz/cassandra/641/workflows/1d4420f3-232e-4df5-ac74-478b33e0ceae]|[Circle CI j11|https://app.circleci.com/pipelines/github/maedhroz/cassandra/641/workflows/68129722-7fd0-44a6-a2f4-5e58473eec0f]|

...and here we are. A brief summary of what I'm seeing in the test results would probably be helpful for whoever reviews:

*Tests that are failing, but also failing in {{cep-15-accord}}*

- {{AsyncWriterTest}} ({{commandsPerKeyDenormalization}}, {{waitinOnDenomalization}}, partialCommandDenomalization)
- {{PaxosRepairHistoryTest}} ({{testRandomTrims}}, {{testRandomAdds}})
- {{AccordIntegrationTest.multipleShards}} (although the failures are different)
- {{read_repair_test.TestSpeculativeReadRepair.test_normal_read_repair}}
- {{read_repair_test.TestReadRepairGuarantees.test_atomic_writes}} & {{test_monotonic_reads}}
- {{upgrade_tests.bootstrap_upgrade_test.TestBootstrapUpgrade.test_resumable_bootstrap}}
- Tons of cqlsh dtests (ex. {{TestCqlsh.test_default_keyspaces_exist}})
- {{AccordCommandStoreTest}} ({{commandLoadSave}} and {{commandsForKeyLoadSave}})
- {{AsyncLoaderTest}} ({{loadTest}} and {{pendingWriteOnlyApplied}})
- {{AsyncOperationTest.testFutureCleanup}}
- {{ShortAccordSimulationTest}} (reduce number of threads and it passes or at least fails like upstream does)

*Test failures that only seem to time out on CircleCI and can’t be repro’d locally in either branch (even w/ multiple runs, but stopped short of using the multiplexer)*

- {{SecondaryIndexTest.testCanQuerySecondaryIndex}}
- {{OfflineTokenAllocatorGenerationsTest.testTokenGenerations}}
- {{ViewFiltering1Test.testFilterWithFunction}}[3]
- {{ViewFilteringClustering1Test.testClusteringKeySliceRestrictions}}[3]
- {{RepairTest.testForcedNormalRepairWithOneNodeDown}}
- {{ReadFailureTest.testSpecExecRace}}
- {{CasCriticalSectiontest.criticalSectionTest}}
- {{MigrationCoordinatorTest}} ({{explicitVersionIgnore}} and {{explicitEndpointIgnore}})
- {{InsertUpdateifConditionCollectionsTest.testInsertSetIfNotExists}}

my review is done, there are 4-6 comments left to address and should fix the known bugs.  Once addressed will +1

+1

Also a note for posterity...

{{testReferenceArithmeticInInsert}} and {{testReferenceArithmeticInUpdate}} have been left in a failing state as a reminder to implement the relevant functionality.

Created CASSANDRA-18107 to take this from "alpha" to "v1"

Committed to {{cep-15-accord}} branch.

