For more details about how BackendConfig is initialized in FrontendTestBase/AbstractFrontendTest, see the stacktrace here: [https://gerrit.cloudera.org/c/18828/3/fe/src/test/java/org/apache/impala/catalog/FileMetadataLoaderTest.java#43]
{noformat}
 at org.apache.impala.service.BackendConfig.create(BackendConfig.java:59)
 at org.apache.impala.service.BackendConfig.create(BackendConfig.java:53)
 at org.apache.impala.service.JniFrontend.<init>(JniFrontend.java:137)
 at org.apache.impala.service.FeSupport.NativeFeInit(Native Method)
 at org.apache.impala.service.FeSupport.loadLibrary(FeSupport.java:494)
 at org.apache.impala.service.FeSupport.LookupSymbol(FeSupport.java:213)
 at org.apache.impala.service.FeSupport.LookupSymbol(FeSupport.java:222)
 at org.apache.impala.catalog.Function.lookupSymbol(Function.java:475)
 at org.apache.impala.catalog.ScalarFunction.createBuiltin(ScalarFunction.java:184)
 at org.apache.impala.catalog.ScalarFunction.createBuiltinOperator(ScalarFunction.java:172)
 at org.apache.impala.catalog.ScalarFunction.createBuiltinOperator(ScalarFunction.java:167)
 at org.apache.impala.analysis.ArithmeticExpr.initBuiltins(ArithmeticExpr.java:105)
 at org.apache.impala.catalog.BuiltinsDb.initBuiltins(BuiltinsDb.java:105)
 at org.apache.impala.catalog.BuiltinsDb.<init>(BuiltinsDb.java:94)
 at org.apache.impala.catalog.BuiltinsDb.getInstance(BuiltinsDb.java:79)
 at org.apache.impala.catalog.ImpaladCatalog.<init>(ImpaladCatalog.java:113)
 at org.apache.impala.testutil.ImpaladTestCatalog.<init>(ImpaladTestCatalog.java:58)
 at org.apache.impala.testutil.ImpaladTestCatalog.<init>(ImpaladTestCatalog.java:51)
 at org.apache.impala.common.FrontendFixture.<init>(FrontendFixture.java:101)
 at org.apache.impala.common.FrontendFixture.<clinit>(FrontendFixture.java:94)
 at org.apache.impala.common.AbstractFrontendTest.<clinit>(AbstractFrontendTest.java:42)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:498)
 at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
 at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
 at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
 at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
 at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
 at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
 at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
 at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:272)
 at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:236)
 at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
 at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:386)
 at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:323)
 at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:143) {noformat}

I ran the tests one by one. Apart from AcidUtilsTest, only found another one (TestCaseLoaderTest) that failed by the same reason:
{noformat}
[INFO] Running org.apache.impala.planner.TestCaseLoaderTest
[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.112 s <<< FAILURE! - in org.apache.impala.planner.TestCaseLoaderTest
[ERROR] testTestCaseImport(org.apache.impala.planner.TestCaseLoaderTest)  Time elapsed: 0.036 s  <<< ERROR!
java.lang.ExceptionInInitializerError
    at org.apache.impala.planner.TestCaseLoaderTest.testTestCaseImport(TestCaseLoaderTest.java:51)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:498)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
    at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
    at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:272)
    at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:236)
    at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
    at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:386)
    at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:323)
    at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:143)
Caused by: java.lang.NullPointerException
    at org.apache.impala.common.FileSystemUtil.<clinit>(FileSystemUtil.java:868)
    ... 25 more{noformat}
Instead of modifying AcidUtilsTest and TestCaseLoaderTest to extend FrontendTestBase, I think we can init the BackendConfig.INSTANCE lazily in FileSystemUtil when it's found null. This helps to avoid new tests hitting this issue. CC [~MikaelSmith] 

Uploaded a patch: https://gerrit.cloudera.org/c/19195/

Commit 645df57af8db40bff19407b7006b469bc3298737 in impala's branch refs/heads/master from stiga-huang
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=645df57af ]

IMPALA-11699: Fix NPE in FE tests thrown from static code of FileSystemUtil

FileSystemUtil has static code to get configuration from
BackendConfig.INSTANCE which could be null in some FE tests. In commit
c1610a163 of IMPALA-11469, we fixed the issue by modifying the failed FE
tests to extend FrontendTestBase which can make sure
BackendConfig.INSTANCE is initialized. However, AcidUtilsTest and
TestCaseLoaderTest also have the issue. But they are missed since the
issue depends on the test order. If a test that inits
BackendConfig.INSTANCE runs first, the following tests won't suffer this
issue.

To avoid new tests hitting this issue again, this patch inits
BackendConfig.INSTANCE lazily in the static code of FileSystemUtil.
Also adds a warning mentioning this should only happen in tests. Note
that in impalad and catalogd, BackendConfig.INSTANCE is initialized in
constructors of JniFrontend and JniCatalog.

The changes of c1610a163 is redundant after this patch so they are
reverted.

Tests:
 - Run FE tests one by one so each test won't depend on any previous
   env. Only found AcidUtilsTest and TestCaseLoaderTest have the issue.
   Verified this patch fixes the issue in these two tests.

Change-Id: I5c056791406cd4535a7e43889dbb73d153b06f0a
Reviewed-on: http://gerrit.cloudera.org:8080/19195
Reviewed-by: Daniel Becker <daniel.becker@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Reviewed-by: Michael Smith <michael.smith@cloudera.com>
Reviewed-by: Joe McDonnell <joemcdonnell@cloudera.com>


Commit 86fdbfcc995a22a5836c6625fd5c86080fa7764a in impala's branch refs/heads/master from stiga-huang
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=86fdbfcc9 ]

IMPALA-11720: Deflake FileMetadataLoaderTest due to FileSystem closed

IMPALA-11699 recently reverted the changes in FileMetadataLoaderTest
that it no longer extends to FrontendTestBase. This causes tests in
FileMetadataLoaderTest to become flaky if run individually.

This is a subtle bug in FileMetadataLoader#load(), where we first call
FileSystem#getFileSystem() to get a FileSystem object, and then call
methods of FileSystemUtil which will trigger class loading of it and
running its static code.

FileSystem#getFileSystem() will create a FileSystem object in the first
get and cache it for follow-up usage. Without extending
FrontendTestBase, BackendConfig.INSTANCE is not initialized when the
test is run. So the static code in FileSystemUtil lazily initializes
BackendConfig.INSTANCE, which initializes FeSupport and finally calls
JniUtil::InitLibhdfs(). In this method, a FileSystem object is get and
closed. This is exactly the FileSystem object created in
FileMetadataLoader#load(). So the following usage on it causes an
IOException of "Filesystem closed".

The purpose of JniUtil::InitLibhdfs() is to make a simple call on
libhdfs to make it initialize the JVM. This is crucial when launching
from C++ codes for impalad and catalogd to init the embedded JVM. So we
should keep it unchanged.

The fix for this bug is to maintain the state of BackendConfig.INSTANCE
in the static code of FileSystemUtil (i.e., keep un-initialized or
initialized), which avoids the subtle side effects.

Tests:
 - Verified tests in FileMetadataLoaderTest individually

Change-Id: Ib6f96950210c9a0124fe03696ef334cb00b057ab
Reviewed-on: http://gerrit.cloudera.org:8080/19233
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Reviewed-by: Michael Smith <michael.smith@cloudera.com>
Reviewed-by: Qifan Chen <qfchen@hotmail.com>


