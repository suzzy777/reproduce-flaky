Patch looks good.

Not too interested in giving folks a choice for L1.  Would rather just switch over if can demonstrate it generally better running Caffeine; theory-wise it would make sense. Why you think LRUBlockCache did better in 100% case [~ben.manes]? Caffeine is doing more work? If the two implementations are close when all comes from cache and Caffeine does better when there are misses, I'd say it no brainer. Let me do my own compare...

Anyone else want to chime in here? [~mantonov]?

Hi Michael,

I agree that offer a choice is an unnecessary confusion. It made it easier to test via a flag and, if retained, could be used only transitionally to give users a release cycle to adjust.

For the 100% case LruBlockCache's work is a hash table read and increment of a global counter (fetch-and-add instruction). Caffeine's is the hash table read, select a ring buffer, CAS append into it, and schedule an async drain if full on ForkJoinPool#commonPool() (which might cause a few more context switches). The differences were in a margin of error in LruBlockCache's favor, but a tiny penalty seems understandable.

As noted in ACCUMULO-4177, this will require Java 8. Should we start the dev@ discussion now about if HBase 2.0 will be JDK8+ only?

Yes (didn't realize it jdk8 only)... I still owe basic perf numbers here.

I don't see a problem making this pronouncement, if and when we take on something 8-only. We're past the end of public updates of Java 7. 

Please let me know if there is anything I can do on my end to help.

Ball is in our court [~ben.manes] I just need to do some basic tests. We got clearance already for master being jdk8 so that removed the only obstacle other than a bit of basic testing.

[Druid|http://druid.io/] was recently struck by [JDK-8078490 - Missed submissions in ForkJoinPool|https://bugs.openjdk.java.net/browse/JDK-8078490]. This caused the cache to stop evicting because the asynchronous task was never run due to a race in the executor. The result was either a memory leak (2.2.6) or halting due to the back pressure (2.3.0). The solution if you are running on an older JDK8 release is to use a different executor (e.g. same-thread). This critical bug effected 8u40 - 8u60 (current is 8u92) and broke any FJP usage, such as *CompletableFuture*. I confirmed this fix with Doug Lea when investigating.

In other news, Cassandra recently adopted Caffeine for its [page cache](https://issues.apache.org/jira/browse/CASSANDRA-5863). Their analysis of the performance, hit rate, and scan tolerance were positive. I'm hoping to integrate the eviction policy into their off-heap cache ([OHC|https://github.com/snazy/ohc]), which uses LRU. That cache is extracted into a library so contributing there might make it easy for you to benefit as well.

Can we merge this in?

I believe we've got consensus on the master / HBase 2.0.z branch being jdk8-only, but we're blocked on implementing it over on HBASE-15624.

Thanks! I'll track that one then.

Now master is moved to jdk8 only. Let's resume the progress here? Seems a big performance improvement.

Rebased and upgraded to Caffeine 2.3.3

Thanks [~Apache9]. The rebase had no conflicts and I didn't notice any major changes in the caching area since the previous patch.

Patch [submitted|https://reviews.apache.org/r/51932/] to review board.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 21s {color} | {color:blue} Docker mode activated. {color} |
| {color:red}-1{color} | {color:red} @author {color} | {color:red} 0m 0s {color} | {color:red} The patch appears to contain 1 @author tags which the community has agreed to not allow in code contributions. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 8s {color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 2m 41s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 3m 6s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 54s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 1m 25s {color} | {color:green} master passed {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue} 0m 0s {color} | {color:blue} Skipped patched modules with no Java source: . {color} |
| {color:red}-1{color} | {color:red} findbugs {color} | {color:red} 0m 31s {color} | {color:red} hbase-common in master has 1 extant Findbugs warnings. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 2m 48s {color} | {color:green} master passed {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 10s {color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:red}-1{color} | {color:red} mvninstall {color} | {color:red} 0m 26s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:red}-1{color} | {color:red} mvninstall {color} | {color:red} 1m 25s {color} | {color:red} root in the patch failed. {color} |
| {color:red}-1{color} | {color:red} compile {color} | {color:red} 0m 29s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:red}-1{color} | {color:red} compile {color} | {color:red} 0m 55s {color} | {color:red} root in the patch failed. {color} |
| {color:red}-1{color} | {color:red} javac {color} | {color:red} 0m 29s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:red}-1{color} | {color:red} javac {color} | {color:red} 0m 55s {color} | {color:red} root in the patch failed. {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 59s {color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} mvneclipse {color} | {color:red} 1m 2s {color} | {color:red} root in the patch failed. {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} xml {color} | {color:green} 0m 3s {color} | {color:green} The patch has no ill-formed XML file. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 1m 6s {color} | {color:red} The patch causes 22 errors with Hadoop v2.4.0. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 2m 8s {color} | {color:red} The patch causes 22 errors with Hadoop v2.4.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 3m 10s {color} | {color:red} The patch causes 22 errors with Hadoop v2.5.0. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 4m 12s {color} | {color:red} The patch causes 22 errors with Hadoop v2.5.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 5m 16s {color} | {color:red} The patch causes 22 errors with Hadoop v2.5.2. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 6m 16s {color} | {color:red} The patch causes 22 errors with Hadoop v2.6.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 7m 16s {color} | {color:red} The patch causes 22 errors with Hadoop v2.6.2. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 8m 12s {color} | {color:red} The patch causes 22 errors with Hadoop v2.6.3. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 9m 13s {color} | {color:red} The patch causes 22 errors with Hadoop v2.7.1. {color} |
| {color:red}-1{color} | {color:red} hbaseprotoc {color} | {color:red} 0m 22s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:red}-1{color} | {color:red} hbaseprotoc {color} | {color:red} 0m 42s {color} | {color:red} root in the patch failed. {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue} 0m 0s {color} | {color:blue} Skipped patched modules with no Java source: . {color} |
| {color:red}-1{color} | {color:red} findbugs {color} | {color:red} 0m 18s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 2m 47s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 1m 46s {color} | {color:green} hbase-common in the patch passed. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 0m 26s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 5m 40s {color} | {color:red} root in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 24s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 43m 8s {color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.11.2 Server=1.11.2 Image:yetus/hbase:7bda515 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12828069/HBASE-15560.patch |
| JIRA Issue | HBASE-15560 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  xml  |
| uname | Linux 151fd497472e 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / 8c4b09d |
| Default Java | 1.8.0_101 |
| @author | https://builds.apache.org/job/PreCommit-HBASE-Build/3565/artifact/patchprocess/author-tags.txt |
| findbugs | v3.0.0 |
| findbugs | https://builds.apache.org/job/PreCommit-HBASE-Build/3565/artifact/patchprocess/branch-findbugs-hbase-common-warnings.html |
| mvninstall | https://builds.apache.org/job/PreCommit-HBASE-Build/3565/artifact/patchprocess/patch-mvninstall-hbase-server.txt |
| mvninstall | https://builds.apache.org/job/PreCommit-HBASE-Build/3565/artifact/patchprocess/patch-mvninstall-root.txt |
| compile | https://builds.apache.org/job/PreCommit-HBASE-Build/3565/artifact/patchprocess/patch-compile-hbase-server.txt |
| compile | https://builds.apache.org/job/PreCommit-HBASE-Build/3565/artifact/patchprocess/patch-compile-root.txt |
| javac | https://builds.apache.org/job/PreCommit-HBASE-Build/3565/artifact/patchprocess/patch-compile-hbase-server.txt |
| javac | https://builds.apache.org/job/PreCommit-HBASE-Build/3565/artifact/patchprocess/patch-compile-root.txt |
| mvneclipse | https://builds.apache.org/job/PreCommit-HBASE-Build/3565/artifact/patchprocess/patch-mvneclipse-root.txt |
| hbaseprotoc | https://builds.apache.org/job/PreCommit-HBASE-Build/3565/artifact/patchprocess/patch-hbaseprotoc-hbase-server.txt |
| hbaseprotoc | https://builds.apache.org/job/PreCommit-HBASE-Build/3565/artifact/patchprocess/patch-hbaseprotoc-root.txt |
| findbugs | https://builds.apache.org/job/PreCommit-HBASE-Build/3565/artifact/patchprocess/patch-findbugs-hbase-server.txt |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/3565/artifact/patchprocess/patch-unit-hbase-server.txt |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/3565/artifact/patchprocess/patch-unit-root.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/3565/testReport/ |
| modules | C: hbase-common hbase-server . U: . |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/3565/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



Hi [~benmanns]
Left some comments in RB.
It seems TinyLFU will ignore the inMemory flag. Is this correct?
It might be ok given that the caching policy is more sophisticated than LRU, but can you be explicit about this issue?

Also, given that in the patch LRU is the default policy seems no new tests were added in to test TinyLFU.

Thanks for the reviews so far. When I originally wrote the patch I did enough for evaluation and tests seemed premature. I'll see what can be ported over from TestLruBlockCache, though I'd expect it to be minimal. I don't think it would be appropriate to write tests in HBase that make too many assumptions about the policy's behavior as that leads to relying on implementation details of an external library.

BlockPriority is coupled to LruBlockCache and arguably it is a leaky abstraction by exposing it. I'd argue that the `BlockCache` should be redesigned to avoid [dogpiling|https://en.wikipedia.org/wiki/Cache_stampede] by computing through the cache and minimize implementation assumptions. `MemcachedBlockCache` silently ignores the flag, throws exceptions, and returns dummy values for methods that make no sense for it.

If this is merged in, I'd like to see a similar ticket like [ACCUMULO-4466|https://issues.apache.org/jira/browse] to evaluate whether to make TinyLFU the default. The Lru implementation could then be removed.

I think that I addressed all of the comments, except where noted as unclear. Please take another look when you have a chance.

[~ben.manes] seems you addressed all comments in RB.
Can you upload new patch which passes QA? Currently you have some compilation errors.
You can take a look at the Report table under the unit lines.

The error appears to be a pre-commit check that fails for CaffeinatedBlockCache formatting. However, I renamed that to TinyLfuBlockCache, so either the report is old or the build is retaining stale files. Locally a compile is successful.

Attached patch from review board

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 53m 28s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 5 new or modified test files. {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 1m 54s {color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 8m 49s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 5m 0s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 1m 18s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 2m 0s {color} | {color:green} master passed {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue} 0m 0s {color} | {color:blue} Skipped patched modules with no Java source: . {color} |
| {color:red}-1{color} | {color:red} findbugs {color} | {color:red} 0m 42s {color} | {color:red} hbase-common in master has 1 extant Findbugs warnings. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 4m 13s {color} | {color:green} master passed {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 12s {color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:red}-1{color} | {color:red} mvninstall {color} | {color:red} 4m 14s {color} | {color:red} root in the patch failed. {color} |
| {color:red}-1{color} | {color:red} compile {color} | {color:red} 3m 4s {color} | {color:red} root in the patch failed. {color} |
| {color:red}-1{color} | {color:red} javac {color} | {color:red} 3m 4s {color} | {color:red} root in the patch failed. {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 1m 7s {color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} mvneclipse {color} | {color:red} 1m 4s {color} | {color:red} root in the patch failed. {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} xml {color} | {color:green} 0m 4s {color} | {color:green} The patch has no ill-formed XML file. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 5m 12s {color} | {color:red} The patch causes 11 errors with Hadoop v2.4.0. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 9m 7s {color} | {color:red} The patch causes 11 errors with Hadoop v2.4.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 13m 7s {color} | {color:red} The patch causes 11 errors with Hadoop v2.5.0. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 17m 7s {color} | {color:red} The patch causes 11 errors with Hadoop v2.5.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 21m 7s {color} | {color:red} The patch causes 11 errors with Hadoop v2.5.2. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 25m 17s {color} | {color:red} The patch causes 11 errors with Hadoop v2.6.1. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 29m 25s {color} | {color:red} The patch causes 11 errors with Hadoop v2.6.2. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 33m 29s {color} | {color:red} The patch causes 11 errors with Hadoop v2.6.3. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red} 37m 38s {color} | {color:red} The patch causes 11 errors with Hadoop v2.7.1. {color} |
| {color:red}-1{color} | {color:red} hbaseprotoc {color} | {color:red} 2m 10s {color} | {color:red} root in the patch failed. {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue} 0m 0s {color} | {color:blue} Skipped patched modules with no Java source: . {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 2m 49s {color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} javadoc {color} | {color:red} 0m 47s {color} | {color:red} hbase-server generated 1 new + 1 unchanged - 0 fixed = 2 total (was 1) {color} |
| {color:red}-1{color} | {color:red} javadoc {color} | {color:red} 2m 40s {color} | {color:red} root generated 1 new + 20 unchanged - 0 fixed = 21 total (was 20) {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 2m 10s {color} | {color:green} hbase-common in the patch passed. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 23m 25s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 30m 54s {color} | {color:red} root in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 58s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 198m 24s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.hbase.filter.TestFilter |
|   | hadoop.hbase.filter.TestFilter |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.11.2 Server=1.11.2 Image:yetus/hbase:7bda515 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12830417/HBASE-15560.patch |
| JIRA Issue | HBASE-15560 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  xml  |
| uname | Linux dcdd7cd61591 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / b9ec59e |
| Default Java | 1.8.0_101 |
| findbugs | v3.0.0 |
| findbugs | https://builds.apache.org/job/PreCommit-HBASE-Build/3719/artifact/patchprocess/branch-findbugs-hbase-common-warnings.html |
| mvninstall | https://builds.apache.org/job/PreCommit-HBASE-Build/3719/artifact/patchprocess/patch-mvninstall-root.txt |
| compile | https://builds.apache.org/job/PreCommit-HBASE-Build/3719/artifact/patchprocess/patch-compile-root.txt |
| javac | https://builds.apache.org/job/PreCommit-HBASE-Build/3719/artifact/patchprocess/patch-compile-root.txt |
| mvneclipse | https://builds.apache.org/job/PreCommit-HBASE-Build/3719/artifact/patchprocess/patch-mvneclipse-root.txt |
| hbaseprotoc | https://builds.apache.org/job/PreCommit-HBASE-Build/3719/artifact/patchprocess/patch-hbaseprotoc-root.txt |
| javadoc | https://builds.apache.org/job/PreCommit-HBASE-Build/3719/artifact/patchprocess/diff-javadoc-javadoc-hbase-server.txt |
| javadoc | https://builds.apache.org/job/PreCommit-HBASE-Build/3719/artifact/patchprocess/diff-javadoc-javadoc-root.txt |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/3719/artifact/patchprocess/patch-unit-hbase-server.txt |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/3719/artifact/patchprocess/patch-unit-root.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-HBASE-Build/3719/artifact/patchprocess/patch-unit-hbase-server.txt https://builds.apache.org/job/PreCommit-HBASE-Build/3719/artifact/patchprocess/patch-unit-root.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/3719/testReport/ |
| modules | C: hbase-common hbase-server . U: . |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/3719/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



[~eshcar] all of the issues don't appear to be related to my changes. Do you know if there is anything I can do about it?

the patch failures are because the caffeine library improperly refers to the ALv2:

{code}
<licenses>
    <license>
      <name>The Apache Software License, Version 2.0</name>
      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
    </license>
</licenses>
{code}

The correct name is "Apache License, Version 2.0". You should update the supplemental license information; there are a bunch of examples there from ASF projects that used the wrong name for years. the file is {{hbase-resource-bundle/src/main/resources/supplemental-models.xml}}


Thanks [~busbey]! I made the update and will fix the definition in my build.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 16s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 5 new or modified test files. {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 26s {color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 3m 36s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 3m 46s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 32s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 1m 43s {color} | {color:green} master passed {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue} 0m 0s {color} | {color:blue} Skipped patched modules with no Java source: hbase-resource-bundle . {color} |
| {color:red}-1{color} | {color:red} findbugs {color} | {color:red} 0m 39s {color} | {color:red} hbase-common in master has 1 extant Findbugs warnings. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 2m 47s {color} | {color:green} master passed {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 9s {color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 4m 19s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 3m 44s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 3m 44s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 28s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 1m 39s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} xml {color} | {color:green} 0m 5s {color} | {color:green} The patch has no ill-formed XML file. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 28m 21s {color} | {color:green} Patch does not cause any errors with Hadoop 2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.1 2.6.2 2.6.3 2.7.1. {color} |
| {color:green}+1{color} | {color:green} hbaseprotoc {color} | {color:green} 1m 39s {color} | {color:green} the patch passed {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue} 0m 0s {color} | {color:blue} Skipped patched modules with no Java source: hbase-resource-bundle . {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 2m 36s {color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} javadoc {color} | {color:red} 0m 27s {color} | {color:red} hbase-server generated 1 new + 1 unchanged - 0 fixed = 2 total (was 1) {color} |
| {color:red}-1{color} | {color:red} javadoc {color} | {color:red} 1m 42s {color} | {color:red} root generated 1 new + 20 unchanged - 0 fixed = 21 total (was 20) {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 0m 6s {color} | {color:green} hbase-resource-bundle in the patch passed. {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 1m 44s {color} | {color:green} hbase-common in the patch passed. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 14m 26s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 19m 38s {color} | {color:red} root in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 37s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 98m 22s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.hbase.filter.TestFilter |
|   | hadoop.hbase.filter.TestFilter |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.11.2 Server=1.11.2 Image:yetus/hbase:7bda515 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12830446/HBASE-15560.patch |
| JIRA Issue | HBASE-15560 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  xml  |
| uname | Linux 53b0e71253c7 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / db394f5 |
| Default Java | 1.8.0_101 |
| findbugs | v3.0.0 |
| findbugs | https://builds.apache.org/job/PreCommit-HBASE-Build/3726/artifact/patchprocess/branch-findbugs-hbase-common-warnings.html |
| javadoc | https://builds.apache.org/job/PreCommit-HBASE-Build/3726/artifact/patchprocess/diff-javadoc-javadoc-hbase-server.txt |
| javadoc | https://builds.apache.org/job/PreCommit-HBASE-Build/3726/artifact/patchprocess/diff-javadoc-javadoc-root.txt |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/3726/artifact/patchprocess/patch-unit-hbase-server.txt |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/3726/artifact/patchprocess/patch-unit-root.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-HBASE-Build/3726/artifact/patchprocess/patch-unit-hbase-server.txt https://builds.apache.org/job/PreCommit-HBASE-Build/3726/artifact/patchprocess/patch-unit-root.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/3726/testReport/ |
| modules | C: hbase-resource-bundle hbase-common hbase-server . U: . |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/3726/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



new javadoc warning looks legit. the unit test failures are the same in the last two runs, which

could you take a look [~ben.manes]?

Fixed JavaDoc.

I am unable to reproduce the test failure locally when I run,
$ mvn test -Dtest=org.apache.hadoop.hbase.filter.TestFilter

Cancelling and re-submitting patch, hoping that Hadoop QA will pick it up this time.

[~busbey], I can't seem to trigger a new build. Can you please take a look?

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 15s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 5 new or modified test files. {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 17s {color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 2m 54s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 3m 22s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 28s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 1m 35s {color} | {color:green} master passed {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue} 0m 0s {color} | {color:blue} Skipped patched modules with no Java source: hbase-resource-bundle . {color} |
| {color:red}-1{color} | {color:red} findbugs {color} | {color:red} 0m 34s {color} | {color:red} hbase-common in master has 1 extant Findbugs warnings. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 2m 29s {color} | {color:green} master passed {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 7s {color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 3m 59s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 3m 18s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 3m 18s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 28s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 1m 35s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} xml {color} | {color:green} 0m 5s {color} | {color:green} The patch has no ill-formed XML file. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 25m 43s {color} | {color:green} Patch does not cause any errors with Hadoop 2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.1 2.6.2 2.6.3 2.7.1. {color} |
| {color:green}+1{color} | {color:green} hbaseprotoc {color} | {color:green} 1m 37s {color} | {color:green} the patch passed {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue} 0m 0s {color} | {color:blue} Skipped patched modules with no Java source: hbase-resource-bundle . {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 2m 39s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 2m 39s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 0m 6s {color} | {color:green} hbase-resource-bundle in the patch passed. {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 1m 43s {color} | {color:green} hbase-common in the patch passed. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 81m 20s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 92m 57s {color} | {color:red} root in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 51s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 233m 18s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Timed out junit tests | org.apache.hadoop.hbase.client.TestFromClientSide |
|   | org.apache.hadoop.hbase.client.TestRestoreSnapshotFromClientWithRegionReplicas |
|   | org.apache.hadoop.hbase.client.TestMobCloneSnapshotFromClient |
|   | org.apache.hadoop.hbase.client.TestMobSnapshotCloneIndependence |
|   | org.apache.hadoop.hbase.client.TestAdmin2 |
|   | org.apache.hadoop.hbase.client.TestHCM |
|   | org.apache.hadoop.hbase.client.TestSnapshotFromClientWithRegionReplicas |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.11.2 Server=1.11.2 Image:yetus/hbase:7bda515 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12830624/HBASE-15560.patch |
| JIRA Issue | HBASE-15560 |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  xml  |
| uname | Linux 4eb6ba4f664d 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / de7316b |
| Default Java | 1.8.0_101 |
| findbugs | v3.0.0 |
| findbugs | https://builds.apache.org/job/PreCommit-HBASE-Build/3748/artifact/patchprocess/branch-findbugs-hbase-common-warnings.html |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/3748/artifact/patchprocess/patch-unit-hbase-server.txt |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/3748/artifact/patchprocess/patch-unit-root.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-HBASE-Build/3748/artifact/patchprocess/patch-unit-hbase-server.txt https://builds.apache.org/job/PreCommit-HBASE-Build/3748/artifact/patchprocess/patch-unit-root.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/3748/testReport/ |
| modules | C: hbase-resource-bundle hbase-common hbase-server . U: . |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/3748/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



[~busbey], [~eshcar]: The remaining issues appear unrelated to my changes.

Hi 
This often happened to me when tests failed in QA and passed locally. Usually after some rebase this is resolved.
I am not a committer, and I'm not sure what's the policy for committing patches which didn't pass QA, however I can give my 
+1
[~saint.ack@gmail.com],  [~busbey], any input here?

Looks good overall.
{code}
+  public static final String HFILE_BLOCK_CACHE_POLICY_KEY =
+      "hfile.block.cache.policy";
+
+  public static final String HFILE_BLOCK_CACHE_POLICY_DEFAULT = "LRU";
{code}
The above is used in CacheConfig only. Please move them there.
{code}
+        // FIXME: Currently does not capture the insertion time
+        stats.evicted(/* cachedTime */ 0L, key.isPrimary());
{code}
Would the above be done in a follow-up ?

Doing another pass over the patch.  Have some comments. Will complete today.

We can add it now if that's desired, or defer on whether to add or remove depending on the team's consensus. Neither the Lru nor TinyLfu caches use the field in their policies and I don't see how it provides meaningful information to users.

+1, pending QA results.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 11s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 5 new or modified test files. {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 15s {color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 2m 45s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 3m 11s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 26s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 1m 32s {color} | {color:green} master passed {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue} 0m 0s {color} | {color:blue} Skipped patched modules with no Java source: hbase-resource-bundle . {color} |
| {color:red}-1{color} | {color:red} findbugs {color} | {color:red} 0m 32s {color} | {color:red} hbase-common in master has 1 extant Findbugs warnings. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 2m 19s {color} | {color:green} master passed {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 7s {color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 3m 43s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 3m 12s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 3m 12s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 26s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 1m 32s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} xml {color} | {color:green} 0m 5s {color} | {color:green} The patch has no ill-formed XML file. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 24m 21s {color} | {color:green} Patch does not cause any errors with Hadoop 2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.1 2.6.2 2.6.3 2.7.1. {color} |
| {color:green}+1{color} | {color:green} hbaseprotoc {color} | {color:green} 1m 33s {color} | {color:green} the patch passed {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue} 0m 0s {color} | {color:blue} Skipped patched modules with no Java source: hbase-resource-bundle . {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 2m 24s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 2m 20s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 0m 6s {color} | {color:green} hbase-resource-bundle in the patch passed. {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 1m 40s {color} | {color:green} hbase-common in the patch passed. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 89m 36s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 86m 13s {color} | {color:red} root in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 48s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 231m 36s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.hbase.regionserver.TestHRegionWithInMemoryFlush |
|   | hadoop.hbase.regionserver.TestHRegionWithInMemoryFlush |
| Timed out junit tests | org.apache.hadoop.hbase.constraint.TestConstraint |
|   | org.apache.hadoop.hbase.TestNamespace |
|   | org.apache.hadoop.hbase.security.visibility.TestVisibilityLabelsWithDeletes |
|   | org.apache.hadoop.hbase.snapshot.TestMobRestoreFlushSnapshotFromClient |
|   | org.apache.hadoop.hbase.security.access.TestWithDisabledAuthorization |
|   | org.apache.hadoop.hbase.security.access.TestAccessController |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.11.2 Server=1.11.2 Image:yetus/hbase:7bda515 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12831260/HBASE-15560.patch |
| JIRA Issue | HBASE-15560 |
| Optional Tests |  asflicense  javac  javadoc  unit  xml  compile  findbugs  hadoopcheck  hbaseanti  checkstyle  |
| uname | Linux 76260aa87b56 3.13.0-95-generic #142-Ubuntu SMP Fri Aug 12 17:00:09 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / b8ad9b1 |
| Default Java | 1.8.0_101 |
| findbugs | v3.0.0 |
| findbugs | https://builds.apache.org/job/PreCommit-HBASE-Build/3795/artifact/patchprocess/branch-findbugs-hbase-common-warnings.html |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/3795/artifact/patchprocess/patch-unit-hbase-server.txt |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/3795/artifact/patchprocess/patch-unit-root.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-HBASE-Build/3795/artifact/patchprocess/patch-unit-hbase-server.txt https://builds.apache.org/job/PreCommit-HBASE-Build/3795/artifact/patchprocess/patch-unit-root.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/3795/testReport/ |
| modules | C: hbase-resource-bundle hbase-common hbase-server . U: . |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/3795/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



TestHRegionWithInMemoryFlush was not modified by the patch - LRU cache is used.

HBASE-16701 tracks this flaky test.

TestHRegionWithInMemoryFlush passes with patch locally.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 16s {color} | {color:blue} Docker mode activated. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green} 0m 0s {color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green} 0m 0s {color} | {color:green} The patch appears to include 2 new or modified test files. {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 25s {color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 3m 13s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 3m 24s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 29s {color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 1m 40s {color} | {color:green} master passed {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue} 0m 0s {color} | {color:blue} Skipped patched modules with no Java source: hbase-resource-bundle . {color} |
| {color:red}-1{color} | {color:red} findbugs {color} | {color:red} 0m 36s {color} | {color:red} hbase-common in master has 1 extant Findbugs warnings. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 2m 30s {color} | {color:green} master passed {color} |
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue} 0m 8s {color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 4m 0s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 3m 14s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green} 3m 14s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green} 0m 28s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvneclipse {color} | {color:green} 1m 34s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green} 0m 0s {color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} xml {color} | {color:green} 0m 5s {color} | {color:green} The patch has no ill-formed XML file. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 26m 17s {color} | {color:green} Patch does not cause any errors with Hadoop 2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.1 2.6.2 2.6.3 2.7.1. {color} |
| {color:green}+1{color} | {color:green} hbaseprotoc {color} | {color:green} 1m 41s {color} | {color:green} the patch passed {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue} 0m 0s {color} | {color:blue} Skipped patched modules with no Java source: hbase-resource-bundle . {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green} 2m 35s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green} 2m 31s {color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 0m 6s {color} | {color:green} hbase-resource-bundle in the patch passed. {color} |
| {color:green}+1{color} | {color:green} unit {color} | {color:green} 1m 44s {color} | {color:green} hbase-common in the patch passed. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 92m 25s {color} | {color:red} hbase-server in the patch failed. {color} |
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 91m 1s {color} | {color:red} root in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green} 0m 50s {color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 243m 30s {color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.hbase.master.procedure.TestDispatchMergingRegionsProcedure |
|   | hadoop.hbase.master.procedure.TestDispatchMergingRegionsProcedure |
| Timed out junit tests | org.apache.hadoop.hbase.client.TestFromClientSide |
|   | org.apache.hadoop.hbase.client.TestMobCloneSnapshotFromClient |
|   | org.apache.hadoop.hbase.client.TestMobSnapshotCloneIndependence |
|   | org.apache.hadoop.hbase.client.TestAdmin2 |
|   | org.apache.hadoop.hbase.client.TestHCM |
|   | org.apache.hadoop.hbase.client.TestSizeFailures |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=1.11.2 Server=1.11.2 Image:yetus/hbase:7bda515 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12831446/HBASE-15560.patch |
| JIRA Issue | HBASE-15560 |
| Optional Tests |  asflicense  javac  javadoc  unit  xml  compile  findbugs  hadoopcheck  hbaseanti  checkstyle  |
| uname | Linux 575a2bd027e0 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / cc237c4 |
| Default Java | 1.8.0_101 |
| findbugs | v3.0.0 |
| findbugs | https://builds.apache.org/job/PreCommit-HBASE-Build/3803/artifact/patchprocess/branch-findbugs-hbase-common-warnings.html |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/3803/artifact/patchprocess/patch-unit-hbase-server.txt |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/3803/artifact/patchprocess/patch-unit-root.txt |
| unit test logs |  https://builds.apache.org/job/PreCommit-HBASE-Build/3803/artifact/patchprocess/patch-unit-hbase-server.txt https://builds.apache.org/job/PreCommit-HBASE-Build/3803/artifact/patchprocess/patch-unit-root.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/3803/testReport/ |
| modules | C: hbase-resource-bundle hbase-common hbase-server . U: . |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/3803/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



I am -1 on this patch until there has been a perf compare of before vs. after (I note this as a prereq. on commit a few times in the comments above). I don't see a compare here. Please revert until that has happened. I just got my test cluster back and intend trying this over next few days unless someone else beats me to it.

[~ted_yu] See above.

FAILURE: Integrated in Jenkins build HBase-Trunk_matrix #1725 (See [https://builds.apache.org/job/HBase-Trunk_matrix/1725/])
HBASE-15560 TinyLFU-based BlockCache (Ben Manes) (tedyu: rev 9e0c2562a95638600781cb894c0ae7bb404573ca)
* (add) hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/TinyLfuBlockCache.java
* (edit) hbase-common/src/main/resources/hbase-default.xml
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/CombinedBlockCache.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/CacheConfig.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/InclusiveCombinedBlockCache.java
* (edit) hbase-resource-bundle/src/main/resources/supplemental-models.xml
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheConfig.java
* (edit) pom.xml
* (add) hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestTinyLfuBlockCache.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketCache.java
* (edit) hbase-server/pom.xml
* (add) hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/FirstLevelBlockCache.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/LruBlockCache.java


As noted previously, please try with a real workload rather than the a synthetic. When [~eshcar] and I tried, we found that Lru was already optimized for YCSB making the difference negligible. Given the paper's real-world traces and Druid's experiences ([1|https://github.com/druid-io/druid/pull/3028], [2|https://groups.google.com/d/msg/druid-user/J-YMqt8wc5s/tv2VXa6pBwAJ]), TinyLFU appears promising.

Thanks [~ben.manes] Will try w/ some variance. I just want to confirm that there is no regression or if there is a tax when all is out of cache, that it is small or at least quantifiable. As is, we've committed a change to a core piece of our serving w/o clue as to what it does performance-wise.

Old LRU cache only the default. 
BTW we will have to add some release notes to the issue on how to enable the new L1 cache 

SUCCESS: Integrated in Jenkins build HBase-Trunk_matrix #1726 (See [https://builds.apache.org/job/HBase-Trunk_matrix/1726/])
HBASE-15560 TinyLFU-based BlockCache - revert pending performance (tedyu: rev b952e64751d309e920bf6e44caa2b3d5801e3be8)
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/bucket/BucketCache.java
* (delete) hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestTinyLfuBlockCache.java
* (edit) hbase-server/pom.xml
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/CombinedBlockCache.java
* (delete) hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/TinyLfuBlockCache.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/CacheConfig.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/InclusiveCombinedBlockCache.java
* (edit) hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheConfig.java
* (edit) hbase-common/src/main/resources/hbase-default.xml
* (delete) hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/FirstLevelBlockCache.java
* (edit) pom.xml
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/LruBlockCache.java
* (edit) hbase-resource-bundle/src/main/resources/supplemental-models.xml


If you are saying that the old cache remains the default, which seems to be the case looking at the patch, another -1 on top of the above -1. Either TinyLRU is better and it should be enabled by default or let us not bother our operators and users w/ exotic choices such as which LRU algo to use.

This flag was to simplify evaluation. It can either be retained to allow a gradual rollout, e.g. feature flag in case users discover concerns, or removed. For providing a patch it seemed most respectful, on my part, to not try to force a switch. I'm fine removing the configuration once the team is confident in adopting the new policy.

bq. This flag was to simplify evaluation.

Understood. Thanks for taking that tack.

Some background. In hbase and hadoop, the code base gets loaded up w/ options. The result is code that gets no exercise and operators who are confused by the plethora of possibilities. To me, putting a feature behind a flag indicates: little to no testing (let the 'user' do the testing) and the feature is destined to rot because it not used.

This feature looks great. It should be on by default but it is in a tender area so we should be able to say when it shines and when it might cost the user a little perf. We owe that much to you the contributor and to our users.

Thanks Ben.

I know the frustration and agree that feature flags should have a clear deprecation cycle. You might want to consider a special deprecation annotation indicating the release (or date) that a flag should be removed by. A custom checkstyle / pmd rule would be easy to write and allow for validating in the build. If the flag is rot due to lack of testing then it pushes for a decision to be made.

In general I would have performance tested this myself, but due to not being an HBase user that would be meaningless. Its been fun to provide the patch and work through the process, as requested by [~ebortnik], but I do need help on that last mile. So I am looking forward to digging into the results when we have some hard numbers.

Thanks. Yeah, we owe you the last mile. Let us do that.

[~ted_yu] There is a -1 against this patch.

This was reverted in the morning.

I have been in a support call most time of the day.

Hi, can I add my view of this issue ? 

I think the gap between what is required by the community and what can be provided is not that big.

1) [~ben.manes] you already have the results of the YCSB benchmark you ran with the initial patch.
Can you rerun these tests with the latest patch and publish the results in some form.
I suggest you publish the exact settings you used plus raw results (rather than lift).
You can either present a comparison table of the mean latency + high (95th/99th) percentiles, over different cache sizes, or depict the dynamic of the latency throughout the run in a graph (by using the '-s' flag -- I can explain offline), or best do both. 
If you dig in the region server log you can find records of the hit ratio, which you can also depict alongside the latency; could be nice to see.
This results would show that when combining HBase and Caffeine there is no overhead and in some cases a measurable benefit, even in synthetic workloads.

2) [~stack] if the results of these experiments would satisfy the community then the default can be switched to TinyLFU, with LRU being optional and pushed to master. This would allow the community to further experiment with this feature more easily, and to modify it if necessary.

3) Ben briefly described the results of the benchmarks when using a static distribution. Here is my explanation of the results (Ben feel free to correct me if I'm wrong):
The distribution of the items is skewed but *static* with a small (high frequency) head and a long (low frequency) tail.
With a given cache size -- after the cache is warm -- the items at the head feel the second segment (which is 80% of the cache in TinyLFU) and the following items feel the first segment.
With LRU from time to time items from the tail of the distribution cause eviction from the first segment which is later translated to cache misses and increased latency, while TinyLFU tends to keep items with higher frequency in the cache, which results in less misses. As the size of the cache grows less and less items are evicted from the cache and the difference diminishes.
With *dynamic* distribution items are continuously evicted from the cache and here the benefit of TinyLFU should be clearly pronounced.
We have traces of production workloads that would potentially have skewed dynamic probability.
However, we can neither share them and currently don't have the resources to turn them into a running benchmark.
We could try to make an effort at this direction if this becomes a make-it-or-break-it point.

Would this be acceptable: 1) [~ben.manes] running static YCSB benchmark; 2) [~stack] commit TinyLFU as a default; 3) benchmark with dynamic workloads, either by us or others in the community.

Thanks [~eshcar]

I was going to do a basic #1 but if Ben did it, that'd be great too. Just looking to see that no radical regression and that there some semblance of benefit to be had moving to the new algo in the general case (YCSB, in the absence of anything better represents 'general' case). If #1, lets do #2. It is good that fallback is easy if an issue but lets go w/ tinylru if generally better rather than mess around. 

I can take another stab at (1) and work with [~eshcar] to ensure its validity. I should have time over this upcoming weekend.

Like the paper's simulations, I can also run an anonymized trace to calculate the hit/miss curves of the two policies. The trace file would be a sequence of cache key hashes on a cache.get() call. While not taking into account entry sizes, it should tell us if the policy improves the efficiency in a realistic workload. That lends itself to being able to estimate the new response times, assuming all else is equal. Would an anonymized access trace be easy to acquire and share?

No unfortunately we currently don't have anonymized traces to share.
But let's start with step (1) and continue from there. I think when the cache is small/medium size we can get interesting results even with YCSB synthetic workloads.

1. I performed "git revert b952e64"
2. Configured YCSB workload B with the settings,
{code}
recordcount=100000
operationcount=1000000
{code}
3. Started hbase server with the {{hbase-site.xml}} configuration,
{code:xml}
<property>
 <name>hfile.block.cache.size</name>
 <value>0.1f</value>
</property>
<property>
 <name>hbase.regionserver.global.memstore.size</name>
 <value>0.7f</value>
</property>
<property>
 <name>hfile.block.cache.policy</name>
 <value>Lru</value>
</property>
{code}
4. [Loaded and ran ycsb|https://github.com/brianfrankcooper/YCSB/tree/master/hbase098] with Lru and TinyLfu.

h4. LruBlockCache

{code}
totalSize=96.67 MB, freeSize=2.32 MB, max=98.99 MB, blockCount=1793, 
accesses=4766387, hits=4081322, hitRatio=85.63%, 
cachingAccesses=4764133, cachingHits=4081322, cachingHitsRatio=85.67%, 
evictions=10402, evicted=681017, evictedPerRun=65.46981349740435
{code}

{code}
[OVERALL], RunTime(ms), 189753.0
[OVERALL], Throughput(ops/sec), 5270.008906315052
[TOTAL_GCS_PS_Scavenge], Count, 717.0
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 730.0
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.38471065016099876
[TOTAL_GCS_PS_MarkSweep], Count, 0.0
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 0.0
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.0
[TOTAL_GCs], Count, 717.0
[TOTAL_GC_TIME], Time(ms), 730.0
[TOTAL_GC_TIME_%], Time(%), 0.38471065016099876
[READ], Operations, 950125.0
[READ], AverageLatency(us), 152.8599626364952
[READ], MinLatency(us), 76.0
[READ], MaxLatency(us), 60959.0
[READ], 95thPercentileLatency(us), 215.0
[READ], 99thPercentileLatency(us), 253.0
[READ], Return=OK, 950125
[CLEANUP], Operations, 2.0
[CLEANUP], AverageLatency(us), 72164.0
[CLEANUP], MinLatency(us), 8.0
[CLEANUP], MaxLatency(us), 144383.0
[CLEANUP], 95thPercentileLatency(us), 144383.0
[CLEANUP], 99thPercentileLatency(us), 144383.0
[UPDATE], Operations, 49875.0
[UPDATE], AverageLatency(us), 215.8185664160401
[UPDATE], MinLatency(us), 125.0
[UPDATE], MaxLatency(us), 36159.0
[UPDATE], 95thPercentileLatency(us), 294.0
[UPDATE], 99thPercentileLatency(us), 484.0
[UPDATE], Return=OK, 49875
{code}

h4. TinyLfuBlockCache
{code}
totalSize=98.98 MB, freeSize=4.07 KB, max=98.99 MB, blockCount=2112,
accesses=4170109, hits=3794003, hitRatio=90.98%, 
cachingAccesses=4170112, cachingHits=3794005, cachingHitsRatio=90.98%, 
evictions=373994, evicted=37399
{code}

{code}
[OVERALL], RunTime(ms), 118390.0
[OVERALL], Throughput(ops/sec), 8446.659346228567
[TOTAL_GCS_PS_Scavenge], Count, 664.0
[TOTAL_GC_TIME_PS_Scavenge], Time(ms), 714.0
[TOTAL_GC_TIME_%_PS_Scavenge], Time(%), 0.6030914773207197
[TOTAL_GCS_PS_MarkSweep], Count, 0.0
[TOTAL_GC_TIME_PS_MarkSweep], Time(ms), 0.0
[TOTAL_GC_TIME_%_PS_MarkSweep], Time(%), 0.0
[TOTAL_GCs], Count, 664.0
[TOTAL_GC_TIME], Time(ms), 714.0
[TOTAL_GC_TIME_%], Time(%), 0.6030914773207197
[READ], Operations, 949956.0
[READ], AverageLatency(us), 112.233432916893
[READ], MinLatency(us), 75.0
[READ], MaxLatency(us), 61151.0
[READ], 95thPercentileLatency(us), 165.0
[READ], 99thPercentileLatency(us), 204.0
[READ], Return=OK, 949956
[CLEANUP], Operations, 2.0
[CLEANUP], AverageLatency(us), 59732.0
[CLEANUP], MinLatency(us), 8.0
[CLEANUP], MaxLatency(us), 119487.0
[CLEANUP], 95thPercentileLatency(us), 119487.0
[CLEANUP], 99thPercentileLatency(us), 119487.0
[UPDATE], Operations, 50044.0
[UPDATE], AverageLatency(us), 188.9981216529454
[UPDATE], MinLatency(us), 122.0
[UPDATE], MaxLatency(us), 36671.0
[UPDATE], 95thPercentileLatency(us), 257.0
[UPDATE], 99thPercentileLatency(us), 489.0
[UPDATE], Return=OK, 50044
{code}

Did all fit in memory when you ran this test [~ben.manes]? Or was there cache misses? It looks like tinylfu did better in your test? Thanks.

YCSB workload B states that each record is 1kb, so that is about 100mb (97mib). That's probably introduces some misses due to Java object overhead. Since LruBlockCache uses a high watermark and evicts to a low watermark, it could be aggressively under utilizing the capacity. So a higher hit rate might be understandable, in addition to the workload pattern's characteristics.

Thanks Ben. Let me try it here. Should be able in next day or so.

Also, the request distribution is zipfian. Memstore is flushed to disk at 128MB then it is compacted (removing duplicates) and compressed creating a file of 60-80MB ([~ben.manes] you can verify this in your logs), second flush creates a new file; at this point total size of files is more than the cache size. The third flush triggers a compaction resulting in a single file of less than 100MB (again, due to removing duplicates and compression), and so on and so forth.
With 1M operations you have about 6-7 flushes and about 3 compactions on the disk. So about 50% of the execution time data can fit in memory (cache) and 50% of the time it cannot fit into the cache.
I would say this scenario demonstrates the benefit of tinylfu over lru: 90% hit rate vs 85% hit rate, ~30% improvement in mean read latency, and 20-25% improvement in tail latency (95-99th percentiles). 
However, I can't explain the improvement in the update latency. [~ben.manes] can you explain this? Have you ever measured update latency in your previous work? 

Can we test and compare both when the cache size is enough to hold full data in it?  No cache evictions.

The update latencies, except for average, were very similar. Since presumably not all entries fit in the cache then an update of a miss would trigger an eviction. It could be impact from the O(n lg n) Lru eviction thread, GC, or more coarse grained locking. Since this was run on a macbook rather than an isolated server, it could also be a background daemon kicking in. I think the important take away is not the absolute but that they are in the same ballpark. There isn't an outlier indicating the new implementation has a major degredation, e.g. due to locking or hit rates.

[~eshcar]: To more directly answer your question, the update cost is [very close|https://github.com/ben-manes/caffeine/wiki/Benchmarks#write-100-1] to ConcurrentHashMap. This is because the locking overhead dominates, leaving enough spare cpu cycles to mask any other penalties being processed asynchronously.

[~anoopsamjohn] In my original post the results mentioned were probably with no evictions. Because LruBlockCache penalizes only the eviction, whereas Caffeine spreads it out, one would expect Lru to have an advantage. But by Amdahl's law the potential speedup is very tiny, so it falls into the noise. A fresh test would be good.

[~stack], will you have time to test this soon?

My bad. Yes. I MUST do this.

I tried this patch. It looks good. Seems faithful replacement of our old lrublockcache except for the part where it does not reproduce our partitiioning of the cache (e.g. inmemory markings on columnfamily are just ignored now). In a follow-on we should do cleanup in doc to note that inmemory is lrublockcache specific. Metrics look right.

I tried it under a few loadings and it seems to do worse (YCSB zipfian). See attached graphs. I'm probably doing something wrong. Help me out [~ben.manes]

Here is the key to reading the diagrams from YCSB workload c (zipfian random reads).

There are three diagrams. Each covers same time range. Each has 6 humps, three  without the patch, then three with the tinylfu patch. One is Gets, one is block cache misses, and third is block cache hits (I had to separate the latter two because the hits were so much in excess of the misses).

The first three humps are from loadings done against the tip of branch-1. The three humps are two runs where there a lot of cache misses (the data did not fit the cache -- total heap was 8G) with one run where hits are mostly out of cache (heap was 31G).

The last three humps are from loadings done against the tip of branch-1 with the patch backported. The three humps here are one run where lots of cache misses (8G heap), a run with even more cache misses (4G), and then a case where most all fits the heap (31G).

Sorry the two runs are not exactly symmetric.  Can fix that next time through. Config error on my part.

What we can see is that tinylru seems to do better when near all fits in cache. We can do more throughput. It even starts to rise toward the end of the test run but overall is running at a higher rate. My guess is that tinylfu is just using more of the cache than lrublockcache and perhaps its smarts are showing when the rate starts to rise toward the tail of the test run.

For the cases where we are missing cache, it does worse. This I cannot explain.

There is little i/o when we miss cache (we seem to be getting blocks from fscache). All blocks are local.  This is a single RegionServer standing on top of an HDFS cluster of 8 nodes.

Pointers appreciated.



Thanks [~stack]! I won't be able to dig into this until the weekend. If I understand you right, the concern is that the throughput is lower for smaller caches? That would imply a lower hit rate, so even the low penalty would be observable when accumulated.

Maybe there's a bug in how the new cache uses the "replace" flag or doesn't cache on a weight limit? Since the cache is weighted, it might also be that a block exceeds the size of the window cache so there are more compulsory misses. I'd really like to step through a test case, but not sure how I'd isolate and repeat your observations atm.

No rush [~ben.manes] I have a test bench up now so easy enough for me to try stuff. Concern is that tinylfu does worse than lrublockcache when lots of misses (less hits). I'd expect it do to better.

Let me attach my patch here (I had to backport to branch-1; my tooling works w/ branch-1 only at mo). You can add any debug you like and I'll rerun.  I can send you whatever. Thanks for the help [~ben.manes] I think it encouraging that it does better in one case at least.

My backport FYI. You can add LOG to this or just tell me what you'd like to see. Thanks [~ben.manes]

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue} 0m 0s {color} | {color:blue} Docker mode activated. {color} |
| {color:blue}0{color} | {color:blue} patch {color} | {color:blue} 0m 5s {color} | {color:blue} The patch file was not named according to hbase's naming conventions. Please see https://yetus.apache.org/documentation/0.3.0/precommit-patchnames for instructions. {color} |
| {color:red}-1{color} | {color:red} patch {color} | {color:red} 0m 7s {color} | {color:red} HBASE-15560 does not apply to master. Rebase required? Wrong Branch? See https://yetus.apache.org/documentation/0.3.0/precommit-patchnames for help. {color} |
\\
\\
|| Subsystem || Report/Notes ||
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12837285/branch-1.tinylfu.txt |
| JIRA Issue | HBASE-15560 |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/4339/console |
| Powered by | Apache Yetus 0.3.0   http://yetus.apache.org |


This message was automatically generated.



I think my first step is to get an access trace (log the key's hash) so that I can run it through my simulator. Then I can verify that the policy behaves well when weights are ignored.

The next step would be to re-run it but assigning weights. Do these vary in your test? I think YCSB had static so they were the same per entry. If not, then the argument would be a potential bug when trying to be weight-aware when promoting between the window/probation/protected regions. Right now the simulator is not weight-aware, so I'd hack a quick test based on the trace data.

If all of those are good, then we need to go line-by-line to see where the two caches differ. It could be a miscalculation of an entry's weight or other subtle bugs. We'll know more if we can isolate it down to a small, repeatable test case to debug with.

How do I do the 'access trace' [~ben.manes] Let me know how I do this so I can pass you what you need.

How do I do 'weights' sir? I'm just doing ycsb workload c w/ zipfian flag.

Sorry for not getting to this over the weekend. A bit of a family scare which had a happy ending.

An access trace is a log of the key hashes on a {{get}}. Then I can replay them offline with the simulator. The "weight" of an entry in {{workloadc}} claims to be 1kb uniformly. I wasn't sure if they were going to vary, e.g with large and small across the distribution.

I do have ycsb integrated into the simulator for synthetic distributions so perhaps I can try to reproduce your observations that way.

bq. Sorry for not getting to this over the weekend. A bit of a family scare which had a happy ending.

Good.

bq. An access trace is a log of the key hashes on a get. Then I can replay them offline with the simulator. The "weight" of an entry in workloadc claims to be 1kb uniformly. I wasn't sure if they were going to vary, e.g with large and small across the distribution.

Would you want the same dataset loaded too?

{{quote}
Would you want the same dataset loaded too?
{{quote}}

That can't hurt, so unless its more work might as well.

---

In my [simulator|https://github.com/ben-manes/caffeine/wiki/Simulator], I tried to emulate {{workload c}} using the following configuration,
 * maximum-size = (below)
 * source = "synthetic"
 * distribution = "zipfian"
 * zipfian.items = 1000

I then ran it with small caches to emulate your observation. {{LruBlockCache}} is an SLru variant, so I'm assuming it behaves similar to the theoretical version.

||Policy||max=5||max=10||max=25||
|Lru|13.10%|20.70%|35.60%|
|SLru|25.90%|29.30|45.00%|
|Caffeine|24.40%|32.30%|46.00%|
|Optimal|35.20%|42.10%|45.50%|

We see that at the smallest size, 5, Caffeine slightly under performs. However whether its slightly lower, equal, or higher varies on the run. This is due to the distribution generation and Caffeine's hashing having randomness, so across runs we see it pretty much on par. As the size increases we see them all stay pretty close. Since SLru is known to be optimal for Zipf, this at least is a good sign but does not explain your observations.

In the last run, {{Optimal}} is {{55.50%}}. Sorry for the typo.

Right. How you going to simulate my case where lots of cache misses? Can i turn on a logging or something for you? Seems pretty useless sending you a bunch of access keys if you don't have same dataset loaded and same hw.

Are the access keys not in the data set so that it is not found? I assumed a miss means query the cache, load, store into the cache. If queried again, it should be a cache hit.

If that's correct then the value has no meaning and the keys are the access distributions. Any surrogate, like a hash, will be representative. So using the same Zipf distribution should give us similar results.

But I might be mistaking how the cache is used in HBase and evaluating it incorrectly in isolation

bq. Are the access keys not in the data set so that it is not found?

They should be true yes, you should be able to mimic my setup or just reproduce using YCSB against a running hbase instance.

How you suggest we reconcile our different experience? What can I pass you or what do you want me to look at? Thanks.

Interesting one and nice work [~ben.manes].

One question here for the comparison result: any tracking on the RS-side CPU cost during the test? If so, mind share the data? Thanks. [~ben.manes] [~stack]

No problem [~carp84] I'm on something else but can put up associated cpu usage for above graphs when reconfigure... 

If you can give me the steps to reproduce your observation on HBase then I'll try to debug it locally. That way I don't keep you in limbo.

I start an hbase regionserver. I make sure that the dataset doesn't all fit in cache so I am getting some misses. I used YCSB to load. Then YCSB workload c to read w/ zipfian flags. Attached are the scripts I used to load and the script to run the reads.

These hacks of mine are based on some scripts I got from [~busbey]

Thank you boss, will wait for your update then. :-)

Sorry that I haven't had time to investigate this and wrap up the ticket. Its been the usual hectic end of year, but I will try to get to it soonish.

Thanks for update [~ben.manes] Understood.

Sorry that this dropped off my radar. I can summarize a few things stated before, with minor updates.
h5. Current (SLRU)
 * Design:
 ** Reads perform a ConcurrentHashMap lookup, increment a global AtomicLong counter for the access time, and marks the block type as frequent
 ** Writes perform a ConcurrentHashMap update and notifies a thread if the cache overflows 
 ** Thread wakes up every 10s or when notified. Performs an O(n lg n) sort, and evicts the recency/frequency segments up to watermarks
 * Benefits
 ** Provides scan resistance and captures simple frequency workloads. Is optimal for Zipf.
 ** Has minimal latencies at low/modest concurrency as does very little work on requesting threads
 * Costs
 ** At high concurrency, AtomicLong would be a synchronization bottleneck (~10M op/sec if I recall correctly). This probably does not matter due to disk I/O, network I/O, etc. resulting in modest thrashing on this counter.
 ** No back-pressure on writes if the cache cannot evict fast enough. However, the I/O involved may make this moot. 
 ** Expected lower hit rates in real-world traces, based on the variety of workload we have examined (non-HBase, various freq/recency mixtures)

h5. Caffeine (Proposed, TinyLFU)
 * Design:
 ** Reads perform a ConcurrentHashMap lookup, hash to a ring buffer (growable array of buffers), and tries to add the item (up to 3 times, may rehash). If the ring buffer is full or a state machine flag is marked, then tryLocks to schedule a task on an executor.
 ** Writes perform a ConcurrentHashMap update, add to a ring buffer (blocking if full), updates a state machine flag, and tryLocks to schedule a task on an executor.
 ** Executor drains the ring buffers, replays the events on the eviction policy, evicts if the cache has overflowed (default: ForkJoinPool.commonPool()).
 * Benefits
 ** Allows higher degree of read concurrency by not having a single point of contention (striped ring buffers)
 ** Offers back-pressure on writes if the eviction thread cannot keep up (deschedules writers by them taking the global lock if the buffer is full)
 ** Spreads out small chunks of O(1) work
 ** Allows more advanced policies / data-structures (TinyLFU, Hierarchical TimerWheel) => higher hit rates & more features
 * Costs
 ** Slightly higher penalties on read / write (no free lunch)
 ** Is more biased towards frequency (a negative if a recency-skewed workload)

h5. Synopsis

The SLRU is the cheapest (latency) and most optimal (hit rate) for synthetic Zipf testing. It was designed with those considerations in mind. Any other solution will trade higher latency for better hit rates and system behavior. The question is then if the latency difference is small enough (effectively noise) and the higher hit rate improves overall performance. *This can only be definitively answered by someone willing to canary an instance in a live environment.* My belief, from analyzing hit rates and their impacts on other applications, is that there will be a benefit.
h5. TinyLFU improvements

We have been exploring ways to improve TinyLFU-based policies in adversarial workloads (recency-biased). In those cases work is brought in, operated on repeatedly, and then never touched again. A good example of that is a transaction log or a distributed compilation cache (with local cache). In those workloads frequency is a negative signal, as by the time the score is high enough for retention the item is no longer worth retaining.

We have been working on adaptive schemes by sampling the workload and adjusting based on its characteristics ([paper|https://drive.google.com/open?id=1CT2ASkfuG9qVya9Sn8ZUCZjrFSSyjRA_]). Both a naive hill climber and a statistics-based model correct the policy to the optimal hit rate. I hope to try [adaptive moment estimation|https://arxiv.org/abs/1412.6980], an advanced hill climber, which I believe will be the most robust and inexpensive mechanism (as proven by the ML community). This work will allow the cache to offer the best hit rate regardless of workload, which no other policy has been able to do so far.
h5. Next Steps

I don't think there is anything meaningful that I can offer to this ticket. If this was to go in, either a leap of faith by making it an option or someone in the community would have to prove the benefit. Without an environment or trace, we can't do more than discuss minor details from synthetic testing.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m  0s{color} | {color:blue} Docker mode activated. {color} |
| {color:red}-1{color} | {color:red} patch {color} | {color:red}  0m  5s{color} | {color:red} HBASE-15560 does not apply to master. Rebase required? Wrong Branch? See https://yetus.apache.org/documentation/0.8.0/precommit-patchnames for help. {color} |
\\
\\
|| Subsystem || Report/Notes ||
| JIRA Issue | HBASE-15560 |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/15205/console |
| Powered by | Apache Yetus 0.8.0   http://yetus.apache.org |


This message was automatically generated.



bq. Sorry that this dropped off my radar.

Smile. Two years.

Weird is that this came up today out of the blue.

bq. This can only be definitively answered by someone willing to canary an instance in a live environment.

Lets get a volunteer. Otherwise, I should be in a position to try this in a week or so.

Thanks for coming back [~ben.manes]


I put a petition for a volunteer on our dev list.

I came to say the feature is additive (modulo changes to blockcache to enable the tiny-LFU policy to be an optional feature) and optional, so why not put it in and allow people to try it out at their option. However then I see above [~stack] wants it to be default out of a well-intentioned goal to hold down further growth of the state space of our optional configurations.

Unfortunately the reason for the growth over time of our suite of configuration options is the IMHO unresolvable tension between the desire to ship new and beneficial features to the user community and the desire of others to acquire bug fixes from upgrades without taking on default-on changes that might destabilize current operations. There is no way to resolve this tension so over time the suite of optional configurations for a mature product grows. I think that is fine. So why not commit this and let people try it out at their option?

Thanks [~apurtell]. Was just hoping it was better in most cases so we would just enable it as default. Was trying to avoid adding code and options that might go unexercised. Lets see if we get an uptake on our call for a volunteer? If nought, can commit (I've scheduled this against 2.2/3.0 so it will at least get consideration before we make those releases).

We could make it default in 3.0 for sure, possibly in 2.2 with a big fat release note? Because it is configurable an operator could switch away if they notice a problem after an upgrade. Although I think we might have a debate on compatibility semantics if done in a minor.

I am winding down some internal stuff at work and will have more time to work on open source very soon, with the intent to branch for 1.5 and make a series of 1.5 releases. For what it's worth we could try tiny-LFU as default in 1.5 should a branch-1 patch be made available and committed prior to starting that. Expecting to start the 1.5 stuff next month, January 2019. Part of the release work for a new minor would be a lot more perf testing than usual, although with the usual set of crappy tools (PE, YCSB, etc.)

Scheduled this on 1.5 too (smile).

No progress, cancelling patch

Sorry to hear that. Thanks for trying to move this forward. The latest version now includes robust [adaptivity|http://highscalability.com/blog/2019/2/25/design-of-a-modern-cachepart-deux.html] to optimize against the workload. Let me know if I can be of help if this ever comes up again.

Cancelling the patch is not an expression of disinterest. What do we need to do to move this forward?

Did we become stuck because Stack wanted something? What is that exactly? Having trouble figuring that out with a quick skim of this issue, but I think it was the idea TinyLFU should be the new default, but only after perf testing done by some unspecified person. Getting that volunteer effort seems unlikely. Can we check this in as a new option? I would be happy to do that to bring this over the finish line.

[~stack] [~ben.manes]

Pardon if not clear. Yes, wanted this to be perf tested first to ensure no regression at least. I thought I could get to it but didn't get the time. I wanted to avoid adding this as an option. I wanted this to just be our new default. We drown in options currently. If this were optional, my fear would be it would go into a hole not to be heard from again -- meantime bulking up the codebase and possible a burden the next time a dev comes by this part of the codebase.

Ok, but that isn't going to happen as we have no volunteer to do the testing, so can we put this in as an option? Otherwise it will get dropped on the floor, which is not a good outcome IMHO

On it being an option, there is my comment above and others from two years ago (if you scroll back)... -0 on commit as an option.



It is perhaps not ideal but if an option a potential adopter can do the proofing we don’t have the community bandwidth to do now. There is at least that possibility. Better than dropping this. I understand the impulse to reduce the configuration space rather than increase it but, looking at the code, that ship sailed ages ago. On these grounds let me carry this forward with ensuring it is optional and a rebase. Maybe there will be objections at next round of review, that would end this, and that could be fine. Or not and we have the option at least. 

Ok.

Rebased patch for master. Passes unit tests.

Also passes hbase-server unit tests with policy set to non-default "TinyLFU" in test-resources hbase-site.xml, although that change is not included:
{code:java}
diff --git a/hbase-server/src/test/resources/hbase-site.xml b/hbase-server/src/test/resources/hbase-site.xml
index 64a1964435..6b332603e1 100644
--- a/hbase-server/src/test/resources/hbase-site.xml
+++ b/hbase-server/src/test/resources/hbase-site.xml
@@ -158,4 +158,8 @@
     <name>hbase.hconnection.threads.keepalivetime</name>
     <value>3</value>
   </property>
+  <property>
+    <name>hfile.block.cache.policy</name>
+    <value>TinyLFU</value>
+  </property>
 </configuration>
{code}

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 14s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green}  0m  0s{color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 4 new or modified test files. {color} |
|| || || || {color:brown} master Compile Tests {color} ||
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 26s{color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  4m 39s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 11m 21s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  2m 29s{color} | {color:green} master passed {color} |
| {color:blue}0{color} | {color:blue} refguide {color} | {color:blue}  6m 46s{color} | {color:blue} branch has no errors when building the reference guide. See footer for rendered docs, which you should manually inspect. {color} |
| {color:green}+1{color} | {color:green} shadedjars {color} | {color:green}  4m 28s{color} | {color:green} branch has no errors when building our shaded downstream artifacts. {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  0s{color} | {color:blue} Skipped patched modules with no Java source: hbase-resource-bundle hbase-shaded . {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  3m 10s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  4m  8s{color} | {color:green} master passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 13s{color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  4m 19s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 11m  1s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} javac {color} | {color:red} 11m  1s{color} | {color:red} root generated 50 new + 1327 unchanged - 50 fixed = 1377 total (was 1377) {color} |
| {color:red}-1{color} | {color:red} checkstyle {color} | {color:red}  2m 22s{color} | {color:red} root: The patch generated 3 new + 55 unchanged - 1 fixed = 58 total (was 56) {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} xml {color} | {color:green}  0m  7s{color} | {color:green} The patch has no ill-formed XML file. {color} |
| {color:blue}0{color} | {color:blue} refguide {color} | {color:blue}  6m  5s{color} | {color:blue} patch has no errors when building the reference guide. See footer for rendered docs, which you should manually inspect. {color} |
| {color:green}+1{color} | {color:green} shadedjars {color} | {color:green}  4m 50s{color} | {color:green} patch has no errors when building our shaded downstream artifacts. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green}  9m  9s{color} | {color:green} Patch does not cause any errors with Hadoop 2.7.4 or 3.0.0. {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  0s{color} | {color:blue} Skipped patched modules with no Java source: hbase-resource-bundle hbase-shaded . {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  3m 19s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  3m 53s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:red}-1{color} | {color:red} unit {color} | {color:red}195m 16s{color} | {color:red} root in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  2m  7s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black}281m 28s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.hbase.snapshot.TestMobExportSnapshot |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hbase:b002b0b |
| JIRA Issue | HBASE-15560 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12963672/HBASE-15560.patch |
| Optional Tests |  dupname  asflicense  javac  javadoc  unit  refguide  xml  shadedjars  hadoopcheck  compile  findbugs  hbaseanti  checkstyle  |
| uname | Linux 287e08967aea 4.4.0-139-generic #165~14.04.1-Ubuntu SMP Wed Oct 31 10:55:11 UTC 2018 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / 5e1e0ca810 |
| maven | version: Apache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-17T18:33:14Z) |
| Default Java | 1.8.0_181 |
| refguide | https://builds.apache.org/job/PreCommit-HBASE-Build/16533/artifact/patchprocess/branch-site/book.html |
| findbugs | v3.1.11 |
| javac | https://builds.apache.org/job/PreCommit-HBASE-Build/16533/artifact/patchprocess/diff-compile-javac-root.txt |
| checkstyle | https://builds.apache.org/job/PreCommit-HBASE-Build/16533/artifact/patchprocess/diff-checkstyle-root.txt |
| refguide | https://builds.apache.org/job/PreCommit-HBASE-Build/16533/artifact/patchprocess/patch-site/book.html |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/16533/artifact/patchprocess/patch-unit-root.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/16533/testReport/ |
| Max. process+thread count | 5202 (vs. ulimit of 10000) |
| modules | C: hbase-common hbase-resource-bundle hbase-server hbase-shaded . U: . |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/16533/console |
| Powered by | Apache Yetus 0.8.0   http://yetus.apache.org |


This message was automatically generated.



the javac complaints I think are fall out from an error-prone upgrade. Duo has a tracking jira HBASE-22100.

I think the Mob test failure is unrelated. Some issues with the mod tests getting looked at over in HBASE-22005.

Thanks [~busbey] . I'll make a pass over the javac and checkstyle results, fix what I can, and attach an updated patch. Working on branch-2 and branch-1 backports as well.

Thanks [~apurtell] and [~busbey]. Can you please upgrade to 2.7.0 when updating the patch? It should be backwards compatible with bug fixes and improvements since the version in the current patch.

Update caffeine dependency version to 2.7.0.

Master patch will apply to branch-2 with no fixups needed.

I'm going to work on a branch-1 patch now but I have concerns because Caffeine bills itself as for Java 8 and up. We must build 1.x releases with Java 7 per compatibility guidelines, although in theory we could have a discussion about making 1.5.0 the cut off of Java 7 support for 1.x. At this time I am not proposing that.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 13s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green}  0m  0s{color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 4 new or modified test files. {color} |
|| || || || {color:brown} master Compile Tests {color} ||
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 13s{color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  3m 46s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 10m 31s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  2m  2s{color} | {color:green} master passed {color} |
| {color:blue}0{color} | {color:blue} refguide {color} | {color:blue}  4m 55s{color} | {color:blue} branch has no errors when building the reference guide. See footer for rendered docs, which you should manually inspect. {color} |
| {color:green}+1{color} | {color:green} shadedjars {color} | {color:green}  4m 13s{color} | {color:green} branch has no errors when building our shaded downstream artifacts. {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  0s{color} | {color:blue} Skipped patched modules with no Java source: hbase-resource-bundle hbase-shaded . {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  2m 55s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  3m 39s{color} | {color:green} master passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 14s{color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  3m 47s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 10m 30s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} javac {color} | {color:red} 10m 30s{color} | {color:red} root generated 51 new + 1326 unchanged - 51 fixed = 1377 total (was 1377) {color} |
| {color:red}-1{color} | {color:red} checkstyle {color} | {color:red}  2m  4s{color} | {color:red} root: The patch generated 2 new + 55 unchanged - 1 fixed = 57 total (was 56) {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} xml {color} | {color:green}  0m  7s{color} | {color:green} The patch has no ill-formed XML file. {color} |
| {color:blue}0{color} | {color:blue} refguide {color} | {color:blue}  5m  1s{color} | {color:blue} patch has no errors when building the reference guide. See footer for rendered docs, which you should manually inspect. {color} |
| {color:green}+1{color} | {color:green} shadedjars {color} | {color:green}  4m 12s{color} | {color:green} patch has no errors when building our shaded downstream artifacts. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green}  7m 53s{color} | {color:green} Patch does not cause any errors with Hadoop 2.7.4 or 3.0.0. {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  0s{color} | {color:blue} Skipped patched modules with no Java source: hbase-resource-bundle hbase-shaded . {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  3m 16s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  3m 42s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:red}-1{color} | {color:red} unit {color} | {color:red}180m  8s{color} | {color:red} root in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  2m 40s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black}257m 16s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.hbase.snapshot.TestExportSnapshotNoCluster |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hbase:b002b0b |
| JIRA Issue | HBASE-15560 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12963775/HBASE-15560.patch |
| Optional Tests |  dupname  asflicense  javac  javadoc  unit  refguide  xml  shadedjars  hadoopcheck  compile  findbugs  hbaseanti  checkstyle  |
| uname | Linux ed0d38309b40 4.4.0-138-generic #164-Ubuntu SMP Tue Oct 2 17:16:02 UTC 2018 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / a93febecc4 |
| maven | version: Apache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-17T18:33:14Z) |
| Default Java | 1.8.0_181 |
| refguide | https://builds.apache.org/job/PreCommit-HBASE-Build/16542/artifact/patchprocess/branch-site/book.html |
| findbugs | v3.1.11 |
| javac | https://builds.apache.org/job/PreCommit-HBASE-Build/16542/artifact/patchprocess/diff-compile-javac-root.txt |
| checkstyle | https://builds.apache.org/job/PreCommit-HBASE-Build/16542/artifact/patchprocess/diff-checkstyle-root.txt |
| refguide | https://builds.apache.org/job/PreCommit-HBASE-Build/16542/artifact/patchprocess/patch-site/book.html |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/16542/artifact/patchprocess/patch-unit-root.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/16542/testReport/ |
| Max. process+thread count | 5389 (vs. ulimit of 10000) |
| modules | C: hbase-common hbase-resource-bundle hbase-server hbase-shaded . U: . |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/16542/console |
| Powered by | Apache Yetus 0.8.0   http://yetus.apache.org |


This message was automatically generated.



TinyLfuBlockCache is implemented with lambdas and method references, which can be replaced with Java 7 compatible idioms. I got partway through this work, but then found that caffeine (which might be bytecode incompatible anyway... probably, but haven't checked) has a runtime dependency on Java 8+ JRE classes Optional and OptionalLong. I stopped when considering rolling my own java.util.Optional. Removing 1.5.0 from fixVersions. This is ready for commit to branch-2 and master.

Caffeine is very much dependent on Java 8 to implement features, e.g. using the newer Map computation methods. I'm sorry if I didn't make that clear enough.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m  9s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green}  0m  0s{color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 4 new or modified test files. {color} |
|| || || || {color:brown} master Compile Tests {color} ||
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 25s{color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  4m 15s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 10m 40s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  2m 23s{color} | {color:green} master passed {color} |
| {color:blue}0{color} | {color:blue} refguide {color} | {color:blue} 16m 39s{color} | {color:blue} branch has no errors when building the reference guide. See footer for rendered docs, which you should manually inspect. {color} |
| {color:green}+1{color} | {color:green} shadedjars {color} | {color:green}  4m 29s{color} | {color:green} branch has no errors when building our shaded downstream artifacts. {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  0s{color} | {color:blue} Skipped patched modules with no Java source: hbase-resource-bundle hbase-shaded . {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  2m 53s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  3m 37s{color} | {color:green} master passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 12s{color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:red}-1{color} | {color:red} mvninstall {color} | {color:red}  3m 37s{color} | {color:red} root in the patch failed. {color} |
| {color:red}-1{color} | {color:red} compile {color} | {color:red} 10m  7s{color} | {color:red} root in the patch failed. {color} |
| {color:red}-1{color} | {color:red} javac {color} | {color:red} 10m  7s{color} | {color:red} root in the patch failed. {color} |
| {color:red}-1{color} | {color:red} checkstyle {color} | {color:red}  2m 24s{color} | {color:red} root: The patch generated 2 new + 55 unchanged - 1 fixed = 57 total (was 56) {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} xml {color} | {color:green}  0m  6s{color} | {color:green} The patch has no ill-formed XML file. {color} |
| {color:blue}0{color} | {color:blue} refguide {color} | {color:blue}  5m 55s{color} | {color:blue} patch has no errors when building the reference guide. See footer for rendered docs, which you should manually inspect. {color} |
| {color:red}-1{color} | {color:red} shadedjars {color} | {color:red}  4m  3s{color} | {color:red} patch has 10 errors when building our shaded downstream artifacts. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red}  3m 39s{color} | {color:red} The patch causes 10 errors with Hadoop v2.7.4. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red}  7m 29s{color} | {color:red} The patch causes 10 errors with Hadoop v3.0.0. {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  0s{color} | {color:blue} Skipped patched modules with no Java source: hbase-resource-bundle hbase-shaded . {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  3m 21s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  3m 38s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:red}-1{color} | {color:red} unit {color} | {color:red}183m 10s{color} | {color:red} root in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  2m  8s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black}272m 45s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.hbase.snapshot.TestExportSnapshotNoCluster |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hbase:b002b0b |
| JIRA Issue | HBASE-15560 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12963781/HBASE-15560.patch |
| Optional Tests |  dupname  asflicense  javac  javadoc  unit  refguide  xml  shadedjars  hadoopcheck  compile  findbugs  hbaseanti  checkstyle  |
| uname | Linux 3695b45f5dbc 4.4.0-131-generic #157~14.04.1-Ubuntu SMP Fri Jul 13 08:53:17 UTC 2018 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / a93febecc4 |
| maven | version: Apache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-17T18:33:14Z) |
| Default Java | 1.8.0_181 |
| refguide | https://builds.apache.org/job/PreCommit-HBASE-Build/16543/artifact/patchprocess/branch-site/book.html |
| findbugs | v3.1.11 |
| mvninstall | https://builds.apache.org/job/PreCommit-HBASE-Build/16543/artifact/patchprocess/patch-mvninstall-root.txt |
| compile | https://builds.apache.org/job/PreCommit-HBASE-Build/16543/artifact/patchprocess/patch-compile-root.txt |
| javac | https://builds.apache.org/job/PreCommit-HBASE-Build/16543/artifact/patchprocess/patch-compile-root.txt |
| checkstyle | https://builds.apache.org/job/PreCommit-HBASE-Build/16543/artifact/patchprocess/diff-checkstyle-root.txt |
| refguide | https://builds.apache.org/job/PreCommit-HBASE-Build/16543/artifact/patchprocess/patch-site/book.html |
| shadedjars | https://builds.apache.org/job/PreCommit-HBASE-Build/16543/artifact/patchprocess/patch-shadedjars.txt |
| hadoopcheck | https://builds.apache.org/job/PreCommit-HBASE-Build/16543/artifact/patchprocess/patch-javac-2.7.4.txt |
| hadoopcheck | https://builds.apache.org/job/PreCommit-HBASE-Build/16543/artifact/patchprocess/patch-javac-3.0.0.txt |
| unit | https://builds.apache.org/job/PreCommit-HBASE-Build/16543/artifact/patchprocess/patch-unit-root.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/16543/testReport/ |
| Max. process+thread count | 5047 (vs. ulimit of 10000) |
| modules | C: hbase-common hbase-resource-bundle hbase-server hbase-shaded . U: . |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/16543/console |
| Powered by | Apache Yetus 0.8.0   http://yetus.apache.org |


This message was automatically generated.



I thought we might straddle the line... get HBase compiling with 7, even though tinylfu would only work with a runtime 8 and up, but that isn't possible if caffiene's jars have a minimum bytecode version that 7 can't handle, and if there are dependencies on 8 JRE classes needed at compile time.

If this is still in place as an optional add-on, any chance we could package it for branch-1 in a way that users running branch-1 on jdk8 could use?

(I'll spend an hour or so trying this out, if branch-1 folks think it's worth the time.)

I see [~busbey] you want to make this an optional module, enabled under the build-with-jdk8 profile? I'm sure it can be done. The last patch here from Ben in 2016 mostly applies to branch-1, but the changes are made in place. We would need to keep only the changes that introduce the FirstLevelBlockCache interface and modify the utility method getL1() to switch policies per configuration.

Have to keep the simple label for selecting the policy, but additional configuration methods could map labels to classnames we can try to load by reflection at startup time. Or make an additional change that simply selects policy by classname.

If the notion of loading blockcache policy by reflection is acceptable, this would need to be forward ported to all active later branches for it to make sense.

You won't do this in an hour. A few, maybe. More like a day including testing I would say.

I had forgotten about the build-with-jdk8 profile because I never use it.

If you want to try that Sean that's fine, but now that I'm thinking about it this way, I might be up for trying it.

that more or less sounds like the approach I'd use.

Maybe with a "hbase-jdk8-for-branch-1" repo or something like it to simplify the maintenance of which artifacts are made with jdk7 vs jdk8, presuming we want the binary version to end up in a branch-1 release. if we want this to be the kind of optional where folks have to build from source then the build-with-jdk8 profile thing would be enough I think.

bq. If you want to try that Sean that's fine, but now that I'm thinking about it this way, I might be up for trying it.

I am happy to miss the opportunity to try making this work. :)

I filed HBASE-22114 for the branch-1 work.

Let's get this committed. I need a +1, please. Or feedback on what more should be done

the build failures for shaded client, hadoop versions, mvninstall, etc all look to be the same thing

{code}

[INFO] --- maven-enforcer-plugin:3.0.0-M2:enforce (check-aggregate-license) @ hbase-shaded-mapreduce ---
[WARNING] Rule 0: org.apache.maven.plugins.enforcer.EvaluateBeanshell failed with message:
License errors detected, for more detail find ERROR in
                    /testptch/hbase/hbase-shaded/hbase-shaded-mapreduce/target/maven-shared-archive-resources/META-INF/LICENSE
[INFO] 
{code}

new from the patch?

I don't think so. I looked at the error message embedded in that LICENSE file and it is related to a recent commit touching error prone. Unless I was misled. Text right above says " ... error prone ..."

I stand corrected about that LICENSE file error. It does come in with this patch, but it's a problem with com.google.errorprone:error_prone_annotations. Must get pulled in transitively. Fix is an addendum to supplemental-models.xml. Adding it now.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 12s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green}  0m  0s{color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 4 new or modified test files. {color} |
|| || || || {color:brown} master Compile Tests {color} ||
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 26s{color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  4m 23s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 10m 40s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  2m 24s{color} | {color:green} master passed {color} |
| {color:blue}0{color} | {color:blue} refguide {color} | {color:blue} 16m 38s{color} | {color:blue} branch has no errors when building the reference guide. See footer for rendered docs, which you should manually inspect. {color} |
| {color:green}+1{color} | {color:green} shadedjars {color} | {color:green}  4m 30s{color} | {color:green} branch has no errors when building our shaded downstream artifacts. {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  0s{color} | {color:blue} Skipped patched modules with no Java source: hbase-resource-bundle hbase-shaded . {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  3m  0s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  3m 38s{color} | {color:green} master passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 13s{color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:red}-1{color} | {color:red} mvninstall {color} | {color:red}  4m  4s{color} | {color:red} root in the patch failed. {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 10m 32s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} javac {color} | {color:red} 10m 32s{color} | {color:red} root generated 1 new + 1376 unchanged - 1 fixed = 1377 total (was 1377) {color} |
| {color:red}-1{color} | {color:red} checkstyle {color} | {color:red}  2m 16s{color} | {color:red} root: The patch generated 2 new + 55 unchanged - 1 fixed = 57 total (was 56) {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} xml {color} | {color:green}  0m  6s{color} | {color:green} The patch has no ill-formed XML file. {color} |
| {color:blue}0{color} | {color:blue} refguide {color} | {color:blue}  5m 49s{color} | {color:blue} patch has no errors when building the reference guide. See footer for rendered docs, which you should manually inspect. {color} |
| {color:red}-1{color} | {color:red} shadedjars {color} | {color:red}  4m 29s{color} | {color:red} patch has 12 errors when building our shaded downstream artifacts. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red}  4m 15s{color} | {color:red} The patch causes 12 errors with Hadoop v2.7.4. {color} |
| {color:red}-1{color} | {color:red} hadoopcheck {color} | {color:red}  8m 49s{color} | {color:red} The patch causes 12 errors with Hadoop v3.0.0. {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  0s{color} | {color:blue} Skipped patched modules with no Java source: hbase-resource-bundle hbase-shaded . {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  3m 17s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  3m 53s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}202m 59s{color} | {color:green} root in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  2m 19s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black}295m 45s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hbase:b002b0b |
| JIRA Issue | HBASE-15560 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12964112/HBASE-15560.patch |
| Optional Tests |  dupname  asflicense  javac  javadoc  unit  refguide  xml  shadedjars  hadoopcheck  compile  findbugs  hbaseanti  checkstyle  |
| uname | Linux 5c7ed693b3c3 4.4.0-131-generic #157~14.04.1-Ubuntu SMP Fri Jul 13 08:53:17 UTC 2018 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / 541f223de4 |
| maven | version: Apache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-17T18:33:14Z) |
| Default Java | 1.8.0_181 |
| refguide | https://builds.apache.org/job/PreCommit-HBASE-Build/16578/artifact/patchprocess/branch-site/book.html |
| findbugs | v3.1.11 |
| mvninstall | https://builds.apache.org/job/PreCommit-HBASE-Build/16578/artifact/patchprocess/patch-mvninstall-root.txt |
| javac | https://builds.apache.org/job/PreCommit-HBASE-Build/16578/artifact/patchprocess/diff-compile-javac-root.txt |
| checkstyle | https://builds.apache.org/job/PreCommit-HBASE-Build/16578/artifact/patchprocess/diff-checkstyle-root.txt |
| refguide | https://builds.apache.org/job/PreCommit-HBASE-Build/16578/artifact/patchprocess/patch-site/book.html |
| shadedjars | https://builds.apache.org/job/PreCommit-HBASE-Build/16578/artifact/patchprocess/patch-shadedjars.txt |
| hadoopcheck | https://builds.apache.org/job/PreCommit-HBASE-Build/16578/artifact/patchprocess/patch-javac-2.7.4.txt |
| hadoopcheck | https://builds.apache.org/job/PreCommit-HBASE-Build/16578/artifact/patchprocess/patch-javac-3.0.0.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/16578/testReport/ |
| Max. process+thread count | 5147 (vs. ulimit of 10000) |
| modules | C: hbase-common hbase-resource-bundle hbase-server hbase-shaded . U: . |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/16578/console |
| Powered by | Apache Yetus 0.8.0   http://yetus.apache.org |


This message was automatically generated.



org.checkerframework is not a dependency of this patch, not sure where the shaded jars or hadoopcheck issue is coming in from.

The reported javac issue is not from this patch. Some other changes to master have broken precommit in this regard. I think the recent error-prone work. 

The checkstyle report only flags ImportOrder. As stated on other issues, no matter where I move them this happens. I tried to move them here and got an ImportOrder warning upon both attempts. Can we disable ImportOrder warnings, please?

I've been contributing to this project for more than ten years and am about ready to give up it is so difficult now.

[~apurtell], I'm sorry for the hassle. In [2.7.0|https://github.com/ben-manes/caffeine/releases/tag/v2.7.0] we did migrate from JSR-305 annotations to ErrorProne's and CheckerFramework's. This was to be compatible Java 9's modules, which doesn't support split packages. I had forgotten HBase's need to handle all transitive dependencies explicitly. You could downgrade to {{2.6.2}} if this is too much trouble.

Oh thanks [~ben.manes]. Sorry, I came back to this after an extended context switch and forgot that the caffiene version was recently changed. Let me downgrade to 2.6.2 and try again.

Good news is I've been testing TinyLFU under load in a small cluster, with and without chaos, and it's stable.

That's wonderful, thank you.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 31s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green}  0m  0s{color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 4 new or modified test files. {color} |
|| || || || {color:brown} master Compile Tests {color} ||
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 25s{color} | {color:blue} Maven dependency ordering for branch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  4m 23s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 10m 39s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  2m 25s{color} | {color:green} master passed {color} |
| {color:blue}0{color} | {color:blue} refguide {color} | {color:blue} 16m 43s{color} | {color:blue} branch has no errors when building the reference guide. See footer for rendered docs, which you should manually inspect. {color} |
| {color:green}+1{color} | {color:green} shadedjars {color} | {color:green}  5m  8s{color} | {color:green} branch has no errors when building our shaded downstream artifacts. {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  0s{color} | {color:blue} Skipped patched modules with no Java source: hbase-resource-bundle hbase-shaded . {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  3m 21s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  3m 44s{color} | {color:green} master passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:blue}0{color} | {color:blue} mvndep {color} | {color:blue}  0m 13s{color} | {color:blue} Maven dependency ordering for patch {color} |
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  4m 18s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green} 11m 42s{color} | {color:green} the patch passed {color} |
| {color:red}-1{color} | {color:red} javac {color} | {color:red} 11m 42s{color} | {color:red} root generated 1 new + 1376 unchanged - 1 fixed = 1377 total (was 1377) {color} |
| {color:red}-1{color} | {color:red} checkstyle {color} | {color:red}  2m 46s{color} | {color:red} root: The patch generated 2 new + 55 unchanged - 1 fixed = 57 total (was 56) {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} xml {color} | {color:green}  0m  6s{color} | {color:green} The patch has no ill-formed XML file. {color} |
| {color:blue}0{color} | {color:blue} refguide {color} | {color:blue}  5m 56s{color} | {color:blue} patch has no errors when building the reference guide. See footer for rendered docs, which you should manually inspect. {color} |
| {color:green}+1{color} | {color:green} shadedjars {color} | {color:green}  4m 45s{color} | {color:green} patch has no errors when building our shaded downstream artifacts. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 10m 16s{color} | {color:green} Patch does not cause any errors with Hadoop 2.7.4 or 3.0.0. {color} |
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  0s{color} | {color:blue} Skipped patched modules with no Java source: hbase-resource-bundle hbase-shaded . {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  3m 38s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  4m 27s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}309m 48s{color} | {color:green} root in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  2m 14s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black}408m 53s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hbase:b002b0b |
| JIRA Issue | HBASE-15560 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12964767/HBASE-15560.patch |
| Optional Tests |  dupname  asflicense  javac  javadoc  unit  refguide  xml  shadedjars  hadoopcheck  compile  findbugs  hbaseanti  checkstyle  |
| uname | Linux 3553300a764e 4.4.0-138-generic #164~14.04.1-Ubuntu SMP Fri Oct 5 08:56:16 UTC 2018 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / cd2374a7f0 |
| maven | version: Apache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-17T18:33:14Z) |
| Default Java | 1.8.0_181 |
| refguide | https://builds.apache.org/job/PreCommit-HBASE-Build/16635/artifact/patchprocess/branch-site/book.html |
| findbugs | v3.1.11 |
| javac | https://builds.apache.org/job/PreCommit-HBASE-Build/16635/artifact/patchprocess/diff-compile-javac-root.txt |
| checkstyle | https://builds.apache.org/job/PreCommit-HBASE-Build/16635/artifact/patchprocess/diff-checkstyle-root.txt |
| refguide | https://builds.apache.org/job/PreCommit-HBASE-Build/16635/artifact/patchprocess/patch-site/book.html |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/16635/testReport/ |
| Max. process+thread count | 4995 (vs. ulimit of 10000) |
| modules | C: hbase-common hbase-resource-bundle hbase-server hbase-shaded . U: . |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/16635/console |
| Powered by | Apache Yetus 0.8.0   http://yetus.apache.org |


This message was automatically generated.



After the downgrade this looks better.

Any concerns for commit to branch-2s and master now?

/cc [~busbey]

Minor: 
-      LOG.info(BlockCacheUtil.toJSON(e.getKey(), e.getValue()));
+      //LOG.info(BlockCacheUtil.toJSON(e.getKey(), e.getValue()));
Not sure why this was commented out, can we either add this back or remove? We shouldn't be committing commented out code.

Also the test 'fixes' for existing code seem to be hacks (only testing if it is a LRUBlockCache). Is there additional functionality needed to get those cases working? I'm fine if we want to do this with a follow-up JIRA. It will certainly block us ever enabling this by default.

I am fine enabling this as an option though I will agree with Stack that fewer config knobs is better. I think at this point, we can't conclusively prove that this implementation will be consistently better than the SLRU cache with HBase. In any case, I think it will require a significant amount of work to get it to the state where it can be enabled as the default implementation. I don't like that this feature won't have an attentive 'owner' (if I'm reading the previous comments correctly), but it does look to have at least the potential of a positive perf impact. If nobody is using it/has thoroughly tested it in production within a major release, I would suggest we remove it.

Overall, I'm a hesitant +1 :) If no one else comes within a day, feel free to commit it.

{quote}Also the test 'fixes' for existing code seem to be hacks
{quote}
I dispute this term 'hack'. Previously the tests expected the first level cache to always be LRUBlockCache. That is not invalid when there is only one choice but once there is more than one choice it is a bug, a bug in the test. I don't think we should require TinyLFU integrator to rewrite all of the tests with this old assumption, so what I've done is exclude those cases when TinyLFU is L1, and only then, so there is no loss of coverage for the default case.

There can be more coverage added later for TinyLFU. A follow up issue would be fine.

Thanks for pointing out the commented out code. I can remove that upon commit. I've opted to remove this logging from the test because it seems of little value rather than also make it conditional on which blockcache version is installed. If you disagree we could do it the other way.

Thanks for the hesitant +1 :)

{quote}I think it will require a significant amount of work to get it to the state where it can be enabled as the default implementation
{quote}
I ran a test cluster with TinyLFU enabled for a week and subjected it to various tests loads from YCSB, PE, LTT, and ITBLL, and there were no observed issues.

What is this "significant amount" of work?  It is kind of an evidence free assertion, but perhaps you can clarify.

[~apurtell] I am making claim that based on the state of the patch I looked at, not any functional/load testing. Perhaps it will be less than 'significant', but the fact that tests were changed to only test LRUCache (or only assert data is correct if LRUCache) was concerning to me. That indicates to me that there is some missing functionality in the TinyLFU (or a miss in the first level cache implementation).... however...
Looking again at the test changes that were done... it does indeed look like the tests themselves are at fault (depending on functionality that is questionable to expose), but I do think that the First level cache should include a clearCache() mechanism to ensure we are operating on an empty cache. Regardless, it seems like their is work around decided what is the functionality we expect from the First Level Cache and rewrite tests to only depend on that contract.

Given your testing and another look at the actual reasons the tests were changed to only test LRU behavior, I am less hesitant. 

{quote}but the fact that tests were changed to only test LRUCache (or only assert data is correct if LRUCache) was concerning to me. That indicates to me that there is some missing functionality in the TinyLFU
{quote}
You can't make that assumption based on these changes.

What I did is change the default from "LRU" to "TinyLFU" and then execute the unit tests. The default remains "LRU". An invocation of the unit test suite will test "LRU". During the modified execution I found some places where the tests expect LruBlockCache. That assumption is  invalid when L1 is TinyLFU. So, where that assumption is made I made it conditional on the actual class. Nothing else has changed. This was done to exercise TinyLFU as much as possible given the complete unit test suite we have available. This might imply TinyLFU needs more test coverage, or it might not, it depends on the unit test. You will need to make a closer examination.

As to the rest of your points we are in agreement.

Edit: The TinyLFU contribution comes with its own unit test which is executed unconditionally no matter the L1 setting. This is not a comprehensive suite of all blockcache functionality, though. It could be a useful follow up item to refactor all blockcache tests to make them parameterized, and select "LRU" L1 for one invocation; then "TinyLFU" L1 for the second invocation. This follow up can be readily done on branch-2 and up. On branch-1, because the compilation of TinyLFU is conditional and a separate module it seems more complicated and maybe difficult to do (some kind of conditional test if tinylfu module and jar is in the test classpath maybe?).

I had been waiting to review this because before you said any changes in structure needed for branch-1 would also be reflected in this patch. is that no longer the case?

There is no need to break out TinyLFU to a separate module, right? Because branch-2 and up specifies a minimum JRE/JDK of Java 8. I.e. it was never the case that I understood the branch-1 specific changes should be forward ported as it were

I don't think the changes required to make it work with branch-1 should be forward ported unless it captures how we would like users to be able to use the TinyLFU implementation (which I don't think it does).

Andrew, this was my take on the testing as well. It is sufficient for now, but will likely need to be enhanced when we would consider making TinyLFU the default. Sorry if my wording made it sound like there were current functionality breaks, more like we can't be sure there wouldn't be regressions with the current testing in place. Definitely something that can happen after this gets in though as I've already stated.

[~zyork] Sorry, that was my misunderstanding. I agree, if TinyLFU were to be made the default each change in these tests will need to be individually evaluated for missing coverage. Even if TinyLFU is not made default we can still do the parameterized testing as a follow up.

okay in that case I'm +1

Thanks I will try to commit this today

Pushed to master and branch-2.

Follow subtask for (eventual) branch-1 backport.

Thank you [~apurtell], [~busbey], [~stack], [~ebortnik], and [~eshcar]!

Congratulations!! Great to see this finally get in :)

Results for branch master
	[build #941 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/master/941/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/master/941//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/master/941//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/master/941//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch branch-2
	[build #1826 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/branch-2/1826/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2/1826//General_Nightly_Build_Report/]




(/) {color:green}+1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2/1826//JDK8_Nightly_Build_Report_(Hadoop2)/]


(/) {color:green}+1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2/1826//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


