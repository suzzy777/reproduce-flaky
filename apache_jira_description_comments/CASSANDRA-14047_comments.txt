While looking into this the only error I came across was related to joining nodes begin sent read messages for column families they didn't know about yet. Which look like ...


{noformat}
WARN  [MessagingService-NettyInbound-Thread-3-1] 2017-11-28 12:40:41,123 MessageInHandler.java:273 - Got message from unknown table while reading from socket; closing
org.apache.cassandra.exceptions.UnknownTableException: Couldn't find table with id 5bc52802-de25-35ed-aeab-188eecebb090. If a table was just created, this is likely due to the sch
emanot being fully propagated.  Please wait for schema agreement on table creation.
        at org.apache.cassandra.schema.Schema.getExistingTableMetadata(Schema.java:474) ~[main/:na]
        at org.apache.cassandra.db.ReadCommand$Serializer.deserialize(ReadCommand.java:670) ~[main/:na]
        at org.apache.cassandra.db.ReadCommand$Serializer.deserialize(ReadCommand.java:606) ~[main/:na]
        at org.apache.cassandra.net.MessageIn.read(MessageIn.java:139) ~[main/:na]
        at org.apache.cassandra.net.async.MessageInHandler.decode(MessageInHandler.java:178) ~[main/:na]
        at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:489) [netty-all-4.1.14.Final.jar:4.1.14.Final]

{noformat}

...followed by 
{noformat}
WARN  [MessagingService-NettyInbound-Thread-3-1] 2017-11-28 12:40:41,193 MessageInHandler.java:277 - Unexpected exception caught in inbound channel pipeline from /127.0.0.1:41522
java.lang.ArrayIndexOutOfBoundsException: 90
        at org.apache.cassandra.db.ReadCommand$Serializer.deserialize(ReadCommand.java:657) ~[main/:na]
        at org.apache.cassandra.db.ReadCommand$Serializer.deserialize(ReadCommand.java:606) ~[main/:na]
        at org.apache.cassandra.net.MessageIn.read(MessageIn.java:139) ~[main/:na]
        at org.apache.cassandra.net.async.MessageInHandler.decode(MessageInHandler.java:178) ~[main/:na]
        at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:489) [netty-all-4.1.14.Final.jar:4.1.14.Final]
        at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:428) [netty-all-4.1.14.Final.jar:4.1.14.Final]
        at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:265) [netty-all-4.1.14.Final.jar:4.1.14.Final]
        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) [netty-all-4.1.14.Final.jar:4.1.14.Final]
{noformat}

...as C* appears to get stuck (at least for a good amount of time) in a loop where decode() is called (after the initial exception), ReadCommand() throws an exception(due to the read index into the buffer being left in an incorrect state following the initial exception) each time which again calls ctx.close() on the channel before this loop continues. 

I probably don't have enough netty knowledge to propose a good fix for this but [this|https://github.com/apache/cassandra/compare/trunk...vincewhite:debug-1] appeared to help, though I didn't get time to look too deeply into the new behaviour. Maybe someone like [~jasobrown] would have a more correct fix. 

I suspect this is probably affects most of these consistency tests. 

[~VincentWhite] Yeah, I suspect you are correct here about it being a regression due to CASSANDRA-8457. Can you give this a quick run against 3.11, just to confirm?

On 3.11 I saw still see the {{UnknownColumnFamilyException}}. Which does cause the test to fail because it triggers the "Unexpected error in log" assertion error when tearing down the test. Strangely the test passes and doesn't hit this on trunk with my patch even though the logs still contains the UnknownColumnFamilyException (not sure if thats related to C* version specific config in dtests or something). 

 So the netty issue is unrelated to the flakiness of this test, not sure if it should have its own ticket? I've attached a few sets of debug logs that demonstrate the various behaviours with/without netty and with/without my patch from the previous comment. 

In regard to the test itself. It appears that the reads that are triggering the {{UnknownColumnFamilyException}} are actually from the initialisation of CassandraRoleManager since they are for {{system_auth.roles}} (I believe {{hasExistingRoles()}} in {{setupDefaultRole()}}), I'm not exactly sure what the best way to resolve this is. This error isn't an issue for the role manager itself as it will simply retry later and it doesn't affect the tests apart from triggering the unexpected error in log. For the tests I guess we could leave a gap between starting nodes. But it's probably more correct to just ignore these errors. I've tested that [https://github.com/vincewhite/cassandra-dtest/commit/7e48704713123a253a914802975f7163474ede9b] this resolves the failures and I assume it's probably safe to ignore this error for all of the tests in consistency_test but I haven't looked into that at this stage. 

Also these tests don't do anything fancy in regard to how they start the cluster, they just use the normal {{cluster.start(wait_for_binary_proto=True, wait_other_notice=True)}} call so I guess this could causes random failures in a lot of tests.

Seems like this might be no longer an issue.

