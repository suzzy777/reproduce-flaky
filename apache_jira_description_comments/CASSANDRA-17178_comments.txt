I plan to pick this up next week, so will assign then unless someone picks up before then.

Testing this out on j8 to make sure I can run things before doing j11, and here is what I see

Warnings about serialVersionUID; should these be build failures?

{code}
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.security.ThreadAwareSecurityManager$1
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.utils.concurrent.Semaphore$Standard
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.metrics.Sampler$Sample
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.distributed.shared.VersionedApplicationState
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.concurrent.SingleThreadExecutorPlus$AtLeastOnce
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.net.ForwardingInfo
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.distributed.impl.MessageImpl
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.distributed.impl.UnsafeGossipHelper$HostInfo
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.service.paxos.ContentionStrategy$TimeLimitedLatencySupplier
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.utils.concurrent.FutureCombiner$Listener
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.streaming.SessionInfo
[junit-timeout] No serialVersionUID on Serializable class org.apache.cassandra.streaming.StreamState
{code}

Tests run differently than normal tests, and this is due to the need for the agent... ATM the tests don't take a long time so this is fine, but if we start to add more simulator tests or want to run them longer we may want to switch to testclasslist to simplify CI... that would require we rethink about a few things...

{code}
$ ant test-simulator-dtest
...
BUILD SUCCESSFUL
Total time: 1 minute 23 seconds
{code}

Doesn't work on M1 Mac's

{code}
[junit-timeout] The stack size specified is too small, Specify at least 384k
[junit-timeout] Error: Could not create the Java Virtual Machine.
[junit-timeout] Error: A fatal exception has occurred. Program will exit.
{code}

They tests also can't be run in IntelliJ...

patch makes idk 11/17 work for simulator. For JDK 17 we can not "build" but if you build with 8 you can run with JDK 17 just fine now with this patch

[~e.dimitrova] [~benedict] mind taking a look?

Removed jdk17 support for now as we don't support JDK 17 normally.

{code}
$ ant.sh --jvm 8 test-simulator-dtest
...
test-simulator-dtest:
...
[junit-timeout] Testsuite: org.apache.cassandra.simulator.test.MonitorMethodTransformerTest
[junit-timeout] Testsuite: org.apache.cassandra.simulator.test.MonitorMethodTransformerTest Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 11.274 sec
...
[junit-timeout] Testsuite: org.apache.cassandra.simulator.test.ShortPaxosSimulationTest
[junit-timeout] Testsuite: org.apache.cassandra.simulator.test.ShortPaxosSimulationTest Tests run: 2, Failures: 0, Errors: 0, Skipped: 1, Time elapsed: 56.589 sec
...
[junit-timeout] Testcase: selfReconcileTest(org.apache.cassandra.simulator.test.ShortPaxosSimulationTest):SKIPPED: fails due to OOM DirectMemory - unclear why
[junit-timeout] Picked up _JAVA_OPTIONS: -Djava.net.preferIPv4Stack=true
[junit-timeout] Testsuite: org.apache.cassandra.simulator.test.TrivialSimulationTest
[junit-timeout] Testsuite: org.apache.cassandra.simulator.test.TrivialSimulationTest Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 26.714 sec
...
BUILD SUCCESSFUL
Total time: 2 minutes 9 seconds
{code}

{code}
$ ant.sh --jvm 11 test-simulator-dtest
...
BUILD SUCCESSFUL
Total time: 2 minutes 21 seconds
{code}

j11 build is passing https://app.circleci.com/pipelines/github/dcapwell/cassandra/1702/workflows/96d1b85a-9b68-4f82-a3be-99ad3aeaf3d6/jobs/14448

[~benedict] [~e.dimitrova] I don't see more comments in the PR, can you review again?

Got +1 from Benedict, waiting on Ekaterina

I am also overall +1, just a few nits plus we need rebase and CI run testing the suite and also confirming that new/changed tests will be picked up and pushed in a loop pre-commit so we check in advance for flaky tests. 

*NOTE:* I am not expert in the Simulator code but from jdk perspective the changes done make sense to me. Whether there are other areas that might need attention - I rely on the tests and Benedict as author who knows his code :-) 

Thinking further about this one, I didn't see any particular test of the new _makePublic_ method. I know that simulator tests are passing, but do we want to add a particular test? 

bq.  I know that simulator tests are passing, but do we want to add a particular test?

I don't see much of a benefit, that would be testing the test.

[~e.dimitrova] fixed all comments, can you look again?

org.apache.cassandra.simulator.test.ShortPaxosSimulationTest was flakey in J8 but not j11

+1 on the PR, thank you.
{quote}org.apache.cassandra.simulator.test.ShortPaxosSimulationTest was flakey in J8 but not j11
{quote}
As long as it is flaky also without the patch and we follow up by opening a ticket for the community to look at the flaky test, all good :)

Please get rid of the hunk messages pre-commit as I mentioned in Slack. Regenerating the patches without any actual changes to them will get rid of that list of ugly warnings when people run .generate.sh with the flags. Just try to apply them to the files to see they do not change anything after the regeneration. Thanks

Easy recipe(copy-paste) to do that:

 
{code:java}
#. apply old patches (with hunk messages)
patch -o config-2_1.yml.MIDRES config-2_1.yml config-2_1.yml.mid_res.patch
patch -o config-2_1.yml.HIGHRES config-2_1.yml config-2_1.yml.high_res.patch
#. generate new patches
diff -u config-2_1.yml config-2_1.yml.HIGHRES > config-2_1.yml.high_res.patch
diff -u config-2_1.yml config-2_1.yml.MIDRES > config-2_1.yml.mid_res.patch
#. verify that the new patches generate the same files and cleanup
./generate.sh -a
{code}
 

Updated patches and saw

{code}
$ git st
On branch CASSANDRA-17178
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   config-2_1.yml.high_res.patch
        modified:   config-2_1.yml.mid_res.patch
{code}

ran generate

{code}
$ ./generate.sh -a
Generating new config.yml file with low resources and LOWRES/MIDRES/HIGHRES templates from config-2_1.yml
gpatching file ./config-2_1.yml
patching file ./config-2_1.yml
{code}

I did have to modify each yaml it generates as the bug I reported isn't fixed, so it adds non-yaml... once I cleanup the error msg in the output I get

{code}
$ git st
On branch CASSANDRA-17178
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   config-2_1.yml.high_res.patch
        modified:   config-2_1.yml.mid_res.patch
        modified:   config.yml
{code}

config.yml is different as it overrides my changes to enable CI, main takeaway is that LOW/MID/HIGH are not changed

Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-17178-trunk-85E6B0BD-18BA-4BCA-BCDB-990D442D1248]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-17178-trunk-85E6B0BD-18BA-4BCA-BCDB-990D442D1248]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2102/]|


