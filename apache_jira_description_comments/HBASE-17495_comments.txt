With HBASE-17407, the test still failed:
{code}
testFlushCacheWhileScanning(org.apache.hadoop.hbase.regionserver.TestHRegionWithInMemoryFlush)  Time elapsed: 0.314 sec  <<< FAILURE!
java.lang.AssertionError: toggle=falsei=420 ts=1485208951718 expected:<42> but was:<40>
  at org.junit.Assert.fail(Assert.java:88)
  at org.junit.Assert.failNotEquals(Assert.java:834)
  at org.junit.Assert.assertEquals(Assert.java:645)
  at org.apache.hadoop.hbase.regionserver.TestHRegion.testFlushCacheWhileScanning(TestHRegion.java:3533)
{code}

In above run, I saw (logged in response to InterruptedException):
{code}
2017-01-23 22:02:31,719 DEBUG [FlushThread] wal.WALKey(105): mvcc=MultiVersionConcurrencyControl{readPoint=475, writePoint=476}, writeEntry=476, false latch=0
java.lang.Exception: Stack trace
  at java.lang.Thread.dumpStack(Thread.java:1329)
  at org.apache.hadoop.hbase.wal.WALKey.getWriteEntry(WALKey.java:107)
  at org.apache.hadoop.hbase.regionserver.wal.WALUtil.doFullAppendTransaction(WALUtil.java:156)
  at org.apache.hadoop.hbase.regionserver.wal.WALUtil.writeFlushMarker(WALUtil.java:80)
  at org.apache.hadoop.hbase.regionserver.HRegion.internalPrepareFlushCache(HRegion.java:2470)
  at org.apache.hadoop.hbase.regionserver.HRegion.internalFlushcache(HRegion.java:2342)
  at org.apache.hadoop.hbase.regionserver.HRegion.internalFlushcache(HRegion.java:2313)
  at org.apache.hadoop.hbase.regionserver.HRegion.flushcache(HRegion.java:2204)
  at org.apache.hadoop.hbase.regionserver.HRegion.flush(HRegion.java:2130)
  at org.apache.hadoop.hbase.regionserver.TestHRegion$FlushThread.run(TestHRegion.java:3587)
{code}
But the assertion failure could happen without any InterruptedException.
See 17495-testHRegionWithInMemoryFlush-output-2.0123

As of commit f037f230fd5a0b6f28e68b02f47efeb4dbc22694, the testFlushCacheWhileScanning sometimes fails
{code}
testFlushCacheWhileScanning(org.apache.hadoop.hbase.regionserver.TestHRegionWithInMemoryFlush)  Time elapsed: 0.208 sec  <<< FAILURE!
java.lang.AssertionError: toggle=truei=330 ts=1487795835153 expected:<33> but was:<31>
  at org.junit.Assert.fail(Assert.java:88)
  at org.junit.Assert.failNotEquals(Assert.java:834)
  at org.junit.Assert.assertEquals(Assert.java:645)
  at org.apache.hadoop.hbase.regionserver.TestHRegion.testFlushCacheWhileScanning(TestHRegion.java:3533)
{code}
Test output in TestHRegionWithInMemoryFlush-out.0222.tar.gz

[~anastas], [~eshcar] - FYI.
I can check this if you are not looking in to this.

[~ram_krish], if you can investigate this it would be great. Because we can not recreate the problem and thus we can not debug it. Thanks!
We can retake the investigation if you give us some more concrete hints.

I think we need to check this before making Compacting Memstore as default in 2.0.
Trying to run this test but it passes every time. Need to see. 
[~tedyu]
Does the default memstore counterpart of this TestHregion also fail intermittently? 

When Compacting Memstore is turned on, TestHRegionWithInMemoryFlush would get more exposure.

Let me know if you want to add debug log anywhere.
It should be easy to reproduce the test failure looping the test.

I have run TestHRegion 170 iterations - all passed.

I see. I ran TestHRegionWithInMemoryFlush around 10 times and none of them failed. Infact I am using your logs that are attached to see if there is any thing visible. But not able to find one directly.
Can you paste the command that you use to loop thro the tests?

Here is the script I used to loop tests:
{code}
#!/bin/bash
# script to run test(s) repeatedly
# usage: ./runtest.sh <number of repetitions> <name of test> <name of test>...
#
numIter=$1
shift
numTests=$#
echo "Number of tests: $numTests"

for (( i = 1; i <= $numTests; i++ ))
do
  test[$i]=$1; shift;
done
echo "Running tests..."
for ((  i = 1 ;  i <= $numIter; i++  ))
do
  #Now loop through each test
  for (( j = 1; j <= $numTests; j++ ))
  do
    nice -10 mvn $MVN_SECURE test -P localTests,skipSparkTests -Dtest=${test[$j]}
    if [ $? -ne 0 ]; then
      echo "${test[$j]} failed, iteration: $i"
      exit 1
    fi
  done
done
{code}

17495-dbg.txt logs before throwing assertion.
This helps correlate assertion with point in time in the test output

Thanks [~tedyu]. Will have a look at it tomorrow.

The following test failure was based on commit 4a5eba5e59591a8be06f6a3bf1b7f83a63bbec67 :
{code}
org.apache.hadoop.hbase.regionserver.TestHRegionWithInMemoryFlush  Time elapsed: 588.948 sec  <<< ERROR!
org.junit.runners.model.TestTimedOutException: test timed out after 10 minutes
  at java.lang.Object.wait(Native Method)
  at java.lang.Thread.join(Thread.java:1245)
  at java.lang.Thread.join(Thread.java:1319)
  at org.apache.hadoop.hbase.regionserver.TestHRegion.testWritesWhileGetting(TestHRegion.java:3889)
  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
  at java.lang.reflect.Method.invoke(Method.java:498)
...
org.apache.hadoop.hbase.regionserver.TestHRegionWithInMemoryFlush  Time elapsed: 588.948 sec  <<< ERROR!
java.lang.Exception: Appears to be stuck in thread Thread-160
  at java.lang.Throwable.getStackTraceElement(Native Method)
  at java.lang.Throwable.getOurStackTrace(Throwable.java:827)
  at java.lang.Throwable.getStackTrace(Throwable.java:816)
  at sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
  at java.lang.reflect.Method.invoke(Method.java:498)
  at org.apache.log4j.spi.LocationInfo.<init>(LocationInfo.java:139)
  at org.apache.log4j.spi.LoggingEvent.getLocationInformation(LoggingEvent.java:253)
  at org.apache.log4j.helpers.PatternParser$ClassNamePatternConverter.getFullyQualifiedName(PatternParser.java:555)
  at org.apache.log4j.helpers.PatternParser$NamedPatternConverter.convert(PatternParser.java:528)
  at org.apache.log4j.helpers.PatternConverter.format(PatternConverter.java:65)
  at org.apache.log4j.PatternLayout.format(PatternLayout.java:506)
  at org.apache.log4j.WriterAppender.subAppend(WriterAppender.java:310)
  at org.apache.log4j.WriterAppender.append(WriterAppender.java:162)
  at org.apache.log4j.AppenderSkeleton.doAppend(AppenderSkeleton.java:251)
  at org.apache.log4j.helpers.AppenderAttachableImpl.appendLoopOnAppenders(AppenderAttachableImpl.java:66)
  at org.apache.log4j.Category.callAppenders(Category.java:206)
  at org.apache.log4j.Category.forcedLog(Category.java:391)
  at org.apache.log4j.Category.log(Category.java:856)
  at org.apache.commons.logging.impl.Log4JLogger.debug(Log4JLogger.java:155)
  at org.apache.hadoop.hbase.regionserver.compactions.ExploringCompactionPolicy.applyCompactionPolicy(ExploringCompactionPolicy.java:122)
  at org.apache.hadoop.hbase.regionserver.compactions.ExploringCompactionPolicy.applyCompactionPolicy(ExploringCompactionPolicy.java:56)
  at org.apache.hadoop.hbase.regionserver.compactions.RatioBasedCompactionPolicy.createCompactionRequest(RatioBasedCompactionPolicy.java:110)
  at org.apache.hadoop.hbase.regionserver.compactions.SortedCompactionPolicy.selectCompaction(SortedCompactionPolicy.java:87)
  at org.apache.hadoop.hbase.regionserver.DefaultStoreEngine$DefaultCompactionContext.select(DefaultStoreEngine.java:118)
  at org.apache.hadoop.hbase.regionserver.HStore.requestCompaction(HStore.java:1637)
  at org.apache.hadoop.hbase.regionserver.HStore.requestCompaction(HStore.java:1601)
  at org.apache.hadoop.hbase.regionserver.HStore.requestCompaction(HStore.java:1595)
  at org.apache.hadoop.hbase.regionserver.HRegion.compact(HRegion.java:1905)
  at org.apache.hadoop.hbase.regionserver.TestHRegion$7.doAnAction(TestHRegion.java:3835)
  at org.apache.hadoop.hbase.MultithreadedTestUtil$RepeatingTestThread.doWork(MultithreadedTestUtil.java:149)
  at org.apache.hadoop.hbase.MultithreadedTestUtil$TestThread.run(MultithreadedTestUtil.java:124)
{code}

Test output was 3119663809 bytes long.

Here is truncated output - "Failed getting lock, row=row0" repeated toward the end.

I looked into the output. The above failure could  be due to the other test testWritesWhileGetting. So overall the TestHRegionWithInMemoryFlush has some issues and depends on the test that fails. 

Not able to generate failure even after running the script for 20 times. Also in the trunk build this test is not in the flaky tests list which means it has been consistent there? 

This happened on master branch build today:

https://builds.apache.org/job/HBase-Trunk_matrix/2597/jdk=JDK%201.8%20(latest),label=Hadoop/testReport/junit/org.apache.hadoop.hbase.regionserver/TestHRegionWithInMemoryFlush/testWritesWhileRollWriter/

It is not the testFlushCacheWhileScanning. This is some other test and it is due to WAL not able to process the  sync calls..

Test failure based on commit 613bcb3622ecb1783c030f34ea2975280e1c43c1
{code}
testFlushCacheWhileScanning(org.apache.hadoop.hbase.regionserver.TestHRegionWithInMemoryFlush)  Time elapsed: 0.389 sec  <<< FAILURE!
java.lang.AssertionError: toggle=falsei=660 ts=1488407328832 expected:<66> but was:<62>
  at org.junit.Assert.fail(Assert.java:88)
  at org.junit.Assert.failNotEquals(Assert.java:834)
  at org.junit.Assert.assertEquals(Assert.java:645)
  at org.apache.hadoop.hbase.regionserver.TestHRegion.testFlushCacheWhileScanning(TestHRegion.java:3536)
{code}
You can find the message of assertion in the test output

Hm - it timed out here:
https://builds.apache.org/job/PreCommit-HBASE-Build/7118/artifact/patchprocess/patch-unit-hbase-server.txt

