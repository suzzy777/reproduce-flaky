[~joemcdonnell], you've investigated this failure before, assigning to you.

[~joemcdonnell] will you have time to look at this? I don't think you have too much knowledge specific to this problem so we can find another -victim- volunteer if you are overloaded.

I wonder if there's some connection with IMPALA-5999 or IMPALA-6001 - there seems to be a cluster of bugs related to CREATE FUNCTION DDL

[~tarmstrong] I'm a bit overloaded at the moment. I would appreciate if we could find someone else. The last failure was easy to track down from commit history. This looks more complicated.

A couple thoughts for trying to reproduce this:
1. I think the query that is doing a union using different UDFs could be extended to add dozens more unions. If it is a concurrency issue, that might make it a bit more stressful.
2. I'm going to run UDFs in a loop and add a test dimension so that it is running several copies of this test at the same time.

I'm thinking about what diagnostics would be useful to have if we see this again.

[~vercego] do you have time to look into this flaky test? We've been seeing a lot of flaky test failures so trying to load balance them a bit to hopefully bring them more under control.

Will look into it.

We saw this in another form here: https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/574/

I've been unable to repro this locally, so thanks for pointing me to the failure from 11/3. Just recording some things here from the log that I'll need to check on.

Plenty of successful examples loading that UDF from this run, followed by the lib's removal, then finally followed by the exception:

....
I1103 20:52:32.952381 67086 UdfExecutor.java:611] Loaded UDF 'org.apache.impala.TestUdf' from /tmp/impala-hive-udfs.35849.5.jar
I1103 20:52:32.955081 67096 UdfExecutor.java:582] Loading UDF 'org.apache.impala.TestUdf' from /tmp/impala-hive-udfs.35849.5.jar
I1103 20:52:32.956140 67073 UdfExecutor.java:582] Loading UDF 'org.apache.impala.TestUdf' from /tmp/impala-hive-udfs.35849.5.jar
I1103 20:52:32.957120 67096 UdfExecutor.java:611] Loaded UDF 'org.apache.impala.TestUdf' from /tmp/impala-hive-udfs.35849.5.jar
I1103 20:52:32.960232 67055 UdfExecutor.java:582] Loading UDF 'org.apache.impala.TestUdf' from /tmp/impala-hive-udfs.35849.5.jar
I1103 20:52:32.964609 67079 UdfExecutor.java:582] Loading UDF 'org.apache.impala.TestUdf' from /tmp/impala-hive-udfs.35849.5.jar
I1103 20:52:32.964663 67086 UdfExecutor.java:582] Loading UDF 'org.apache.impala.TestUdf' from /tmp/impala-hive-udfs.35849.5.jar
I1103 20:52:32.965049 67033 UdfExecutor.java:582] Loading UDF 'org.apache.impala.TestUdf' from /tmp/impala-hive-udfs.35849.5.jar
I1103 20:52:32.969352 67096 UdfExecutor.java:582] Loading UDF 'org.apache.impala.TestUdf' from /tmp/impala-hive-udfs.35849.5.jar
I1103 20:52:32.975103 67045 UdfExecutor.java:582] Loading UDF 'org.apache.impala.TestUdf' from /tmp/impala-hive-udfs.35849.5.jar
I1103 20:52:32.977435 36231 lib-cache.cc:244] Removing lib cache entry: hdfs://localhost:20500/test-warehouse/impala-hive-udfs.jar, local path: /tmp/impala-hive-udfs.35849.5.jar
I1103 20:52:32.978286 67090 UdfExecutor.java:582] Loading UDF 'org.apache.impala.TestUdf' from /tmp/impala-hive-udfs.35849.5.jar
I1103 20:52:32.979423 67082 UdfExecutor.java:582] Loading UDF 'org.apache.impala.TestUdf' from /tmp/impala-hive-udfs.35849.5.jar
I1103 20:52:32.985303 67046 UdfExecutor.java:582] Loading UDF 'org.apache.impala.TestUdf' from /tmp/impala-hive-udfs.35849.5.jar
I1103 20:52:32.985803 67073 jni-util.cc:211] org.apache.impala.common.ImpalaRuntimeException: Unable to find class.
        at org.apache.impala.hive.executor.UdfExecutor.init(UdfExecutor.java:628)
        at org.apache.impala.hive.executor.UdfExecutor.<init>(UdfExecutor.java:218)
Caused by: java.lang.ClassNotFoundException: org.apache.impala.TestUdf
        at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
...

Able to repro this one... will send a patch to deflake the immediate issue and file a JIRA explaining the root cause.

underlying issue is described in IMPALA-6215


IMPALA-6092: avoid drop/create function interactions in e2e tests

The e2e unit tests for udfs can interact via the backend
lib_cache, causing test flakes. IMPALA-6215 explains a
race between the lib_cache and UdfExecutor in the frontend
which is the likely the root cause.
Two e2e tests use the same jar (test_java_udfs and
test_udf_invalid_symbol), test_udf_invalid_symbol drops a
function from that jar, which causes the use of that jar to
fail in the test_java_udfs test. Since the state of lib_cache
is per process, its state causes these interactions across
unit tests.
This change avoids the interactions by using separate jars for
the separate tests.

Change-Id: Ica3538788b1d2ab5e361261e2ade62780b838e65
Reviewed-on: http://gerrit.cloudera.org:8080/8593
Reviewed-by: Dan Hecht <dhecht@cloudera.com>
Tested-by: Impala Public Jenkins

Reopening as we've started seeing this again in various test runs. 

Hit it twice today with the same review.

Disabled running in parallel as a temporary stop-gap:


IMPALA-6092: turn off flaky test temporarily.

The reason for the flake is described in IMPALA-6215.
This patch turns of the test temporarily since it has spiked
recently on gvo.

Change-Id: I4a4165f0e82f270df2c8a3af087a9a6ec63fd086

 

https://gerrit.cloudera.org/#/c/9080/

re-open if it comes up after latest adjustment to tests.

Showed up in https://jenkins.impala.io/job/gerrit-verify-dryrun/2201/

will try the fix for 6215 now that underlying issues have been dealt with.

This broke several builds. Escalating to blocker

Hit this again: https://jenkins.impala.io/job/gerrit-verify-dryrun/2260/

Commit 27c028f0578ac5edb42ba55c2c54ab8b7c195422 in impala's branch refs/heads/master from [~vercego]
[ https://git-wip-us.apache.org/repos/asf?p=impala.git;h=27c028f ]

IMPALA-6215: Removes race when using LibCache.

Re-do the previously reverted change for IMPALA-6215. This patch
addresses the flakes listed in IMPALA-6092, which have become more
urgent recently.

LibCache's api to provide access to locally cached files has a race.
Currently, the client of the cache accesses the locally cached path
as a string, but nothing guarantees that the associated file is not
removed before the client is done using it. This race is suspected
as the root cause for the flakiness seen in IMPALA-6092. These tests
fail once in a while with classloader errors unable to load java udf
classes. In these tests, the lib cache makes no guarantee that the path
to the jar will remain valid from the time the path is acquired through
the time needed to fetch the jar and resolve the needed classes.

LibCache offers liveness guarantees for shared objects via reference
counting. The fix in this patch extends this API to also cover paths
to locally cached files.

This fix *only* addresses the path race. General cleanup of the api will
be done separately.

Testing:
   - added a test to test_udfs.py that does many concurrent udf uses and
     removals. By increasing the concurrent operations to 100, the issue
     in IMPALA-6092 is locally reproducible on every run. With this fix,
     the problem is no longer reproducible with this test.

Change-Id: I72ac0dfb13cf37d79e25c5b8a258b65f2dad097f
Reviewed-on: http://gerrit.cloudera.org:8080/9968
Reviewed-by: Vuk Ercegovac <vercegovac@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Commit 27c028f0578ac5edb42ba55c2c54ab8b7c195422 in impala's branch refs/heads/master from [~vercego]
[ https://git-wip-us.apache.org/repos/asf?p=impala.git;h=27c028f ]

IMPALA-6215: Removes race when using LibCache.

Re-do the previously reverted change for IMPALA-6215. This patch
addresses the flakes listed in IMPALA-6092, which have become more
urgent recently.

LibCache's api to provide access to locally cached files has a race.
Currently, the client of the cache accesses the locally cached path
as a string, but nothing guarantees that the associated file is not
removed before the client is done using it. This race is suspected
as the root cause for the flakiness seen in IMPALA-6092. These tests
fail once in a while with classloader errors unable to load java udf
classes. In these tests, the lib cache makes no guarantee that the path
to the jar will remain valid from the time the path is acquired through
the time needed to fetch the jar and resolve the needed classes.

LibCache offers liveness guarantees for shared objects via reference
counting. The fix in this patch extends this API to also cover paths
to locally cached files.

This fix *only* addresses the path race. General cleanup of the api will
be done separately.

Testing:
   - added a test to test_udfs.py that does many concurrent udf uses and
     removals. By increasing the concurrent operations to 100, the issue
     in IMPALA-6092 is locally reproducible on every run. With this fix,
     the problem is no longer reproducible with this test.

Change-Id: I72ac0dfb13cf37d79e25c5b8a258b65f2dad097f
Reviewed-on: http://gerrit.cloudera.org:8080/9968
Reviewed-by: Vuk Ercegovac <vercegovac@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Commit 27c028f0578ac5edb42ba55c2c54ab8b7c195422 in impala's branch refs/heads/master from [~vercego]
[ https://git-wip-us.apache.org/repos/asf?p=impala.git;h=27c028f ]

IMPALA-6215: Removes race when using LibCache.

Re-do the previously reverted change for IMPALA-6215. This patch
addresses the flakes listed in IMPALA-6092, which have become more
urgent recently.

LibCache's api to provide access to locally cached files has a race.
Currently, the client of the cache accesses the locally cached path
as a string, but nothing guarantees that the associated file is not
removed before the client is done using it. This race is suspected
as the root cause for the flakiness seen in IMPALA-6092. These tests
fail once in a while with classloader errors unable to load java udf
classes. In these tests, the lib cache makes no guarantee that the path
to the jar will remain valid from the time the path is acquired through
the time needed to fetch the jar and resolve the needed classes.

LibCache offers liveness guarantees for shared objects via reference
counting. The fix in this patch extends this API to also cover paths
to locally cached files.

This fix *only* addresses the path race. General cleanup of the api will
be done separately.

Testing:
   - added a test to test_udfs.py that does many concurrent udf uses and
     removals. By increasing the concurrent operations to 100, the issue
     in IMPALA-6092 is locally reproducible on every run. With this fix,
     the problem is no longer reproducible with this test.

Change-Id: I72ac0dfb13cf37d79e25c5b8a258b65f2dad097f
Reviewed-on: http://gerrit.cloudera.org:8080/9968
Reviewed-by: Vuk Ercegovac <vercegovac@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


latest change should fix the issue. re-open if we run into this again.

https://jenkins.impala.io/job/gerrit-verify-dryrun/2287/console

Well that resurfaced quickly... Reopening.

Commit 226b914dd02dba4aa389ed7b4c0023ddfd229096 in impala's branch refs/heads/2.x from [~vercego]
[ https://git-wip-us.apache.org/repos/asf?p=impala.git;h=226b914 ]

IMPALA-6215: Removes race when using LibCache.

Re-do the previously reverted change for IMPALA-6215. This patch
addresses the flakes listed in IMPALA-6092, which have become more
urgent recently.

LibCache's api to provide access to locally cached files has a race.
Currently, the client of the cache accesses the locally cached path
as a string, but nothing guarantees that the associated file is not
removed before the client is done using it. This race is suspected
as the root cause for the flakiness seen in IMPALA-6092. These tests
fail once in a while with classloader errors unable to load java udf
classes. In these tests, the lib cache makes no guarantee that the path
to the jar will remain valid from the time the path is acquired through
the time needed to fetch the jar and resolve the needed classes.

LibCache offers liveness guarantees for shared objects via reference
counting. The fix in this patch extends this API to also cover paths
to locally cached files.

This fix *only* addresses the path race. General cleanup of the api will
be done separately.

Testing:
   - added a test to test_udfs.py that does many concurrent udf uses and
     removals. By increasing the concurrent operations to 100, the issue
     in IMPALA-6092 is locally reproducible on every run. With this fix,
     the problem is no longer reproducible with this test.

Change-Id: I72ac0dfb13cf37d79e25c5b8a258b65f2dad097f
Reviewed-on: http://gerrit.cloudera.org:8080/9968
Reviewed-by: Vuk Ercegovac <vercegovac@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Commit 226b914dd02dba4aa389ed7b4c0023ddfd229096 in impala's branch refs/heads/2.x from [~vercego]
[ https://git-wip-us.apache.org/repos/asf?p=impala.git;h=226b914 ]

IMPALA-6215: Removes race when using LibCache.

Re-do the previously reverted change for IMPALA-6215. This patch
addresses the flakes listed in IMPALA-6092, which have become more
urgent recently.

LibCache's api to provide access to locally cached files has a race.
Currently, the client of the cache accesses the locally cached path
as a string, but nothing guarantees that the associated file is not
removed before the client is done using it. This race is suspected
as the root cause for the flakiness seen in IMPALA-6092. These tests
fail once in a while with classloader errors unable to load java udf
classes. In these tests, the lib cache makes no guarantee that the path
to the jar will remain valid from the time the path is acquired through
the time needed to fetch the jar and resolve the needed classes.

LibCache offers liveness guarantees for shared objects via reference
counting. The fix in this patch extends this API to also cover paths
to locally cached files.

This fix *only* addresses the path race. General cleanup of the api will
be done separately.

Testing:
   - added a test to test_udfs.py that does many concurrent udf uses and
     removals. By increasing the concurrent operations to 100, the issue
     in IMPALA-6092 is locally reproducible on every run. With this fix,
     the problem is no longer reproducible with this test.

Change-Id: I72ac0dfb13cf37d79e25c5b8a258b65f2dad097f
Reviewed-on: http://gerrit.cloudera.org:8080/9968
Reviewed-by: Vuk Ercegovac <vercegovac@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Commit 226b914dd02dba4aa389ed7b4c0023ddfd229096 in impala's branch refs/heads/2.x from [~vercego]
[ https://git-wip-us.apache.org/repos/asf?p=impala.git;h=226b914 ]

IMPALA-6215: Removes race when using LibCache.

Re-do the previously reverted change for IMPALA-6215. This patch
addresses the flakes listed in IMPALA-6092, which have become more
urgent recently.

LibCache's api to provide access to locally cached files has a race.
Currently, the client of the cache accesses the locally cached path
as a string, but nothing guarantees that the associated file is not
removed before the client is done using it. This race is suspected
as the root cause for the flakiness seen in IMPALA-6092. These tests
fail once in a while with classloader errors unable to load java udf
classes. In these tests, the lib cache makes no guarantee that the path
to the jar will remain valid from the time the path is acquired through
the time needed to fetch the jar and resolve the needed classes.

LibCache offers liveness guarantees for shared objects via reference
counting. The fix in this patch extends this API to also cover paths
to locally cached files.

This fix *only* addresses the path race. General cleanup of the api will
be done separately.

Testing:
   - added a test to test_udfs.py that does many concurrent udf uses and
     removals. By increasing the concurrent operations to 100, the issue
     in IMPALA-6092 is locally reproducible on every run. With this fix,
     the problem is no longer reproducible with this test.

Change-Id: I72ac0dfb13cf37d79e25c5b8a258b65f2dad097f
Reviewed-on: http://gerrit.cloudera.org:8080/9968
Reviewed-by: Vuk Ercegovac <vercegovac@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Happened in https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/1888/consoleFull as part of the 2.x nightly build as well.

looked at that gvo run and it did not include the change intended to fix this. closing for now.

Looks like I closed at the same time as the prev comment. fwict, that run did not include the fix, so keeping this closed for now.

