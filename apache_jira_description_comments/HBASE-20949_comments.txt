{noformat}
2018-07-26 11:58:08,573 DEBUG [PEWorker-1] assignment.RegionTransitionProcedure(436): LOCK_EVENT_WAIT pid=123 serverLocks={}, namespaceLocks={}, tableLocks={{testRestoreSnapshotAfterSplittingRegions-1532606269310=exclusiveLockOwner=121, sharedLockCount=-8, waitingProcCount=0}}, regionLocks={{d203b8d2c63118f256573f525e6edc8c=exclusiveLockOwner=117, sharedLockCount=0, waitingProcCount=0}, {f45f7e4b5c5d68e47af5c23908cb3818=exclusiveLockOwner=127, sharedLockCount=0, waitingProcCount=0}, {b7b3607bb9c1483a16637cac9fac1719=exclusiveLockOwner=120, sharedLockCount=0, waitingProcCount=1}}, peerLocks={}, metaLocks={}
{noformat}

We have this, obviously we have something wrong with sharedLockCount, it is -8.

Let me dig more.

What I pushed to master for debugging.

Will take a look tomorrow.

Confirmed, there are duplicated release lock acquires. Let me dig.

The problem here is that, we seem to finish the procedure twice.

{noformat}
2018-07-26 22:35:44,762 INFO  [PEWorker-4] procedure2.ProcedureExecutor(1551): Initialized subprocedures=[{pid=96, ppid=95, state=RUNNABLE:REGION_TRANSITION_QUEUE, hasLock=false; AssignProcedure table=testRestoreSnapshotAfterSplittingRegions-1532644538441, region=d0b0215a67002d7c19486ee75f610d94}, {pid=97, ppid=95, state=RUNNABLE:REGION_TRANSITION_QUEUE, hasLock=false; AssignProcedure table=testRestoreSnapshotAfterSplittingRegions-1532644538441, region=9ae1ea9ba045c13d80b255e0de39eafb}, {pid=98, ppid=95, state=RUNNABLE:REGION_TRANSITION_QUEUE, hasLock=false; AssignProcedure table=testRestoreSnapshotAfterSplittingRegions-1532644538441, region=46cd0014b889f5540cb5e356c5fb7d6e}, {pid=99, ppid=95, state=RUNNABLE:REGION_TRANSITION_QUEUE, hasLock=false; AssignProcedure table=testRestoreSnapshotAfterSplittingRegions-1532644538441, region=201c3520780fedb059b26f6d757c250f}, {pid=100, ppid=95, state=RUNNABLE:REGION_TRANSITION_QUEUE, hasLock=false; AssignProcedure table=testRestoreSnapshotAfterSplittingRegions-1532644538441, region=c5e9ddc19cbd286cf4a016f889e79732}, {pid=101, ppid=95, state=RUNNABLE:REGION_TRANSITION_QUEUE, hasLock=false; AssignProcedure table=testRestoreSnapshotAfterSplittingRegions-1532644538441, region=e1d6b5e83f6ed6175d95b0a628627251}]
2018-07-26 22:35:44,819 DEBUG [PEWorker-8] procedure2.LockAndQueue(123): pid=101, ppid=95, state=RUNNABLE:REGION_TRANSITION_QUEUE, hasLock=false; AssignProcedure table=testRestoreSnapshotAfterSplittingRegions-1532644538441, region=e1d6b5e83f6ed6175d95b0a628627251 acquire shared lock 3284bcdf: exclusiveLockOwner=NONE, sharedLockCount=1, waitingProcCount=0 succeeded
2018-07-26 22:35:44,819 DEBUG [PEWorker-8] procedure2.LockAndQueue(123): pid=101, ppid=95, state=RUNNABLE:REGION_TRANSITION_QUEUE, hasLock=false; AssignProcedure table=testRestoreSnapshotAfterSplittingRegions-1532644538441, region=e1d6b5e83f6ed6175d95b0a628627251 acquire shared lock 7f6eec32: exclusiveLockOwner=95, sharedLockCount=0, waitingProcCount=0 succeeded
2018-07-26 22:35:44,819 INFO  [PEWorker-8] procedure.MasterProcedureScheduler(689): pid=101, ppid=95, state=RUNNABLE:REGION_TRANSITION_QUEUE, hasLock=false; AssignProcedure table=testRestoreSnapshotAfterSplittingRegions-1532644538441, region=e1d6b5e83f6ed6175d95b0a628627251 checking lock on e1d6b5e83f6ed6175d95b0a628627251
2018-07-26 22:35:44,871 INFO  [PEWorker-8] assignment.AssignProcedure(218): Starting pid=101, ppid=95, state=RUNNABLE:REGION_TRANSITION_QUEUE, hasLock=true; AssignProcedure table=testRestoreSnapshotAfterSplittingRegions-1532644538441, region=e1d6b5e83f6ed6175d95b0a628627251; rit=OFFLINE, location=asf911.gq1.ygridcore.net,41392,1532644489849; forceNewPlan=false, retain=true
2018-07-26 22:35:45,022 INFO  [PEWorker-5] assignment.RegionStateStore(199): pid=101 updating hbase:meta row=e1d6b5e83f6ed6175d95b0a628627251, regionState=OPENING, regionLocation=asf911.gq1.ygridcore.net,41392,1532644489849
2018-07-26 22:35:45,026 INFO  [PEWorker-5] assignment.RegionTransitionProcedure(241): Dispatch pid=101, ppid=95, state=RUNNABLE:REGION_TRANSITION_DISPATCH, hasLock=true; AssignProcedure table=testRestoreSnapshotAfterSplittingRegions-1532644538441, region=e1d6b5e83f6ed6175d95b0a628627251; rit=OPENING, location=asf911.gq1.ygridcore.net,41392,1532644489849
2018-07-26 22:35:45,198 DEBUG [RpcServer.default.FPBQ.Fifo.handler=4,queue=0,port=57564] assignment.RegionTransitionProcedure(264): Received report OPENED seqId=5, pid=101, ppid=95, state=RUNNABLE:REGION_TRANSITION_DISPATCH, hasLock=true; AssignProcedure table=testRestoreSnapshotAfterSplittingRegions-1532644538441, region=e1d6b5e83f6ed6175d95b0a628627251; rit=OPENING, location=asf911.gq1.ygridcore.net,41392,1532644489849
2018-07-26 22:35:45,198 DEBUG [PEWorker-15] assignment.RegionTransitionProcedure(354): Finishing pid=101, ppid=95, state=RUNNABLE:REGION_TRANSITION_FINISH, hasLock=true; AssignProcedure table=testRestoreSnapshotAfterSplittingRegions-1532644538441, region=e1d6b5e83f6ed6175d95b0a628627251; rit=OPENING, location=asf911.gq1.ygridcore.net,41392,1532644489849
2018-07-26 22:35:45,199 INFO  [PEWorker-15] assignment.RegionStateStore(199): pid=101 updating hbase:meta row=e1d6b5e83f6ed6175d95b0a628627251, regionState=OPEN, openSeqNum=5, regionLocation=asf911.gq1.ygridcore.net,41392,1532644489849
2018-07-26 22:35:45,276 DEBUG [PEWorker-5] procedure2.LockAndQueue(132): pid=101, ppid=95, state=SUCCESS, hasLock=false; AssignProcedure table=testRestoreSnapshotAfterSplittingRegions-1532644538441, region=e1d6b5e83f6ed6175d95b0a628627251 release shared lock 7f6eec32: exclusiveLockOwner=NONE, sharedLockCount=6, waitingProcCount=0
2018-07-26 22:35:45,276 DEBUG [PEWorker-5] procedure2.LockAndQueue(132): pid=101, ppid=95, state=SUCCESS, hasLock=false; AssignProcedure table=testRestoreSnapshotAfterSplittingRegions-1532644538441, region=e1d6b5e83f6ed6175d95b0a628627251 release shared lock 3284bcdf: exclusiveLockOwner=NONE, sharedLockCount=6, waitingProcCount=0
2018-07-26 22:35:45,277 INFO  [PEWorker-5] procedure2.ProcedureExecutor(1307): Finished pid=101, ppid=95, state=SUCCESS, hasLock=false; AssignProcedure table=testRestoreSnapshotAfterSplittingRegions-1532644538441, region=e1d6b5e83f6ed6175d95b0a628627251 in 439msec
2018-07-26 22:35:45,543 DEBUG [PEWorker-15] procedure2.LockAndQueue(132): pid=101, ppid=95, state=SUCCESS, hasLock=false; AssignProcedure table=testRestoreSnapshotAfterSplittingRegions-1532644538441, region=e1d6b5e83f6ed6175d95b0a628627251 release shared lock 7f6eec32: exclusiveLockOwner=NONE, sharedLockCount=4, waitingProcCount=0
2018-07-26 22:35:45,544 DEBUG [PEWorker-15] procedure2.LockAndQueue(132): pid=101, ppid=95, state=SUCCESS, hasLock=false; AssignProcedure table=testRestoreSnapshotAfterSplittingRegions-1532644538441, region=e1d6b5e83f6ed6175d95b0a628627251 release shared lock 3284bcdf: exclusiveLockOwner=NONE, sharedLockCount=4, waitingProcCount=0
2018-07-26 22:35:45,544 INFO  [PEWorker-15] procedure2.ProcedureExecutor(1307): Finished pid=101, ppid=95, state=SUCCESS, hasLock=false; AssignProcedure table=testRestoreSnapshotAfterSplittingRegions-1532644538441, region=e1d6b5e83f6ed6175d95b0a628627251 in 439msec
{noformat}

The PEWorker-5 and PEWORKER-15 both finish the procedure causes the double release.

Anyway let me revert the debug commit first as it  prints too many logs.

OK I think the problem here is something like HBASE-20939.

After we dispatch the open region request, we suspend ourselves and return. And the open region call finishes immediately and wake us up, and another PEWorker takes charge the procedure and set the procedure state to SUCCESS, and then the original PEWorker come back again, it also finds out that the procedure is in SUCCESS state, so it also tries to finish the procedure and cause a double release.

{code}
      LockState lockState = acquireLock(proc);
      switch (lockState) {
        case LOCK_ACQUIRED:
          execProcedure(procStack, proc);
          break;
        case LOCK_YIELD_WAIT:
          LOG.info(lockState + " " + proc);
          scheduler.yield(proc);
          break;
        case LOCK_EVENT_WAIT:
          // Someone will wake us up when the lock is available
          LOG.debug(lockState + " " + proc);
          break;
        default:
          throw new UnsupportedOperationException();
      }
      procStack.release(proc);

      if (proc.isSuccess()) {
        // update metrics on finishing the procedure
        proc.updateMetricsOnFinish(getEnvironment(), proc.elapsedTime(), true);
        LOG.info("Finished " + proc + " in " + StringUtils.humanTimeDiff(proc.elapsedTime()));
        // Finalize the procedure state
        if (proc.getProcId() == rootProcId) {
          procedureFinished(proc);
        } else {
          execCompletionCleanup(proc);
        }
        break;
      }
{code}

This is the critical part, the 'if(proc.isSuccess())' part has been executed twice so we are dead.

Let me prepare a patch in HBASE-20939 to see if it helps.

Results for branch master
	[build #410 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/master/410/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/master/410//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/master/410//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/master/410//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Fixed by HBASE-20939.

