Great idea.  Thanks, Colin!

Folks, I am sorry to say this, but my vote is not to go in this direction. I see NativeIO as means to implement the functionality that simply cannot be achieved in Java, in a cross-platform friendly way. Java already made a trade off not to return the error code from mkdirs/rename and similar APIs, as it would be hard to achieve this in a cross-platform consistent way. I would argue that error code for debugging unittests is not a strong enough case to introduce this discrepancy between platforms. There will be many other places where by going down on the stack we can gain greater control/flexibility, let's just do this when it is absolutely needed.

I saw that we already introduced rename for similar reasons. My initial thought when I saw a Jira to implement the same functionality on Windows was, why not just remove the native implementation altogether :)

Feel free to comment with your views. I am just sharing my honest opinion.

The Java designers are well aware of the deficiencies of the current API, and have added a new API in Java 7 called {{Files#createDirectory}}.  This API throws an appropriate {{IOException}} on failure, rather than just returning false.

You can check it out here: http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#createDirectory(java.nio.file.Path, java.nio.file.attribute.FileAttribute...)

So it's not a "tradeoff" they made, it's a mistake they made, which they are now correcting.  It's not difficult to give relevant error messages on all platforms, including Windows and all the UNIXes.  Unfortunately, the JDK7 APIs will not be available to us for many years, since we are going to be supporting JDK6 for quite some time.

bq. I saw that we already introduced rename for similar reasons. My initial thought when I saw a Jira to implement the same functionality on Windows was, why not just remove the native implementation altogether 

I have had to diagnose issues in production clusters where rename or mkdir failed, and the logs did not reveal why.  It's not fun.  And it can lead to very serious code and/or system administration problems getting misdiagnosed.  It's also another reason we have so many flaky unit tests that never get fixed.  So I think you should reconsider.

Thanks Colin for providing the additional context. Some comments inline.

bq. It's not difficult to give relevant error messages on all platforms, including Windows and all the UNIXes.
I was never arguing that it’s hard to give error messages on all platforms. However, each time we add platform dependent code it adds on the cost over time and makes things more complex w.r.t. cross-platform support. IOW, let’s do this only when absolutely necessary. 

bq. I have had to diagnose issues in production clusters where rename or mkdir failed, and the logs did not reveal why. It's not fun. And it can lead to very serious code and/or system administration problems getting misdiagnosed.
Thanks, this is a valid point, I agree. 



Recent patches for native integration (i.e. Colin's native rename in HDFS-4428 and Ivan's file permission work in HADOOP-9413) have done a great job of encapsulating the JNI call, and fallback when native library is not loaded, behind a single Java method.  Doing this sets us up for a very easy transition to the new Java 7 file APIs whenever we migrate.  At that point, we can delete our own native code paths.  Hopefully, this will bring the maintenance concerns under control in the long run.

Ivan, you bring up a valid point.  Let's create JIRAs to use the JDK7 APIs when they become available to us.  I can think of at least three cases where JDK7 will allow us to reduce the amount of native code or shell calls:

* symlinks / hardlinks, which JDK7 has support for but JDK6 does not (we currently run shell code to create them in the HDFS upgrade code)
* mkdir / mkdirs with an appropriate error message
* rename with an error message

That way, in a few years when the Hadoop PMC makes the decision to drop support for JDK6, we will be able to switch over to a pure Java solution easily.  In the meantime, I think we ought to provide the error message on failure, as a service to our users (and developers!)

Thanks Colin and Chris.

Bq. Let's create JIRAs to use the JDK7 APIs when they become available to us.
Good idea! I created HADOOP-9590 and documented all problems we run into w.r.t. file operations on JDK6. Feel free to add to the Jira if I missed something.


If this can be done in Java7 then its not worth doing here, unless a goal is to backport behaviour to java6 runtimes.

Irrespective of how this is done, it changes the behaviour of local file:// operations when things fail. While this is probably a good thing, it may break things. Perhaps it should just be catch+log for now: logging can only be useful.

In which case, this could maybe be implemented with reflection today

bq. Irrespective of how this is done, it changes the behaviour of local file:// operations when things fail.

From a compatibility perspective, I think this means we'd have to be careful that the change doesn't start throwing {{IOException}} in cases that used to return {{false}}.  As you said, just logging the information would be a way to handle this.  I think this meets our goal to provide enough information for diagnosis.  (I don't think anyone is proposing that we propagate the native {{errno}} all the way out to the caller of {{FileSystem#mkdirs}}.)

bq. In which case, this could maybe be implemented with reflection today

Sorry, I didn't follow this part.  Could you explain?  I've been thinking of this change as calling C {{mkdir}}, then getting the {{errno}}, and then pushing that back up to the Java layer for logging.  How can reflection help with this?  Is the {{errno}} hidden somewhere in the JDK classes, and you're proposing that we peek at it with reflection?

Thanks!


Hi [~steve_l@iseran.com].  I agree with you that we can't change the behavior of {{FileSystem#mkdir}}, in {{LocalFileSystem}} or any other subclass.  I was not proposing that.  Sorry if it was unclear.  I was proposing that we use a version of mkdirs which provides error information internally in the HDFS {{NameNode}}, {{DataNode}}, etc.  Currently, we get very little information about why something failed, and that makes debugging challenging.

For example, if the NameNode's {{Storage#clearDirectory}} fails with "Cannot create directory", what can we tell users now?  Not very much.  It could be permissions, an I/O error, disk full, or something else.  "I don't know, could be anything" is not something users like to hear on a mailing list.

bq. If this can be done in Java7 then its not worth doing here, unless a goal is to backport behaviour to java6 runtimes.

Well, as of now (December 2013), all versions of Hadoop must build on Java6.  It is a supported platform.  In the past, we've added JNI or other workarounds to overcome deficiencies in Java6.  I don't see why this time is any different, especially given the small amount of code we're talking about here.

