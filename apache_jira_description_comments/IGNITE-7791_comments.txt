Hi [~Mmuzaf], is this test-fail similar to test you have recently fixed in [IGNITE-7789]?

[~dpavlov] looks different. I'll try to look at and make some research tomorrow.

[~Mmuzaf] sure, thank you

GitHub user Mmuzaf opened a pull request:

    https://github.com/apache/ignite/pull/3598

    IGNITE-7791: add additional logging

    Logging for reproducing bug

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Mmuzaf/ignite ignite-7791

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/ignite/pull/3598.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #3598
    
----
commit 9e06b5f6c253af65373164d462efba4ef509a925
Author: Maxim Muzafarov <maxmuzaf@...>
Date:   2018-03-04T14:57:55Z

    IGNITE-7791: add additional logging

----


Github user Mmuzaf closed the pull request at:

    https://github.com/apache/ignite/pull/3598


GitHub user Mmuzaf reopened a pull request:

    https://github.com/apache/ignite/pull/3598

    IGNITE-7791: add additional logging

    Logging for reproducing bug

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Mmuzaf/ignite ignite-7791

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/ignite/pull/3598.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #3598
    
----
commit 9e06b5f6c253af65373164d462efba4ef509a925
Author: Maxim Muzafarov <maxmuzaf@...>
Date:   2018-03-04T14:57:55Z

    IGNITE-7791: add additional logging

commit c05110468124dbc21fe2ef148b4dc800be719dad
Author: Maxim Muzafarov <maxmuzaf@...>
Date:   2018-03-04T17:07:32Z

    IGNITE-7791: add additional logging details for cache groups

commit 13e7d8a82e32e5c6a6437ad4816331ada30b4f95
Author: Maxim Muzafarov <maxmuzaf@...>
Date:   2018-03-05T16:51:55Z

    IGNITE-7791: more logging

commit cc149ec8223dd501f7dbaf8011f2575864544971
Author: Maxim Muzafarov <maxmuzaf@...>
Date:   2018-03-06T10:56:48Z

    IGNITE-7791: more logging 2

commit aed7ea90d029fd15f3d8b6474652e4250ca67de4
Author: Maxim Muzafarov <maxmuzaf@...>
Date:   2018-03-06T11:38:55Z

    IGNITE-7791: more logging 3

commit 2b8a7ab433b9811a0a0df94b42300f19894c7332
Author: Maxim Muzafarov <maxmuzaf@...>
Date:   2018-03-06T15:16:14Z

    IGNITE-7791: more logging 4

commit f75bcb954b22f81f1e341926b2fe86c20a08cf21
Author: Maxim Muzafarov <maxmuzaf@...>
Date:   2018-03-06T17:13:06Z

    IGNITE-7791: more logging 5

commit 8691f5a67dd4c4b8d279661296241f1a77b28059
Author: Maxim Muzafarov <maxmuzaf@...>
Date:   2018-03-06T18:45:28Z

    IGNITE-7791: more logging 6

----


Github user Mmuzaf closed the pull request at:

    https://github.com/apache/ignite/pull/3598


GitHub user Mmuzaf opened a pull request:

    https://github.com/apache/ignite/pull/3618

    IGNITE-7791: add test case for delayed partition exchange

    …nect

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Mmuzaf/ignite ignite-7791

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/ignite/pull/3618.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #3618
    
----
commit 73c02562a485ad013d7a80cc358a56f47e7b1432
Author: Maxim Muzafarov <maxmuzaf@...>
Date:   2018-03-07T17:02:02Z

    IGNITE-7791: add test case for delayed partition exchange after reconnect

----


[~dpavlov], Really hard issue.
100% reproducer for this errors attached - [^IgniteClientReconnectCacheDelayExchangeTest.java]
I'm not familiar with GridDht*Message's ...

Steps:
# Start recording messages GridDhtPartitionsSingleMessage with exchId=null
# Start two or more server nodes with non default cahce (e.g. static-cahce)
# Start sigle client node
# Create client cache (e.g. default) <- here we will have 2 caches on cluster
# Fail client node and waiting for disconnect
# Reconnect client node <- here we'll only default cache (lose static-cache) 
# Resend GridDhtPartitionsSingleMessage with exchId=null (this is emulation of delaying message)
# Will get java.lang.AssertionError: 236160867 (id of static-cache) on GridDhtPartitionsExchangeFuture

[~agoncharuk] Hi, can ur you give me advise why we should clear all caches on client reconnect event? I will think about how to fix it. This is because of yocommit 17.01.2018 [CacheAffinitySharedManager.initCachesOnLocalJoin()|https://github.com/apache/ignite/blob/master/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheAffinitySharedManager.java#L190]

{code}
    /**
     * Must be called from exchange thread.
     */
    public void initCachesOnLocalJoin(
        Map<Integer, CacheGroupDescriptor> cacheGroupDescriptors,
        Map<String, DynamicCacheDescriptor> cacheDescriptors
    ) {
        // Clean-up in case of client reconnect.
        caches.clear();

        caches.init(cacheGroupDescriptors, cacheDescriptors);
    }
{code}

[~Mmuzaf] I looked at your test and conducted a small analysis. The problem is at the level of comparison of versions for a message, as far as I can see you delay the messages on the topology version (X [3,0]), the topology change, send a message on the more fresh version (Y [6,1]). They should be ignored, but now the exchange tries to process them.

My small fix
GridCachePartitionExchangeManager:475 (master branch)
{code}
 AffinityTopologyVersion lastInitTopology = lastInitializedFut.topologyVersion();

if (msg.exchangeNeeded() && msg.topologyVersion().compareTo(lastInitTopology) > 0) {
{code}
I guess it is not finally solution, and full fix maybe more complex. For me problem in the processing stale message is some cases.

Github user Mmuzaf closed the pull request at:

    https://github.com/apache/ignite/pull/3618


GitHub user Mmuzaf opened a pull request:

    https://github.com/apache/ignite/pull/3779

    IGNITE-7791: fix CacheInfo initialization after client reconnect

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Mmuzaf/ignite ignite-7791_2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/ignite/pull/3779.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #3779
    
----
commit 7fe868b940b3d35d137cc3f8b96f8947733b2ec4
Author: Maxim Muzafarov <maxmuzaf@...>
Date:   2018-04-09T13:56:58Z

    IGNITE-7791: fix CacheInfo initialization after client reconnect

----


[~agoncharuk], 
 
 As part of implementation of [IEP-4 Baseline topology for caches|https://cwiki.apache.org/confluence/display/IGNITE/IEP-4+Baseline+topology+for+caches] and IGNITE-7308 the new {{LocalJoinCachesContext}} class was introduced. This context used to capture caches state for a node joining to an active cluster and pass it to the exchange thread. 
 
 In my opinion, we should not perform caches info removing from captured state on reconnect event happened. It leads to incorrect {{CacheAffinityChangeMessage}} message processing after client node reconnects. Could you, please, look at my [Pull Request #3779|https://github.com/apache/ignite/pull/3779] and share your thoughts?
 100% {{testReconnectCacheDestroyedWithDelayedSpiMsgs}} reproducer also included to this PR and passed due to these changes. 
 
||Profile||Test||Status||
|Cache (Failover) [1]|[testReconnectCacheDestroyedAndCreated|https://ci.ignite.apache.org/viewLog.html?buildId=1196532&buildTypeId=IgniteTests24Java8_CacheFailover1&tab=testsInfo]|(/) OK ~(200 runs)~|
|Client Nodes|[testReconnectCacheDestroyedWithDelayedSpiMsgs|https://ci.ignite.apache.org/viewLog.html?currentGroup=test&scope=org.apache.ignite.testsuites.IgniteClientNodesTestSuite%23teamcity%23org.apache.ignite.internal%23teamcity%23IgniteClientReconnectDelayedSpiTest&pager.currentPage=1&order=DURATION_DESC&recordsPerPage=20&filterText=&status=&buildTypeId=IgniteTests24Java8_ClientNodes&buildId=1192536&tab=testsInfo] _newly added_|(/) OK|
|Client Nodes|[IgniteClientNodesTestSuite|https://ci.ignite.apache.org/viewLog.html?buildId=1192536&tab=buildResultsDiv&buildTypeId=IgniteTests24Java8_ClientNodes]|(/) OK ~Tests passed: 72~|
|Run :: All|[#1142 (11 Apr 18 19:15)|https://ci.ignite.apache.org/viewLog.html?buildId=1192255] _NO new fails due to changes of PR_|(x) FAIL ~19 test failed(18 new)~|

[~Mmuzaf], please check https://ci.ignite.apache.org/viewType.html?buildTypeId=IgniteTests24Java8_LicensesHeaders&branch=pull%2F3779%2Fhead&tab=buildTypeStatusDiv
and its artifacts. There is link to file with incorrect header:
 /data/teamcity/work/8241162b5ce21231/modules/core/src/test/java/org/apache/ignite/internal/IgniteClientReconnectDelayedSpiTest.java


I've restarted also 
    Binary Objects (Simple Mapper Queries) 
because it had suspicious test failure.

[~dpavlov],

Thank you for this notice. All code-style fixes have performed after the Run::All() build and before moving this ticket to PA status. I thought, that no needs to make Run.All() on this PR only for building codestyles.

Here is new Run [#1235 (16 Apr 18 13:50)|https://ci.ignite.apache.org/viewLog.html?buildId=1211532&tab=buildResultsDiv&buildTypeId=IgniteTests24Java8_RunAll] (x) FAIL ~46 test failed (43 new)~. I've carefully reviewed all test fails. I suppose, there is no fails regarding my changes based on your todays [Ignite TC - current failures|https://cwiki.apache.org/confluence/pages/viewpageattachments.action?pageId=73631266] report. 
 
||Test||Fail rate||
|IgniteComputeConfigVariationsFullApiTest|21.4%|
|IpcSharedMemoryCrashDetectionSelfTest.testIgfsServerClientInteractionsUponClientKilling|8.9%|
|IpcSharedMemorySpaceSelfTest|6.3%|
|IgniteServiceConfigVariationsFullApiTest.testNodeSingletonDeploy|27.7%|
|CacheTxLoadingConcurrentGridStartSelfTestAllowOverwrite|7.7 - 10.6%|
|IgniteCacheAtomicProtocolTest.testPutReaderUpdate1|19.5%|
|TxRollbackOnTimeoutTest.testRandomMixedTxConfigurations|16.8%|
|IgniteCacheContinuousQueryBackupQueueTest.testManyQueryBackupQueue|10.4%|
|DynamicColumnsConcurrentAtomicPartitionedSelfTest.testDropColumnCoordinatorChange|5.1%|
|IgniteSinkConnectorTest.testSinkPutsWithoutTransformation|2.9%|
|ClientPreferDirectSelfTest.testRoundRobinBalancer|9.0%|
|ClientTcpDirectMultiNodeSelfTest.testTopologyListener|1.3%|

And seprately for {{Binary Objects (Simple Mapper Queries)}}, that you mentioned before: 
 
||Test||Fail rate||
|SchemaExchangeSelfTest.testServerRestartWithNewTypes|3.0%|

[~Mmuzaf] thank you for your time and investigating test failures.
I've checked latest re-run of PR 3779 and it seems to be OK. 

Guys, the fix looks good to me given that TC passes, however, I would like to ask a second opinion of [~ilantukh].

Looks OK.

Github user asfgit closed the pull request at:

    https://github.com/apache/ignite/pull/3779


[~Mmuzaf] thank you for contribution. Merged to master.

 

[~dpavlov], [~ilantukh]
Looks NOT good to me. 
Can anybody explain fix?

Looks like problem is with {{caches.clear();}} inside 
{{org.apache.ignite.internal.processors.cache.CacheAffinitySharedManager#initCachesOnLocalJoin}}.
It causes ignite-sys-cache group descriptor removal.

[~avinogradov] could you explain what you think can be improved? Could you contribute improvement of this fix?

[~dpavlov],
My idea is that current logic is correct. 
Only one issue that {{caches.clear();}} inside {{org.apache.ignite.internal.processors.cache.CacheAffinitySharedManager#initCachesOnLocalJoin}} kills survived cache group's descriptors (ignite-sys-cache in this reproducer).

This kill affects only *rare* operation like delayed AffinityChangeRequest, that's why it was not fixed during BLT development.

{{caches.clear();}} removal fixes the reproducer Maxim created and that's the fix I'm proposing.

Solution merged to master fixes reproducer too, but looks like some kind of hotfix without any warranty that logic is not broken now.
As far as I understand, [~Mmuzaf] proposed this solution not as final, but with question "Will this breaks something?"


[~agoncharuk], could you please finally check that logic related to {{locJoinCachesCtx.removeSurvivedCacheGroups(survivedCacheGrps)}} was removed properly and this removal will not cause issues at production/design?


Added for history indexing purposes:

This bug is seen for Ignite 2.5 for the following scenario:
1) run ignite server nodes
2) join with a client node
3) kill all server nodes
4) start server nodes again
5) await for the client to reconnect
6) client logs will have a NullPointerException (Failed to reinitialize local partitions (preloading will be stopped))
7) cache get/put operations executed in non-tx context will hang forever:
{noformat}
Client topology version mismatch, need remap lock request [reqTopVer=AffinityTopologyVersion [topVer=5, minorTopVer=0], locTopVer=AffinityTopologyVersion [topVer=5, minorTopVer=1], req=GridNearLockRequest [topVer=AffinityTopologyVersion [topVer=5, minorTopVer=0] ...
{noformat}
{noformat}
Starting (re)map for mappings [mappings=[GridNearLockMapping [node=TcpDiscoveryNode [id=02315613-a512-45af-8983-b06b64ee3dd2, addrs=[0:0:0:0:0:0:0:1%lo, 10.0.2.15, 10.0.3.23, 127.0.0.1], sockAddrs=[cas-3/10.0.3.23:47500, /10.0.2.15:47500, /0:0:0:0:0:0:0:1%lo:47500, /127.0.0.1:47500], discPort=47500, order=1, intOrder=1, lastExchangeTime=1565685652269, loc=false, ver=2.5.0#20190705-sha1:7d4d79b0, isClient=false],... futs=[false]]]]]
{noformat}

NPE:
{noformat}
#### INFO  2019-08-13 08:26:20.282 (1565684780282) [exchange-worker-#47] [time] > Started exchange init [topVer=AffinityTopologyVersion [topVer=4, minorTopVer=1], crd=false, evt=DISCOVERY_CUSTOM_EVT, evtNode=941c65d5-3ae5-41d5-98fa-8d300edafc94, customEvt=CacheAffinityCh
angeMessage [id=346351a8c61-b59cbf8f-ca75-46fc-9ebe-a76d424a60af, topVer=AffinityTopologyVersion [topVer=4, minorTopVer=0], exchId=null, partsMsg=null, exchangeNeeded=true], allowMerge=false]
#### ERROR 2019-08-13 08:26:20.366 (1565684780366) [exchange-worker-#47] [GridDhtPartitionsExchangeFuture] > Failed to reinitialize local partitions (preloading will be stopped): GridDhtPartitionExchangeId [topVer=AffinityTopologyVersion [topVer=4, minorTopVer=1], discoE
vt=DiscoveryCustomEvent [customMsg=CacheAffinityChangeMessage [id=346351a8c61-b59cbf8f-ca75-46fc-9ebe-a76d424a60af, topVer=AffinityTopologyVersion [topVer=4, minorTopVer=0], exchId=null, partsMsg=null, exchangeNeeded=true], affTopVer=AffinityTopologyVersion [topVer=4, mi
norTopVer=1], super=DiscoveryEvent [evtNode=TcpDiscoveryNode [id=941c65d5-3ae5-41d5-98fa-8d300edafc94, addrs=[0:0:0:0:0:0:0:1%lo, 10.0.2.15, 10.0.3.22, 127.0.0.1], sockAddrs=[cas-2/10.0.3.22:47500, /10.0.2.15:47500, /0:0:0:0:0:0:0:1%lo:47500, /127.0.0.1:47500], discPort=
47500, order=1, intOrder=1, lastExchangeTime=1565684762464, loc=false, ver=2.5.0#20190705-sha1:7d4d79b0, isClient=false], topVer=4, nodeId8=e64e8e54, msg=null, type=DISCOVERY_CUSTOM_EVT, tstamp=1565684780279]], nodeId=941c65d5, evt=DISCOVERY_CUSTOM_EVT]
java.lang.NullPointerException
        at org.apache.ignite.internal.processors.cache.CacheAffinitySharedManager$8.applyx(CacheAffinitySharedManager.java:993)
        at org.apache.ignite.internal.processors.cache.CacheAffinitySharedManager$8.applyx(CacheAffinitySharedManager.java:983)
        at org.apache.ignite.internal.util.lang.IgniteInClosureX.apply(IgniteInClosureX.java:38)
        at org.apache.ignite.internal.processors.cache.CacheAffinitySharedManager.forAllCacheGroups(CacheAffinitySharedManager.java:1118)
        at org.apache.ignite.internal.processors.cache.CacheAffinitySharedManager.onChangeAffinityMessage(CacheAffinitySharedManager.java:983)
        at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.onAffinityChangeRequest(GridDhtPartitionsExchangeFuture.java:1011)
        at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.init(GridDhtPartitionsExchangeFuture.java:656)
        at org.apache.ignite.internal.processors.cache.GridCachePartitionExchangeManager$ExchangeWorker.body0(GridCachePartitionExchangeManager.java:2419)
        at org.apache.ignite.internal.processors.cache.GridCachePartitionExchangeManager$ExchangeWorker.body(GridCachePartitionExchangeManager.java:2299)
        at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java:110)
        at java.lang.Thread.run(Thread.java:748)
#### INFO  2019-08-13 08:26:20.368 (1565684780368) [exchange-worker-#47] [GridDhtPartitionsExchangeFuture] > Finish exchange future [startVer=AffinityTopologyVersion [topVer=4, minorTopVer=1], resVer=null, err=java.lang.NullPointerException]
#### ERROR 2019-08-13 08:26:20.457 (1565684780457) [exchange-worker-#47] [GridCachePartitionExchangeManager] > Failed to wait for completion of partition map exchange (preloading will not start): GridDhtPartitionsExchangeFuture [firstDiscoEvt=DiscoveryCustomEvent [customMsg=null, affTopVer=AffinityTopologyVersion [topVer=4, minorTopVer=1], super=DiscoveryEvent [evtNode=TcpDiscoveryNode [id=941c65d5-3ae5-41d5-98fa-8d300edafc94, addrs=[0:0:0:0:0:0:0:1%lo, 10.0.2.15, 10.0.3.22, 127.0.0.1], sockAddrs=[cas-2/10.0.3.22:47500, /10.0.2.15:47500, /0:0:0:0:0:0:0:1%lo:47500, /127.0.0.1:47500], discPort=47500, order=1, intOrder=1, lastExchangeTime=1565684762464, loc=false, ver=2.5.0#20190705-sha1:7d4d79b0, isClient=false], topVer=4, nodeId8=e64e8e54, msg=null, type=DISCOVERY_CUSTOM_EVT, tstamp=1565684780279]], crd=TcpDiscoveryNode [id=941c65d5-3ae5-41d5-98fa-8d300edafc94, addrs=[0:0:0:0:0:0:0:1%lo, 10.0.2.15, 10.0.3.22, 127.0.0.1], sockAddrs=[cas-2/10.0.3.22:47500, /10.0.2.15:47500, /0:0:0:0:0:0:0:1%lo:47500, /127.0.0.1:47500], discPort=47500, order=1, intOrder=1, lastExchangeTime=1565684762464, loc=false, ver=2.5.0#20190705-sha1:7d4d79b0, isClient=false], exchId=GridDhtPartitionExchangeId [topVer=AffinityTopologyVersion [topVer=4, minorTopVer=1], discoEvt=DiscoveryCustomEvent [customMsg=null, affTopVer=AffinityTopologyVersion [topVer=4, minorTopVer=1], super=DiscoveryEvent [evtNode=TcpDiscoveryNode [id=941c65d5-3ae5-41d5-98fa-8d300edafc94, addrs=[0:0:0:0:0:0:0:1%lo, 10.0.2.15, 10.0.3.22, 127.0.0.1], sockAddrs=[cas-2/10.0.3.22:47500, /10.0.2.15:47500, /0:0:0:0:0:0:0:1%lo:47500, /127.0.0.1:47500], discPort=47500, order=1, intOrder=1, lastExchangeTime=1565684762464, loc=false, ver=2.5.0#20190705-sha1:7d4d79b0, isClient=false], topVer=4, nodeId8=e64e8e54, msg=null, type=DISCOVERY_CUSTOM_EVT, tstamp=1565684780279]], nodeId=941c65d5, evt=DISCOVERY_CUSTOM_EVT], added=true, initFut=GridFutureAdapter [ignoreInterrupts=false, state=DONE, res=false, hash=859557540], init=false, lastVer=null, partReleaseFut=null, exchActions=null, affChangeMsg=CacheAffinityChangeMessage [id=346351a8c61-b59cbf8f-ca75-46fc-9ebe-a76d424a60af, topVer=AffinityTopologyVersion [topVer=4, minorTopVer=0], exchId=null, partsMsg=null, exchangeNeeded=true], initTs=1565684780279, centralizedAff=false, forceAffReassignment=false, changeGlobalStateE=null, done=true, state=CLIENT, evtLatch=0, remaining=[73419b18-8475-499d-852a-0b6ef599cf3c, 2e84a25b-9993-4a0b-8275-030281eba41a, 941c65d5-3ae5-41d5-98fa-8d300edafc94], super=GridFutureAdapter [ignoreInterrupts=false, state=DONE, res=java.lang.NullPointerException, hash=1078706880]]
class org.apache.ignite.IgniteCheckedException: null
        at org.apache.ignite.internal.util.IgniteUtils.cast(IgniteUtils.java:7307)
        at org.apache.ignite.internal.util.future.GridFutureAdapter.resolve(GridFutureAdapter.java:259)
        at org.apache.ignite.internal.util.future.GridFutureAdapter.get0(GridFutureAdapter.java:207)
        at org.apache.ignite.internal.util.future.GridFutureAdapter.get(GridFutureAdapter.java:159)
        at org.apache.ignite.internal.util.future.GridFutureAdapter.get(GridFutureAdapter.java:151)
        at org.apache.ignite.internal.processors.cache.GridCachePartitionExchangeManager$ExchangeWorker.body0(GridCachePartitionExchangeManager.java:2433)
        at org.apache.ignite.internal.processors.cache.GridCachePartitionExchangeManager$ExchangeWorker.body(GridCachePartitionExchangeManager.java:2299)
        at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java:110)
        at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NullPointerException
        at org.apache.ignite.internal.processors.cache.CacheAffinitySharedManager$8.applyx(CacheAffinitySharedManager.java:993)
        at org.apache.ignite.internal.processors.cache.CacheAffinitySharedManager$8.applyx(CacheAffinitySharedManager.java:983)
        at org.apache.ignite.internal.util.lang.IgniteInClosureX.apply(IgniteInClosureX.java:38)
        at org.apache.ignite.internal.processors.cache.CacheAffinitySharedManager.forAllCacheGroups(CacheAffinitySharedManager.java:1118)
        at org.apache.ignite.internal.processors.cache.CacheAffinitySharedManager.onChangeAffinityMessage(CacheAffinitySharedManager.java:983)
        at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.onAffinityChangeRequest(GridDhtPartitionsExchangeFuture.java:1011)
        at org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionsExchangeFuture.init(GridDhtPartitionsExchangeFuture.java:656)
        at org.apache.ignite.internal.processors.cache.GridCachePartitionExchangeManager$ExchangeWorker.body0(GridCachePartitionExchangeManager.java:2419)
        ... 3 more
{noformat}

Cherry-picking of the commit of the fix proposed in this ticket seems to work out.

Similar stories on internet:
http://apache-ignite-users.70518.x6.nabble.com/NPE-When-joining-grid-td22326.html
http://mail-archives.apache.org/mod_mbox/ignite-user/201903.mbox/%3c1552286499119-0.post@n6.nabble.com%3e


