I may help out when we get to Solr, but someone else will have to shepherd this.

bq. I'm reluctant to do this to the Solr code base until ... we have some Solr-specific consensus

LUCENE-9564 where this was originally proposed had a healthy number of Solr guys (AB, Erick, David, Varun, Houston) voicing support.  (You can add my name to that list, though this is my first time chiming in.)  And neither LUCENE-9564 nor this ticket have brought out any detractors after 3-4 months.  It seems safe to say we've reached [lazy] consensus on this?

bq. we have some clue what this means for the reference impl.

The concern about {{tidy}} making life harder for the reference_impl branch (or any other large feature branch) is well taken.  How much should we avoid changes on master out of fear for the merge conflicts they'll cause on the reference_impl branch?  I'm of two mind's here: I don't want to make anyone's development difficult, but I also worry generally about the prudence of skipping improvements to master because of ref_impl conflicts.  Leaving improvements off of master looks a bit like throwing away the bird in the hand in favor of the two in the bush.  But I don't have strong convictions there.  In any case, I agree we need some consensus on that point particularly before inconveniencing the ref_impl branch.

But it's worth pointing out there's tons of code that the reference_impl _doesn't_ touch that we could start with.  There's a lot of safe places to start with this that don't require a consensus on the "ref_impl" discussion.

+1 from me too.

What if reference-branch also applies this, then that branch will receive the exact same formatting edits as master, and all that is left are the actual changes? At least in theory.

My take re: the reference impl is that the code formatting will not be made more difficult by waiting for the resolution of the reference impl. However, trying to apply the automatic code formatting _before_ the reference impl is resolved will almost inevitably add work. I see three possibilities:
 * Reconciling the ref impl will be made more difficult if we just do master,
 * This is actually quite a bit of work, and doing it in parallel on the reference impl and master is wasted effort
 * Cherry picking code that isn't heavily touched on on the reference impl to reformat on master is both uncertain and extra work.

Plus making a single commit with _all_ formatting changes so git blame and the like doesn't get confused is harder.

We've lived with the formatting anomalies for many years, I don't see the driver for pushing this forward before the reference impl is resolved, there are better places to spend the effort IMO.

bq. What if reference-branch also applies this, then that branch will receive the exact same formatting edits as master, and all that is left are the actual changes? At least in theory.

You're correct. In practice this is also working fairly well - I've done it before.

I've been relearning the code base, and with fresh eyes, it's shocking to see how many flavours of writing the code Solr has...    I'm often faced with "Which way should I write this method" and then see multiple approaches ;)  

 

So I look forward to when this happens!

Just to follow-up to what Erick said (hi Erick, how are the squirrels? :) - it indeed takes some work to make sure nothing gets *broken* on that initial formatting. We did this for Lucene and we did find some code that formatting would have broken (code in comments without pre, manually-adjusted examples).

Arguably you could do the formatting and then recover from history (if somebody spots something wrong) - many approaches are possible, I guess.

I'm very much looking forward to this some day, but I very much concur with this sentiment from Erick:

bq. We've lived with the formatting anomalies for many years, I don't see the driver for pushing this forward before the reference impl is resolved, there are better places to spend the effort IMO.

Maybe we could start with just the contribs & docker, leaving aside Solr Core & SolrJ?  Just an idea to get some middle ground.

bq. Maybe we could start with just the contribs & docker, leaving aside Solr Core & SolrJ?

+1 That's all I was trying to point out above.  There's plenty of ref-impl-agnostic code that could be cleaned up today, no matter how much deference you want to give to ref_impl.

Personally I don't see any reason to discourage contributors from running on ref_impl affected packages either if they're willing to do it on both branches (master + ref_impl), and if doing so will avoid the majority of conflicts as Jan and Dawid suggested.  But I'm happy to drop that point if there's consensus on the middle-ground point above.

bq. We've lived with the formatting anomalies for many years, I don't see the driver for pushing this forward before the reference impl is resolved

With this tool integrated into lucene-solr, any time spent on formatting code is 100% wasted effort.  It's not a sexy end-user feature or anything, but recovering the time we're all wasting daily seems like a big-enough carrot to merit the work now.  (Especially when there's no concrete timeline for ref_impl, afaik?)

bq. ... Maybe we could start with just ... leaving aside ... Just an idea to get some middle ground.

https://github.com/apache/solr/pull/126 tries out starting with "nothing" and https://github.com/cpoerschke/solr/commit/6d7722103af4c144ade51bebdf31e86e69c36c8c is example of how "something" could be added incrementally.

What do you think?

This is how it was done for Lucene - step by step, module by module (and package-by-package sometimes). The changes do need to be reviewed and small glitches corrected in the original code to prevent accidental corruption of manually-aligned block comments or other code that formats in funky ways automatically (split into multiple statements, group with parentheses sometimes).

Commit a9a8d2023de00474277c6edbaff75d8bd12f33e8 in solr's branch refs/heads/main from Christine Poerschke
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=a9a8d20 ]

SOLR-14920: add spotless and gjf (automatic code formatter) plumbing (#126)



So I'll raise the question, then stay out of the debate and abide by whatever active folks decide... How long should we wait for the reference impl to be integrated before tackling this seriously? My original reluctance to do anything with this was based on trying to reconcile a massively reformatted code base with the massive changes in the reference impl. How long can/should we wait before going forward? Who plans on actually doing that work? Or is it just time to carry this forward and let the reference impl integration deal with it?

And if we do go forward, Dawid shepherded a process that put all the formatting changes in a conveniently-ignored merge, who will take that responsibility? Not me, since I'm avoiding responsibility in retirement ;)

>  Or is it just time to carry this forward and let the reference impl integration deal with it?

I think this is the way.

Hi Christine. Solr's repository still has roots in the joint repository so I think you should leave those "lucene" commits in, even if they're not applicable to Solr codebase they do no harm and are valid commit references?

Hi [~dweiss]. [~dsmiley] had suggested on [PR 162|https://github.com/apache/solr/pull/162#issuecomment-854778916] about wiping clean of the "lucene" commits and whilst I created the SOLR-15454 "remove Lucene commits from .git-blame-ignore-revs" sub-task for it (since it is more to do with the repo split effort than the automatic code formatting effort here) and was glad to learn about that new git option I hadn't come across before, well in the mids of all that to be honest I didn't consider if the _"should be wiped clean"_ is maybe more _"could be wiped clean"_ instead. So thanks for catching this, and really I can see it both ways and have no strong views either way really.

[https://github.com/apache/solr/pull/163] is currently scoped as "SOLR-15454, SOLR-14920: remove Lucene commits from .git-blame-ignore-revs and add Solr commits placeholder" and I will rescope it to "SOLR-15454: remove Lucene commits from .git-blame-ignore-revs" with the suggestion to continue the "to wipe or not to wipe" discussion on SOLR-15454 then.

Commit d17a1cdcebb46a6c9d360a6569319dd66021d346 in solr's branch refs/heads/main from Christine Poerschke
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=d17a1cd ]

SOLR-14920: contrib/jaegertracer-configurator: apply & enforce 'spotless' code formatting (#162)



Commit 67f7b6edeef3327a5efbdbfa251e5f316e6f3855 in solr's branch refs/heads/main from Christine Poerschke
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=67f7b6e ]

SOLR-14920: .git-blame-ignore-revs update for contrib/jaegertracer-configurator reformatting


Just a note to say that the above two commits complete the {{contrib/jaegertracer-configurator}} reformatting work for {{solr/main}} and I opted to not backport to {{lucene-solr/branch_8x}} due to merge conflict.

It seems the LUCENE-9564 reformatting was also only for {{lucene-solr/master}} now {{lucene/main}} branches, though I can see that perhaps in some specific cases partial or full backporting could be useful. So by not backporting for {{contrib/jaegertracer-configurator}} here i do _not_ intend to set a precedent or argue against other backports in future, these things can be considered and decided on a case by case basis in my opinion.

I created linked tickets and PRs for a ton of the exceptions that were present in spotless.gradle - specifically all the modules and prometheus-exporter.

* ":solr:modules:analytics" - SOLR-16032
* ":solr:modules:analysis-extras" - SOLR-16033
* ":solr:modules:clustering" - SOLR-16034
* ":solr:modules:extraction" - SOLR-16027
* ":solr:modules:gcs-repository" - SOLR-16026
* ":solr:modules:hadoop-auth" - SOLR-16024
* ":solr:modules:hdfs" - SOLR-16025
* ":solr:modules:langid" - SOLR-16028
* ":solr:modules:ltr" - SOLR-16029
* ":solr:modules:scripting" - SOLR-16030
* ":solr:prometheus-exporter" - SOLR-16035
* ":solr:core" - Not addressed
* ":solr:solrj" - Not addressed
* ":solr:solr-ref-guide" - https://github.com/apache/solr/pull/680
* ":solr:test-framework" - Not addressed

Based on the conversation above I think this is what was agreed on getting started with.

I don't think we need a Jira issue per module but a PR per module is great.
Any way, thanks for pushing this along Kevin; it was on my mind this weekend!

Easier for me at least to keep track of as individual jiras. Its a nice todo list looking at jiras assigned to me. Besides makes it easier to tie commits to.

Separate Jira issues per modules and with those being sub-tasks of this task here could be a hybrid approach. Just tried it out with SOLR-14920 i.e. converted from task to sub-task. No strong views on any of the options though (no issue, task issue, subtask issue) and glad to see the effort revived here, thanks [~krisden]!

It's vaguely possible that I can help here. Before jumping in though, how is it all being coordinated? In particular, the issue of all those commits being difficult to do diffs across.... Being off in the weeds like I am, I have no real say in the matter of course....

When we did Lucene, Dawid maintained a separate branch where all the format-only commits went. When it was all done, there was one big merge back to trunk. This took considerable dedication on his part because all the code changes in the main line code had to be merged into the branch while the reformatting was in process. The advantage was that there was exactly one commit that could be ignored in order to be able to do effective diffs across the code base without having all the noise to deal with from format-only.

If consensus has already been reached, just let me know what the process is and I'll shut up ;). Again, I don't have any input into what the process is, just want to follow what the process is...

And I haven't been looking at JIRAs in almost a year, so I've missed any discussions here please point me in the right direction...

As of right now, all the contrib/modules have subtask jiras and PRs - so those should be good to go.

I haven't even started looking at these exceptions:
* ":solr:core" - Not addressed
* ":solr:solrj" - Not addressed
* ":solr:test-framework" - Not addressed

It should be a semi reasonable approach that we end up with commits in each independent contrib/module so shouldn't have to worry about those. I left the hard ones for later :D

Commit 1c73e456ddebcbfac22dd9e43b54ed8ac118fd00 in solr's branch refs/heads/main from Christine Poerschke
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=1c73e45 ]

SOLR-14920, SOLR-16029: contrib/ltr/src/java: apply & enforce 'spotless' code formatting (#189)



Commit 077214042aeeb460e8e689eab2217ed34ce778fc in solr's branch refs/heads/branch_9x from Christine Poerschke
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=0772140 ]

SOLR-14920, SOLR-16029: contrib/ltr/src/java: apply & enforce 'spotless' code formatting (#189)



Commit 1c8115905de6e200c6fcaee93df41aa193a596f0 in solr's branch refs/heads/branch_9_0 from Christine Poerschke
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=1c81159 ]

SOLR-14920, SOLR-16029: contrib/ltr/src/java: apply & enforce 'spotless' code formatting (#189)


*solr-ref-guide* no longer has any non-example java code. In my opinion, the example code doesn't really need to have spotless enforced and there, so IMO no need to do anything there other than remove it from the exclusion list. I tested it locally and it worked as expected, no changed files when the exclusion is removed and {{gradlew tidy}} is run.

PR for main (https://github.com/apache/solr/pull/678) and branch_9x (https://github.com/apache/solr/pull/679) to add the module spotless specific commits to .git-blame-ignore-revs. branch_9_0 will come after some more backporting happens tomorrow.

Thanks [~houston] - opened https://github.com/apache/solr/pull/680 to address solr-ref-guide

Can we do one PR for the updates to .git-blame-ignore-revs as that would be more efficient?  As a reviewer, I could go down the list and look up the commit of each quickly to ensure it's right.

[~dsmiley] not sure I follow. Each branch has different commit ids that need to be ignored. There is one PR for main and one for branch_9x. Since when you backport the commit the commit id changes. So I think the two PRs above are the minimal required.

Commit 93e8debc8fdb144f1d38b1c9e6462d5b1e0079a9 in solr's branch refs/heads/main from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=93e8deb ]

SOLR-14920: Remove solr-ref-guide from spotless exclusion


Commit d2520ee92640d0678eee0a5d997fdeaf7443e733 in solr's branch refs/heads/branch_9x from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=d2520ee ]

SOLR-14920: Remove solr-ref-guide from spotless exclusion


Commit c47df4893b64cb696e5845823971f9338b2a7233 in solr's branch refs/heads/branch_9_0 from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=c47df48 ]

SOLR-14920: Remove solr-ref-guide from spotless exclusion


PR for branch 9_0 .git-blame-ignore-revs after all the 9_0 backports - https://github.com/apache/solr/pull/683

All the modules except for ltr (backport in progress), prometheus-exporter, and solr-ref-guide have been addressed. That leaves these 3 areas not addressed yet:
* :solr:core
* :solr:solrj
* :solr:test-framework

There are 3 prs to update .git-blame-ignore-revs on the 3 affected branches for the work done so far:
* main - https://github.com/apache/solr/pull/678
* branch_9x - https://github.com/apache/solr/pull/679
* branch_9_0 - https://github.com/apache/solr/pull/683

I'll put up a PR shortly that has core, solrj and test-framework sub-directories excluded from Spotless. That just means that I changed spotless.gradle and replaced:
{quote}  case ":solr:core":
    targetExclude "src/{*}{{*}}/\{*}.java"
    break
{quote}
with
{quote}case ":solr:core":
  targetExclude "src/{*}{{*}}/admin/\{*}.java",
    "src/{*}{{*}}/api/\{*}.java",
    "src/**/analysis/*java",
    "src/{*}{{*}}/another/\{*}.java", 
    "src/{*}{{*}}/api/\{*}.java"....
break
{quote}
for all three.

There are quite a few directories, I wonder whether a Jira for each one is too much noise. Perhaps three PRs, one for each with a list of subdirectories in the note? It worked well for Lucene to just have the list of sub-projects as part of the Jira text and put our initials by each one when we started to work on it. PRs would work too, up to you.

Tests and spotless both work....

Of course I have to remember _how_ to submit a PR ;)

Hooray for me, it actually worked first time...

Given that I'm on the periphery of all this, I'd like someone to do the actual merging and let me know if I'm remembering things properly or if procedures have changed...

So I'm not sure what to do going forward, are we going to commit these one at a time or, say, do all of core at once?

 

[~krisden] [~cpoerschke]  I formatted solr/core/**/util yesterday just to test and update all my repos etc. Something of a trip down memory lane... Let me see if I have the right process here:
 # mark the code I'm reformatting to let others know not to duplicate the effort how? I suggest a separate JIRAs for core, test-framework and solrj. It worked well just to list the sub-modules in the Jira and put initials by one when starting work, then modify the Jira by, say, a strike-through when done. But I'll gladly defer to whoever is coordinating. A separate Jira for each one would be something like 123 JIRAs, do-able but noisy.
 # do the formatting
 # run tests and see if I can reproduce any failures reported, and/or does it reproduce on trunk
 # push it all to the appropriate branches
 # change the three .git-blame-ignore-revs files you identified above and push those

do people want to review all these changes or would that just make the process too cumbersome?

And, is it time to tackle core or are there objections to doing it piecemeal?

Commit 1783a907761533434789f594e904897a612e32c7 in solr's branch refs/heads/main from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=1783a90 ]

SOLR-14920: Add spotless commits to .git-blame-ignore-revs (#678)



Commit 3c63bc5174ae76c960a3842699c14ed5e6768980 in solr's branch refs/heads/branch_9_0 from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=3c63bc5 ]

SOLR-14920: Add spotless commits to .git-blame-ignore-revs (#683)



Commit f281c5854f548098aaf876fa8d8ee8e79f3584b9 in solr's branch refs/heads/branch_9x from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=f281c58 ]

SOLR-14920: Add spotless commits to .git-blame-ignore-revs (#679)



Hello? Hello? I feel like I'm shouting down a well....

Sorry [~erickerickson] saw your message and then it got buried under my .git-blame-ignore-revs updates.

1. as of right now I guess I'm coordinating? I created jiras for the work I was doing and said these are things I'm not touching
2. yup
3. yup (although I haven't seen any failures from the reformatting myself)
4. push it all to the appropriate branches <- this is where I've been trying to get at least one other review before merging. the ltr module [~cpoerschke] cleaned up a few weird formatting things (ie: java doc ending with **/ was being formatted as * SPACE */). Most of the formatting works well. If you break it into small enough chunks its reviewable - other times its not easily reviewable.
5. yup

As far as what to tackle next - I don't have an opinion other than I've argued with myself whether to do all say solrj at once or by package. Either way is going to make backporting rough. The modules at least were reasonable standalone - core/solrj is going to probably break most of the outstanding PRs (only ~100 so not terrible). My thought is we should finish the job now while the iron is hot - so lets do it and pull that bandaid off.

The test framework can also likely be done in one big PR (I don't have an opinion on SolrJ). Same bandaid analogy 

Example of what test-framework looks like as a single reformatting:
* https://github.com/apache/solr/pull/704

I'm surprised its only 94 files. Ignoring whitespace only changes its not terrible: https://github.com/apache/solr/pull/704/files?w=1 

How brave do you want to be? Has anyone found anything that's totally
objectionable or incorrect yet? If we haven't, and we have some faith that
executing enough tasks will eventually flush out all the gotchas (see a few
below) then why go slow?

Another way to phrase it is whether anyone's seen spotless do something we
can't live with after we execute all the relevant tasks?

Just for yucks, I took a fresh pull of Solr, then removed the
targetExcludes from the spotless task except for hdfs. Then I ran
spotlessApply on it all. All tests pass with about 3,371 files changed. Is
there any real benefit in hand-checking each and every change when balanced
off against this effort dragging on?

We could just make the mass change and check it all in after we can build,
test, and run all the tasks that might be affected. I'd like to give folks
a heads up and maybe an opportunity to clean some things up first. The
beauty of this is that it's pretty trivial to actually do, it'd take about
a day, most of that running tests. Now that I've been down the path once,
it should be quick...

That would also allow a single commit that could be rolled back in the
worst case. Well, I guess four commits considering the three
.git-blame-ignore-revs.

I did find a few problems, all were easily fixable:

   1. the file:
   solr/core/src/test/org/apache/solr/response/transform/TestSubQueryTransformer.java
   where spotless barfed, but that was due to the license text being repeated
   part way through the imports. Once I deleted that (and left the one at the
   top of the file of course), spotless worked fine.
   2. there were a few places where the reformatting caused "empty <code>
   block found" due to it putting a <code> block in the javadoc at the end of
   a line and the remainder ("@Logger</code>") on the next line. I changed the
   wording a bit to make that not break across the line.
   3. there were some weirdly formed links in the javadocs, not a big deal
   just had to move some double quotes around.
   4. some comment splits made the validateLogCalls flag some
   "questionable" items that really weren't, again easily fixed.
   5. javadocs generated from LogListener.java has an extensive <code>
   section that would _not_ make it through some of the doc checks since
   somehow (not Spotless' fault) a </div> tag got inserted. I managed to get
   around all that by using <pre> in place of the <code> tag.
   6. These fixes are a bit hacky but they work...

So, now that I've been through the process once, I'll volunteer to make a
new fork of solr (apparently some things got moved around lately) and put
it up for perusal. In particular, anyone who knows enough about the
publishing process (docs, ref guide, etc) to give them a spin would be
helpful. Then we can discuss.....

Since I'm starting over, and since it's toward evening, I won't have that
up until tomorrow....

Thoughts?




So test-framework is definitely reasonable to do in one chunk. The PR I put up above is ready for review.

core and solrj I would definitely break up - at least into test and non test or something else. For giggles I put the draft PRs up to see how bad it is. There are a lot more files changed :D
* core - https://github.com/apache/solr/pull/705
* solrj - https://github.com/apache/solr/pull/706


[~erickerickson] Sometimes the reformatted code shows verbosity that could be improved easily.  For example some of us (_not me!_) are fans of {{String.format}}, even when just doing string concatenation.  Use of that can make the difference in multiline overflow.  Also sometimes a comment might be at the end of a line, then spotless reflows to go to the next line.  Moving it to a comment preceding the line looks nicer.

Well, it went faster the second time around. My fork ([https://github.com/ErickErickson/solr)] has all of solr run through Spotless with no exclusions for perusal..... It is a fork of the main line code as of about 6 PM Eastern....

Note, all I can say at this point is that all the tests pass and "gradlew build" succeeds. I'm a bit uncertain about all the document builds, the website (Antora?) and I have certainly not diff'ed each file individually.....

I'll fade into the background now and watch the discussion for a day or three... ;)

[~dsmiley]  I totally agree that spotless sometimes leads to unaesthetic results that could be improved. The question is whether those improvements should be made as part of this massive reformatting with the attendant delay and effort or just left as Spotless modifies them until someone who's working on the code for other reasons has reason to neaten it up.

There are 3,400 files or so and about a zillion reformatted lines. At this scale, trying to examine each change and figure out whether/how to do it better is error-prone. Mixing whole-file reformatting, especially at this scale, with code changes is a recipe for making any code changes that actually mess something up nearly impossible to find in the noise, made worse if we skip this revision for git blame.....

My $0.02 anyway. This effort has languished for over a 18 months, so I keep repeating to myself "progress, not perfection"...

So test-framework is being reviewed here: https://github.com/apache/solr/pull/704 - I think this is pretty close with some of the minor items being addressed today.

I went through solrj with a fine tooth comb: https://github.com/apache/solr/pull/706 - [~erickerickson] I could use your help here on specifically "solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/" where there are a TON of changes to a few files. I excluded that path. 

core probably needs to be split into test and non test - it is just too many files to do at once - https://github.com/apache/solr/pull/705.

Commit 2b567e7bb23aa7b5d94e933c68f6966fb99b65b9 in solr's branch refs/heads/main from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=2b567e7 ]

SOLR-14920: Spotless formatting for test-framework (#704)



Commit 598092bce5ec44343bde5006c466cb1a76163fc4 in solr's branch refs/heads/branch_9x from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=598092b ]

SOLR-14920: Spotless formatting for test-framework (#704)



test-framework spotless change merged to main and branch_9x. I did NOT merge it into branch_9_0.

Why not 9_0?  I think we should have all of 9 follow this new standard.

At least wanted to make sure it went ok in branch_9x and main first and there are a few conflicts on branch_9_0. I can definitely push it to branch_9_0.

solrj spotless is ready for review - https://github.com/apache/solr/pull/706 

I went through all ~975 files and fixed up something like 150 findings (see resolved comments in pr if you are interested). Hopefully avoids a lot of the known issues :D

test-framework spotless change merged to branch_9_0 as well.

Commit 5c1d7958c670c4466d3e862ee3c9e372abada5d1 in solr's branch refs/heads/branch_9_0 from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=5c1d795 ]

SOLR-14920: Spotless formatting for test-framework (#704)


[~krisden]. OK, I'll grab solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/ later tonight, probably tomorrow before I have anything though....

For Solr Core - I put up two PRs and working through reviewing the ~2300 files total changed between them. I'm about ~500 files through so far. Its been decently quick going once get into a rhythm:
* non-test only - https://github.com/apache/solr/pull/705
* test only - https://github.com/apache/solr/pull/711

These aren't ready for outside review yet, but should be early next week I'd guess.

Just a reminder: solrj spotless is ready for review - https://github.com/apache/solr/pull/706

Hello

PR #713 has all the solrj/stream/io changes. I went through them reasonably thoroughly, so I think it's ready for review.

spotless.gradle needs to be reconciled since I added everything under solrj _except_ stream/io in the targetExclude list. Should be straight-forward.

I'll get to 706 this weekend.

[~krisden] 

I finished PR 706... My comments are a little inconsistent, basically anything that says "tighten" or "awkward" is just pointing out when Spotless split comments to EOL.

 

 

Commit f08f7bb3ef90381078e427f0d164a9f13afe070c in solr's branch refs/heads/main from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=f08f7bb ]

SOLR-14920: Spotless formatting for solrj (#706)

* Exclude `solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/` from spotless due to significant changes required

Commit 5345c82c44f3bab041e624e9a222df6b60f21612 in solr's branch refs/heads/branch_9x from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=5345c82 ]

SOLR-14920: Spotless formatting for solrj (#706)

* Exclude `solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/` from spotless due to significant changes required

merged solrj spotless formatting to main and branch_9x minus `solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/`. The `solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/` test files need a bunch of work.

Big thanks to [~erickerickson] and [~dsmiley] for reviewing

Now that solrj is merged.

solr core test files is ready for review - https://github.com/apache/solr/pull/711. I already did a first pass review of all the files and fixes for all those issues identified.

Commit 061fc3ffafb4ede5849a4740192ffd4f36a3e93e in solr's branch refs/heads/branch_9_0 from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=061fc3f ]

SOLR-14920: Spotless formatting for solrj (#706)

* Exclude `solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/` from spotless due to significant changes required


merged solrj spotless formatting to branch_9_0 as well.

Reminder solr core test files is ready for review:  https://github.com/apache/solr/pull/711

I should have solr core non test files ready for review tomorrow.

I'll see if I can get to 711.

Reminder, 713 is ready to review (stream/io)

[~erickerickson] I pulled your https://github.com/apache/solr/pull/713 changes into https://github.com/apache/solr/pull/706 before merging. 

Very strangely, I'm getting formatting errors only on branch_9_0 now for XMLResponseParser.java



Yea I can't seem to reproduce. I emailed solr-dev this morning subject: [JENKINS] Solr » Solr-Check-9.0 - Build # 385 - Still Failing! 

I'm happy to fix, but idk how I can't see it on branch_9_0.

Commit e3be9981d216a2851fd511d9af72b61f2cfd9f31 in solr's branch refs/heads/branch_9_0 from Mike Drob
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=e3be998 ]

SOLR-14920 Spotless Apply


Commit 86ce5d6f5c2f0484068b99830029a5f85bfeab02 in solr's branch refs/heads/main from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=86ce5d6 ]

SOLR-14920: Address XMLResponseParser missed reformatting


Chatted w/ [~mdrob] on Slack.

There are 3 same case statements in XMLResponseParser and I had fixed 1/3 to address the comment splitting to a new line. This seems to break on some machines but not on my machine. The fix is to make sure all 3 cases have been addressed and break to the comment to a new line. This was missed on main, branch_9x, and branch_9_0.

Commit 0673de0d6fc6c8c151f10ea96e727370875d99da in solr's branch refs/heads/branch_9x from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=0673de0 ]

SOLR-14920: Address XMLResponseParser missed reformatting


Commit 9c6e1a72aa3d927d5020d111df88acde3446eb81 in solr's branch refs/heads/branch_9_0 from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=9c6e1a7 ]

SOLR-14920: Address XMLResponseParser missed reformatting


Commit 73e64a959c93f721fd72e9d701cd8f3d925c9688 in solr's branch refs/heads/main from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=73e64a9 ]

SOLR-14920: Spotless formatting for core - test only (#711)



Commit 4291f4ba69cc94034549018398b8f9069838db25 in solr's branch refs/heads/branch_9x from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=4291f4b ]

SOLR-14920: Spotless formatting for core - test only (#711)


Ok minus the minor hiccup around XMLResponseParser - things seem to still be good :D

solr core test only has been merged to branch_9x and main. I will plan to merge to branch_9_0 tomorrow (have that staged locally)

solr core non test - https://github.com/apache/solr/pull/705 - is almost ready for review. I am halfway through making changes and should have them later today or early tomorrow.

With the above that would only leave "solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/" with an exception. [~erickerickson] do you want to tackle that specifically? It is the TEST specific files there. Its not many files, but the files have a lot of formatted json and its ugly when it goes through spotless.

solr core non test is ready for review: https://github.com/apache/solr/pull/705

Commit 7d5625a0e42436bae177ecf6256e11b146d19147 in solr's branch refs/heads/branch_9_0 from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=7d5625a ]

SOLR-14920: Spotless formatting for core - test only (#711)


solr core test only merged to branch_9_0

solr core non test is ready for review: https://github.com/apache/solr/pull/705 

With the above that would only leave "solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/" with an exception. - tracked under SOLR-16070

Finished review of 711, see the comments there. Again, nothing functionally a problem, but a bunch of weird comment breaks...

I definitely think the scope should include formatting our XML files, some of which have some wonky indentation.  It's painful to see this wonky-ness copy-pasted into new projects for schemas/configs, thus seeing it downstream.

I'll start looking at 705.

{quote}I definitely think the scope should include formatting our XML files, some of which have some wonky indentation. It's painful to see this wonky-ness copy-pasted into new projects for schemas/configs, thus seeing it downstream.{quote}

Feel free to create a related jira or subtask to tackle it? I'm not planning to tackle XML files right now :)

solr core non test is being reviewed and probably close to merge: https://github.com/apache/solr/pull/705

[~erickerickson] did a thorough review of some of the Spotless changes and those are being addressed in https://github.com/apache/solr/pull/720

I created 3 draft PRs for adding the recent spotless commits to .git-blame-ignore-revs:
* main - https://github.com/apache/solr/pull/721
* branch_9x - https://github.com/apache/solr/pull/722
* branch_9_0 - https://github.com/apache/solr/pull/723

The above PRs need to be updated after the first two PRs are merged.

finished reviewing 705. The usual nits, but only 21 of them, which ya gotta admit is pretty remarkable given the number of files changed.

Nothing functional, mostly odd breaks.

I've no doubt that another review would find more, just due to the sheer volume; we're past diminishing returns I think.

[~ctargett]  (or whoever runs javadocs next). Lots and lots and lots of reformatting happened in the javadocs, but the all appear to be harmless; things like:
{quote}<p>

some text
{quote}
becoming
{quote}<p>some text
{quote}
which theoretically shouldn't matter. This is juspit a heads up if something weird pops out you'll know who to have fix it...

 

I'll be away on a road trip for the next couple of weeks so I won't be doing anything more unless someone pings me directly and I can answer via e-mail. Leaving my computer at home...

Commit 7f7033e24169652303b7f1feb382b3d77320f9ec in solr's branch refs/heads/main from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=7f7033e ]

SOLR-14920: Spotless formatting for core - test only - followup (#720)



Commit c99af207c761ec34812ef1cc3054eb2804b7448b in solr's branch refs/heads/main from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=c99af20 ]

SOLR-14920: Spotless formatting for core - non-test only (#705)

Co-authored-by: David Smiley <dsmiley@apache.org>
Co-authored-by: Erick Erickson <erick@apache.org>

Commit 7e628970044e2e79089aebbe506ee74a6e2ed4da in solr's branch refs/heads/branch_9x from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=7e62897 ]

SOLR-14920: Spotless formatting for core - test only - followup (#720)



Commit 501aa0228619b06ba9f962168b584b1c6d8ee4b5 in solr's branch refs/heads/branch_9x from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=501aa02 ]

SOLR-14920: Spotless formatting for core - non-test only (#705)

Co-authored-by: David Smiley <dsmiley@apache.org>
Co-authored-by: Erick Erickson <erick@apache.org>


Thanks [~erickerickson] appreciate all the help - Enjoy your trip :D

Core non test has been pushed to main and branch_9x. So that is all the big major pieces! 

The two PRs for updating .git-blame-ignore-revs are ready for review:
* main - https://github.com/apache/solr/pull/721
* branch_9x - https://github.com/apache/solr/pull/722

I am readying the branch_9_0 changes and will merge them this weekend sometime if everything still looks good.

Commit 2901ec0306e797fcdab75a196a6c045b8aa37190 in solr's branch refs/heads/branch_9_0 from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=2901ec0 ]

SOLR-14920: Spotless formatting for core - test only - followup (#720)



Commit bba22d8cb0ed56f8db06624785f9a6a4324170a3 in solr's branch refs/heads/branch_9_0 from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=bba22d8 ]

SOLR-14920: Spotless formatting for core - non-test only (#705)

Co-authored-by: David Smiley <dsmiley@apache.org>
Co-authored-by: Erick Erickson <erick@apache.org>


All major spotless changes except for "solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/" tracked in SOLR-16070 have been merged into main, branch_9x, and branch_9_0. Big thanks to [~erickerickson] and [~dsmiley] for reviewing these changes and helping out. 

These PRs are ready for review for adding the recent spotless commits to .git-blame-ignore-revs:
* main - https://github.com/apache/solr/pull/721
* branch_9x - https://github.com/apache/solr/pull/722
* branch_9_0 - https://github.com/apache/solr/pull/723

Commit 8e0f1734e37e22b3e59f9fd70dffca93d3540bd2 in solr's branch refs/heads/main from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=8e0f173 ]

SOLR-14920: Ignore spotless formatting for test-framework, solrj, and core (#721)



Commit 98e4262413a96d877d27ba80652a2d3fbc2b8b50 in solr's branch refs/heads/branch_9x from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=98e4262 ]

SOLR-14920: Ignore spotless formatting for test-framework, solrj, and core (#722)



Commit b6cc47774d1750affeb1174d97920880da6fda70 in solr's branch refs/heads/branch_9_0 from Kevin Risden
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=b6cc477 ]

SOLR-14920: Ignore spotless formatting for test-framework, solrj, and core (#723)



Only "solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/" tracked in SOLR-16070 is left to do and [~erickerickson] was going to take a look at it. I know he is out for a few weeks, but this is basically done :D

[~krisden]  I’m pretty sure I pushed the fixes for SOLR-16070 to the branch on your repo. At least I tried…

SOLR-16070 is merged meaning that for 9.1 all Solr Java code (not auto generated) is formatted by spotless! Thanks all who helped (especially [~cpoerschke], [~dsmiley], [~erickerickson])!

I'm marking this as 9.0 because the very vast majority of source code was updated for 9.0.  Very little slipped to 9.1.  If someone asks me when did the source code formatting go into effect, I'd say 9.0 (not 9.1 and not 8.x even though some module did early).

Closing after the 9.0.0 release

