Hit this issue in a core debug build.

This looks like a duplicate of IMPALA-10877 as well.

What I'm seeing here is that sometimes it takes longer than 30s to free up reserved memory from prior cancelled runs. So we timeout before the new query is admitted. Probably worth digging into why it takes so long to propagate.

We see messages like
{quote}
I1004 10:41:31.239286 86653 admission-controller.cc:2131] Could not dequeue query id=d54ef928e7df6a22:027bbb3400000000 reason: Not enough memory available on host michaelsmith-22742:27002. Needed 4.00 GB but only 4.00 GB out of 4.00 GB was available.
I1004 10:41:31.289567 86653 admission-controller.cc:1879] Trying to admit id=d54ef928e7df6a22:027bbb3400000000 in pool_name=default-pool executor_group_name=default-pool-group1 per_host_mem_estimate=180.04 MB dedicated_coord_mem_estimate=104.04 MB max_requests=-1 max_queued=200 max_mem=100.00 GB
I1004 10:41:31.289681 86653 admission-controller.cc:1887] Stats: agg_num_running=0, agg_num_queued=1, agg_mem_reserved=426.93 KB,  local_host(local_mem_admitted=0, num_admitted_running=0, num_queued=1, backend_mem_reserved=0, topN_query_stats: queries=[], total_mem_consumed=0; pool_level_stats: num_running=0, min=0, max=0, pool_total_mem=0)
{quote}
in the 2nd coordinator logs. It's trying to queue, but unable to because agg_mem_reserved is non-zero and our query requires exactly the admission limit.

I'm not quite sure where this agg_mem_reserved comes from. It doesn't seem to match the prior query profiles. It takes >30s to reach 0, but if I extend the timeout that fails here it eventually does reach 0 and the test passes.

Commit 11157a87016fc2408a5ae649aed7cdfb8a0e5d3b in impala's branch refs/heads/master from Michael Smith
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=11157a870 ]

IMPALA-10889: Allow extra 1MB for fragment cancellation

After queries are cancelled, it can take some time (>30s in some
instances) to fully cancel all fragment instances and fully reclaim
reserved memory. The test and query limits were exactly matched, so any
extra reservation would prevent scheduling, causing the test to
frequently time out. With the fix, a 1MB of extra memory is reserved to
break the tie thus avoiding the time out. The extra 1MB of memory can be
seen in logs printing agg_mem_reserved.

Rather than extend timeouts and make the test run longer, add a small
buffer to the admission limit to allow for fragment instance cleanup
while the test runs.

Change-Id: Iaee557ad87d3926589b30d6dcdd850e9af9b3476
Reviewed-on: http://gerrit.cloudera.org:8080/19092
Reviewed-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Sorry that I haven't investigated this yet. Assigning this to [~MikaelSmith] who makes the progress.

