This test failed in a precheckin run. It looks like this test is making assertions about how many threads are running in the JVM, which seems like it is very sensitive to the environment and can't be relied on. In this case, it actually found fewer threads running than when the test started!

https://concourse.apachegeode-ci.info/builds/22727
{noformat}
org.apache.geode.distributed.LocatorLauncherJmxManagerLocalRegressionTest > locatorWithNonZeroJmxPortCleansUpWhenStopped FAILED
    org.awaitility.core.ConditionTimeoutException: Assertion condition defined as a lambda expression in org.apache.geode.distributed.LocatorLauncherJmxManagerLocalRegressionTest expected:<[10]> but was:<[8]> within 30 seconds.
        at org.awaitility.core.ConditionAwaiter.await(ConditionAwaiter.java:145)
        at org.awaitility.core.AssertionCondition.await(AssertionCondition.java:122)
        at org.awaitility.core.AssertionCondition.await(AssertionCondition.java:32)
        at org.awaitility.core.ConditionFactory.until(ConditionFactory.java:890)
        at org.awaitility.core.ConditionFactory.untilAsserted(ConditionFactory.java:711)
        at org.apache.geode.distributed.LocatorLauncherJmxManagerLocalRegressionTest.assertThatThreadsStopped(LocatorLauncherJmxManagerLocalRegressionTest.java:97)
        at org.apache.geode.distributed.LocatorLauncherJmxManagerLocalRegressionTest.locatorWithNonZeroJmxPortCleansUpWhenStopped(LocatorLauncherJmxManagerLocalRegressionTest.java:93)
	
        Caused by:
        org.junit.ComparisonFailure: expected:<[10]> but was:<[8]>
            at sun.reflect.GeneratedConstructorAccessor26.newInstance(Unknown Source)
            at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
            at org.apache.geode.distributed.LocatorLauncherJmxManagerLocalRegressionTest.lambda$assertThatThreadsStopped$0(LocatorLauncherJmxManagerLocalRegressionTest.java:98)

{noformat}