Don't necessarily try to make things deterministic. If order doesn't matter, change the test to check for an unordered collection.

Hi [~dschmitt], thanks for reporting this. How can we reproduce the problem? Does it happen by default on your environment?

The environment I'm running these tests in automatically randomizes the iteration order of Java collections that have no ordering guarantees (e.g. HashSet). It does so to identify potential latent bugs in the code/tests that make assumptions about these ordering guarantees.

While I realize this environment is non-standard, I think the concern here is that many of these tests will become flaky if a JDK version came out which did change the underlying iteration order of these collections.

I'm not sure how you could replicate this behavior short of overriding the HashSet iteration order in your own environment.

It's worth fixing. Even if we don't have an environment to reproduce the failures, we'd accept a fix that changes the matcher used in tests.

Note that we have {{Matchers.equalsUnordered(E...}}. You could use that, or write something similar.

