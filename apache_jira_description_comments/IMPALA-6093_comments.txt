I also saw this happen on an ASAN build. I think the way this test is written is fundamentally flaky if it's run in parallel with other tests. Maybe we should just move it to the set of serially executing tests (and maybe move it to exhaustive).

seems like this already is marked to be executed serially. The test is supposed to time out after 40 seconds of executing its query but the logs indicate that it returns in less than 40 seconds. 


{noformat}
22:33:40 query_test/test_compressed_formats.py::TestCompressedFormats::test_compressed_formats[vector0] SKIPPED
22:33:51 query_test/test_hash_join_timer.py::TestHashJoinTimer::test_hash_join_timer[test cases: ['select /*+straight_join*/ count(*) from (select distinct * from functional.alltypes where int_col >= sleep(5)) a join /* +SHUFFLE */ functional.alltypes b on (a.id=b.id)', 'HASH JOIN'] | exec_option: {'batch_size': 0, 'num_nodes': 0, 'disable_codegen_rows_threshold': 0, 'disable_codegen': False, 'abort_on_error': 1, 'exec_single_node_rows_threshold': 0} | table_format: text/none] PASSED
22:33:56 query_test/test_hash_join_timer.py::TestHashJoinTimer::test_hash_join_timer[test cases: ['select /*+straight_join*/ count(*) from functional.alltypes a join /* +SHUFFLE */  (select distinct * from functional.alltypes where int_col >= sleep(5)) b on (a.id=b.id)', 'HASH JOIN'] | exec_option: {'batch_size': 0, 'num_nodes': 0, 'disable_codegen_rows_threshold': 0, 'disable_codegen': False, 'abort_on_error': 1, 'exec_single_node_rows_threshold': 0} | table_format: text/none] PASSED
22:34:02 query_test/test_hash_join_timer.py::TestHashJoinTimer::test_hash_join_timer[test cases: ['select /*+straight_join*/ count(*) from (select distinct * from functional.alltypes where int_col >= sleep(5)) a cross join  functional.alltypes b where a.id > b.id and b.id=99', 'NESTED LOOP JOIN'] | exec_option: {'batch_size': 0, 'num_nodes': 0, 'disable_codegen_rows_threshold': 0, 'disable_codegen': False, 'abort_on_error': 1, 'exec_single_node_rows_threshold': 0} | table_format: text/none] PASSED
22:34:07 query_test/test_hash_join_timer.py::TestHashJoinTimer::test_hash_join_timer[test cases: ['select /*+straight_join*/ count(*) from functional.alltypes a CROSS join  (select distinct * from functional.alltypes where int_col >= sleep(5)) b where a.id>b.id and a.id=99', 'NESTED LOOP JOIN'] | exec_option: {'batch_size': 0, 'num_nodes': 0, 'disable_codegen_rows_threshold': 0, 'disable_codegen': False, 'abort_on_error': 1, 'exec_single_node_rows_threshold': 0} | table_format: text/none] FAILED
22:34:36 query_test/test_hbase_queries.py::TestHBaseQueries::test_hbase_inserts[exec_option: {'batch_size': 0, 'num_nodes': 0, 'disable_codegen_rows_threshold': 0, 'disable_codegen': False, 'abort_on_error': 1, 'exec_single_node_rows_threshold': 0} | table_format: hbase/none] PASSED
{noformat}


This means the query did finish, but unless we get a look at the query profile, its difficult to figure out what might have went wrong. I suggest that the next step here should be to modify the test and print the query profile if the test fails and since its a flaky test, we ll have to wait the next time it fails and look at the query profile it generated.

IMPALA-6093: diagnostics for flaky TestHashJoinTimer

We don't know the root cause yet but try to improve things:
* Eliminate one possible cause of flakiness - unfinished fragments left
  from previous queries.
* Print a profile if an assertion fails so we can see why it failed.

Testing:
Ran core tests.

Change-Id: Ic332dddd96931db807abb960db43b99e5fd0f256
Reviewed-on: http://gerrit.cloudera.org:8080/8403
Reviewed-by: Tim Armstrong <tarmstrong@cloudera.com>
Tested-by: Impala Public Jenkins

We haven't seen it reoccur recently. We don't have anything actionable now, but if it happens again we will have a profile so can reopen this and continue investigating.

