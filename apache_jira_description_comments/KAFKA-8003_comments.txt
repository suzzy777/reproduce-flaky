Happend again: https://jenkins.confluent.io/job/apache-kafka-test/job/2.2/48/testReport/junit/kafka.api/TransactionsTest/testFencingOnTransactionExpiration/

Happened on 2.2 again:

{code}
10:00:48 kafka.api.TransactionsTest > testFencingOnTransactionExpiration FAILED
10:00:48     java.lang.AssertionError: expected:<1> but was:<0>
10:00:48         at org.junit.Assert.fail(Assert.java:88)
10:00:48         at org.junit.Assert.failNotEquals(Assert.java:834)
10:00:48         at org.junit.Assert.assertEquals(Assert.java:645)
10:00:48         at org.junit.Assert.assertEquals(Assert.java:631)
10:00:48         at kafka.api.TransactionsTest.testFencingOnTransactionExpiration(TransactionsTest.scala:486)
{code}

Removed Fix Version 2.2.1 as this issue is not blocking that release.

gwenshap commented on pull request #6905: KAFKA-8003: Fix flaky testFencingOnTransactionExpiration
URL: https://github.com/apache/kafka/pull/6905
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


Removed Fix Version 2.2.2 as this issue is not blocking that release.

Different test method {{kafka.api.TransactionsTest.testSendOffsetsWithGroupId()}}
{quote}org.opentest4j.AssertionFailedError: Topic [topic1] metadata not propagated after 60000 ms at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:39) at org.junit.jupiter.api.Assertions.fail(Assertions.java:117) at kafka.utils.TestUtils$.waitForAllPartitionsMetadata(TestUtils.scala:852) at kafka.utils.TestUtils$.createTopic(TestUtils.scala:367) at kafka.integration.KafkaServerTestHarness.createTopic(KafkaServerTestHarness.scala:133){quote}
STDOUT:
{quote}[2021-02-26 11:17:26,311] WARN SASL configuration failed: javax.security.auth.login.LoginException: No JAAS configuration section named 'Client' was found in specified JAAS configuration file: '/tmp/kafka8173812164698481311.tmp'. Will continue connection to Zookeeper server without SASL authentication, if Zookeeper server allows it. (org.apache.zookeeper.ClientCnxn:1094) [2021-02-26 11:17:26,311] ERROR [ZooKeeperClient Kafka server] Auth failed. (kafka.zookeeper.ZooKeeperClient:74) [2021-02-26 11:17:26,647] ERROR [RequestSendThread controllerId=0] Controller 0 fails to send a request to broker localhost:41953 (id: 2 rack: null) (kafka.controller.RequestSendThread:76) java.lang.InterruptedException at java.util.concurrent.locks.AbstractQueuedSynchronizer.tryAcquireSharedNanos(AbstractQueuedSynchronizer.java:1326) at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:277) at kafka.utils.ShutdownableThread.pause(ShutdownableThread.scala:82) at kafka.controller.RequestSendThread.doWork(ControllerChannelManager.scala:234) at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:96){quote}

A third test method:
{quote}org.opentest4j.AssertionFailedError: Consumed 0 records before timeout instead of the expected 1000 records at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:39) at org.junit.jupiter.api.Assertions.fail(Assertions.java:117) at kafka.utils.TestUtils$.pollUntilAtLeastNumRecords(TestUtils.scala:852) at kafka.utils.TestUtils$.consumeRecords(TestUtils.scala:1476) at kafka.api.TransactionsTest.testMultipleMarkersOneLeader(TransactionsTest.scala:588){quote}
STDOUT
{quote}[2021-03-02 10:31:53,233] ERROR [ZooKeeperClient Kafka server] Auth failed. (kafka.zookeeper.ZooKeeperClient:74) [2021-03-02 10:31:53,315] WARN SASL configuration failed: javax.security.auth.login.LoginException: No JAAS configuration section named 'Client' was found in specified JAAS configuration file: '/tmp/kafka5762171763596437663.tmp'. Will continue connection to Zookeeper server without SASL authentication, if Zookeeper server allows it. (org.apache.zookeeper.ClientCnxn:1094){quote}
Seems to be the same issue as above? 

