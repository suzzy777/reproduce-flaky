Of course, HowToContribute wiki would need to be updated with this info as well.

A big hearty +1!

This should also catch uses of sleep via java.util.concurrent.TimeUnit

Then, how to write a unit test for simulating a slow writer?

Should this patch also count the use of utility functions that use Thread.sleep(), functions like MiniDFSCluster.waitActive(), DFSTestUtils#waitReplication()? 

A standard use of MiniDFSCluster is to first new a cluster and then call waitActive() to wait until it is up. Does this jira discourage the use of MiniDFSCluster in our junit tests?

The intent is to avoid writing tests with race conditions affecting success. A \-1 from test-patch requires that one demonstrate that the sleep duration is orthogonal to the outcome, e.g. that the slow writer is simply slow, and the test is measuring the system's response to it. While writing flaky tests doesn't require Thread.sleep, it's a lot easier with it. Polling should be OK where we don't offer callbacks.

> ... but in general they lead to flaky unit tests that fail sporadically. ...

Hi Nigel, I guess you must have seen many cases on flaky unit tests caused by Thread.sleep().  Could you list out some of JIRAs?

Nicholas, this was a common problem back when I was more involved in the individual features and patches going into the release.  I remember many times that tests failed because of sleep() calls and Owen was constantly pushing on committers to remove sleep calls and think more deeply about how to test a feature.  It doesn't take much imagination to realize that the amount of time that a test sleeps is based on an assumption about the speed of the machine -- an assumption that can be wrong in some environments.


Yes, you are right that we should not make assumption about the speed of the machine.

But sleep(..) is necessary in some cases.  May be the contributor should justify why sleep(..) is necessary in the new tests.  Sounds good?

BTW, grepping "Thread.sleep(" and a "+" may not work well since there are many ways to sleep without having "Thread.sleep(" in the codes. :D

Closing this due to lack of consensus.

