[~chadrik] This looks related to your recent PR: https://github.com/apache/beam/pull/10367/files#diff-24277f98ee26157938eb64d5fe6e3c7eR65

It works for pre-commit, so I'm assuming that this goes back, once again, to the inconsistent way that the beam python sdk is built.   

Here's my old PR attempting to get everything using tox and pep517:  [https://github.com/apache/beam/pull/10038]

 

 

Only Python 2 postcommit is affected, if that helps.

IIRC, the reason it only happens for python2 is that the `google` package in python2 uses .pth files to find sub-packages, and .pth files must be in a "site" directory, so if it's installed in a non-standard way (into a directory that isn't one of the python interpreter's official site-packages directories), it won't be able to find the sub-packages.   It is possible to mark a directory as a "site" directory using site.addsitedir().  For more info see [https://docs.python.org/2/library/site.html]

In python3 namespace packages were redesigned in order to avoid this brittle workflow:  [https://www.python.org/dev/peps/pep-0420/]

If this test went through tox, I'm pretty sure this error would not occur.

What are the chances that we can work on getting all tests running through tox in the near term?

 

 

 

 

 

I was trying to debug this, converted it to a tox environment, but still got the same errors.
Weird thing is, if I run a shell on the docker image, and run "tox -e hdfs_integration_test" twice, it succeeds the second time.

the protobuf package is a dependency of grpcio-tools, which is part of build_requirements.txt.   Did you include build_requirements.txt to the deps for your tox env?   that could help, but it also might not:  I can't remember if the deps are installed in time to affect setup.py (which calls gen_protos).  I think it may not be, which is where pyproject.toml and pep517 comes into play:  they specify the deps that need to be installed before setup.py runs.   

I'm currently rebasing my old testing refactor branch to see if it helps.  

can you push your current WIP solution for this so that I can try to help out.  I'm on vacation tomorrow and monday, but I may be able to chip away at some things on the plane. 

 

 

Just in case it's not clear, I think you'd want to edit the Dockerfile to use tox, here:

 
{code:java}
CMD holdup -t 45 http://namenode:50070 http://datanode:50075 && \
    echo "Waiting for safe mode to end." && \
    sleep 45 && \
    hdfscli -v -v -v upload -f kinglear.txt / && \
    python -m apache_beam.examples.wordcount \
        --input hdfs://kinglear* \
        --output hdfs://py-wordcount-integration \
        --hdfs_host namenode --hdfs_port 50070 --hdfs_user root
 {code}

I updated my PR.  There are still other problems with it, but I solved the google.protobuf import problem.  

There are a few pieces to the solution:
 * use a pyproject.toml file to specify build requirements: [https://github.com/apache/beam/pull/10038/files#diff-71ede7e13a310beaedc4466b48096e26R18]
 * use pep517 module to build source: [https://github.com/apache/beam/pull/10038/files#diff-d3cc66016c37760e131f228abbee6667R34]
 * add pep517's temp build directory to the site dir to allow the google package's .pth file to work:  [https://github.com/apache/beam/pull/10038/commits/ed06bf1b17e5f60d7f6bcf7766b93e4eaf4b86ff]

I'm sure there are easier ways to hack this to work without such dramatic changes, but this approach sets us on a course to untangle the mess that we have now. 

 

 

Here's my solution from last night: https://github.com/apache/beam/pull/10629
It's cleaned up and works on py3.7, but still has the same failure in py2.


My fix for py2 is here: https://github.com/apache/beam/pull/10629/commits/86a29197f9285bdbd10cbeecd3166d90e1c17a61

The " -r build-requirements.txt" in tox.ini is for consistency with the other environments.


My solution doesn't require the workaround in setup.py, which TBH I still don't fully follow.
WDYT about my fix, which essentially matches what setupVirtualenv does?

edit: just saw your comments on the PR

{quote}
My solution doesn't require the workaround in setup.py, which TBH I still don't fully follow.
{quote}

It's some seriously esoteric python stuff, but here's a terse summary.  The protobuf package in python2 is installed as "protobuf", but it uses a protobuf-3.11.0-py3.7-nspkg.pth file (living next to the installed package) to mount the package under the "google" namespace package.  This was an effort by google to allow all of their various python libs to install into one parent "google" namespace.  All well and good except that .pth files don't work unless they are in one of the special directories returned by {{site.getsitepackages()}}, which is by default just the python interpreter's native lib and site-packges directories.  So if you ever do a non-standard install of protobuf (i.e. using {{pip install --target}}) then the .pth file is not read and executed by the python interpreter and the package cannot be imported as {{google.protobuf}}. 

Got all that?  Well you can forget it all now, because they added official support for namespace packages in python3 that don't require this .pth hack  :)

{quote}
WDYT about my fix, which essentially matches what setupVirtualenv does?
{quote}

Making this match setupVirtualenv is definitely the right fix.  Obvious in retrospect!

This has gotten me motivated to revisit my pep517 changes again.  I would love some help on it if you have time. 




