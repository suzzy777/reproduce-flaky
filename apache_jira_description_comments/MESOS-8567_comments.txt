Observed it today on Ubuntu 16.04.
{noformat}
[ RUN      ] UriDiskProfileTest.FetchFromHTTP
I0211 02:44:47.614900  5392 process.cpp:3515] Handling HTTP event for process '(1466)' with path: '/(1466)/profiles'
I0211 02:44:47.615609  5392 uri_disk_profile.cpp:302] Updated disk profile mapping to 1 total profiles
W0211 02:44:47.624699  5391 uri_disk_profile.cpp:229] Failed to poll URI: Failed to open file: No such file or directory
I0211 02:44:47.625382  5389 process.cpp:3515] Handling HTTP event for process '(1466)' with path: '/(1466)/profiles'
W0211 02:44:47.626112  5395 uri_disk_profile.cpp:229] Failed to poll URI: Failed to open file: No such file or directory
W0211 02:44:47.626336  5392 uri_disk_profile.cpp:251] Fetched profile mapping does not contain profile 'profile'. The fetched mapping will be ignored entirely
../../src/tests/disk_profile_tests.cpp:683: Failure
Failed to wait 15secs for future
../../src/tests/disk_profile_tests.cpp:629: Failure
Actual function call count doesn't match EXPECT_CALL(*server.process, profiles(_))...
         Expected: to be called 3 times
           Actual: called twice - unsatisfied and active
[  FAILED  ] UriDiskProfileTest.FetchFromHTTP (15032 ms)
{noformat}

Disabling this test for now.

Root cause identified: {{FutureSatisfy(&secondCall)}} (and thus the second {{Clock::advance()}}) races with the dispatching of the second {{UriDiskProfileAdaptor::_poll()}}. If the second {{_poll()}} runs after the clock is advanced, the third {{_poll()}} won't be dispatched.

Review: https://reviews.apache.org/r/65640/

[~chhsia0] With your patch, can we also re-enable the {{UriDiskProfileTest.DISABLED_FetchFromFile}} test?

Already did in my patch :)

{noformat}
commit afd1647b96abdc9352864f0a8e2f4c24a2f0c7d7
Author: Chun-Hung Hsiao <chhsiao@mesosphere.io>
Date: Tue Feb 13 14:08:00 2018 -0800

Fixed a race condition in `UriDiskProfileAdaptorTests`.

There was a race between `Clock::advance()` in the `FetchFromHTTP` test
and `delay()` in `UriDiskProfileAdaptorProcess::_poll`. This patch
avoids the race by enforcing an order between the dispatch of the
`__poll` function (previously `_poll`) and the clock manipulation
in the test.

Review: https://reviews.apache.org/r/65640{noformat}

