Here is the patch adding the functions:
||PR||CI||
|[trunk|https://github.com/apache/cassandra/pull/1892]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2091/workflows/1d94a287-a23f-4c6c-a594-27b2edd18a77] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2091/workflows/e30934ad-a415-403e-9760-14f8ef9ccda9]|

And here is the documentation of each function:
||Function||Description||
|mask_null(value)|Replaces the first argument by null.
 
Examples:
mask_null('Alice') → null
mask_null(123) → null|
|mask_default(value)|Replaces its argument by an arbitrary, fixed default value of the same type. This will be **** for text values, zero for numeric values, false for booleans, etc.
 
Examples:
mask_default('Alice') → '****'
mask_default(123) → 0|
|mask_replace(value, replacement])|Replaces the first argument by the replacement value on the second argument. Both arguments should have the same type.
 
Examples:
mask_replace('Alice', 'REDACTED') → 'REDACTED'
mask_replace(123, -1) → -1|
|mask_inner(value, begin, end, [padding])|Returns the text representation of the first argument, replacing each character except the first and last ones by a padding character. The 2nd and 3rd arguments are the size of the exposed prefix and suffix. The optional 4th argument is the padding character, * by default.
 
Examples:
mask_inner('Alice', 1, 2) → 'A**ce'
mask_inner('Alice', 2, 1, '#') → 'Al##e'|
|mask_outer(value, begin, end, [padding])|Returns the text representation of the first argument, replacing the first and last character by a padding character. The 2nd and 3rd arguments are the size of the exposed prefix and suffix. The optional 4th argument is the padding character, * by default.
 
Examples:
mask_outer('Alice', 1, 2) → '\*li\*\*'
mask_outer('Alice', 2, 1, '#') → '##ic#'|
|mask_hash(value, [algorithm])|Returns a blob containing the hash of the first argument. The optional 2nd argument is the hashing algorithm to be used, according the available Java security provider. The default hashing algorithm is SHA-256.
 
Examples:
mask_hash('Alice')
mask_hash('Alice', 'SHA-512')|

Note that the functions cannot be applied to collections nor UDTs due to the limitations addressed by CASSANDRA-17811. Once we have that ticket ready these functions will be updated so they can be used on collections and UDTs.

CC [~blerer] 

I have rebased the PR on top of the changes introduced by CASSANDRA-17811, so the proposed functions can be applied to collections, tuples and UDTs:

||PR||CI||
|[trunk|https://github.com/apache/cassandra/pull/1892]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2516/workflows/1d3e9c97-fbfc-48a7-834e-c53a21129f7e] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2516/workflows/506d5055-c146-4716-8ac0-2ac9e97006aa]|

The {{mask_default}} function applied to collections simply returns an empty collection. For tuples and UDTs, it returns a tuple or UDT comprised by the default masked values of each component.

The {{mask_replace}} function is modified to support replacements of any type, included values of a type different to the replaced value.


Following the discussion on the PR about the return data types and the progress on CASSANDRA-18068 (almost ready!), I have done some changes on the behaviour of the functions:
 * {{mask_inner}} and {{mask_default}} only accept string-based values (text, ascii and varchar). The return value will be always be of the same type as the masked input.
 * {{mask_replace}} requires that the replaced value and its replacement have the same type, so the return value will be always be of the same type as the masked input.

These restrictions make that all the functions but {{mask_hash}} return values of the same value as their input. It also allows to make the functions a bit smarter when dealing with compatible types, like masking a {{text}} value by replacing it with an {{ascii}} value, so we don't need type hints in most cases.
||PR||CI||
|[trunk|https://github.com/apache/cassandra/pull/1892]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2580/workflows/85776fef-728c-407f-94af-cfbf0ddc6f87] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2580/workflows/03d1ee80-5c95-44f5-ba17-4343c5f143b1]|

The patch looks good to me. Thanks [~adelapena]

Thanks for the review :)

One last CI run before commit:
||PR||CI||
|[trunk|https://github.com/apache/cassandra/pull/1892]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2595/workflows/52ae3e38-7ec3-4b94-9e90-372f820d0e47] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2595/workflows/dd62b091-261f-4c3d-b043-09efc90fdd74]|

The test failures on this run don't seem related to the changes:
 * CompactionStrategyManagerBoundaryReloadTest.testReload-trie is CASSANDRA-18144.
 * SchemaTest.schemaReset is CASSANDRA-18151.
 * TestSecondaryIndexes.test_6924_dropping_cf is [annotated as flaky|https://github.com/apache/cassandra-dtest/blob/c4711d34097c785e70c5d46e3be0ef5051ac6a3d/secondary_indexes_test.py#L183-L184], and it seems related to CASSANDRA-17337. Didn't manage to reproduce it again with the multiplexer, neither in [trunk|https://app.circleci.com/pipelines/github/adelapena/cassandra/2596/workflows/d0168f1d-08e2-46a4-9196-a3fee86e4683/jobs/26078] nor in [the patch branch|https://app.circleci.com/pipelines/github/adelapena/cassandra/2597/workflows/7de892cf-bee6-48ee-886c-8d6c33aae0a7/jobs/26085].

Committed to trunk as [93e0ae9af62fb1bd0c4f120205d2e84809cf4e09|https://github.com/apache/cassandra/commit/93e0ae9af62fb1bd0c4f120205d2e84809cf4e09].

