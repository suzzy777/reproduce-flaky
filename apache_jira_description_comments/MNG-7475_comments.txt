Interesting....
This class one flaw, it should have been constructor injection. Setter injection implies that it is optional which it is not. Moreover, this is a managed component, you are supposed to receive a ready-to-go class, no manual management.

[~cstamas]

Code in question: https://github.com/shrinkwrap/resolver/blob/f564882d785db86460f43cc7512650e3efae3380/maven/impl-maven/src/main/java/org/jboss/shrinkwrap/resolver/impl/maven/internal/SettingsXmlProfileSelector.java#L46-L51

Reverting this would also mean to break MNG-6802 which has been open for 3,5 years. We likely could make this happen in Maven 4, but then ShrinkWrap would be broken anyway...

[~gnodet]

Same issue as in https://issues.apache.org/jira/browse/MNG-7449?focusedCommentId=17518729&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-17518729

You are (mis)using a component FileProfileActivator by manually constructing it, while it is a managed component. Same fix applies as well, and you will regain backward compatibility as well.

Sorry, but whom do you, Tamás, refer to when saying: "{+}**You**{+} are misusing..."

It's not "me"... I am just an ordinary end user - and my customer, my team and myself are simply using Red Hat commercial JBoss together with Arquillian suite code to run and unit/integration test our legacy Java EE applications.

So I +**do not**+ have any chance to modify Red Hat's code (well, other than possibly forking its Git repo myself and updating my fork, if all other attempts fail), and sadly, the Arquillian code is no longer maintained by Red Hat...

*I wouldn't think it is good practice or appropriate from the Maven side to change a* *public API,* *publicly documented with officially published Javadocs, six years later in a minor dot release, without any previous deprecation or public notice - and then telling end users that a company like Red Hat simply used your API the completely wrong way back in 2016.*

Are you sure that this even clearly was a "managed component" back in 2016 when Maven version 3.3.9 was current? Why had its setter method been made public at all back then if this were the case? And in case it indeed already was a managed component in Maven 3.3.9, then the mistake is also on the Maven side, as the code then should never have been written with a public setter method the way it used to be for 6 years until the most recent change.

Sorry, but please don't try to duck out of a clear mistake on the Maven side here, namely breaking binary compatibility. When you do some refactorings on your widely used codebase, fine, but not at the cost of breaking a public API in this way.

Please let's try to think about some less "negative" approach: *Why not try and focus on finding a meaningful way to stay with your new concept of a managed component, but still implement/wrap/map the missing method in order to still support and not break the published API...*

Shouldn't it be possible to keep binary compatibility on the Maven side by still providing the old API (i.e. the old public method and the old class used as a parameter) but do so by properly wrapping/mapping it to the correct, new implementation?

Many thanks for listening! ;)

 

Hey. So, I feel your pain, but let me gather the facts here first and then let's do the bid.

The class in question was introduced in 2009, and it looked like this:
[https://github.com/apache/maven/blob/c8a5c2d89a6b4cc70a41911ea2d507608f14516c/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java]

Notice the {{Component}} annotation on it, so this was a managed component from very beginning, from 2009.

The reason why we do components is exactly this: container protects us from these annoying bits how to instantiate things (as container does it for us), also relieves us from maintaining the component graph as well (in which order the component should be created, when and where, where to "wire" up, etc). This is all done by container. Yes, in the end, components ARE plain Java classes, but they clearly tell (see annotation) what is the intent, how they should be used.

Maven2 used Plexus Container back in 2000s years, that was a great container, but had some serious technical limitations: it could not do constructor injection, only field or setter injection. So all our components (Java classes) were written in "Plexus style", they were "mutable" in Java sense due Plexus: default constructor was a must and then fields/setters injection happened in container to populate the component. In 2009 Plexus was replaced with what today is called Eclipse Sisu (that is backed by Guice). Hence, we can do now constructor injection, and we can have immutable components finally (as they should be from start). Finally, JSR330 replaced old Plexus annotations and XML, tying it all up together nicely.

I think you can guess the trend here: we are *moving away* from "Plexus Style" components to proper Constructor Injected immutable ones. Also, *the irony is that if components are used as they were meant to be used* (inject it and use it) {*}this would never happen{*}. It is exactly the container that would protect you from changes like these. In a moment you circumvent (or dodge) this "protection", you are left on your own, as your code becomes fragile, as basically it has to re-implement what container does seamlessly, plus, your logic around.

Am really unsure why these kind of (I'd call them "deep integrations") Maven plugins happened in the first place, why did not original author(s) reach to us and ask "how things should be done", or at least question about that annotation and it's meaning on the class , why they decided to use it directly instead. I hope we all agree that other way around (we check all Maven integrations out there) is something clearly not possible.

But I believe all this above does not make *you* happy :)

Directly related: [https://tralfaz.blogspot.com/2012/01/if-woody-had-gone-right-to-police.html]

All in all, as one can see, these "deep integrations" are bad things on both ends: it literally cements our (Maven) classes, the change that made this happen is fixing a very important bug. On the other hand, the code written in this way is fragile, it results in what summarizes last 10 years of Maven: "nobody move!", a status quo, as whoever does first step, breaks the other.

Sad truth, but [~cstamas] is right.

Okay, let's fix this in 3.8.6, and make it work. Of course, I will deprecate the returned setter as well, with notice, that it is about to be removed in 3.9.x and later (so this will be only 3.8.5 change, and given 3.8.6 is last planned of 3.8.x line, that's it).  Still, given this is as you say unmaintained software, that is doing it wrong from beginning as we assessed here, this is the price of the decision made in past: it will not work with 3.9.x line, nor Maven 4... We have to move forward, and we do not have resources nor time to make sure all (unintended) uses of classes from maven will work. In case of any question, there is Mailing List where we are glad to answer questions, and help write more durable, robust code that integrates with Maven in well manner.

Hmm, Támas,

thanks for the great link to the Woody Woodpecker story! :D

Unfortunately, that wouldn't really help us much, if we are then stuck with the 3.8 series of Maven and cannot go to 3.9+...

So in case you only do a fix in 3.8.6, and thereby deprecate and then remove the method in 3.9+, ShrinkWrap will be broken anway from then on.

Why not "simply" leave the deprecated setter in (leaving it marked as deprecated of course), if it is possible to map/wrap the deprecated setter to the "new" coding style of Components with managed injections? There are several parts of Java APIs where methods are deprecated since ages, but still supported.

If, on the other hand, you stay with the decision to completely remove the method in 3.9+ anyway, I feel like I won't even need a fix in the 3.8.x series, because in this case, we'll have to do a custom fork of ShrinkWrap anyway to be able to continue our builds into the future (let's just assume we would be facing a security issue/CVE forcing us to update Maven to its latest release...). We cannot tolerate a build scenario that is once and for all times stuck with some outdated Maven version.

In summary,
 * either you decide that you can live with some deprecated code for some undefined, longer period of time in order not to break compatibility,
 * or we can do the "hard cut" even immediately now without a fix in the 3.8.x series, because it then means we need to throw away RedHat's ShrinkWrap and fork our own version that uses the current Maven API way of doing it.

So which alternative is your preferred approach?

Thanks again & best regards,
Andreas

cstamas opened a new pull request, #738:
URL: https://github.com/apache/maven/pull/738

   When manually constructed in legacy code.
   
   This COMPONENT should be injected instead, or if no container,
   then created by subclassing DefaultModelBuilderFactory helper
   class meant for exactly these cases.
   




Eh, this is just getting worse... I just spotted this class (added in 2010): [https://github.com/apache/maven/blob/4bc349170646a8e461e434cdfa29d913a757babc/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java]

Is not used by Maven at runtime (only when Maven integrated into something when no Sisu available, hence via ServiceLocator or Guice module), and it's Javadoc nicely explains the intent of this class: so, if RH developers did not want to use Plexus/Sisu, this should have been used instead, so another alternative that was missed.

Problem with "deprecate forever" is that it only introduces impediments (for us, Maven developers), and given the huge legacy trail, plus all these as well, just makes near impossible to improve, move forward. In this very case, we would end up with single class, that would work in two very distinct way: if it is container constructed, then do the "fixed" work, but if manually constructed using setter (alas setter sets an object not suitable for "proper way of working"), them we need to retain broken way of working. In short, this class would be a big IF block, separating logic "if manually constructed" and "if container constructed".

Some mutant class like this: [https://github.com/apache/maven/pull/738]

But, let's see what you can do: could you try creating a "patch" JAR, that would contain only the FileProfileActivator class from Maven 3.8.4, and add that "patch jar" to plugin dependency? IMPORTANT: use your own coordinates, do NOT use any org.apache.maven etc coordinates for patch jar...

[~cstamas], nice investigation. This factory suffers from the same problem and the SL, its innards are private and people copied without using DI. Bad. I'd even consider to apply our PR to 3.9.0, but not to 4 under any circumstances. We should also deprecate this factory immediately. [~aloew], ShrinkWrap will likely continue to run with 3.x, but not with 4 anymore. As [~cstamas] pointed out, to many things have been marked deprecated 10+ years and we didn't remove. Those times are over.

Just to make sure I got the idea properly:

You mean that I should prepend a JAR, containing nothing but the FileProfileActivator class from Maven 3.8.4, to the normal classpath consisting of Maven 3.8.5, so basically patching this single class & replacing its 3.8.5 by the 3.8.4 version?

I can do so later this evening - I'll be away from my desk for ~4 hours now...

Many thanks so far for your kind help and openness to find some way that does not completely leave us behind, requiring to use Arquillian/ShrinkWrap...

Nope, this is the idea:

Create a JAR that contains only this one single class:

org.apache.maven.model.profile.activation.FileProfileActivator.class

And that class should originate from Maven 3.8.4. Deploy that class to your local Repository Manager (or for test sake, is okay only to "install" it into your local repository). Let's assume you deployed it on org.foo.bar:my-maven-patch:1.0.0 coordinates (deployed or installed to local repository, whatever).

Then, modify your POM, the shrinkwrap plugin declaration like this:
{noformat}
 <plugin>
  <groupId>shrinkwrap-group</groupId>
  <artifactId>shrinkwrap-plugin</artifactId>
  <version>shrinkwrap-version</version>
  <dependencies>
    <dependency>
      <groupId>org.foo.bar</groupId>
      <artifactId>my-maven-patch</artifactId>
      <version>1.0.0</version>
    </dependency>
  </dependencies>
</plugin>
{noformat}

To be frank, am unsure how you use this shrinkwrap thing. Would be helpful if you could show me a "test bed" project to try this out.

OK, I'm back - and now finally also got the idea correctly. I will try this out immediately and report back shortly whether this works - stay tuned... ;)

Update: Oops - I seem to have just entered dependency hell - it looks like I have to dig through a hierarchy of Red Hat Arquillian component POM imports to see where even the ShrinkWrap Resolver version gets finally determined. :(

Sorry, please do no longer expect an update before the weekend, but I promise I will do my best to finally achieve the above dependency change... :)

 

Is there some project out in the wild (preferably open source, but even just a "reproducer" type one would work) that I can see, how shrinkwrap is used? Is it a maven plugin? Is it a library?

This might be one - but only from a cursorily glance (no guarantees...).

https://citrusframework.org/samples/arquillian/

Our own setup is slightly more complex (sorry, but I must not share our three-level nested hierarchy without changing all references to my customer), but basically similar...

-Hm, this sample is gone from GH repo... click on "View source", is 404-

Nope, found it: [https://github.com/citrusframework/citrus-samples/tree/main/demo/sample-javaee]

First attempt: error
{noformat}
[WARNING] The POM for org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-impl-maven:jar:3.1.4 is invalid, transitive dependencies (if any) will not be available: 17 problems were encountered while building the effective model for org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-impl-maven:3.1.4
[ERROR] 'dependencies.dependency.version' for org.apache.maven:maven-resolver-provider:jar is missing. @ 
[ERROR] 'dependencies.dependency.version' for org.apache.maven:maven-model:jar is missing. @ 
[ERROR] 'dependencies.dependency.version' for org.apache.maven:maven-model-builder:jar is missing. @ 
[ERROR] 'dependencies.dependency.version' for org.apache.maven:maven-repository-metadata:jar is missing. @ 
[ERROR] 'dependencies.dependency.version' for org.apache.maven:maven-settings:jar is missing. @ 
[ERROR] 'dependencies.dependency.version' for org.apache.maven:maven-settings-builder:jar is missing. @ 
[ERROR] 'dependencies.dependency.version' for org.apache.maven.resolver:maven-resolver-api:jar is missing. @ 
[ERROR] 'dependencies.dependency.version' for org.apache.maven.resolver:maven-resolver-impl:jar is missing. @ 
[ERROR] 'dependencies.dependency.version' for org.apache.maven.resolver:maven-resolver-spi:jar is missing. @ 
[ERROR] 'dependencies.dependency.version' for org.apache.maven.resolver:maven-resolver-util:jar is missing. @ 
[ERROR] 'dependencies.dependency.version' for org.apache.maven.resolver:maven-resolver-connector-basic:jar is missing. @ 
[ERROR] 'dependencies.dependency.version' for org.apache.maven.resolver:maven-resolver-transport-wagon:jar is missing. @ 
[ERROR] 'dependencies.dependency.version' for org.codehaus.plexus:plexus-interpolation:jar is missing. @ 
[ERROR] 'dependencies.dependency.version' for org.codehaus.plexus:plexus-utils:jar is missing. @ 
[ERROR] 'dependencies.dependency.version' for org.sonatype.plexus:plexus-sec-dispatcher:jar is missing. @ 
[ERROR] 'dependencies.dependency.version' for org.apache.maven.wagon:wagon-provider-api:jar is missing. @ 
[ERROR] 'dependencies.dependency.version' for org.apache.maven.wagon:wagon-file:jar is missing. @ {noformat}

Huh, I made it "move" by downgrading to shrinkwrap 3.1.3, as it seems POM for 3.1.4 is broken. And 3.1.3 kinda worked, but the build failed, not due Maven 3.8.5 used, but for some spurious artifact being not resolvable.... So, all this stuff seems very fragile and overly complicated for me, I need a bit more time to wrap my head around it, but this is not promising at all for start...

But very first thought: shrinkwrap is NOT a maven plugin, but is some library used in integration tests? If so, why you care what maven you use as test dependency at all? I mean, why you want to up Maven version to 3.8.5 at all? According to what I see, for shrinkwrap (as library) it should really not matter do you declare 3.8.4 or 3.8.5 as *test dependency* for it....

So my point: it seems this is a library, that depends on maven. As I see for now, it should work even when built with Maven 4, as long as you keep your test dependency version on Maven 3.8.4, so all fine here. Am really unsure why changing maven version is needed at all here (to other than Shrinkwrap POM declares, as I see 3.6.3? All this does not depend on Maven version you build with...

Am unsure what I do wrong here, but "demo" is not buildable for me:

[https://gist.github.com/cstamas/d992de753cf17749316a2ee68bbfe232]

Notice line 12: the POM is reported as "broken"... unsure what is happening here

And one final question [~aloew] : WHY do you override Maven version used as test dependency at all? It is totally unrelated to Maven version you use to build the project. And Arquillian code base and POM declare Maven version 3.6.3 as dependency, and it should work with it. Why is 3.8.5 needed as {*}test dependency{*}? As I see, building this should be possible with 3.8.5, 3.9.0 and even 4.0.0, as long as you leave your test dependency of Maven as Arquillan project POM declares...

[~cstamas]

(1) Regarding the Citrus Framework sample - sorry, I hadn't tried this myself before - I was just trying to point you to a project setup that on a first glance looked similar to me. The fact that this project also does no longer work, unfortunately show the flakiness of the Arquillian dependencies setup just one more time...

My recommendation would be that you don't try to invest any more time into this, but rather wait for the results of my investigation over the weekend in our real-life scenario... ;)


(2) While I will be doing extensive research over the weekend (sorry, my current job workload does not allow me to do it during the week,,,), I would like to ask you two questions to better understand which kind of Maven dependency is relevant.

We are using Arquillian Chameleon to run either embedded or managed JBoss 7.4 instances (getting one of them to run fine is sufficient) from the maven-failsafe plugin. With regards to Maven dependencies, we don't set any explicit dependency to Maven 3.8.5 in any of our POMs, so either this is a result of importing another POM, or the maven-failsafe-plugin uses the maven-model-builder classes from the Maven version that is used to run the whole build.

So my questions are:

(2a) Which Maven (including dependencies such as maven-model-builder) version is used by the *maven-failsafe-plugin* "by {*}default{*}"? How is this version determined if nothing else is specified, and can we specify/override this version by making the plugin explicitly depend on a particular version of maven-model-builder?

(2b) When we use the "managed" instead of the "embedded" type, then Arquillian itself starts the JBoss instance in a separate JVM, but the packaging of the WAR file containing Arquillian tests with ShrinkWrap is AFAICT - in this scenario as well - still done {*}in the original JVM running the failsafe plugin{*}. Am I therefore correctly assuming that I need to concentrate on getting the maven-failsafe-plugin use a custom 3.8.4 version of Maven, and not make Arquillian container JBoss dependencies for the separate JVM use this custom version?

Many thanks for clarification - and as stated, stay tuned, I will be trying to find my way through Arquillian's "dependency hell" over the weekend...

And of course have a great weekend everybody! :)

 

"And one final question [~aloew] : WHY do you override Maven version used as test dependency at all?"

Sorry I missed to explicitly answer this question: we DON'T do this anywhere (at least not in our own POMs - I need to check all POMs imported by us as well as our external parent POM we must use because it's mandatory for all JEE projects in the whole Deutsche Bahn enterprise...), so I assume that some kind of "default" logic applies and results in using the same version of maven-model-builder as the version used to run the whole Maven build...

re failsafe: as I see this happens as part of test, is not a plugin extension or so, and hence, tests are completely isolated from Maven running them (unlike plugins)... am still unsure what happens here and why Maven version matters... really a reproducer would be the best...

In other words, somehow the Maven version that is used as test dependency is the reason here, but how come it picks up 3.8.5 at all... also, is it possible to override this?

"am still unsure what happens here and why Maven version matters... really a reproducer would be the best..."

Fully agreed - so in case I indeed were to find myself unable to track the exact dependencies down over the weekend, I'd try to create a reproducer with the most simple Arquillian project setup that is possible...

Thinking about the fact that we are forced to inherit from a Deutsche Bahn "db-superpom" parent POM which contains a number of other interesting stuff that has lead to "interesting" experiences in the past, I would not exclude that this plays a role here - but let's not speculate, but try to see from my "favourite weekend pastime"... ;)

{color:#00875a}*OK, so the "riddle" is resolved*{color}, and I can give a partly "{*}{color:#00875a}ALL CLEAR{color}{*}" sign (/), but am still interested in your recommendations on how we (my customer/my team and myself) should move forward in the best possible way... :)

First of all, here is a simple stripped-down reproducer project: [^arquillian-reproducer.zip]

As stated in lines 48 and 49 of its pom.xml, it hurts when the dependencyManagement section of the reproducer POM - or, in our original real-world case, a parent POM's properties and dependencyManagement section - imports "org.apache.maven:maven:pom:3.8.5" as a "compile" or even "test" dependency. This will, as documented in the comments above, cause the NoSuchMethodError due to the incompatible change in maven-model-builder public API between 3.8.4 and 3.8.5... :(

It turned out that in our real-world scenario, indeed our mandatory parent POM ("db-superpom") does import "org.apache.maven:maven:pom:${version.maven}" indirectly from its dependencyManagement section, with a property default value of 3.8.5 for the "version.maven" property.

Resolution in our real-world scenario is - as {color:#de350b}*we are forced to stay with inheriting from this mandatory parent POM*{color} - to either globally override/downgrade ${version.maven} to 3.8.4 or to prepend/override just "org.apache.maven:maven-model-builder:jar:3.8.4" to our test dependencies. (on)

So if you ([~cstamas] and the Maven team) prefer to stay with breaking the public API for the (partly valid) reasons you stated before, *what would be your recommendation for "us" (my customer, my team and myself) to move forward in the most future-proof way:*

a) globally override ${version.maven} to 3.8.4 on the long run (even when Maven's current version is 4.0+) (?)

b) prepend "org.apache.maven:maven-model-builder:jar:3.8.4" on the long run to our test dependencies (?)

c) *fork ShrinkWrap Resolver:* [https://github.com/shrinkwrap/resolver] and in our private fork, change implementation of its [https://github.com/shrinkwrap/resolver/blob/master/maven/impl-maven/src/main/java/org/jboss/shrinkwrap/resolver/impl/maven/internal/SettingsXmlProfileSelector.java:]

c1) *use Maven's DefaultModelBuilderFactory* from the fork (?) ("A factory to create model builder instances when no dependency injection is available"):
[https://github.com/apache/maven/blob/master/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilderFactory.java] - will this be a *valid long term strategy* and stay around in Maven 4.0+? - or

c2) trying to *make ShrinkWrap use Eclipse Sisu* in the fork (?) and do a "proper" resource injection - and if so, then the big question is: how?

From my personal guts feeling, {+}*on the long run, only c1) and c2) are "truly" future-proof resolutions*{+}.... Do you agree? 

Thanks a million for your kind help with this so far (y), I hope the above arquillian-reproducer project might be helpful for this scenario in the future...

Looking forward to your advice & kind regards
Andreas

Though, I haven't tested so far, for me there are these ways to solve it:

a)/b) is a short term solution, but you are locked
c1) short term solution which will likely go away
c2) long term solution

Generally, if you don't use DI, you are busted and cannot expect this to work manually forever.


Am with Michael here, but few things more: I am really unsure what this project (arquillian and shrinkwrap) is trying to solve or do, and especially given it's abandoned, I'd just move off from it, as it's codebase is huge, and as we saw, fragile as well. I don't see that "fork and fix" will be easy thing to do :(

In your place, I'd go for short term solution (the simpler the better), and for long term i'd move off from all this thing (but again, am saying this without any knowledge about it, how easy would be to move off from it, etc).

[~cstamas] sorry but what you propose ist simply not feasible for the remaining lifetime of our (admittedly, "legacy") Java EE application.

Basically, the role of Arquillian is to be the (only feasible) vehicle to execute such maven-failsafe-plugin "integration" type tests that require Java EE container infrastructure to run (i.e. access to JPA Entity Manager, transactional EJBs, JMS Message Endpoints etc.) within a managed (or even embedded) Java EE container such as Wildfly (or the commercial JBoss EAP).

{color:#de350b}*There simply is no viable alterative for us to replace Arquillian by something else as long as the Java EE "legacy" application still exists.*{color}

As stated before, I am with you and also support {*}closing this maven-model-builder related ticket with "won't fix"{*}.

What I would like to receive some kind help from you before we do so is some educated advice on how we can change our own (inevitable) fork of Arquillian (or rather at least its ShrinkWrap component), to be able to {*}make Sisu annotation processing and Sisu component injection at runtime part of the ShrinkWrap process{*}.

Do you e.g. have any other typical use cases of the surefire or failsafe plugin where the test driver code additionally creates a Sisu environment such that the FileProfileActivator from maven-model-builder could be created as an annotated/injected component from ShrinkWrap-fork code?

I hope I succeeded in making our dilemma clear enough: I am searching for a way to make the whole Arquillian, e.g. Arquillian Shrink Wrap, being able to utilize Sisu as an Maven annotated component injection provider, and am looking for a code examples what must be done to achieve this...

Thanks again & best regards!

Okay, I understand that my proposal is not feasible.

IMHO, the change you will need to implement in shrinkwrap/maven-resolver is really to instead manually construct components, use SISU to inject them. This change is really "internal" to shrinkwrap resolver, none of these should "surface up" to client code, so to say, your test should remain totally unchanged. So, IMHO, this is not like you mention "use cases of the surefire or failsafe plugin where the test driver code additionally creates a Sisu environment". No, this is really internal matter of [https://github.com/shrinkwrap/resolver/tree/master/maven/impl-maven] (if I guessed the module correctly). The change itself is not quite trivial, but may be done gradually. For example look at breakage:

[https://github.com/shrinkwrap/resolver/blob/f564882d785db86460f43cc7512650e3efae3380/maven/impl-maven/src/main/java/org/jboss/shrinkwrap/resolver/impl/maven/internal/SettingsXmlProfileSelector.java#L46-L51]

All these classes created in this ctor are actually components, hence, they should be injected. This means a change to ctor of SettingsXmlProfileSelector and have it all parameters declared and added @{{{}Inject{}}} annotation. For this to work, you'd want to add @{{{}Named{}}} annotation as now SettingsXmlProfileSelector itself must be managed as well. Finally, you would want to look for all places where instance of SettingsXmlProfileSelector are instantiated and replace that with either inject or play a bit "dirty" and use direct container lookup instead. So, as you see, these changes will have effect to "propagate", so for start, I'd play a bit opportunistic, and fix known breakage (by converting SettingsXmlProfileSelector into a component, fix places where it's created) and stop, and give it a try. Maybe this is it. But maybe not.

For creating Plexus Shim (sisu container plexus compatibility layer) look into resolver demos (there are demos for service locator and "vanilla" guice as well, but I'd not use those, sisu would simplify a lot for you).

[https://github.com/apache/maven-resolver/tree/master/maven-resolver-demos/maven-resolver-demo-snippets/src/main/java/org/apache/maven/resolver/examples/sisu]

but again, am unsure "how much" or "what" is shrinkwrap resolver using from Maven universe, so maybe this above in resolver is not enough, and you may want actually Plexus Shim (sisu powered container that provides Plexus backward compatible behavior like honoring legacy component descriptors).

I know all this may sound overwhelming, will try to create a PR for you to show what I mean...

[~cstamas] thanks a million - yes I was very well aware of the fact that we need to fork and modify Arquillian ShrinkWrap code itself, and NOT our test cases using ShrinkWrap - that was fully understood from the beginning.

I think it is quite likely that ShrinkWrap also uses parts of old Plexus compatible infrastructure, so Plexus Shim is a Plexus "flavour" of Sisu, did I get this right?

I am well aware of the concepts of DI, so I have been able to follow your explanations - it's much less a question of how to change all the "to-become-managed-components" classes, my main question is where and how is the Guice/Sisu/Shim/whatever it's called IoC "container" configured and started up in a "test case" to be started from the maven-failsafe (very similar to maven-surefire) plugin?

(and with the exception of "how-to start-the whole-thing-up-properly-from-a-maven-failsafe-plugin-execution" - which is the million dollar question to me - the whole rest sounds not overwhelming at all... :P)

just found this: https://cwiki.apache.org/confluence/display/MAVEN/Maven+Ecosystem+Cleanup#MavenEcosystemCleanup-Generalguidelines
(but still keen on learning more about our scenario - Arquillian including ShrinkWrap as a "test case execution" being called from the maven-failsafe-plugin...)

[https://github.com/shrinkwrap/resolver/pull/166]

It "works for me" (at least the related Junit tests), so module and module tests do pass, but I cannot build whole project as later (post this module) the build breaks for me. But the idea is there, and also this could "gradually" be done for any other component not used as component (I hope), with maybe some minor refactoring.

So, what we concluded:
 * all releases of shrinkwrap resolver breaks with Maven 3.8.5
 * to use it with ALL supported maven versions (incl 3.8.5, 3.9.x...) that PR above needs to be ingested by shrinkwrap resolver

Now, does it happen in project, or in a fork, that remains to be answered.

[~aloew] once you ping back, am also leaning to close this as "won't fix". Would be nice to clean up issues for 3.8.6, as it is really closing, is behind the corner soon.

In any case, if you need any more help, we can continue the discussion on Maven Users ML https://maven.apache.org/mailing-lists.html

Sorry, [~cstamas] , here I am (have been stuck in meetings...) :)

Thanks a million - my customer definitely owes you a big virtual ice cream :P for even proposing a PR for ShrinkWrap. Great work! :)

And yes, as the content of your PR looks very promising to me, I hereby give *{color:#00875a}my "all-clear" that you may close this issue as "won't fix"{color}* - and I'll concentrate on looking into forking ShrinkWrap and applying your PR into my fork, and ty to move on from there...

*Thanks again to the whole Maven team for your kind help with this!* (y)

.. and also thank you for the pointer to the Maven Users ML - I will definitely use this in case I'll run into follow-up issues with my fork - even though I think it should be simply possible to only selectively fork/"patch" shrinkwrap-resolver-impl-maven and use the rest of the modules as-is.

Please be warned that once again, I will most likely only be able to try this out over this coming weekend... :(

cstamas commented on PR #738:
URL: https://github.com/apache/maven/pull/738#issuecomment-1128630134

   Issue https://issues.apache.org/jira/browse/MNG-7475 got resolved differently: in this case Maven is used as dependency.




cstamas closed pull request #738: [MNG-7475] Restore binary compat for FileProfileActivator
URL: https://github.com/apache/maven/pull/738




The fix materialized in form of a patch for the affected project, that similarly like in MNG-7449 constructed Maven internal bits manually, instead to rely on container as "factory" for components.

Yes, I think as well, that only one module needs this patch, so forking whole project is not needed. Still, be warned, that "best practice" for forks is to clearly distinguish forks from the forked project (as later you will step on that rake and will hit you in face). This means, {*}change the GAV of forked project{*}. Simplest would be – and I hope you do use some repository manager that is able to host Maven artifacts – to deploy complete shrinkwrap project on alternate GAV, and then really just "flip" to patched JAR+POM of this single changed module and use resolver from this alternate/patched GAV from that point on.

Now, I have no idea how easy this would be, given the deep hierarchy of arquillian POMs and heavy use of import scopes for POMs, so "overriding the resolver GAV" may prove nightmare-ish... But let's discuss that once we are there... :) 

You are welcome, and the whole Maven team is happy to help, whenever it can ;)

BTW: finally found it: here's the link to the full Woody Woodpecker video ("Bunco Busters") on YouTube - [https://youtu.be/3fm61avmjn8] :D

Ftr. https://github.com/shrinkwrap/resolver/pull/170

