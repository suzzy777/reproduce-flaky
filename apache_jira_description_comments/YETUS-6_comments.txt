
This will remove everything we currently don't care about (I think):

{code}
#!/bin/bash

for i in hadoop-* dev-support/docker; do
  git rm -r ${i}
done

git rm BUILDING.txt
git rm NOTICE.txt
git rm README.txt
git rm pom.xml
git rm start-build-env.sh

git rm dev-support/create-release.sh
git rm dev-support/determine-flaky-tests-hadoop.py
git rm dev-support/findHangingTest.sh

{code}

How about the Version-Info maven plugin?

https://github.com/apache/hadoop/blob/trunk/hadoop-maven-plugins//src/main/java/org/apache/hadoop/maven/plugin/versioninfo/VersionInfoMojo.java

It seems generally useful outside of Hadoop and it helps projects be specific when referencing their versions in other places (like if we add a maven plugin that runs releasedocmaker, or when building their api docs).

made a patch for just renames / deletes and it's ~100MB. lol.

folks prefer a sequence of patches to get around the 10MB limit, or flesh out the script [~aw] started?

Definitely the script. lol

Also, we probably want to wait to commit this until HADOOP-12257 is added since it adds a bunch of new files...

-01

* create 4 components: shelldoc, audience-annotations, release-doc-maker, and test-patch
* move implementations to match
* move dev-support/docs/README.md to top level
* move dev-support/docs/releasedocmaker.md to release-doc-maker/README.md
* delete everything else

Since this just does file moves and deletes (to ease file tracking), additional patches will need to address:

* audience annotations needs to be updated for move out of hadoop
* we refer to both "test-patch" and "Yetus Precommit" in our docs/files. pick one
* top level readme doesn't provide info on all the components
* top level LICENSE and NOTICE files need to be updated

bq. How about the Version-Info maven plugin?

If we're going to do that, we probably want to maven-ize the build system as well. 

bq. git mv dev-support/findHangingTest.sh test-patch/

Nothing in test-patch currently uses this...

bq. git mv dev-support/docs/releasedocmaker.md release-doc-maker/README.md

Hmm. What's the plan for the documentation on the website?  Are we going to turn the *.md files into html?  It might be easier to manage if we didn't have a lot of different README.md files.  Or, at least, we need to be prepared with the idea that we're going to have to mangle the filenames a bit for publishing.

{quote}
bq. How about the Version-Info maven plugin?
If we're going to do that, we probably want to maven-ize the build system as well.
{quote}

any particular reason? in the case of version-info I think I've convinced myself that it should go to the Maven project. But we'll like have some other java artifact at some time in the future. I've been presuming the different components will be versioned independently, since they aren't directly tied to each other.

{quote}
bq. git mv dev-support/findHangingTest.sh test-patch/
Nothing in test-patch currently uses this...
{quote}

Excellent. I'll remove it.

{quote}
bq. git mv dev-support/docs/releasedocmaker.md release-doc-maker/README.md
Hmm. What's the plan for the documentation on the website? Are we going to turn the *.md files into html? It might be easier to manage if we didn't have a lot of different README.md files. Or, at least, we need to be prepared with the idea that we're going to have to mangle the filenames a bit for publishing.
{quote}

I've been hoping (and the current proposal presumes) that we'll use the new git based publishing system ([ref blog|https://blogs.apache.org/infra/entry/git_based_websites_available]), which I  think will render markdown (or asciidoc or whatever) for us. I figure that's a big enough change that it can be a followon to whatever we do here.

we you thinking a common docs/ dir would be easier to migrate to whatever gets decided?

Any thoughts on where/how to handle unit tests?  As soon as the layout gets settled, I want to start getting some in...

bq. any particular reason? in the case of version-info I think I've convinced myself that it should go to the Maven project. But we'll like have some other java artifact at some time in the future. I've been presuming the different components will be versioned independently, since they aren't directly tied to each other.

From what I've seen of the build systems we support, maven is probably the best for support Java-based bits.

bq. I've been hoping (and the current proposal presumes) that we'll use the new git based publishing system (ref blog), which I think will render markdown (or asciidoc or whatever) for us. 

We should verify that.

bq. we you thinking a common docs/ dir would be easier to migrate to whatever gets decided?

I think per-"project" docs are the way to go, but just worried about having five files called README.md and what that means for web site generation.

bq. Any thoughts on where/how to handle unit tests? As soon as the layout gets settled, I want to start getting some in...

presuming you mean for test-patch, I profess ignorance at testing bash scripts and am willing to accept near anything. I think using make to drive running whatever we use makes sense from a portability perspective, and I think it would benefit us to standardize on using TAP for output.

{quote}
bq. any particular reason? in the case of version-info I think I've convinced myself that it should go to the Maven project. But we'll like have some other java artifact at some time in the future. I've been presuming the different components will be versioned independently, since they aren't directly tied to each other.

From what I've seen of the build systems we support, maven is probably the best for support Java-based bits.
{quote}

For the Java-based implementations I agree, I'm just not sure why that would mean we need to use Maven to provide a unified build across the components we create. For example, I'd be surprised if we end up with more than a hand-full of version changes for the audience annotations artifact just because it seems very stable. Why would someone currently working on e.g. release-doc-maker care how the artifacts for the audience annotations  are made?

{quote}
bq. I've been hoping (and the current proposal presumes) that we'll use the new git based publishing system (ref blog), which I think will render markdown (or asciidoc or whatever) for us.

We should verify that.
{quote}

Good idea. I'll take a look at whomever is currently using it and see what I can find. the docs are... a place where we can provide value back to the wider asf community. :)

{quote}
bq. we you thinking a common docs/ dir would be easier to migrate to whatever gets decided?
I think per-"project" docs are the way to go, but just worried about having five files called README.md and what that means for web site generation.
{quote}

It's my understanding that the git-hosted-website works like Github pages, where the website source lives in a different branch than the main code base. That would leave us free to use README.md for guidance in the source itself while building a coherent presentation for teh web site elsewhere.

bq. presuming you mean for test-patch, I profess ignorance at testing bash scripts and am willing to accept near anything. I think using make to drive running whatever we use makes sense from a portability perspective, and I think it would benefit us to standardize on using TAP for output.

OK, but do we want to put the tests and stuff in a separate dir or combined with the main source?  Just trying to get a feel for what you are thinking here. :)

Oh I see. I'd be fine with whatever, but I think a separate dir would be easier to follow (at least for me).

It occurred to me this morning that if we re-arrange the source tree now, there's a lot of potential fallout in how we do our own testing or how Hadoop does testing.  Random thoughts:

* we can't set up our own precommit because issues still come from HADOOP
* merging our branch into hadoop trunk seems like the wrong direction and with the proposal here, wildly incompatible
* we could switch hadoop-common to use yetus branch to run test-patch, then point it at a different dir where the hadoop trunk is checked out.  yetus should switch back to our branch based upon the branch detection logic. so that should work...
* ... but using make for yetus instead of maven means we can't use the hadoop personality, so how does test-patch know which build system to use for which type of patch?  It also doesn't know how to do that mid-run unless we play some games with re-exec. (which also seems like a bad idea)




(This *could* be an argument that test-patch should allow for the personality to specify which branches get which build systems, but ugh. That seems overkill esp for an event that rarely happens in most source trees.)

I think we could do this:

# set up a precommit job that looks for subtasks of HADOOP-12111 (and/or component yetus)
# send everything that matches to a job set up just for yetus with --project yetus (and either --branch-default HADOOP-12111 or make a personality)
# send everything else to a job that's a copy of the current Hadoop Common precommit (wether it runs off of the yetus branch or not)

bq. (This could be an argument that test-patch should allow for the personality to specify which branches get which build systems, but ugh. That seems overkill esp for an event that rarely happens in most source trees.)

One advantage of this approach is that we'd be in a position to handle projects that use gh-pages or hte ASF git based website system.

how about this as a first-pass decision point to get us through?

{code}
yetus busbey$ curl -D- -s -X GET -H "Content-Type: application/json"  https://issues.apache.org/jira/rest/api/2/issue/HADOOP-12361?fields=parent,components 2>/dev/null | grep -o -E "(HADOOP-12111|yetus)"
HADOOP-12111
yetus
yetus busbey$ curl -D- -s -X GET -H "Content-Type: application/json"  https://issues.apache.org/jira/rest/api/2/issue/HADOOP-12374?fields=parent,components 2>/dev/null | grep -o -E "(HADOOP-12111|yetus)"
yetus busbey$
{code}

Essentially, if the list of outputs is non-empty, we trigger the yetus-specific build.

-01

first pass post-yetus.

* create a top-level "docs" for project-wide (presumably will become source for website in YETUS-2)
* create top-level 'audience-annotations' for java api annotations + tooling
* create top-level 'release-doc-maker' for the so-named component
* create top-level 'shelldoc' for the so-named component
* create top-level 'test-patch' for the so-named component

not sure about:

* we refer to both "test-patch" and "Yetus Precommit" in our docs/files. pick one, possibly in follow-on
* put all the non-maven components in "%component%/src" directories. presumably they'd eventually get a "%component%/test" directory to match. Not sure if we should instead lay out like maven even if we don't use maven to build them. (e.g. release-doc-maker/src/main/python/releasedocmaker.py, test-patch/src/main/bash, ?test-patch/src/main/resources/personality?)


not addressed:

* audience annotations needs to be updated for move out of hadoop (packages, class names, pom, etc). YETUS-3
* no top level README (probably should be guide to project for contributors)
* top level LICENSE and NOTICE files need to be updated. YETUS-7

bq. we refer to both "test-patch" and "Yetus Precommit" in our docs/files. pick one, possibly in follow-on

FWIW, in my head:  test-patch + smart-apply-patch = precommit



I think we need to determine how we want to build before re-organizing the layout.  If we are thinking about make (and not cmake or maybe autoconf) then we are going to bump into the problems outlined in the "recursive make considered harmful" paper (http://lcgapp.cern.ch/project/architecture/recursive_make.pdf).


how about treating this ticket as a first pass that sets up the major components then? we can then do component specific changes when we know how they should be laid out? that would let me move forward on YETUS-3.

maybe instead I should just handle moving audience-annotations to the top level in YETUS-3?

bq. how about treating this ticket as a first pass that sets up the major components then? we can then do component specific changes when we know how they should be laid out?

I think that's reasonable as long as everyone is OK knowing that there is likely going to be another big patch that comes in that re-arranges everything again.

I'm also inclined to think that the build tool discussion should go to dev@ anyway.  I think I'll start a thread to see what folks think, even though it could very well end up being a bike shed discussion....

-02

* updated for current master
* dev-support broken into  release-doc-maker, shelldocs, and precommit
* added README explaining layout and warning of temporary nature.

+1

It needs to get rebased, but that rebasing is obvious, so that can be done on commit.

I think this is a good place to start and we can tune it as we go along.  

Awesome thanks!

-03 version pushed

- rebased for master

