Commit a77e4aaaf6c517add897c546a4ca75353e8296a5 in impala's branch refs/heads/master from jasonmfehr
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=a77e4aaaf ]

IMPALA-11922 Verify JWKS URL server TLS certificate by default.

**** BREAKING CHANGE ****
If using JWT authentication to the Impala engine and the
JWKS is retrieved from a URL, Impala now verifies the
server's TLS certificate.  Before, Impala did not verify
the trust chain nor did it verify the CN/SAN.

JWT Auth has an option to specify the location of the
JSON Web Key Set (JWKS) using a URL. If that URL is
accessed over HTTPS, the TLS certificate presented by the
server is not verified.

This means that Impala only requires the server to return
a TLS certificate, whether or not Impala trusts the signing
certificate chain.

The implications of this setup is that a fully secure chain
of trust cannot be established throughout the entire JWT
authentication lifecycle and thus creates an attack vector
where a bad actor could trick Impala into trusting an
actor-controlled JWKS. The bad actor can then generate
a JWT with any claims they chose and Impala will accept it.

This change introduces:
  1. verification of JWKS server TLS certificate by default
  2. jwks_verify_server_certificate Impala startup flag
  3. jwks_ca_certificate Impala startup flag

1. While previously, the JWKS URL was always called without
   verifying its TLS certificate, the default is to now to
   verify that cert. Thus, any cases where the JWKS was
   retrieved from an untrusted URL will now cause Impala
   to fail to start.

2. The new flag jwks_verify_server_certificate controls
   whether or not Impala verifies the TLS certificate
   presented by the JWKS server. It defaults to "false"
   meaning that the certificate will be verified. Setting
   this value to "false" will restore the previous behavior
   where untrusted TLS certificates are accepted.

3. The new flag jwks_ca_certificate enables specifying
   a PEM certificate bundle that contains certificates
   to trust when calling to the JWKS URL.

Testing was achieved in the front-end Java custom cluster
tests. An existing test was modified and three new tests
were created. The following test cases are covered:
  1. Insecurely retrieve a JWKS from a server with an
     untrusted TLS certificate. This test case is expected
     to pass.
  2. Securely retrieve a JWKS from a server with an
     untrusted TLS certificate. This test case is expected
     to fail. The Impala coordinator logs are checked to
     ensure the cause was an untrusted certificate
     presented by the JWKS server.
  3. Retrieve a JWKS from a server where the root CA is
     trusted, but the cert contains the wrong CN. This
     test is expected to fail. The Impala logs are checked
     to ensure the cause was a certificate with an
     incorrect CN.
  4. Securely retrieve a JWKS from a server with a trusted
     TLS certificate. This test case is expected to pass.

Change-Id: I5f1e887fae39b5fb82fa9a40352e4b507b7d8d35
Reviewed-on: http://gerrit.cloudera.org:8080/19503
Reviewed-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Commit d0592c0dbf4d634cc26b2e9872a9f62af5249cdd in impala's branch refs/heads/master from jasonmfehr
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=d0592c0db ]

IMPALA-11945: Fix Flaky Test in JwtHttpTest

The JwtHttpTest.testJwtAuthWithUntrustedJwksHttpsUrl test has been
flaky in the impala-asf-master-core Jenkins build. This build was
executed twice with this test passing in one run and failing in the
other.

This test and another test named
testJwtAuthWithTrustedJwksHttpsUrlInvalidCN both follow the same
pattern. They attempt to start up a cluster with incorrectly
configured Impala daemons. Then, the Impala coordinator's log file
is searched to ensure the coordinator failed to start up for the
expected reason.  Both these tests were introduced by IMPALA-11922.

The theory for the test flakiness is that the Impala coordinator logs
did not finish writing to disk before they were checked for the
expected startup failure message. The evidence backing this theory
is that all expected log messages were present in the log file except
for the final log line containing the error message.

Three changes were made to fix the flakiness
1. The tests where log files are search for startup failure messages
   now use a single coordinator. Only a single coordinator is needed
   thus this change eliminates potential issues caused by multiple
   coordinators.
2. The tests sleep 5 seconds before searching the log files to give
   time for the logs to be fully written to disk.
3. Log buffering in the Impala daemons was turned off by setting the
   logbuflevel startup flag to -1 which turns off in-memory log
   buffering and writes the logs directly to disk.

Change-Id: I26d8c2cffa7bc095b81eb572709f55b04ac1fa67
Reviewed-on: http://gerrit.cloudera.org:8080/19536
Reviewed-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


reopening to set fix version

