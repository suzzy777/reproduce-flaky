That test seem to have failed only once from CI history and I haven't been able to reproduce in 100+ local runs, so I can theorize about what happened, but it's just that, theory.

The test insert a value for a column, drop the column, add it back (same type), and query it. It expects the value to be {{null}} since it has remove through the drop, and that's what it gets, except for that one run when it got the initial value back on the read.

My best theory is that it's a timestamp issue. Somehow, the initial insertion ended up with a higher timestamp than the timestamp used for the {{DROP}}, so that on a read the old value is considered post-{{DROP}}. Which, and I'm still in the realm of theories, could happen if on CI nptd kicked in just at the wrong moment. It's a stretch, but as that has only even happened once that I can tell, this could be a case of bad luck.

There is another reason why this could happen: inserts use {{ClientState.getTimestamp()}} to generate their timestamp, which ensure that inserts coordinated by the same node always get strictly increasing timestamps, and do so by adding "fake" microseconds when it has to generate multiple timestamps in the same milliseconds. {{ALTER TABLE DROP}} simply relies on {{System.currentTimeMillis()}} however, so if multiple inserts, followed by a {{DROP}} happen in the same milliseconds, all but the first insert will actually have a higher timestamp than the drop one. This is also a bit of a stretch because the test does only a single insert, so while a prior test insert could interfer, that would be pretty timing. But it seems to be what this is ultimately so ....

Anyway, the previous point is the crux of the patch I'm attaching below: it uses the {{ClientState.getTimestamp()}} mechanism for {{ALTER TABLE DROP}} too. This ensures that the drop will always get a higher timestamp than any previous insert (coordinated by the same node), thus avoiding both theoretical problem above. It feels kind of the right thing to do anyway. The one annoyance is that we have to pass the {{QueryState}} to {{announceMigration()}} which is overriden by all schema altering statement, which is why the patch is more than 2 lines (but it's 2 lines of non automatic change).

| [12997|https://github.com/pcmanus/cassandra/commits/12997] | [utests|http://cassci.datastax.com/job/pcmanus-12997-testall] | [dtests|http://cassci.datastax.com/job/pcmanus-12997-dtest] |

I'll note lastly that the patch is against trunk, as was the test failure, but assuming my theories above are indeed the reason for that one failure, this could happen on pretty much any version. That said, it's really just to make the test happy as no-one in real life will even run into this, so I don't see the point of taking any kind of risk.


TBH this feels just a tiny bit heavy-handed and not really fixing the issue (for cases with multiple nodes).

Nor do I think that this is a big issue to be fixed, in general. So the only real thing we should address here is the flakiness of the test.

For that I see two slightly simpler options:

1. (Uglier) Just use {{System.currentTimeMillis() + 1}} in {{AlterTableStatement}}
2. (Prettier) Now that we have CASSANDRA-7190, in the test itself pass explicit timestamp to {{ALTER TABLE DROP}} via {{USING TIMESTAMP}}, and do the same for inserts. This would make the test fully deterministic.

I think it's unfair to call it heavy-handed. The bulk of the patch is just passing {{QueryState}} to {{announceMigration}}, which honestly we could well need for any other reason in the future anyway. The only real change here is to use {{QueryState.getTimestamp()}} for the drop timestamp, which is pretty trivial and is, I claim, TheRightThingToDoâ„¢, as the drop timestamp whole point is to be compared to cell timestamps and thus by using the same generator for both is just good hygiene. That's the important point here: I don't care about the test in practice, but I think drop should have reused our usual way to generate timestamps for queries in the first place, and it's high time we do this properly. Don't get me wrong, none of this is terribly important, but I just don't want to focus on a crappy test when we can actually ever so slightly improve the code.

Sorry. Heavy-handed was an unnecessary exaggeration.

But this way in a multiple-node cluster the outcome would still depend on which node gets the schema statement, and that node's {{lastTimestampMicros}} value, making it generally non-deterministic. So this change doesn't fundamentally fix the problem, just feels a bit more right.

That said, who really cares? Go ahead with either option. +1 to the original patch.

Committed, thanks.

