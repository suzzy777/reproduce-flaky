GitHub user dgkimura opened a pull request:

    https://github.com/apache/geode-native/pull/54

    GEODE-2657: Execute Region Function sends incorrect message format

    `TcrMessageExecuteRegionFunction` is missing a call to set `m_hasResults`. This causes the message response to be parsed synchronously and not asynchronously chunked. The synchronous parser does not support this message type and it barfs.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dgkimura/geode-native develop

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/geode-native/pull/54.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #54
    
----
commit 9ee4511225c912ee4daa631e1e4ebd35d51d86ae
Author: David Kimura <dkimura@pivotal.io>
Date:   2017-03-14T15:14:58Z

    GEODE-2657: Execute Region Function sends incorrect message format

----


Github user dgkimura commented on the issue:

    https://github.com/apache/geode-native/pull/54
  
    @echobravopapa We're only human.
    
    Our unittest didn't catch it originally because the output that's written to DataOutput in the constructor is the same with/without this variable set.  It's likely when the message is sent that client checks this variable and performs some magic.  I'm guessing our integration-tests that cover this aren't running.  Else we might have had a chance.


Github user pivotal-jbarrett commented on the issue:

    https://github.com/apache/geode-native/pull/54
  
    @dgkimura I would suggest getting a few of those integration tests updated to test this. They were marked flaky a long time ago when the tests ran through several iterations with different configurations. Now that we don't do that anymore it should be easy to stabilize the tests.



Github user dgkimura commented on the issue:

    https://github.com/apache/geode-native/pull/54
  
    @pivotal-jbarrett Okay. Fair enough. That's going to add some cycles to this pull-request.


Github user pivotal-jbarrett commented on the issue:

    https://github.com/apache/geode-native/pull/54
  
    @dgkimura It will give the CI something to chew on to prove that this message actually works with the server now. ;)


Github user pivotal-jbarrett commented on the issue:

    https://github.com/apache/geode-native/pull/54
  
    @dgkimura I will pull this and work on some of the tests.


Commit 39a0d7137a39434d56063b7254e2ae127bfe3b64 in geode-native's branch refs/heads/develop from [~dkimura]
[ https://git-wip-us.apache.org/repos/asf?p=geode-native.git;h=39a0d71 ]

GEODE-2657: Execute Region Function sends incorrect message format


GitHub user pivotal-jbarrett opened a pull request:

    https://github.com/apache/geode-native/pull/63

    GEODE-2657

    Please make a quick review.
    
    Fixes all the integration tests around Function Execution and adds test of AppDomain Function Execution.
    
    Test testThinClientPoolExecuteFunctionDisableChunkHandlerThread is split out of testThinClientPoolExecuteFunction and marked OMITTED until GEODE-2691 is addressed.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/pivotal-jbarrett/geode-native feature/GEODE-2657

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/geode-native/pull/63.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #63
    
----
commit a0bc51ae1026097f525b99c0141c6eb73b3f5714
Author: Jacob Barrett <jbarrett@pivotal.io>
Date:   2017-03-17T23:38:32Z

    GEODE-2657: Fixes and tests Function Execution.
    
    - Corrects message formatting.
    - Fixes integration tests.

commit cb02af7ec480ec6a46ea1c6fefc16f1697b33bf3
Author: Jacob Barrett <jbarrett@pivotal.io>
Date:   2017-03-16T13:36:32Z

    GEODE-2657: Fixes .NET test ThinClientFunctionExecutionTests.
    
    - Timeout is ms.

commit 9869b783c56119fa30f3e6712180a52e2398d52d
Author: Jacob Barrett <jbarrett@pivotal.io>
Date:   2017-03-18T00:21:20Z

    GEODE-2657: Tests Function Execution with AppDomains.

----


Github user pivotal-jbarrett commented on the issue:

    https://github.com/apache/geode-native/pull/54
  
    This will get closed when pull #63 is committed.


Github user PivotalSarge commented on a diff in the pull request:

    https://github.com/apache/geode-native/pull/63#discussion_r106921830
  
    --- Diff: src/cppcache/integration-test/testThinClientExecuteFunctionPrSHOP.cpp ---
    @@ -563,7 +563,7 @@ DUNIT_TASK_DEFINITION(CLIENT1, Client1OpTest2)
           LOGINFO("FETimeOut begin onRegion");
           ExecutionPtr RexecutionPtr = FunctionService::onRegion(regPtr0);
           CacheableVectorPtr fe =
    -          RexecutionPtr->withArgs(CacheableInt32::create(5000))
    +          RexecutionPtr->withArgs(CacheableInt32::create(5000 * 1000))
    --- End diff --
    
    Would std::chrono::duration help avoid the seconds-for-milliseconds kinds of problems in future?


Github user PivotalSarge commented on a diff in the pull request:

    https://github.com/apache/geode-native/pull/63#discussion_r106922752
  
    --- Diff: src/clicache/src/CacheFactory.cpp ---
    @@ -84,6 +85,12 @@ namespace Apache
     					//TODO::split
               SafeConvertClassGeneric::SetAppDomainEnabled(appDomainEnable);
     
    +          if (appDomainEnable)
    +          {
    +            // Register managed AppDomain context with unmanaged.
    +            apache::geode::client::createAppDomainContext = &Apache::Geode::Client::createAppDomainContext;
    --- End diff --
    
    Does moving the registration of the managed app domain context to cache factory from distributed system make it available sooner?


Github user pivotal-jbarrett commented on a diff in the pull request:

    https://github.com/apache/geode-native/pull/63#discussion_r106927339
  
    --- Diff: src/cppcache/integration-test/testThinClientExecuteFunctionPrSHOP.cpp ---
    @@ -563,7 +563,7 @@ DUNIT_TASK_DEFINITION(CLIENT1, Client1OpTest2)
           LOGINFO("FETimeOut begin onRegion");
           ExecutionPtr RexecutionPtr = FunctionService::onRegion(regPtr0);
           CacheableVectorPtr fe =
    -          RexecutionPtr->withArgs(CacheableInt32::create(5000))
    +          RexecutionPtr->withArgs(CacheableInt32::create(5000 * 1000))
    --- End diff --
    
    Yes. Ultimately we should consider removing the continuity issue between the client API and the server. The client is taking the timeout as seconds but sending to the server as milliseconds. Ultimately taking a chrono::duration would make the API more clear. The test would still need to be very explicit on the use of milliseconds are the argument to the function.


Github user echobravopapa commented on a diff in the pull request:

    https://github.com/apache/geode-native/pull/63#discussion_r106926886
  
    --- Diff: src/clicache/integration-test/ThinClientFunctionExecutionTestsN.cs ---
    @@ -959,7 +959,7 @@ public void ExecuteFETimeOut()
             region[i] = "VALUE--" + i;
           }
     
    -      object args = 5000;
    +      object args = 5000 * 1000;
    --- End diff --
    
    maybe a constant..


Github user echobravopapa commented on a diff in the pull request:

    https://github.com/apache/geode-native/pull/63#discussion_r106923938
  
    --- Diff: src/cppcache/integration-test/CMakeLists.txt ---
    @@ -169,8 +169,6 @@ set_property(TEST testThinClientPartitionResolver PROPERTY LABELS FLAKY)
     set_property(TEST testThinClientPdxDeltaWithNotification PROPERTY LABELS FLAKY)
     set_property(TEST testThinClientPdxInstance PROPERTY LABELS FLAKY)
     set_property(TEST testThinClientPdxTests PROPERTY LABELS FLAKY)
    --- End diff --
    
    5 more live tests, that is nice


Github user echobravopapa commented on a diff in the pull request:

    https://github.com/apache/geode-native/pull/63#discussion_r106924902
  
    --- Diff: src/cppcache/integration-test/testThinClientPoolExecuteFunction.cpp ---
    @@ -1158,9 +1160,10 @@ DUNIT_TASK_DEFINITION(CLIENT1, Client2OpTest)
     
           LOGINFO("FETimeOut begin onServer");
           ExecutionPtr serverExc = FunctionService::onServer(getHelper()->cachePtr);
    -      CacheableVectorPtr vec = serverExc->withArgs(CacheableInt32::create(5000))
    -                                   ->execute(FETimeOut, 5000)
    -                                   ->getResult();
    +      CacheableVectorPtr vec =
    +          serverExc->withArgs(CacheableInt32::create(5000 * 1000))
    --- End diff --
    
    might consider making a constant or two for these literals... in case someone is maintaining the test later on and needs/wants to adjust times used


Github user echobravopapa commented on a diff in the pull request:

    https://github.com/apache/geode-native/pull/63#discussion_r106926117
  
    --- Diff: src/cppcache/integration-test/testThinClientPoolExecuteFunction.cpp ---
    @@ -1506,48 +1353,10 @@ void runFunctionExecution(bool isEndpoint) {
       CALL_TASK(StopC1);
       CALL_TASK(CloseServers);
       CALL_TASK(CloseLocator1);
    -
    --- End diff --
    
    What were these big (removed) chunks testing?
    
    - out of scope?
    - redundant?


Github user echobravopapa commented on a diff in the pull request:

    https://github.com/apache/geode-native/pull/63#discussion_r106924253
  
    --- Diff: src/cppcache/integration-test/testThinClientExecuteFunctionPrSHOP.cpp ---
    @@ -563,7 +563,7 @@ DUNIT_TASK_DEFINITION(CLIENT1, Client1OpTest2)
           LOGINFO("FETimeOut begin onRegion");
           ExecutionPtr RexecutionPtr = FunctionService::onRegion(regPtr0);
           CacheableVectorPtr fe =
    -          RexecutionPtr->withArgs(CacheableInt32::create(5000))
    +          RexecutionPtr->withArgs(CacheableInt32::create(5000 * 1000))
    --- End diff --
    
    Should we be marking these areas for posterity and conversion to only using milli?


Github user pivotal-jbarrett commented on a diff in the pull request:

    https://github.com/apache/geode-native/pull/63#discussion_r106927884
  
    --- Diff: src/clicache/src/CacheFactory.cpp ---
    @@ -84,6 +85,12 @@ namespace Apache
     					//TODO::split
               SafeConvertClassGeneric::SetAppDomainEnabled(appDomainEnable);
     
    +          if (appDomainEnable)
    +          {
    +            // Register managed AppDomain context with unmanaged.
    +            apache::geode::client::createAppDomainContext = &Apache::Geode::Client::createAppDomainContext;
    --- End diff --
    
    No, it just looked better here since the surrounding code was doing things with the appDomainEnabled flag. Where it came from had no other AppDomain code and didn't check the flag so it was always "enabled". Now it will be enable only when the `appdomain-enabled` property is set.



Github user pivotal-jbarrett commented on a diff in the pull request:

    https://github.com/apache/geode-native/pull/63#discussion_r106928287
  
    --- Diff: src/clicache/src/CacheFactory.cpp ---
    @@ -84,6 +85,12 @@ namespace Apache
     					//TODO::split
               SafeConvertClassGeneric::SetAppDomainEnabled(appDomainEnable);
     
    +          if (appDomainEnable)
    +          {
    +            // Register managed AppDomain context with unmanaged.
    +            apache::geode::client::createAppDomainContext = &Apache::Geode::Client::createAppDomainContext;
    --- End diff --
    
    I think we may want to just abandon the `appdomain-enabled` property and always enable AppDomain support when using the .NET client. I don't know that there is any good reason for running disabled since .NET uses AppDomains heavily (prior to .NET Core).



Github user mmartell commented on a diff in the pull request:

    https://github.com/apache/geode-native/pull/63#discussion_r106929025
  
    --- Diff: src/clicache/integration-test/ThinClientAppDomainFunctionExecutionTests.cs ---
    @@ -0,0 +1,282 @@
    +//=========================================================================
    +// Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
    +// This product is protected by U.S. and international copyright
    +// and intellectual property laws. Pivotal products are covered by
    +// more patents listed at http://www.pivotal.io/patents.
    +//========================================================================
    +
    +using System;
    +using System.Collections.Generic;
    +using System.Collections;
    +using System.Threading;
    +
    +namespace Apache.Geode.Client.UnitTests
    +{
    +  using NUnit.Framework;
    +  using Apache.Geode.DUnitFramework;
    +  using Apache.Geode.Client.Tests;
    +
    +  using Apache.Geode.Client;
    +  using Region = Apache.Geode.Client.IRegion<Object, Object>;
    +
    +  public class MyAppDomainResultCollector<TResult> : IResultCollector<TResult>
    +  {
    +    #region Private members
    +    private bool m_resultReady = false;
    +    ICollection<TResult> m_results = null;
    +    private int m_addResultCount = 0;
    +    private int m_getResultCount = 0;
    +    private int m_endResultCount = 0;
    +    #endregion
    +    public int GetAddResultCount()
    +    {
    +      return m_addResultCount;
    +    }
    +    public int GetGetResultCount()
    +    {
    +      return m_getResultCount;
    +    }
    +    public int GetEndResultCount()
    +    {
    +      return m_endResultCount;
    +    }
    +    public MyAppDomainResultCollector()
    +    {
    +      m_results = new List<TResult>();
    +    }
    +    public void AddResult(TResult result)
    +    {
    +      Util.Log("hitesh in MyAppDomainResultCollector " + result + " :  " + result.GetType());
    --- End diff --
    
    What's the significance of "hitesh in"?


Github user pivotal-jbarrett commented on a diff in the pull request:

    https://github.com/apache/geode-native/pull/63#discussion_r106929690
  
    --- Diff: src/clicache/integration-test/ThinClientAppDomainFunctionExecutionTests.cs ---
    @@ -0,0 +1,282 @@
    +//=========================================================================
    +// Copyright (c) 2002-2014 Pivotal Software, Inc. All Rights Reserved.
    +// This product is protected by U.S. and international copyright
    +// and intellectual property laws. Pivotal products are covered by
    +// more patents listed at http://www.pivotal.io/patents.
    +//========================================================================
    +
    +using System;
    +using System.Collections.Generic;
    +using System.Collections;
    +using System.Threading;
    +
    +namespace Apache.Geode.Client.UnitTests
    +{
    +  using NUnit.Framework;
    +  using Apache.Geode.DUnitFramework;
    +  using Apache.Geode.Client.Tests;
    +
    +  using Apache.Geode.Client;
    +  using Region = Apache.Geode.Client.IRegion<Object, Object>;
    +
    +  public class MyAppDomainResultCollector<TResult> : IResultCollector<TResult>
    +  {
    +    #region Private members
    +    private bool m_resultReady = false;
    +    ICollection<TResult> m_results = null;
    +    private int m_addResultCount = 0;
    +    private int m_getResultCount = 0;
    +    private int m_endResultCount = 0;
    +    #endregion
    +    public int GetAddResultCount()
    +    {
    +      return m_addResultCount;
    +    }
    +    public int GetGetResultCount()
    +    {
    +      return m_getResultCount;
    +    }
    +    public int GetEndResultCount()
    +    {
    +      return m_endResultCount;
    +    }
    +    public MyAppDomainResultCollector()
    +    {
    +      m_results = new List<TResult>();
    +    }
    +    public void AddResult(TResult result)
    +    {
    +      Util.Log("hitesh in MyAppDomainResultCollector " + result + " :  " + result.GetType());
    --- End diff --
    
    Doh! thanks!


Github user pivotal-jbarrett commented on a diff in the pull request:

    https://github.com/apache/geode-native/pull/63#discussion_r106929867
  
    --- Diff: src/clicache/integration-test/ThinClientFunctionExecutionTestsN.cs ---
    @@ -959,7 +959,7 @@ public void ExecuteFETimeOut()
             region[i] = "VALUE--" + i;
           }
     
    -      object args = 5000;
    +      object args = 5000 * 1000;
    --- End diff --
    
    I felt it was important to call out the disconnect between units here rather than hide it in a constant.


Github user echobravopapa commented on a diff in the pull request:

    https://github.com/apache/geode-native/pull/63#discussion_r106929938
  
    --- Diff: src/clicache/src/CacheFactory.cpp ---
    @@ -84,6 +85,12 @@ namespace Apache
     					//TODO::split
               SafeConvertClassGeneric::SetAppDomainEnabled(appDomainEnable);
     
    +          if (appDomainEnable)
    +          {
    +            // Register managed AppDomain context with unmanaged.
    +            apache::geode::client::createAppDomainContext = &Apache::Geode::Client::createAppDomainContext;
    --- End diff --
    
    +1 make it a built default, less property juggling for the app devs


Github user pivotal-jbarrett commented on a diff in the pull request:

    https://github.com/apache/geode-native/pull/63#discussion_r106930126
  
    --- Diff: src/cppcache/integration-test/testThinClientPoolExecuteFunction.cpp ---
    @@ -1506,48 +1353,10 @@ void runFunctionExecution(bool isEndpoint) {
       CALL_TASK(StopC1);
       CALL_TASK(CloseServers);
       CALL_TASK(CloseLocator1);
    -
    --- End diff --
    
    Like I said in the review request. This test was split out into tho two tests. The test had two different tests crammed into one file. The big delete in this file is all the crap that became the second test.


Github user pivotal-jbarrett commented on a diff in the pull request:

    https://github.com/apache/geode-native/pull/63#discussion_r106930234
  
    --- Diff: src/cppcache/integration-test/testThinClientPoolExecuteFunction.cpp ---
    @@ -1158,9 +1160,10 @@ DUNIT_TASK_DEFINITION(CLIENT1, Client2OpTest)
     
           LOGINFO("FETimeOut begin onServer");
           ExecutionPtr serverExc = FunctionService::onServer(getHelper()->cachePtr);
    -      CacheableVectorPtr vec = serverExc->withArgs(CacheableInt32::create(5000))
    -                                   ->execute(FETimeOut, 5000)
    -                                   ->getResult();
    +      CacheableVectorPtr vec =
    +          serverExc->withArgs(CacheableInt32::create(5000 * 1000))
    --- End diff --
    
    See comment on same request below.



Github user echobravopapa commented on a diff in the pull request:

    https://github.com/apache/geode-native/pull/63#discussion_r106933661
  
    --- Diff: src/clicache/integration-test/ThinClientFunctionExecutionTestsN.cs ---
    @@ -959,7 +959,7 @@ public void ExecuteFETimeOut()
             region[i] = "VALUE--" + i;
           }
     
    -      object args = 5000;
    +      object args = 5000 * 1000;
    --- End diff --
    
    fair choice


Commit aad4545379cdaa3321ba648a3806504973403e38 in geode-native's branch refs/heads/develop from Jacob Barrett
[ https://git-wip-us.apache.org/repos/asf?p=geode-native.git;h=aad4545 ]

GEODE-2657: Fixes and tests Function Execution.

- Corrects message formatting.
- Fixes integration tests.


Commit d4d4a93d0cd9824217037fea20bacd68640784a9 in geode-native's branch refs/heads/develop from Jacob Barrett
[ https://git-wip-us.apache.org/repos/asf?p=geode-native.git;h=d4d4a93 ]

GEODE-2657: Fixes .NET test ThinClientFunctionExecutionTests.

- Timeout is ms.


Commit b4fe674a127695836f0351e49f1c06c7b818114e in geode-native's branch refs/heads/develop from Jacob Barrett
[ https://git-wip-us.apache.org/repos/asf?p=geode-native.git;h=b4fe674 ]

GEODE-2657: Tests Function Execution with AppDomains.

This closes #54.
This closes #63.


Github user asfgit closed the pull request at:

    https://github.com/apache/geode-native/pull/54


Github user asfgit closed the pull request at:

    https://github.com/apache/geode-native/pull/63


