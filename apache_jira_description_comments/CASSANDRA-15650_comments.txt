This one is weird.  Only one code path skips and that only happens if you ask for a index table, the only other case this could happen is if there are two hosts defined and only one of them is the coordinator.  since I only define 1 I don't see how the second case happens, so this only makes sense if we skip, which would require org.apache.cassandra.service.StorageService#getValidColumnFamilies to return a empty list (may be some how possible that the keyspace list is empty some how, and then this defaults to repair all tables, even in this case we should still fail since the coordinator is the only host present)

Im seeing that its not one test but many, and seeing two patterns

* expected failure but was success
* polling happens before notification (such as with snapshotFailure where polling sees the failure before the notification so uses the other error message)

To help me replicate I am using the following scripts

{code}
$ cat ci-test-loop
#!/usr/bin/env bash

#set -o xtrace
set -o errexit
set -o pipefail
set -o nounset

class_name="$1"
path="$(echo "$class_name" | tr '.' '/' ).java"
prefix="$( find test | grep "$path" | awk -F/ '{print $2}' )"

while ant testclasslist -Dtest.classlistfile=<(echo "$path") -Dtest.classlistprefix=$prefix ; do
  rm -rf build/test/logs || true
done;
{code}

{code}
$ cat mac-throttle.sh
#!/usr/bin/env bash

#set -o xtrace
set -o errexit
set -o pipefail
set -o nounset

bin="$(cd "$(dirname "$0")" > /dev/null; pwd)"

_main() {
  local pid
  while true; do
    pid="$(ps -ef | grep JUnitTestRunner | grep -v grep | awk '{print $2}' || true)"
    if [ ! -z "${pid:-}" ]; then
      renice +15 -p $pid || true
    fi
    sleep 1
  done
}

_main "$@"
{code}

{code}
for core in $(sudo cpuctl list | awk -F: '{print $1}' | tr -d 'CPU' | tail -n +3); do sudo cpuctl offline $core; done;
{code}

[~dcapwell] Are you looking for a reviewer or already have someone? :-)


sorry for the late reply!

[~e.dimitrova] would be glad if you reviewed =)

Alright, I am gonna do it tonight. Have to finish something now

To also help with the review, a few things changed but only a hand full solve the problem.

1) there is a bug in nodetool repair (client side) where the error notification isn't seen (expected behavior, notifications are lossy) but the complete is.  In this case the return code is 0 though the message will say there was a failure.  I changed it so we double check for errors.
2) the slow tests take 6m10s on my laptop with only 2 cores running; the dtest timeout is 6m.  I split the tests into 2 (which causes 3 new implementations: preview, IR, full) which now gets it to 4m30s under the same settings.

The other changes are
1) better assert messages, useful to see issue #1, but generally offer more detail than before
2) thread renaming, this is a operational improvement as it better allows us to see which threads are running which repair.  This ties in well with improvements to #2 as it will show which repair is timed out rather than "there exists a repair"

Apologize, started this only in the afternoon, got some troubles earlier.

Thanks for the additional explanation, that helped!

As we talked on slack, for some weird reason the shell script is failing to run.
But with the simple loop of the ant command, the test runs properly. (putting this here for the record in case someone else decides to play with this one and experience my issues)
Unfortunately, it never failed on my Mac, also on ubuntu vm.
But I checked the logic and in general it looks good to me. 

Based on the JUnit documentation I was tempted to say you are actually implementing assertTimeout for a supplier and not assertTimeoutPreemptively which is for executables.
But I saw you actually adjusted the original implementation and from that perspective it is accurate.

From the circle logs I saw the way the threads are logging as there is another test failing. It looks really lengthy. I wanna look at it better tomorrow morning with a refreshed mind and implement a couple of other tests before voting for the patch. Thanks!
 

LGTM
Thanks
I have only one question, why did you decide to do the throwAsUncheckedException? Not sure I understand correctly.

[~blerer] can you, please, check and commit if you don't have anything in addition? Thanks!

Throw as unchecked means I don't need to wrap, that's basically it; take a checked exception and throw without needing to check

[~blerer] fixed all feedback, can you review again?

Committed into trunk at dfc279a22a5563ac7a832a586914d5410426e9b7

Thanks for the patch [~dcapwell].
Thanks for the review [~e.dimitrova]

CASSANDRA-15683 was opened as [~blerer] was right that the exceptions shouldn't be touched. 
[~dcapwell]

[~dcapwell] actually changed the code as I asked. I just was not careful enough with the CI results.

reading JIRA now, the function throws Error or RuntimeException, so only errors won't be thrown as a RuntimeException.

There was also another issue found CASSANDRA-15684, the testing was based before the jvm dtests got pulled out and the merge didn't conflict since 4 files which were supposed to be deleted were not.  I am working on a patch for this.

