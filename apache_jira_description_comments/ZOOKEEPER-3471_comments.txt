+1 overall.  GitHub Pull Request  Build
      

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/4076//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/4076//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-github-pr-build/4076//console

This message is automatically generated.

[~lvfangmin] I feel I get the race condition you described at a high level, but I had a hard time to actually construct a conceptual model on the race that maps to the code (due to the convoluted session handling codes). 

Do you mind to provide a little bit more concrete examples on where exactly the race happening? In particular:

bq. delete the session from both local and global session tracker

Does this happen before or after the session upgrade finish? As we know, the session upgrade finishing by commit a session in quorum, so if this delete from session tracker finishes before session upgrading finish, then the commit session will re-add the session back; if this delete is finished after session upgrading finish, then we still have the session on other quorum servers. So every case seems ok?

Hi Michael, sorry for the lately reply, just saw your comment here.

Here is the detailed flow for this issue:
 # client created a local session s1
 # it then issued create ephemeral node request, whichÂ will go through the FollowerRequestProcessor, check and upgrade the session
 # but before it's finished checking, the client issued close session request immediately, which will be treated as a local session
 # in case the previous upgrading session is finished and committed, then executing the local close session in step 3 in FinalRequestProcessor, [LearnerSessionTracker|[https://github.com/apache/zookeeper/blob/master/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSessionTracker.java#L76]] will remove it from both local session and global session
 # so the global session will miss on this learner, but exists on others.

Let me know if this is not clear.

Issue resolved by pull request 1025
[https://github.com/apache/zookeeper/pull/1025]

SUCCESS: Integrated in Jenkins build ZooKeeper-trunk #730 (See [https://builds.apache.org/job/ZooKeeper-trunk/730/])
ZOOKEEPER-3471: Fix potential lock unavailable due to dangling ephemeral (andor: rev 4951a090d7c946f57ac5ab09b5d48a5d7831001d)
* (edit) zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java
* (edit) zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/SessionUpgradeQuorumTest.java


SUCCESS: Integrated in Jenkins build Zookeeper-trunk-single-thread #568 (See [https://builds.apache.org/job/Zookeeper-trunk-single-thread/568/])
ZOOKEEPER-3471: Fix potential lock unavailable due to dangling ephemeral (andor: rev 4951a090d7c946f57ac5ab09b5d48a5d7831001d)
* (edit) zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/SessionUpgradeQuorumTest.java
* (edit) zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java


Thanks [~lvfangmin] for getting back on this. Your reply explained well on the race condition. My initial understanding after reading problem description was that this was a quorum level problem (where my confusions came from) but it actually is a local (learner specific) problem, which now makes sense to me.

