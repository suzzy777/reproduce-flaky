Load the entry cache only if endIndex is greater than the last applied index.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 17s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  0s{color} | {color:blue} Findbugs executables are not available. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red}  0m  0s{color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
|| || || || {color:brown} master Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  3m 32s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  1m 18s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 25s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 58s{color} | {color:green} master passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  1m 25s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  1m 14s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  1m 14s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 16s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 55s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 28m 46s{color} | {color:red} root in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 23s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 39m 45s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | ratis.netty.TestRaftReconfigurationWithNetty |
|   | ratis.server.raftlog.TestRaftLogMetrics |
|   | ratis.netty.TestRaftWithNetty |
|   | ratis.server.simulation.TestRaftWithSimulatedRpc |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=19.03.1 Server=19.03.1 Image:yetus/ratis:date2019-08-13 |
| JIRA Issue | RATIS-619 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12977535/RATIS-619.01.patch |
| Optional Tests |  dupname  asflicense  javac  javadoc  unit  findbugs  checkstyle  compile  |
| uname | Linux 69ef0f28df22 4.15.0-54-generic #58-Ubuntu SMP Mon Jun 24 10:55:24 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-RATIS-Build/yetus-personality.sh |
| git revision | master / 2739b4e |
| maven | version: Apache Maven 3.6.0 (97c98ec64a1fdfee7767ce5ffb20918da4f719f3; 2018-10-24T18:41:47Z) |
| Default Java | 1.8.0_222 |
| unit | https://builds.apache.org/job/PreCommit-RATIS-Build/930/artifact/out/patch-unit-root.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-RATIS-Build/930/testReport/ |
| Max. process+thread count | 1988 (vs. ulimit of 5000) |
| modules | C: ratis-server U: ratis-server |
| Console output | https://builds.apache.org/job/PreCommit-RATIS-Build/930/console |
| Powered by | Apache Yetus 0.8.0   http://yetus.apache.org |


This message was automatically generated.



Looks good to me. +1 (Failed tests looks flaky as they fail sometimes without the patch as well when ran locally)

Nit:
can we change the log message here(just to say specifically that we are skipping only entry cache as segments and index will anyways be loaded):-
from
{code}
 } else {
238	          if (LOG.isTraceEnabled()) {
239	            LOG.trace("Skip loading of log segment {} older than last " +
240	                "applied index {}", pi.getPath(), lastIndexInSnapshot);
241	          }
242	        }
{code}
to
{code}
 } else {
238	          if (LOG.isTraceEnabled()) {
239	            LOG.trace("Skip loading entries of the log segment {} in the cache which are older than " +
240	                "applied index {} of the latest snapshot", pi.getPath(), lastIndexInSnapshot);
{code}





 

Thanks, [~ankit@apache.org] for the review. Updated patch.

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  2m 21s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  0s{color} | {color:blue} Findbugs executables are not available. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red}  0m  0s{color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
|| || || || {color:brown} master Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  4m 12s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  1m 12s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 23s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 53s{color} | {color:green} master passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  1m 22s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  1m 14s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  1m 14s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 14s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 46s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 27m 12s{color} | {color:red} root in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 19s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 40m 22s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | ratis.TestMultiRaftGroup |
|   | ratis.examples.filestore.TestFileStoreWithNetty |
|   | ratis.netty.TestRaftStateMachineExceptionWithNetty |
|   | ratis.netty.TestRaftReconfigurationWithNetty |
|   | ratis.grpc.TestRaftSnapshotWithGrpc |
|   | ratis.grpc.TestRaftAsyncWithGrpc |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=19.03.1 Server=19.03.1 Image:yetus/ratis:date2019-08-26 |
| JIRA Issue | RATIS-619 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12978615/RATIS-619.02.patch |
| Optional Tests |  dupname  asflicense  javac  javadoc  unit  findbugs  checkstyle  compile  |
| uname | Linux aa9cfca3cb18 4.15.0-58-generic #64-Ubuntu SMP Tue Aug 6 11:12:41 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-RATIS-Build/yetus-personality.sh |
| git revision | master / f401c7a |
| maven | version: Apache Maven 3.6.0 (97c98ec64a1fdfee7767ce5ffb20918da4f719f3; 2018-10-24T18:41:47Z) |
| Default Java | 1.8.0_222 |
| unit | https://builds.apache.org/job/PreCommit-RATIS-Build/940/artifact/out/patch-unit-root.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-RATIS-Build/940/testReport/ |
| Max. process+thread count | 1758 (vs. ulimit of 5000) |
| modules | C: ratis-server U: ratis-server |
| Console output | https://builds.apache.org/job/PreCommit-RATIS-Build/940/console |
| Powered by | Apache Yetus 0.8.0   http://yetus.apache.org |


This message was automatically generated.



| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  1m 20s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  0s{color} | {color:blue} Findbugs executables are not available. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red}  0m  0s{color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
|| || || || {color:brown} master Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  4m  0s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  1m 19s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 25s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 59s{color} | {color:green} master passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  1m 29s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  1m  8s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  1m  8s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 15s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 57s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 29m 40s{color} | {color:red} root in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 23s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 42m 16s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | ratis.logservice.server.TestMetaServer |
|   | ratis.logservice.TestLogServiceWithGrpc |
|   | ratis.logservice.TestLogServiceWithNetty |
|   | ratis.grpc.TestRaftStateMachineExceptionWithGrpc |
|   | ratis.netty.TestRaftSnapshotWithNetty |
|   | ratis.grpc.TestWatchRequestWithGrpc |
|   | ratis.netty.TestRetryCacheWithNettyRpc |
|   | ratis.netty.TestRaftStateMachineExceptionWithNetty |
|   | ratis.server.simulation.TestRaftStateMachineExceptionWithSimulatedRpc |
|   | ratis.examples.filestore.TestFileStoreWithGrpc |
|   | ratis.examples.filestore.TestFileStoreWithNetty |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=19.03.1 Server=19.03.1 Image:yetus/ratis:date2019-08-26 |
| JIRA Issue | RATIS-619 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12978615/RATIS-619.02.patch |
| Optional Tests |  dupname  asflicense  javac  javadoc  unit  findbugs  checkstyle  compile  |
| uname | Linux eefd3d266b7e 4.15.0-54-generic #58-Ubuntu SMP Mon Jun 24 10:55:24 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-RATIS-Build/yetus-personality.sh |
| git revision | master / f401c7a |
| maven | version: Apache Maven 3.6.0 (97c98ec64a1fdfee7767ce5ffb20918da4f719f3; 2018-10-24T18:41:47Z) |
| Default Java | 1.8.0_222 |
| unit | https://builds.apache.org/job/PreCommit-RATIS-Build/941/artifact/out/patch-unit-root.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-RATIS-Build/941/testReport/ |
| Max. process+thread count | 1566 (vs. ulimit of 5000) |
| modules | C: ratis-server U: ratis-server |
| Console output | https://builds.apache.org/job/PreCommit-RATIS-Build/941/console |
| Powered by | Apache Yetus 0.8.0   http://yetus.apache.org |


This message was automatically generated.



The patch seems not fixing the problem: It still loads all the entries for the group.  It just does not keep the pre-snapshot entries in the cache.

[~szetszwo] This change was based on discussion with [~msingh] that we still wanted the segment and index loaded. Individual entries will not be loaded in the cache, so hoping to get some improvement. When a slow follower asks for that segment we will load from disk with this implementation. 

If we skip loading completely, the slow follower will get an error, right?

[~szetszwo], the current patch will help in avoiding memory/ cache being populated with entries which will be evicted pretty soon. So this patch will help with better memory utilization during restart.

Why moving away from the original idea of skipping loading the entries before the snapshot?  It sounds even better.

Also, why this is a blocker?  

[~szetszwo], I had marked this as blocker by mistake.

The reason for moving away from the original idea is this.

Leader{L(101), S(100)}, F{L(98), S(0)}, where L is log index and S is snapshot index.
If here if the leader restart, then the follower will not be able to read the logs from the leader because the log index 99 and after are not loaded. Which will cause the ratis pipeline to install snapshot.

This in case of Ozone will lead to pipeline failure, which will destroy the ozone data pipeline.

In order to work around this, I suggest that we load up all the available log indexes and just load only the ones required into the memory.


> If here if the leader restart, then the follower will not be able to read the logs from the leader because the log index 99 and after are not loaded. ...

We may load the log at the time when this happens.  This is going to be a big improvement when there are a lot of log entires stored on the disk.

Yes, how about we divide this into 2 tasks, in the first one, we just avoid loading the segment data and in the second patch, we can try to do this second task of not loading the segment at all?

> Yes, how about we divide this into 2 tasks, in the first one, we just avoid loading the segment data ...

I guess you mean reading the segment files but not caching them.  For this approach, I doubt if it is a real improvement since caching is cheap but reading the file is expensive.  If we already have paid the expensive cost to read the files, why not keeping them in cache as well?  Otherwise, when the leader needs to send the log to a follower, we need to pay the expensive cost to read the files again.  The log entries seems to be not cached again, then we pay the expensive cost each time when there is a follower needing the entries.

Marking this as Abandoned, for now, we can get back to this later I guess.

