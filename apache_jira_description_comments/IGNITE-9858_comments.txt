GitHub user xtern opened a pull request:

    https://github.com/apache/ignite/pull/4977

    IGNITE-9858

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xtern/ignite IGNITE-9858

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/ignite/pull/4977.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #4977
    
----
commit dab8e7afc309cdccfd717bf57f46d174e9d9d82a
Author: pereslegin-pa <xxtern@...>
Date:   2018-10-12T15:50:41Z

    IGNITE-9858 Test fix.

----


{panel:title=Possible Blockers|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1}
{color:#d04437}Hadoop{color} [[tests 0 Exit Code |https://ci.ignite.apache.org/viewLog.html?buildId=2082599]]
* IgniteHadoopFileSystemClientBasedPrimarySelfTest.testClientReconnectMultithreaded (last started)

{color:#d04437}_Javadoc_{color} [[tests 0 Exit Code , BuildFailureOnMessage |https://ci.ignite.apache.org/viewLog.html?buildId=2082603]]

{color:#d04437}PDS (Direct IO) 1{color} [[tests 0 Exit Code |https://ci.ignite.apache.org/viewLog.html?buildId=2082601]]
* IgnitePdsWithTtlTest.testStartStopAfterRebalanceWithTtlExpirable (last started)

{panel}
[TeamCity Run All|http://ci.ignite.apache.org/viewLog.html?buildId=2077363&amp;buildTypeId=IgniteTests24Java8_RunAll]

[~xtern], I believe the behavior you described is not correct because it breaks concurrent server and client nodes start using shared VM IP finder.
Can you please elaborate how specifically the race between two nodes happen and when the check for client node is performed?
We should fix this the root cause because many other tests may be affected by the same issue.

[~agoncharuk], check for client node is performed in {{TcpDiscoveryIpFinderAdapter#initializeLocalAddresses}} (I updated ticket description).

We have one instance of IpFinder and following execution order:

1. Server injects ignite instance resource into IpFinder.
{noformat}
	at org.apache.ignite.internal.processors.resource.GridResourceProcessor.inject(GridResourceProcessor.java:283)
	at org.apache.ignite.internal.processors.resource.GridResourceProcessor.inject(GridResourceProcessor.java:252)
	at org.apache.ignite.internal.processors.resource.GridResourceProcessor.injectGeneric(GridResourceProcessor.java:233)
	at org.apache.ignite.internal.managers.GridManagerAdapter.inject(GridManagerAdapter.java:173)
	at org.apache.ignite.internal.managers.GridManagerAdapter.startSpi(GridManagerAdapter.java:257)
	at org.apache.ignite.internal.managers.discovery.GridDiscoveryManager.start(GridDiscoveryManager.java:939)
	at org.apache.ignite.internal.IgniteKernal.startManager(IgniteKernal.java:1682)
	at org.apache.ignite.internal.IgniteKernal.start(IgniteKernal.java:1066)
	at org.apache.ignite.internal.IgnitionEx$IgniteNamedInstance.start0(IgnitionEx.java:2038)
	at org.apache.ignite.internal.IgnitionEx$IgniteNamedInstance.start(IgnitionEx.java:1730)
	at org.apache.ignite.internal.IgnitionEx.start0(IgnitionEx.java:1158)
	at org.apache.ignite.internal.IgnitionEx.start(IgnitionEx.java:656)
{noformat}
2. Client injects ignite instance resource into IpFinder (same stacktrace).

3. Client initializes SPI, checks for client discovery:
{noformat}
 	at org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinderAdapter.discoveryClientMode(TcpDiscoveryIpFinderAdapter.java:113)
	at org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinderAdapter.initializeLocalAddresses(TcpDiscoveryIpFinderAdapter.java:61)
	at org.apache.ignite.spi.discovery.tcp.TcpDiscoveryImpl.registerLocalNodeAddress(TcpDiscoveryImpl.java:338)
	at org.apache.ignite.spi.discovery.tcp.ClientImpl.spiStart(ClientImpl.java:298)
	at org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi.spiStart(TcpDiscoverySpi.java:2023)
	at org.apache.ignite.internal.managers.GridManagerAdapter.startSpi(GridManagerAdapter.java:297)
	at org.apache.ignite.internal.managers.discovery.GridDiscoveryManager.start(GridDiscoveryManager.java:939)
	at org.apache.ignite.internal.IgniteKernal.startManager(IgniteKernal.java:1682)
	at org.apache.ignite.internal.IgniteKernal.start(IgniteKernal.java:1066)
	at org.apache.ignite.internal.IgnitionEx$IgniteNamedInstance.start0(IgnitionEx.java:2038)
	at org.apache.ignite.internal.IgnitionEx$IgniteNamedInstance.start(IgnitionEx.java:1730)
	at org.apache.ignite.internal.IgnitionEx.start0(IgnitionEx.java:1158)
	at org.apache.ignite.internal.IgnitionEx.start(IgnitionEx.java:656)
{noformat}
4. Server initializes SPI:
{noformat}
	at org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinderAdapter.discoveryClientMode(TcpDiscoveryIpFinderAdapter.java:113)
	at org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinderAdapter.initializeLocalAddresses(TcpDiscoveryIpFinderAdapter.java:61)
	at org.apache.ignite.spi.discovery.tcp.TcpDiscoveryImpl.registerLocalNodeAddress(TcpDiscoveryImpl.java:338)
	at org.apache.ignite.spi.discovery.tcp.ServerImpl.spiStart(ServerImpl.java:374)
	at org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi.spiStart(TcpDiscoverySpi.java:2023)
	at org.apache.ignite.internal.managers.GridManagerAdapter.startSpi(GridManagerAdapter.java:297)
	at org.apache.ignite.internal.managers.discovery.GridDiscoveryManager.start(GridDiscoveryManager.java:939)
	at org.apache.ignite.internal.IgniteKernal.startManager(IgniteKernal.java:1682)
	at org.apache.ignite.internal.IgniteKernal.start(IgniteKernal.java:1066)
	at org.apache.ignite.internal.IgnitionEx$IgniteNamedInstance.start0(IgnitionEx.java:2038)
	at org.apache.ignite.internal.IgnitionEx$IgniteNamedInstance.start(IgnitionEx.java:1730)
	at org.apache.ignite.internal.IgnitionEx.start0(IgnitionEx.java:1158)
	at org.apache.ignite.internal.IgnitionEx.start(IgnitionEx.java:656)
{noformat}
As a result both nodes assume that the local node is a client and don't register local address.

Usually in tests we start client node after starting the server, so this problem is not reproduced.

So, I see the following options:

1. Just replace ipfinder with non-shared version in this test (if this is not production case I think it's better solution).
2. Remove check for client discovery in {{TcpDiscoveryIpFinderAdapter#initializeLocalAddresses}}, but we still have {{MulticastIpFinder}} that relies on this check.
3. Change API {{TcpDiscoveryIpFinder#initializeLocalAddresses}} add explicit "client discovery" flag.
4. Add some static synchronization for {{startSpi}} in {{GridManagerAdapter}} (may affect multithread startup time).

Other thoughts?

{panel:title=No blockers found!|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}{panel}
[TeamCity Run All Results|http://ci.ignite.apache.org/viewLog.html?buildId=2213431&amp;buildTypeId=IgniteTests24Java8_RunAll]

Hello [~agoncharuk].
I implemented workaround for option 3. Without changing TcpDiscoveryIpFinder API - empty addresses list indicates that we're initializing client node.
I didn't change API, because I think it may affect compatibility, but it seems the better way is to add boolean flag to the  {{TcpDiscoveryIpFinder#initializeLocalAddresses}} method.

If we merge this workaround I can create ticket for change API in 3.0.

What do you think?

[~xtern] I reviewed your changes and I guess we can do code better, If I understand correctly, the main problem is in shared mode for IP finder we can get a race between injection and registration address? If it true, we can do not call spi.ipFinder.initializeLocalAddresses for client.

What about my fix example? Sure, we should remove isClient check inside TcpDiscoveryIpFinderAdapter too.
{code}
   boolean clientDiscovery = locNode.isClient() && !spi.isForceServerMode();

                while (true) {
                    try {
                        if (!clientDiscovery){
                            spi.ipFinder.initializeLocalAddresses(
                                U.resolveAddresses(spi.getAddressResolver(), locNode.socketAddresses()));
                        }

                        // Success.
                        break;
                    }
{code}

[~DmitriyGovorukhin], thank you for the review. Unfortunately suggested fix affects {{TcpDiscoveryMulticastIpFinder#initializeLocalAddresses}}, as I can see we collecting interfaces to send requests even for client discovery. I can investigate deeper effects of such change for multicast ip finder.

[~DmitriyGovorukhin], I found that TcpClientDiscoverySpiMulticastTest.testJoinWithMulticast hangs with the fix you suggested.

I also investigated the possibility of removing check in TcpDiscoveryIpFinderAdapter#initializeLocalAddresses (option 2), but faced with the fact that TcpDiscoverySpi replaces port 0 with default port 47500 ([code link|https://github.com/apache/ignite/blob/master/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java#L1901]) and in this case the client can connect to another cluster (IGFS tests reproduce this problem). I also tried to skip this replacement [here|https://github.com/apache/ignite/pull/5246/files#diff-7a68a14bf6d0ee82769328166d58a34cR1902], but this is not an obvious change, and I found at least one test failure (TcpDiscoveryVmIpFinderSelfTest.testUnregistration) with such changes. So I decided to go the other way.

[~xtern]

As far as I know registerLocalNodeAddress make sense only for server nodes, so I suggest several steps for fix problem:
 * Remove invoke "registerLocalNodeAddress" from ClientImpl:298
 * Remove method "discoveryClientMode" from TcpDiscoveryIpFinderAdapter:96
 * Remove field "ignite" from TcpDiscoveryIpFinderAdapter:46

After all these steps will be completed, we always will work with only servers addresses. What do you think?

[~DmitriyGovorukhin] thank you.

I checked the approach you suggested, and as a result I refactored {{TcpDiscoveryMulticastIpFinder}} to resolve (and collect) local addresses on demand, otherwise it's possible that a client node cannot find cluster from another subnet (I can explain in more detail how to reproduce this case).
Also, {{TcpDiscoverySharedFsIpFinder}} uses injected ignite instance resource to obtain working directory. If we replace this code with IgniteUtils.defaultWorkDirectory(), we may lose backward compatibility - so I decided to keep this code unchanged.

Please take a look at these changes.

{panel:title=--&gt; Run :: All: No blockers found!|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=2512312&amp;buildTypeId=IgniteTests24Java8_RunAll]

[~xtern] [~DmitriyGovorukhin] I see there are no comments here since Dec 11, but from issue description, it seems to be a test fix. Could you please find a spare minute to finalize the review?

[~xtern], [~dpavlov] I will try to look soon. 

[~xtern] Changes looks good to me, thanks for the contribution! Merge to master.

