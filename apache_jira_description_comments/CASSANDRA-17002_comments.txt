PR: https://github.com/apache/cassandra/pull/1495
CI: https://app.circleci.com/pipelines/github/frankgh/cassandra?branch=CASSANDRA-17002-2&filter=all

CI looks green, with minor known flaky tests failing

did first pass of reviews; the main comment is "how should we be accessing the table?", this question will make clear what the partition/cluster keys should be.  Second question is "how costly does this get as cluster grows", when you have a 1k+ cluster, memory is scares so a cache of events for each instance could become a problem.

We had a larger convo in slack, dumbing the jist here...

* A client API wanted a concept of "history" so it could know if a NORMAL node was recently bootstrapping
* nodetool gossipinfo is useful as a vtable
* this patch mimics the diagnostic logic, so should figure out how the two are related

[~dcapwell] [~yifanc] [~skoppu] thanks for the review and the discussion.

I will repurpose this Jira for the gossipinfo virtual table. I had a longer conversation in slack with Stefan Podkowinski to create a generic virtual table to expose all DiagnosticEvents. The scope of that table is a little larger, but the idea would be to have a table where you can query DiagnosticEvents like this:

{{SELECT * FROM events WHERE eventType = 'GossipEvent' AND timestamp >= 12222222}}

I will go ahead and create a new Jira for that work, and I will change the description and title of this Jira. I will be pushing a new commit for this work to support gossipinfo as a virtual table soon.

CI looks greenish, https://app.circleci.com/pipelines/github/frankgh/cassandra?branch=CASSANDRA-17002-2&filter=all . Failing tests unrelated to this commit

+1 on the new patch. 

Hi [~frankgh], I have started diag events in vtables here under CASSANDRA-13460. I would love to cooperate on that with you or you can take it from there and finish it.

We actually do have CEP for that here: https://cwiki.apache.org/confluence/display/CASSANDRA/CEP-12+Diagnostics+events+in+virtual+tables

Feel free to dump your ideas on CEP and we will definitely take it from there!

https://github.com/instaclustr/cassandra/commits/CASSANDRA-13460

Hi [~smiklosovic], I'd love to join the effort. I will go ahead and add my ideas to the CEP.

I repurposed this Jira to add a {{gossipinfo}} virtual table. Would you mind taking a look at the PR : https://github.com/apache/cassandra/pull/1495/files ?

Sure I ll take a look.

[~frankgh] I did few modifications here (as the last commit on top of your stuff,  it is rebased on top of current trunk, you might cherry-pick it)

I have basically filtered out all states which are unsupported (these X's states) + TOKENS. You will see it from the code. So by doing this, if there is some other state added, or removed,  tests would fail because the number of columns in your test which you are expecting (40) would not match anymore. And this is also your chance to take a look what state was added / removed and act accordingly in the tests or in the vtable class, like filtering that state out if not appropriate and similar.

In other words, iterating over all states and explicitly filtering out ones we are not interested in seems to be better approach in the long run than explicitly enumerating them.

[~yifanc] what do you think?

https://github.com/instaclustr/cassandra/tree/CASSANDRA-17002

[~smiklosovic] Thanks for the review. Yifan and I had actually discussed this approach. But our concern was that new states would change the vtable behavior. However, as you mentioned, any addition/subtraction of columns should be reflected on a failing test. I would prefer to keep the test with the explicit column names as to ensure that if one state is added and one is removed (and we still have the same number of columns), we should catch that in the test. It might be a very unlikely scenario, so we can also go with your route for the test.

[~yifanc] Let me know what you think. The patch looks good to me

The X* fields, in fact, _has to_ be included in the virtual table. For example, an 3.0 node interprets the "STATUS_WITH_PORT" field from a 4.0 node as "X1" (or so). Similarly, when we are having 5.0, and the 4.0 node need to be able to display the unknown but exist state as "Xn". 

Therefore, we should include all variants defined in ApplicationState enum. Do it make sense to you all? 

[~yifanc]that's a good point. I didn't think about that. In the nodetool gossipinfo output, there's no filtering either. The only {{ApplicationState}} I'm a little hesitant about adding is this one: {{X_11_PADDING}}. Does it make sense to have it? The comment in the code says: {{padding specifically for 1.1}} What do you think?

As I recall, gossipinfo does filter the TOKENS state since the output can be quite large there, but nothing else.  Why exclude X_11_PADDING specifically?  If we're going to display all the other padding states I don't see why this one should be filtered.

{{Hi [~brandon.williams] , }}

{{X_11_PADDING}} seems to be for 1.1 specifically. Since vtable support is a 4.0 feature, does it make sense to have it compatible with 1.1 {{ApplicationState}} in Gossip? Realistically, will we have a case of a 4+instance talking to a 1.1 instance? Maybe I'm missing something about that {{ApplicationState}}, we can add it if you think we might need it.

 
Note: {{TOKENS}} state is not part of the {{gossip_info}} vtable

To [~yifanc]'s point (discussing offline), this is a vtable, so users should be able to query the columns they want/need. I will go ahead and add it. It feels that by adding it, we have a 100% equivalency with {{nodetool gossipinfo}}.

bq. It feels that by adding it, we have a 100% equivalency with nodetool gossipinfo.

This sounds good to me, thanks! +1

thanks [~yifanc] for explaining these X's more specifically, I was thinking this was already settled between you and [~frankgh]. I dont have any problem with including them, of course. That will actually simplify the code even more.

We made some further minor improvements, current state of Francisco's branch looks good for me, + 1 on nice build running here: https://ci-cassandra.apache.org/job/Cassandra-devbranch/1503/

