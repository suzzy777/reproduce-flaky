Changes
Removes exposing containerID. Instead allows specifying task based affinity via the vertex+taskIndex. This is more generic and can be supported in the DAG api too but not done in this patch. This also also allows maintaining the affinity across re-executions of attempts.

Removes old API. Marked incompatible.

[~hitesh] Please review.

Comments: 
  
Not sure if this is really safe from a binary compatibility point of view. Might be worth testing a job that uses TaskLocationHints compiled against 0.5.0 and run using a 0.5.2-SNAPSHOT runtime. 

{code}
+    if (affinitizedTask != null) {
+      if (affinitizedTask.getTaskIndex() != other.affinitizedTask.getTaskIndex()) {
+        return false;
+      } else if (!affinitizedTask.getVertexName().equals(other.affinitizedTask.getVertexName())) {
         return false;
       }
-    } else if (other.containerId != null) {
+    } else if (other.affinitizedTask != null) {
       return false;
     }
{code}
   - I believe the "other.affinitizedTask != null" check should be done earlier before doing the != comparisons for vertex name and task index. Maybe add a unit test for this code to catch all the gotchas.

{code}
+          taskScheduler.allocateTask(taskAttempt,
+              event.getCapability(),
+              taskAttempt.getAssignedContainerID(),
+              Priority.newInstance(event.getPriority()),
+              event.getContainerContext(),
+              event);
{code}
  -  should this be using the affinityAttempt's container id? If the unit tests are not catching this, maybe add one more test? 






Binary compatibility should be fine. Would be hard to do since 0.5.1 and 0.5.2 are already incompatible.

bq. "other.affinitizedTask != null"
Was just following the existing code flow. Will check this.

bq. affinityAttempt's container id?
Good catch. Will check why the existing test for affinity did not catch this.


bq. Binary compatibility should be fine. Would be hard to do since 0.5.1 and 0.5.2 are already incompatible.

There are incompatible in that a 0.5.1 client cannot use a 0.5.2 AM. But a job compiled against either 0.5.0 or 0.5.1 should work when used with the 0.5.2 jars ( both client and AM ).

Made the changes. Tried with broadcastAndOneToOneExample from master branch and it worked fine.
The existing test case (broadcastAndOneToOneExample) does not catch this because in the mini cluster there isnt enough parallelism and the preferred container gets matched by chance because there are only 2 containers around. The test might have become flaky after this.
I added a new test case in TestTaskSchedulerEventHandler to test that its doing the translation.
Please take another look.

Most looks good except for the equals() check. it does not handle other being non-null and this.affinity being null. I think the equals() probably deserves a unit test now. 

Attaching patch with tests for equality check. Thanks for the review. Will commit soon.

commit 74c7f874d558f933fbf9697c537d204eb56806c9                                                                             
Author: Bikas Saha <bikas@apache.org>
Date:   Wed Oct 29 18:46:50 2014 -0700

    TEZ-1700. Replace containerId from TaskLocationHint with [TaskIndex+Vertex] based affinity (bikas)


