Very raw prototype is in {{ignite-6022-proto}} branch.

GitHub user dolphin1414 opened a pull request:

    https://github.com/apache/ignite/pull/3298

    IGNITE-6022: Implemented native batch execution support for DML statements.

    Implemented native batch execution support for DML statements.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gridgain/apache-ignite ignite-6022

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/ignite/pull/3298.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #3298
    
----
commit eacd01fc01c9dea0b81e7aec8d5bbd89852401ae
Author: rkondakov <rkondakov@...>
Date:   2017-12-27T11:53:30Z

    IGNITE-6022: Implemented native batch execution support for DML statements.

----


[~rkondakov], my comments:
1) {{DmlStatementsProcessor.processDmlSelectResultBatched}} - we should never reach this method in case of MERGE. Please make sure we have tests for this.
2) {{DmlBatchSender}} - could you please explain the meaning of these changes? I think we do not need any maps or so - array should be enough. Also, it is not efficient to flush *all* batches if duplicate in *one* of them is found. 
3) {{DmlBatchSender.perRowUpdateCounter}} - unused method
4) We need to extend test coverage for batched operations - use different types (INSERT, UPDATE, MERGE, DELETE), add multiple operations in a batch, simulate errors in the middle of the batch and make sure returned results conform to JDBC specification.

[~vozerov], my comments:
1) I agree. I'll add this test.
2) Concerning flushing all batches on duplicates found - I agree it's not efficient, I'll change this behavior into flushing only the affected batch. Concerning replacing a {{Map<Integer, Integer> cntPerRow}} with an array. I think it is not a good idea because we do not know the total size of the rows we need to update on {{DmlBatchSender}} creation stage. We have only cursor which allows to iterate over these rows. So, we have to manage the array size manually and extend it on demand. But it is possible to replace the {{Map}} with an {{ArrayList}}. I'm not sure it is much more efficient and easier to implement than a map, but I agree that if we have a range of integer keys from {{0}} to {{N}} it better to use array-like structures than map. I'll replace map with an {{ArrayList}}.
3) I'll remove this method.
4) I agree. I'll add tests with various scenarios in {{JdbcThinBatchSelfTest}}. Or should I add these tests not only for thin driver, but also for all Ignite JDBC driver types?

[~vozerov], tests are OK, please review.

[~vozerov], [tests|https://ci.ignite.apache.org/viewLog.html?buildId=1030080&] are ok, please review.

[~rkondakov]
Hi, my comments:

1. Do we really need additional ctor in {{SqlFieldsQueryEx}}? Args field is a list, not an array, and we have null check at {{addBatchedArgs}}, so nothing prevents us from using old ctor and adding as much args as we like. I don't think that pre-allocating list of given size justifies existence of an additional ctor we clearly can live without.
2. {{DmlStatementsProcessor.doInsertBatched}}: why do we not fail fast on unexpected exceptions and instead try to convert non {{IgniteSQLException}} s to {{SQLException}} s? [~vozerov] what could be correct behavior here, how do you think? I believe we should handle only {{IgniteSQLException}} s at this point.
3. {{DmlUtils.isBatched}} can be greatly simplified and turned into a one-liner, please do so ({{return (instanceof && ((QueryEx)isBatched)}})
4. {{SqlFieldsQueryEx.isBatched}} - please use {{F.isEmpty}}
5. {{JdbcRequestHandler.executeBatchedQuery}}: you don't need {{return}} in {{catch}} clause, instead please move everything after {{catch}} into {{try}}. Local var {{qryRes}} will be declared inside {{try}} then too.
6. Why does {{UpdatePlanBuilder.checkPlanCanBeDistributed}} count {{DmlUtils.isBatched}} unconditionally? Probably there are some cases when batch can be executed in distributed manner?
7. {{DmlBatchSender.add}}: you can simplify code and get rid of duplicate code at the end of this method by rewriting condition to {{if (batch.put(...) != null || batch.size() >= size)}}
8. {{DmlBatchSender.processPage}}: this constant copying of maps on each page looks quite suspicious to me. To avoid this, just keep two maps instead of one where needed: {{<Object, Integer>}} and {{Object, EntryProcessor}} (same sets of keys) and pass both to {{processPage}}. Method {{countAllRows}} will get simpler too (it will need only values of the first map).
9. Multiple violations of coding conventions - please don't put closing curly brace and anything else on the same line - like this: {{} catch {}}, instead you should move {{catch}} to the next line.
10. In the cases where there are maps or lists with contents that are hard to understand intuitively I would write concise comments about what those tons of generic args mean, or what are those lists of lists of lists.
11. {{UpdatePlan}}: {{createRows(Object[])}} and {{extractArgsValues}} contain parts of clearly copy-pasted code. Can't we unite those? Probably {{createRows(Object[])}} should just call {{extractArgsValues}}?

[~al.psc]
1. Ok, I'll get rid of it.
2. We do not fail on non-SQL exception due to JDBC specs 14.1.3 Handling Failures during Execution. Briefly: driver should process *all*  queries in the batch despite of any of them failed with *any* reason. If query failed, we mark it as {{Statement.EXECUTE_FAILED}} at  {{BatchUpdateException.getUpdateCounts}}. So we have to process all queries even if some of they fail with any exception, and return results of processing back to the client.
3. Ok, I'll fix it.
4. Ok, I'll fix it.
5. Ok, I'll fix it..
6.  Actually, I don't see any reasons for this check in {{UpdatePlanBuilder.checkPlanCanBeDistributed}}. I'll remove it. [~vozerov], is it safe to remove it?
7. Ok, I'll fix it.
8. Ok, I'll fix it.
9. Could you please point on such kind of violations? I haven't found any.
10. I agree, I'll add comments.
11. Ok, I'll fix it.

[~vozerov], [~al.psc], please review. Tests are ok, except one flaky test in Query 2 suite. 

I also found some problem with an SQL wrong error state and error code when distributed query execution fails on remote nodes. For example in {{JdbcThinBatchSelfTest#testBatchUpdateExceptionPrepared}} test an error should be {{SqlStateCode.CONVERSION_FAILED}} (due to wrong value was supplied as an argument), but we have  {{SqlStateCode.INTERNAL_ERROR}}. Should I add a new ticket for this?

[~rkondakov], my comment:

Class {{DmlBatchSender$Batch}}: please remove direct field usages and replace them with getters that you have already introduced. Also method {{Batch#rowProcessors}} looks unused.

[~al.psc], [~vozerov], I changed fields access to getters in {{Batch}} class. So, {{Batch#rowProcessors}} is used now in {{processPage()}} method. 

Logic hadn't been changed after this cosmetics fix, so I didn't restart a TC run. Please review the patch.

Github user asfgit closed the pull request at:

    https://github.com/apache/ignite/pull/3298


