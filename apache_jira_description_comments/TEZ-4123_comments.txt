I cannot see that TEZ-3664 contains any fix regarding this test class flakiness

UPDATE: it turned out that yarn disk healthcheck disabled the node, in logs:
{code}
2020-02-10 14:36:15,160 INFO  [RM Event dispatcher] rmnode.RMNodeImpl (RMNodeImpl.java:transition(1209)) - Node abstractdog-440s:42154 reported UNHEALTHY with details: 1/1 local-dirs usable space is below configured utilization percentage/no more usable space [ /home/abstractdog/apache/tez/tez-tests/target/org.apache.tez.mapreduce.TestMRRJobsDAGApi/org.apache.tez.mapreduce.TestMRRJobsDAGApi-localDir-nm-0_0 : used space above threshold of 90.0% ] ; 1/1 log-dirs usable space is below configured utilization percentage/no more usable space [ /home/abstractdog/apache/tez/tez-tests/target/org.apache.tez.mapreduce.TestMRRJobsDAGApi/org.apache.tez.mapreduce.TestMRRJobsDAGApi-logDir-nm-0_0 : used space above threshold of 90.0% ] 
{code}

seems like setting the percentage threshold solved the issue (my disk is on 93%)
{code}
conf.setInt("yarn.nodemanager.disk-health-checker.max-disk-utilization-per-disk-percentage", 99);
{code}

[~jeagles]: what do you think about setting this property for 99% in every cases where MiniTezCluster is used in tests? I think the current 90% could bring random flakiness into tests, where the environment itself is healthy (and suitable for testing simple yarn based tez unit tests), but yarn silently disables the testing node...we used to see similar issues in hive preCommit tests as well


[~abstractdog], I like this change proposal of defaulting to 99% and was able to reproduce this locally. Is there a good way to fix this globally in MiniTezCluster so individual tests don't have to set this. And do tests need the ability to override this setting for testing purposes?

[~jeagles]: created  [^TEZ-4123.01.patch] 
1. MiniTezCluster can set if before initializing
2. I haven't found any occurrences where tests use this but they still can provide a non-default value for the parameter if needed

| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 33s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} dupname {color} | {color:green}  0m  0s{color} | {color:green} No case conflicting files found. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 2 new or modified test files. {color} |
|| || || || {color:brown} master Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  4m 20s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 21s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 19s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 21s{color} | {color:green} master passed {color} |
| {color:blue}0{color} | {color:blue} spotbugs {color} | {color:blue}  0m 40s{color} | {color:blue} Used deprecated FindBugs config; considering switching to SpotBugs. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 36s{color} | {color:green} master passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  0m 13s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 12s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 12s{color} | {color:green} the patch passed {color} |
| {color:orange}-0{color} | {color:orange} checkstyle {color} | {color:orange}  0m 10s{color} | {color:orange} tez-tests: The patch generated 2 new + 3 unchanged - 0 fixed = 5 total (was 3) {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 12s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 36s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:red}-1{color} | {color:red} unit {color} | {color:red} 46m  8s{color} | {color:red} tez-tests in the patch failed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 13s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 55m  2s{color} | {color:black} {color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | tez.mapreduce.TestMRRJobsDAGApi |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=19.03.4 Server=19.03.4 base: https://builds.apache.org/job/PreCommit-TEZ-Build/288/artifact/out/Dockerfile |
| JIRA Issue | TEZ-4123 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12993113/TEZ-4123.01.patch |
| Optional Tests | dupname asflicense javac javadoc unit spotbugs findbugs checkstyle compile |
| uname | Linux fc93ac2404c2 4.15.0-74-generic #84-Ubuntu SMP Thu Dec 19 08:06:28 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | personality/tez.sh |
| git revision | master / 86182d0 |
| Default Java | 1.8.0_242 |
| checkstyle | https://builds.apache.org/job/PreCommit-TEZ-Build/288/artifact/out/diff-checkstyle-tez-tests.txt |
| unit | https://builds.apache.org/job/PreCommit-TEZ-Build/288/artifact/out/patch-unit-tez-tests.txt |
|  Test Results | https://builds.apache.org/job/PreCommit-TEZ-Build/288/testReport/ |
| Max. process+thread count | 1146 (vs. ulimit of 5500) |
| modules | C: tez-tests U: tez-tests |
| Console output | https://builds.apache.org/job/PreCommit-TEZ-Build/288/console |
| versions | git=2.7.4 maven=3.3.9 findbugs=3.0.1 |
| Powered by | Apache Yetus 0.11.1 https://yetus.apache.org |


This message was automatically generated.



seems like the patch revealed other issues...and I can still see some timeouts:
https://builds.apache.org/job/PreCommit-TEZ-Build/288/artifact/out/patch-unit-tez-tests.txt
{code}
[ERROR] Tests run: 14, Failures: 1, Errors: 5, Skipped: 0, Time elapsed: 554.81 s <<< FAILURE! - in org.apache.tez.mapreduce.TestMRRJobsDAGApi
[ERROR] testMultipleMRRSleepJobViaSession(org.apache.tez.mapreduce.TestMRRJobsDAGApi)  Time elapsed: 12.752 s  <<< FAILURE!
java.lang.AssertionError: expected:<READY> but was:<RUNNING>
	at org.apache.tez.mapreduce.TestMRRJobsDAGApi.testMultipleMRRSleepJobViaSession(TestMRRJobsDAGApi.java:502)

[ERROR] testNonDefaultFSStagingDir(org.apache.tez.mapreduce.TestMRRJobsDAGApi)  Time elapsed: 60.003 s  <<< ERROR!
java.lang.Exception: test timed out after 60000 milliseconds
	at org.apache.tez.mapreduce.TestMRRJobsDAGApi.testNonDefaultFSStagingDir(TestMRRJobsDAGApi.java:246)

[ERROR] testMRRSleepJobDagSubmit(org.apache.tez.mapreduce.TestMRRJobsDAGApi)  Time elapsed: 60.002 s  <<< ERROR!
java.lang.Exception: test timed out after 60000 milliseconds
	at org.apache.tez.mapreduce.TestMRRJobsDAGApi.testMRRSleepJobDagSubmitCore(TestMRRJobsDAGApi.java:701)
	at org.apache.tez.mapreduce.TestMRRJobsDAGApi.testMRRSleepJobDagSubmitCore(TestMRRJobsDAGApi.java:544)
	at org.apache.tez.mapreduce.TestMRRJobsDAGApi.testMRRSleepJobDagSubmit(TestMRRJobsDAGApi.java:326)

[ERROR] testMRRSleepJobDagSubmitAndKillViaRPC(org.apache.tez.mapreduce.TestMRRJobsDAGApi)  Time elapsed: 60.002 s  <<< ERROR!
java.lang.Exception: test timed out after 60000 milliseconds
	at org.apache.tez.mapreduce.TestMRRJobsDAGApi.testMRRSleepJobDagSubmitCore(TestMRRJobsDAGApi.java:747)
	at org.apache.tez.mapreduce.TestMRRJobsDAGApi.testMRRSleepJobDagSubmitCore(TestMRRJobsDAGApi.java:544)
	at org.apache.tez.mapreduce.TestMRRJobsDAGApi.testMRRSleepJobDagSubmitAndKillViaRPC(TestMRRJobsDAGApi.java:517)

[ERROR] testMRRSleepJobDagSubmitAndKill(org.apache.tez.mapreduce.TestMRRJobsDAGApi)  Time elapsed: 60.003 s  <<< ERROR!
java.lang.Exception: test timed out after 60000 milliseconds
	at org.apache.tez.mapreduce.TestMRRJobsDAGApi.testMRRSleepJobDagSubmitCore(TestMRRJobsDAGApi.java:701)
	at org.apache.tez.mapreduce.TestMRRJobsDAGApi.testMRRSleepJobDagSubmitCore(TestMRRJobsDAGApi.java:544)
	at org.apache.tez.mapreduce.TestMRRJobsDAGApi.testMRRSleepJobDagSubmitAndKill(TestMRRJobsDAGApi.java:337)

[ERROR] testAMRelocalizationConflict(org.apache.tez.mapreduce.TestMRRJobsDAGApi)  Time elapsed: 120.002 s  <<< ERROR!
java.lang.Exception: test timed out after 120000 milliseconds
	at org.apache.tez.mapreduce.TestMRRJobsDAGApi.testMRRSleepJobDagSubmitCore(TestMRRJobsDAGApi.java:747)
	at org.apache.tez.mapreduce.TestMRRJobsDAGApi.testAMRelocalizationConflict(TestMRRJobsDAGApi.java:438)
{code}

I'm considering this as a step forward, because without the patch, I saw complete class timeout without succeeding tests, e.g. TEZ-4100:
https://builds.apache.org/job/PreCommit-TEZ-Build/279/artifact/out/patch-unit-root.txt

however the root cause of the recent timeouts is definitely not the health check, otherwise, all of the test cases should have failed

+1. Thanks, [~abstractdog]. Committed this to master and branch-0.9. Agreed this doesn't fix all the hangs, but it one step closer.

