Won't fix. 0.X branch not maintained anymore

Reopening this issue. I started to work on this for 1.6.0 on a branch.

Lot of tests already use findAvailablePort() API to get the port to bind to. Can you elaborate what you intend to fix?

GitHub user andrasbeni opened a pull request:

    https://github.com/apache/flume/pull/124

    FLUME-199 Remove hardcoded ports from unit tests

    Many unit tests use hardcoded port numbers. This causes problems when running builds in parallel.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/andrasbeni/flume FLUME-199

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/flume/pull/124.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #124
    
----

----


Commit e4312ad1acfd28e23405e6775374948fa35d5e40 in flume's branch refs/heads/trunk from [~andrasbeni]
[ https://git-wip-us.apache.org/repos/asf?p=flume.git;h=e4312ad ]

FLUME-199. Remove hardcoded ports from unit tests

Many unit tests use hardcoded port numbers which leads to flakiness and causes
problems when running builds in parallel.
This patch fixes this issue by searching for available ports instead of the
hardcoded ones.

This closes #124

Reviewers: Miklos Csanady, Ferenc Szabo

(Andras Beni via Denes Arvay)


Github user asfgit closed the pull request at:

    https://github.com/apache/flume/pull/124


Thank you [~andrasbeni] for the patch, [~mcsanady] and [~fszabo] for the reviews, I have pushed this to trunk.

SUCCESS: Integrated in Jenkins build Flume-trunk-hbase-1 #331 (See [https://builds.apache.org/job/Flume-trunk-hbase-1/331/])
FLUME-199. Remove hardcoded ports from unit tests (denes: [http://git-wip-us.apache.org/repos/asf/flume/repo?p=flume.git&a=commit&h=e4312ad1acfd28e23405e6775374948fa35d5e40])
* (edit) flume-ng-clients/flume-ng-log4jappender/src/test/resources/flume-log4jtest.properties
* (edit) flume-ng-sources/flume-kafka-source/src/test/java/org/apache/flume/source/kafka/KafkaSourceEmbeddedKafka.java
* (edit) flume-ng-tests/src/test/java/org/apache/flume/test/agent/TestRpcClientCommunicationFailure.java
* (edit) flume-ng-core/src/test/java/org/apache/flume/source/TestNetcatSource.java
* (edit) flume-ng-core/src/test/java/org/apache/flume/sink/TestThriftSink.java
* (edit) flume-ng-core/src/test/java/org/apache/flume/source/TestThriftSource.java
* (edit) flume-ng-core/src/test/java/org/apache/flume/instrumentation/http/TestHTTPMetricsServer.java
* (edit) flume-ng-sdk/src/test/java/org/apache/flume/api/TestThriftRpcClient.java
* (edit) flume-ng-legacy-sources/flume-thrift-source/pom.xml
* (edit) flume-ng-node/src/test/java/org/apache/flume/source/TestNetcatSource.java
* (edit) flume-ng-core/src/test/java/org/apache/flume/source/TestMultiportSyslogTCPSource.java
* (edit) flume-ng-clients/flume-ng-log4jappender/src/test/java/org/apache/flume/clients/log4jappender/TestLog4jAppender.java
* (edit) flume-ng-clients/flume-ng-log4jappender/src/test/resources/flume-loadbalancing-backoff-log4jtest.properties
* (edit) flume-ng-legacy-sources/flume-avro-source/src/test/java/org/apache/flume/source/avroLegacy/TestLegacyAvroSource.java
* (edit) flume-ng-legacy-sources/flume-thrift-source/src/test/java/org/apache/flume/source/thriftLegacy/TestThriftLegacySource.java
* (edit) flume-ng-clients/flume-ng-log4jappender/src/test/java/org/apache/flume/clients/log4jappender/TestLog4jAppenderWithAvro.java
* (edit) flume-ng-clients/flume-ng-log4jappender/src/test/resources/flume-loadbalancing-rnd-log4jtest.properties
* (edit) flume-ng-core/src/test/java/org/apache/flume/sink/TestAvroSink.java
* (edit) flume-ng-embedded-agent/src/test/java/org/apache/flume/agent/embedded/TestEmbeddedAgent.java
* (edit) flume-ng-clients/flume-ng-log4jappender/src/test/java/org/apache/flume/clients/log4jappender/TestLoadBalancingLog4jAppender.java
* (edit) flume-ng-clients/flume-ng-log4jappender/src/test/resources/flume-loadbalancinglog4jtest.properties
* (edit) flume-ng-clients/flume-ng-log4jappender/src/test/resources/flume-log4jtest-avro-generic.properties
* (edit) flume-ng-tests/src/test/java/org/apache/flume/test/util/StagedInstall.java
* (edit) flume-ng-tests/src/test/resources/rpc-client-test.properties
* (edit) flume-ng-core/src/test/java/org/apache/flume/source/TestAvroSource.java
* (edit) flume-ng-sinks/flume-http-sink/src/test/java/org/apache/flume/sink/http/TestHttpSinkIT.java
* (edit) flume-ng-tests/src/test/java/org/apache/flume/test/agent/TestRpcClient.java
* (edit) flume-ng-clients/flume-ng-log4jappender/src/test/resources/flume-log4jtest-avro-reflect.properties
* (edit) flume-ng-sinks/flume-ng-kafka-sink/src/test/java/org/apache/flume/sink/kafka/util/TestUtil.java


org.apache.flume.source.TestMultiportSyslogTCPSource failed for me with
{code}
java.net.ConnectException: Connection refused (Connection refused)
at java.net.PlainSocketImpl.socketConnect(Native Method)
at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
at java.net.Socket.connect(Socket.java:589)
at java.net.Socket.connect(Socket.java:538)
at java.net.Socket.(Socket.java:434)
at java.net.Socket.(Socket.java:244)
at org.apache.flume.source.TestMultiportSyslogTCPSource.testMultiplePorts(TestMultiportSyslogTCPSource.java:130)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
{code}
I ran it a second time and got
{code}
testMultiplePorts(org.apache.flume.source.TestMultiportSyslogTCPSource)  Time elapsed: 4209 sec  <<< ERROR!
java.lang.NullPointerException: Event is null
	at org.apache.flume.source.TestMultiportSyslogTCPSource.testMultiplePorts(TestMultiportSyslogTCPSource.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)
{code}

Running just that one test it frequently succeeds but intermittently fails with the connection refused error.

Reopening because a unit test repeatedly fails.

