A few questions and hints I have. The questions are just that, questions. My Java practice is limited and I have not read the entire PR yet.

* If we can leverage Java compiler/libraries, why not use the existing code and add any specialties needed via switch? In other words, what value does the duplicated code add that we would miss otherwise?

* The files should all have a proper ASF license header. There is a wild mixture of all kinds of license headers and I also have seen files without. That needs to be fixed before it can be merged. If there is any third-party license involved, that needs to be checked as well.

* Is there a test for it that implements the [Thrift test suite|https://github.com/apache/thrift/blob/master/test/ThriftTest.thrift#L141]?


[~jensg] thanks for the questions. So far the work (pull request) is still work in progress, I've put the pull request into draft mode and put (work in progress) in title to make it clearer, and remove once the pull request is ready. Test suites and ASF license headers will be added after the implementation code is ready.

The value of having a separate Kotlin code gen, even if it builds on existing Java libthrift, is that the generated code (front-end code) will be in native Kotlin and thus can benefit from idiomatic Kotlin features (e.g. data class, richer type system) and provide a more modern (currently Java 18 is out but for back compatibility reasons the Java code gen targets are Java 8) alternative user facing API (i.e. generated code) without compromising the compatibility of existing Java code generation.

[~jensg] FYI the pull request is ready now.

