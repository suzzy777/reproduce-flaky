Submitted relatively simple PR for this: [https://github.com/apache/hbase/pull/4562]

Merged to master and branch-2*. Thanks for the review [~apurtell] and [~zhangduo] 

Results for branch branch-2
	[build #585 on builds.a.o|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2/585/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2/585/General_20Nightly_20Build_20Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2/585/JDK8_20Nightly_20Build_20Report_20_28Hadoop2_29/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2/585/JDK8_20Nightly_20Build_20Report_20_28Hadoop3_29/]


(x) {color:red}-1 jdk11 hadoop3 checks{color}
-- For more information [see jdk11 report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2/585/JDK11_20Nightly_20Build_20Report_20_28Hadoop3_29/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch branch-2.4
	[build #384 on builds.a.o|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2.4/384/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2.4/384/General_20Nightly_20Build_20Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2.4/384/JDK8_20Nightly_20Build_20Report_20_28Hadoop2_29/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2.4/384/JDK8_20Nightly_20Build_20Report_20_28Hadoop3_29/]


(x) {color:red}-1 jdk11 hadoop3 checks{color}
-- For more information [see jdk11 report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2.4/384/JDK11_20Nightly_20Build_20Report_20_28Hadoop3_29/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch branch-2.5
	[build #159 on builds.a.o|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2.5/159/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(x) {color:red}-1 general checks{color}
-- For more information [see general report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2.5/159/General_20Nightly_20Build_20Report/]




(/) {color:green}+1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2.5/159/JDK8_20Nightly_20Build_20Report_20_28Hadoop2_29/]


(/) {color:green}+1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2.5/159/JDK8_20Nightly_20Build_20Report_20_28Hadoop3_29/]


(x) {color:red}-1 jdk11 hadoop3 checks{color}
-- For more information [see jdk11 report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/branch-2.5/159/JDK11_20Nightly_20Build_20Report_20_28Hadoop3_29/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch master
	[build #628 on builds.a.o|https://ci-hbase.apache.org/job/HBase%20Nightly/job/master/628/]: (/) *{color:green}+1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/master/628/General_20Nightly_20Build_20Report/]






(/) {color:green}+1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/master/628/JDK8_20Nightly_20Build_20Report_20_28Hadoop3_29/]


(/) {color:green}+1 jdk11 hadoop3 checks{color}
-- For more information [see jdk11 report|https://ci-hbase.apache.org/job/HBase%20Nightly/job/master/628/JDK11_20Nightly_20Build_20Report_20_28Hadoop3_29/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


[~bbeaudreault] I am yet to look into the patch in detail but it seems that two tests (TestIncrementTimeRange and TestAppendTimeRange) have regression after this commit. The reason why our QA might not have caught this is because these tests are somehow in exclude tests list but our internal lightfork doesn't have them in excluded list and hence I observed the build somehow gets stuck with these two tests exceeding timeouts consistently. Could you please take a look?

 

FYI [~apurtell] before we create RC for 2.5.0, we can sort this out.

I’ll take a look today

I'm having trouble reproducing. I ran both tests a couple times against branch-2 and branch-2.5, they succeed each time. What exactly are you running? (commit sha/command/etc)

It seems like the regression might only be in branch-2.4. So probably should not block 2.5.0, but I am continuing to look for a cause.

The problem is that these tests make use of ManualEnvironmentEdge, which defaults to a currentTime of 1. In branch-2 and 2.5, NettyServerRpcConnection properly [passes the EnvironmentEdge's time into the ServerCall|https://github.com/apache/hbase/blob/branch-2/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/NettyServerRpcConnection.java#L122], but in branch-2.4 it [still passes in System.currentTimeMillis()|https://github.com/apache/hbase/blob/branch-2.4/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/NettyServerRpcConnection.java#L121]. 

In RSRpcServices getRemainingRpcTimeout, we subtract now (which is 1 in this test) from call.getReceiveTime() (which is current time millis), which ends up being a large negative number. We then subtract that value from the timeout, which results in a very large positive value timeout. I didn't consider the case where now would be much smaller than receive time, since time should always be marching forward.

I think there are two potential fixes to make:
 # branch-2.4 should be fixed to pass EnvironmentEdge in NettyServerRpcConnection, which will fix this test
 # It might be good to add a guardrail in getRemainingRpcTimeout to ensure that we only subtract from the timeout if now > receiveTime. But that also seems like an edge case that should really only happen in tests, so not sure if that's worth pushing to all 3 branches.

We definitely need to do 1, but thoughts on 2? I can submit a Jira to fix just the test or add the guardrail too. The latter is just more work submitting to all the branches, etc.

I'm still working on this. Changing NettyServerRpcConnection to use EnvironmentEdge then uncovered other issues – I needed to change CallRunner to set the Call startTime using EnvironmentEdge as well, otherwise the call is erroneously considered dropped. Even then I'm still running into other less obvious issues.

Changing RSRpcServices.getTimeLimit to fetch now from System.currentTimeMillis() instead of EnvironmentEdge fixes the issue, so I'm on the right track here. But that seems like a step backwards rather than forwards, so I'm trying to see what the minimal scope of EnvironmentEdge changes I need to make is.

Alternatively since we already exclude these tests (maybe for a similar reason?) we could leave it as is. But I'm going to give it a bit more time.

Ok I have a patch which adds EnvironmentEdgeManager in the necessary places to get this to work. Also, I just realized why this snuck by:

In my original [master PR|https://github.com/apache/hbase/commit/8fcb94ae8a69db7c9288be5f109d6f44424c3c93#diff-e4052cd5a1f1c93375e3fbc931dc4df220deebc78c0d53fd2435b47fd04cd807L3269], I saw the comment:
{code:java}
      // XXX: Can not use EnvironmentEdge here because TestIncrementTimeRange use a
      // ManualEnvironmentEdge. Consider using System.nanoTime instead.
      return EnvironmentEdgeManager.currentTime() + timeLimitDelta;{code}
But that was confusing because the code did in fact use EnvironmentEdgeManager, so I removed the comment.

When I did the branch-2 backport, the same was true. When I did the branch-2.4 backport, I didn't realize that actually the comment did apply there because that branch hadn't had all System.currentTimeMillis() calls converted to EnvironmentEdgeManager like master/branch-2 did.

So another alternative here would be to revert to using System.currentTimeMillis() in this code block for branch-2.4. Let's discuss that in https://issues.apache.org/jira/browse/HBASE-27205

bq. The reason why our QA might not have caught this is because these tests are somehow in exclude tests 
[~vjasani] We should reset the exclude list, let it get built up again.

Reopening for now but I believe we can re-resolve this after HBASE-27205 . 

I just merged HBASE-27205, let me know if you see any other issues here that prevent re-closing this.

{quote}We should reset the exclude list, let it get built up again.
{quote}
Ack [~apurtell], will create a new Jira to track this.

Thanks [~bbeaudreault], tests are good. Looks like we can close this Jira (y)

Oh shoot, sorry [~bbeaudreault], looks like {-}two more test failures of similar pattern{-}: (same tests as before): TestIncrementTimeRange and TestAppendTimeRange

Are you sure? Those are the original tests you referenced, and they work fine for me with HBASE-27205 merged. Have you integrated that fix?

Actually, sorry, I just tested again and they are hanging again. I'll take another look on Monday.

I also got bit confused because they worked when I tested two days back, not sure what happened now. Yeah let's check next week.

Alright, now I see them on flaky build test report: [https://ci-hbase.apache.org/job/HBase-Flaky-Tests/job/branch-2.4/3522/testReport/]

