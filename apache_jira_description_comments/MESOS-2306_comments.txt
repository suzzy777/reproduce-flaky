Comparing the two outputs, there is a race here where the scheduler retries registration an extra time in the failing test. This then messes up the mock expectations:

{code}
  // Return a pending future from authorizer after first attempt.
  Future<Nothing> authorize2;
  Promise<bool> promise2;
  EXPECT_CALL(authorizer, authorize(An<const mesos::ACL::RegisterFramework&>()))
    .WillOnce(Return(true))
    .WillOnce(DoAll(FutureSatisfy(&authorize2),
                    Return(promise2.future())))
    .WillRepeatedly(Return(true)); // Authorize subsequent registration retries.
{code}

We want to simulate a master detection and capture the authorization, but when there is a spurious retry, our simulated retry falls into the WillRepeatedly case and is authorized immediately.

https://reviews.apache.org/r/30432/

{noformat}
commit 57e37575604b9e5b7151828e2047398ccef951d7
Author: Benjamin Mahler <benjamin.mahler@gmail.com>
Date:   Thu Jan 29 15:08:26 2015 -0800

    Fixed the flaky MasterAuthorizationTest.FrameworkRemovedBeforeReregistration test.

    Review: https://reviews.apache.org/r/30432
{noformat}

