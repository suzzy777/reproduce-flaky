Version 3 comes with some breaking API changes, which I fixed - [https://github.com/ben-manes/caffeine/releases/tag/v3.0.0]

The respective commits which introduced those:

[https://github.com/ben-manes/caffeine/commit/91eec88be93f16549ce82dd2f17959fd8eba75dd] 

[https://github.com/ben-manes/caffeine/commit/e45837248905d752d7fbd7c8df3ed1a439d7af89]

[https://github.com/ben-manes/caffeine/commit/bfec59c146cf10ffe9b937563bf0d13beb5e1759]

This is also the full list of release notes - https://github.com/ben-manes/caffeine/releases?page=2

CIDRPermissionsCache failed to compile as it seems some type safety was introduced in the newer caffeine version, which caused a compilation failure because we do a null check for String instead of RoleResource [here|https://github.com/apache/cassandra/blob/cassandra-5.0/src/java/org/apache/cassandra/auth/CIDRPermissionsCache.java#L57]. Even in the current 5.0 code with the old version of caffeine I could compile when I switched to RoleResource.role(roleName).

That change also makes sense when I look into the following line where we invalidate using the key provided as RoleResource.role(roleName) - [https://github.com/apache/cassandra/blob/cassandra-5.0/src/java/org/apache/cassandra/auth/CIDRPermissionsCache.java#L60].

Patch: [https://github.com/apache/cassandra/pull/2648]

CI: [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=caffeine-upgrade]

[~skoppu], [~yifanc], and [~djoshi] - do you mind taking a look? The change made here is related to CASSANDRA-18592. I am unfamiliar with the code introduced and might be missing something bigger here.

This is the 5.0 patch. When we confirm it, I can propagate it to the trunk, too and test it. 

Another straight version bump + dealing with the side-effects which seem few and correct imo. Also CI is green and I can't think of much more to do here. LGTM +1

[~e.dimitrova] Sorry for the delayed response, I was on holidays. Thank you so much for taking care of this. The change to cache.getIfPresent(RoleResource.role(roleName)) seems correct to me. 

Thanks [~skoppu] !

On a second pass, we need to fix this test class - InvalidateCIDRPermissionsCacheTest as it seems to pass with and without that change. I suspect this should not be happening. 

 

[~yifanc] , [~skoppu] , [~Bereng], I updated the tests and added a small condition in the nodetool invalidatecidrpermissionscache command so we are sure we will not regress again. Can you please take a look?

[~e.dimitrova] Sorry, having sick child at home. I have a minor comment in PR. I am worried about creating flaky test if we always expect entry to be in the cache by the time invalidation runs.

Thank you for the review [~skoppu] . I hope the kid is getting better now!
{quote} I am worried about creating flaky test if we always expect entry to be in the cache by the time invalidation runs.
{quote}
You are right, and this repeated run proves it - very rarely, but it can be flaky - [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2496/workflows/6ec742b1-7b6d-4ea9-b81a-36486da34e14/jobs/39036]

One way is probably to use the Util#flakyTest to rerun it once if it fails.
Another is now when we have [https://github.com/apache/cassandra/pull/2648/files#diff-02dc3c7a2a64aef7633ac085c24deddfed1b32b469c9958f2c04d5e228e6144fR42] to rely on that message but that one is not always generated and we don't check the particular roles were invalidated. Open for other ideas, too.

I was making the test depend only on table read count to avoid being flaky. Table read count tells us that a cache entry was loaded from the table, without tightly depending on when/how the entry was invalidated. I believe that should be sufficient in the unit test. Also, this particular check cache.getIfPresent(<role>) was only to print descriptive message to the user when nodetool command is run. It doesn't impact the functionality. So I wouldn't be comfortable creating a flaky test disturbing circleCI/Jenkins builds and impacting developers time/efforts just for this minor message.

{quote}I was making the test depend only on table read count to avoid being flaky. Table read count tells us that a cache entry was loaded from the table, without tightly depending on when/how the entry was invalidated. I believe that should be sufficient in the unit test. Also, this particular check cache.getIfPresent(<role>) was only to print descriptive message to the user when nodetool command is run. It doesn't impact the functionality. So I wouldn't be comfortable creating a flaky test disturbing circleCI/Jenkins builds and impacting developers time/efforts just for this minor message.
{quote}
While I agree with your concerns, the current tests were missing to confirm the invalidation, which was not happening. They pass with/without the fix. I was trying to find a nice way to cover the case and prevent future regressions. 

Found a way. We can set high validity for cache, in the setup() before cache gets created. Rest of the setup() code remains as it is.

    @BeforeClass
    public static void setup() throws Exception
    {
        DatabaseDescriptor.setRolesValidity(Integer.MAX_VALUE-1);

 

Once we do that, cache's expireAfterWrite gets set to 2147483646 ms, which is 596+ hours, i.e, 24+ days.

I will run the change under circle CI couple of times and let you know how it goes.

Thanks. I think that is a good call. I noticed today we have some flakiness in that test class even today. Look here:

[https://ci-cassandra.apache.org/job/Cassandra-trunk/1718/testReport/org.apache.cassandra.tools.nodetool/InvalidateCIDRPermissionsCacheTest/testInvalidateAllCidrPermissions_compression_jdk11/]
h3.  
{code:java}
Error Message
expected:<[3]L> but was:<[2]L>

Stacktrace
junit.framework.AssertionFailedError: expected:<[3]L> but was:<[2]L> at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) at org.apache.cassandra.tools.nodetool.InvalidateCIDRPermissionsCacheTest.testInvalidateAllCidrPermissions(InvalidateCIDRPermissionsCacheTest.java:144) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
{code}
 
{quote}I will run the change under circle CI couple of times and let you know how it goes.
{quote}
Thanks, looking forward to it. As mentioned on the PR on Friday, I will be happy to consolidate all changes.

I just rebased the branch and incorporated the solution for the flakiness suggested by Shailaja Koppu, plus tiny feedback by [~jlewandowski].
This run shows that the flaky test is fixed: https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2524/workflows/7f55e5a0-2a46-43e6-94aa-d24acf79fa2b
If everyone is happy, I will propagate the final patch to trunk, run full CI on both 5.0 and trunk, and move with a commit. 

I see you have plenty reviewers here and I have been following only lightly as I am onto sthg else as well. Feel free to move on without waiting for my +1 #collaborating

Sure, I am waiting on [~jlewandowski] , [~yifanc] and [~skoppu] approval. :) 

I have sent +1 on PR

+1 on the patch! Thank you!

Thank you both! [~jlewandowski]  and Ben Manes already approved the upgrade on the PR. 
Final rebase and CI run started for both branches (5.0 in a new branch with squashed commits so I can easily compare with the old one from the PR that nothing got messy on squash):

5.0: https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=18805-5.0
trunk: https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=18805-trunk

I will commit on clean CI. 

CI completed fully green for both branches.
Committed to https://github.com/apache/cassandra.git
   d828cd0228..eb30005251  cassandra-5.0 -> cassandra-5.0
   16b43e4d4b..210a59b194  trunk -> trunk

