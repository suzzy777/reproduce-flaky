I think I have an idea of why this happens, but unfortunately I was unsuccessful in reproducing this, even on docker with weak resources.
will post  a suggestion for review based on code review and we'll see if this helps or not.

basically what I am seeing is a race inside the initialization method of the JettySolrRunner#lifeCycleStarted (https://github.com/apache/solr/blob/3e10f8b8901751de78e3c5b93538be133b6336ff/solr/test-framework/src/java/org/apache/solr/embedded/JettySolrRunner.java#LL394C38-L394C54):
 - on one hand: CoreContainerProvider will start init (line 407) and eventually (and async) will call into the test's `testing_beforeRegisterInZk` callback where the callback method will attempt to get the CoreContainer. trouble is the getCoreContainer method relies on 'dispatchFilter' being initialized (see below).
- on the other the dispatchFilter will be init after (on line 423).
my theory is: because the CoreContainerProvider is async it can call into the callback before the dispatchFilter is there. so my proposal is to add a wait for 'dispatchFilter != null' inside the callback only (this change will only affect the code itself, nothing else).
I verified this reproduces by introducing an artificial wait between line 407 and line 423 and the NPE is present consistently, the wait-fix will provide the opportunity for the init to catchup to the callback if needed. if this precondition is not met, the flow should not progress anyway.






I've been able to reproduce this failure consistently, and I can confirm that your diagnosis is correct.

In our case, we've changed the CoreContainer to load cores synchronously, and that caused this test to fail consistently by altering the race condition slightly so that the `testing_beforeRegisterInZk` code was much more likely to be executed before the JettySolrRunner was fully initialized.

 

I believe your proposed solution will work. I implemented a similar fix for that code to wait for `JettySolrRunner.isRunning()` to return true, and that seems to have resolved the problem for us.

 

I have opened a [PR|https://github.com/apache/solr/pull/1718] that I believe will resolve this

[~pmcarthur] I was busy and got delayed posting my PR https://github.com/apache/solr/pull/1727. would you mind adding your suggestion to use `JettySolrRunner.isRunning()` my PR directly? we can share attribution for this work.

Ooh, I'd love to see this test get fixed.  Thanks to both of you for tackling this; I'll take a look at the PRs sometime in the next day or two and try to figure out our next steps.  Though admittedly I'm missing some context around CoreContainerProvider - any chance you can help me out with some review there [~gh_at]?

[~stillalex] I don't think I have the permission required to push to your branch and update the PR. The change is pretty simple, so feel free to take whichever bits you think are useful. 

Maybe we can throw my name in the commit metadata when it gets squash-merged :)

 

[~pmcarthur] please check the updated PR, attribution included.

Commit 75810c953e847d4f5552c5485a0613f3753cbcee in solr's branch refs/heads/main from Alex Deparvu
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=75810c953e8 ]

SOLR-16848 : Fix flaky DeleteReplicaTest test (#1727)

Specifically, DeleteReplicaTest.raceConditionOnDeleteAndRegisterReplica()
---------

Co-authored-by: Paul McArthur <pmcarthur@salesforce.com>

Wonderful, everyone should have attribution. Thanks for the help, both of you! I'll close the other PR.

Commit 4acb26efa223cb739788aee1058793408ef30b20 in solr's branch refs/heads/branch_9x from Alex Deparvu
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=4acb26efa22 ]

SOLR-16848 : Fix flaky DeleteReplicaTest test (#1727)

Specifically, DeleteReplicaTest.raceConditionOnDeleteAndRegisterReplica()
---------

Co-authored-by: Paul McArthur <pmcarthur@salesforce.com>
(cherry picked from commit 75810c953e847d4f5552c5485a0613f3753cbcee)


Commit 75810c953e847d4f5552c5485a0613f3753cbcee in solr's branch refs/heads/SOLR-16837-afp-withCollectionShards from Alex Deparvu
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=75810c953e8 ]

SOLR-16848 : Fix flaky DeleteReplicaTest test (#1727)

Specifically, DeleteReplicaTest.raceConditionOnDeleteAndRegisterReplica()
---------

Co-authored-by: Paul McArthur <pmcarthur@salesforce.com>

Closing after the 9.3.0 release

