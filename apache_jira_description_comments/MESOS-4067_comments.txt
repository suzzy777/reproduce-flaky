I was able to figure out one issue (not sure if there are more issues, or if the subsequent failures are all stemmed from this one):

{code}
  // Attempt to unreserve an invalid set of resources (not dynamically
  // reserved), reserve the second set, and launch a task.
  driver.acceptOffers({offer.id()},
      {UNRESERVE(unreserved1),
       RESERVE(dynamicallyReserved2),
       LAUNCH({taskInfo})},
      filters);

  // Wait for TASK_FINISHED update ack.
  AWAIT_READY(statusUpdateAcknowledgement);
  EXPECT_EQ(TASK_FINISHED, statusUpdateAcknowledgement.get().state());

  // In the next offer, expect to find both sets of reserved
  // resources, since the Unreserve operation should fail.
  AWAIT_READY(offers);

  ASSERT_EQ(1u, offers.get().size());
  offer = offers.get()[0];

  EXPECT_TRUE(
      Resources(offer.resources()).contains(
          dynamicallyReserved1 +
          dynamicallyReserved2 +
          unreserved2));
{code}

The intention here seems to be: Perform an {{acceptOffers}} with a sequence of operations including a launch task, wait until the launch task has finished and therefore the resources recovered. Then expect all of the available resources to be offered in a single offer.

The issue is that at 50ms as our {{allocation_interval}}, we can make an offer with the available resources while the task is being launched, running, etc. This premature offer is picked up by our {{EXPECT_CALL}} for {{resourceOffers}} and we don't meet our expectation of receiving an offer with {{dynamicallyReserved1 + dynamicallyReserved2 + unreserved2}}.

A few possible approaches in my preferred order:
# We may not need all of these moving parts, and possibly just use one set of resources instead of three. Refer to {{ReservationTest.ReserveAndLaunchThenUnreserve}} for an example.
# Turn allocation off {{allocation_interval=1000s}} and use {{reviveOffers}} to manually control the offers. Refer to {{ReservationEndpointsTest.ReserveAvailableAndOfferedResources}} for an example.
# Instead of a simple {{FutureArg<1>(offers)}} as the action for {{EXPECT_CALL}} of {{resourceOffers}}, perhaps we can aggregate them instead. This one feels like it could get pretty tricky.

[~greggomann], [~jieyu] What are your thoughts?

What about pausing the clock and manually controlling when the {{allocation_interval}} passes?

I was unable to reproduce this as-is on both OSX and Ubuntu, but after reducing the {{allocation_interval}} to 5ms, the test fails reliably. The purpose of this test was to test that multiple types of offer operations in a single {{acceptOffers()}} call will execute correctly when authorization is enabled. A bug in my initial implementation of the authorization prompted us to add this test. Since that complexity is the main reason for the test, perhaps a solution along the lines of your #2 would be appropriate, [~mcypark]. #3 does seem a bit tricky, since I imagine we would have to aggregate offers for the duration of some timeout, and then error out if the offer we're expecting isn't received during that period. Seems a bit messy.

I'll attempt a solution using {{reviveOffers}}, but folks should feel free to chime in with other thoughts if they have any.

Ah, sorry [~kaysoky]! I didn't see your comment when I posted that last one. Yep, I think that pausing the clock is the best solution here :-) thanks!

I've posted a review which fixes this flakiness, as well as two others to improve the tests in this file:

https://reviews.apache.org/r/40999/
https://reviews.apache.org/r/41000/
https://reviews.apache.org/r/41001/

{noformat}
commit 48f18e64d4c4a1c220cb8ca78179bddeeebe4dec
Author: Greg Mann <greg@mesosphere.io>
Date:   Wed Dec 9 01:04:04 2015 -0500

    Fixed flakiness in `ReservationTest.ACLMultipleOperations`.

    Review: https://reviews.apache.org/r/40999
{noformat}

