We currently reference the following spring versions:
{noformat}
spring-hateoas.version = 0.23.0.RELEASE
spring-ldap-core.version = 2.3.1.RELEASE
spring-security.version = 4.2.1.RELEASE
spring-shell.version = 1.2.0.RELEASE
spring-tx.version = 4.3.6.RELEASE
springframework.version = 4.3.6.RELEASE
{noformat}

Should the upgrade to {{4.3.13}} touch both {{springframework.version}} and {{spring-tx.version}}, or only the former?

PurelyApplied opened a new pull request #1199: GEODE-4030, GEODE-3495: Bump dependencies to new versions
URL: https://github.com/apache/geode/pull/1199
 
 
   * Jackson     : 2.8.6 -> 2.9.3
   * Jetty       : 9.3.10.v20160621 -> 9.4.8.v20171121
   * Spring      :
   * - Security  : 4.2.1.RELEASE -> 4.2.3.RELEASE
   * - TX        : 4.3.6.RELEASE -> 4.3.13.RELEASE
   * - Framework : 4.3.6.RELEASE -> 4.3.13.RELEASE
   *
   * Log4j / slf4j dependency bump currently blocked by LOG4J2-2152.
   
   Thank you for submitting a contribution to Apache Geode.
   
   In order to streamline the review of the contribution we ask you
   to ensure the following steps have been taken:
   
   ### For all changes:
   - [ ] Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?
   
   - [ ] Has your PR been rebased against the latest commit within the target branch (typically `develop`)?
   
   - [ ] Is your initial contribution a single, squashed commit?
   
   - [ ] Does `gradlew build` run cleanly?
   
   - [ ] Have you written or updated unit tests to verify your changes?
   
   - [ ] If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under [ASF 2.0](http://www.apache.org/legal/resolved.html#category-a)?
   
   ### Note:
   Please ensure that once the PR is submitted, you check travis-ci for build issues and
   submit an update to your PR as soon as possible. If you need help, please send an
   email to dev@geode.apache.org.
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


PurelyApplied commented on issue #1199: GEODE-4030, GEODE-3495: Bump dependencies to new versions
URL: https://github.com/apache/geode/pull/1199#issuecomment-353211910
 
 
   `SessionReplicationIntegrationJUnitTest` fails when Log4j is bumped.
   
   In the case of a bump to 2.9.x, it fails to [LOG4J2-2055](https://issues.apache.org/jira/browse/LOG4J2-2055).
   
   In the case of a bump to 2.10.x, it fails to [LOG4J2-2152](https://issues.apache.org/jira/browse/LOG4J2-2152).
   
   Log4j / slf4j updating must then either be deferred until these issues are addressed or until the ofending tests can be rewritten.
   
   After some confusing collaboration, this PR subsumed PR#903.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


PurelyApplied commented on issue #1199: GEODE-4030, GEODE-3495: Bump dependencies to new versions
URL: https://github.com/apache/geode/pull/1199#issuecomment-353212343
 
 
   Precheck ran clean excepting one failure from 
   ```
   org.apache.geode.internal.cache.DeltaPropagationDUnitTest > testBug40165ClientReconnects
   ```
   
   This has been occurring intermittently and is likely unrelated, but I am rerunning the distributed tests in any case.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


PurelyApplied commented on issue #1199: GEODE-4030, GEODE-3495: Bump dependencies to new versions
URL: https://github.com/apache/geode/pull/1199#issuecomment-353213342
 
 
   It also appears that I included some minor test refactorings in this commit.  Changes were largely driven by IDE inspections (`new Callable` to lambdas, etc) and the removal of dead code.
   
   The exception to this is changing how cookies were handled in the `SessionReplicationIntegrationJUnitTest` at the recommendation of @metatype with respect to the Jetty version bump.  This being outside my wheelhouse, I defer to anyone with greater insight into these tests.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


metatype commented on a change in pull request #1199: GEODE-4030, GEODE-3495: Bump dependencies to new versions
URL: https://github.com/apache/geode/pull/1199#discussion_r158311484
 
 

 ##########
 File path: extensions/geode-modules-session/src/test/java/org/apache/geode/modules/session/internal/filter/SessionReplicationIntegrationJUnitTest.java
 ##########
 @@ -617,23 +464,17 @@ public void call(HttpServletRequest request, HttpServletResponse response)
   /**
    * Test that invalidating a session throws an exception on subsequent access.
    */
-  @Category(FlakyTest.class) // GEODE-1015: uses Jetty HttpTester, uses static vars with class
-                             // loader isolation, TODO: rewrite test with JUnit 4 rules including
-                             // TemporaryFolder
+  @Category(FlakyTest.class)
 
 Review comment:
   Same as above.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


metatype commented on a change in pull request #1199: GEODE-4030, GEODE-3495: Bump dependencies to new versions
URL: https://github.com/apache/geode/pull/1199#discussion_r158311283
 
 

 ##########
 File path: extensions/geode-modules-session/src/test/java/org/apache/geode/modules/session/internal/filter/SessionReplicationIntegrationJUnitTest.java
 ##########
 @@ -451,102 +391,16 @@ private Cookie findUserCookie(Cookie[] cookies) {
     return userCookie;
   }
 
-  // Don't see how to do this currently as the SessionListener needs a full
-  // web context to work in.
-
-  // /**
-  // * Test that sessions expire correctly
-  // */
-  // public void testSessionExpiration() throws Exception {
-  // Callback c_1 = new Callback() {
-  // @Override
-  // public void call(HttpServletRequest request, HttpServletResponse response)
-  // throws IOException, ServletException {
-  // HttpSession s = request.getSession();
-  // s.setAttribute("foo", "bar");
-  // s.setMaxInactiveInterval(1);
-  //
-  // PrintWriter out = response.getWriter();
-  // out.write(s.getId());
-  // }
-  // };
-  //
-  // // This is the callback used to check if the session is still there
-  // Callback c_2 = new Callback() {
-  // @Override
-  // public void call(HttpServletRequest request, HttpServletResponse response)
-  // throws IOException, ServletException {
-  // HttpSession s = request.getSession(false);
-  // String output;
-  // if (s == null) {
-  // output = "null";
-  // } else {
-  // output = s.getId();
-  // }
-  //
-  // PrintWriter out = response.getWriter();
-  // out.write(output);
-  // }
-  // };
-  //
-  // tester.addEventListener(new SessionListener());
-  // tester.setAttribute("callback_1", c_1);
-  // tester.setAttribute("callback_2", c_2);
-  //
-  // servletHolder.setInitParameter("test.callback", "callback_1");
-  //
-  // ServletHolder sh2 = tester.addServlet(BasicServlet.class, "/request2");
-  // sh2.setInitParameter("test.callback", "callback_2");
-  //
-  // tester.start();
-  // ContextManager.getInstance().putContext(
-  // servletHolder.getServlet().getServletConfig().getServletContext());
-  //
-  // request.setMethod("GET");
-  // request.setURI("/test/hello");
-  // request.setHeader("Host", "tester");
-  // request.setVersion("HTTP/1.0");
-  // response.parse(tester.getResponses(request.generate()));
-  //
-  // String id = response.getContent();
-  //
-  // // Wait for the session to expire
-  // Thread.sleep(2000);
-  //
-  // request.setHeader("Cookie", "JSESSIONID=" + id);
-  // request.setURI("/test/request2");
-  // response.parse(tester.getResponses(request.generate()));
-  //
-  // assertIndexDetailsEquals("null", response.getContent());
-  //
-  // Region r = getRegion();
-  // assertNull("Region should not contain session", r.get(id));
-  // }
-
   /**
    * Test that invalidating a session destroys it as well as the backend object.
    */
-  @Category(FlakyTest.class) // GEODE-1015: uses Jetty HttpTester, uses static vars with class
-                             // loader isolation, TODO: rewrite test with JUnit 4 rules including
-                             // TemporaryFolder
+  @Category(FlakyTest.class)
 
 Review comment:
   Why remove this comment?  Seems helpful to understand why the test was marked flaky.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jdeppe-pivotal commented on a change in pull request #1199: GEODE-4030, GEODE-3495: Bump dependencies to new versions
URL: https://github.com/apache/geode/pull/1199#discussion_r158513720
 
 

 ##########
 File path: geode-assembly/src/test/java/org/apache/geode/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java
 ##########
 @@ -744,19 +766,6 @@ public void testSSLWithTLSProtocolLegacy() throws Exception {
     validateConnection(restEndpoint, "TLS", props);
   }
 
-  @Test
-  public void testSSLWithTLSv11ProtocolLegacy() throws Exception {
 
 Review comment:
   Ditto, above

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jdeppe-pivotal commented on a change in pull request #1199: GEODE-4030, GEODE-3495: Bump dependencies to new versions
URL: https://github.com/apache/geode/pull/1199#discussion_r158513687
 
 

 ##########
 File path: geode-assembly/src/test/java/org/apache/geode/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java
 ##########
 @@ -585,21 +622,6 @@ public void testSSLWithTLSProtocol() throws Exception {
     validateConnection(restEndpoint, "TLS", props);
   }
 
-  @Test
-  public void testSSLWithTLSv11Protocol() throws Exception {
 
 Review comment:
   This test should not be removed. Rather, mark as Ignore and provide Jira

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


Commit 61ba3b69b3ec3093ae0610f428de62c57499b123 in geode's branch refs/heads/develop from [~jens.deppe]
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=61ba3b6 ]

GEODE-4030, GEODE-3495: Bump dependencies to new versions

* Jackson     : 2.8.6 -> 2.9.3
* Jetty       : 9.3.10.v20160621 -> 9.4.8.v20171121
* Spring      :
* - Security  : 4.2.1.RELEASE -> 4.2.3.RELEASE
* - TX        : 4.3.6.RELEASE -> 4.3.13.RELEASE
* - Framework : 4.3.6.RELEASE -> 4.3.13.RELEASE
*
* Log4j / slf4j dependency bump currently blocked by LOG4J2-2152.

This closes [#1199]


metatype commented on a change in pull request #1199: GEODE-4030, GEODE-3495: Bump dependencies to new versions
URL: https://github.com/apache/geode/pull/1199#discussion_r158528539
 
 

 ##########
 File path: geode-assembly/src/test/java/org/apache/geode/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java
 ##########
 @@ -585,21 +622,6 @@ public void testSSLWithTLSProtocol() throws Exception {
     validateConnection(restEndpoint, "TLS", props);
   }
 
-  @Test
-  public void testSSLWithTLSv11Protocol() throws Exception {
 
 Review comment:
   The problem is that all cipher suites for TLSv11 have known vulnerabilities and have been disabled by Jetty.  If we bump the Jetty version we are essentially removing support for TLS v1.1.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jdeppe-pivotal commented on a change in pull request #1199: GEODE-4030, GEODE-3495: Bump dependencies to new versions
URL: https://github.com/apache/geode/pull/1199#discussion_r158528962
 
 

 ##########
 File path: geode-assembly/src/test/java/org/apache/geode/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java
 ##########
 @@ -585,21 +622,6 @@ public void testSSLWithTLSProtocol() throws Exception {
     validateConnection(restEndpoint, "TLS", props);
   }
 
-  @Test
-  public void testSSLWithTLSv11Protocol() throws Exception {
 
 Review comment:
   Regardless, it's still possible to do it (even if it's bad). Some people will need it for older clients that can only do TLSv1.1.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jdeppe-pivotal commented on issue #1199: GEODE-4030, GEODE-3495: Bump dependencies to new versions
URL: https://github.com/apache/geode/pull/1199#issuecomment-353642720
 
 
   Merged manually after making some review changes.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jdeppe-pivotal closed pull request #1199: GEODE-4030, GEODE-3495: Bump dependencies to new versions
URL: https://github.com/apache/geode/pull/1199
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/extensions/geode-modules-session/src/test/java/org/apache/geode/modules/session/internal/filter/SessionReplicationIntegrationJUnitTest.java b/extensions/geode-modules-session/src/test/java/org/apache/geode/modules/session/internal/filter/SessionReplicationIntegrationJUnitTest.java
index 48a5662e94..aae5a2d728 100644
--- a/extensions/geode-modules-session/src/test/java/org/apache/geode/modules/session/internal/filter/SessionReplicationIntegrationJUnitTest.java
+++ b/extensions/geode-modules-session/src/test/java/org/apache/geode/modules/session/internal/filter/SessionReplicationIntegrationJUnitTest.java
@@ -21,21 +21,16 @@
 import static org.junit.Assert.assertTrue;
 
 import java.io.File;
-import java.io.IOException;
 import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.EnumSet;
 import java.util.Enumeration;
 import java.util.List;
 import java.util.StringTokenizer;
-import java.util.concurrent.TimeUnit;
 
 import javax.servlet.DispatcherType;
 import javax.servlet.RequestDispatcher;
-import javax.servlet.ServletException;
 import javax.servlet.http.Cookie;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
 
 import com.meterware.httpunit.GetMethodWebRequest;
@@ -106,7 +101,7 @@ public void setUp() throws Exception {
     servletHolder = tester.addServlet(BasicServlet.class, "/hello");
     servletHolder.setInitParameter("test.callback", "callback_1");
 
-    /**
+    /*
      * This starts the servlet. Our wrapped servlets *must* start immediately otherwise the
      * ServletContext is not captured correctly.
      */
@@ -120,19 +115,13 @@ public void tearDown() throws Exception {
 
   @Test
   public void testSanity() throws Exception {
-    Callback c = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        PrintWriter out = response.getWriter();
-        out.write("Hello World");
-      }
+    Callback c = (request, response) -> {
+      PrintWriter out = response.getWriter();
+      out.write("Hello World");
     };
 
     tester.setAttribute("callback_1", c);
     tester.start();
-    // ContextManager.getInstance().putContext(
-    // servletHolder.getServlet().getServletConfig().getServletContext());
 
     request.setMethod("GET");
     request.setURI("/test/hello");
@@ -147,19 +136,13 @@ public void call(HttpServletRequest request, HttpServletResponse response)
 
   @Test
   public void testSessionGenerated() throws Exception {
-    Callback c = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        PrintWriter out = response.getWriter();
-        out.write(request.getSession().getId());
-      }
+    Callback c = (request, response) -> {
+      PrintWriter out = response.getWriter();
+      out.write(request.getSession().getId());
     };
 
     tester.setAttribute("callback_1", c);
     tester.start();
-    // ContextManager.getInstance().putContext(
-    // servletHolder.getServlet().getServletConfig().getServletContext());
 
     request.setMethod("GET");
     request.setURI("/test/hello");
@@ -172,10 +155,15 @@ public void call(HttpServletRequest request, HttpServletResponse response)
 
     List<Cookie> cookies = getCookies(response);
     assertEquals("Session id != JSESSIONID from cookie", response.getContent(),
-        cookies.get(0).getValue());
+        getSessionCookie(cookies).getValue());
 
     Region r = getRegion();
-    assertNotNull("Session not found in region", r.get(cookies.get(0).getValue()));
+    assertNotNull("Session not found in region", r.get(getSessionCookie(cookies).getValue()));
+  }
+
+  private Cookie getSessionCookie(List<Cookie> cookies) {
+    return cookies.stream().filter(cookie -> cookie.getName().equals("JSESSIONID"))
+        .reduce((oldCookie, cookie) -> cookie).get();
   }
 
 
@@ -184,24 +172,18 @@ public void call(HttpServletRequest request, HttpServletResponse response)
    */
   @Test
   public void testSessionNotGenerated() throws Exception {
-    Callback c = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        String output = "OK";
-        HttpSession s = request.getSession(false);
-        if (s != null) {
-          output = s.getId();
-        }
-        PrintWriter out = response.getWriter();
-        out.write(output);
+    Callback c = (request, response) -> {
+      String output = "OK";
+      HttpSession s = request.getSession(false);
+      if (s != null) {
+        output = s.getId();
       }
+      PrintWriter out = response.getWriter();
+      out.write(output);
     };
 
     tester.setAttribute("callback_1", c);
     tester.start();
-    // ContextManager.getInstance().putContext(
-    // servletHolder.getServlet().getServletConfig().getServletContext());
 
     request.setMethod("GET");
     request.setURI("/test/hello");
@@ -216,24 +198,18 @@ public void call(HttpServletRequest request, HttpServletResponse response)
 
   @Test
   public void testUnknownAttributeIsNull() throws Exception {
-    Callback c = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        Object o = request.getSession().getAttribute("unknown");
-        PrintWriter out = response.getWriter();
-        if (o == null) {
-          out.write("null");
-        } else {
-          out.write(o.toString());
-        }
+    Callback c = (request, response) -> {
+      Object o = request.getSession().getAttribute("unknown");
+      PrintWriter out = response.getWriter();
+      if (o == null) {
+        out.write("null");
+      } else {
+        out.write(o.toString());
       }
     };
 
     tester.setAttribute("callback_1", c);
     tester.start();
-    // ContextManager.getInstance().putContext(
-    // servletHolder.getServlet().getServletConfig().getServletContext());
 
     request.setMethod("GET");
     request.setURI("/test/hello");
@@ -248,30 +224,24 @@ public void call(HttpServletRequest request, HttpServletResponse response)
 
   @Test
   public void testSessionRemains1() throws Exception {
-    Callback c = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        String output = "null";
-        HttpSession session = request.getSession();
-        if (session.isNew()) {
-          output = "new";
-          session.setAttribute("foo", output);
-        } else {
-          output = (String) session.getAttribute("foo");
-          if (output != null) {
-            output = "old";
-          }
+    Callback c = (request, response) -> {
+      String output;
+      HttpSession session = request.getSession();
+      if (session.isNew()) {
+        output = "new";
+        session.setAttribute("foo", output);
+      } else {
+        output = (String) session.getAttribute("foo");
+        if (output != null) {
+          output = "old";
         }
-        PrintWriter out = response.getWriter();
-        out.write(output);
       }
+      PrintWriter out = response.getWriter();
+      out.write(output);
     };
 
     tester.setAttribute("callback_1", c);
     tester.start();
-    // ContextManager.getInstance().putContext(
-    // servletHolder.getServlet().getServletConfig().getServletContext());
 
     request.setMethod("GET");
     request.setURI("/test/hello");
@@ -283,18 +253,19 @@ public void call(HttpServletRequest request, HttpServletResponse response)
     assertEquals("Session should be new", "new", response.getContent());
 
     List<Cookie> cookies = getCookies(response);
-    request.setHeader("Cookie", "JSESSIONID=" + cookies.get(0).getValue());
+    request.setHeader("Cookie", "JSESSIONID=" + getSessionCookie(cookies).getValue());
 
     response = HttpTester.parseResponse(tester.getResponses(request.generate()));
 
     assertEquals("Session should be old", "old", response.getContent());
 
     List<Cookie> cookies2 = getCookies(response);
-    assertEquals("Session IDs should be the same", cookies.get(0).getValue(),
-        cookies2.get(0).getValue());
+    assertEquals("Session IDs should be the same", getSessionCookie(cookies).getValue(),
+        getSessionCookie(cookies2).getValue());
 
     Region r = getRegion();
-    assertNotNull("Session object should exist in region", r.get(cookies.get(0).getValue()));
+    assertNotNull("Session object should exist in region",
+        r.get(getSessionCookie(cookies).getValue()));
   }
 
   /**
@@ -302,22 +273,10 @@ public void call(HttpServletRequest request, HttpServletResponse response)
    */
   @Test
   public void testAttributesUpdatedInRegion() throws Exception {
-    Callback c_1 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        request.getSession().setAttribute("foo", "bar");
-      }
-    };
+    Callback c_1 = (request, response) -> request.getSession().setAttribute("foo", "bar");
 
     // This is the callback used to invalidate the session
-    Callback c_2 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        request.getSession().setAttribute("foo", "baz");
-      }
-    };
+    Callback c_2 = (request, response) -> request.getSession().setAttribute("foo", "baz");
 
     tester.setAttribute("callback_1", c_1);
     tester.setAttribute("callback_2", c_2);
@@ -328,8 +287,6 @@ public void call(HttpServletRequest request, HttpServletResponse response)
     sh2.setInitParameter("test.callback", "callback_2");
 
     tester.start();
-    // ContextManager.getInstance().putContext(
-    // servletHolder.getServlet().getServletConfig().getServletContext());
 
     request.setMethod("GET");
     request.setURI("/test/hello");
@@ -340,39 +297,27 @@ public void call(HttpServletRequest request, HttpServletResponse response)
     List<Cookie> cookies = getCookies(response);
 
     Region r = getRegion();
-    assertEquals("bar", ((HttpSession) r.get(cookies.get(0).getValue())).getAttribute("foo"));
+    assertEquals("bar",
+        ((HttpSession) r.get(getSessionCookie(cookies).getValue())).getAttribute("foo"));
 
-    request.setHeader("Cookie", "JSESSIONID=" + cookies.get(0).getValue());
+    request.setHeader("Cookie", "JSESSIONID=" + getSessionCookie(cookies).getValue());
     request.setURI("/test/request2");
     response = HttpTester.parseResponse(tester.getResponses(request.generate()));
 
-    assertEquals("baz", ((HttpSession) r.get(cookies.get(0).getValue())).getAttribute("foo"));
+    assertEquals("baz",
+        ((HttpSession) r.get(getSessionCookie(cookies).getValue())).getAttribute("foo"));
   }
 
   /**
    * Test setting an attribute to null deletes it
    */
-  @Category(FlakyTest.class) // GEODE-1015: uses Jetty HttpTester, uses static vars with class
-                             // loader isolation, TODO: rewrite test with JUnit 4 rules including
-                             // TemporaryFolder
+  @Category(FlakyTest.class)
   @Test
   public void testSetAttributeNullDeletesIt() throws Exception {
-    Callback c_1 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        request.getSession().setAttribute("foo", "bar");
-      }
-    };
+    Callback c_1 = (request, response) -> request.getSession().setAttribute("foo", "bar");
 
     // This is the callback used to invalidate the session
-    Callback c_2 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        request.getSession().setAttribute("foo", null);
-      }
-    };
+    Callback c_2 = (request, response) -> request.getSession().setAttribute("foo", null);
 
     tester.setAttribute("callback_1", c_1);
     tester.setAttribute("callback_2", c_2);
@@ -383,8 +328,6 @@ public void call(HttpServletRequest request, HttpServletResponse response)
     sh2.setInitParameter("test.callback", "callback_2");
 
     tester.start();
-    // ContextManager.getInstance().putContext(
-    // servletHolder.getServlet().getServletConfig().getServletContext());
 
     request.setMethod("GET");
     request.setURI("/test/hello");
@@ -395,13 +338,14 @@ public void call(HttpServletRequest request, HttpServletResponse response)
     List<Cookie> cookies = getCookies(response);
 
     Region r = getRegion();
-    assertEquals("bar", ((HttpSession) r.get(cookies.get(0).getValue())).getAttribute("foo"));
+    assertEquals("bar",
+        ((HttpSession) r.get(getSessionCookie(cookies).getValue())).getAttribute("foo"));
 
-    request.setHeader("Cookie", "JSESSIONID=" + cookies.get(0).getValue());
+    request.setHeader("Cookie", "JSESSIONID=" + getSessionCookie(cookies).getValue());
     request.setURI("/test/request2");
     response = HttpTester.parseResponse(tester.getResponses(request.generate()));
 
-    assertNull(((HttpSession) r.get(cookies.get(0).getValue())).getAttribute("foo"));
+    assertNull(((HttpSession) r.get(getSessionCookie(cookies).getValue())).getAttribute("foo"));
   }
 
   /**
@@ -409,21 +353,17 @@ public void call(HttpServletRequest request, HttpServletResponse response)
    */
   @Test
   public void testUserCanModifyTheirOwnCookie() throws Exception {
-    Callback c = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        Cookie userCookie = findUserCookie(request.getCookies());
-        if (userCookie == null) {
-          userCookie = new Cookie("myCookie", "0");
-        } else {
-          userCookie =
-              new Cookie("myCookie", Integer.toString(Integer.valueOf(userCookie.getValue()) + 1));
-        }
-
-        response.addCookie(userCookie);
-        request.getSession().setAttribute("dummy", "value");
+    Callback c = (request, response) -> {
+      Cookie userCookie = findUserCookie(request.getCookies());
+      if (userCookie == null) {
+        userCookie = new Cookie("myCookie", "0");
+      } else {
+        userCookie =
+            new Cookie("myCookie", Integer.toString(Integer.valueOf(userCookie.getValue()) + 1));
       }
+
+      response.addCookie(userCookie);
+      request.getSession().setAttribute("dummy", "value");
     };
 
     tester.setAttribute("callback_1", c);
@@ -451,102 +391,16 @@ private Cookie findUserCookie(Cookie[] cookies) {
     return userCookie;
   }
 
-  // Don't see how to do this currently as the SessionListener needs a full
-  // web context to work in.
-
-  // /**
-  // * Test that sessions expire correctly
-  // */
-  // public void testSessionExpiration() throws Exception {
-  // Callback c_1 = new Callback() {
-  // @Override
-  // public void call(HttpServletRequest request, HttpServletResponse response)
-  // throws IOException, ServletException {
-  // HttpSession s = request.getSession();
-  // s.setAttribute("foo", "bar");
-  // s.setMaxInactiveInterval(1);
-  //
-  // PrintWriter out = response.getWriter();
-  // out.write(s.getId());
-  // }
-  // };
-  //
-  // // This is the callback used to check if the session is still there
-  // Callback c_2 = new Callback() {
-  // @Override
-  // public void call(HttpServletRequest request, HttpServletResponse response)
-  // throws IOException, ServletException {
-  // HttpSession s = request.getSession(false);
-  // String output;
-  // if (s == null) {
-  // output = "null";
-  // } else {
-  // output = s.getId();
-  // }
-  //
-  // PrintWriter out = response.getWriter();
-  // out.write(output);
-  // }
-  // };
-  //
-  // tester.addEventListener(new SessionListener());
-  // tester.setAttribute("callback_1", c_1);
-  // tester.setAttribute("callback_2", c_2);
-  //
-  // servletHolder.setInitParameter("test.callback", "callback_1");
-  //
-  // ServletHolder sh2 = tester.addServlet(BasicServlet.class, "/request2");
-  // sh2.setInitParameter("test.callback", "callback_2");
-  //
-  // tester.start();
-  // ContextManager.getInstance().putContext(
-  // servletHolder.getServlet().getServletConfig().getServletContext());
-  //
-  // request.setMethod("GET");
-  // request.setURI("/test/hello");
-  // request.setHeader("Host", "tester");
-  // request.setVersion("HTTP/1.0");
-  // response.parse(tester.getResponses(request.generate()));
-  //
-  // String id = response.getContent();
-  //
-  // // Wait for the session to expire
-  // Thread.sleep(2000);
-  //
-  // request.setHeader("Cookie", "JSESSIONID=" + id);
-  // request.setURI("/test/request2");
-  // response.parse(tester.getResponses(request.generate()));
-  //
-  // assertIndexDetailsEquals("null", response.getContent());
-  //
-  // Region r = getRegion();
-  // assertNull("Region should not contain session", r.get(id));
-  // }
-
   /**
    * Test that invalidating a session destroys it as well as the backend object.
    */
-  @Category(FlakyTest.class) // GEODE-1015: uses Jetty HttpTester, uses static vars with class
-                             // loader isolation, TODO: rewrite test with JUnit 4 rules including
-                             // TemporaryFolder
+  @Category(FlakyTest.class)
   @Test
   public void testInvalidateSession1() throws Exception {
-    Callback c_1 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        request.getSession().setAttribute("foo", "bar");
-      }
-    };
+    Callback c_1 = (request, response) -> request.getSession().setAttribute("foo", "bar");
 
     // This is the callback used to invalidate the session
-    Callback c_2 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        request.getSession(false).invalidate();
-      }
-    };
+    Callback c_2 = (request, response) -> request.getSession(false).invalidate();
 
     tester.setAttribute("callback_1", c_1);
     tester.setAttribute("callback_2", c_2);
@@ -557,8 +411,6 @@ public void call(HttpServletRequest request, HttpServletResponse response)
     sh2.setInitParameter("test.callback", "callback_2");
 
     tester.start();
-    // ContextManager.getInstance().putContext(
-    // servletHolder.getServlet().getServletConfig().getServletContext());
 
     request.setMethod("GET");
     request.setURI("/test/hello");
@@ -568,13 +420,14 @@ public void call(HttpServletRequest request, HttpServletResponse response)
 
     List<Cookie> cookies = getCookies(response);
     Region r = getRegion();
-    assertEquals("bar", ((HttpSession) r.get(cookies.get(0).getValue())).getAttribute("foo"));
+    assertEquals("bar",
+        ((HttpSession) r.get(getSessionCookie(cookies).getValue())).getAttribute("foo"));
 
-    request.setHeader("Cookie", "JSESSIONID=" + cookies.get(0).getValue());
+    request.setHeader("Cookie", "JSESSIONID=" + getSessionCookie(cookies).getValue());
     request.setURI("/test/request2");
     response = HttpTester.parseResponse(tester.getResponses(request.generate()));
 
-    assertNull("Region should not contain session", r.get(cookies.get(0).getValue()));
+    assertNull("Region should not contain session", r.get(getSessionCookie(cookies).getValue()));
   }
 
   /**
@@ -582,18 +435,14 @@ public void call(HttpServletRequest request, HttpServletResponse response)
    */
   @Test
   public void testInvalidateSession2() throws Exception {
-    Callback c_1 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        HttpSession s = request.getSession();
-        s.invalidate();
-        PrintWriter out = response.getWriter();
-        try {
-          s.getAttribute("foo");
-        } catch (IllegalStateException iex) {
-          out.write("OK");
-        }
+    Callback c_1 = (request, response) -> {
+      HttpSession s = request.getSession();
+      s.invalidate();
+      PrintWriter out = response.getWriter();
+      try {
+        s.getAttribute("foo");
+      } catch (IllegalStateException iex) {
+        out.write("OK");
       }
     };
 
@@ -602,8 +451,6 @@ public void call(HttpServletRequest request, HttpServletResponse response)
     servletHolder.setInitParameter("test.callback", "callback_1");
 
     tester.start();
-    // ContextManager.getInstance().putContext(
-    // servletHolder.getServlet().getServletConfig().getServletContext());
 
     request.setMethod("GET");
     request.setURI("/test/hello");
@@ -617,23 +464,17 @@ public void call(HttpServletRequest request, HttpServletResponse response)
   /**
    * Test that invalidating a session throws an exception on subsequent access.
    */
-  @Category(FlakyTest.class) // GEODE-1015: uses Jetty HttpTester, uses static vars with class
-                             // loader isolation, TODO: rewrite test with JUnit 4 rules including
-                             // TemporaryFolder
+  @Category(FlakyTest.class)
   @Test
   public void testInvalidateSession3() throws Exception {
-    Callback c_1 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        HttpSession s = request.getSession();
-        s.invalidate();
-        PrintWriter out = response.getWriter();
-        try {
-          s.getAttributeNames();
-        } catch (IllegalStateException iex) {
-          out.write("OK");
-        }
+    Callback c_1 = (request, response) -> {
+      HttpSession s = request.getSession();
+      s.invalidate();
+      PrintWriter out = response.getWriter();
+      try {
+        s.getAttributeNames();
+      } catch (IllegalStateException iex) {
+        out.write("OK");
       }
     };
 
@@ -659,18 +500,14 @@ public void call(HttpServletRequest request, HttpServletResponse response)
    */
   @Test
   public void testInvalidateSession4() throws Exception {
-    Callback c_1 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        HttpSession s = request.getSession();
-        s.invalidate();
-        PrintWriter out = response.getWriter();
-        try {
-          s.getCreationTime();
-        } catch (IllegalStateException iex) {
-          out.write("OK");
-        }
+    Callback c_1 = (request, response) -> {
+      HttpSession s = request.getSession();
+      s.invalidate();
+      PrintWriter out = response.getWriter();
+      try {
+        s.getCreationTime();
+      } catch (IllegalStateException iex) {
+        out.write("OK");
       }
     };
 
@@ -696,16 +533,12 @@ public void call(HttpServletRequest request, HttpServletResponse response)
    */
   @Test
   public void testInvalidateSession5() throws Exception {
-    Callback c_1 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        HttpSession s = request.getSession();
-        s.invalidate();
-        s.getId();
-        PrintWriter out = response.getWriter();
-        out.write("OK");
-      }
+    Callback c_1 = (request, response) -> {
+      HttpSession s = request.getSession();
+      s.invalidate();
+      s.getId();
+      PrintWriter out = response.getWriter();
+      out.write("OK");
     };
 
     tester.setAttribute("callback_1", c_1);
@@ -713,8 +546,6 @@ public void call(HttpServletRequest request, HttpServletResponse response)
     servletHolder.setInitParameter("test.callback", "callback_1");
 
     tester.start();
-    // ContextManager.getInstance().putContext(
-    // servletHolder.getServlet().getServletConfig().getServletContext());
 
     request.setMethod("GET");
     request.setURI("/test/hello");
@@ -730,18 +561,14 @@ public void call(HttpServletRequest request, HttpServletResponse response)
    */
   @Test
   public void testInvalidateSession6() throws Exception {
-    Callback c_1 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        HttpSession s = request.getSession();
-        s.invalidate();
-        PrintWriter out = response.getWriter();
-        try {
-          s.getLastAccessedTime();
-        } catch (IllegalStateException iex) {
-          out.write("OK");
-        }
+    Callback c_1 = (request, response) -> {
+      HttpSession s = request.getSession();
+      s.invalidate();
+      PrintWriter out = response.getWriter();
+      try {
+        s.getLastAccessedTime();
+      } catch (IllegalStateException iex) {
+        out.write("OK");
       }
     };
 
@@ -750,8 +577,6 @@ public void call(HttpServletRequest request, HttpServletResponse response)
     servletHolder.setInitParameter("test.callback", "callback_1");
 
     tester.start();
-    // ContextManager.getInstance().putContext(
-    // servletHolder.getServlet().getServletConfig().getServletContext());
 
     request.setMethod("GET");
     request.setURI("/test/hello");
@@ -771,16 +596,12 @@ public void call(HttpServletRequest request, HttpServletResponse response)
   // Exception here where the HttpServlet api doesn't specify that.
   @Test
   public void testInvalidateSession7() throws Exception {
-    Callback c_1 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        HttpSession s = request.getSession();
-        s.invalidate();
-        s.getMaxInactiveInterval();
-        PrintWriter out = response.getWriter();
-        out.write("OK");
-      }
+    Callback c_1 = (request, response) -> {
+      HttpSession s = request.getSession();
+      s.invalidate();
+      s.getMaxInactiveInterval();
+      PrintWriter out = response.getWriter();
+      out.write("OK");
     };
 
     tester.setAttribute("callback_1", c_1);
@@ -788,8 +609,6 @@ public void call(HttpServletRequest request, HttpServletResponse response)
     servletHolder.setInitParameter("test.callback", "callback_1");
 
     tester.start();
-    // ContextManager.getInstance().putContext(
-    // servletHolder.getServlet().getServletConfig().getServletContext());
 
     request.setMethod("GET");
     request.setURI("/test/hello");
@@ -806,16 +625,12 @@ public void call(HttpServletRequest request, HttpServletResponse response)
    */
   @Test
   public void testInvalidateSession8() throws Exception {
-    Callback c_1 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        HttpSession s = request.getSession();
-        s.invalidate();
-        s.getServletContext();
-        PrintWriter out = response.getWriter();
-        out.write("OK");
-      }
+    Callback c_1 = (request, response) -> {
+      HttpSession s = request.getSession();
+      s.invalidate();
+      s.getServletContext();
+      PrintWriter out = response.getWriter();
+      out.write("OK");
     };
 
     tester.setAttribute("callback_1", c_1);
@@ -823,8 +638,6 @@ public void call(HttpServletRequest request, HttpServletResponse response)
     servletHolder.setInitParameter("test.callback", "callback_1");
 
     tester.start();
-    // ContextManager.getInstance().putContext(
-    // servletHolder.getServlet().getServletConfig().getServletContext());
 
     request.setMethod("GET");
     request.setURI("/test/hello");
@@ -841,18 +654,14 @@ public void call(HttpServletRequest request, HttpServletResponse response)
   @Category(FlakyTest.class) // GEODE-1943
   @Test
   public void testInvalidateSession9() throws Exception {
-    Callback c_1 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        HttpSession s = request.getSession();
-        s.invalidate();
-        PrintWriter out = response.getWriter();
-        try {
-          s.isNew();
-        } catch (IllegalStateException iex) {
-          out.write("OK");
-        }
+    Callback c_1 = (request, response) -> {
+      HttpSession s = request.getSession();
+      s.invalidate();
+      PrintWriter out = response.getWriter();
+      try {
+        s.isNew();
+      } catch (IllegalStateException iex) {
+        out.write("OK");
       }
     };
 
@@ -874,18 +683,14 @@ public void call(HttpServletRequest request, HttpServletResponse response)
    */
   @Test
   public void testInvalidateSession10() throws Exception {
-    Callback c_1 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        HttpSession s = request.getSession();
-        s.invalidate();
-        PrintWriter out = response.getWriter();
-        try {
-          s.removeAttribute("foo");
-        } catch (IllegalStateException iex) {
-          out.write("OK");
-        }
+    Callback c_1 = (request, response) -> {
+      HttpSession s = request.getSession();
+      s.invalidate();
+      PrintWriter out = response.getWriter();
+      try {
+        s.removeAttribute("foo");
+      } catch (IllegalStateException iex) {
+        out.write("OK");
       }
     };
 
@@ -894,8 +699,6 @@ public void call(HttpServletRequest request, HttpServletResponse response)
     servletHolder.setInitParameter("test.callback", "callback_1");
 
     tester.start();
-    // ContextManager.getInstance().putContext(
-    // servletHolder.getServlet().getServletConfig().getServletContext());
 
     request.setMethod("GET");
     request.setURI("/test/hello");
@@ -911,18 +714,14 @@ public void call(HttpServletRequest request, HttpServletResponse response)
    */
   @Test
   public void testInvalidateSession11() throws Exception {
-    Callback c_1 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        HttpSession s = request.getSession();
-        s.invalidate();
-        PrintWriter out = response.getWriter();
-        try {
-          s.setAttribute("foo", "bar");
-        } catch (IllegalStateException iex) {
-          out.write("OK");
-        }
+    Callback c_1 = (request, response) -> {
+      HttpSession s = request.getSession();
+      s.invalidate();
+      PrintWriter out = response.getWriter();
+      try {
+        s.setAttribute("foo", "bar");
+      } catch (IllegalStateException iex) {
+        out.write("OK");
       }
     };
 
@@ -931,8 +730,6 @@ public void call(HttpServletRequest request, HttpServletResponse response)
     servletHolder.setInitParameter("test.callback", "callback_1");
 
     tester.start();
-    // ContextManager.getInstance().putContext(
-    // servletHolder.getServlet().getServletConfig().getServletContext());
 
     request.setMethod("GET");
     request.setURI("/test/hello");
@@ -949,16 +746,12 @@ public void call(HttpServletRequest request, HttpServletResponse response)
    */
   @Test
   public void testInvalidateSession12() throws Exception {
-    Callback c_1 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        HttpSession s = request.getSession();
-        s.invalidate();
-        s.setMaxInactiveInterval(1);
-        PrintWriter out = response.getWriter();
-        out.write("OK");
-      }
+    Callback c_1 = (request, response) -> {
+      HttpSession s = request.getSession();
+      s.invalidate();
+      s.setMaxInactiveInterval(1);
+      PrintWriter out = response.getWriter();
+      out.write("OK");
     };
 
     tester.setAttribute("callback_1", c_1);
@@ -966,8 +759,6 @@ public void call(HttpServletRequest request, HttpServletResponse response)
     servletHolder.setInitParameter("test.callback", "callback_1");
 
     tester.start();
-    // ContextManager.getInstance().putContext(
-    // servletHolder.getServlet().getServletConfig().getServletContext());
 
     request.setMethod("GET");
     request.setURI("/test/hello");
@@ -984,19 +775,15 @@ public void call(HttpServletRequest request, HttpServletResponse response)
    */
   @Test
   public void testInvalidateSession13() throws Exception {
-    Callback c_1 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        HttpSession s = request.getSession();
-        s.invalidate();
-        s = request.getSession(false);
-        PrintWriter out = response.getWriter();
-        if (s == null) {
-          out.write("OK");
-        } else {
-          out.write(s.toString());
-        }
+    Callback c_1 = (request, response) -> {
+      HttpSession s = request.getSession();
+      s.invalidate();
+      s = request.getSession(false);
+      PrintWriter out = response.getWriter();
+      if (s == null) {
+        out.write("OK");
+      } else {
+        out.write(s.toString());
       }
     };
 
@@ -1023,26 +810,18 @@ public void call(HttpServletRequest request, HttpServletResponse response)
    */
   @Test
   public void testInvalidateAndRecreateSession() throws Exception {
-    Callback c_1 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
+    Callback c_1 = (request, response) -> {
 
-        PrintWriter out = response.getWriter();
-        out.write(request.getSession().getId());
-      }
+      PrintWriter out = response.getWriter();
+      out.write(request.getSession().getId());
     };
 
-    Callback c_2 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        HttpSession s = request.getSession();
-        s.invalidate();
+    Callback c_2 = (request, response) -> {
+      HttpSession s = request.getSession();
+      s.invalidate();
 
-        PrintWriter out = response.getWriter();
-        out.write(request.getSession().getId());
-      }
+      PrintWriter out = response.getWriter();
+      out.write(request.getSession().getId());
     };
 
     tester.setAttribute("callback_1", c_1);
@@ -1078,14 +857,10 @@ public void call(HttpServletRequest request, HttpServletResponse response)
    */
   @Test
   public void testGetCreationTime() throws Exception {
-    Callback c = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        HttpSession session = request.getSession();
-        PrintWriter out = response.getWriter();
-        out.write(Long.toString(session.getCreationTime()));
-      }
+    Callback c = (request, response) -> {
+      HttpSession session = request.getSession();
+      PrintWriter out = response.getWriter();
+      out.write(Long.toString(session.getCreationTime()));
     };
 
     tester.setAttribute("callback_1", c);
@@ -1104,11 +879,11 @@ public void call(HttpServletRequest request, HttpServletResponse response)
     assertTrue("Creation time should be positive", time1 > 0);
 
     List<Cookie> cookies = getCookies(response);
-    request.setHeader("Cookie", "JSESSIONID=" + cookies.get(0).getValue());
+    request.setHeader("Cookie", "JSESSIONID=" + getSessionCookie(cookies).getValue());
 
     try {
       Thread.sleep(1000);
-    } catch (Exception ex) {
+    } catch (Exception ignored) {
     }
 
     response = HttpTester.parseResponse(tester.getResponses(request.generate()));
@@ -1121,20 +896,14 @@ public void call(HttpServletRequest request, HttpServletResponse response)
    */
   @Test
   public void testGetLastAccessedTime() throws Exception {
-    Callback c = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        HttpSession session = request.getSession();
-        PrintWriter out = response.getWriter();
-        out.write(Long.toString(session.getLastAccessedTime()));
-      }
+    Callback c = (request, response) -> {
+      HttpSession session = request.getSession();
+      PrintWriter out = response.getWriter();
+      out.write(Long.toString(session.getLastAccessedTime()));
     };
 
     tester.setAttribute("callback_1", c);
     tester.start();
-    // ContextManager.getInstance().putContext(
-    // servletHolder.getServlet().getServletConfig().getServletContext());
 
     request.setMethod("GET");
     request.setURI("/test/hello");
@@ -1144,10 +913,9 @@ public void call(HttpServletRequest request, HttpServletResponse response)
     response = HttpTester.parseResponse(tester.getResponses(request.generate()));
 
     long time1 = Long.parseLong(response.getContent());
-    // assertTrue("Last accessed time should be positive", time1 > 0);
 
     List<Cookie> cookies = getCookies(response);
-    request.setHeader("Cookie", "JSESSIONID=" + cookies.get(0).getValue());
+    request.setHeader("Cookie", "JSESSIONID=" + getSessionCookie(cookies).getValue());
 
     Thread.sleep(1000);
 
@@ -1161,20 +929,14 @@ public void call(HttpServletRequest request, HttpServletResponse response)
    */
   @Test
   public void testSessionIdEmbeddedInUrl() throws Exception {
-    Callback c = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException {
-        GemfireHttpSession session = (GemfireHttpSession) request.getSession();
-        PrintWriter out = response.getWriter();
-        out.write(session.getId());
-      }
+    Callback c = (request, response) -> {
+      GemfireHttpSession session = (GemfireHttpSession) request.getSession();
+      PrintWriter out = response.getWriter();
+      out.write(session.getId());
     };
 
     tester.setAttribute("callback_1", c);
     tester.start();
-    // ContextManager.getInstance().putContext(
-    // servletHolder.getServlet().getServletConfig().getServletContext());
 
     request.setMethod("GET");
     request.setURI("/test/hello");
@@ -1184,45 +946,35 @@ public void call(HttpServletRequest request, HttpServletResponse response)
     response = HttpTester.parseResponse(tester.getResponses(request.generate()));
     List<Cookie> cookies = getCookies(response);
     String sessionId = response.getContent();
-    assertEquals("Session ids should be the same", sessionId, cookies.get(0).getValue());
+    assertEquals("Session ids should be the same", sessionId, getSessionCookie(cookies).getValue());
 
     request.setURI("/test/hello;jsessionid=" + sessionId);
     response = HttpTester.parseResponse(tester.getResponses(request.generate()));
     cookies = getCookies(response);
 
-    assertEquals("Session ids should be the same", sessionId, cookies.get(0).getValue());
+    assertEquals("Session ids should be the same", sessionId, getSessionCookie(cookies).getValue());
   }
 
 
   /**
    * Test that request forward dispatching works
    */
-  @Category(FlakyTest.class) // GEODE-1015: uses Jetty HttpTester, uses static vars with class
-                             // loader isolation, TODO: rewrite test with JUnit 4 rules including
-                             // TemporaryFolder
+  @Category(FlakyTest.class)
   @Test
   public void testDispatchingForward1() throws Exception {
-    Callback c_1 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException, ServletException {
-        RequestDispatcher dispatcher = request.getRequestDispatcher("dispatch");
-        dispatcher.forward(request, response);
-
-        // This should not appear in the output
-        PrintWriter out = response.getWriter();
-        out.write("bang");
-      }
+    Callback c_1 = (request, response) -> {
+      RequestDispatcher dispatcher = request.getRequestDispatcher("dispatch");
+      dispatcher.forward(request, response);
+
+      // This should not appear in the output
+      PrintWriter out = response.getWriter();
+      out.write("bang");
     };
 
     // This is the callback used by the forward servlet
-    Callback c_2 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException, ServletException {
-        PrintWriter out = response.getWriter();
-        out.write("dispatched");
-      }
+    Callback c_2 = (request, response) -> {
+      PrintWriter out = response.getWriter();
+      out.write("dispatched");
     };
 
     tester.setAttribute("callback_1", c_1);
@@ -1242,9 +994,6 @@ public void call(HttpServletRequest request, HttpServletResponse response)
 
     response = HttpTester.parseResponse(tester.getResponses(request.generate()));
     assertEquals("dispatched", response.getContent());
-
-    // ContextManager.getInstance().removeContext(
-    // sh.getServlet().getServletConfig().getServletContext());
   }
 
 
@@ -1253,27 +1002,19 @@ public void call(HttpServletRequest request, HttpServletResponse response)
    */
   @Test
   public void testDispatchingInclude() throws Exception {
-    Callback c_1 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException, ServletException {
-        RequestDispatcher dispatcher = request.getRequestDispatcher("dispatch");
-        dispatcher.include(request, response);
-
-        // This *should* appear in the output
-        PrintWriter out = response.getWriter();
-        out.write("_bang");
-      }
+    Callback c_1 = (request, response) -> {
+      RequestDispatcher dispatcher = request.getRequestDispatcher("dispatch");
+      dispatcher.include(request, response);
+
+      // This *should* appear in the output
+      PrintWriter out = response.getWriter();
+      out.write("_bang");
     };
 
     // This is the callback used by the include servlet
-    Callback c_2 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException, ServletException {
-        PrintWriter out = response.getWriter();
-        out.write("dispatched");
-      }
+    Callback c_2 = (request, response) -> {
+      PrintWriter out = response.getWriter();
+      out.write("dispatched");
     };
 
     tester.setAttribute("callback_1", c_1);
@@ -1283,8 +1024,6 @@ public void call(HttpServletRequest request, HttpServletResponse response)
     sh.setInitParameter("test.callback", "callback_2");
 
     tester.start();
-    // ContextManager.getInstance().putContext(
-    // sh.getServlet().getServletConfig().getServletContext());
 
     request.setMethod("GET");
     request.setURI("/test/hello");
@@ -1293,9 +1032,6 @@ public void call(HttpServletRequest request, HttpServletResponse response)
 
     response = HttpTester.parseResponse(tester.getResponses(request.generate()));
     assertEquals("dispatched_bang", response.getContent());
-
-    // ContextManager.getInstance().removeContext(
-    // sh.getServlet().getServletConfig().getServletContext());
   }
 
   // @Test
@@ -1306,15 +1042,11 @@ public void testJsp() throws Exception {
 
     jspHolder.setInitParameter("scratchdir", tmpdir.toString());
 
-    Callback c_1 = new Callback() {
-      @Override
-      public void call(HttpServletRequest request, HttpServletResponse response)
-          throws IOException, ServletException {
-        request.getSession().setAttribute("foo", "bar");
-        request.setAttribute("foo", "baz");
-        RequestDispatcher dispatcher = request.getRequestDispatcher("pagecontext.jsp");
-        dispatcher.forward(request, response);
-      }
+    Callback c_1 = (request, response) -> {
+      request.getSession().setAttribute("foo", "bar");
+      request.setAttribute("foo", "baz");
+      RequestDispatcher dispatcher = request.getRequestDispatcher("pagecontext.jsp");
+      dispatcher.forward(request, response);
     };
 
     tester.getContext().setClassLoader(Thread.currentThread().getContextClassLoader());
@@ -1341,7 +1073,7 @@ public void call(HttpServletRequest request, HttpServletResponse response)
    * Why doesn't HttpTester do this already??
    */
   private List<Cookie> getCookies(HttpTester.Response response) {
-    List<Cookie> cookies = new ArrayList<Cookie>();
+    List<Cookie> cookies = new ArrayList<>();
 
     Enumeration e = response.getValues("Set-Cookie");
 
diff --git a/extensions/geode-modules-session/src/test/java/org/apache/geode/modules/session/junit/PerTestClassLoaderRunner.java b/extensions/geode-modules-session/src/test/java/org/apache/geode/modules/session/junit/PerTestClassLoaderRunner.java
index ee72b04832..c237e117bb 100644
--- a/extensions/geode-modules-session/src/test/java/org/apache/geode/modules/session/junit/PerTestClassLoaderRunner.java
+++ b/extensions/geode-modules-session/src/test/java/org/apache/geode/modules/session/junit/PerTestClassLoaderRunner.java
@@ -15,21 +15,6 @@
 
 package org.apache.geode.modules.session.junit;
 
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
- * agreements. See the NOTICE file distributed with this work for additional information regarding
- * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance with the License. You may obtain a
- * copy of the License at
- * <p/>
- * http://www.apache.org/licenses/LICENSE-2.0
- * <p/>
- * Unless required by applicable law or agreed to in writing, software distributed under the License
- * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
- * or implied. See the License for the specific language governing permissions and limitations under
- * the License.
- */
-
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
 import java.net.MalformedURLException;
@@ -91,7 +76,7 @@ protected Object createTest() throws Exception {
   private void loadClassesWithCustomClassLoader() throws ClassNotFoundException {
     String classPath = System.getProperty("java.class.path");
     StringTokenizer st = new StringTokenizer(classPath, ":");
-    List<URL> urls = new ArrayList<URL>();
+    List<URL> urls = new ArrayList<>();
     while (st.hasMoreTokens()) {
       String u = st.nextToken();
       try {
@@ -122,7 +107,7 @@ private void loadClassesWithCustomClassLoader() throws ClassNotFoundException {
 
   @Override
   protected Statement methodBlock(FrameworkMethod method) {
-    FrameworkMethod newMethod = null;
+    FrameworkMethod newMethod;
     try {
       // Need the class from the custom loader now, so lets load the class.
       loadClassesWithCustomClassLoader();
@@ -132,13 +117,9 @@ protected Statement methodBlock(FrameworkMethod method) {
       Method methodFromNewlyLoadedClass =
           testClassFromClassLoader.getJavaClass().getMethod(method.getName());
       newMethod = new FrameworkMethod(methodFromNewlyLoadedClass);
-    } catch (ClassNotFoundException e) {
+    } catch (ClassNotFoundException | NoSuchMethodException | SecurityException e) {
       // Show any problem nicely as a JUnit Test failure.
       return new Fail(e);
-    } catch (SecurityException e) {
-      return new Fail(e);
-    } catch (NoSuchMethodException e) {
-      return new Fail(e);
     }
 
     // We can carry out the normal JUnit functionality with our newly discovered method now.
diff --git a/extensions/geode-modules/build.gradle b/extensions/geode-modules/build.gradle
index cfc2cd36c3..97960967c5 100644
--- a/extensions/geode-modules/build.gradle
+++ b/extensions/geode-modules/build.gradle
@@ -34,4 +34,4 @@ dependencies {
   testCompile files(project(':geode-core').sourceSets.test.output)
 }
 
-disableMavenPublishing()
\ No newline at end of file
+disableMavenPublishing()
diff --git a/geode-assembly/src/test/java/org/apache/geode/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java b/geode-assembly/src/test/java/org/apache/geode/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java
index 6b79605550..270c65c888 100644
--- a/geode-assembly/src/test/java/org/apache/geode/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java
+++ b/geode-assembly/src/test/java/org/apache/geode/rest/internal/web/controllers/RestAPIsWithSSLDUnitTest.java
@@ -14,8 +14,45 @@
  */
 package org.apache.geode.rest.internal.web.controllers;
 
-import static org.apache.geode.distributed.ConfigurationProperties.*;
-import static org.junit.Assert.*;
+import static org.apache.geode.distributed.ConfigurationProperties.CLUSTER_SSL_ENABLED;
+import static org.apache.geode.distributed.ConfigurationProperties.CLUSTER_SSL_KEYSTORE;
+import static org.apache.geode.distributed.ConfigurationProperties.CLUSTER_SSL_KEYSTORE_PASSWORD;
+import static org.apache.geode.distributed.ConfigurationProperties.CLUSTER_SSL_KEYSTORE_TYPE;
+import static org.apache.geode.distributed.ConfigurationProperties.CLUSTER_SSL_PROTOCOLS;
+import static org.apache.geode.distributed.ConfigurationProperties.CLUSTER_SSL_REQUIRE_AUTHENTICATION;
+import static org.apache.geode.distributed.ConfigurationProperties.CLUSTER_SSL_TRUSTSTORE;
+import static org.apache.geode.distributed.ConfigurationProperties.CLUSTER_SSL_TRUSTSTORE_PASSWORD;
+import static org.apache.geode.distributed.ConfigurationProperties.HTTP_SERVICE_BIND_ADDRESS;
+import static org.apache.geode.distributed.ConfigurationProperties.HTTP_SERVICE_PORT;
+import static org.apache.geode.distributed.ConfigurationProperties.HTTP_SERVICE_SSL_CIPHERS;
+import static org.apache.geode.distributed.ConfigurationProperties.HTTP_SERVICE_SSL_ENABLED;
+import static org.apache.geode.distributed.ConfigurationProperties.HTTP_SERVICE_SSL_KEYSTORE;
+import static org.apache.geode.distributed.ConfigurationProperties.HTTP_SERVICE_SSL_KEYSTORE_PASSWORD;
+import static org.apache.geode.distributed.ConfigurationProperties.HTTP_SERVICE_SSL_KEYSTORE_TYPE;
+import static org.apache.geode.distributed.ConfigurationProperties.HTTP_SERVICE_SSL_PROTOCOLS;
+import static org.apache.geode.distributed.ConfigurationProperties.HTTP_SERVICE_SSL_REQUIRE_AUTHENTICATION;
+import static org.apache.geode.distributed.ConfigurationProperties.HTTP_SERVICE_SSL_TRUSTSTORE;
+import static org.apache.geode.distributed.ConfigurationProperties.HTTP_SERVICE_SSL_TRUSTSTORE_PASSWORD;
+import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER;
+import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER_PORT;
+import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER_START;
+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;
+import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;
+import static org.apache.geode.distributed.ConfigurationProperties.SSL_CIPHERS;
+import static org.apache.geode.distributed.ConfigurationProperties.SSL_DEFAULT_ALIAS;
+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENABLED_COMPONENTS;
+import static org.apache.geode.distributed.ConfigurationProperties.SSL_KEYSTORE;
+import static org.apache.geode.distributed.ConfigurationProperties.SSL_KEYSTORE_PASSWORD;
+import static org.apache.geode.distributed.ConfigurationProperties.SSL_KEYSTORE_TYPE;
+import static org.apache.geode.distributed.ConfigurationProperties.SSL_PROTOCOLS;
+import static org.apache.geode.distributed.ConfigurationProperties.SSL_REQUIRE_AUTHENTICATION;
+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE;
+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE_PASSWORD;
+import static org.apache.geode.distributed.ConfigurationProperties.SSL_WEB_ALIAS;
+import static org.apache.geode.distributed.ConfigurationProperties.SSL_WEB_SERVICE_REQUIRE_AUTHENTICATION;
+import static org.apache.geode.distributed.ConfigurationProperties.START_DEV_REST_API;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -585,21 +622,6 @@ public void testSSLWithTLSProtocol() throws Exception {
     validateConnection(restEndpoint, "TLS", props);
   }
 
-  @Test
-  public void testSSLWithTLSv11Protocol() throws Exception {
-    Properties props = new Properties();
-    props.setProperty(SSL_KEYSTORE, findTrustedJKSWithSingleEntry().getCanonicalPath());
-    props.setProperty(SSL_TRUSTSTORE, findTrustedJKSWithSingleEntry().getCanonicalPath());
-    props.setProperty(SSL_KEYSTORE_PASSWORD, "password");
-    props.setProperty(SSL_TRUSTSTORE_PASSWORD, "password");
-    props.setProperty(SSL_KEYSTORE_TYPE, "JKS");
-    props.setProperty(SSL_PROTOCOLS, "TLSv1.1");
-    props.setProperty(SSL_ENABLED_COMPONENTS, SecurableCommunicationChannel.WEB.getConstant());
-
-    String restEndpoint = startInfraWithSSL(props, false);
-    validateConnection(restEndpoint, "TLSv1.1", props);
-  }
-
   @Test
   public void testSSLWithTLSv12Protocol() throws Exception {
     Properties props = new Properties();
@@ -744,19 +766,6 @@ public void testSSLWithTLSProtocolLegacy() throws Exception {
     validateConnection(restEndpoint, "TLS", props);
   }
 
-  @Test
-  public void testSSLWithTLSv11ProtocolLegacy() throws Exception {
-    Properties props = new Properties();
-    props.setProperty(HTTP_SERVICE_SSL_ENABLED, "true");
-    props.setProperty(HTTP_SERVICE_SSL_KEYSTORE,
-        findTrustedJKSWithSingleEntry().getCanonicalPath());
-    props.setProperty(HTTP_SERVICE_SSL_KEYSTORE_PASSWORD, "password");
-    props.setProperty(HTTP_SERVICE_SSL_PROTOCOLS, "TLSv1.1");
-
-    String restEndpoint = startInfraWithSSL(props, false);
-    validateConnection(restEndpoint, "TLSv1.1", props);
-  }
-
   @Test
   public void testSSLWithTLSv12ProtocolLegacy() throws Exception {
     Properties props = new Properties();
diff --git a/geode-assembly/src/test/java/org/apache/geode/session/tests/GenericAppServerInstall.java b/geode-assembly/src/test/java/org/apache/geode/session/tests/GenericAppServerInstall.java
index 4e56887aa6..19c7252cf0 100644
--- a/geode-assembly/src/test/java/org/apache/geode/session/tests/GenericAppServerInstall.java
+++ b/geode-assembly/src/test/java/org/apache/geode/session/tests/GenericAppServerInstall.java
@@ -32,6 +32,7 @@
  * specific code outside of the {@link GenericAppServerVersion}.
  */
 public class GenericAppServerInstall extends ContainerInstall {
+  private static final String JETTY_VERSION = "9.4.8.v20171121";
 
   /**
    * Get the version number, download URL, and container name of a generic app server using
@@ -40,9 +41,8 @@
    * Currently the only supported keyword instance is JETTY9.
    */
   public enum GenericAppServerVersion {
-    JETTY9(9,
-        "http://central.maven.org/maven2/org/eclipse/jetty/jetty-distribution/9.4.5.v20170502/jetty-distribution-9.4.5.v20170502.zip",
-        "jetty");
+    JETTY9(9, "http://central.maven.org/maven2/org/eclipse/jetty/jetty-distribution/"
+        + JETTY_VERSION + "/jetty-distribution-" + JETTY_VERSION + ".zip", "jetty");
 
     private final int version;
     private final String downloadURL;
diff --git a/geode-core/build.gradle b/geode-core/build.gradle
index 3f47b0784e..041e411c69 100755
--- a/geode-core/build.gradle
+++ b/geode-core/build.gradle
@@ -87,7 +87,10 @@ dependencies {
   runtime ('org.fusesource.jansi:jansi:' + project.'jansi.version') {
     ext.optional = true
   }
+  runtime 'org.slf4j:slf4j-api:' + project.'slf4j-api.version'
+
   runtime ('org.apache.logging.log4j:log4j-slf4j-impl:' + project.'log4j.version') {
+    exclude module: 'slf4j-api'
     ext.optional = true
   }
   runtime ('org.apache.logging.log4j:log4j-jcl:' + project.'log4j.version') {
diff --git a/gradle/dependency-versions.properties b/gradle/dependency-versions.properties
index d2cd4d7f83..723a2e5e5d 100644
--- a/gradle/dependency-versions.properties
+++ b/gradle/dependency-versions.properties
@@ -42,7 +42,7 @@ hamcrest-all.version = 1.3
 httpclient.version = 4.5.3
 httpcore.version = 4.4.6
 httpunit.version = 1.7.2
-jackson.version = 2.8.6
+jackson.version = 2.9.2
 jackson-module-scala_2.10.version = 2.8.6
 jansi.version = 1.14
 javassist.version = 3.21.0-GA
@@ -54,7 +54,7 @@ javax.resource-api.version = 1.7
 javax.servlet-api.version = 3.1.0
 javax.transaction-api.version = 1.2
 jedis.version = 2.9.0
-jetty.version = 9.3.10.v20160621
+jetty.version = 9.4.8.v20171121
 jgroups.version = 3.6.10.Final
 jmock.version = 2.8.2
 jna.version = 4.0.0
@@ -86,10 +86,10 @@ slf4j-api.version = 1.7.24
 snappy-java.version=0.4
 spring-hateoas.version = 0.23.0.RELEASE
 spring-ldap-core.version = 2.3.1.RELEASE
-spring-security.version = 4.2.1.RELEASE
+spring-security.version = 4.2.3.RELEASE
 spring-shell.version = 1.2.0.RELEASE
-spring-tx.version = 4.3.6.RELEASE
-springframework.version = 4.3.6.RELEASE
+spring-tx.version = 4.3.13.RELEASE
+springframework.version = 4.3.13.RELEASE
 spymemcached.version = 2.12.2
 springfox.version=2.6.1
 stephenc-findbugs.version = 1.3.9-1


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


