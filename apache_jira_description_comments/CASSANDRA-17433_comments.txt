Made the suggested changes in the PR - [https://github.com/apache/cassandra/pull/2378] .   

I'm not sure if this is intentional, but the existing logic seems to imply that if we have both timezone configured in settings and environment, the environment value will always take precedence:
{code:java}
if options.timezone:
    try:
        timezone = pytz.timezone(options.timezone)
    except Exception:
        sys.stderr.write("Warning: could not recognize timezone '%s' specified in cqlshrc\n\n" % (options.timezone))
if 'TZ' in os.environ:
    try:
        timezone = pytz.timezone(os.environ['TZ'])
    except Exception:
        sys.stderr.write("Warning: could not recognize timezone '%s' from environment value TZ\n\n" % (os.environ['TZ'])){code}
For now, I emulated the approach we currently have for the pytz library.

 

Should probably update the online documentation here to mention TZ in addition to the setting in cqlshrc options in the [cqlsh|https://cassandra.apache.org/doc/latest/cassandra/tools/cqlsh.html#pytz] section:
{quote}By default, cqlsh displays all timestamps with a UTC timezone. To support display of timestamps with another timezone, install the pytz library. See the timezone option in cqlshrc for specifying a timezone to use

doc/modules/cassandra/pages/managing/tools/cqlsh.adoc
{quote}

Ok thanks, I'll take a look at updating that tomorrow

Ok, I updated the documentation.  I also made a note mentioning that they pytz library should only be necessary now on Python 3.8 or lower - hopefully that is ok.  If not, let me know.

https://github.com/apache/cassandra/pull/2378/files

PR https://github.com/apache/cassandra/pull/2378/files
jenkins https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2503/
ci j11 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2356/workflows/445dae27-504d-4d1e-a6ff-33cee73668e7
ci j8 https://app.circleci.com/pipelines/github/instaclustr/cassandra/2356/workflows/849c9964-9e3e-44a3-b8e8-d71cd03b970e

fyi [~brandon.williams]

LGTM, I'm +1 if [~bschoeni] is satisfied.

+1 nice work!

Hmm, there seems to be a few failures from the Jenkins and CI J8 run.

CI J8 test:

The one test that is failing also seems to have a flaky annotation on this test so I guess this test does not consistently pass?  I seem to get a similar behavior when I run it locally.  From what I can tell, it looks unrelated to the changes in this ticket.

For the Jenkins run:

IndexSummaryTest - Is failing consistently according to Butler and has a ticket open for it - https://issues.apache.org/jira/browse/CASSANDRA-18423 

TestJMX.test_netstats - Also looks unrelated to the changes in this ticket and seems to be consistently passing when I run it locally many times

Cql_test & NetstatsRepairStreamingTest - Running into some issues trying to run these tests locally so will need to see if I can resolve them tomorrow, but from a glance, the only one that might be related to the changes in this ticket is the 'test_timestamp_and_ttl' test.

The jenkins failures all look like timeouts to me, which isn't unusual as that environment is known to have issues with them.  The main thing is that this run in Jenkins had one less failure than the previous one, so we know nothing got worse, and circle is clean, so everything is fine, no worries.

I am just running one more build here https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2505/ should be finished pretty soon.

+1 

Thank you [~lmtrombone] for your contribution. 

