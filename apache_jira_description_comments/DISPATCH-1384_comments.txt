WIP in https://github.com/jdanekrh/qpid-dispatch/commits/jd_macos_tests

{{9 - unit_tests (SEGFAULT)}} can be fixed by adding {{-fno-inline}}, although that is not the fix we want. The reason why there is segfault is explained on https://stackoverflow.com/questions/56711149/how-do-i-replace-a-function-by-a-mock-implementation-when-unit-testing-a-shared. Function {{qd_timer_now}} is built inlined on macOS, so when building for unittests, it is not replaced by mock implementation.

{{48 - system_tests_bad_configuration (Failed)}} is fixed by updating the regex with a macOS version of the error message text

[~jdanek] I'm seeing 67% pass on master here and 69% with your jd_macos_tests branch. Some % lost due to no saslpasswd2 executable being found, not sure how much of the rest of the discrepancy is local environment at this point:

master
{code}
67% tests passed, 20 tests failed out of 61

Total Test time (real) = 987.86 sec

The following tests FAILED:
          9 - unit_tests (SEGFAULT)
         14 - system_tests_link_routes (Child aborted)
         21 - system_tests_handle_failover (Failed)
         24 - system_tests_policy (Child aborted)
         26 - system_tests_protocol_settings (Failed)
         27 - system_tests_qdmanage (Failed)
         28 - system_tests_qdstat (Failed)
         29 - system_tests_sasl_plain (Failed)
         30 - system_tests_user_id (Failed)
         31 - system_tests_user_id_proxy (Failed)
         37 - system_tests_log_message_components (Failed)
         39 - system_tests_auth_service_plugin (Failed)
         40 - system_tests_authz_service_plugin (Failed)
         43 - system_tests_topology_disposition (Failed)
         49 - system_tests_bad_configuration (Failed)
         50 - system_tests_ssl (Failed)
         54 - system_tests_http (Failed)
         56 - system_tests_core_client (Failed)
         57 - system_tests_address_lookup (Child aborted)
         59 - system_tests_multicast (Failed)
Errors while running CTest
{code}

jd_macos_tests
{code}
69% tests passed, 18 tests failed out of 59

Total Test time (real) = 892.27 sec

The following tests FAILED:
          9 - unit_tests (SEGFAULT)
         13 - system_tests_link_routes (Child aborted)
         20 - system_tests_handle_failover (Failed)
         23 - system_tests_policy (Child aborted)
         25 - system_tests_protocol_settings (Failed)
         26 - system_tests_qdmanage (Failed)
         27 - system_tests_qdstat (Failed)
         28 - system_tests_sasl_plain (Failed)
         29 - system_tests_user_id (Failed)
         30 - system_tests_user_id_proxy (Failed)
         36 - system_tests_log_message_components (Failed)
         38 - system_tests_auth_service_plugin (Failed)
         39 - system_tests_authz_service_plugin (Failed)
         42 - system_tests_topology_disposition (Failed)
         49 - system_tests_ssl (Failed)
         52 - system_tests_http (Failed)
         55 - system_tests_core_client (Failed)
         56 - system_tests_address_lookup (Child aborted)
{code}

I also noted that python crashes multiple times during the run. Outside of the steps from the travis yaml is there any further specific configuration expected, or exact versions needed to get the higher pass rate do you know?

Hi [~rkieley]!

On Travis, I see "*75% tests passed*, 15 tests failed out of 61" on master, https://travis-ci.org/apache/qpid-dispatch/jobs/598898629. Probably because there I have `saslpasswd2` from macports.

I have branch https://github.com/jdanekrh/qpid-dispatch/commits/jd_2019-10_macos_unit_tests_segfault https://travis-ci.org/jdanekrh/qpid-dispatch/jobs/599002957 which fixes the unit_tests SEGFAULT in IMO a good way. I just have to figure where to put the linker options in CMakeLists.txt (they are in .travis.yml now) and it should be ready to go.

I'll do a separate branch for {{system_tests_bad_configuration}} as well.

Further, I tried the tactic of throwing random stuff at the CI, to see if anything sticks.

So I have https://github.com/jdanekrh/qpid-dispatch/commits/jd_2019-10_macos_tests_py3, https://travis-ci.org/jdanekrh/qpid-dispatch/jobs/598992799, which is "*80% tests passed*, 12 tests failed out of 61"

Then I have a Python 2 branch, which is a throwback to the previous state of the original PR done the "python -m easy_install unittest2" way, https://github.com/jdanekrh/qpid-dispatch/commits/jd_2019-10_macos_tests_py2, https://travis-ci.org/jdanekrh/qpid-dispatch/builds/599000073, and that gets "*84% tests passed*, 10 tests failed out of 61" on Travis. I'd like to stick with Python 3 here though, if at all practical.

edit: jd_macos_tests is ancient branch at this point (see the total number of tests, or commit dates). I should probably delete it.

jdanekrh commented on pull request #590: DISPATCH-1384 - fix unit_tests test
URL: https://github.com/apache/qpid-dispatch/pull/590
 
 
   The inlining is not happening on Linux anyways, so disabling it should affect only macOS. I could not think of other way to make tests pass with the inlining, except doing some really crazy things that would have to affect what happens during normal execution too.
   
   I have a StackOverflow question about it, btw ;)
   https://stackoverflow.com/questions/56711149/how-do-i-replace-a-function-by-a-mock-implementation-when-unit-testing-a-shared
   
   `-Wl,-export-dynamic` is Clangs equivalent of `-rdynamic` in GCC. I thought it should be used, but it does not appear to be necessary, so I am not adding that.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jdanekrh commented on issue #590: DISPATCH-1384 - fix unit_tests test
URL: https://github.com/apache/qpid-dispatch/pull/590#issuecomment-543049810
 
 
   The `-Wl,-flat_namespace` is not in conflict with sanitizers, e.g. the following is running the sanitizer just fine.
   
       $ cmake .. -DCMAKE_INSTALL_PREFIX=../../install -DUSE_TSAN=ON
       $ make
       $ ctest -R unit_tests -V
   
   ```
   9: 2019-10-17 09:39:52.994660 +0200 DEFAULT (notice) configured pattern '.#.*.policy' optimized and re-written to '.*.#.policy'
   9: ==================
   9: WARNING: ThreadSanitizer: data race (pid=3930)
   9:   Read of size 1 at 0x7b6400014a20 by thread T1 (mutexes: write M309):
   9:   * #0 router_core_thread router_core_thread.c:148 (libqpid-dispatch.dylib:x86_64+0x5fe6d)
   9: 
   9:   Previous write of size 1 at 0x7b6400014a20 by main thread:
   9:   * #0 qdr_core_free router_core.c:103 (libqpid-dispatch.dylib:x86_64+0x5b015)
   9:     #1 qd_router_free router_node.c:1788 (libqpid-dispatch.dylib:x86_64+0x73865)
   9:     #2 qd_dispatch_free dispatch.c:360 (libqpid-dispatch.dylib:x86_64+0x15a8e)
   9:     #3 main run_unit_tests.c:67 (unit_tests:x86_64+0x100003772)
   9: 
   9:   Issue is caused by frames marked with "*".
   9: 
   9:   Location is heap block of size 1152 at 0x7b6400014a00 allocated by main thread:
   9:     #0 malloc <null>:1064000 (libclang_rt.tsan_osx_dynamic.dylib:x86_64h+0x48f1a)
   9:     #1 qdr_core router_core.c:45 (libqpid-dispatch.dylib:x86_64+0x5ac60)
   9:     #2 qd_router_setup_late router_node.c:1762 (libqpid-dispatch.dylib:x86_64+0x72c58)
   9:     #3 ffi_call_unix64 <null>:1064000 (libffi.6.dylib:x86_64+0x4913)
   9:     #4 main run_unit_tests.c:52 (unit_tests:x86_64+0x1000036d0)
   9: 
   9:   Mutex M309 (0x7b1000007c00) created at:
   9:     #0 pthread_mutex_init <null>:1063856 (libclang_rt.tsan_osx_dynamic.dylib:x86_64h+0x2b5f3)
   9:     #1 sys_mutex threading.c:42 (libqpid-dispatch.dylib:x86_64+0x31be1)
   9:     #2 qdr_core router_core.c:65 (libqpid-dispatch.dylib:x86_64+0x5ad30)
   9:     #3 qd_router_setup_late router_node.c:1762 (libqpid-dispatch.dylib:x86_64+0x72c58)
   9:     #4 ffi_call_unix64 <null>:1063856 (libffi.6.dylib:x86_64+0x4913)
   9:     #5 main run_unit_tests.c:52 (unit_tests:x86_64+0x1000036d0)
   9: 
   9:   Thread T1 (tid=20228, running) created by main thread at:
   9:     #0 pthread_create <null>:1064048 (libclang_rt.tsan_osx_dynamic.dylib:x86_64h+0x2a72d)
   9:     #1 sys_thread threading.c:158 (libqpid-dispatch.dylib:x86_64+0x32035)
   9:     #2 qdr_core router_core.c:82 (libqpid-dispatch.dylib:x86_64+0x5adf6)
   9:     #3 qd_router_setup_late router_node.c:1762 (libqpid-dispatch.dylib:x86_64+0x72c58)
   9:     #4 ffi_call_unix64 <null>:1064048 (libffi.6.dylib:x86_64+0x4913)
   9:     #5 main run_unit_tests.c:52 (unit_tests:x86_64+0x1000036d0)
   9: 
   9: SUMMARY: ThreadSanitizer: data race router_core_thread.c:148 in router_core_thread
   9: ==================
   ```
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jdanekrh commented on pull request #591: DISPATCH-1384 - Fix assert in system_tests_bad_configuration
URL: https://github.com/apache/qpid-dispatch/pull/591
 
 
   The expected Linux error is
   
       2019-10-17 10:14:09.319632 +0200 SERVER (info) [C1] Connection to unresolvable.host.name:amqp failed: proton:io Name or service not known - connect to  unresolvable.host.name:5672 (../src/server.c:974)
   
   The expected macOS error is
   
       2019-06-21 21:00:34.125714 -0700 SERVER (info) [C4] Connection to unresolvable.host.name:amqp failed: proton:io unknown node or service - on connect resolving unresolvable.host.name:5672 (/Users/cloud-user/projects/qpid-dispatch/src/server.c:965)
   
   The macOS error did not match the Linux specific regex used before.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jdanekrh commented on issue #590: DISPATCH-1384 - Fix unit_tests
URL: https://github.com/apache/qpid-dispatch/pull/590#issuecomment-543075142
 
 
   "**79% tests passed**, 13 tests failed out of 61"
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jdanekrh commented on issue #591: DISPATCH-1384 - Fix assert in system_tests_bad_configuration
URL: https://github.com/apache/qpid-dispatch/pull/591#issuecomment-543076154
 
 
   "**79% tests passed**, 13 tests failed out of 61"
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


kgiusti commented on pull request #590: DISPATCH-1384 - Fix unit_tests
URL: https://github.com/apache/qpid-dispatch/pull/590#discussion_r336044898
 
 

 ##########
 File path: CMakeLists.txt
 ##########
 @@ -191,9 +191,13 @@ if (CMAKE_C_COMPILER_ID MATCHES "Clang")
   add_compile_options(-Wno-gnu-statement-expression)
 endif()
 
-if (NOT (APPLE OR USE_SANITIZERS OR USE_TSAN))
+if (APPLE)
 
 Review comment:
   Just a head's up - I'm refactoring the way we enable TSAN in cmake to follow the model used by proton. 
   See [DISPATCH-1450](https://issues.apache.org/jira/browse/DISPATCH-1450)
   
   I'll be creating a pull request for DISPATCH-1450 in the next day or so.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jdanekrh commented on pull request #590: DISPATCH-1384 - Fix unit_tests
URL: https://github.com/apache/qpid-dispatch/pull/590#discussion_r336064713
 
 

 ##########
 File path: CMakeLists.txt
 ##########
 @@ -191,9 +191,13 @@ if (CMAKE_C_COMPILER_ID MATCHES "Clang")
   add_compile_options(-Wno-gnu-statement-expression)
 endif()
 
-if (NOT (APPLE OR USE_SANITIZERS OR USE_TSAN))
+if (APPLE)
 
 Review comment:
   Thanks for the head's up. Would you be OK if this gets merged before you get done? For APPLE, the important thing is never to set `"-Wl,-z,defs"`, because then the compile fails. No other considerations I know about, so far.
   
   Btw, there is apparently special automagical setting to enable sanitizers with XCODE
   
   ```
   cmake_minimum_required(VERSION 3.13)
   set(CMAKE_XCODE_GENERATE_SCHEME ON)
   set(CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER ON)
   set(CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN ON)
   ```
   
   https://stackoverflow.com/questions/44320465/whats-the-proper-way-to-enable-addresssanitizer-in-cmake-that-works-in-xcode
   
   Probably something that can be safely ignored for now.
   
   I was wondering if "modern" CMake has special support for Valgrind, and so on, but I found nothing. It has e.g. support for cppcheck, though, https://cmake.org/cmake/help/v3.10/prop_tgt/LANG_CPPCHECK.html
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


kgiusti commented on pull request #590: DISPATCH-1384 - Fix unit_tests
URL: https://github.com/apache/qpid-dispatch/pull/590#discussion_r336079605
 
 

 ##########
 File path: CMakeLists.txt
 ##########
 @@ -191,9 +191,13 @@ if (CMAKE_C_COMPILER_ID MATCHES "Clang")
   add_compile_options(-Wno-gnu-statement-expression)
 endif()
 
-if (NOT (APPLE OR USE_SANITIZERS OR USE_TSAN))
+if (APPLE)
 
 Review comment:
   yep, np.  I'll hold off until this patch lands.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jdanekrh commented on issue #591: DISPATCH-1384 - Fix assert in system_tests_bad_configuration
URL: https://github.com/apache/qpid-dispatch/pull/591#issuecomment-543301645
 
 
   There should not be anything "controversial" about this, and I've checked that the test is capable of failing (always concern when touching existing tests), so I'll just merge this. Thanks for review.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jdanekrh commented on pull request #591: DISPATCH-1384 - Fix assert in system_tests_bad_configuration
URL: https://github.com/apache/qpid-dispatch/pull/591
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


Commit ccf49e52c36aafc47452f8b1cd65ef89b92581bb in qpid-dispatch's branch refs/heads/master from Jiri Danek
[ https://gitbox.apache.org/repos/asf?p=qpid-dispatch.git;h=ccf49e5 ]

DISPATCH-1384 - Fix assert in system_tests_bad_configuration

The expected Linux error is

    2019-10-17 10:14:09.319632 +0200 SERVER (info) [C1] Connection to unresolvable.host.name:amqp failed: proton:io Name or service not known - connect to  unresolvable.host.name:5672 (../src/server.c:974)

The expected macOS error is

    2019-06-21 21:00:34.125714 -0700 SERVER (info) [C4] Connection to unresolvable.host.name:amqp failed: proton:io unknown node or service - on connect resolving unresolvable.host.name:5672 (/Users/cloud-user/projects/qpid-dispatch/src/server.c:965)

The macOS error did not match the Linux specific regex used before.


jdanekrh commented on pull request #590: DISPATCH-1384 - Fix unit_tests
URL: https://github.com/apache/qpid-dispatch/pull/590
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


Commit f81b834769d9426679183b498a7b3e0162bc8fed in qpid-dispatch's branch refs/heads/master from Jiri Danek
[ https://gitbox.apache.org/repos/asf?p=qpid-dispatch.git;h=f81b834 ]

DISPATCH-1384 - Disable inlining of functions that are mocked in unit_tests

The timer_test.c relies on being able to provide its own dummy versions
of `qd_timer_now` and `qd_server_timeout`. That is not possible if these
functions are inlined in the .dynlib. Clang on macOS inlines them,
GCC on Linux doesn't (that's why the tests pass on Linux)


Commit 1c7203b2518e343bb4c5d774a2a7179555ef2793 in qpid-dispatch's branch refs/heads/master from Jiri Danek
[ https://gitbox.apache.org/repos/asf?p=qpid-dispatch.git;h=1c7203b ]

DISPATCH-1384 - Enable flat namespace on macOS

-flat_namespace overrides macOS default of -two_levelnamespace,
to make the behavior more like Linux; also should compensate for lack
of -Wl,-z,defs on macOS.


jdanekrh commented on pull request #590: DISPATCH-1384 - Fix unit_tests
URL: https://github.com/apache/qpid-dispatch/pull/590#discussion_r336318656
 
 

 ##########
 File path: CMakeLists.txt
 ##########
 @@ -191,9 +191,13 @@ if (CMAKE_C_COMPILER_ID MATCHES "Clang")
   add_compile_options(-Wno-gnu-statement-expression)
 endif()
 
-if (NOT (APPLE OR USE_SANITIZERS OR USE_TSAN))
+if (APPLE)
 
 Review comment:
   I'll consider comment https://github.com/jdanekrh/qpid-dispatch/commit/4c07a4d9f5e0bf6c12a3d5661f86adc6390b432a#r35553494 as sufficient review and merge this.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


Any kind of SASL exchange in tests ends with crash, due to PROTON-2122. The problem is that MacPorts version of cyrus-sasl2 enables every possible auth mechanism.

Some tests fail due to utf8 encoding errors. The reason seems to be that proton produces invalid utf8 that dispatch then prints into trace logs

{noformat}
2019-10-18 21:36:27.130001 -0700 SERVER (trace) [3]:0 -> @transfer(20) [handle=0, delivery-id=0, delivery-tag=b"\x00\x00\x00\x00\x00\x00\x00\x00", message-format=0, settled=true] (228) "\x00Sp<D0>\x00\x00\x00\x05\x00\x00\x00\x01B\x00Sr<D1>\x00\x00\x00U\x00\x00\x00\x08<A3>\x0ex-opt-qd.trace<D0>\x00\x00\x00\x09\x00\x00\x00\x01<A1>\x030/A<A3>\x10x-opt-qd.ingress<A1>\x030/A<A3>\x09x-opt-qd.<A1>\x01X<A3>\x09x-opt-qd.<A1>\x01X\x00Ss<D0>\x00\x00\x00\x1f\x00\x00\x00\x06@@<A1>\x14amqp:/_local/qdhello@@@\x00St<D1>\x00\x00\x00\x13\x00\x00\x00\x02<A1>\x06opcode<A1>\x05HELLO\x00Sw<D1>\x00\x00\x000\x00\x00\x00\x0a<A1>\x02id
<A1>\x01A<A1>\x02pvT\x01<A1>\x04area<A1>\x010<A1>\x08instanceq]<AA>\x92<CA><A1>\x04seenE" (/Users/cloud-user/repos/qpid/qpid-dispatch/src/server.c:107)
2019-10-18 21:36:27.130080 -0700 ROUTER (debug) Delivery decref:    dlv:7f9bc35a6d84 rc:2 removed reference from pn_delivery (/Users/cloud-user/repos/qpid/qpid-dispatch/src/router_core/delivery.c:134)
2019-10-18 21:36:27.130126 -0700 ROUTER (debug) Delivery decref:    dlv:7f9bc35a6d84 rc:1 qdr_link_process_deliveries - remove from undelivered list (/Users/cloud-user/repos/qpid/qpid-dispatch/src/router_core/delivery.c:134)
2019-10-18 21:36:27.130152 -0700 ROUTER (debug) Delivery decref:    dlv:7f9bc35a6d84 rc:0 qdr_link_process_deliveries - release local reference - done processing (/Users/cloud-user/repos/qpid/qpid-dispatch/src/router_core/delivery.c:134)
2019-10-18 21:36:27.130321 -0700 ROUTER_LS (trace) SENT: RA(id=A pv=1 area=0 inst=1571459786 ls_seq=0 mobile_seq=0) (/Users/cloud-user/repos/qpid/qpid-dispatch/python/qpid_dispatch_internal/router/link.py:87)
2019-10-18 21:36:27.130371 -0700 ROUTER (trace) Core action 'link_flow' (/Users/cloud-user/repos/qpid/qpid-dispatch/src/router_core/router_core_thread.c:165)
{noformat}

Notice all the unescaped bytes {{ea<A1>\x010<A1>\x08instanceq]<AA>\x9}}.

This is from file /build/tests/system_test.dir/system_tests_topology_disposition/TopologyDispositionTests/setUpClass/A.log

{noformat}
test 43
      Start 43: system_tests_topology_disposition

43: Test command: /Users/cloud-user/repos/qpid/py3venv/bin/python "/Users/cloud-user/repos/qpid/qpid-dispatch/build/tests/run.py" "-m" "unittest" "-v" "system_tests_topology_disposition"
43: Test timeout computed to be: 360
43: test_01_delete_spurious_connector (system_tests_topology_disposition.TopologyDispositionTests) ... ok
43: test_02_topology_disposition (system_tests_topology_disposition.TopologyDispositionTests) ... ok
43: test_03_connection_id_propagation (system_tests_topology_disposition.TopologyDispositionTests) ... ERROR
43: test_04_scraper_tool (system_tests_topology_disposition.TopologyDispositionTests) ... FAIL
43: 
43: ======================================================================
43: ERROR: test_03_connection_id_propagation (system_tests_topology_disposition.TopologyDispositionTests)
43: ----------------------------------------------------------------------
43: Traceback (most recent call last):
43:   File "/Users/cloud-user/repos/qpid/qpid-dispatch/tests/system_tests_topology_disposition.py", line 413, in test_03_connection_id_propagation
43:     log_lines = router_log.read().split("\n")
43:   File "/opt/local/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/codecs.py", line 322, in decode
43:     (result, consumed) = self._buffer_decode(data, self.errors, final)
43: UnicodeDecodeError: 'utf-8' codec can't decode byte 0xd0 in position 119628: invalid continuation byte
43: 
43: ======================================================================
43: FAIL: test_04_scraper_tool (system_tests_topology_disposition.TopologyDispositionTests)
43: ----------------------------------------------------------------------
43: Traceback (most recent call last):
43:   File "/Users/cloud-user/repos/qpid/qpid-dispatch/tests/system_tests_topology_disposition.py", line 459, in test_04_scraper_tool
43:     self.assertEqual ( None, error )
43: AssertionError: None != 'Process 45449 error: exit code 1, expect[352 chars]<<<<'
43: 
43: ----------------------------------------------------------------------
43: Ran 4 tests in 15.860s
43: 
43: FAILED (failures=1, errors=1)
43/60 Test #43: system_tests_topology_disposition .................***Failed   16.10 sec
{noformat}

I can reproduce the utf-8 issue:

Use config for the system_tests_topology_disposition test
  
{noformat}
$ cd /Applications/CLion.app/Contents/bin/system_test.dir/system_tests_topology_disposition/TopologyDispositionTests/setUpClass
{noformat}
When running normally (with routers B, C, and D present, so that router A has somebody to talk to)
{noformat}
$ /Users/cloud-user/repos/qpid/py3venv/bin/python "/Users/cloud-user/repos/qpid/qpid-dispatch/build/tests/run.py" -x qdrouterd -c A.conf -I /Users/cloud-user/repos/qpid/qpid-dispatch/python
$ less A.log

2019-10-21 01:46:38.790093 -0700 SERVER (trace) [3]:0 <- @transfer(20) [handle=1, delivery-id=0, delivery-tag=bhugahugahugacaka"\x01\x00\x00\x00\x00\x00\x00\x00", message-format=0, settled=true] (228) "\x00Sp<D0>\x00\x00\x00\x05\x00\x00\x00\x01B\x00Sr<D1>\x00\x00\x00U\x00\x00\x00\x08<A3>\x0ex-opt-qd.trace<D0>\x00\x00\x00\x09\x00\x00\x00\x01<A1>\x030/B<A3>\x10x-opt-qd.ingress<A1>\x030/B<A3>\x09x-opt-qd.<A1>\x01X<A3>\x09x-opt-qd.<A1>\x01X\x00Ss<D0>\x00\x00\x00\x1f\x00\x00\x00\x06@@<A1>\x14amqp:/_local/qdhello@@@\x00St<D1>\x00\x00\x00\x13\x00\x00\x00\x02<A1>\x06opcode<A1>\x05HELLO\x00Sw<D1>\x00\x00\x000\x00\x00\x00\x0a<A1>\x02id<A1>\x01B<A1>\x02pvT\x01<A1>\x04area<A1>\x010<A1>\x08instanceq]<AD>pm<A1>\x04seenE" (/Users/cloud-user/repos/qpid/qpid-dispatch/src/server.c:107)
{noformat}
If I run router A directly from command line, not under run.py, it prints normally.
{noformat}
$ qdrouterd -c A.conf -I /Users/cloud-user/repos/qpid/qpid-dispatch/python
$ less A.log
2019-10-21 01:56:59.357946 -0700 SERVER (trace) [1]:0 <- @transfer(20) [handle=1, delivery-id=0, delivery-tag=bhugahugahugacaka"\xa4\x04\x00\x00\x00\x00\x00\x00", message-format=0, settled=true] (228) "\x00Sp\xd0\x00\x00\x00\x05\x00\x00\x00\x01B\x00Sr\xd1\x00\x00\x00U\x00\x00\x00\x08\xa3\x0ex-opt-qd.trace\xd0\x00\x00\x00\x09\x00\x00\x00\x01\xa1\x030/D\xa3\x10x-opt-qd.ingress\xa1\x030/D\xa3\x09x-opt-qd.\xa1\x01X\xa3\x09x-opt-qd.\xa1\x01X\x00Ss\xd0\x00\x00\x00\x1f\x00\x00\x00\x06@@\xa1\x14amqp:/_local/qdhello@@@\x00St\xd1\x00\x00\x00\x13\x00\x00\x00\x02\xa1\x06opcode\xa1\x05HELLO\x00Sw\xd1\x00\x00\x000\x00\x00\x00\x0a\xa1\x02id\xa1\x01D\xa1\x02pvT\x01\xa1\x04area\xa1\x010\xa1\x08instanceq]\xadps\xa1\x04seenE" (/Users/cloud-user/repos/qpid/qpid-dispatch/src/server.c:107)
{noformat}
(Please ignore "bhugahugahugacaka", I put it into proton when looking for log statement.)

I still don't know whats the problematic thing run.py does. It is _not_ about locales, because that does not change
{noformat}
(py3venv) Clouds-iMac:setUpClass cloud-user$ /Users/cloud-user/repos/qpid/py3venv/bin/python "/Users/cloud-user/repos/qpid/qpid-dispatch/build/tests/run.py" -x python -c 'import subprocess; print(subprocess.check_output("locale"))'
b'LANG=\nLC_COLLATE="C"\nLC_CTYPE="UTF-8"\nLC_MESSAGES="C"\nLC_MONETARY="C"\nLC_NUMERIC="C"\nLC_TIME="C"\nLC_ALL=\n'

(py3venv) Clouds-iMac:setUpClass cloud-user$ python -c 'import subprocess; print(subprocess.check_output("locale"))'
b'LANG=\nLC_COLLATE="C"\nLC_CTYPE="UTF-8"\nLC_MESSAGES="C"\nLC_MONETARY="C"\nLC_NUMERIC="C"\nLC_TIME="C"\nLC_ALL=\n'
{noformat}

I tried a few things and I came to conclusion that I don't understand what's breaking isprint(). I could not create a standalone reproducer for this behavior, I could only see it when running qdrouterd, either started by the run.py, or also in clion debugger. Regarding solution, the following change in Proton fixes the affected tests, but I don't really know what exactly I am fixing.

{noformat}
diff --git a/c/src/core/util.c b/c/src/core/util.c
index 39bea4d9..7f389770 100644
--- a/c/src/core/util.c
+++ b/c/src/core/util.c
@@ -38,7 +38,7 @@ ssize_t pn_quote_data(char *dst, size_t capacity, const char *src, size_t size)
   for (unsigned i = 0; i < size; i++)
   {
     uint8_t c = src[i];
-    if (isprint(c)) {
+    if (c < 128 && isprint(c)) {
       if (idx < (int) (capacity - 1)) {
         dst[idx++] = c;
       } else {
{noformat}

With that, I can get the following result on my machine

{noformat}
97% tests passed, 2 tests failed out of 60

Total Test time (real) = 1340.29 sec

The following tests FAILED:
         41 - system_tests_delivery_abort (Failed)
         51 - system_tests_edge_router (Timeout)
{noformat}

{noformat}
test 41
      Start 41: system_tests_delivery_abort

41: Test command: /Users/cloud-user/repos/qpid/py3venv/bin/python "/Users/cloud-user/repos/qpid/qpid-dispatch/build/tests/run.py" "-m" "unittest" "-v" "system_tests_delivery_abort"
41: Test timeout computed to be: 360
41: test_01_message_route_truncated_one_router (system_tests_delivery_abort.RouterTest) ... ok
41: test_02_message_route_truncated_two_routers (system_tests_delivery_abort.RouterTest) ... ok
41: test_03_link_route_truncated_one_router (system_tests_delivery_abort.RouterTest) ... ok
41: test_04_link_route_truncated_two_routers (system_tests_delivery_abort.RouterTest) ... ok
41: test_05_message_route_abort_one_router (system_tests_delivery_abort.RouterTest) ... ok
41: test_06_message_route_abort_two_routers (system_tests_delivery_abort.RouterTest) ... FAIL
41: test_07_multicast_truncate_one_router (system_tests_delivery_abort.RouterTest) ... ok
41: 
41: ======================================================================
41: FAIL: test_06_message_route_abort_two_routers (system_tests_delivery_abort.RouterTest)
41: ----------------------------------------------------------------------
41: Traceback (most recent call last):
41:   File "/Users/cloud-user/repos/qpid/qpid-dispatch/tests/system_tests_delivery_abort.py", line 118, in test_06_message_route_abort_two_routers
41:     self.assertEqual(None, test.error)
41: AssertionError: None != 'Timeout Expired - Unprocessed Ops: [], R[37 chars]000]'
41: 
41: ----------------------------------------------------------------------
41: Ran 7 tests in 14.909s
41: 
41: FAILED (failures=1)
41/60 Test #41: system_tests_delivery_abort .......................***Failed   15.16 sec
{noformat}

[~jdanek] In taking a look at isprint I realized that the real change here is that you are letting sprintf handle the non 7-bit [ASCII values|http://www.asciitable.com] with the c < 128 change. Those would likely be impacted by encoding and locale, although I'm not 100% sure that's relevant other than the fact that via sprintf a format is provided rather than trying to shoehorn the value directly into a char array.

While there is likely a more elegant way of handling the situation, this may be enough for now. I'll see about getting a chance to take a closer look. 

With PROTON-2122 workarounded and PROTON-2123 fixed, Travis now gives

https://travis-ci.org/apache/qpid-dispatch/jobs/601461641

{noformat}
95% tests passed, 3 tests failed out of 62
Total Test time (real) = 1374.97 sec
The following tests FAILED:
	 51 - system_tests_edge_router (Failed)
	 54 - system_tests_http (Failed)
	 60 - system_tests_multicast (Failed)
Errors while running CTest
{noformat}

I'm nominating this Jira to the Red Hat Open Source Contest task list for Spring 2020. If everything goes well, there should be a volunteer working on this with me starting early March.

https://research.redhat.com/red-hat-open-source-contest/

Still no volunteers as of yet. I'll try to finish it myself today or tomorrow. The documentation writing part of the contest task would still be available, even of I manage to fix the tests in this issue 

Tests on macOS in Travis started dying with

    bq. The job exceeded the maximum time limit for jobs, and has been terminated.

There is 220 s spent on installing MacPorts and 1140 s on installing software with MacPorts. Installing software takes so long because some packages are compiled from source. This can be fixed by caching the built packages, or by switching to macOS Mojave for which MacPorts holds prebuilt packages in a repository. See http://packages.macports.org/cmake/ (Mojave is darwin_18, currently Travis runs darwin_17 (High Sierra) which does not have many prebuilt packages.)

Caching or using 10.14 seems reasonable. You could also look to GitHub Actions for its 6 hour job limit and 10.15 envs.

jiridanek commented on pull request #701: DISPATCH-1384 Speed up .travis.yml by skipping unittest2 and caching MacPorts
URL: https://github.com/apache/qpid-dispatch/pull/701
 
 
   With xcode11, I saw 250s to install macports and 120s to install the ports. Much better than before.
   
   I did not figure out how to encourage macports to use cached /opt/local/var/macports/software dir.
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jiridanek commented on pull request #701: DISPATCH-1384 Speed up .travis.yml by skipping unittest2 and using xcode11 with MacPorts
URL: https://github.com/apache/qpid-dispatch/pull/701
 
 
   
 
----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


In the recent Travis builds of master, there was one passing run on macOS. I saw a pass once as well, on my own Travis account.

Here is the first and last builds of the 10 builds of master I looked at
 * [https://travis-ci.org/github/apache/qpid-dispatch/jobs/661621117]
 * [https://travis-ci.org/github/apache/qpid-dispatch/jobs/662121449]

This means to me that the tests are essentially fine on macOS, there are just flaky failiures, with the possible exception of {{system_tests_multicast}} which fails with high probability. I am going to close this issue as done and open another, about deflaking the tests.

Before I do that, I am considering writing to mailing list about interest in macOS support, just to possibly reevaluate if this work is meaningful or not.

Tests and their [failure counts]

 * 14 - system_tests_link_routes [2x]
 * 20 - system_tests_one_router [2x]
 * 34 - system_tests_distribution [1x]
 * 42 - system_tests_topology [2x]
 * 51 - system_tests_edge_router [2x]
 * 59 - system_tests_multicast [8x]

There was one infra fail when downloading MacPorts. The job did not run any tests.

The successful test run is [https://travis-ci.org/github/apache/qpid-dispatch/jobs/662087233] and (on my Travis) also [https://travis-ci.org/github/jiridanek/qpid-dispatch/builds/661506436].

