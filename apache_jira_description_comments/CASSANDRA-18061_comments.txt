PR : https://github.com/apache/cassandra/pull/2047
java8 precommit :https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/344/workflows/6eb8544f-d31e-45e1-a3a1-838579e32077
java11 precommit :https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/344/workflows/3a206631-1dac-496a-b0e1-5e59edf5cb02

hi [~brandonwilliams][~blambov] 
can you help to look at this little patch ?:D

I don't have time to commit to a full review right now but I started a CI run that can cover dtests: [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/2105/badge/icon!|https://ci-cassandra.apache.org/blue/organizations/jenkins/Cassandra-devbranch/detail/Cassandra-devbranch/2105/pipeline]

and if you mark this patch available it will signal to committers it is ready to be looked at.


this failed test is suspicious https://ci-cassandra.apache.org/job/Cassandra-devbranch/2105/testReport/junit/org.apache.cassandra.distributed.upgrade/CompactionHistorySystemTableUpgradeTest/compactionHistorySystemTableTest/

Thanks [~brandon.williams] and [~smiklosovic]
and I have update the patch agagin [~smiklosovic], would mind rerun this CI  to cover dtests? it seems all unit test have passed. 

https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2108/

[~maxwellguo] I put more commets to PR. Please check. Thank you.

[~smiklosovic]Thank you for your commets, I have modify the code  and leave a commet reply on the PR. :D

[~maxwellguo] I have fixed more things in this commit (1). Please include that commit into your branch.

Some tests are failing in CompactionHistoryTest because you do not check the result of `anyMatch` in compactionHistoryResultVerify method. When I check that it returns true, it fails. Please fix these tests. 

Thank you.

(1) https://github.com/instaclustr/cassandra/commit/e4f5c2adfa89c5431a05bf8836975c87eb70023c

[~smiklosovic] Thank you for your review. I have modified all the comments. 
https://github.com/apache/cassandra/pull/2047/commits

I have run this branch of mine (1) where I put some additional commit and squashed all previous commits.

The upgrade test is failing here (2), for example:

{code}
junit.framework.AssertionFailedError: Error in test '4.0.8 -> [4.2]' while upgrading to '4.2'; successful upgrades []
	at org.apache.cassandra.distributed.upgrade.UpgradeTestBase$TestCase.run(UpgradeTestBase.java:348)
	at org.apache.cassandra.distributed.upgrade.CompactionHistorySystemTableUpgradeTest.compactionHistorySystemTableTest(CompactionHistorySystemTableUpgradeTest.java:74)
Caused by: org.apache.cassandra.exceptions.InvalidRequestException: Undefined column name compaction_type in table system.compaction_history
	at org.apache.cassandra.schema.TableMetadata.getExistingColumn(TableMetadata.java:372)
	at org.apache.cassandra.cql3.selection.Selectable$RawIdentifier.prepare(Selectable.java:1219)
	at org.apache.cassandra.cql3.selection.Selectable$RawIdentifier.prepare(Selectable.java:1188)
	at org.apache.cassandra.cql3.selection.RawSelector.prepare(RawSelector.java:53)
	at org.apache.cassandra.cql3.selection.RawSelector.lambda$toSelectables$0(RawSelector.java:48)
	at com.google.common.collect.Lists$TransformingRandomAccessList.get(Lists.java:603)
	at org.apache.cassandra.cql3.selection.SelectorFactories.<init>(SelectorFactories.java:94)
	at org.apache.cassandra.cql3.selection.SelectorFactories.createFactoriesAndCollectColumnDefinitions(SelectorFactories.java:80)
	at org.apache.cassandra.cql3.selection.Selection.fromSelectors(Selection.java:181)
	at org.apache.cassandra.cql3.statements.SelectStatement$RawStatement.prepareSelection(SelectStatement.java:1007)
	at org.apache.cassandra.cql3.statements.SelectStatement$RawStatement.prepare(SelectStatement.java:946)
	at org.apache.cassandra.cql3.statements.SelectStatement$RawStatement.prepare(SelectStatement.java:928)
	at org.apache.cassandra.cql3.statements.SelectStatement$RawStatement.prepare(SelectStatement.java:903)
	at org.apache.cassandra.cql3.QueryProcessor.getStatement(QueryProcessor.java:756)
	at org.apache.cassandra.distributed.impl.Coordinator.executeInternal(Coordinator.java:91)
	at org.apache.cassandra.distributed.impl.Coordinator.lambda$executeWithResult$0(Coordinator.java:65)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.lang.Thread.run(Thread.java:750)
{code}

Otherwise the build looks quite fine (3), Java 11 build is all green (4)

(1) https://github.com/instaclustr/cassandra/commits/CASSANDRA-18061
(2) https://app.circleci.com/pipelines/github/instaclustr/cassandra/1673/workflows/57b04087-a629-4049-a9e7-cd755785df8a/jobs/8115/tests
(3) https://app.circleci.com/pipelines/github/instaclustr/cassandra/1673/workflows/57b04087-a629-4049-a9e7-cd755785df8a
(4) https://app.circleci.com/pipelines/github/instaclustr/cassandra/1673/workflows/b34ad3b7-cbb5-4eb7-908d-98dc1b8d3c5d

[~smiklosovic]Thanks very much.
Sorry for offline these days , I think what I did was inappropriate ,next time I should contact you after modifying the code and passing the test,not immediately after the modification.
I have already fix the exception what occurs at java-jvm-dtest.
My ci test is ok at this test case in  upgrade tests  for java8 preommit :https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/355/workflows/5e9a984a-3dd1-43a3-8347-832918a0f1c1
commit pr: https://github.com/apache/cassandra/pull/2047/commits

[~maxwellguo] ,

the problem I see with that failing test I mentioned in my last reply is that we are trying to upgrade from 4.0 to 4.2 and it fails. What you did is that you changed it in such a way that you are upgrading from 4.1. I do not think this is the fix.

I believe we have to be able to upgrade straight from 4.0 to 4.2 (or to 5.0 if 4.2 will be eventually called like that).

The reason that test fails is that after upgrade, 4.x node tries to read / write to system.compaction_history table from / to column called "compaction_type" but schemas from 4.0 do not have that column yet. 

There is this class (1) which _migrates_ system schemas from older to newer schema (whatever that means) by creating _v2 tables and copying all data there (and optionally modifying it).

I think that we should do something similar here so we would have a table called "system.compaction_history_v2" with this new column and all interaction would be done with it.

However, I am not completely sure if we want to introduce new compaction_history_v2 table into system keyspace just to be able to see compaction types.

I am summoning the heavyweights to know their opinion on this: [~brandon.williams]  [~mck]. Am I correct we need to support 4.0 -> 5.0 upgrade so we need to migrate compaction_history to a new table?

I am not completely sure what "to upgrade" means in this context.

EDIT: I see that system.compaction_history is present in 3.0 already so if somebody upgrades from 3.0 to 4.2, he will hit that issue.

On the other hand, it does not migrate _all_ tables so it seems to me like it counts on the fact that system keyspace is completely wiped out prior upgrade except the tables it specifically migrates? So in that case we should be safe to have a test which upgrades just from 4.1 up?

Thanks

[https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/db/SystemKeyspaceMigrator41.java]

bq.  Am I correct we need to support 4.0 -> 5.0 upgrade

I think that is something we would like to have, yes.

v40 and v41 are all ok , I add both of them now, both 40 and 41 to upgrade to 42 will be test ,and the jvm-dtest seems green now.
pr : https://github.com/apache/cassandra/pull/2047/commits
java8 precommit : https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/361/workflows/ff85f81b-6100-43fa-b897-75a6ee17fd5e
For me I think we do not need a compaction_history_v2 for the compaction_type is a newly added column and when people upgrade from lower version to some version that added the compaction_type existed syystem table , the column data is null and an UN_KNOW flag will return if the column added is finally used。
I have check the table described in 
https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/db/SystemKeyspaceMigrator41.java
It seems that all of the schema (primary key or column name) have changed . So if upgrade from lower version I think the data must be migrated. for LEGACY_PEERS/PEER_EVENTS_V2/TABLE_ESTIMATES/SSTABLE_ACTIVITY_V2 primary key is changed. FOR AVAILABLE_RANGES_V2 column name is changed. 
But compaction_type is only a newly added column and the primary key nor cluster name is not change. The original data can be read , and 
The new compaction_type column that have no data will return UN_KNOW(I have just test in my own cluster.)
Besides for system schema PAXOS_REPAIR_HISTORY I saw it is add in Cassandra-4.1 but none SystemKeyspaceMigrator41 is needed 
and for [CASSANDRA-10857|https://issues.apache.org/jira/browse/CASSANDRA-10857] a new column "value" is also added for "IndexInfo" system table [code line 142 SystemKeyspace.java |https://github.com/apache/cassandra/commit/07fbd8ee6042797aaade90357d625ba9d79c31e0#diff-f57518f964c71328146aeca95be5e697ca81a77261719eeef4dd4b1ed8daf63bR142] and none SystemKeyspaceMigrator41 is needed too, patched by [~ifesdjeen]
So it seem no SystemKeyspaceMigrator41 is needed for a newly added column .

Also I think this is a little patch , and tt doesn't even matter.So I am ok if we just set the Status to "wan't fix" :)


bq. Am I correct we need to support 4.0 -> 5.0 upgrade so we need to migrate compaction_history to a new table?

Yes. All `(N-1).x.y` to `N.xx.yy` upgrade paths must be supported.

That also means that if the patch doesn't support upgrades from 3.x it cannot be committed while build.xml is at 4.2
(you would then change the fixVersion to 5.x and wait til build.xml is bumped, or enhance the patch to support 3.x upgrades)

Thanks [~smiklosovic]  , New test with 3.x was update now . and java8 precommit jvm-upgrade-dtest is green : https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/362/workflows/e9b6a349-3d7d-4b50-9018-e407e584be8f
commit change :  https://github.com/apache/cassandra/pull/2047/files#diff-ad515f26e664fe1525daf7c6388fe1a66a853bd389c350cd39c76aed8e121d43R47

And I check the git history of SystemKeyspace.java , some system table also add new regular column (not primary key).,But SystemKeyspaceMigrator is not added . But if the system column type change I think SystemKeyspaceMigiration is still need,For this case Only a new column is added , and if the column is selected and null is returned ,and for nodetool compactionhistory if older version do not have this column , UNKNOW will return ,I think the backward compatibility has been done. And the ut test/distributed/org/apache/cassandra/distributed/upgrade/CompactionHistorySystemTableUpgradeTest.java
Have already test the case of the backward compatibility
[~brandon.williams][~mck]

[~jlewandowski] I saw  SystemKeyspaceMigrator41 was added by you . And it seems [~aweisberg] have add many columns to system keyspace tables . So can you help with this too ? I just add a new regular column to compaction_history system table.
So should it doing some migration for system keyspace data just like some system keyspace in SystemKeyspaceMigrator41 ?I think there is no need but should handle backward compatibility

thanks [~maxwellguo] I will check it again.

Hey, I've commented on the ticket. Some idea you may consider - maybe the new column should be a map<string, string> so that we can store more compaction properties without changing the table structure in the future.

Thanks [~jlewandowski] , [~smiklosovic] can you help to see the comments ?
[~jlewandowski]after read your comment , My question is , it seems that every time we modify the system table(I mean just add some columns) , a SystemKeyspaceMigrator will need to add the modified table . But there is so much system table, so some times a column is added , a V2 table should be created and doing some migrate.There may be V2 /V3 /V4 ，so much verisions plus the huge number of system table, there will be much system table in the process....
In SystemKeyspaceMigrator41  I saw that only the schema changed (primary key is changed), then a migrate will be added. 
[~brandon.williams] can you help to give some advice on this too ? Thank you .

I think  it is  a good idea  to make the newly added column  as a type of map (y)

I tested the current branch and it just works. When I create table and compact it in 3.0, I take all sstables from 3.0 (literally whole data dir) and put it into trunk or 4.1, it just starts fine (minus some irrelevant configuration). 

It is true, as [~jlewandowski] observed, that new column added in system.compaction_history is not populated (contains null) and in nodetool it is some nice string. This should be unified so we do not need checks on nullity when returning it via JMX.

[~maxwellguo] I think that what [~jlewandowski] suggested was to have same table as it was (no v2) but it would just populate that table with default "Unknown compaction type" when there is null for such row. 

[~jlewandowski] do I understand it right there should not be any table renaming to v2? Otherwise I think we are already violating this logic of migrating every time we introduced a new column into some system table and it was not reflected by migrator.

Indeed, I do not think that we need a new table. A new table is probably needed if we change the structure in a way that we modify some type or remove a column. Though adding is fine without adding a new table.

And yes, I meant adding that new column as a part of system migrator work and populating it there so that we do not deal with various versions in the rest of the system

Great, thanks for the confirmation. So two things are remaining:

1) change type of column to map<string, string>
2) populate null values for compaction_type column with default value 

When type is changed to map, the default should be a map with one entry - key is "compaction_type" and value is "Unknown compaction type" (whatever is the value of OperationType.UNKNOWN.type)

For output of nodetool - it is questionable how to return this map in it. I would say we would just read what the value of "compaction_type" entry in that map is but it should be way nicer as we do not need any null checks anymore.

Just one nit - the default value in this case would be rather an empty map, wdyt?

what would be displayed in nodetool compactionhistory then? The string representation of an empty map? OK, that might work as well. 

... which means that no additional information was stored

Hi [~jlewandowski][~smiklosovic], I adjusted part of the code , so can you help to take a look agagin? Thanks 

Hey [~maxwellguo]

We we discussing with [~jlewandowski] this improvement:

{code}
cqlsh> CREATE KEYSPACE ks WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};
cqlsh> CREATE TABLE ks.tb ( id int, compaction_properties frozen<map<text, text>>, primary KEY (id));
cqlsh> INSERT INTO ks.tb (id) VALUES ( 1);
cqlsh> select * from ks.tb ;

 id | compaction_properties
----+-----------------------
  1 |                  null

(1 rows)
cqlsh> update ks.tb SET compaction_properties = {} WHERE id = 1;
cqlsh> select * from ks.tb ;

 id | compaction_properties
----+-----------------------
  1 |                      {}

(1 rows)
cqlsh> CREATE TABLE ks.tb2 ( id int, compaction_properties map<text, text>, primary KEY (id));
cqlsh> INSERT INTO ks.tb2 (id) VALUES ( 1);
cqlsh> update ks.tb2 SET compaction_properties = {} WHERE id = 1;
cqlsh> select * from ks.tb2 ;

 id | compaction_properties
----+-----------------------
  1 |                  null

(1 rows)
{code}

Could you please change the type of compaction_properties to frozen<map<text, text>> ?

We were suggesting in above comments to have empty map inserted with no defaults in case the original value was null.

When that is done, when we migrate, we would insert empty map ({}) into compaction_properties and not map with one entry. It is very easy that way as we do not need any additional logic in CompactionHistoryProperty and I think that class can be completely removed.

Hi [~smiklosovic], that means emtyp map will return as the  nodetool compactionhistory output ? then no default value is needed?
Besides I have left one comment on the git and mention , can you take a look if you are convenient。:D

Correct, nodetool compaction history would return "{}" (string representation of empty map). So no default value is needed.

Please incorporate this work and I will review again.

Thank you!

[~smiklosovic]
I update the code .
pr:https://github.com/apache/cassandra/pull/2047/files#diff-ad515f26e664fe1525daf7c6388fe1a66a853bd389c350cd39c76aed8e121d43R47
and java-8 precommit : https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/366/workflows/532a29f6-7a1b-430d-9dd1-f46343c4a037
ut passed.

Tested and it looks good to me. I put one more commit on top of your work here (1) (just very small cleanup of the code).

(1) [https://github.com/instaclustr/cassandra/tree/CASSANDRA-18061]
(2) [https://app.circleci.com/pipelines/github/instaclustr/cassandra?branch=CASSANDRA-18061]

[~jlewandowski] could you review please? I will run the build soonish but it might be reviewed already.

which PR is the current one?

Also I already reviewed today and left some comments on the [~maxwellguo] PR

OK, his PR is fine.

[~maxwellguo] I believe we are almost done! If you address the last few comments around tests.

Thank you

 Thanks [~smiklosovic] [~jlewandowski],
I have modified  the code, 
PR:https://github.com/apache/cassandra/pull/2047/files#diff-f57518f964c71328146aeca95be5e697ca81a77261719eeef4dd4b1ed8daf63b
java8 precommit : https://app.circleci.com/pipelines/github/Maxwell-Guo/cassandra/386/workflows/91f5622b-c109-4c67-b01b-9693fa752fb7
The ut and jvm-dtest-upgrade is green.

thanks, I am +1, I am running the build. [~jlewandowski] would you mind to take a look again?

sure

[~smiklosovic][~jlewandowski] a new version has been updated.:)

+1,
[~smiklosovic] I'm ok with merging that


here is also a build with multiplexer (1) (new tests were run hundreds of times on repeat to detect possible flakiness).

https://app.circleci.com/pipelines/github/instaclustr/cassandra/1730/workflows/745efd7a-6ffb-43ab-8e2c-5e99d2fd9c98

going to merge this soon!

Thanks [~smiklosovic][~jlewandowski][~brandon.williams][~mck];)

Thank you for your contribution [~maxwellguo] !

