having a hard time fixing CQL3TypeLiteralTest as this test never tested what CQL supports, but tests against a model generated by a human... when you fix bugs in toCQLLiteral so it actually works in CQL, this test breaks... and is breaking in annoying ways... one way is that UDT does not allow NULL for a counter type, but this test makes sure we convert it to "name: null"... there have been a lot more... so will take time to fix this test... its also kinda the same as the new AbstractTypeTest.serde as it tests the same behavior, but uses CQL parsing to validate

A note on the serialization format: right now we're serializing vectors as just a sequence of the underlying subtypes.  So if we have a vector of floats of dimension 3 we just write three serialized floats one after another on the wire; there's no size information included for either the number of elements in the list or the size of any one element.  This differs from how other collections (such as lists and maps) and UDTs are handled.  In those cases we send along (a) the element size of a given collection and (b) the size of each element (included in the bytes structure).

 

Such a change isn't unreasonable, at least not for fixed size types (and perhaps the variable types as well) since hypothetically the codecs should be aware of how big a given type might be.  But that's not what, say, the Java driver does at the moment.  Let's take the example of a float type; when decoding a ByteBuffer expected to contain an instance of this type we expect that ByteBuffer to contain precisely four bytes.  The assumption is that something upstream has pulled off exactly the expected number of bytes from some larger ByteBuffer.

 

I certainly can take steps to expose the expected number of bytes for a given codec.  But it did seem worthwhile to highlight the difference and make sure that this difference in serialization formats represents an explicit choice.

bq. But it did seem worthwhile to highlight the difference and make sure that this difference in serialization formats represents an explicit choice.

Yes, this was something I explicitly did.  My argument was that the common case are vectors of numbers, so by optimizing for this case we save a lot of space for these vectors (vector<byte, 1024> is 1,024 bytes with this format, but would have been 5,120 if we included size).  This gets even worse if you move from a vector to a matrix (vector<vector<byte, 1024>, 1024> would be 1,048,576 bytes without the header and 20,971,520 with the header); notice that in this case vector is fixed length if-and-only-if the element type is fixed length!

One added change I have been thinking about is "fixing" ShortType to be fixed length in this code path without changing existing code paths... right now ShortType is serialized as int header + 2 byte short in vector type, but also in normal SSTable format!  Its actually cheaper for users to store a short as an int as that is stored as 4 bytes only... Given this is a new type, I could add and use a new method "valueLengthIfFixedNoForRealThisTime" and only fix ShortType to return 2 where as valueLengthIfFixed currently returns -1 (aka not fixed length)...

just pushed a patch that breaks AbstractTypeTest as I added support for CompositeType and found a fun bug where using this may corrupt the DB's in-memory state (if set<'CompositeType(...)'> is seen before set< bytes> is seen, then ordering breaks in org.apache.cassandra.serializers.SetSerializer#serializeValues... adding a test to detect this type of bug also found the same issue with LexicalUUIDType and uuid, which can corrupt ordering as well...

all types are now generated using the type builder

TIL: tinyint is variable length and not fixed length...

just found out about org.apache.cassandra.cql3.functions.types.DataType... not sure why we have duplicate logic for types yet, so need to figure out...

spoke with [~adelapena] and we are going to block vectors from being reachable from UDFs for now, and once client work is ready we can look to add; that way no breaking changes happen...

We may also want to relook at this layer, as its very easy for new types to not know about this... I only got lucky that someone asked how they add to this class without breaking things (good timing)...  Either have AbstractType return a DataType, or rethink things... this layer "mimics" client, but actually isn't client (different package)... 

CI is stable

CI also looks good to me:
||PR||CI||
|[trunk|https://github.com/apache/cassandra/pull/2310]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/2966/workflows/f815fdd1-e0ed-4173-9a87-0e9686db9daa] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/2966/workflows/5e6a823f-74e6-451e-ba03-86a1ad99c5b7]|
* The utest failure is CASSANDRA-17798
* The Java upgrade dtest failure is CASSANDRA-18564, also [reproducible in trunk|https://app.circleci.com/pipelines/github/adelapena/cassandra/2967/workflows/652a3ace-340f-4578-9c3d-fe3b94afecca/jobs/52012/tests].
* The Python  upgrade dtest failures are [reproducible in trunk|https://app.circleci.com/pipelines/github/adelapena/cassandra/2967/workflows/652a3ace-340f-4578-9c3d-fe3b94afecca/jobs/52010/tests].

Changes look good to me, +1.

[~mike_tr_adamson] are we ready to merge, or do you want to take a closer look?

I would love to see some docs as mentioned in this comment

https://github.com/apache/cassandra/pull/2310#issuecomment-1597412824

I think that updating CQL.textile is more or less a must.

[~smiklosovic] There is a dedicated ticket for adding ANN search docs, CASSANDRA-18604. I guess the doc for the new vector type can be added during that ticket, since the data type is closely related to its index. Or, if we want to add it to {{CQL.textile}} during this ticket, I can help with it.

[~dcapwell] I have opened CASSANDRA-18613 for UDF support. It's almost patch available but I still have to finish some things for types with variable length.

[~adelapena] The only thing I can think of that might be missing is any support in cqlsh for the new type. formatting.py contains support for formatting the different cql types for copyutil.py. We probably also need to add support in cql3handling.py for vector as well. 

[~smiklosovic] if you don't mind, can we leave updating docs to the ANN work, as their examples better address this type

bq. I have opened CASSANDRA-18613 for UDF support.

Thanks, I forgot to do that =(

[~mike_tr_adamson] as of this patch, python driver doesn't know about vector type, so wouldn't the driver need to be updated first?  How would you format what you don't know how to parse?

Do we have a separate ticket for bringing an updated python driver in for this? Either way, I agree that we could leave these changes for when the driver arrives. As such I'm happy with the patch.

I believe that we should have formal docs on added syntax / types whatever. The proper documentation about the whole ANN thing is something else. But CQL.textile is basically the referential CQL document (or doc/modules/cassandra/pages/developing/cql/cql_singlefile.adoc) and it should be there.

I understand that there will be (hopefully) dedicated ANN documentation but that is something else. Will we change CQL by merging this working? Yes, we will ... so?

[~polandll] commented that she is working on docs https://github.com/apache/cassandra/pull/2310#issuecomment-1599396688, but Andres told me he would work on a patch for the CQL file tomorrow, so will try to get that in.

Splendid, thank you all.

[This commit|https://github.com/adelapena/cassandra/commit/cb4403d986a1eaf1cdf34dd87b06502247b33240] contains some minimal documentation for the new data type. I'm sure CASSANDRA-18604 and Lorina's work would add something better, but I think this would be enough to unblock this ticket.

Thanks [~adelapena] , that is completely enough.

Thanks so much [~adelapena], applied the commit and made a small change to line 2020 of doc/cql3/CQL.textile (it said that we use the same literal as list twice); it is now

bq. Vectors are fixed-size sequences of non-null values of a certain data type. They use the same literals as lists and it isn't possible to select individual elements of a vector.



Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-18504-trunk-CF0886B6-3368-488B-ABE3-0B862455A81A]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-18504-trunk-CF0886B6-3368-488B-ABE3-0B862455A81A]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2515/]|


random schema test hit a flake, so looking into it and aborting the merge

ok the problem was that the type gen logic used 3 different builders, and the udt type name dedup logic is local to the single builder... so moved the dedup to the test level and tests are passing now, restarting the merge

Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-18504-trunk-7222CC2D-7ED3-4197-8366-C3EB16A1CEA2]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-18504-trunk-7222CC2D-7ED3-4197-8366-C3EB16A1CEA2]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2516/]|


