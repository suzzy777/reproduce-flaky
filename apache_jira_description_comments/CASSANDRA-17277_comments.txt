Ok, got something working locally with the following usage ergonomics:
{code:java}
usage: jenkins-jira-integration.py [-h] [--jenurl JENURL] --jenuser JENUSER --jenpass JENPASS --jiraurl JIRAURL --jirauser JIRAUSER --jirapass JIRAPASS --branch b
                                   [--buildnum n] [--verbose]

Parse Jenkins build output and update JIRA tickets with results for a single branch

required arguments:
  --jenurl JENURL      Jenkins server url
  --jenuser JENUSER    JIRA server url
  --jenpass JENPASS    JIRA username
  --jiraurl JIRAURL    JIRA server url
  --jirauser JIRAUSER  JIRA username
  --jirapass JIRAPASS  JIRA password
  --branch b           Branch Versions to pull Jenkins results for
  --buildnum n         Build number to process for CI status

optional arguments:
  --verbose            Verbose logging
{code}
The usage of the above can be triggered upon completion of a CI run in Jenkins that passes in the branch and number of the build; the rest of it is taken care of by the script.

The current data and format of results it'd post into a JIRA comment (I ran this against build 940 on trunk; arbitrary pick):

-----------------------------------------------------------------------

[CI Results]
Branch: trunk, build number: 940
jenkins url: [https://ci-cassandra.apache.org/job/Cassandra-trunk/940/]
JIRA: 17352
commit url: [https://git-wip-us.apache.org/repos/asf?p=cassandra.git;a=commit;h=5c9ba06dd31157cd224af2cec75521fefe2c9883]
affected paths:
 * src/java/org/apache/cassandra/config/DatabaseDescriptor.java
 * src/java/org/apache/cassandra/cql3/functions/UDFunction.java
 * src/java/org/apache/cassandra/config/Config.java
 * src/java/org/apache/cassandra/cql3/functions/ThreadAwareSecurityManager.java

Build Result: UNSTABLE
Passing Tests: 42908
Failing Tests: 11
||Test|Failures|JIRA|
|dtest.cqlsh_tests.test_cqlsh_copy.TestCqlshCopy.test_explicit_column_order_reading|1 of 17|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.distributed.upgrade.CompactStorageUpgradeTest.compactStorageUpgradeTest|4 of 17|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest.replica_side_filtering_test.TestSecondaryIndexes.test_complementary_deletion_with_limit_on_partition_key_column_with_empty_partitions|1 of 17|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest.snapshot_test.TestArchiveCommitlog.test_archive_commitlog_point_in_time_with_active_commitlog|1 of 17|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest.repair_tests.incremental_repair_test.TestIncRepair.test_repaired_tracking_with_partition_deletes|1 of 17|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest.paging_test.TestPagingDatasetChanges.test_data_change_impacting_later_page|1 of 17|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|dtest.user_functions_test.TestUserFunctions.test_udf_with_udt|1 of 17|[No JIRA found|https://issues.apache.org/jira/secure/RapidBoard.jspa?rapidView=496&quickFilter=2252]|
|org.apache.cassandra.db.commitlog.CommitLogSegmentManagerCDCTest.testNonblockingShouldMaintainSteadyDiskUsage|13 of 17|CASSANDRA-17233|

For an engineer that worked on a ticket (in this case CASSANDRA-17352), the implication is that special attention should be paid to any test failure with only 1 failure in the last N builds as this is the first time we've seen it so it could have been caused by this change. Notably, [the butler run for 940|https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-trunk/trunk] doesn't show the {{TestArchiveCommitlog}} failure, however in Jenkins if you go to all test failure results for the build [you see it there|https://ci-cassandra.apache.org/job/Cassandra-trunk/940/testReport/]

The above output is created by taking the passed in build number and walking back (and locally caching) the results of all valid previous builds. This local data is kept in a simple JSON file per branch which we then use for subsequent calculation of the # of runs we've seen a given test in and the # of failures; this is significantly faster (and less offensive) than repeatedly downloading 50+M of text data per build.

The inference of the Jira column is based on a query with summary ~ the last 2 tokens of the test name . delimited. If it finds more than 1 it should link to the same open test failures kanban board as linked when no Jira ticket is found. This functionality is of course limited to our consistency in having at least the last 2 tokens of a test failure name in the ticket summary, but that's standard operating procedure for the build lead role so shouldn't prove too brittle. In the event we have 2 failures it'll just redirect to the kanban board; some developer work required but minimal.

I'd _like_ to be able to have the test name link to the jenkins server for the test history, but that requires parsing out which test suite a given test comes from by its name alone; relatively trivial but something I could take as a follow-up to tinker with.

And last but not least, if this Jira inference proves consistent we could augment this script to automatically create Jira tickets upon finding test failures for which we don't yet have tickets.

PR here: https://github.com/apache/cassandra-builds/pull/64

bq. Notably, the butler run for 940 doesn't show the TestArchiveCommitlog failure, however in Jenkins if you go to all test failure results for the build you see it there

I don't get what the intent of this sentence is… 

Butler seems to store only 16 builds, and ci-cassandra.a.o stores only 30 builds.

bq. The above output is created by taking the passed in build number and walking back (and locally caching) the results of all valid previous builds. This local data is kept in a simple JSON file per branch which we then use for subsequent calculation of the # of runs we've seen a given test in and the # of failures; …

This then becomes much more than a cache, it's an important store of history. We have flakies that are 1:100, well beyond both butlers and ci-cassandra.a.o history. Also… the challenge that each jenkins agent needs to store its own cache (and access to it concurrent-safe by both executors) exacerbates because jobs are sticky to an agent and only get spawned on a new agent when saturation requires it. That is, every (e.g.) 40 builds could run on a new agent where the cache needs to be reconstructed but because it cannot fetch anything older than 30 builds that and subsequent commits are going to get associated with past flakies…  

bq. I don't get what the intent of this sentence is…
Butler appeared to be parsing test details whereas this script parses the "all" panel on failures. Build 940 in butler didn't reflect the count of failures consistent with the "All" panel, because they didn't match in Jenkins. This wasn't intended as a slight on butler or a question about it's correctness, more an observation that the details butler was linking to surfaced that Jenkins appeared to have inconsistent test data details.

bq. This then becomes much more than a cache, it's an important store of history.
Let's rename the /cache/ directory it creates to /history/ then. :)

bq. because it cannot fetch anything older than 30 builds that and subsequent commits are going to get associated with past flakies
Hm. This combined w/the Jenkins flakes isn't ideal if we were to run this script from jenkins agents. If we were to have a long-running centralized location from which this runs with, for instance, the last successfully parsed build per branch and step up one (the API for Jenkins gives us that), we could just set it up to check on the hour and then update tickets.

I like the "run when build is done" flow if we had jenkins agents do it, but I think having the longer-term test history is probably more important if we have to choose between the two.


Test name resolution looks a touch finicky. Thinking I may switch to just parsing out the test class name w/the failure, searching JIRA for that, and linking to that with an indicator that it's a best effort match.

