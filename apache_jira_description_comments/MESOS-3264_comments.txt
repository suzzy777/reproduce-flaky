How about use Runtime.addShutdownHook to call finalize()? System.exit() is not mean JVM would run gc before exit().

A quick patch for this: https://reviews.apache.org/r/37508/

Thanks for having a look at this, [~haosdent@gmail.com]! I had explored the option of using similar shutdown hooks previously, and unfortunately it doesn't do the trick, I assume because the order of the shutdown hooks is unspecified? And since they are run concurrently, perhaps the JVM will continue on to its post-shutdownHook GC while the hooks are still executing. In any case, the tests continue to fail with such shutdown hooks placed in the constructors of the SchedulerDriver and/or the ExecutorDriver.

If we define the {{close()}} method as {{public}} and call it explicitly in the body of {{main()}}, the tests do pass reliably. However, there seems to be some conventional wisdom saying that defining/calling a method that calls {{finalize()}} in that way is A Bad Thing. Any thoughts? If we decide that it is acceptable to define a public {{close()}} method that calls {{finalize()}} for the SchedulerDriver, similar to the one in your patch, and call it explicitly just before we call {{System.exit()}}, then that would solve this issue.

{code}
I had explored the option of using similar shutdown hooks previously, and unfortunately it doesn't do the trick, I assume because the order of the shutdown hooks is unspecified?
{code}

Very interesting. Could you try this code snippet in you jvm? https://ideone.com/48o7SG
The output should be
{code}
Enter main
Before System.exit(0);
Call finalize()
Call finalize()
{code}

Notice I wrap finalize() with close() and call close()  in the ShutdownHook. Call finalize() in the ShutdownHook thread is not work.

[~haosdent@gmail.com], I ran that snippet in the JVM and it produced that output exactly. Maybe it's not because the order of shutdown hooks is unspecified, but rather since the shutdown hooks are run concurrently, maybe the JVM continues on to other native object destructors after it has run {{SchedulerDriver.finalize()}}, but while the method is still running. I'm not sure where the destruction of native file-scope objects fits into this shutdown scheme, and one of the mutexes causing trouble exist at file scope in {{glog-0.3.3/src/logging.cc}}.

How about change it like this: https://reviews.apache.org/r/37508/ Call close method manually.

[~haosdent@gmail.com] thanks for working on this! Yea a solution like that should work (though the {{close()}} method needs to be added to the SchedulerDriver rather than the ExecutorDriver, since the {{driver}} in the test framework is a SchedulerDriver).

I tested a solution similar to this and it worked for me; I was hesitant to use it because I'm a beginner with Java and there's some conventional wisdom out there saying "running finalizers explicitly is a Bad Thing", but after digging into a bit more I can't find a really good reason not to, especially since you're testing {{if (closed) ...}} to make sure we don't attempt to close it twice. If you think this is an acceptable solution, I'd say let's go for it.

Perhaps an additional person with some Java expertise would like to weigh in? [~bernd-mesos]?

"if (closed)" alone may not be enough, since the JVM will execute finalizers on a special thread, the finalizer thread. If you close in a different thread, the finalizer thread may not see this update in time. You need to mark "closed" volatile or use synchronization to ensure consistency. 

However, it seems to me that the right thing to do is to wait until driver.stop() has succeeded. If such a facility does not exist, it needs to be written. This might help a lot of other tests, too! 


Thank you very much [~greggomann][~bernd-mesos] Let me try to update it.

