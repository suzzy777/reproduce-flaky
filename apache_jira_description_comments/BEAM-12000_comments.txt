Things to do:
- Add Python 3.9 execution runtime for Jenkins integration tests, consider switching to PyEnv.
- Identify which Beam dependencies need an upgrate (dill?) 
- Add pre- and post- commit tests
- ​Add support for Python 3.9 support in runners where necessary (e.g. Dataflow)  
- Document what it takes to add  support of a new minor version and try to minimize necessary configuration changes.


This seems like P2 "normal feature work" according to https://beam.apache.org/contribute/jira-priorities/. Is there an important data loss or vulnerability that would make this P1 and require more escalation?

This issue is assigned but has not received an update in 30 days so it has been labeled "stale-assigned". If you are still working on the issue, please give an update and remove the label. If you are no longer working on the issue, please unassign so someone else may work on it. In 7 days the issue will be automatically unassigned.

This issue is assigned but has not received an update in 30 days so it has been labeled "stale-assigned". If you are still working on the issue, please give an update and remove the label. If you are no longer working on the issue, please unassign so someone else may work on it. In 7 days the issue will be automatically unassigned.

This issue was marked "stale-assigned" and has not received a public comment in 7 days. It is now automatically unassigned. If you are still working on it, you can assign it to yourself again. Please also give an update about the status of the work.

There is a reported critical vulnerability impacting Python versions <3.9.5 and >= 3.8.0 [https://nvd.nist.gov/vuln/detail/CVE-2021-29921#VulnChangeHistorySection.] Is there a plan to fully support 3.9.5?

cc: [~tvalentyn] as mentioned https://beam.apache.org/roadmap/python-sdk/#python-3-support

This would be huge for packaging in the NixOS ecosystem where the current python3 version points to Python 3.9.x!

[~eduardopefx] to be clear, a workaround for that CVE would be to stay on 3.7.x right?

I do think we should prioritize this though, 3.9 has been out for almost a year, and we're getting bug reports (e.g. BEAM-12803) from users trying to use it.

[~bhulette] got it, we just realized that there is a 3.8 release that fixes the issue [https://docs.python.org/release/3.8.12/whatsnew/changelog.html#python-3-8-12-final]

That's an even better workaround :)

Preparing the upgrade of Jenkins image to include Python 3.9.

There was also an ask to increase the Jenkins boot disk size, so will create the image based off 1TB disk.

gcloud compute instances create valentyn-py39-install-1tb --project=apache-beam-testing --zone us-central1-b --image-family=jenkins-slave-boot-image --machine-type=n1-highmem-16 --boot-disk-size 1000
{noformat}
Created 
[https://www.googleapis.com/compute/v1/projects/apache-beam-testing/zones/us-central1-b/instances/valentyn-py39-install-1tb].

WARNING: Some requests generated warnings:
 - Disk size: '1000 GB' is larger than image size: '500 GB'. You might need to resize the root repartition manually if the operating system does not support automatic resizing. See https://cloud.google.com/compute/docs/disks/add-persistent-disk#resize_pd for details.
{noformat}

# wait for a few min for machine to boot.

gcloud compute sshy--project=apache-beam-testing --zone us-central1-b

Looks like partition is sized properly:

{noformat} 
$ sudo df -Th
Filesystem     Type      Size  Used Avail Use% Mounted on
/dev/sda1      ext4      970G   17G  953G   2% /
{noformat}

Note that some process is may be holding the apt lock right after first boot:

{noformat}
$ ps aux | grep -i apt
root      3205  0.0  0.0   4504   708 ?        Ss   18:19   0:00 /bin/sh /usr/lib/apt/apt.systemd.daily install
root      3217  0.0  0.0   4504  1676 ?        S    18:19   0:00 /bin/sh /usr/lib/apt/apt.systemd.daily lock_is_held install
valentyn  3390  0.0  0.0  12944   932 pts/0    S+   18:20   0:00 grep --color=auto -i apt
{noformat}

So before running more apt commands, we may need to wait a few min until that is over.
After ~5 min we are clear:

{noformat}
$ ps aux | grep -i apt
valentyn 31897  0.0  0.0  12944   932 pts/0    S+   18:23   0:00 grep --color=auto -i apt
{noformat}

Install Python 3.9 from deadsnakes-ppa (which was already added to repo list).

{noformat}
sudo apt install python3.9 python3.9-dev python3.9-distutils python3.9-venv
{noformat}

Also installing python3.7-venv, to explore if we can stop using virtualenv on jenkins, and instead use python3.x -m venv …, see [discussion in BEAM-8152|https://issues.apache.org/jira/browse/BEAM-8152?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=17424228#comment-17424228]. 

{noformat}
sudo apt install python3.7-venv
{noformat}

As a side effect, the last command updates python3.7 to 3.7.10.

After that, exit the session, stopped the VM created a new  image jenkins-slave-boot-image-20211004 as described in [1], then start a new from a newly-created image and do some validation to make sure versions installed and available

{noformat}
:~$ gcloud compute instances create valentyn-py39-verify --project=apache-beam-testing --zone us-central1-b --image-family=jenkins-slave-boot-image --machine-type=n1-highmem-16 
Created [https://www.googleapis.com/compute/v1/projects/apache-beam-testing/zones/us-central1-b/instances/valentyn-py39-verify].
NAME                  ZONE           MACHINE_TYPE   PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP    STATUS
valentyn-py39-verify  us-central1-b  n1-highmem-16               10.128.0.99  34.122.67.197  RUNNING
:~$ gcloud compute ssh valentyn-py39-verify  --project=apache-beam-testing --zone us-central1-b 

Last login: Tue Oct  5 00:03:36 2021 from 98.42.137.166
valentyn@valentyn-py39-verify:~$ python3.9
Python 3.9.4 (default, Apr  9 2021, 01:15:05) 
[GCC 5.4.0 20160609] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> 
valentyn@valentyn-py39-verify:~$ python3.7 -m venv /tmp/abc
source ./valentyn@valentyn-py39-verify:~$ source ./tmp/abc/bin/activate
-bash: ./tmp/abc/bin/activate: No such file or directory
valentyn@valentyn-py39-verify:~$ source /tmp/abc/bin/activate
(abc) valentyn@valentyn-py39-verify:~$ python
Python 3.7.10 (default, Feb 20 2021, 21:21:24) 

valentyn@valentyn-py39-verify:~$ virtualenv -p python3.9 /tmp/venv1
Running virtualenv with interpreter /usr/bin/python3.9
Using base prefix '/usr'
New python executable in /tmp/venv1/bin/python3.9
Also creating executable in /tmp/venv1/bin/python
. /tmp/vInstalling setuptools, pip, wheel...
env1/bin/acdone.
valentyn@valentyn-py39-verify:~$ . /tmp/venv1/bin/activate
(venv1) valentyn@valentyn-py39-verify:~$ python
Python 3.9.4 (default, Apr  9 2021, 01:15:05) 
[GCC 5.4.0 20160609] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> 

{noformat}

Finally, clean up leftover VMs.

Next, we should upgrade the Jenkins nodes to use the new image. Current plan is to combine this with Go update.

[1] https://cwiki.apache.org/confluence/display/BEAM/Jenkins+Tips#JenkinsTips-HowtoinstallandupgradesoftwareonJenkinsworkers

Trying to switch jenkins workers to use venv instead of virtualenv, and had to do additional installaitions.

{noformat}
sudo apt install python3.6 python3.6-dev python3.6-distutils python3.6-venv python3.7 python3.7-dev python3.7-distutils python3.7-venv python3.8 python3.8-dev  python3.8-distutils python3.8-venv

valentyn@valentyn-venv-update:~$ python3.6 --version
Python 3.6.13
valentyn@valentyn-venv-update:~$ python3.7 --version
Python 3.7.10
valentyn@valentyn-venv-update:~$ python3.8 --version
Python 3.8.9
valentyn@valentyn-venv-update:~$ python3.9 --version
Python 3.9.4

{noformat}

{noformat}
:beam$ gcloud  compute images create --project apache-beam-testing  --source-disk valentyn-venv-update --source-disk-zone us-central1-b jenkins-worker-boot-image-20211029 --family jenkins-worker-boot-image --description "Updated Py3.6-3.8 interpreters to be able to create venvs, see BEAM-12000"
Created [https://www.googleapis.com/compute/v1/projects/apache-beam-testing/global/images/jenkins-worker-boot-image-20211029].
NAME                                PROJECT              FAMILY                     DEPRECATED  STATUS
jenkins-worker-boot-image-20211029  apache-beam-testing  jenkins-worker-boot-image              READ
{noformat}

This issue is assigned but has not received an update in 30 days so it has been labeled "stale-assigned". If you are still working on the issue, please give an update and remove the label. If you are no longer working on the issue, please unassign so someone else may work on it. In 7 days the issue will be automatically unassigned.

This issue was marked "stale-assigned" and has not received a public comment in 7 days. It is now automatically unassigned. If you are still working on it, you can assign it to yourself again. Please also give an update about the status of the work.

This Jira ticket has a pull request attached to it, but is still open. Did the pull request resolve the issue? If so, could you please mark it resolved? This will help the project have a clear view of its open issues.

This issue is P2 but has been unassigned without any comment for 60 days so it has been labeled "stale-P2". If this issue is still affecting you, we care! Please comment and remove the label. Otherwise, in 14 days the issue will be moved to P3.

Please see https://beam.apache.org/contribute/jira-priorities/ for a detailed explanation of what these priorities mean.


This issue was marked "stale-P2" and has not received a public comment in 14 days. It is now automatically moved to P3. If you are still affected by it, you can comment and move it back to P2.

Thanks to all the maintainers of the Beam Python SDK! We are considering using it as core dependency in our Pangeo Forge project (see [https://github.com/pangeo-forge/pangeo-forge-recipes/issues/256).] However, the lack of Python 3.9 support is an area of concern for us, as we would like to use some of 3.9's language features. It is unclear to me based on reading this issue whether 3.9 support is still on the roadmap. I would love an update if you have one. Thanks again for your valuable open source work.

Hi [~rabernat], thanks for reaching out and linking the pangeo-forge issue, very cool to see that Pangeo Forge is looking at Beam and xarray-beam.

As for Python 3.9, you are in luck! This is closed out because we do have 3.9 support as of Beam 2.37.0 (see the fix version on this issue, and the [release announcement|https://beam.apache.org/blog/beam-2.37.0/]). xarray-beam was developed last year, it might be pinned to an older version of Beam that didn't support 3.9.

Since I see there's some discussion on [https://github.com/pangeo-forge/pangeo-forge-recipes/issues/256] about building a prefect/dask Beam runner, I want to ping [~pabloem@google.com] on this. I know he's been in some discussions about building a Ray runner. Historically most of our runner implementations have been in JVM systems (e.g. Spark, Flink, Samza, ...), and they are able to share some infrastructure. Perhaps there's an opportunity for collaborating on shared infrastructure for Python-native runners.

Awesome, thanks for the quick reply and update! I mistakenly assumed that 3.9 was not yet supported because I failed to install it with conda forge. However, digging deeper, it seems that's an issue with the conda forge recipe (https://github.com/conda-forge/apache-beam-feedstock/blob/5f83ff56c20956e74940e871878e9fb60fe96e30/recipe/meta.yaml#L14-L15). I was able to install successfully with pip!

Regarding the python-native runners, I think this is a great opportunity. From our point of view, we have no interest in or expertise in JVM stuff. For distributed computing in Python, IMO Dask has the most flexible and mature deployment situation. So a Dask-based Beam runner would be a huge win! I think we should move that discussion to a standalone issue. We would be very interested in supporting it however we can.

It looks like we have BEAM-5336 already for Dask, that will be a good place to discuss. Pablo also has BEAM-14137 for Ray. I think Pablo is OOO this week, maybe when he gets back we can see if there's any opportunity for collaboration.

