The public jenkins failure/reset took this run with it. I will loop this test to see if it reproduces, but I'm going to go ahead and lower the priority as this is flaky.

I'm pushing this to Impala 4, because it is just a minor test issue. I haven't been able to reproduce it, so I may end up closing it.

Saw this again in an UBSAN build.

saw this again here during GVO: https://jenkins.impala.io/job/ubuntu-16.04-dockerised-tests/3498/

Tested the query in question (shown below) by observing the failure with memory allocation. 


{code:java}
set mem_limit=<limit_in_mb>
set num_scanner_threads=1;
select *
from tpch_parquet.lineitem l1
  join tpch_parquet.lineitem l2 on l1.l_orderkey = l2.l_orderkey and
      l1.l_partkey = l2.l_partkey and l1.l_suppkey = l2.l_suppkey
      and l1.l_linenumber = l2.l_linenumber
order by l1.l_orderkey desc, l1.l_partkey, l1.l_suppkey, l1.l_linenumber
limit 5;
{code}


It looks like the failure to allocate memory can occur in different query operators. Sometimes, it occurs in Exchange node #4.  When set the memory limit to four different values (170MB, 166.3MB, 165.5MB and 162MB), the list of # of exchange failures observed out of 100 total runs is as follows. 

set mem_limit=170m; -- all 100 runs failed, 61 exchange allocation failures
set mem_limit=166.3m; -- all 100 runs failed, 61 exchange allocation failures
set mem_limit=165.5m; -- all 100 runs failed, 57 exchange allocation failures
set mem_limit=162.5m;  -- all 100 runs failed, 43 exchange allocation failures

Note that 162.5MB is the lowest memory limit below which the minimal memory reservation limit error will occur.



To reduce the chance of not detecting a memory allocation failure, it may be a good idea to lower the memory limit, say from 170MB to 164MB. 

In a test with 500 executions of the query in question and memory limit set to 164MB, there were 500 memory allocation failures in total (one in each execution), and a total of 266 of them from Exchange Node #4.

Commit 63146103a76592fe7ee583f83bc1d5e0385353b7 in impala's branch refs/heads/master from Qifan Chen
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=6314610 ]

IMPALA-9355: TestExchangeMemUsage.test_exchange_mem_usage_scaling doesn't hit the memory limit

This patch reduces the memory limit for the following query in
test_exchange_mem_usage_scaling test from 170MB to 164MB
to reduce the chance of not detecting a memory allocation
failure.

set mem_limit=<limit_in_mb>
set num_scanner_threads=1;
select *
from tpch_parquet.lineitem l1
  join tpch_parquet.lineitem l2 on l1.l_orderkey = l2.l_orderkey and
      l1.l_partkey = l2.l_partkey and l1.l_suppkey = l2.l_suppkey
      and l1.l_linenumber = l2.l_linenumber
order by l1.l_orderkey desc, l1.l_partkey, l1.l_suppkey,
l1.l_linenumber limit 5;

In a test with 500 executions of the above query with the memory
limit set to 164MB, there were 500 memory allocation failures in
total (one in each execution), and a total of 266 of them from
Exchange Node #4.

Testing:
  Ran the query in question individually;
  Ran TestExchangeMemUsage.test_exchange_mem_usage_scaling test;
  Ran core tests.

Change-Id: Id945d7e37fac07beb7808e6ccf8530e667cbaad4
Reviewed-on: http://gerrit.cloudera.org:8080/16791
Reviewed-by: Tim Armstrong <tarmstrong@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


I've seen this in a recent exhaustive test run:
{noformat}
query_test/test_mem_usage_scaling.py:418: in test_exchange_mem_usage_scaling
 self.run_test_case('QueryTest/exchange-mem-scaling', vector)
common/impala_test_suite.py:732: in run_test_case
 expected_str, query)
E AssertionError: Expected exception: Memory limit exceeded
E 
E when running:
E 
E set mem_limit=171520k;
E set num_scanner_threads=1;
E select *
E from tpch_parquet.lineitem l1
E join tpch_parquet.lineitem l2 on l1.l_orderkey = l2.l_orderkey and
E l1.l_partkey = l2.l_partkey and l1.l_suppkey = l2.l_suppkey
E and l1.l_linenumber = l2.l_linenumber
E order by l1.l_orderkey desc, l1.l_partkey, l1.l_suppkey, l1.l_linenumber
E limit 5{noformat}

Commit 4290c5e2971b056f5249716655ef2f704465f383 in impala's branch refs/heads/master from Qifan Chen
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=4290c5e ]

IMPALA-9355: TestExchangeMemUsage.test_exchange_mem_usage_scaling doesn't hit the memory limit

This patch restores the previous testing enviroment in which exchange
node 5 in the test query shown below reliablly reports memory
exceeding limit error.

  set mem_limit=171520k;
  set num_scanner_threads=1;
  select *
  from tpch_parquet.lineitem l1
    join tpch_parquet.lineitem l2 on l1.l_orderkey = l2.l_orderkey and
        l1.l_partkey = l2.l_partkey and l1.l_suppkey = l2.l_suppkey
        and l1.l_linenumber = l2.l_linenumber
  order by l1.l_orderkey desc, l1.l_partkey, l1.l_suppkey, l1.l_linenumber
  limit 5

In the patch, the memory limit for the entire query is lowered to 164Mb,
less than 171520k, the minimum for the query to be accepted after
the result spooling is enabled by default. This is achieved by
disabling result spooling by setting spool_query_results to false.

Testing:
  1). Ran exchange-mem-scaling.test

Change-Id: Ia4ad4508028645b67de419cfdfa2327d2847cfc4
Reviewed-on: http://gerrit.cloudera.org:8080/17586
Reviewed-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Fixed by restoring the original 164

