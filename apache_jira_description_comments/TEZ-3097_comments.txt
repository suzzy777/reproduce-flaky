This is still occurring, see https://builds.apache.org/job/PreCommit-TEZ-Build/2061//testReport/org.apache.tez.dag.app.dag.impl/TestCommit/testDAGCommitStartedEventFail_OnDAGSuccess/

Looks like there can sometimes be pending history events after the DAG enters a terminal state.  

I was able to approximately replicate the issue: (Not the concurrent modification but get events after dag finished).
* delay enqueueAndScheduleNextEvent(new VertexManagerEventOnVertexStarted(completions)) in VertexManager.onVertexStarted by 20-30 ms in a different thread.
* This is to simulate a case where the executerService would not have invoked the callback for onVertexStarted, but the task complete events for the vertex has been handled and dag is finished.
* Now we have a finished dag, and suddenly ShuffleVertexManagerBase.OnVertexStarted is scheduled by the VertexManager and which caused new tasks to be scheduled and events sent to HistoryEventHandler.

Followup:
* Is this a bug? Should we handle case where dag can be finished before the above schedule is done. (No test fix required in this case).
* Is there a way to fire the task finished events only after Vertex has fully started. More like, fire task finished only after task start is called? Only way I can think of is to wait for task started events to arrive in MockHistoryEventHandler (make it thread safe too).
* These extra events do not affect the outcome, use a concurrent queue instead of the list to make MockHistoryEventHandler thread safe.

bq. Is this a bug? Should we handle case where dag can be finished before the above schedule is done.

I don't think it's a bug.   If the DAG believes it is complete and ready to commit, then why are we just getting around to telling a vertex manager that the vertex started and it should start scheduling tasks?  I think this is an artifact of the test trying to fake the completion of the DAG.

For the purposes of this test, I suspect the concurrent queue fix would work since it's not interested in task-level events.  It only cares about commit events and dag completion events, and those appear to be issued synchronously with the direct handler invocation.

Thanks [~jlowe]. Lets say during execution of a dag, a failure in one vertex caused the dag to abort and another vertex is the state shown above. Would the same thing happen, initialize gets called after dag finished and tasks would get scheduled and dag does not exists?

Sorry, I should have been more clear.   The unit test is trying to test DAG commit.  In order for a DAG to commit, all the vertices need to succeed.  Therefore we should not be trying to schedule tasks beyond the DAG completion in the context of this test, since that means a vertex succeeded before it started scheduling tasks.  In other words, the unit test is not doing a good job of emulating what a real DAG does when it tries to commit.

In practice, yes, a DAG can enter a terminal state while vertices could still be asynchronously trying to schedule, but I don't think that's an error.  Eventually the vertices will receive kill events from the dag and they in turn will issue kill events to any tasks that were scheduled.  The history handler should have no issue recording these events which may occur after the dag completion event.  It only causes an issue in this test because the test is not prepared to receive history events after the dag completes (again because it poorly emulates what a DAG does to get to the commit stage).

Fixing by using a ConcurrentLinkedQueue.

{color:green}+1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12835723/TEZ-3097.01.patch
  against master revision 6cf4378.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/2070//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/2070//console

This message is automatically generated.

+1 lgtm.  Committing this.

Thanks, [~harishjp]!  I committed this to master and branch-0.8.

