Please check this bug. [~asalamon74]. I will upload patch laterly

Looks like a valid problem for me, but let's ping [~dionusos] [~matijhs] they have more Oozie S3 experience.

Thats a great finding [~zuston]! That FileSystem instance should be created definitely with actionLibsPath instead of appPath. 

Its probably a minor change in the below code part, but I did not check in depths. 
{code:java}
FileSystem fs = Services.get().get(HadoopAccessorService.class).createFileSystem(user, appPath.toUri(), conf);
{code}

This could be a further enhancement for making Oozie more cloud file system friendly.


[~matijhs] Thanks your response. I will recheck the patch and upload it.

In addition, Why I found this problem, because we use aws {{S3}} to store workflow xml, but {{Oozie}} sharelib related files are still stored in {{HDFS}}. I found that Oozie cannot support this scenario, so I modified the current Oozie code. If there is such a demand, can we open another jira to solve this problem, how do you think? [~asalamon74].

*The problems we encountered are as follows:*
When the workflow xml address has no scheme and uses the s3a protocol by default, {{Oozie}} is required to provide optional parameters to support  reading the workflow xml path from {{S3A}} instead of {{HDFS}}

 

[~zuston] [~matijhs] It seems to me you have found lots of scenarios where Oozie is not working correctly if we try to use not only HDFS but also S3, Azure... I think I'll open an umbrella Jira about the cloud improvement and move all the Jira there as subtasks.

PreCommit-OOZIE-Build started



Testing JIRA OOZIE-3574

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any star imports
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} Javadoc generation succeeded with the patch
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1{color} There are no new bugs found in total.
.    {color:green}+1{color} There are no new bugs found in [fluent-job/fluent-job-api].
.    {color:green}+1{color} There are no new bugs found in [docs].
.    {color:green}+1{color} There are no new bugs found in [core].
.    {color:green}+1{color} There are no new bugs found in [sharelib/spark].
.    {color:green}+1{color} There are no new bugs found in [sharelib/git].
.    {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
.    {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
.    {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
.    {color:green}+1{color} There are no new bugs found in [sharelib/pig].
.    {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
.    {color:green}+1{color} There are no new bugs found in [sharelib/hive].
.    {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
.    {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
.    {color:green}+1{color} There are no new bugs found in [tools].
.    {color:green}+1{color} There are no new bugs found in [server].
.    {color:green}+1{color} There are no new bugs found in [client].
.    {color:green}+1{color} There are no new bugs found in [examples].
.    {color:green}+1{color} There are no new bugs found in [webapp].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 3199
.    {color:orange}Tests failed at first run:{color}
TestBlockingInputStream#testFastWritingBlockingInputStream
.    For the complete list of flaky tests, see TEST-SUMMARY-FULL files.
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 
{color:green}+1 MODERNIZER{color}

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

. https://builds.apache.org/job/PreCommit-OOZIE-Build/1273/



Thanks for the patch [~zuston]. The modification looks good to me. Could you please also add a unit test to [TestJavaActionExecutorLibAddition.java|https://github.com/apache/oozie/blob/master/core/src/test/java/org/apache/oozie/action/hadoop/TestJavaActionExecutorLibAddition.java]. A test which fails with the original code but passes with your fix could be really useful here.

pinging [~zuston] :) 

[~asalamon74] [~matijhs] Sorry i missed a point that needed to be modified，code is [here|https://github.com/apache/oozie/blob/70f9cbd697644d6ad9f2cfd64325e2e95f37ac01/core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java#L721]. I think {{file.getPath().toUri().getPath()}} should be changed to {{file.getPath().toString()}}.

Please check v2 patch, i add a unit test.

pinging [~asalamon74], [~matijhs] [~gezapeti], Please review it if having some time. :)

PreCommit-OOZIE-Build started



Testing JIRA OOZIE-3574

Cleaning local git workspace

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------


[~zuston] Thanks for adding the unit test, I wanted to suggest a cleanup, but it seems to me you already removed the dead code. Would it be possible to call {{getActionLibPathWithFs2}} from {{createTestActionLibPathsWithFs2}} and avoid some code duplication?


[~asalamon74] v3 patch was uploaded. I remove some unnecessary code and avoid duplicate calls.

PreCommit-OOZIE-Build started



Testing JIRA OOZIE-3574

Cleaning local git workspace

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------


PreCommit-OOZIE-Build started



Testing JIRA OOZIE-3574

Cleaning local git workspace

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------


I've tried to apply the latest patch locally and got the following error message:
{noformat}
error: patch failed: core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java:18
error: core/src/main/java/org/apache/oozie/action/hadoop/JavaActionExecutor.java: patch does not apply
{noformat}
[~zuston] Can you please rebase it on top of the current master (OOZIE-3575 also changed {{JavaActionExecutor a week ago)}}.

PreCommit-OOZIE-Build started



Testing JIRA OOZIE-3574

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any star imports
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} Javadoc generation succeeded with the patch
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1{color} There are [6] new bugs found below threshold in total that must be fixed.
.    {color:green}+1{color} There are no new bugs found in [tools].
.    {color:red}-1{color} There are [6] new bugs found below threshold in [core] that must be fixed, listing only the first [5] ones.
.    You can find the SpotBugs diff here (look for the red and orange ones): core/findbugs-new.html
.    The top [5] most important SpotBugs errors are:
.    At BulkJPAExecutor.java:[line 206]: This use of javax/persistence/EntityManager.createQuery(Ljava/lang/String;)Ljavax/persistence/Query; can be vulnerable to SQL/JPQL injection
.    At BulkJPAExecutor.java:[line 176]: At BulkJPAExecutor.java:[line 175]
.    At BulkJPAExecutor.java:[line 205]: At BulkJPAExecutor.java:[line 199]
.    This use of javax/persistence/EntityManager.createQuery(Ljava/lang/String;)Ljavax/persistence/Query; can be vulnerable to SQL/JPQL injection: At BulkJPAExecutor.java:[line 206]
.    At BulkJPAExecutor.java:[line 111]: At BulkJPAExecutor.java:[line 127]
.    {color:green}+1{color} There are no new bugs found in [examples].
.    {color:green}+1{color} There are no new bugs found in [webapp].
.    {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
.    {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
.    {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
.    {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
.    {color:green}+1{color} There are no new bugs found in [sharelib/spark].
.    {color:green}+1{color} There are no new bugs found in [sharelib/hive].
.    {color:green}+1{color} There are no new bugs found in [sharelib/git].
.    {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
.    {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
.    {color:green}+1{color} There are no new bugs found in [sharelib/pig].
.    {color:green}+1{color} There are no new bugs found in [fluent-job/fluent-job-api].
.    {color:green}+1{color} There are no new bugs found in [client].
.    {color:green}+1{color} There are no new bugs found in [server].
.    {color:green}+1{color} There are no new bugs found in [docs].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 3208
.    {color:orange}Tests failed at first run:{color}
TestCoordActionsKillXCommand#testActionKillCommandDate
TestBlockingInputStream#testFastWritingBlockingInputStream
.    For the complete list of flaky tests, see TEST-SUMMARY-FULL files.
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 
{color:green}+1 MODERNIZER{color}

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

. https://builds.apache.org/job/PreCommit-OOZIE-Build/1297/



Rebase it. UT looks OK. [~asalamon74]

Commit 0eb006f655e6fe92b471dcc76cd85f8329f7c8f2 in oozie's branch refs/heads/master from Andras Salamon
[ https://gitbox.apache.org/repos/asf?p=oozie.git;h=0eb006f ]

OOZIE-3574 JavaAction create incorrect fileSystem instance in addActionLibs method (zuston via asalamon74)


Thanks for the contribution [~zuston], +1, committed to master.

