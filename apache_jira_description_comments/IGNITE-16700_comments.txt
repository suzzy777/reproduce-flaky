This test creates 2 * CPU_COUNT threads and each thread repeats transactions transferring money from one account to another, using the number of accounts similar to threads' number. In fact, it’s load test from some point of view as it discovers performance problems. The reason of test failures are replication timeout exception but the reasons of exceptions are different.
 * upsert operations timeouts: the reason of these timeouts is long waiting of lock acquisition because of high contention, and lock release after cleanup, so that there can be a queue of waiters to acquire lock for each key, and each of them wait for tx cleanup.

 * any command timeouts: seems that there are problems with rocksdb log storage, and storage flush in RocksDbSharedLogStorage#commitWriteBatch: having batch size of several hundred of bytes, the db put operation can last over a second. I see many such records in log while logging time for flushing that took over 100 ms.

If I turn off fsync for Raft log, and increase number of accounts by 10 times, it drastically reduces the fail rate of the test (no failures after 600 runs, comparing with 1 per ~25 without fixes). The problem with Raft storage needs separate ticket.

I discovered flakiness of TxLocalTest#testBalance after unmuting it (see IGNITE-20205 ) - this is a mock of transactional logic based on local dummy table.

I made 31 builds of the Table module, seems to be okay: https://ci.ignite.apache.org/viewType.html?buildTypeId=ApacheIgnite3xGradle_Test_IntegrationTests_ModuleTable&branch_ApacheIgnite3xGradle_Test_IntegrationTests=pull%2F2439&tab=buildTypeHistoryList

[~maliev]  could you review the PR please?

