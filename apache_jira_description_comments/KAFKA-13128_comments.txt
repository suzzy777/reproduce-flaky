The failure is from the second line in this series of assertions 
{code:java}
assertThat(store1.get(key), is(notNullValue()));
assertThat(store1.get(key2), is(notNullValue()));
assertThat(store1.get(key3), is(notNullValue()));
{code}
which is basically the first time we attempt IQ after starting up. The test setup includes starting Streams and waiting for it to reach RUNNING, then adding a new thread, and finally producing a set of 100 records for each of the three keys. After that it waits for all records to be processed *for _key3_* and then proceeds to the above assertions.

I suspect the problem is that we only wait for all data to be processed for _key3_, but not the other two keys. In theory this should work, since the data for _key3_ is produced last and would have the largest timestamps meaning the keys should be processed more or less in order. However the input topic actually has two partitions, so it could be that _key1_ and _key3_ correspond to task 1 while _key2_ corresponds to task 2. Again, that shouldn't affect the order in which records are processed – as long as the tasks are on the same thread.

But we started up a new thread in between waiting for Streams to reach RUNNING and producing data to the input topics. This new thread has to be assigned one of the tasks, but due to cooperative rebalancing it will take two full (though short) rebalances before the new thread can actually start processing any tasks. Therefore as long as the original thread continues to own the task corresponding to _key3_ after the new thread is added, it can easily get through all records for _key3_. Which would mean the test can proceed to the above assertions while the new thread is still waiting to start processing any data for _key2_ at all.

There are a few ways we can address this given how many things had to happen exactly right in order to see this failure, but the simplest fix is to just wait on all three keys to be fully processed rather than just the one. This seems to align with the original intention of the test best as well

Failed again for a different reason – just flaky, seems we need to wait for the thread to fully start up

 

{{java.lang.AssertionError: Unexpected exception thrown while getting the value from store.
Expected: is (a string containing "Cannot get state store source-table because the stream thread is PARTITIONS_ASSIGNED, not RUNNING" or a string containing "The state store, source-table, may have migrated to another instance")
     but: was "Cannot get state store source-table because the stream thread is STARTING, not RUNNING"}}

I fixed the second failure in this PR a little bit ago https://github.com/apache/kafka/pull/11153

Sorry to reopen this issue, it just occurred in this PR [https://github.com/apache/kafka/pull/11302]

It's a different error though:

{{}}
{code:java}
java.lang.AssertionError: Unexpected exception thrown while getting the value from store.
Expected: is (a string containing "Cannot get state store source-table because the stream thread is PARTITIONS_ASSIGNED, not RUNNING" or a string containing "The state store, source-table, may have migrated to another instance" or a string containing "Cannot get state store source-table because the stream thread is STARTING, not RUNNING")
  but: was "Cannot get state store source-table because the stream thread is PARTITIONS_REVOKED, not RUNNING"{code}
[https://ci-builds.apache.org/job/Kafka/job/kafka-pr/job/PR-11302/3/testReport/junit/org.apache.kafka.streams.integration/StoreQueryIntegrationTest/Build___JDK_8_and_Scala_2_12___shouldQueryStoresAfterAddingAndRemovingStreamThread/?cloudbees-analytics-link=scm-reporting%2Ftests%2Ffailed]

Let me know if I should have opened a new issue instead of reopening this one.

{{}}

And also here:
[https://ci-builds.apache.org/job/Kafka/job/kafka-pr/job/PR-11250/9/testReport/junit/org.apache.kafka.streams.integration/StoreQueryIntegrationTest/Build___JDK_11_and_Scala_2_13___shouldQueryStoresAfterAddingAndRemovingStreamThread/]

{code:java}
java.lang.AssertionError: 
Expected: is not null
 but: was null
 at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
 at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:6)
 at org.apache.kafka.streams.integration.StoreQueryIntegrationTest.lambda$shouldQueryStoresAfterAddingAndRemovingStreamThread$15(StoreQueryIntegrationTest.java:494)
 at org.apache.kafka.streams.integration.StoreQueryIntegrationTest.until(StoreQueryIntegrationTest.java:545)
 at org.apache.kafka.streams.integration.StoreQueryIntegrationTest.shouldQueryStoresAfterAddingAndRemovingStreamThread(StoreQueryIntegrationTest.java:488)
{code}

[~wcarlson5]  unassigning you in case someone else wants to pick this up and fix the remaining source(s?) of failure

It might be that [https://github.com/apache/kafka/pull/11334] fixed this flaky test

[~wcarlson5] Do you think we can close this ticket?

