Thanks for the findings [~dionusos]! Woo-hoo, I thought the {{SimpleDateFormat}} instances were used in a thread-safe way... my bad.

I propose to look also for other usages of {{SimpleDateFormat}} across Oozie code base.

There are plenty of classes where SimpleDateFormat is used. Shall we use a class that is child of SimpleDateFormat and override the parse method OR can we implement a new class that manages a SimpleDateFormat pool in a synchronized way? I think extracting the parse function could be much more elegant in Oozie's case than implementing thread safe environment around all places where the parsing is needed.

Creating new SimpleDateFormat object is perfectly fine, unless you want to create millions of objects in seconds. However, there are already replacements for SimpleDateFormat developed, for example in commons-lang the [FastDateFormat|http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/time/FastDateFormat.html] or in JDK 8 the [DateTimeFormatter|https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html]

[~dionusos] [~zsombor] I'd go for creating {{new SimpleDateFormat()}} instances always locally, instead of JDK8-only stuff. Modern garbage collectors such as {{G1GC}} are pretty much okay with sweeping away a lot of short-lived objects on the fly.

Thanks for the suggestions. Here is the review request: [https://reviews.apache.org/r/67999/] which is intended to use ThreadLocal variables for SimpleDateFormat as can be found in other classes. As I see it is the only product code class which had unstable parsing. I would not modify the test code which uses SDF class to parse.

PreCommit-OOZIE-Build started



Testing JIRA OOZIE-3304

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warning(s)
.    {color:red}WARNING{color}: the current HEAD has 100 Javadoc warning(s)
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc error(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:orange}0{color} There are [2] new bugs found in total that would be nice to have fixed.
. {color:green}+1{color} There are no new bugs found in [examples].
. {color:green}+1{color} There are no new bugs found in [webapp].
. {color:orange}0{color} There are [2] new bugs found in [core] that would be nice to have fixed.
. You can find the FindBugs diff here: core/findbugs-new.html
. {color:green}+1{color} There are no new bugs found in [tools].
. {color:green}+1{color} There are no new bugs found in [fluent-job/fluent-job-api].
. {color:green}+1{color} There are no new bugs found in [server].
. {color:green}+1{color} There are no new bugs found in [docs].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
. {color:green}+1{color} There are no new bugs found in [sharelib/pig].
. {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive].
. {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
. {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
. {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
. {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
. {color:green}+1{color} There are no new bugs found in [sharelib/spark].
. {color:green}+1{color} There are no new bugs found in [client].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 2470
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}. There is at least one warning, please check{color}

The full output of the test-patch run is available at

. https://builds.apache.org/job/PreCommit-OOZIE-Build/676/



[~andras.piros], [~gezapeti] shall I handle the Javadc warnings in this ticket?

My only nitpick is to as why is the new field public? I can see that it is used from the tests but please keep visibility as low as possible.

Good catch by the way! :)

 

If is visible only for testing purposes, besides keeping the visibility as low as possible, please annotate it with @VisibleForTesting

PreCommit-OOZIE-Build started


Member *dt* visibility set to protected and annotated with @VisibleForTesting


Testing JIRA OOZIE-3304

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warning(s)
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc error(s)
.    {color:red}ERROR{color}: the current HEAD has 2 Javadoc error(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:orange}0{color} There are [2] new bugs found in total that would be nice to have fixed.
. {color:green}+1{color} There are no new bugs found in [docs].
. {color:green}+1{color} There are no new bugs found in [examples].
. {color:green}+1{color} There are no new bugs found in [tools].
. {color:orange}0{color} There are [2] new bugs found in [core] that would be nice to have fixed.
. You can find the FindBugs diff here: core/findbugs-new.html
. {color:green}+1{color} There are no new bugs found in [server].
. {color:green}+1{color} There are no new bugs found in [client].
. {color:green}+1{color} There are no new bugs found in [fluent-job/fluent-job-api].
. {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
. {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
. {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
. {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive].
. {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
. {color:green}+1{color} There are no new bugs found in [sharelib/spark].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
. {color:green}+1{color} There are no new bugs found in [sharelib/pig].
. {color:green}+1{color} There are no new bugs found in [webapp].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 1982
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

. https://builds.apache.org/job/PreCommit-OOZIE-Build/692/



PreCommit-OOZIE-Build started


Thanks for the contribution [~dionusos]! +1 pending Jenkins run. Too few tests have been executed in the previous run, hence kicked off a new build.

This is baaaaaad (again) :(

Core times out after 2 hours:
{noformat}
 [INFO] Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.014 s - in org.apache.oozie.service.TestAuthorizationService
 [INFO] 
 [INFO] Results:
 [INFO] 
 [INFO] Tests run: 989, Failures: 0, Errors: 0, Skipped: 0
 [INFO] 
 [ERROR] There was a timeout or other error in the fork
 [INFO]

{noformat}
but in the end it is reported as a successful build:
{noformat}
[INFO] 
 [INFO] ------------------------------------------------------------------------
 [INFO] Reactor Summary:
 [INFO] 
 [INFO] Apache Oozie Main 5.1.0-SNAPSHOT ................... SUCCESS [ 0.894 s]
 [INFO] Apache Oozie Fluent Job ............................ SUCCESS [ 0.038 s]
 [INFO] Apache Oozie Fluent Job API ........................ SUCCESS [ 5.057 s]
 [INFO] Apache Oozie Client ................................ SUCCESS [ 2.036 s]
 [INFO] Apache Oozie Share Lib Oozie ....................... SUCCESS [ 5.510 s]
 [INFO] Apache Oozie Share Lib HCatalog .................... SUCCESS [ 1.590 s]
 [INFO] Apache Oozie Share Lib Distcp ...................... SUCCESS [ 0.150 s]
 [INFO] Apache Oozie Core .................................. SUCCESS [ 02:00 h]
 [INFO] Apache Oozie Share Lib Streaming ................... SUCCESS [06:23 min]
 [INFO] Apache Oozie Share Lib Pig ......................... SUCCESS [05:00 min]
  {noformat}

I'd have totally missed this. Thanks Andras for noticing!

[https://builds.apache.org/job/PreCommit-OOZIE-Build/697/console] is stuck again. It's getting suspicious that the fix is running into a deadlock of some sort.

Unfortunately we don't see which test is getting stuck.

The other possibility is that this change causes a big performance degradation in Oozie restart/startup time but I don't really see why that would happen.

[~dionusos], can you try to run the whole test suite a couple of times to see if you can reproduce the pre-commit issues?

 

[~dionusos] [~gezapeti] it seems to me that calling {{new SimpleDateFormat(String pattern)}} every time a {{ShareLibService}} gets initialized on a new thread because of {{ThreadLocal}} usage - that is, as I suspect, on every JUnit test call - is a huge performance loss.

[~dionusos] can you please verify test metrics with and without your patch? Thanks!


Testing JIRA OOZIE-3304

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warning(s)
.    {color:red}WARNING{color}: the current HEAD has 100 Javadoc warning(s)
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc error(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:orange}0{color} There are [2] new bugs found in total that would be nice to have fixed.
. {color:green}+1{color} There are no new bugs found in [docs].
. {color:green}+1{color} There are no new bugs found in [webapp].
. {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive].
. {color:green}+1{color} There are no new bugs found in [sharelib/spark].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
. {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
. {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
. {color:green}+1{color} There are no new bugs found in [sharelib/pig].
. {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
. {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
. {color:green}+1{color} There are no new bugs found in [examples].
. {color:green}+1{color} There are no new bugs found in [client].
. {color:orange}0{color} There are [2] new bugs found in [core] that would be nice to have fixed.
. You can find the FindBugs diff here: core/findbugs-new.html
. {color:green}+1{color} There are no new bugs found in [tools].
. {color:green}+1{color} There are no new bugs found in [server].
. {color:green}+1{color} There are no new bugs found in [fluent-job/fluent-job-api].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 2136
.    Tests failed: 0
.    Tests errors: 7

.    The patch failed the following testcases:



.    Tests failing with errors:
testCallCopyTaskMoreThreadsThanFiles(org.apache.oozie.tools.TestCopyTaskCallable)
testCallCopyTaskSameFileNrAndThreadNr(org.apache.oozie.tools.TestCopyTaskCallable)
testCallCopyTaskMoreFilesThanThreads(org.apache.oozie.tools.TestCopyTaskCallable)
testCallCopyTaskOneThread(org.apache.oozie.tools.TestCopyTaskCallable)
testConcurrentCopyFromLocalHighThreadNr(org.apache.oozie.tools.TestConcurrentCopyFromLocal)
testConcurrentCopyFromLocalSameFileNrAndThreadNr(org.apache.oozie.tools.TestConcurrentCopyFromLocal)
testConcurrentCopyFromLocalMoreThreadsThanFiles(org.apache.oozie.tools.TestConcurrentCopyFromLocal)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}

{color:red}. There is at least one warning, please check{color}

The full output of the test-patch run is available at

. https://builds.apache.org/job/PreCommit-OOZIE-Build/697/



It seems to be a network issue in the tests:

{code}
java.util.concurrent.ExecutionException: java.net.ConnectException: Call From asf917.gq1.ygridcore.net/67.195.81.137 to localhost:40116 failed on connection exception: java.net.ConnectException: Connection refused; For more details see:  http://wiki.apache.org/hadoop/ConnectionRefused
	at java.util.concurrent.FutureTask.report(FutureTask.java:122)
	at java.util.concurrent.FutureTask.get(FutureTask.java:192)
	at org.apache.oozie.tools.TestCopyTaskCallable.performAndCheckCallCopyTask(TestCopyTaskCallable.java:130)
	at org.apache.oozie.tools.TestCopyTaskCallable.testCallCopyTaskMoreFilesThanThreads(TestCopyTaskCallable.java:100)
{code}

The thread local variable initialization only happens, when it first accessed, so just creating hundreds of threads, shouldn't create hundreds of new SimpleDateFormat, and shouldn't trigger timeouts.

PreCommit-OOZIE-Build started


Thanks for your insight [~zsombor]! Kicked off a new build to see whether the {{ConnectException}}s were caused by a temporary issue.


Testing JIRA OOZIE-3304

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warning(s)
.    {color:red}WARNING{color}: the current HEAD has 100 Javadoc warning(s)
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc error(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:orange}0{color} There are [2] new bugs found in total that would be nice to have fixed.
. {color:green}+1{color} There are no new bugs found in [examples].
. {color:green}+1{color} There are no new bugs found in [webapp].
. {color:orange}0{color} There are [2] new bugs found in [core] that would be nice to have fixed.
. You can find the FindBugs diff here: core/findbugs-new.html
. {color:green}+1{color} There are no new bugs found in [tools].
. {color:green}+1{color} There are no new bugs found in [fluent-job/fluent-job-api].
. {color:green}+1{color} There are no new bugs found in [server].
. {color:green}+1{color} There are no new bugs found in [docs].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
. {color:green}+1{color} There are no new bugs found in [sharelib/pig].
. {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive].
. {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
. {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
. {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
. {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
. {color:green}+1{color} There are no new bugs found in [sharelib/spark].
. {color:green}+1{color} There are no new bugs found in [client].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 2473
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}. There is at least one warning, please check{color}

The full output of the test-patch run is available at

. https://builds.apache.org/job/PreCommit-OOZIE-Build/712/



Tests have timed out again with this patch. Oozie-core tests ran for more than 5 hours!
{noformat}
[INFO] 
[INFO] Tests run: 1477, Failures: 0, Errors: 0, Skipped: 0
[INFO] 
[ERROR] There was a timeout or other error in the fork
{noformat}

{noformat}
[INFO] Apache Oozie Share Lib Oozie ....................... SUCCESS [  4.962 s]
[INFO] Apache Oozie Share Lib HCatalog .................... SUCCESS [  1.483 s]
[INFO] Apache Oozie Share Lib Distcp ...................... SUCCESS [  0.155 s]
[INFO] Apache Oozie Core .................................. SUCCESS [  05:43 h]
[INFO] Apache Oozie Share Lib Streaming ................... SUCCESS [05:51 min]
[INFO] Apache Oozie Share Lib Pig ......................... SUCCESS [04:49 min]
[INFO] Apache Oozie Share Lib Hive ........................ SUCCESS [02:27 min]
[INFO] Apache Oozie Share Lib Hive 2 ...................... SUCCESS [01:53 min]
[INFO] Apache Oozie Share Lib Sqoop ....................... SUCCESS [03:04 min]
{noformat}

There were successful pre-commit builds yesterday for other patches (like OOZIE-3193) so I'm pretty confident this patch is causing something to go wrong. I can't  pinpoint what is the problem in the patch itself though.
[~dionusos], can you please do some testing on this? 

I did some testing and I suspect that not killing the threads caused the timeout, so I uploaded a new patch addressing the issue and used ExecutorService to manage the running threads instead.

The NUMBER_OF_FILESTATUSES value have been reduced to 100.000, its still enough to get NumberFormatException, but significantly faster than with a million :)

Can we kick off a new build to check it? Thanks!

cc [~zsombor], [~dionusos], [~gezapeti], [~andras.piros]

PreCommit-OOZIE-Build started


PreCommit-OOZIE-Build started



Testing JIRA OOZIE-3304

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warning(s)
.    {color:red}WARNING{color}: the current HEAD has 100 Javadoc warning(s)
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc error(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:orange}0{color} There are [2] new bugs found in total that would be nice to have fixed.
. {color:green}+1{color} There are no new bugs found in [examples].
. {color:green}+1{color} There are no new bugs found in [webapp].
. {color:orange}0{color} There are [2] new bugs found in [core] that would be nice to have fixed.
. You can find the FindBugs diff here: core/findbugs-new.html
. {color:green}+1{color} There are no new bugs found in [tools].
. {color:green}+1{color} There are no new bugs found in [fluent-job/fluent-job-api].
. {color:green}+1{color} There are no new bugs found in [server].
. {color:green}+1{color} There are no new bugs found in [docs].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
. {color:green}+1{color} There are no new bugs found in [sharelib/pig].
. {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive].
. {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
. {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
. {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
. {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
. {color:green}+1{color} There are no new bugs found in [sharelib/spark].
. {color:green}+1{color} There are no new bugs found in [client].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 2915
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}. There is at least one warning, please check{color}

The full output of the test-patch run is available at

. https://builds.apache.org/job/PreCommit-OOZIE-Build/738/



Seems like the SchedulerService caused some trouble with scheduling a sharelib purge on the many mocked libs in a separate thread. When its eliminated the test execution looks good. Could you take a look at the latest patch? I may have added some unwanted static imports as well... :)

Thanks for the contribution [~matijhs]! Nice improvement to the previous patches (I believe unit tests are behaving correctly by now), and good idea to use {{ExecutorService}}.

Can you please address:
# {{import static}} statements ;)
# detailed and describing assertion error messages
# instead of {{Throwable#printStackTrace()}}, log message on {{ERROR}} level
# can we have different scenarios w/ more / less threads and assertion also on the result of {{ShareLibService#getLatestLibPath()}}?

Thanks!

Diff is updated on https://reviews.apache.org/r/67999/

PreCommit-OOZIE-Build started



Testing JIRA OOZIE-3304

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 1 line(s) longer than 132 characters
.    {color:green}+1{color} the patch adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warning(s)
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc error(s)
.    {color:red}ERROR{color}: the current HEAD has 2 Javadoc error(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1{color} There are no new bugs found in total.
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 2918
.    {color:orange}Tests failed at first run:{color}
TestCoordActionsKillXCommand#testActionKillCommandDate
.    For the complete list of flaky tests, see TEST-SUMMARY-FULL files.
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

. https://builds.apache.org/job/PreCommit-OOZIE-Build/739/



PreCommit-OOZIE-Build started



Testing JIRA OOZIE-3304

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch adds/modifies 2 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warning(s)
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc error(s)
.    {color:red}ERROR{color}: the current HEAD has 2 Javadoc error(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1{color} There are no new bugs found in total.
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 2918
.    {color:orange}Tests failed at first run:{color}
TestCoordActionsKillXCommand#testActionKillCommandActionNumbers
TestStatusTransitService#testCoordStatusTransitWithLock
.    For the complete list of flaky tests, see TEST-SUMMARY-FULL files.
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

. https://builds.apache.org/job/PreCommit-OOZIE-Build/741/



[~dionusos] [~matijhs] thanks for the contribution! +1

Committed to {{master}}.

Closing issue; Oozie 5.1.0 is released.

