.001 is some debug I pushed....to master and branch-2.

Debug turned up the culprit 'mover':

{code}
2018-02-14 12:35:07,975 DEBUG [PEWorker-6] procedure.ServerCrashProcedure(217): Splitting WALs pid=9, state=RUNNABLE:SERVER_CRASH_SPLIT_LOGS; ServerCrashProcedure server=asf903.gq1.ygridcore.net,56387,1518611700720, splitWal=true, meta=false
2018-02-14 12:35:07,978 INFO  [Thread-213] assignment.MoveRegionProcedure(57): REMOVE
java.lang.Throwable: REMOVE: Just to see who is calling Move!!!
	at org.apache.hadoop.hbase.master.assignment.MoveRegionProcedure.<init>(MoveRegionProcedure.java:57)
	at org.apache.hadoop.hbase.master.assignment.AssignmentManager.createMoveRegionProcedure(AssignmentManager.java:740)
	at org.apache.hadoop.hbase.master.assignment.AssignmentManager.moveAsync(AssignmentManager.java:545)
	at org.apache.hadoop.hbase.master.assignment.AssignmentManager.lambda$checkIfShouldMoveSystemRegionAsync$0(AssignmentManager.java:481)
	at java.lang.Thread.run(Thread.java:748)
2018-02-14 12:35:07,986 DEBUG [PEWorker-6] master.MasterWalManager(257): Renamed region directory: hdfs://localhost:39302/user/jenkins/test-data/4b64143d-6b3f-4516-9efb-0c6c1a438493/WALs/asf903.gq1.ygridcore.net,56387,1518611700720-splitting
2018-02-14 12:35:07,986 INFO  [PEWorker-6] master.SplitLogManager(461): dead splitlog workers [asf903.gq1.ygridcore.net,56387,1518611700720]
2018-02-14 12:35:07,986 DEBUG [Time-limited test-EventThread] procedure2.ProcedureExecutor(868): Stored pid=10, state=RUNNABLE:SERVER_CRASH_START; ServerCrashProcedure server=asf903.gq1.ygridcore.net,51305,1518611700792, splitWal=true, meta=true
2018-02-14 12:35:07,987 DEBUG [Time-limited test-EventThread] assignment.AssignmentManager(1382): Added=asf903.gq1.ygridcore.net,51305,1518611700792 to dead servers, submitted shutdown handler to be executed meta=true
2018-02-14 12:35:07,988 DEBUG [Time-limited test-EventThread] zookeeper.ZKUtil(355): regionserver:35367-0x161944f90b6000c, quorum=localhost:59400, baseZNode=/hbase Set watcher on existing znode=/hbase/rs/asf903.gq1.ygridcore.net,35367,1518611707634
2018-02-14 12:35:07,988 INFO  [PEWorker-8] procedure.ServerCrashProcedure(118): Start pid=10, state=RUNNABLE:SERVER_CRASH_START; ServerCrashProcedure server=asf903.gq1.ygridcore.net,51305,1518611700792, splitWal=true, meta=true
2018-02-14 12:35:07,992 INFO  [PEWorker-6] master.SplitLogManager(241): Started splitting 1 logs in [hdfs://localhost:39302/user/jenkins/test-data/4b64143d-6b3f-4516-9efb-0c6c1a438493/WALs/asf903.gq1.ygridcore.net,56387,1518611700720-splitting] for [asf903.gq1.ygridcore.net,56387,1518611700720]
2018-02-14 12:35:07,999 DEBUG [Thread-213] procedure2.ProcedureExecutor(868): Stored pid=11, state=RUNNABLE:MOVE_REGION_UNASSIGN; MoveRegionProcedure hri=hbase:meta,,1.1588230740, source=asf903.gq1.ygridcore.net,51305,1518611700792, destination=
2018-02-14 12:35:08,003 DEBUG [PEWorker-9] procedure.ServerCrashProcedure(192): pid=10, state=RUNNABLE:SERVER_CRASH_PROCESS_META; ServerCrashProcedure server=asf903.gq1.ygridcore.net,51305,1518611700792, splitWal=true, meta=true; processing hbase:meta
2018-02-14 12:35:08,003 INFO  [PEWorker-10] procedure.MasterProcedureScheduler(813): pid=11, state=RUNNABLE:MOVE_REGION_UNASSIGN; MoveRegionProcedure hri=hbase:meta,,1.1588230740, source=asf903.gq1.ygridcore.net,51305,1518611700792, destination=, table=hbase:meta, hbase:meta,,1.1588230740
2018-02-14 12:35:08,003 INFO  [PEWorker-9] procedure2.ProcedureExecutor(1498): Initialized subprocedures=[{pid=12, ppid=10, state=RUNNABLE:RECOVER_META_SPLIT_LOGS; RecoverMetaProcedure failedMetaServer=asf903.gq1.ygridcore.net,51305,1518611700792, splitWal=true}]
2018-02-14 12:35:08,005 INFO  [PEWorker-10] procedure2.ProcedureExecutor(1498): Initialized subprocedures=[{pid=13, ppid=11, state=RUNNABLE:REGION_TRANSITION_DISPATCH; UnassignProcedure table=hbase:meta, region=1588230740, server=asf903.gq1.ygridcore.net,51305,1518611700792}]
2018-02-14 12:35:08,006 INFO  [Thread-213] assignment.MoveRegionProcedure(57): REMOVE
java.lang.Throwable: REMOVE: Just to see who is calling Move!!!
	at org.apache.hadoop.hbase.master.assignment.MoveRegionProcedure.<init>(MoveRegionProcedure.java:57)
	at org.apache.hadoop.hbase.master.assignment.AssignmentManager.createMoveRegionProcedure(AssignmentManager.java:740)
	at org.apache.hadoop.hbase.master.assignment.AssignmentManager.moveAsync(AssignmentManager.java:545)
	at org.apache.hadoop.hbase.master.assignment.AssignmentManager.lambda$checkIfShouldMoveSystemRegionAsync$0(AssignmentManager.java:488)
	at java.lang.Thread.run(Thread.java:748)
{code}

Its the facility added over in HBASE-18494 that is cutting in. In this case two RegionServers are killed and a new one started. This HBASE-18494 facility cuts in w/ its moves though ServerCrashProcedure is taking care of it. There is that and then the failure to give up if on unassign we timeout against the remote server. [~uagashe] FYI. 

.001 

    Only call AM.checkIfShouldMoveSystemRegionAsync if a node has been
    added. Do not call it if only one regionserver in cluster. Make it
    so ServerCrashProcedure is scheduled before it. Add logging if
    checkIfShouldMoveSystemRegionAsync was responsible for
    MOVE (Previous was a mystery when it cut in). Undo debug added by
    previous patch.

    Previously, we'd call checkIfShouldMoveSystemRegionAsync when
    there was a nodeChildrenChanged; i.e. any flux in cluster membership.
    These nodeChildrenChanged notifications happen before nodeDeleted.
    If a server crashed, checkIfShouldMoveSystemRegionAsync could run first,
    find the server that had not yet registered as crashed, find system
    tables on it and then try to move them. It would fail because
    server would not respond to RPC when we go to unassign. The region move
    would then suspend waiting on the servercrashprocedure to wake it up when
    done processing but this move had locked the region so SCP couldn't run....

    As it was, even if the move succeeded, it could make for dataloss since
    it could skirt SCP WAL splitting.


| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 14s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:blue}0{color} | {color:blue} findbugs {color} | {color:blue}  0m  0s{color} | {color:blue} Findbugs executables are not available. {color} |
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green}  0m  0s{color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:red}-1{color} | {color:red} test4tests {color} | {color:red}  0m  0s{color} | {color:red} The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch. {color} |
|| || || || {color:brown} master Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  4m 36s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 47s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  1m 10s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} shadedjars {color} | {color:green}  6m 24s{color} | {color:green} branch has no errors when building our shaded downstream artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 32s{color} | {color:green} master passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  4m 59s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 48s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 48s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  1m 15s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedjars {color} | {color:green}  5m 20s{color} | {color:green} patch has no errors when building our shaded downstream artifacts. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green} 20m 50s{color} | {color:green} Patch does not cause any errors with Hadoop 2.6.5 2.7.4 or 3.0.0. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 34s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}112m 22s{color} | {color:green} hbase-server in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 22s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black}153m 57s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hbase:eee3b01 |
| JIRA Issue | HBASE-19998 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12910684/HBASE-19998.master.001.patch |
| Optional Tests |  asflicense  javac  javadoc  unit  findbugs  shadedjars  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux 86b642c1a081 3.13.0-139-generic #188-Ubuntu SMP Tue Jan 9 14:43:09 UTC 2018 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh |
| git revision | master / c18e7a963d |
| maven | version: Apache Maven 3.5.2 (138edd61fd100ec658bfa2d307c43b76940a5d7d; 2017-10-18T07:58:13Z) |
| Default Java | 1.8.0_151 |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/11534/testReport/ |
| Max. process+thread count | 5262 (vs. ulimit of 10000) |
| modules | C: hbase-server U: hbase-server |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/11534/console |
| Powered by | Apache Yetus 0.7.0   http://yetus.apache.org |


This message was automatically generated.



Could we add some commit message to remind readers that the commit is for debug? It can help readers to realize that the flaky hasn't been fixed.

[~chia7712] My mistake. I thought I had. Will do in future sir.

I pushed the patch to master and branch-2. Leaving issue open to see if it fixes this interesting phenomenon.

The test failed in flakies a few times last night, https://builds.apache.org/job/HBASE-Flaky-Tests-branch2.0/2048/artifact/hbase-server/target/surefire-reports/org.apache.hadoop.hbase.security.visibility.TestVisibilityLabelsWithCustomVisLabService-output.txt, lets see how it does.

FAILURE: Integrated in Jenkins build HBase-Trunk_matrix #4591 (See [https://builds.apache.org/job/HBase-Trunk_matrix/4591/])
HBASE-19998 Flakey TestVisibilityLabelsWithDefaultVisLabelService (stack: rev 50c705dad9825d3095352b997be35a2568bd6190)
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionServerTracker.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/MoveRegionProcedure.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterServices.java
* (edit) hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/AssignmentManager.java


This is falling off the flakies list. Resovling as fixed.

OK, arrive here when implementing HBASE-20708. I wonder when will we call nodeCreated? I think nodeCreated will only be called when you call exists on an inexistent path on zk. But here, for RegionServerTracker, we will only set watchers on the existent children. And obviously, we can not know what is the node name for a new RS, so it is impossible to get a server added notification through nodeCreated...

