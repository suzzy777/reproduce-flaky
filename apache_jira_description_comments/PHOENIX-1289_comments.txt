[~jamestaylor] pls have a look, thanks in advance.

Yup, that seems like a legitimate bug. probably should be pretty easy to check though if the index has been removed in the initial failure policy.

Any interest in taking a shot at the fix [~daniel.M]? Should be just a couple lines in PhoenixIndexFailurePolicy where we loop through the index names.

[~jesse_yates] i have made a patch, pls review, thanks

Thanks [~daniel.M]! Two issues, one small, one large. 
(1) Spacing on the LOG message is off - I'll just fix that on commit. 
(2) The test doesn't seem to pass for me - with your fix it ends up still killing the RS and then going into an infinite loop as it tries to restore the index writes on region restore. I had to add in the following:
{code}
@@ -95,6 +95,7 @@ public class PhoenixIndexFailurePolicy extends  KillServerOnFailurePolicy {
         List<String> indexTableNames = new ArrayList<String>(1);
         try {
             for (HTableInterfaceReference ref : refs) {
+                indexTableNames.clear();
                 long minTimeStamp = 0;
                 Collection<Mutation> mutations = attempted.get(ref);
                 if (mutations != null) {
{code}

Which clears the index table names we lookup each time. Not quite sure why that's necessary - I'll have to look into it a little more - as the table thats removed should be removed all the time.

Maybe you have an idea?

But without the fix, the test definitely fails and its definitely a bug :)

[~jesse_yates] it' seems strange for me, here is what i'm understand after some debugging: there is only one index "S.I" in the unit test ,  so the first parameter in 
 {code}
handlerFailure(Multimap<HTableInterfaceReference, Mutation> attempted, Exception cause) 
{code}
should only has one entry for S.I , and then there will be no loop.  i can not understand why " indexTableNames.clear(); is necessary ", it always goes right on my side.


How about this version? I moved around the logic in the recover method a little bit to make it a little more readable and save on writes to the metadata table. Unfortunately, means a fair amount of line changes (though most of the original logic is preserved).

Only notable change from the previous is now we just keep a map of tableName -> min timestamp and then do the update all at once, rather than for each index table that failed.

+1. Would it be possible to get this committed today, [~jesse_yates]? We'd like to cut an RC tomorrow.

committed to master and 4.0. thanks [~daniel.M]!

FAILURE: Integrated in Phoenix | Master #403 (See [https://builds.apache.org/job/Phoenix-master/403/])
PHOENIX-1289 Drop index during upsert may abort RS (daniel meng + jyates) (jyates: rev faeab935554404a042285a01127e9b88b8e3a47c)
* phoenix-core/src/main/java/org/apache/phoenix/index/PhoenixIndexFailurePolicy.java
* phoenix-core/src/main/java/org/apache/phoenix/hbase/index/write/KillServerOnFailurePolicy.java
* phoenix-core/src/it/java/org/apache/phoenix/end2end/index/DropIndexDuringUpsertIT.java


hmm, looks like a flaky test issue

Bulk close of all issues that has been resolved in a released version. 

