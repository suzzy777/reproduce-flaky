Root cause is this part:

{code}
        synchronized (lockThread) {
            lockThread.notifyAll();
        }
        sleep(1000);
        runnable.run();
{code}

{{lockThread.notifyAll()}} lets the locker thread continue which releases the {{LockToken}}. Unfortunately, the hard-wired sleep (again) is not always enough, especially on a slow computer.

Logs with some extra stack traces:

First attempt fails to lock, expected:

{noformat}
09:25:59,915 ERROR CoordStatusTransitXCommand:517 - USER[-] GROUP[-] TOKEN[] APP[-] JOB[0000000-180522092559080-oozie-root-B] ACTION[0000000-180522092327168-oozie-root-W@:start:] XException, 
org.apache.oozie.command.CommandException: E0606: Could not get lock [coord_status_transit_06174fc0-bbb5-4dbf-a00a-d887f0683391], timed out [0]ms
        at org.apache.oozie.command.XCommand.acquireLock(XCommand.java:220)
        at org.apache.oozie.command.XCommand.call(XCommand.java:267)
        at org.apache.oozie.service.StatusTransitService$StatusTransitRunnable.coordTransit(StatusTransitService.java:192)
        at org.apache.oozie.service.StatusTransitService$StatusTransitRunnable.run(StatusTransitService.java:97)
        at org.apache.oozie.service.TestStatusTransitService.testCoordStatusTransitWithLock(TestStatusTransitService.java:1616)
...
{noformat}

Then second attempt fails to lock, unexpected:

{noformat}
09:26:01,929 ERROR CoordStatusTransitXCommand:517 - USER[-] GROUP[-] TOKEN[] APP[-] JOB[0000000-180522092559080-oozie-root-B] ACTION[0000000-180522092327168-oozie-root-W@:start:] XException, 
org.apache.oozie.command.CommandException: E0606: Could not get lock [coord_status_transit_0cd3bc8b-e0d4-49b2-a8a8-b150251cedc6], timed out [0]ms
        at org.apache.oozie.command.XCommand.acquireLock(XCommand.java:220)
        at org.apache.oozie.command.XCommand.call(XCommand.java:267)
        at org.apache.oozie.service.StatusTransitService$StatusTransitRunnable.coordTransit(StatusTransitService.java:192)
        at org.apache.oozie.service.StatusTransitService$StatusTransitRunnable.run(StatusTransitService.java:97)
        at org.apache.oozie.service.TestStatusTransitService.testCoordStatusTransitWithLock(TestStatusTransitService.java:1624)
...
{noformat}

The status was not updated to {{RUNNINGWITHERROR}}.

[~gezapeti] [~andras.piros] please review.

PreCommit-OOZIE-Build started



Testing JIRA OOZIE-3238

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1{color} There are no new bugs found in total.
. {color:green}+1{color} There are no new bugs found in [webapp].
. {color:green}+1{color} There are no new bugs found in [core].
. {color:green}+1{color} There are no new bugs found in [tools].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
. {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
. {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
. {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
. {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
. {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
. {color:green}+1{color} There are no new bugs found in [sharelib/pig].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive].
. {color:green}+1{color} There are no new bugs found in [sharelib/spark].
. {color:green}+1{color} There are no new bugs found in [client].
. {color:green}+1{color} There are no new bugs found in [examples].
. {color:green}+1{color} There are no new bugs found in [docs].
. {color:green}+1{color} There are no new bugs found in [server].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 2134
.    {color:orange}Tests failed at first run:{color}
TestCoordActionsKillXCommand#testActionKillCommandDate
.    For the complete list of flaky tests, see TEST-SUMMARY-FULL files.
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

. https://builds.apache.org/job/PreCommit-OOZIE-Build/560/



Thanks for the fix! It's great seeing more and more green runs as you progress with the flaky fixes.

This patch looks fine.
I just don't understand why we're logging the  {{log.error("InterruptedException caught", e);}} on error level. Isn't there a test case where we're doing the interruption on purpose? Or its really and indication of an error during test execution.

Previously it was swallowed. I don't think it'll every reach the catch block, but at least we should log something.

Yeah, we should log it for sure.
+1 then

Committed to {{master}}.

Closing issue; Oozie 5.1.0 is released.

