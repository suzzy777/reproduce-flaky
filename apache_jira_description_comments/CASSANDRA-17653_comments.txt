I didn't manage to reproduce it.Tried the single test in a loop, the the whole class. I got a few failures but from other test cases in the same class - https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=17653-4.1&filter=all

The problem looks like a setup issue with the Gossiper.

I have tried to repro with no luck. But I notied you [~e.dimitrova] did actually manage to repro on the j11 section. That being said it was 1 in 30K! Being a parametrized class, which can easily have runs cross-talk I don't think this is one should be a blocker for 4.1. I would leave it for 4.1.x instead unless we see it keeps coming back. Wdyt?

In my opinion we should improve the assertion so that we have a clear idea of the gossiper state if it ever fail again at the same place and close the ticket with cannot reproduce.

That's actually a good idea. I've pushed one proposal.

[~Bereng] I think your PR was not linked successfully, can you try again, please? 

Ops! linked

I had some look at the patch and considering that the issue might be a race condition requesting the message and checking the value in 2 separate calls can lead us to the wrong direction if the 2 calls return different results.

I also had a look at the code and it seems to me that there are some problems in {{ExpiringMemoizingSupplier}} code.
* {{expire}} is setting {{expirationNanos}} outside of a {{synchronize}} block which allow for concurrent modification as another thread might be modifying it within the {{get}} method.
* within the synchronized block in the {{get}} method {{expirationNanos}} will always be equals to {{ nanos}} as it cannot be equals to zero.

bq. can lead us to the wrong direction if the 2 calls return different results.

Correct but the alternative is to pollute and maybe release the {{isUpgradingFromVersionLowerThan()}} method with test debug msgs. I prefer to try my luck on getting a lucky test run that logs what I need. Sounds reasonable?

bq. within the synchronized block in the get method expirationNanos will always be equals to {{ nanos}} as it cannot be equals to zero

Unless an expiration happens setting it to 0, where it will not meet the if and return the memoized value. Leaving everything ready for the next get() to refresh the memoized value.

bq. expire is setting expirationNanos outside of a synchronize block
Isn't all this part of the expiration + double check locking logic?
- Non-memoized instances will always have a 0, meet {{if (nanos == this.expirationNanos)}} and return the non-memoized value always
- Memoized instances might get an unlucky expiration breaking the if where they will return the memoized value. The next get will force a refresh of the memoized value.

Iiuc the only hole I see if we might be swallowing expires() when overwriting {{expirationNanos}} inside the sync block. Getting expire() inside a sync block should suffice, do you agree?



{quote}Geeting expire() inside a sync block should suffice, do you agree?{quote}
Yes

{quote}Unless an expiration happens setting it to 0, where it will not meet the if and return the memoized value. Leaving everything ready for the next get() to refresh the memoized value.{quote}

What I mean is that:
{code}
nanos = now + this.durationNanos;
this.expirationNanos = nanos == 0L ? 1L : nanos;
{code}
can be simplified to:
{code}
this.expirationNanos = now + this.durationNanos;
{code} 

 {quote}I prefer to try my luck on getting a lucky test run that logs what I need. Sounds reasonable?{quote}
Luck does not tend to be something really reliable in my opinion. 
The alternative for me is to modify the method to allow us to capture the information we need. We could return a Pair<Boolean, CassandraVersion> for example


Ok rebased and pushed changes as agreed.

+1

Both PRs are up and CI is good. Leaving the commit for Monday to give [~blerer] time for a final pass, otherwise I'll merge as agreed offline.

It seems that {{InsertUpdateIfConditionTest}} and {{InsertUpdateIfConditionCollectionsTest}} is still flaky, as reported in CASSANDRA-18393. The new errors are of the form:
{code}
junit.framework.AssertionFailedError: 4.2.0-SNAPSHOT boolean:false
	at org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionTest.lambda$data$0(InsertUpdateIfConditionTest.java:68)
	at org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionTest.beforeSetup(InsertUpdateIfConditionTest.java:97)
	at org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionTest.before(InsertUpdateIfConditionTest.java:91)
{code}
and:
{code}
unit.framework.AssertionFailedError: 4.2.0-SNAPSHOT boolean:false
	at org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionTest.lambda$data$1(InsertUpdateIfConditionTest.java:72)
	at org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionTest.beforeSetup(InsertUpdateIfConditionTest.java:97)
	at org.apache.cassandra.cql3.validation.operations.InsertUpdateIfConditionTest.before(InsertUpdateIfConditionTest.java:91)
{code}
Bisect points to this ticket as the one introducing the change on the error messages:
 * Before: [commit|https://github.com/apache/cassandra/commit/89f3978dcde958fbad191b8cf628fd89ace64d7a] [CI|https://app.circleci.com/pipelines/github/adelapena/cassandra/2803/workflows/dc769b19-b383-4332-92db-12e7e54a49fa]
 * After: [commit|https://github.com/apache/cassandra/commit/cc28e1a85e2e5760436030ca57667fa69d6de233] [CI|https://app.circleci.com/pipelines/github/adelapena/cassandra/2804/workflows/5bec4990-05da-4879-b097-57116c30ba5b]

Bisection also shows that the original failures were introduced for the first time by CASSANDRA-16930:
 * Before: [commit|https://github.com/apache/cassandra/commit/ce2a0a28bc9ca21e1fae29f2a38448a877db06c3] [CI|https://app.circleci.com/pipelines/github/adelapena/cassandra/2807/workflows/e08f482a-40bd-4dfc-b322-353572717ada]
 * After: [commit|https://github.com/apache/cassandra/commit/fe9cff663b48fecdb964caaded2004e83a0c89f4] [CI|https://app.circleci.com/pipelines/github/adelapena/cassandra/2808/workflows/a63798dd-1916-4ef6-9e4c-9962127fc66b]

Let's continue the conversation in CASSANDRA-18393 imo

