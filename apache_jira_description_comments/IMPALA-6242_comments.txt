I haven't found anything problematic in the method of this test. The current MAX_TIMER_ERROR_NS is 15,000,000. One way to fix it is to increase it to at least 25ms.

IMPALA-6242: Reduce flakiness in TimerCounterTest

The error threshold in TimerCounterTest is 15ms, which is still not
enough in some rare cases. This patch increases it to 30ms.

Change-Id: Ifc038908857060ccbabfe30c46e72fd93907f412
Reviewed-on: http://gerrit.cloudera.org:8080/8670
Reviewed-by: Tim Armstrong <tarmstrong@cloudera.com>
Tested-by: Impala Public Jenkins


Saw this again on a failing test of a release build:

{noformat}
Impala/be/src/util/runtime-profile-test.cc:673
Expected: (stopwatch_value) >= (expected_value - TimerCounterTest::MAX_TIMER_ERROR_NS), actual: 509013420 vs 549399133
{noformat}

Thread creation + joining + clock error takes 70ms in this case. It doesn't sound normal.

[~tianyiwang], I think part of the problem may be that we are measuring the times in different ways. The MonotonicStopWatch does not necessarily call the same time function as MonotonicNanos() from time.h. 

For consistency/sanity perhaps we should measure times in runtime-profile-test using the MonotonicStopWatch and not by calling MonotonicNanos() directly from time.h

IMPALA-6242: Change runtime-profile-test into using the same clock

In runtime-profile-test, both MonotonicStopWatch::Now() and
MonotonicNanos() are used. The former may use CLOCK_MONOTONIC_COARSE or
CLOCK_MONOTONIC while the latter always uses CLOCK_MONOTONIC. This may
contribute to the flakiness of this test. This patch changes this test
into using MonotonicStopWatch::Now() uniformly.

Change-Id: I20648d88e666b08d6f2a67a4158244865a50b629
Reviewed-on: http://gerrit.cloudera.org:8080/9171
Reviewed-by: Alex Behm <alex.behm@cloudera.com>
Tested-by: Impala Public Jenkins

