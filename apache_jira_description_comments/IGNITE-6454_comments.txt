GitHub user dspavlov opened a pull request:

    https://github.com/apache/ignite/pull/2704

    IGNITE-6454: suite timeout replace to failure

    Interrupted flag check was added

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gridgain/apache-ignite ignite-6454-interrupt-fix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/ignite/pull/2704.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2704
    
----
commit cfe3240a7933894dc3e048d954de524a9061128e
Author: dpavlov <dpavlov@gridgain.com>
Date:   2017-09-20T13:07:11Z

    IGNITE-6454: suite timeout replace to failure: interrupted flag check was added

----


Test runs with interrupted flag check still contains timeouts,
https://ci.ignite.apache.org/viewType.html?buildTypeId=Ignite20Tests_IgniteDataStructures&branch_Ignite20Tests=pull%2F2704%2Fhead&tab=buildTypeStatusDiv

Still failed by same test
-
 GridCacheReplicatedDataStructuresFailoverSelfTest.testReentrantLockConstantMultipleTopologyChangeNonFailoverSafe (Last started) 

I add fail assertion for this test https://github.com/apache/ignite/pull/2959 plz merge it?
Thanks.

I think we need add some tests to this ticket. They hang with the same log.

GridCachePartitionedDataStructuresFailoverSelfTest#testReentrantLockConstantTopologyChangeNonFailoverSafe
 GridCachePartitionedDataStructuresFailoverSelfTest#testFairReentrantLockConstantTopologyChangeNonFailoverSafe

GridCacheReplicatedDataStructuresFailoverSelfTest#testReentrantLockConstantTopologyChangeNonFailoverSafe
 GridCacheReplicatedDataStructuresFailoverSelfTest#testFairReentrantLockConstantTopologyChangeNonFailoverSafe

 

I've created PR for that 
https://github.com/apache/ignite/pull/4682

GitHub user dgarus opened a pull request:

    https://github.com/apache/ignite/pull/4682

    IGNITE-6454 muted flaky tests

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dgarus/ignite IGNITE-6454

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/ignite/pull/4682.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #4682
    
----
commit 75646c063f93cb32dd4e85a4441ef431f44cf3dd
Author: dgarus <garus.d.g@...>
Date:   2018-09-04T15:32:12Z

    IGNITE-6454 muted flaky tests

----


Github user asfgit closed the pull request at:

    https://github.com/apache/ignite/pull/4682


GitHub user dgarus opened a pull request:

    https://github.com/apache/ignite/pull/4744

    IGNITE-6454 reproducer fast finish

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dgarus/ignite IGNITE-6454_fix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/ignite/pull/4744.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #4744
    
----
commit 25b2834ec58283e42801acc0ec98a7e530cc9d86
Author: dgarus <garus.d.g@...>
Date:   2018-09-13T12:07:47Z

    IGNITE-6454 reproducer fast finish

----


The cause of handing tests is a hanging transaction on the primary node for the intrinsic key of IgniteLock data structure.
The Near node is a node that attempts to aсquire a distributed lock, but the same time distributed has got state interruptAll == true and isBroken == true.
There are two messages for that transaction:
- GridDistributedLockRequest from near node to node with the primary partition.
- GridDistributedLockResponse from the node with the primary partition to near node.

Github user dgarus closed the pull request at:

    https://github.com/apache/ignite/pull/4744


Debugged test, found out that it is possible that transactions started by lock implementation is not rolledback if thread executing transaction is interrupted (lock implementation does this in GridCacheLockImpl.Sync.interruptAll).

Possible scenario:
 * main test thread calls cache.get inside tx, this creates GridDhtColocatedLockFuture, it is not mapped right away because topology change is in progress, main thread creates future and calls fut.get
 * main test thread is interrupted, tx is not mapped yet, NearTxFinishFuture does not expect there is non-completed lock operation and tx is rolledback
 * GridDhtColocatedLockFuture is ready to map and sends locks requests creating txs on remote node

Added test reproducing this issue without IgniteLock usage (CacheOperationsInterruptTest).

I see that futures created by GridNearTxLocal for all operation except 'getAll' do not allow 'fut.get()' interruption (see usages of GridNearTxLocal.nonInterruptable), I think the same should be done for 'getAll'.

Implemented fix to ignore interruptions for cache.get in pessimistic tx (d8e46de2899b35fa498310a31705e6a9760a84f3).

