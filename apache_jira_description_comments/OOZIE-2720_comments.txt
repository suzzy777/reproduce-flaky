In the following code, I looked at log statements and I see that sometimes "Num jobs to materialize" is > 0 (And the job id is same as in the test case), and we enters into the loop. In the loop, we modify last modified time. Then, it just matter of when the update statement gets executed. If it gets executed before we our assert statements in test, test fails. 

I do not understand the purpose of test fully. But looking at its name "testMaxMatThrottleNotPicked", I think we are testing that actions should not get picked for materialization due to max throttle value. Also, we want the last modified time to be same even after running {{CoordMaterializeTriggerRunnable}}.

I am putting max throttle as 0, so that no action will get picked for materialization and hence, not modifying the last modified time of job.

{code}
Class - CoordMaterializeTriggerService.CoordMaterializeTriggerRunnable.

private void materializeCoordJobs(Date currDate, int limit, XLog LOG, List<UpdateEntry> updateList)
                throws JPAExecutorException {
            try {
                List<CoordinatorJobBean> materializeJobs = CoordJobQueryExecutor.getInstance().getList(
                        CoordJobQuery.GET_COORD_JOBS_OLDER_FOR_MATERIALIZATION, currDate, limit);
                LOG.info("CoordMaterializeTriggerService - Curr Date= " + DateUtils.formatDateOozieTZ(currDate)
                        + ", Num jobs to materialize = " + materializeJobs.size());
                for (CoordinatorJobBean coordJob : materializeJobs) {
                    Services.get().get(InstrumentationService.class).get()
                            .incr(INSTRUMENTATION_GROUP, INSTR_MAT_JOBS_COUNTER, 1);
                    queueCallable(new CoordMaterializeTransitionXCommand(coordJob.getId(), materializationWindow));
                    coordJob.setLastModifiedTime(new Date());
                    updateList.add(new UpdateEntry<CoordJobQuery>(CoordJobQuery.UPDATE_COORD_JOB_LAST_MODIFIED_TIME,
                            coordJob));
                    
                    //XLog.getLog(getClass()).info("OOZIE job id in mat - = " + coordJob.getId());
                    //XLog.getLog(getClass())
                            //.info("OOZIE lastModifiedDate in mat = " + //coordJob.getLastModifiedTime().getTime());

                }
            }
            catch (JPAExecutorException jex) {
                LOG.warn("JPAExecutorException while attempting to materialize coordinator jobs", jex);
            }
        }
{code}

Testing JIRA OOZIE-2720

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1{color} FindBugs diff JAR has a weird MD5 sum, rejecting.
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 1815
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/3414/

Hi [~gezapeti], this is another sleep one. Could you please have a look?

I don't really feel comfortable with changing the throttling values while keeping the sleeps in the test.
I've introduced waitfors and the test seems stable on my machine now.
Attaching my version of the patch.


[~satishsaley] I think the main reason {{TestCoordMaterializeTriggerService#testMaxMatThrottleNotPicked()}} to be flakey is that it employs {{XTestCase#sleep()}} that employs {{Thread#sleep()}}.

So rather let the calls to {{CoordJobBean#setMatThrottle()}} unchanged as these seem to be most important to the business logic, but look for another method to wait, e. g. [{{CountDownLatch}}| http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CountDownLatch.html].

Minor fixes.

Testing JIRA OOZIE-2720

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1{color} FindBugs diff JAR has a weird MD5 sum, rejecting.
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1831
.    Tests failed: 2
.    Tests errors: 0

.    The patch failed the following testcases:

.      testRecovery(org.apache.oozie.action.hadoop.TestJavaActionExecutor)
.      testMaxMatThrottleNotPicked(org.apache.oozie.service.TestCoordMaterializeTriggerService)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/3460/

Testing JIRA OOZIE-2720

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:red}-1{color} FindBugs diff JAR has a weird MD5 sum, rejecting.
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 1831
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/3462/

+1. Committed to branch-4.3.0 and master. Thanks [~gezapeti] for the fix and [~satishsaley] for the initial patch. Thanks [~andras.piros] for reviewing the patch.

Thanks you for the review [~rohini]!
[~andras.piros], [~satishsaley], let's fix all the flaky tests! :)

Closing issue; Oozie 4.3.0 is released.

