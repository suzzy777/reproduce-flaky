kirklund opened a new pull request #5038:
URL: https://github.com/apache/geode/pull/5038


   GemFireCacheImplCloseTest.close_blocksUntilFirstCallToCloseCompletes
   has failed for a couple other developers. I'm marking it with Ignore
   while I try to reproduce and fix the problem.
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


Commit 653a1bc620a845801f6e3f1b0b10f87c3a1e7d10 in geode's branch refs/heads/develop from Kirk Lund
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=653a1bc ]

GEODE-8060: Ignore flaky GemFireCacheImplCloseTest test (#5038)

GemFireCacheImplCloseTest.close_blocksUntilFirstCallToCloseCompletes
has failed for a couple other developers. I'm marking it with Ignore
while I try to reproduce and fix the problem.

kirklund opened a new pull request #5039:
URL: https://github.com/apache/geode/pull/5039


   I hate creating a special package-private method just for the test BUT I can't think of an effective test without getting some sort of state from GemFireCacheImpl that identifies which call or which thread actually performed the close.
   
   Without identifying which call or thread performed the close, the test devolves to just asserting that two threads can call close but it can't really assert which call did the actual work of closing GemFireCacheImpl. From a really high level, we don't really care. But at a low level, we don't want the 2nd callers to return before the 1st caller has finished the close (doesn't matter if the 1st caller returns from close() after 2nd callers though).


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jchen21 commented on a change in pull request #5039:
URL: https://github.com/apache/geode/pull/5039#discussion_r418682332



##########
File path: geode-core/src/test/java/org/apache/geode/internal/cache/GemFireCacheImplCloseTest.java
##########
@@ -190,41 +188,33 @@ public void close_doesNothingIfAlreadyClosed() {
     verify(internalDistributedSystem).disconnect();
   }
 
-  @Ignore("GEODE-8060: wrong thread wins")
   @Test
   public void close_blocksUntilFirstCallToCloseCompletes() throws Exception {
     gemFireCacheImpl = gemFireCacheImpl(false);
     CyclicBarrier cyclicBarrier = new CyclicBarrier(3);
-    AtomicLong winner = new AtomicLong();
 
-    Future<Long> close1 = executorServiceRule.submit(() -> {
+    Future<Boolean> close1 = executorServiceRule.submit(() -> {
       synchronized (GemFireCacheImpl.class) {
-        long threadId = Thread.currentThread().getId();
         cyclicBarrier.await(getTimeout().toMillis(), MILLISECONDS);
-        gemFireCacheImpl.close();
-        winner.compareAndSet(0, threadId);
-        return threadId;
+        return gemFireCacheImpl.doClose("test", null, false, false, false);
       }
     });
 
     await().until(() -> cyclicBarrier.getNumberWaiting() == 1);
 
-    Future<Long> close2 = executorServiceRule.submit(() -> {
-      long threadId = Thread.currentThread().getId();
+    Future<Boolean> close2 = executorServiceRule.submit(() -> {
       cyclicBarrier.await(getTimeout().toMillis(), MILLISECONDS);
-      gemFireCacheImpl.close();
-      winner.compareAndSet(0, threadId);
-      return threadId;
+      return gemFireCacheImpl.doClose("test", null, false, false, false);
     });
 
     cyclicBarrier.await(getTimeout().toMillis(), MILLISECONDS);
 
-    long threadId1 = close1.get();
-    long threadId2 = close2.get();
+    boolean closedCache1 = close1.get();
+    boolean closedCache2 = close2.get();
 
-    assertThat(winner.get())
-        .as("ThreadId1=" + threadId1 + " and threadId2=" + threadId2)
-        .isEqualTo(threadId1);
+    assertThat(closedCache1)

Review comment:
       Just for safe, can we also assert `closedCache2` is `false`?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


kirklund commented on a change in pull request #5039:
URL: https://github.com/apache/geode/pull/5039#discussion_r418707102



##########
File path: geode-core/src/test/java/org/apache/geode/internal/cache/GemFireCacheImplCloseTest.java
##########
@@ -190,41 +188,33 @@ public void close_doesNothingIfAlreadyClosed() {
     verify(internalDistributedSystem).disconnect();
   }
 
-  @Ignore("GEODE-8060: wrong thread wins")
   @Test
   public void close_blocksUntilFirstCallToCloseCompletes() throws Exception {
     gemFireCacheImpl = gemFireCacheImpl(false);
     CyclicBarrier cyclicBarrier = new CyclicBarrier(3);
-    AtomicLong winner = new AtomicLong();
 
-    Future<Long> close1 = executorServiceRule.submit(() -> {
+    Future<Boolean> close1 = executorServiceRule.submit(() -> {
       synchronized (GemFireCacheImpl.class) {
-        long threadId = Thread.currentThread().getId();
         cyclicBarrier.await(getTimeout().toMillis(), MILLISECONDS);
-        gemFireCacheImpl.close();
-        winner.compareAndSet(0, threadId);
-        return threadId;
+        return gemFireCacheImpl.doClose("test", null, false, false, false);
       }
     });
 
     await().until(() -> cyclicBarrier.getNumberWaiting() == 1);
 
-    Future<Long> close2 = executorServiceRule.submit(() -> {
-      long threadId = Thread.currentThread().getId();
+    Future<Boolean> close2 = executorServiceRule.submit(() -> {
       cyclicBarrier.await(getTimeout().toMillis(), MILLISECONDS);
-      gemFireCacheImpl.close();
-      winner.compareAndSet(0, threadId);
-      return threadId;
+      return gemFireCacheImpl.doClose("test", null, false, false, false);
     });
 
     cyclicBarrier.await(getTimeout().toMillis(), MILLISECONDS);
 
-    long threadId1 = close1.get();
-    long threadId2 = close2.get();
+    boolean closedCache1 = close1.get();
+    boolean closedCache2 = close2.get();
 
-    assertThat(winner.get())
-        .as("ThreadId1=" + threadId1 + " and threadId2=" + threadId2)
-        .isEqualTo(threadId1);
+    assertThat(closedCache1)

Review comment:
       Good idea!




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


kirklund commented on pull request #5039:
URL: https://github.com/apache/geode/pull/5039#issuecomment-622594523


   IntegrationTest failure is caused by this PR. Do NOT merge this in until I fix it.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


kirklund opened a new pull request #5041:
URL: https://github.com/apache/geode/pull/5041


   I found and fixed the issues causing memcached IntegrationJUnitTest to fail. Please re-review and hopefully it should pass all precheckin jobs this time.
   
   I hate creating a special package-private method just for the test BUT I can't think of an effective test without getting some sort of state from GemFireCacheImpl that identifies which call or which thread actually performed the close.
   
   Without identifying which call or thread performed the close, the test devolves to just asserting that two threads can call close but it can't really assert which call did the actual work of closing GemFireCacheImpl. From a really high level, we don't really care. But at a low level, we don't want the 2nd callers to return before the 1st caller has finished the close (doesn't matter if the 1st caller returns from close() after 2nd callers though which is what causes the flakiness).


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


kirklund commented on pull request #5041:
URL: https://github.com/apache/geode/pull/5041#issuecomment-623579070


   @DonalEvans The problem in the previous PR were caused by me combining `if (isClosing` and `if (!skipAwait etc` into one if-block.
   
   Broken:
   ```
     private boolean waitIfClosing(boolean skipAwait) {
       if (isClosing && !skipAwait && !Thread.currentThread().equals(CLOSING_THREAD.get())) {
         try {
           isClosedLatch.await();
         } catch (InterruptedException ignore) {
           // ignored
         }
       return true;
       }
       return false;
     }
   ```
   Fixed:
   ```
     private boolean waitIfClosing(boolean skipAwait) {
       if (isClosing) {
         if (!skipAwait && !Thread.currentThread().equals(CLOSING_THREAD.get())) {
           try {
             isClosedLatch.await();
           } catch (InterruptedException ignore) {
             // ignored
           }
         }
         return true;
       }
       return false;
     }
   ```


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


kirklund edited a comment on pull request #5041:
URL: https://github.com/apache/geode/pull/5041#issuecomment-623579070


   @DonalEvans The problem in the previous PR was caused by me combining `if (isClosing` and `if (!skipAwait etc` into one if-block.
   
   Broken:
   ```
     private boolean waitIfClosing(boolean skipAwait) {
       if (isClosing && !skipAwait && !Thread.currentThread().equals(CLOSING_THREAD.get())) {
         try {
           isClosedLatch.await();
         } catch (InterruptedException ignore) {
           // ignored
         }
       return true;
       }
       return false;
     }
   ```
   Fixed:
   ```
     private boolean waitIfClosing(boolean skipAwait) {
       if (isClosing) {
         if (!skipAwait && !Thread.currentThread().equals(CLOSING_THREAD.get())) {
           try {
             isClosedLatch.await();
           } catch (InterruptedException ignore) {
             // ignored
           }
         }
         return true;
       }
       return false;
     }
   ```


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


kirklund edited a comment on pull request #5041:
URL: https://github.com/apache/geode/pull/5041#issuecomment-623579070


   @DonalEvans The problem in the previous PR was caused by me combining `if (isClosing` and `if (!skipAwait etc` into one if-block.
   
   Broken:
   ```
     private boolean waitIfClosing(boolean skipAwait) {
       if (isClosing && !skipAwait && !Thread.currentThread().equals(CLOSING_THREAD.get())) {
         try {
           isClosedLatch.await();
         } catch (InterruptedException ignore) {
           // ignored
         }
         return true;
       }
       return false;
     }
   ```
   Fixed:
   ```
     private boolean waitIfClosing(boolean skipAwait) {
       if (isClosing) {
         if (!skipAwait && !Thread.currentThread().equals(CLOSING_THREAD.get())) {
           try {
             isClosedLatch.await();
           } catch (InterruptedException ignore) {
             // ignored
           }
         }
         return true;
       }
       return false;
     }
   ```


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


kirklund commented on a change in pull request #5041:
URL: https://github.com/apache/geode/pull/5041#discussion_r420955598



##########
File path: geode-core/src/main/java/org/apache/geode/internal/cache/GemFireCacheImpl.java
##########
@@ -2377,15 +2381,25 @@ public void close(String reason, Throwable systemFailureCause, boolean keepAlive
       } finally {
         CLOSING_THREAD.remove();
       }
+      return true;
     }
   }
 
-  private void waitUntilClosed() {
-    try {
-      isClosedLatch.await();
-    } catch (InterruptedException ignore) {
-      // ignored
+  /**
+   * Returns true if caller waited on the {@code isClosedLatch}.
+   */
+  private boolean waitIfClosing(boolean skipAwait) {
+    if (isClosing) {
+      if (!skipAwait && !Thread.currentThread().equals(CLOSING_THREAD.get())) {
+        try {
+          isClosedLatch.await();
+        } catch (InterruptedException ignore) {
+          // ignored

Review comment:
       The interrupt flag should be reset after catching `InterruptedException`




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


A Pivotal Tracker story has been created for this Issue: https://www.pivotaltracker.com/story/show/172705193

Commit 9e957f1db7760aa2bdc767c9c469e926cd490cad in geode's branch refs/heads/develop from Kirk Lund
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=9e957f1 ]

GEODE-8060: Fix flakiness in GemFireCacheImplCloseTest (#5041)



