This is a patch file that fixes the issue. In order to have this work a new entry needs to be added to the configuration section for the maven-surefire-plugin. 

{code:title=pom.xml|borderStyle=solid}
...
<plugin>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-surefire-plugin</artifactId>
  <version>2.6</version>
  <configuration>
    <testErrorIgnore>true</testErrorIgnore>
  </configuration>
</plugin>
...
{code}

I'm running into this issue as well and its quite frustrating. This makes it very cumbersome to test probabilistic code with surefire. This is an example I'd expect to pass: 

{code:java}
    @Test(invocationCount = 100, successPercentage = 25)
    void testRandom() {
        // ~50% chance of generating 0 & 1
        int num = new Random().nextInt(2);
        Assert.assertEquals(num, 1);
    }
{code}

Though there are no test failures, each of the test cases where this ends up with an assertion failure surefire counts this as an error and fails the run.

I'd be happy to code up a fix if the patch provided on this isn't the desired way to handle this but, as it's stands there's is very useful functionality in TestNG which we simply can't use via Surefire. 


Hi Jon,

I'd say a valid patch should be limited to changes in the testng-provider module of Surefire (plus an integration test, of course). So if you find the right stiches to get that information cleanly out of the TestNG API and without having to re-implement that feature in Surefire, we're happy to review and integrate. 

It would also be OK if it only worked with the most recent version(s) of TestNG.

Hi Andreas,

I've dug into the code and created a pull request for this issue: https://github.com/apache/maven-surefire/pull/47

At the end of the day it's a one line fix and I've included a lot of details in the PR as to why I think this is the correct behavior. Please let me know if there's anything else you need for me to initiate the review process.





We're also running into this with Apache jclouds, so it would be great to see some movement here.

I understand [~agudian]'s comment about trying to keep the change minimal, but looking at the PR it's indeed a small change which seems to be (this coming from someone without much knowledge of the Surefire internals) "in the right place".

Is there some existing functionality that is working correctly that this PR is breaking?

I'll take a closer look on the PR soon-ish. 

Unfortunately, this patch doesn't seem to work for me :-( What I did:

1. Cloned the surefire project
2. Reverted to the 2.17 release commit and applied the patch
3. Built and installed the surefire plugin locally (version 2.17-SUREFIRE-654)
4. Ran the attached project with {{mvn clean test}}

The test should fail as all four invocations fail, but even with a success percentage of 99% the build succeeds. See attached output.

My environment:

Apache Maven 3.2.1 (ea8b2b07643dbb1b84b6d16e1f08391b666bc1e9; 2014-02-14T12:37:52-05:00)
Maven home: C:\Program Files (x86)\Apache\maven-3.2.1\bin\..
Java version: 1.7.0_40, vendor: Oracle Corporation
Java home: C:\Program Files\Java\jdk1.7.0_40\jre
Default locale: en_GB, platform encoding: Cp1252
OS name: "windows 7", version: "6.1", arch: "amd64", family: "windows"

@Andrew Phillips
You should be able to debug surefire on your side this way:

Start in project in console: 
mvnDebug test "-DdebugForkedProcess=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000"

Then open the Maven Surefire project in IDEA. 
I am using IDEA but you can use Eclipse as well.

Then in IDEA, Run/Debug Configurations > + > Remote > change to port 8000
Go to console. If you see halting maven process with something like Listening to port ..., then start remote debugging in IDEA, repeat again if wants to connect or if failed to reconnect.
In the "Remote" the best would be to choose the particular module to debug where you have made the changes. This is of course up to you.

Hi [~tibor17]:

Thanks for the hints! At this point, I am not able to investigate *why* exactly the test case I attached is failing - I just wanted to point out that, for me at least, the patch doesn't seem to be working.

I hope this will help whoever will review the patch determine whether it's correct or not.

I'll do the review and check why the fix is not working for [~demobox]

> I'll do the review and check why the fix is not working for Andrew Phillips

Thanks, [~agudian]!

I'm afraid I found what's wrong.

The test run listener reports all test attempts, the failing and the successful and they all show up in the test results / reports. So far so good, I guess.

But at the end, Surefire checks for each test method, if it was executed multiple times. If a test was executed multiple times and there were both failing and successfull attempts (regardless of their actual number), the test is marked as "Flaky" (a new feature introduced in 2.18):

{code}
Tests run: 8, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.265 sec <<< FAILURE! - in TestSuite
testFailure(testng.TestNGSuccessPercentFailingTest)  Time elapsed: 0 sec  <<< FAILURE!
java.lang.AssertionError: is odd: 3 expected:<true> but was:<false>
        at org.testng.Assert.fail(Assert.java:84)
        at org.testng.Assert.failNotEquals(Assert.java:438)
        at org.testng.Assert.assertTrue(Assert.java:32)
        at testng.TestNGSuccessPercentFailingTest.testFailure(TestNGSuccessPercentFailingTest.java:36)


Results :



Flaked tests:
testng.TestNGSuccessPercentFailingTest.testFailure(testng.TestNGSuccessPercentFailingTest)
  Run 1: TestNGSuccessPercentFailingTest.testFailure:36 is odd: 1 expected:<true> but was:<false>
  Run 2: PASS
  Run 3: TestNGSuccessPercentFailingTest.testFailure:36 is odd: 3 expected:<true> but was:<false>
  Run 4: PASS


Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Flakes: 1
{code}

Now Andrew's test contains this:
{code}
  @Test(invocationCount = 4, successPercentage = 99)
  public void testShouldFail_percentage99() {
    assertTrue(false);
  }
{code}

The first three times, the test is reported by TestNG via "onTestFailedButWithinSuccessPercentage", and with the patch marked as "success" in surefire. The last failure is reported via "onTestFailure", the new flaky-algorithm decides then that the test is just "flaky".

I've changed the flaky-detection to be only active if the new surefire property rerunFailingTestsCount > 0.

Let's see if that helps.

Not perfect, but it looks good to me. The commits are on master. 

Andrew, Jon: could you check if it works for you as well?

Closing as fixed for now.

A better interaction with the new "Flaky" tests feature would be cool, but should be handled separately if required.

[~jtodd], [~demobox]: thanks for your contributions!

Jon, could you please close the pull request on GitHub? That didn't happen automatically after I rebased the commit.

Thanks for your help in getting this fixed and in Andreas. I've closed the corresponding PR.

What is the process to get this out into Maven central, is the next release going out soon?

Very soon. I'd like to start the release procedure as soon as Tibor committed his last fix. So it's a merrly matter of days for 2.18 to arrive on central. 

> Closing as fixed for now.

Great, thanks, [~agudian]!

@Jon
I have finished with last commit. We are going to proceed with the release of SUREFIRE 2.18.

