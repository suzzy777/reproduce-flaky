alb3rtobr opened a new pull request #635:
URL: https://github.com/apache/geode-native/pull/635


   A segmentation fault is produced when `PdxInstanceFactory::create()` is called by several threads that are registering the same new pdx type.
   
   The core is produced here:
   ```
   void PdxInstanceImpl::toDataMutable(PdxWriter& writer) {
      auto pt = getPdxType();
      std::vector<std::shared_ptr<PdxFieldType>>* pdxFieldList =
          pt->getPdxFieldTypes();
   ```
   `getPdxType()` returns `nullptr`, so in the next line, there is segmentation fault when calling `pt->getPdxFieldTypes()`.
   
   I have seen the problem appears when `PdxInstanceImpl::getPdxType()` calls `PdxTypeRegistry::getPdxType()` and this method returns `nullptr` due to it is not able to found an entry in its `typeIdToPdxType_` map. But I have verified that at that point, the corresponding entry in `pdxTypeToTypeId_` map exists, so the maps were not aligned.
   
   I checked how they are updated, and I realized that two different locks are being used to update `pdxTypeToTypeId_` map first and `typeIdToPdxType_` after. So it seems the error is caused due to `typeIdToPdxType_` is checked before it is updated.
   
   The test case implemented does not fail every time it is executed, I have not been able to find a configuration to make it fail always, but I have not seen it failing after the change in `PdxTypeRegistry`.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alb3rtobr commented on pull request #635:
URL: https://github.com/apache/geode-native/pull/635#issuecomment-676479642


   Hi @pdxcodemonkey , @pivotal-jbarrett , @moleske . I have not been able to create a test case that fails every time it is executed. Without the fix, the test case I have implemented fails 70-80% of executions. And with the fix, I have not seen it fail yet. Do you think it would be enough to approve the PR?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


pivotal-jbarrett commented on pull request #635:
URL: https://github.com/apache/geode-native/pull/635#issuecomment-676515632


   > Hi @pdxcodemonkey , @pivotal-jbarrett , @moleske . I have not been able to create a test case that fails every time it is executed. Without the fix, the test case I have implemented fails 70-80% of executions. And with the fix, I have not seen it fail yet. Do you think it would be enough to approve the PR?
   
   Yes, I am fine with it. It's pretty clear when you do that math that the original code is wrong from a concurrency standpoint. Good find!


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


pivotal-jbarrett commented on a change in pull request #635:
URL: https://github.com/apache/geode-native/pull/635#discussion_r473143292



##########
File path: cppcache/src/PdxTypeRegistry.cpp
##########
@@ -89,8 +89,8 @@ int32_t PdxTypeRegistry::getPDXIdForType(std::shared_ptr<PdxType> nType,
     typeId = cache_->getSerializationRegistry()->GetPDXIdForType(pool, nType);
     nType->setTypeId(typeId);
     pdxTypeToTypeIdMap_.insert(std::make_pair(nType, typeId));

Review comment:
       Perhaps for readability we dispense with the old `insert` with `std::make_pair` and use `emplace`:
   ```C++
   pdxTypeToTypeIdMap_.emplace(nType, typeId);
   typeIdToPdxType_.emplace(typeId, nType);
   ```
   

##########
File path: cppcache/src/PdxTypeRegistry.cpp
##########
@@ -89,8 +89,8 @@ int32_t PdxTypeRegistry::getPDXIdForType(std::shared_ptr<PdxType> nType,
     typeId = cache_->getSerializationRegistry()->GetPDXIdForType(pool, nType);
     nType->setTypeId(typeId);
     pdxTypeToTypeIdMap_.insert(std::make_pair(nType, typeId));
+    typeIdToPdxType_.insert(std::make_pair(typeId, nType));
   }
-  addPdxType(typeId, nType);

Review comment:
       Perhaps it makes sense to remove this method and inline the single use in the `getPDXIdForType` function.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


pdxcodemonkey commented on pull request #635:
URL: https://github.com/apache/geode-native/pull/635#issuecomment-676524873


   Travis CI is failing due to a clang-format issue in the new test file.  Please run `cmake --build . --target all-clangformat` and check in the formatting changes.  Reminder, you will need clangformat v6 for compatibility.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


pdxcodemonkey commented on pull request #635:
URL: https://github.com/apache/geode-native/pull/635#issuecomment-676558659


   I'm also hitting this on Windows builds now, though it appears to have come in with yesterday's PR for GatewaySenderEventCallbackArgument:
   `Z:\nativeclient\cppcache\integration\test\WanDeserializationTest.cpp(169): error C3861: 'sleep': identifier not found`
   continuing to investigate...
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


pivotal-jbarrett commented on pull request #635:
URL: https://github.com/apache/geode-native/pull/635#issuecomment-676592891


   > I'm also hitting this on Windows builds now, though it appears to have come in with yesterday's PR for GatewaySenderEventCallbackArgument:
   > `Z:\nativeclient\cppcache\integration\test\WanDeserializationTest.cpp(169): error C3861: 'sleep': identifier not found`
   > continuing to investigate...
   
   Not sure how that ever worked given that's not really a standard function.
   You want `std::this_thread::sleep_for`.
   
   https://en.cppreference.com/w/cpp/thread/sleep_for


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


pivotal-jbarrett edited a comment on pull request #635:
URL: https://github.com/apache/geode-native/pull/635#issuecomment-676592891


   > I'm also hitting this on Windows builds now, though it appears to have come in with yesterday's PR for GatewaySenderEventCallbackArgument:
   > `Z:\nativeclient\cppcache\integration\test\WanDeserializationTest.cpp(169): error C3861: 'sleep': identifier not found`
   > continuing to investigate...
   
   Not sure how that ever worked given that's not really a standard function.
   You want `std::this_thread::sleep_for`.
   
   Also, sleeping in a test just makes it flakey. 
   
   https://en.cppreference.com/w/cpp/thread/sleep_for


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


pivotal-jbarrett edited a comment on pull request #635:
URL: https://github.com/apache/geode-native/pull/635#issuecomment-676592891


   > I'm also hitting this on Windows builds now, though it appears to have come in with yesterday's PR for GatewaySenderEventCallbackArgument:
   > `Z:\nativeclient\cppcache\integration\test\WanDeserializationTest.cpp(169): error C3861: 'sleep': identifier not found`
   > continuing to investigate...
   
   Not sure how that ever worked given that's not really a standard function.
   You want `std::this_thread::sleep_for`.
   
   Also, sleeping in a test just makes it flaky. 
   
   https://en.cppreference.com/w/cpp/thread/sleep_for


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alb3rtobr commented on a change in pull request #635:
URL: https://github.com/apache/geode-native/pull/635#discussion_r473716608



##########
File path: cppcache/src/PdxTypeRegistry.cpp
##########
@@ -89,8 +89,8 @@ int32_t PdxTypeRegistry::getPDXIdForType(std::shared_ptr<PdxType> nType,
     typeId = cache_->getSerializationRegistry()->GetPDXIdForType(pool, nType);
     nType->setTypeId(typeId);
     pdxTypeToTypeIdMap_.insert(std::make_pair(nType, typeId));
+    typeIdToPdxType_.insert(std::make_pair(typeId, nType));
   }
-  addPdxType(typeId, nType);

Review comment:
       `PdxTypeRegistry::addPdxType()` is used several times in `PdxHelper` class, I cannot be removed. It is also used other time in `PdxTypeRegistry` class, and I think it has sense to keep it for readability: it cannot be replace just by a `typeIdToPdxType_.emplace()` call because it is also needed to acquire the lock, which is done inside `addPdxType()`




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alb3rtobr commented on a change in pull request #635:
URL: https://github.com/apache/geode-native/pull/635#discussion_r473746105



##########
File path: cppcache/src/PdxTypeRegistry.cpp
##########
@@ -89,8 +89,8 @@ int32_t PdxTypeRegistry::getPDXIdForType(std::shared_ptr<PdxType> nType,
     typeId = cache_->getSerializationRegistry()->GetPDXIdForType(pool, nType);
     nType->setTypeId(typeId);
     pdxTypeToTypeIdMap_.insert(std::make_pair(nType, typeId));

Review comment:
       done!




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alb3rtobr commented on a change in pull request #635:
URL: https://github.com/apache/geode-native/pull/635#discussion_r473716608



##########
File path: cppcache/src/PdxTypeRegistry.cpp
##########
@@ -89,8 +89,8 @@ int32_t PdxTypeRegistry::getPDXIdForType(std::shared_ptr<PdxType> nType,
     typeId = cache_->getSerializationRegistry()->GetPDXIdForType(pool, nType);
     nType->setTypeId(typeId);
     pdxTypeToTypeIdMap_.insert(std::make_pair(nType, typeId));
+    typeIdToPdxType_.insert(std::make_pair(typeId, nType));
   }
-  addPdxType(typeId, nType);

Review comment:
       `PdxTypeRegistry::addPdxType()` is used several times in `PdxHelper` class, it cannot be removed. It is also used other time in `PdxTypeRegistry` class, and I think it has sense to keep it for readability: it cannot be replace just by a `typeIdToPdxType_.emplace()` call because it is also needed to acquire the lock, which is done inside `addPdxType()`




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alb3rtobr commented on pull request #635:
URL: https://github.com/apache/geode-native/pull/635#issuecomment-677451250


   > > I'm also hitting this on Windows builds now, though it appears to have come in with yesterday's PR for GatewaySenderEventCallbackArgument:
   > > `Z:\nativeclient\cppcache\integration\test\WanDeserializationTest.cpp(169): error C3861: 'sleep': identifier not found`
   > > continuing to investigate...
   > 
   > Not sure how that ever worked given that's not really a standard function.
   > You want `std::this_thread::sleep_for`.
   > 
   > Also, sleeping in a test just makes it flaky.
   > 
   > https://en.cppreference.com/w/cpp/thread/sleep_for
   
   Ok, Im going to fix in a separate PR.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


alb3rtobr edited a comment on pull request #635:
URL: https://github.com/apache/geode-native/pull/635#issuecomment-677451250


   > > I'm also hitting this on Windows builds now, though it appears to have come in with yesterday's PR for GatewaySenderEventCallbackArgument:
   > > `Z:\nativeclient\cppcache\integration\test\WanDeserializationTest.cpp(169): error C3861: 'sleep': identifier not found`
   > > continuing to investigate...
   > 
   > Not sure how that ever worked given that's not really a standard function.
   > You want `std::this_thread::sleep_for`.
   > 
   > Also, sleeping in a test just makes it flaky.
   > 
   > https://en.cppreference.com/w/cpp/thread/sleep_for
   
   Ok, Im going to fix it in a separate PR.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


pdxcodemonkey merged pull request #635:
URL: https://github.com/apache/geode-native/pull/635


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


Commit c791081cb38e225a45c3bb05efb60280fa9caa33 in geode-native's branch refs/heads/develop from Alberto Bustamante Reyes
[ https://gitbox.apache.org/repos/asf?p=geode-native.git;h=c791081 ]

GEODE-8436: Several threads calling PdxInstanceFactory::create() causes seg fault (#635)

* Add test case to reproduce the issue
* Update PdxTypeRegistry maps in the same lock


Commit c791081cb38e225a45c3bb05efb60280fa9caa33 in geode-native's branch refs/heads/develop from Alberto Bustamante Reyes
[ https://gitbox.apache.org/repos/asf?p=geode-native.git;h=c791081 ]

GEODE-8436: Several threads calling PdxInstanceFactory::create() causes seg fault (#635)

* Add test case to reproduce the issue
* Update PdxTypeRegistry maps in the same lock


Commit 7797a1266079fd729f40ee1d98709b6f97822b8c in geode-native's branch refs/heads/develop from Blake Bender
[ https://gitbox.apache.org/repos/asf?p=geode-native.git;h=7797a12 ]

Revert "GEODE-8436: Several threads calling PdxInstanceFactory::create() causes seg fault (#635)"

This reverts commit c791081cb38e225a45c3bb05efb60280fa9caa33.
- Appears to be causing a test failure on RHEL platform


[~alberto.bustamante.reyes] this is causing a failure in the test
{code:java}
testThinClientPoolExecuteHAFunction {code}
on RedHat (RHEL7 & RHEL8 both fail).  Per our policy I've reverted the change while we investigate.  If you have access to a RHEL machine, you're welcome to try and track things down.  I will investigate here as time permits.  What I see consistently in our output logs is this:
{quote}[error 2020/08/20 17:09:00.313552 UTC heavy-lifter-ae0a174c-1be5-522e-8b3f-b521b672e4d1:104377 139991808305216] Execute: An exception (org.apache.geode.cache.execute.FunctionException: org.apache.geode.internal.cache.execute.InternalFunctionInvocationTargetException: memberDeparted event for < heavy-lifter-ae0a174c-1be5-522e-8b3f-b521b672e4d1(GFECS24955:104622)<ec><v1>:41001 > crashed, false
 at org.apache.geode.internal.cache.partitioned.PRFunctionStreamingResultCollector.getResultInternal(PRFunctionStreamingResultCollector.java:115)
 at org.apache.geode.internal.cache.execute.ResultCollectorHolder.getResult(ResultCollectorHolder.java:53)
 at org.apache.geode.internal.cache.partitioned.PRFunctionStreamingResultCollector.getResult(PRFunctionStreamingResultCollector.java:88)
 at org.apache.geode.internal.cache.tier.sockets.command.ExecuteRegionFunction66.executeFunctionWithResult(ExecuteRegionFunction66.java:406)
 at org.apache.geode.internal.cache.tier.sockets.command.ExecuteRegionFunction66.cmdExecute(ExecuteRegionFunction66.java:201)
 at org.apache.geode.internal.cache.tier.sockets.BaseCommand.execute(BaseCommand.java:183)
 at org.apache.geode.internal.cache.tier.sockets.ServerConnection.doNormalMessage(ServerConnection.java:848)
 at org.apache.geode.internal.cache.tier.sockets.OriginalServerConnection.doOneMessage(OriginalServerConnection.java:72)
 at org.apache.geode.internal.cache.tier.sockets.ServerConnection.run(ServerConnection.java:1212)
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
 at org.apache.geode.internal.cache.tier.sockets.AcceptorImpl.lambda$initializeServerConnectionThreadPool$3(AcceptorImpl.java:676)
 at org.apache.geode.logging.internal.executors.LoggingThreadFactory.lambda$newThread$0(LoggingThreadFactory.java:119)
 at java.lang.Thread.run(Thread.java:748)
 Caused by: org.apache.geode.internal.cache.execute.InternalFunctionInvocationTargetException: memberDeparted event for < heavy-lifter-ae0a174c-1be5-522e-8b3f-b521b672e4d1(GFECS24955:104622)<ec><v1>:41001 > crashed, false
 at org.apache.geode.internal.cache.partitioned.PRFunctionStreamingResultCollector.memberDeparted(PRFunctionStreamingResultCollector.java:375)
 at org.apache.geode.distributed.internal.ClusterDistributionManager$MemberDepartedEvent.handleEvent(ClusterDistributionManager.java:2502)
 at org.apache.geode.distributed.internal.ClusterDistributionManager$MemberEvent.handleEvent(ClusterDistributionManager.java:2432)
 at org.apache.geode.distributed.internal.ClusterDistributionManager$MemberEvent.handleEvent(ClusterDistributionManager.java:2421)
 at org.apache.geode.distributed.internal.ClusterDistributionManager.handleMemberEvent(ClusterDistributionManager.java:1401)
 at org.apache.geode.distributed.internal.ClusterDistributionManager.access$200(ClusterDistributionManager.java:108)
 at org.apache.geode.distributed.internal.ClusterDistributionManager$MemberEventInvoker.run(ClusterDistributionManager.java:1433)
 ... 1 more
 ) happened at remote server.
 [info 2020/08/20 17:09:00.314091 UTC heavy-lifter-ae0a174c-1be5-522e-8b3f-b521b672e4d1:104377 139991808305216] Close connection message failed with msg: TcrConnection::send: connection failure
 [info 2020/08/20 17:09:00.314303 UTC heavy-lifter-ae0a174c-1be5-522e-8b3f-b521b672e4d1:104377 139991808305216] Removing bucketServerLocation [heavy-lifter-ae0a174c-1be5-522e-8b3f-b521b672e4d1.c.gemfire-dev.internal:24955]--1-0-0 due to GF_IOERR0% tests passed, 1 tests failed out of 1{quote}

Explanation of the reported callstack from [~boglesby]:

"ExecuteRegionFunction66 is an onRegion function execution with no single hop (either single hop is disabled on the client or the client doesn't have the metadata).PRFunctionStreamingResultCollector.getResultInternal is waiting for the result on the server that receives the request.The exception means the server being waited on crashed while executing the function.If I put a sleep in the Function execute method, then kill that server, I see a similar (not exact though) stack. "

alb3rtobr commented on pull request #635:
URL: https://github.com/apache/geode-native/pull/635#issuecomment-678108637


   Just to confirm: the problem for the revert is that the new test case of this PR fails on RHEL platform, or it is that the code changed is making other tests to fail?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


The fix appears to be causing an existing test to fail, not the new one.  The test is called testThinClientPoolExecuteHAFunction.
{code:java}
cd build/cppcache/integration-test
ctest -R testThinClientPoolExecuteHAFunction --timeout 500 {code}
This is timing out on our RHEL tests, per the above details.

I think there is a problem with the test. I have just run it 10 times on my laptop (ubuntu) with the current content of develop branch (so without the reverted commit) [ * ], and it has passed only twice. The rest of executions it failed with the same exception you saw on RHEL platform.

So it seems the commit of this ticket is not the root cause of the failure.

Example:
{code}
[error 2020/08/25 12:42:20.234553 CEST alb3rtobr-XPS:26235 140597717040256] Execute: An exception (org.apache.geode.cache.execute.FunctionException: org.apache.geode.internal.cache.execute.InternalFunctionInvocationTargetException: memberDeparted event for < alb3rtobr-XPS(GFECS19501:26645)<ec><v2>:41006 > crashed, false
        at org.apache.geode.internal.cache.partitioned.PRFunctionStreamingResultCollector.getResultInternal(PRFunctionStreamingResultCollector.java:115)
        at org.apache.geode.internal.cache.execute.ResultCollectorHolder.getResult(ResultCollectorHolder.java:53)
        at org.apache.geode.internal.cache.partitioned.PRFunctionStreamingResultCollector.getResult(PRFunctionStreamingResultCollector.java:88)
        at org.apache.geode.internal.cache.tier.sockets.command.ExecuteRegionFunction66.executeFunctionWithResult(ExecuteRegionFunction66.java:406)
        at org.apache.geode.internal.cache.tier.sockets.command.ExecuteRegionFunction66.cmdExecute(ExecuteRegionFunction66.java:201)
        at org.apache.geode.internal.cache.tier.sockets.BaseCommand.execute(BaseCommand.java:183)
        at org.apache.geode.internal.cache.tier.sockets.ServerConnection.doNormalMessage(ServerConnection.java:848)
        at org.apache.geode.internal.cache.tier.sockets.OriginalServerConnection.doOneMessage(OriginalServerConnection.java:72)
        at org.apache.geode.internal.cache.tier.sockets.ServerConnection.run(ServerConnection.java:1212)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at org.apache.geode.internal.cache.tier.sockets.AcceptorImpl.lambda$initializeServerConnectionThreadPool$3(AcceptorImpl.java:686)
        at org.apache.geode.logging.internal.executors.LoggingThreadFactory.lambda$newThread$0(LoggingThreadFactory.java:119)
        at java.lang.Thread.run(Thread.java:748)
Caused by: org.apache.geode.internal.cache.execute.InternalFunctionInvocationTargetException: memberDeparted event for < alb3rtobr-XPS(GFECS19501:26645)<ec><v2>:41006 > crashed, false
        at org.apache.geode.internal.cache.partitioned.PRFunctionStreamingResultCollector.memberDeparted(PRFunctionStreamingResultCollector.java:375)
        at org.apache.geode.distributed.internal.ClusterDistributionManager$MemberDepartedEvent.handleEvent(ClusterDistributionManager.java:2494)
        at org.apache.geode.distributed.internal.ClusterDistributionManager$MemberEvent.handleEvent(ClusterDistributionManager.java:2424)
        at org.apache.geode.distributed.internal.ClusterDistributionManager$MemberEvent.handleEvent(ClusterDistributionManager.java:2413)
        at org.apache.geode.distributed.internal.ClusterDistributionManager.handleMemberEvent(ClusterDistributionManager.java:1401)
        at org.apache.geode.distributed.internal.ClusterDistributionManager.access$200(ClusterDistributionManager.java:108)
        at org.apache.geode.distributed.internal.ClusterDistributionManager$MemberEventInvoker.run(ClusterDistributionManager.java:1433)
        ... 1 more
) happened at remote server.

{code}

[ * ] : Head of develop branch when I run the tests was at 03ccf6feac7684f821beeb002f7d751c4961c46f ( GEODE-8445: Remove copy step for cryptoimpl library (#640) )

I have been running the test 10 times in a row on different commits in develop branch, and I have found out that the test was working fine until this commit from 22nd June:

GEODE-8231: remove bucket server location from metadata when server down (#615)
85951d7e23a9cb493fde16d09a56c785d09d6ba5

After that commit, the test became flaky.

Could someone check on RHEL reverting GEODE-8231 and "reverting the revert" of this ticket if the test is working? 

Thanks for investigating, Alberto.  I'll run a CI pass with GEODE-8436 reapplied and GEODE-8231 reverted, and see if it looks better.  If so, the next step is most likely to go ahead and do the same thing in develop, but I'll get back to you beforehand.

Hi [~bbender] . [~alberto.bustamante.reyes] told me about the possible problem caused by GEODE-8231. I have seen that there is a bug in that PR that is causing the test case to fail. I will provide a fix for it. See GEODE-8457.

Thanks, [~alberto.gomez].  I have verified that 8436 by itself isn't causing the issue, so I'll reapply [~alberto.bustamante.reyes]'s fix for that.  You can either open a new issue for the 8231 fix, or submit a fix PR for the same issue.

Commit dd1acb96a4a51b0736665ed7921e53f0ec30b2fe in geode-native's branch refs/heads/develop from Blake Bender
[ https://gitbox.apache.org/repos/asf?p=geode-native.git;h=dd1acb9 ]

Revert "Revert "GEODE-8436: Several threads calling PdxInstanceFactory::create() causes seg fault (#635)""

This reverts commit 7797a1266079fd729f40ee1d98709b6f97822b8c.


Commit c791081cb38e225a45c3bb05efb60280fa9caa33 in geode-native's branch refs/heads/feature/asio from Alberto Bustamante Reyes
[ https://gitbox.apache.org/repos/asf?p=geode-native.git;h=c791081 ]

GEODE-8436: Several threads calling PdxInstanceFactory::create() causes seg fault (#635)

* Add test case to reproduce the issue
* Update PdxTypeRegistry maps in the same lock


Commit 7797a1266079fd729f40ee1d98709b6f97822b8c in geode-native's branch refs/heads/feature/asio from Blake Bender
[ https://gitbox.apache.org/repos/asf?p=geode-native.git;h=7797a12 ]

Revert "GEODE-8436: Several threads calling PdxInstanceFactory::create() causes seg fault (#635)"

This reverts commit c791081cb38e225a45c3bb05efb60280fa9caa33.
- Appears to be causing a test failure on RHEL platform


Commit dd1acb96a4a51b0736665ed7921e53f0ec30b2fe in geode-native's branch refs/heads/feature/asio from Blake Bender
[ https://gitbox.apache.org/repos/asf?p=geode-native.git;h=dd1acb9 ]

Revert "Revert "GEODE-8436: Several threads calling PdxInstanceFactory::create() causes seg fault (#635)""

This reverts commit 7797a1266079fd729f40ee1d98709b6f97822b8c.


