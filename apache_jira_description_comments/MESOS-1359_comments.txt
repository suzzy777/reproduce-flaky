Just wanted to follow up with first observation; exit code 126 is also thrown on "Permission denied". I am pairing up with BenM to solve this issue.

My hunch would be that the following fails because {{nobody}} might not have a shell on the PATH:

{code: title=mesos_containerizer.cpp}
  // Execute the command (via '/bin/sh -c command').
  execl("/bin/sh", "sh", "-c", command.value().c_str(), (char*) NULL);
{code}

Here we have to be able to find 'sh' on the PATH for this to work.

Will disable the test for now. It is tricky to get this kind of test going without knowing the presence of a non-root account on a box :-/ We need to be root to do chown (therefore the test is root only) and we therefore don't know the regular user account running the test.

[~bmahler] - Sorry for stalling on this. I don't think we can assume the presence of any other (shell-privileged) users either. 
Another direction we can go, is to use a "mesos" user (if present) and skip the test otherwise. That way, we can explicitly setup a user account for the test (and other mesos related things) which we know can access /bin/sh.

Thoughts?

Thinking about it - would

{code}
if(os::system("su " + testUser + " -c '/bin/sh -c whoami'") != 0) {
  ...
  return;
}
{code}

work for you guys?

Updated review with helper program that let's us do the user comparison without using a shell

commit 75bf214e605a5cff813c8992c33cf7bcb9fda0b4
Author: Niklas Nielsen <nik@qni.dk>
Date:   Fri Nov 21 13:30:18 2014 -0800

    Changed RunTaskWithCommandInfoWithUser to not use shell.
    
    The 'nobody' user is restricted on some systems from shell access and
    broke the task.user tests (which have been disabled since then).  With
    the command.shell field, the test can run the command directly.
    
    Review: https://reviews.apache.org/r/26894


