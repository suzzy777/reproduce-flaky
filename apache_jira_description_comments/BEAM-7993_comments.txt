Similar failures:
https://builds.apache.org/job/beam_PreCommit_Portable_Python_Commit/5505/consoleFull
https://builds.apache.org/job/beam_PreCommit_Portable_Python_Commit/5508/console

[~tvalentyn], [~robertwb]: Could either of you forward this to someone for triage?

Same issue made [beam_PreCommit_Portable_Python_Cron|https://builds.apache.org/view/A-D/view/Beam/view/PostCommit/job/beam_PreCommit_Portable_Python_Cron/] very flaky recently. It failed only py35 batch and streaming wordcount test. py2 test passed as expected.

A most recent failure: https://builds.apache.org/view/A-D/view/Beam/view/PostCommit/job/beam_PreCommit_Portable_Python_Cron/1044/

It looks like we are only waiting one minute for the Dockerized SDK workers to start:

[https://github.com/apache/beam/blob/c2f0d282337f3ae0196a7717712396a5a41fdde1/runners/java-fn-execution/src/main/java/org/apache/beam/runners/fnexecution/environment/DockerEnvironmentFactory.java#L157-L160]

We should probably wait longer for the Docker containers to start before giving up.

A side note about this test:
Now we only have py2 and py35, so it only fails with py35. I am introducing minor versions, which will add py36 and py37, and all py3 are flaky.
It's really difficult to pass Portable Precommit with minor versions, the chance of passing the test is around 15%.
 
From Ahmet: 
perhaps we need different pre commits for different versions so that flakes do not stack up. Even if a suite is >90% reliable, if we stack up with 4 version, the reliability will get much lower.

I didn't realize this only seems to be affecting Python 3. That's suspicious.

-ah, this happens to py2 as well, but not as frequent as py3, according to the samples I observed so far.-

-examples:- [-https://scans.gradle.com/s/eja72nxfk7uzq/failure#top=0-]

sorry, I shared a wrong link. Then all failures I observed were on py3.

It is possible the Docker containers are failing to start for some reason, then are immediately being removed (because of the --rm argument [1])

[[1] https://docs.docker.com/engine/reference/run/#clean-up---rm|https://docs.docker.com/engine/reference/run/#clean-up---rm]

Thanks for sharing Hannah. The failure you linked actually looks subtly different than the other failures – it couldn't find the container image, while elsewhere the problem was that the container image was presumably fetched successfully but then failed to start up properly.

It would be useful to retain the containers briefly so we can print their logs if they fail. We could then remove them immediately after to prevent wasting disk space.

This seem to fail python precommits consistently lately
[https://builds.apache.org/job/beam_PreCommit_Portable_Python_Cron/1048/]

I created BEAM-8015 to help debug this issue.

[https://builds.apache.org/job/beam_PreCommit_Portable_Python_Commit/5720/consoleFull]

We now have container logs for the most recent failure. Looks like this is the root cause:

16:04:21 Traceback (most recent call last):
16:04:21 File "/usr/local/lib/python3.5/runpy.py", line 183, in _run_module_as_main
16:04:21 mod_name, mod_spec, code = _get_module_details(mod_name, _Error)
16:04:21 File "/usr/local/lib/python3.5/runpy.py", line 109, in _get_module_details
16:04:21 __import__(pkg_name)
16:04:21 File "/usr/local/lib/python3.5/site-packages/apache_beam/__init__.py", line 97, in <module>
16:04:21 from apache_beam import coders
16:04:21 File "/usr/local/lib/python3.5/site-packages/apache_beam/coders/__init__.py", line 19, in <module>
16:04:21 from apache_beam.coders.coders import *
16:04:21 File "/usr/local/lib/python3.5/site-packages/apache_beam/coders/coders.py", line 33, in <module>
16:04:21 from apache_beam.coders import coder_impl
16:04:21 File "apache_beam/utils/windowed_value.pxd", line 28, in init apache_beam.coders.coder_impl
16:04:21 File "apache_beam/utils/windowed_value.py", line 34, in init apache_beam.utils.windowed_value
16:04:21 File "/usr/local/lib/python3.5/site-packages/apache_beam/utils/timestamp.py", line 34, in <module>
16:04:21 from apache_beam.portability import common_urns
16:04:21 File "/usr/local/lib/python3.5/site-packages/apache_beam/portability/common_urns.py", line 24, in <module>
16:04:21 from apache_beam.portability.api import beam_runner_api_pb2
16:04:21 File "/usr/local/lib/python3.5/site-packages/apache_beam/portability/api/beam_runner_api_pb2.py", line 16, in <module>
16:04:21 import endpoints_pb2 as endpoints__pb2
16:04:21 ImportError: No module named 'endpoints_pb2'

This looks like the same error that caused BEAM-7527

Looks like same issue in BEAM-7527. It happens if multiple 'python setup.py' run concurrently under same project. In portable precommit, py2 and py3 tests are triggered at same time. It's likely that part of the test call setuptool and unfortunately conflict with each other.

I am not sure if this is the root cause, because it doesn’t answer following two questions.
1. Why it doesn’t happen at local?
2. Why only py3 fails, but not py2?

I will try to not parallel run portable tests later today to see if the problem is solved. 

I tried to run at local with py2 and py36.

I ran more than 10 times, and all of them parallel running py2 and py36 and no one failed. So I haven't try to run one by one, because it doesn't explain non-parallel run would solve the problem.

I wrote a build.gradle to trigger python portable precommit job at local. Jenkins uses a job to build the tasks, so it might not be exactly same.

[~markflyhigh], are you familiar with gradle/jenkins? I try to remove parallel part from the Jenkins job, but all precommit job share the same job builder, impact range is very big. Is it possible for you to remove parallel part for Python Portable Precommit tasks only?

I don't have much insight to test itself. But let's make those tests running sequentially and see how it goes.

I investigated a little more.

We are not parallel running multiple sdist tasks for Python portable precommit tasks. Only one sdist task is running and all precommit tasks depend on it , which means all precommit tests are sharing the same beam tar ball, so I think we do have endpoints_pb2.py, because it doesn't fail with py2. But somehow, it is not recognized by py3.

We need to investigate 
 # Is above conclusion correct? [~markflyhigh], can you please help with it?
 # why import failure only happens at Jenkins, but not at local? What is env diff? who can help with it?
 # why import doesn't fail some time? If it's a py3 issue, it should happen consistently, but it doesn't fail some time, though this chance is small. [~tvalentyn], do you have any insights?
 # anything I missed here..

Thank you for investigating Hannah. You are right, only one sdist runs and both py2 and py35 container use same output tarball. So now, I don't know what cause this ImportError. It's likely py35 container wasn't built correctly, or some step in pipeline execution is wrong under current test configurations. 

Just in case, I still refactord the Jenkins config to make those tests run in sequential. Let's see if the failure still exist or not.

If the error is reoccurring, we could try to SSH into the VM, SSH into the failed container and inspect contents of SDK tarball, or installed version of Beam SDK in the container. If SDK tarball differs in passing (say, python2) and failing (python3) container for a postcommit run against the same PR, it may mean that we build SDK tarball twice, and as we know, it does not work well if we build it in parallel. Perhaps we can find out other clues. 

Thanks Mark for trying it out.

I analyzed last 60 Python Portable Precommit tests from Jenkins to see if I can find some patterns. There was no obvious patterns, however, all tests submitted to Jenkins agent12 failed. It's also more likely to fail if we parallel run multiple Python Portable Precommit tests on the same agent, which means we may be running multiple sdist parallel in this case(It's depending on test start time, sdist running at first part, so if two test start time is close, they may run sdist parallel.). However, even if we run only one Python Portable Precommit test in an agent the failure still happens, so it's not enough to say parallel running sdist caused this issue. However, it's still worth to check it out.

I attached a list of these 60 tests in case it can help you any way. 
[^Python_Portable_Precommit.pdf] 

As https://github.com/apache/beam/pull/9460 is merged, py2 and py3 test will run sequentially in single job.

This Jenkins suite back to green consistently for a week. Job history from https://builds.apache.org/view/A-D/view/Beam/view/PostCommit/job/beam_PreCommit_Portable_Python_Cron/. The sdist build will only run once due to changes from https://github.com/apache/beam/pull/9277. 

