When the below diff (which adds checks to confirm that conflation stats are not incremented in WAN tests with conflation disabled) is applied, the modified tests fail due to conflation stats being incorrectly incremented. This behaviour is only observed since the changes included in this PR were introduced: https://github.com/apache/geode/pull/4928

{noformat}
diff --git a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANStatsDUnitTest.java b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANStatsDUnitTest.java
index b2ed76728f..bc6beb0002 100644
--- a/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANStatsDUnitTest.java
+++ b/geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANStatsDUnitTest.java
@@ -209,6 +209,7 @@ public class SerialWANStatsDUnitTest extends WANTestBase {
 
     vm4.invoke(() -> WANTestBase.checkQueueStats("ln", 0, entries, entries, entries));
     vm4.invoke(() -> WANTestBase.checkBatchStats("ln", 1, true));
+    vm4.invoke(() -> WANTestBase.checkConflatedStats("ln", 0));
 
     // wait until queue is empty
     vm5.invoke(() -> await()
@@ -354,6 +355,7 @@ public class SerialWANStatsDUnitTest extends WANTestBase {
 
     vm4.invoke(() -> WANTestBase.checkQueueStats("ln", 0, entries, entries, entries));
     vm4.invoke(() -> WANTestBase.checkBatchStats("ln", 2, true, true));
+    vm4.invoke(() -> WANTestBase.checkConflatedStats("ln", 0));
 
     // wait until queue is empty
     vm5.invoke(() -> await()
{noformat}

In addition to the tests above, SerialWANPropagation_PartitionedRegionDUnitTest.testPartitionedSerialPropagationHA() fails with incorrectly incremented conflation stats if a similar check is introduced at the end of the test. Again, without the changes introduced by PR #4928, this modified test passes.