[~djoshi] do you mind reviewing and checking it on apache ci?

[~jasonstack] I can take an initial look.

[~jasonstack] Made a couple comments inline in the PR where I thought that would be easier. Then there are a few higher level things:

* It might be worthwhile to have a test in {{AsyncStreamingOutputPlusTest}} that verifies {{AsyncStreamingOutputPlus#writeFileToChannel()}} closes the provided channel.
* {{AsyncStreamingOutputPlus#writeFileToChannel(FileChannel, StreamRateLimiter, int)}} and {{AsyncStreamingOutputPlus#writeFileToChannelZeroCopy()}} may be better off at {{private}} visibility, given we're treating them as transport-level implementation details. (Perhaps {{writeFileToChannel}} would be easier to test at package-private though.)
* The JavaDoc for {{writeFileToChannel(FileChannel, StreamRateLimiter)}} is slightly out-of date now, given we've lowered the batch size for the SSL case. (We should make sure to preserve the bit about the method taking ownership of the {{FileChannel}}.)

bq. It might be worthwhile to have a test in AsyncStreamingOutputPlusTest that verifies AsyncStreamingOutputPlus#writeFileToChannel() closes the provided channel.

+1

bq. AsyncStreamingOutputPlus#writeFileToChannel(FileChannel, StreamRateLimiter, int) and AsyncStreamingOutputPlus#writeFileToChannelZeroCopy() may be better off at private visibility, given we're treating them as transport-level implementation details. (Perhaps writeFileToChannel would be easier to test at package-private though.)

I left them as public and marked "@VisibleForTesting"..

bq. The JavaDoc for writeFileToChannel(FileChannel, StreamRateLimiter) is slightly out-of date now, given we've lowered the batch size for the SSL case. (We should make sure to preserve the bit about the method taking ownership of the FileChannel.)

+1

+1

I think [~djoshi] might take a quick look as well.

The patch lgtm too. +1. I've kicked off tests as a final check [here|https://circleci.com/workflow-run/35d72695-0461-4080-997f-20d54940ff98] and [here|https://circleci.com/workflow-run/3487a3b3-401e-4b50-aea8-fc667b2e64cd]. I'll commit once I get a clean run.

[~maedhroz] [~jasonstack] looks like there are a few failures. They're likely unrelated but it would be great to double check and make sure.

Let's see...

{{test_restart_node_localhost - pushed_notifications_test.TestPushedNotifications}} should have been addressed by CASSANDRA-15677 a few days ago.

{{test_describe - cqlsh_tests.test_cqlsh.TestCqlsh}} and its materialized view equivalent have a history of flakiness, and don't look directly related to this patch. (Is there an issue around {{read_repair}} showing up in the table DDL where it isn't expected?)



rebased and submit another round of ci: [j8|https://circleci.com/workflow-run/cdf55335-c876-450b-8bf9-1d778a2df806] and [j11|https://circleci.com/workflow-run/2080f225-f689-4243-ad67-288bef608640]

bq. test_restart_node_localhost - pushed_notifications_test.TestPushedNotifications should have been addressed by CASSANDRA-15677 a few days ago.

it's failing after rebase...

bq. J11 - readRepairTest - org.apache.cassandra.distributed.test.SimpleReadWriteTest
bq. J11 - testImportCorrupt - org.apache.cassandra.db.ImportTest

doesn't seem to be related.


I pinged [~bryncooke] about {{pushed_notifications_test.TestPushedNotifications}}. It's possible CASSANDRA-15886 actually wasn't a duplicate of CASSANDRA-15677?

[~jasonstack] Unless those last two fail locally or have errors relating to channel closure, I wouldn't guess they have anything to do with this patch. However, I'm also not seeing any existing flaky test Jiras for them (closest are CASSANDRA-15543 and CASSANDRA-15517), so we may need a couple new Jiras. {{SimpleReadWriteTest}} looks like it got taken out by the forked VM existing abnormally though.

both SimpleReadWriteTest and ImportTest passed locally with JDK11, I don't think they use streaming.

Committed. Thanks, [~maedhroz] and [~jasonstack]!

thanks for the review
 

