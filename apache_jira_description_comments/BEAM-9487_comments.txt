Note that the above unit test doesn't hang as expected, probably due to how TestStream is implemented.

This issue is P2 but has been unassigned without any comment for 60 days so it has been labeled "stale-P2". If this issue is still affecting you, we care! Please comment and remove the label. Otherwise, in 14 days the issue will be moved to P3.

Please see https://beam.apache.org/contribute/jira-priorities/ for a detailed explanation of what these priorities mean.


This issue was marked "stale-P2" and has not received a public comment in 14 days. It is now automatically moved to P3. If you are still affected by it, you can comment and move it back to P2.

I had an offline conversation with Ahmet, and he said that this would be a good starter task for me, so I've assigned it to myself.

Comparing the Java and Python code, it seems Python is missing more checks than just the unbounded, global window, no trigger check. The Java code has various checks for things like trigger safety and making sure that the coder is deterministic,[1] whereas the Python SDK just skips to the final step without doing any validation.[2] I think it might be worth fixing all of these, not just the one that inspired this issue. I'm guessing that, sooner or later, someone will encounter the other cases as well.

 

[1] [https://github.com/apache/beam/blob/243128a8fc52798e1b58b0cf1a271d95ee7aa241/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/GroupByKey.java#L211]

[2] [https://github.com/apache/beam/blob/87e11644c44a4c677ec2faa78f50cdffbb33605a/sdks/python/apache_beam/transforms/core.py#L2316]

Regarding deterministic coder checking, this is done in a couple of places (or more?):

https://github.com/apache/beam/blob/51b37d885da67b9f0fb91e61b7be2b9598c6c947/sdks/python/apache_beam/runners/dataflow/dataflow_runner.py#L838 (and in direct runner)

and via the PValue.requires_deterministic_key_coder attribute.

Note that the pipeline might still run with a non-deterministic coder, but the coder should fail at runtime with an error ("Unable to deterministically encode ...").

Thanks for the explanation. I also now see that there are some tests in place for deterministic coders, including one where nondeterministic ones are allowed.

Anyways, the initial issue has been resolved. I still want to add a check for unsafe triggers.

PR14857 adds a check for unsafe triggers. I think we can mark this as resolved.

Folks, is this a backwards incompatible change? Should we change the default to True for a few releases with a warning?

Yes, PR14857 is backwards incompatible. I was thinking that would be captured in CHANGES.md whenever it was updated. However, we could set --allow_unsafe_triggers to True for the time being. Is there a particularly release where we'd want to set the default back to False?

As for PR14780, I don't think it will break any pipelines, as my understanding is that it is simply shifting the point of failure and making it easier to see, but considering we had some internal tests that broke from it, it might break some tests. Should we also disable it by default for the time being?

> I was thinking that would be captured in CHANGES.md whenever it was updated.

Great idea.

> However, we could set --allow_unsafe_triggers to True for the time being.

+1 to this, because I think we will break some customer using automation. It is hard for some customer to add new flags quickly because they have complicated setups. (airflow based setups usually have this complication for beam jobs.)

> Is there a particularly release where we'd want to set the default back to False?

We typically allow for 2 releases after introducing the new flag. So if the flag will be first available in 2.31, we can switch the default in 2.33. What do you think?

> As for PR14780, I don't think it will break any pipelines, as my understanding is that it is simply shifting the point of failure and making it easier to see, but considering we had some internal tests that broke from it, it might break some tests. Should we also disable it by default for the time being?

It make sense to switch to default for the time being. If we caught issues in our tests, it will very likely cause some user pipelines to break. (And plenty of warnings in CHANGES.md, and in the code warning about upcoming changes.)


Ok, I'll get a PR in that changes the default.

Another thing I remember is that the trigger safety check was implemented by adding an abstract method to TriggerFn. Would it make sense to make it non-abstract until Beam 2.33? I'm not sure if custom triggers are supported.

[https://github.com/apache/beam/pull/15003] is a release blocker for 2.31.0.

Reopening until [PR15603|https://github.com/apache/beam/pull/15603] is merged.

