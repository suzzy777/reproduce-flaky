The biggest challenge for this change I think is finding if there's a good way to test it.

The problem is pretty theoretical without a heavy load profile.  To ease manual reproduction, I've attached a patch that simulates this load with a Thread.sleep, and a script that can be used to reproduce.

Detecting this in an automated test though will be difficult - Solr doesn't offer any way to wire up or customize the PKI plugin in running Solr (nor would it be smart to add one due to the security risks).  So if this is a change we want to go forward with, we might have to settle for relying on existing testing.  (At least, unless someone thinks of something clever!)

Commit 4c3e70affbb825aeb236912abe0c0183e380d249 in solr's branch refs/heads/main from Jason Gerlowski
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=4c3e70affbb ]

SOLR-16720: Defer PKI header creation to send-time (#1495)

Prior to this commit, the PKIAuthPlugin decorates outgoing requests at
'queue' time instead of later when they're actually sent.  This can
cause scenarios where, under heavy load, queue time and sending time are
far enough apart that much or all of the TTL window for the outgoing
request is expired by the time its even sent.

This commit switches header-decoration to occur using a different
lifecycle hook offered by Jetty, 'onBegin', so that it's done as close
as possible to the actual time the request is sent.

This won't eliminate the possibility of errant TTL expiry - a JVM might go
into a long GC right after 'onBegin' for a request but before sending it on
the wire.  But it should reduce errant TTL expiry substantially.

Commit 8b8f9f6726296749551a6edfffe7aa2ccae7dc0e in solr's branch refs/heads/main from Jason Gerlowski
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=8b8f9f67262 ]

SOLR-16720: Defer PKI header creation to send-time (#1495)

Prior to this commit, the PKIAuthPlugin decorates outgoing requests at
'queue' time instead of later when they're actually sent.  This can
cause scenarios where, under heavy load, queue time and sending time are
far enough apart that much or all of the TTL window for the outgoing
request is expired by the time its even sent.

This commit switches header-decoration to occur using a different
lifecycle hook offered by Jetty, 'onBegin', so that it's done as close
as possible to the actual time the request is sent.

This won't eliminate the possibility of errant TTL expiry - a JVM might go
into a long GC right after 'onBegin' for a request but before sending it on
the wire.  But it should reduce errant TTL expiry substantially.


[~gerlowskija] is it possible this is causing the spikes in test


{code:java}
Build: https://jenkins.thetaphi.de/job/Solr-main-Linux/11253/
Java: 64bit/hotspot/jdk-20-rc -XX:+UseCompressedOops -XX:+UseSerialGC

1 tests failed.
FAILED:  org.apache.solr.security.jwt.JWTAuthPluginIntegrationTest.testMetrics

Error Message:
java.lang.AssertionError: Expected metric minimums for prefix SECURITY./authentication.: {failMissingCredentials=1, authenticated=4, passThrough=4, failWrongCredentials=0, requests=9, errors=0}, but got: {failMissingCredentials=1, authenticated=4, passThrough=2, totalTime=5816471, failWrongCredentials=0, requestTimes=2208, requests=7, errors=0}(Possible cause is delay in loading modified security.json; see SOLR-13464 for test work around)

Stack Trace:
java.lang.AssertionError: Expected metric minimums for prefix SECURITY./authentication.: {failMissingCredentials=1, authenticated=4, passThrough=4, failWrongCredentials=0, requests=9, errors=0}, but got: {failMissingCredentials=1, authenticated=4, passThrough=2, totalTime=5816471, failWrongCredentials=0, requestTimes=2208, requests=7, errors=0}(Possible cause is delay in loading modified security.json; see SOLR-13464 for test work around)
        at __randomizedtesting.SeedInfo.seed([A22B6BB9DD7D5C81:5C39B91BC1772B32]:0)
        at org.junit.Assert.fail(Assert.java:89)
        at org.junit.Assert.assertTrue(Assert.java:42)
        at org.apache.solr.cloud.SolrCloudAuthTestCase.assertAuthMetricsMinimums(SolrCloudAuthTestCase.java:197)
        at org.apache.solr.cloud.SolrCloudAuthTestCase.assertAuthMetricsMinimums(SolrCloudAuthTestCase.java:132)
        at org.apache.solr.security.jwt.JWTAuthPluginIntegrationTest.testMetrics(JWTAuthPluginIntegrationTest.java:234)
        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
        at java.base/java.lang.reflect.Method.invoke(Method.java:578)
        at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1758)
        at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:946)
        at com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:982)
        at com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:996)
        at com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:80)
        at org.junit.rules.RunRules.evaluate(RunRules.java:20)
        at org.apache.lucene.tests.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:48)
        at org.apache.lucene.tests.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:43)
        at org.apache.lucene.tests.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:45)
        at org.apache.lucene.tests.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:60)
        at org.apache.lucene.tests.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:44)
        at org.junit.rules.RunRules.evaluate(RunRules.java:20)
        at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)
        at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:390)
        at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:843)
        at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:490)
        at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:955)
        at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:840)
        at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:891)
        at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:902)
        at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)
        at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)
        at org.apache.lucene.tests.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:43)
        at org.apache.lucene.tests.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:43)
        at com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:80)
        at org.junit.rules.RunRules.evaluate(RunRules.java:20)
        at org.apache.lucene.tests.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:43)
        at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)
        at org.apache.lucene.tests.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:38)
        at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)
        at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)
        at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)
        at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)
        at org.apache.lucene.tests.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)
        at org.apache.lucene.tests.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:43)
        at org.apache.lucene.tests.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:44)
        at org.apache.lucene.tests.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:60)
        at org.apache.lucene.tests.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:47)
        at org.junit.rules.RunRules.evaluate(RunRules.java:20)
        at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)
        at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:390)
        at com.carrotsearch.randomizedtesting.ThreadLeakControl.lambda$forkTimeoutingTask$0(ThreadLeakControl.java:850)
        at java.base/java.lang.Thread.run(Thread.java:1623)
{code}


Anything is possible.  But I'm not convinced necessarily - I'm not seeing the particular logging I'd expect if the PKI header was missing or set with incomplete data.  Though I'll definitely look closer. 

JWTAuthPluginIntegrationTest has had terrible levels of flakiness going back all the way to the start of 2022.  And while it's a shame to even talk this way, the failures this week seem about "normal" for that test.

EDIT: Deleted a screenshot because it displayed terribly in JIRA, but see the fucit link [here|http://fucit.org/solr-jenkins-reports/history-trend-of-recent-failures.html#series/org.apache.solr.security.jwt.JWTAuthPluginIntegrationTest.mockOAuth2Server] for the historical test failure trend.

I'll take a closer look at the logs from some of the failures this afternoon though.  And I'm happy to rollback out of an abundance of caution if you think it's warranted, or if you're just curious how the builds might look without this change?

Specifically looking at org.apache.solr.security.jwt.JWTAuthPluginIntegrationTest.testMetrics - There is a big spike since April 5th when this was merged. 

There is a change of passThrough=4 -> passThrough=2 which idk exactly what that means but there are 2 fewer requests. This seems to potentially make sense with this change.

The fucit link is for mockOAuth2Server btw this is specifically for "testMetrics" which spiked recently - http://fucit.org/solr-jenkins-reports/history-trend-of-recent-failures.html#series/org.apache.solr.security.jwt.JWTAuthPluginIntegrationTest.testMetrics

The first test failure I saw was http://fucit.org/solr-jenkins-reports/job-data/apache_solr/Solr-Check-main/6541/jenkins.summary.xml and the change set includes this jira and SOLR-16728

A recent failure reproduces for me:


{code:java}
./gradlew test --tests JWTAuthPluginIntegrationTest.testMetrics -Dtests.seed=8938961115F4C519 -Dtests.multiplier=3 -Dtests.locale=tr-TR -Dtests.timezone=Pacific/Niue -Dtests.asserts=true -Dtests.file.encoding=UTF-8
{code}


Ah, my mistake - I went to fucit and the massive 57% failure rate testcase drew my eye; I missed that testMetrics had started failing as well.

Will revert now so this doesn't cause noise for folks while I debug.

Commit ddb312d7c7d5814131b1f7d17da8fe8c30b38883 in solr's branch refs/heads/main from Jason Gerlowski
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=ddb312d7c7d ]

Revert "SOLR-16720: Defer PKI header creation to send-time (#1495)"

This reverts commit 8b8f9f6726296749551a6edfffe7aa2ccae7dc0e.


Commit 84edb7bb4579ce5caec742b7bf3c8d8ebfef035d in solr's branch refs/heads/main from Alex Deparvu
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=84edb7bb457 ]

SOLR-16720: Defer PKI header creation to send-time (#1666)



[~stillalex] found a fix for the JWTAuthPluginIntegrationTest failure that this patch caused the last time it was merged.  I merged this PR (with the test fix) to 'main' prior to the long weekend, and runs look at least as good as they did pre-merge.  It's hard to be too confident here since JwtAPIT has so much baseline flakiness 😬, but...

Anyway, I'm going to backport to branch_9x and close this out.  Will continue to keep an eye out for any related failures, of course... 

Commit f74b5e85e0274ec9b6460f111bbc0af2d8e17228 in solr's branch refs/heads/branch_9x from Alex Deparvu
[ https://gitbox.apache.org/repos/asf?p=solr.git;h=f74b5e85e02 ]

SOLR-16720: Defer PKI header creation to send-time (#1666)



Closing after the 9.3.0 release

