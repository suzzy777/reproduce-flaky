https://github.com/apache/ignite/pull/1421

Set retry functionality on move and delete operations, as requested. 
However, I think, this may slow down the operations because creates more starvation possibilities.  

tests passed on TC.

Ivan,

Fix looks fine, but I cannot find test results? I need {{1421/head}} for IGFS and Hadoop suites.

IGFS TestSuite: http://ci.ignite.apache.org/viewLog.html?buildId=425500&tab=buildResultsDiv&buildTypeId=IgniteTests_IgniteGgfs 
Hadoop TestSuite: http://ci.ignite.apache.org/viewLog.html?buildId=425501&tab=buildResultsDiv&buildTypeId=IgniteTests_IgniteHadoop 
(In Hadoop 1 flaky test failed. )
IGFS Linux & MacOS: http://ci.ignite.apache.org/viewLog.html?buildId=425500&tab=buildResultsDiv&buildTypeId=IgniteTests_IgniteGgfs

Ivan,
I rerun test for IGFS suite, lot's of failures: http://ci.ignite.apache.org/viewLog.html?buildId=433712&tab=buildResultsDiv&buildTypeId=IgniteTests_IgniteGgfs

Vladimir, these failures happen because the build ran on a Windows agent. 
Similar failures can be observed on pure "ignite-2.0" branch : http://ci.ignite.apache.org/viewType.html?buildTypeId=IgniteTests_IgniteGgfs&tab=buildTypeStatusDiv&branch_IgniteTests=ignite-2.0 .
We created https://issues.apache.org/jira/browse/IGNITE-4623 to address that -- these failures are not related to the changes discussed in this ticket.


FixVersion changed to 2.0.
In case issue can be done till Feb 17 please rollback this change.

[~iveselovskiy], I have doubts about {{IgfsMetaManager.softDelete}} method. Previously we invoked {{delete}} on underlying file system if integrity check failed. Now do not do that. Is it correct?

This delegation to underlying file system in case of concurrent change looks strange to me, not to say the least. May be we should throw an exception if {{!pathIds.allExists() == true}}?

[~vozerov] , 
1) The suggested fix does not prevent the {code}delete{code} to be invoked on underlying Fs in case integrity check failed, we just do retry and go to next loop in this case. This is exactly what is requested by this ticket.
2) The problem is that we base on natural assertion "file does not exist after removal", and with  current implementation of IgfsImpl#exists() we can fulfill it only if the file is also deleted from the secondary file system upon removal. The reason is that if a file does not exist on primary file system, but exists on the secondary one, IgfsImpl#exists() returns *true*. Test org.apache.ignite.internal.processors.igfs.IgfsDualAbstractSelfTest#testDeletePathMissingPartially asserts this behavior directly.
It seems, throwing an exception in this case would violate the method contract, since method org.apache.ignite.IgniteFileSystem#delete javadoc specifies throwing IgniteException on error only. 
So, I would suggest to stay with the behavior suggested in the patch -- it seems logical and corresponds to the existing tests.

[~iveselovskiy], I do not quite understand why we switched from {{BasicFileAttributeView}} to {{PosixFileAttributes}} for access and modification time resolution? Will that work on Windows?

[~vozerov] , thanks, that was a mistake, and now it is fixed.

Note, that several tests fail on Windows agents (agent name `*_9090`), but this happens for reasons not related to this fix (some problem with OS-locked files on rename/move, also happens on `master` branch). Ticket IGNITE-4623 intended to fix that.

No longer relevant.

