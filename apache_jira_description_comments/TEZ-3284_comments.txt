{code}
 UnorderedOutSpiller {Reducer_3} [RUNNABLE]
*** org.apache.hadoop.io.compress.CompressorStream.write(int) CompressorStream.java:119
*** org.apache.hadoop.fs.FSDataOutputStream$PositionCache.write(int) FSDataOutputStream.java:50
*** java.io.DataOutputStream.writeByte(int) DataOutputStream.java:153
org.apache.hadoop.io.WritableUtils.writeVLong(DataOutput, long) WritableUtils.java:273
org.apache.hadoop.io.WritableUtils.writeVInt(DataOutput, int) WritableUtils.java:253
org.apache.tez.runtime.library.common.sort.impl.IFile$Writer.writeKVPair(byte[], int, int, byte[], int, int) IFile.java:415
org.apache.tez.runtime.library.common.sort.impl.IFile$Writer.append(DataInputBuffer, DataInputBuffer) IFile.java:387
org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter.writePartition(int, UnorderedPartitionedKVWriter$WrappedBuffer, IFile$Writer, DataInputBuffer, DataInputBuffer) UnorderedPartitionedKVWriter.java:456
org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter.access$1000(UnorderedPartitionedKVWriter, int, UnorderedPartitionedKVWriter$WrappedBuffer, IFile$Writer, DataInputBuffer, DataInputBuffer) UnorderedPartitionedKVWriter.java:80
org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter$SpillCallable.callInternal() UnorderedPartitionedKVWriter.java:421
org.apache.tez.runtime.library.common.writers.UnorderedPartitionedKVWriter$SpillCallable.callInternal() UnorderedPartitionedKVWriter.java:380
org.apache.tez.common.CallableWithNdc.call() CallableWithNdc.java:36
java.util.concurrent.FutureTask.run() FutureTask.java:266
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker) ThreadPoolExecutor.java:1142
java.util.concurrent.ThreadPoolExecutor$Worker.run() ThreadPoolExecutor.java:617
java.lang.Thread.run() Thread.java:745
{code}

[~gopalv], are you looking for someone to take up this effort? Assuming the work here is copy org/apache/hadoop/hive/common/io/NonSync* into the tez namespace and migrating the performance critical, single threaded sections of tez code to adopt the NonSync apis.

Secondarily, I assume that hive queries with UNIONs translate to using UnordededKVWriter so as to test the performance.

[~jeagles]: yes, I would appreciate the help - the use of ByteArrayInputStream and ByteArrayOutputStream is almost entirely in single-threaded sections, since their declared signatures do not have "synchronized".

If you compare 

http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8u40-b25/java/io/ByteArrayOutputStream.java#134

to 

https://docs.oracle.com/javase/7/docs/api/java/io/ByteArrayOutputStream.html#write(int)

bq.  I assume that hive queries with UNIONs translate to using UnordededKVWriter so as to test the performance.

If you are using a recent Hive SNAPSHOT build, the new join introduces unsorted shuffle joins (HIVE-10673) which is where this shows up in a big way.



Not done by any means, but this is a start.

[~jeagles] is this jira working in progress? The patch introduces non synchronized data buffer, and it looks to be ready for merge to me.

I have tested this for sanity tests only. I will want to verify correctness and performance before this goes in. Will update when I get numbers.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12818583/TEZ-3284.3.patch
  against master revision 55f5186.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in :
                   org.apache.tez.dag.app.rm.TestContainerReuse

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/1858//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/1858//console

This message is automatically generated.

[~ozawa], this patch is ready for review. The core test failure is a flaky test in tez and has been well documented.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12827397/TEZ-3284.4.patch
  against master revision 91a397b.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:red}-1 tests included{color}.  The patch doesn't appear to include any new or modified tests.
                        Please justify why no new tests are needed for this patch.
                        Also please list what manual steps were performed to verify this patch.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/1959//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/1959//console

This message is automatically generated.

[~gopalv], [~rajesh.balamohan], [~ozawa], rebased latest patch. I didn't include any new tests with this, but I think that it's ready for review.

lgtm. +1.

Very minor comment. MultipleCommitsExample::fromUserPayload can be replaced with NonSync*InputStream before commit.

Thanks, [~rajesh.balamohan]. Fixed the issue you addressed and committed this to master branch.

