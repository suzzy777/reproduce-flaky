Please try with the latest version {{3.4.1}}

If problem still exists - please provide PR with fix.

Why did you create a new ticket although you failed to provide any proof? Just because the dependency in the local cache this isn't a proof that MJAVADOC causes this. Don't create new tickets. It won't get better.

[~sjaranowski] - I did try with the new version 3.4.1 but the problem still exists. Moreover, I'm not able to identify the fix for it so can not provide a PR for this issue yet.

[~michael-o] - Sir, if you have given me sufficient time for producing the proof, I would not have created new ticket. After you close the ticket, I did not have any other option than creating a new one for highlighting the issue I'm facing. Please try to allow some time, everyone is not fast as you are!

To answer your question related to the proof, please see the generated logs below when I perform mvn install. You can notice, MJAVADOC is the one which is generating this log4j-1.2.12. Let me know if you don't find this sufficient. Thank you!

[INFO] --- maven-javadoc-plugin:3.4.1:jar (attach-javadocs) @ my-drive-utils ---
[INFO] {color:#FF0000}*Downloading from : https://repo.maven.apache.org/maven2/log4j/log4j/1.2.12/log4j-1.2.12.pom*{color}
[INFO] {color:#FF0000}*Downloaded from : https://repo.maven.apache.org/maven2/log4j/log4j/1.2.12/log4j-1.2.12.pom*{color} (145 B at 84 B/s)
[INFO] Configuration changed, re-generating javadoc.

No, that is not sufficient. I expect a minimal project which completely reproduces the problem.

Okay [~michael-o] ! 

If you follow the steps to reproduce (given in description of this ticket) the issue, you should be able to see the issue.

In the meantime, please can you reopen the ticket for the sake of tracking progress?

Reopening as per request. I will not follow any steps unless you provide a sample project. Everything else will always be incomplete.

Sure Thanks [~michael-o] ! I'll work towards creating the sample project.

Still waiting for your sample project...

Sorry for the delay, the sample project is being build and will provide the link here very soon.. Thanks!

I can already hear the drums, rolling out the red carpet...

Hello [~michael-o] 

Please find below sample project on GitHub (have provided you the access to pull the code) - [https://github.com/writetoyogi/mvn-javadoc-issue-sample]

*Steps to Reproduce-*
1. Import the above project, compile and build it

2. Observe your local maven repository ie. .m2 folder and see if there are any log4j-1.2.12 artifacts are present in log4j folder of it. If artifacts are present already, delete them for now.

3. Run maven clean install command for your project

4. Check the console logs, it will show something like below -

[INFO] — maven-javadoc-plugin:3.4.0:jar (attach-javadocs) @ maven-sample-project —
[INFO] Downloading from : [https://repo.maven.apache.org/maven2/log4j/log4j/1.2.12/log4j-1.2.12.pom]
[INFO] Downloaded from : [https://repo.maven.apache.org/maven2/log4j/log4j/1.2.12/log4j-1.2.12.pom] (145 B at 91 B/s)
[INFO] Configuration changed, re-generating javadoc.

5. Observe your local maven repository ie. .m2 folder and see if there are any log4j-1.2.12 artifacts are generated with latest timestamp inside log4j folder.

Please let me know in case you need any additional information. Thank you!

I can confirm that the file is being downloaded. Though, I cannot find it on the classpath of the plugin; read not used:
{noformat}
[DEBUG] org.apache.maven.plugins:maven-javadoc-plugin:jar:3.4.1
[DEBUG]    org.apache.maven:maven-core:jar:3.2.5:compile
[DEBUG]       org.apache.maven:maven-settings-builder:jar:3.2.5:compile
[DEBUG]       org.apache.maven:maven-repository-metadata:jar:3.2.5:compile
[DEBUG]       org.apache.maven:maven-model-builder:jar:3.2.5:compile
[DEBUG]       org.apache.maven:maven-aether-provider:jar:3.2.5:compile
[DEBUG]          org.eclipse.aether:aether-spi:jar:1.0.0.v20140518:compile
[DEBUG]       org.eclipse.aether:aether-impl:jar:1.0.0.v20140518:compile (version managed from default)
[DEBUG]       org.eclipse.aether:aether-api:jar:1.0.0.v20140518:compile (version managed from default)
[DEBUG]       org.eclipse.aether:aether-util:jar:1.0.0.v20140518:compile (version managed from default)
[DEBUG]       org.eclipse.sisu:org.eclipse.sisu.plexus:jar:0.3.0.M1:compile
[DEBUG]          javax.enterprise:cdi-api:jar:1.0:compile
[DEBUG]             javax.annotation:jsr250-api:jar:1.0:compile
[DEBUG]          org.eclipse.sisu:org.eclipse.sisu.inject:jar:0.3.0.M1:compile
[DEBUG]       org.sonatype.sisu:sisu-guice:jar:no_aop:3.2.3:compile
[DEBUG]          aopalliance:aopalliance:jar:1.0:compile
[DEBUG]          com.google.guava:guava:jar:16.0.1:compile
[DEBUG]       org.codehaus.plexus:plexus-interpolation:jar:1.21:compile
[DEBUG]       org.codehaus.plexus:plexus-classworlds:jar:2.5.2:compile
[DEBUG]       org.codehaus.plexus:plexus-component-annotations:jar:2.0.0:compile (version managed from default)
[DEBUG]       org.sonatype.plexus:plexus-sec-dispatcher:jar:1.3:compile
[DEBUG]          org.sonatype.plexus:plexus-cipher:jar:1.4:compile
[DEBUG]    org.apache.maven:maven-model:jar:3.2.5:compile
[DEBUG]    org.apache.maven:maven-settings:jar:3.2.5:compile
[DEBUG]    org.apache.maven:maven-plugin-api:jar:3.2.5:compile
[DEBUG]    org.apache.maven:maven-artifact:jar:3.2.5:compile
[DEBUG]    org.apache.maven.reporting:maven-reporting-api:jar:3.1.1:compile
[DEBUG]    org.apache.maven:maven-archiver:jar:3.6.0:compile
[DEBUG]       org.codehaus.plexus:plexus-io:jar:3.4.0:compile
[DEBUG]       org.codehaus.plexus:plexus-archiver:jar:4.4.0:compile
[DEBUG]          org.apache.commons:commons-compress:jar:1.21:compile
[DEBUG]          org.iq80.snappy:snappy:jar:0.4:compile
[DEBUG]          org.tukaani:xz:jar:1.9:runtime
[DEBUG]    org.apache.maven.shared:maven-invoker:jar:3.1.0:compile
[DEBUG]       org.apache.maven.shared:maven-shared-utils:jar:3.3.3:compile
[DEBUG]       javax.inject:javax.inject:jar:1:compile
[DEBUG]    org.apache.maven.shared:maven-common-artifact-filters:jar:3.1.1:compile
[DEBUG]       org.sonatype.sisu:sisu-inject-plexus:jar:1.4.2:compile
[DEBUG]          org.sonatype.sisu:sisu-inject-bean:jar:1.4.2:compile
[DEBUG]             org.sonatype.sisu:sisu-guice:jar:noaop:2.1.7:compile
[DEBUG]    org.apache.maven.shared:maven-artifact-transfer:jar:0.13.1:compile
[DEBUG]       org.slf4j:slf4j-api:jar:1.7.5:compile
[DEBUG]    org.apache.maven.doxia:doxia-sink-api:jar:1.11.1:compile
[DEBUG]       org.apache.maven.doxia:doxia-logging-api:jar:1.11.1:compile
[DEBUG]    org.apache.maven.doxia:doxia-site-renderer:jar:1.11.1:compile
[DEBUG]       org.apache.maven.doxia:doxia-core:jar:1.11.1:compile
[DEBUG]       org.apache.maven.doxia:doxia-decoration-model:jar:1.11.1:compile
[DEBUG]       org.apache.maven.doxia:doxia-skin-model:jar:1.11.1:compile
[DEBUG]       org.apache.maven.doxia:doxia-module-xhtml:jar:1.11.1:compile
[DEBUG]       org.apache.maven.doxia:doxia-module-xhtml5:jar:1.11.1:compile
[DEBUG]       org.codehaus.plexus:plexus-i18n:jar:1.0-beta-10:compile
[DEBUG]       org.codehaus.plexus:plexus-container-default:jar:1.0-alpha-30:compile
[DEBUG]          junit:junit:jar:3.8.1:compile
[DEBUG]       org.codehaus.plexus:plexus-velocity:jar:1.2:compile
[DEBUG]       org.apache.velocity:velocity:jar:1.7:compile
[DEBUG]          commons-lang:commons-lang:jar:2.4:compile
[DEBUG]       org.apache.velocity:velocity-tools:jar:2.0:compile
[DEBUG]          commons-beanutils:commons-beanutils:jar:1.7.0:compile
[DEBUG]          commons-digester:commons-digester:jar:1.8:compile
[DEBUG]          commons-chain:commons-chain:jar:1.1:compile
[DEBUG]          dom4j:dom4j:jar:1.1:compile
[DEBUG]          oro:oro:jar:2.0.8:compile
[DEBUG]       commons-collections:commons-collections:jar:3.2.2:compile
[DEBUG]    org.apache.maven.wagon:wagon-provider-api:jar:2.4:compile
[DEBUG]    org.apache.commons:commons-lang3:jar:3.12.0:compile
[DEBUG]    org.apache.commons:commons-text:jar:1.9:compile
[DEBUG]    org.apache.httpcomponents:httpclient:jar:4.5.13:compile
[DEBUG]       commons-logging:commons-logging:jar:1.2:compile
[DEBUG]       commons-codec:commons-codec:jar:1.11:compile
[DEBUG]    org.apache.httpcomponents:httpcore:jar:4.4.15:compile
[DEBUG]    com.thoughtworks.qdox:qdox:jar:2.0.1:compile
[DEBUG]    org.codehaus.plexus:plexus-java:jar:1.1.0:compile
[DEBUG]       org.ow2.asm:asm:jar:9.2:compile
[DEBUG]    org.codehaus.plexus:plexus-utils:jar:3.4.2:compile
[DEBUG]    commons-io:commons-io:jar:2.11.0:compile
[DEBUG]    org.codehaus.plexus:plexus-interactivity-api:jar:1.1:compile
[DEBUG] Created new class realm plugin>org.apache.maven.plugins:maven-javadoc-plugin:3.4.1
[DEBUG] Importing foreign packages into class realm plugin>org.apache.maven.plugins:maven-javadoc-plugin:3.4.1
[DEBUG]   Imported:  < maven.api
[DEBUG] Populating class realm plugin>org.apache.maven.plugins:maven-javadoc-plugin:3.4.1
[DEBUG]   Included: org.apache.maven.plugins:maven-javadoc-plugin:jar:3.4.1
[DEBUG]   Included: org.eclipse.aether:aether-util:jar:1.0.0.v20140518
[DEBUG]   Included: javax.enterprise:cdi-api:jar:1.0
[DEBUG]   Included: javax.annotation:jsr250-api:jar:1.0
[DEBUG]   Included: org.eclipse.sisu:org.eclipse.sisu.inject:jar:0.3.0.M1
[DEBUG]   Included: org.sonatype.sisu:sisu-guice:jar:no_aop:3.2.3
[DEBUG]   Included: aopalliance:aopalliance:jar:1.0
[DEBUG]   Included: com.google.guava:guava:jar:16.0.1
[DEBUG]   Included: org.codehaus.plexus:plexus-interpolation:jar:1.21
[DEBUG]   Included: org.codehaus.plexus:plexus-component-annotations:jar:2.0.0
[DEBUG]   Included: org.sonatype.plexus:plexus-sec-dispatcher:jar:1.3
[DEBUG]   Included: org.sonatype.plexus:plexus-cipher:jar:1.4
[DEBUG]   Included: org.apache.maven.reporting:maven-reporting-api:jar:3.1.1
[DEBUG]   Included: org.apache.maven:maven-archiver:jar:3.6.0
[DEBUG]   Included: org.codehaus.plexus:plexus-io:jar:3.4.0
[DEBUG]   Included: org.codehaus.plexus:plexus-archiver:jar:4.4.0
[DEBUG]   Included: org.apache.commons:commons-compress:jar:1.21
[DEBUG]   Included: org.iq80.snappy:snappy:jar:0.4
[DEBUG]   Included: org.tukaani:xz:jar:1.9
[DEBUG]   Included: org.apache.maven.shared:maven-invoker:jar:3.1.0
[DEBUG]   Included: org.apache.maven.shared:maven-shared-utils:jar:3.3.3
[DEBUG]   Included: org.apache.maven.shared:maven-common-artifact-filters:jar:3.1.1
[DEBUG]   Included: org.sonatype.sisu:sisu-inject-bean:jar:1.4.2
[DEBUG]   Included: org.sonatype.sisu:sisu-guice:jar:noaop:2.1.7
[DEBUG]   Included: org.apache.maven.shared:maven-artifact-transfer:jar:0.13.1
[DEBUG]   Included: org.apache.maven.doxia:doxia-sink-api:jar:1.11.1
[DEBUG]   Included: org.apache.maven.doxia:doxia-logging-api:jar:1.11.1
[DEBUG]   Included: org.apache.maven.doxia:doxia-site-renderer:jar:1.11.1
[DEBUG]   Included: org.apache.maven.doxia:doxia-core:jar:1.11.1
[DEBUG]   Included: org.apache.maven.doxia:doxia-decoration-model:jar:1.11.1
[DEBUG]   Included: org.apache.maven.doxia:doxia-skin-model:jar:1.11.1
[DEBUG]   Included: org.apache.maven.doxia:doxia-module-xhtml:jar:1.11.1
[DEBUG]   Included: org.apache.maven.doxia:doxia-module-xhtml5:jar:1.11.1
[DEBUG]   Included: org.codehaus.plexus:plexus-i18n:jar:1.0-beta-10
[DEBUG]   Included: junit:junit:jar:3.8.1
[DEBUG]   Included: org.codehaus.plexus:plexus-velocity:jar:1.2
[DEBUG]   Included: org.apache.velocity:velocity:jar:1.7
[DEBUG]   Included: commons-lang:commons-lang:jar:2.4
[DEBUG]   Included: org.apache.velocity:velocity-tools:jar:2.0
[DEBUG]   Included: commons-beanutils:commons-beanutils:jar:1.7.0
[DEBUG]   Included: commons-digester:commons-digester:jar:1.8
[DEBUG]   Included: commons-chain:commons-chain:jar:1.1
[DEBUG]   Included: dom4j:dom4j:jar:1.1
[DEBUG]   Included: oro:oro:jar:2.0.8
[DEBUG]   Included: commons-collections:commons-collections:jar:3.2.2
[DEBUG]   Included: org.apache.commons:commons-lang3:jar:3.12.0
[DEBUG]   Included: org.apache.commons:commons-text:jar:1.9
[DEBUG]   Included: org.apache.httpcomponents:httpclient:jar:4.5.13
[DEBUG]   Included: commons-logging:commons-logging:jar:1.2
[DEBUG]   Included: commons-codec:commons-codec:jar:1.11
[DEBUG]   Included: org.apache.httpcomponents:httpcore:jar:4.4.15
[DEBUG]   Included: com.thoughtworks.qdox:qdox:jar:2.0.1
[DEBUG]   Included: org.codehaus.plexus:plexus-java:jar:1.1.0
[DEBUG]   Included: org.ow2.asm:asm:jar:9.2
[DEBUG]   Included: org.codehaus.plexus:plexus-utils:jar:3.4.2
[DEBUG]   Included: commons-io:commons-io:jar:2.11.0
[DEBUG]   Included: org.codehaus.plexus:plexus-interactivity-api:jar:1.1
{noformat}

Feel free to find the (transitive) dependency which pulls in log4j.

Still waiting...

dom4j:dom4j:jar:1.1 looks suspicious. It's extremely old. 

Thanks for your inputs [~elharo] ! I tried excluding dom4j and log4j dependency as below. Still facing same issue -

<groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.4.0</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                    <!-- <additionalparam>-Xdoclint:none</additionalparam> -->
                    <excludePackageNames>log4j.*,dom4j.*</excludePackageNames>
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>

Is there any other way we can find this out?

I'm not sure where log4j is coming from, but wherever it is I don't think excluding the package names from the Javadoc would have any effect. You'd have to remove them from the dependency tree completely

The sample project link above seems to be 404

Sorry for the delay [~elharo], the repo was private. You should be able to access the sample project now. Thanks!

I see this too:

[INFO] --- maven-javadoc-plugin:3.5.0:jar (attach-javadocs) @ maven-sample-project ---
Downloading from central: https://repo.maven.apache.org/maven2/log4j/log4j/1.2.12/log4j-1.2.12.pom
Downloaded from central: https://repo.maven.apache.org/maven2/log4j/log4j/1.2.12/log4j-1.2.12.pom (145 B at 6.6 kB/s)

However looking in my local .m2 repo it only downloaded the pom. It did not download the jar. 


Also this was the very first thing downloaded. Could it be coming from maven core instead of the javadoc plugin?

After nuking my entire .m2 repo more is downloaded. In particular the order here looks suggestive:

```
Downloading from central: https://repo.maven.apache.org/maven2/org/apache/velocity/velocity/1.7/velocity-1.7.pom
Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/velocity/velocity/1.7/velocity-1.7.pom (11 kB at 571 kB/s)
Downloading from central: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.pom
Downloaded from central: https://repo.maven.apache.org/maven2/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.pom (13 kB at 695 kB/s)
Downloading from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/9/commons-parent-9.pom
Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/commons/commons-parent/9/commons-parent-9.pom (22 kB at 1.0 MB/s)
Downloading from central: https://repo.maven.apache.org/maven2/commons-lang/commons-lang/2.4/commons-lang-2.4.pom
Downloaded from central: https://repo.maven.apache.org/maven2/commons-lang/commons-lang/2.4/commons-lang-2.4.pom (14 kB at 776 kB/s)
Downloading from central: https://repo.maven.apache.org/maven2/org/apache/velocity/velocity-tools/2.0/velocity-tools-2.0.pom
Downloaded from central: https://repo.maven.apache.org/maven2/org/apache/velocity/velocity-tools/2.0/velocity-tools-2.0.pom (18 kB at 791 kB/s)
Downloading from central: https://repo.maven.apache.org/maven2/commons-beanutils/commons-beanutils/1.7.0/commons-beanutils-1.7.0.pom
Downloaded from central: https://repo.maven.apache.org/maven2/commons-beanutils/commons-beanutils/1.7.0/commons-beanutils-1.7.0.pom (357 B at 17 kB/s)
Downloading from central: https://repo.maven.apache.org/maven2/commons-logging/commons-logging/1.0.3/commons-logging-1.0.3.pom
Downloaded from central: https://repo.maven.apache.org/maven2/commons-logging/commons-logging/1.0.3/commons-logging-1.0.3.pom (866 B at 43 kB/s)
Downloading from central: https://repo.maven.apache.org/maven2/commons-digester/commons-digester/1.8/commons-digester-1.8.pom
Downloaded from central: https://repo.maven.apache.org/maven2/commons-digester/commons-digester/1.8/commons-digester-1.8.pom (7.0 kB at 334 kB/s)
Downloading from central: https://repo.maven.apache.org/maven2/commons-logging/commons-logging/1.1/commons-logging-1.1.pom
Downloaded from central: https://repo.maven.apache.org/maven2/commons-logging/commons-logging/1.1/commons-logging-1.1.pom (6.2 kB at 258 kB/s)
Downloading from central: https://repo.maven.apache.org/maven2/log4j/log4j/1.2.12/log4j-1.2.12.pom
Downloaded from central: https://repo.maven.apache.org/maven2/log4j/log4j/1.2.12/log4j-1.2.12.pom (145 B at 4.7 kB/s)
Downloading from central: https://repo.maven.apache.org/maven2/logkit/logkit/1.0.1/logkit-1.0.1.pom
Downloaded from central: https://repo.maven.apache.org/maven2/logkit/logkit/1.0.1/logkit-1.0.1.pom (147 B at 6.4 kB/s)
```

It looks like log4j-1.2.12 might come from commons-logging which comes from (after several steps) doxia. Doxia is pushing a lot of old dependencies into the tree. What really needs to happen is that we release Doxia 2.0.0 and upgrade it here.

Yep, commons-logging 1.1 definitely depends on log4j 1.2.12:

```
<dependency>
<groupId>log4j</groupId>
<artifactId>log4j</artifactId>
<version>1.2.12</version>
</dependency>
```

commons-digester 1.8 pulls in commons-logging 1.1.


And velocity-tools 2.0 pulls in commons-digester 1.8. I'm not sure why the dependency plugin doesn't show this but the chain  is

org.apache.maven.plugins:maven-javadoc-plugin:maven-plugin:3.5.1 --> org.apache.maven.doxia:doxia-site-renderer:jar:1.11.1 --> org.apache.velocity:velocity-tools:jar:2.0 --> commons-digester 1.8 --> commons-logging 1.1 --> log4j 1.2.12

The fix is to release doxia 2.0 and upgrade it here. 

That is not a fix, Doxia 2 will mostly not be compatible with Doxia 1.x. See also: https://github.com/apache/maven-javadoc-plugin/tree/doxia-2.0.0

In that case is a new release of Doxia 1 in the cards? The problem is really in Doxia, not the javadoc plugin.

No, not from me. Even if, this would require to upgrade the entire stack which builds upon Doxia. I am not willing to do this.

I'm not sure what you're proposing then. If Doxia 1 is not maintained, we should upgrade to Doxia 2. If we can't upgrade to Doxia 2, we need to support Doxia 1.

I didn't say it isn't maintained, but I don't intend to put any effort into it. If you can tackle the issue and release the entire stack, no problem. If this is such a problem for [~writetoyogi], HE should provide ALL the PRs for make that happen. Since he's is not using the reporting, but rather standalone invocation, he could try to exclude the dependency.

Note: Doxia 2 isn't GA and won't happen before summer.

Thank you [~elharo] for your troubleshooting and analysis here!

[~michael-o] - Sir, If I had that technical competency to provide all PR's related to this issue, certainly I would have done it 5 month back when I reported the issue. Due to lack of that competency I'm seeking help here on this forum. I would appreciate any help from anyone here who knows how to fix it.

On another note, I tried excluding the doxia dependency from the javadoc-plugin 3.5.0 however its seems to have not taken effect. I'm using below exclude tag to achieve this. If there is any better and alternative way, feel free to suggest. Thank you!

<groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.4.0</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                    *<excludePackageNames>org.apache.maven.doxia</excludePackageNames>*
                </configuration>
                <executions>
                    <execution>
                        <id>attach-javadocs</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions> 

No, you didn't exclude anything from the plugin's classpath. Read: https://maven.apache.org/pom.html#plugins

It still happens with maven 3.9.4 and javadoc plugin 3.6.0.  Tested with a dummy pom containing no dependency and no explicit parent. I used default maven cfg. However it downloads only {{log4j-1.2.12.pom}} , not the jar, so it shoud be safe. Strange but safe. 

See also https://stackoverflow.com/questions/77148657/maven-command-mvn-javadocjar-downloads-log4j-1-2-12

It should be possible to put log4j 1.2.17 somewhere higher up in the dependency tree oe just use dependency management, and that will take precedence over 1.2.12. This should fix any project that depends on maven-javadoc-plugin. If one is simply running maven-javadioc-plugin, we'd still need a release. 

elharo opened a new pull request, #242:
URL: https://github.com/apache/maven-javadoc-plugin/pull/242

   (no comment)




elharo commented on PR #242:
URL: https://github.com/apache/maven-javadoc-plugin/pull/242#issuecomment-1729444447

   IT failure is likely related; investigating...




There are still issues in 1.2.17: https://logging.apache.org/log4j/1.2/index.html

I wonder if there's some way to swap in org.apache.logging.log4j:log4j-1.2-api even though the coordinates are different? maybe if we exclude log4j:log4j?



You want reload4j.

elharo opened a new pull request, #243:
URL: https://github.com/apache/maven-javadoc-plugin/pull/243

   Alternate appioach to keeping log4j out of the tree by excluding veliocty-tools.
   
   Nuked log4j from my .m2/repo and veriifed that the sample project now only downloads 1.2.17 when generating javadoc with 3.6.1-SNAPSHOT with this patch




michael-o commented on PR #243:
URL: https://github.com/apache/maven-javadoc-plugin/pull/243#issuecomment-1729521784

   Let's wait for CI.




Interesting. I haven't seen reload4j before. I wonder why the devs didn't just take over log4j 1.x? That would avoid the hassle of navigating between different maven coordinates.

I've been wondering for a few years if the whole Maven central repo system is anthithetical to open source because it effectively prevents even very useful, well-intentioned, and well thought out forks like that one from being true drop-in replacements. 

elharo commented on PR #243:
URL: https://github.com/apache/maven-javadoc-plugin/pull/243#issuecomment-1729588030

   CI being flaky. I'll rerun if needed
   
   Recording test results
   
   [GitHub Checks] Causes for no suitable publisher found: 
   [GitHub Checks] Trying to resolve checks parameters from GitHub SCM...
   [GitHub Checks] No GitHub app credentials found: '5f95d117-af3b-452a-9e5c-4bddb22a67f4'
   [GitHub Checks] See: https://github.com/jenkinsci/github-branch-source-plugin/blob/master/docs/github-app.adoc
   [GitHub Checks] Trying to resolve checks parameters from Git SCM...
   [GitHub Checks] Job does not use Git SCM
   [Checks API] No suitable checks publisher found.




elharo commented on PR #243:
URL: https://github.com/apache/maven-javadoc-plugin/pull/243#issuecomment-1729591108

   same failure as before on JDK 8 Linux:
   
   Error:  The following builds failed:
   Error:  *  MJAVADOC-427/pom.xml
   
   Looks like it might be an IT that's checking for very specific output.




elharo commented on PR #243:
URL: https://github.com/apache/maven-javadoc-plugin/pull/243#issuecomment-1729595864

   Problem in IT is looking for the regexp
   
   Link to slf4j <a href=".*?".*?><code>LoggerFactory<\/code><\/a>
   
   but it's finding
   
   Link to slf4j <code>LoggerFactory<\/code>
   
   That is, the link has vanished. That might be significant.
   




michael-o commented on PR #243:
URL: https://github.com/apache/maven-javadoc-plugin/pull/243#issuecomment-1729597761

   > same failure as before on JDK 8 Linux:
   > 
   > Error: The following builds failed: Error: * [MJAVADOC-427](https://issues.apache.org/jira/browse/MJAVADOC-427)/pom.xml
   > 
   > Looks like it might be an IT that's checking for very specific output.
   
   Please check these...




elharo commented on PR #243:
URL: https://github.com/apache/maven-javadoc-plugin/pull/243#issuecomment-1731361715

   same IT failed in the same way in the effort to upgrade to 1.2.17. I still don't see how this change would cause that particular failure since neither doxia nor log4j is involved in that code path. Need to check what happens with an innocuous change




elharo commented on PR #243:
URL: https://github.com/apache/maven-javadoc-plugin/pull/243#issuecomment-1731364159

   I do note that this failure might be caused by an unrelated problem resolving the link to a remote website that is possible from my local MacBook but not from the CI server. If so, it should repro on all PRs. 




elharo opened a new pull request, #244:
URL: https://github.com/apache/maven-javadoc-plugin/pull/244

   No actual code changes so if MJAVADOC-427 IT fails, we can believe it's broken in the CI




elharo commented on PR #244:
URL: https://github.com/apache/maven-javadoc-plugin/pull/244#issuecomment-1731438120

   Annoyingly all tests are passing:
   
   [INFO] Building: MJAVADOC-427/pom.xml
   [INFO] run post-build script verify.groovy
   [INFO]           MJAVADOC-427/pom.xml ............................. SUCCESS (12.14 s)
   
   I'd bust out the debugger except this is passing locally too. maybe some more logging? 
   




elharo commented on PR #243:
URL: https://github.com/apache/maven-javadoc-plugin/pull/243#issuecomment-1732294752

   And now the tests are all passing. It does look like this IT is simply flaky (and likely moreso on the CI server) because it relies on external network connections that sometimes fail. 




elharo closed pull request #242: [MJAVADOC-726] update to log4j 1.2.17 in dependency tree
URL: https://github.com/apache/maven-javadoc-plugin/pull/242




elharo merged PR #244:
URL: https://github.com/apache/maven-javadoc-plugin/pull/244




elharo merged PR #243:
URL: https://github.com/apache/maven-javadoc-plugin/pull/243




should be resolved in next release

MicahThierry commented on PR #242:
URL: https://github.com/apache/maven-javadoc-plugin/pull/242#issuecomment-1738633199

   ```java
   
   ``` 




