Is this REALLY a blocker for 4.0, or just something we hoped would land?

[~jjirsa] I would say it's quite important to clean up compact storage internals in 4.0 before the release. It should have no visible side-effects, but it'd be very good to have as it simplifies multiple code paths.

Hi [~jjirsa] and [~ifesdjeen],

Maybe I can help with this one?

[~e.dimitrova] sure! 

In short, we've recently deprecated thrift, but some of the parts that were used for thrift compatibility in the new storage engine are still present. For example, {{isDense}}, {{isCompact}}, {{isSuper}} [methods|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/schema/TableMetadata.java#L238-L276] and [flags|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/schema/TableMetadata.java#L70]. We need to remove usages and mentions of those, only leave enough to make sure we have reasonable error messages. You can find a bit more information on compact storage in [CASSANDRA-10857]. 

Thanks, I put it on my list!

Making myself as a reviewer. [~ifesdjeen] please feel free to add yourself if you also want to review this.

Thanks [~djoshi], as this one is marked to land at rc not alpha/beta I haven't started it yet. 
Please let me know if it is a blocker for something and requires faster attention.

Just to make sure: there's no rush to make this change: it doesn't block 4.0, and can even be done later, since there's no API or behaviour change. We definitely need to be very careful when removing usage of compact storage methods, since most of the usage is in around the storage engine. Also, it might be useful to know the impact of the removal and whether or not we got anything from it performance-wise, since it'll give some information about about 3.0 and 3.11 as well.

[~e.dimitrova] since this might be a complex change, it would be important to get started with this sooner than later as it might require longer review cycles.

[~ifesdjeen] we definitely need to be careful. Since both [~e.dimitrova] and I could benefit from your experience, it would be great to have you as a second reviewer and if you'd like, please add any additional pointers for the changes you'd expect as part of the ticket.

Thank you [~djoshi]. This is a valid point so I am gonna start working in parts on this.
I will make a round on the details how this should look like and come back with potential questions.

Thanks [~ifesdjeen], I will keep this in mind while implementing this.

Current version of the patch [here|https://github.com/ekaterinadimitrova2/cassandra/tree/CASSANDRA-13994]

Fixed the few tests which were failing.
Have some ccm issues when I tried to upgrade locally and check the indexes defunct properly. Will try again tomorrow. 

[Patch|https://github.com/ekaterinadimitrova2/cassandra/tree/CASSANDRA-13994]
[CI Java8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/118/workflows/9e57522d-52fa-4d44-88d8-5cec0e87f517]
[CI Java11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/118/workflows/4938a2b2-28dd-45e7-971a-cbe5d656f86e]

There are a couple of failures which are flaky tests that exist also on the trunk, not related.
Two outstanding questions:
    - After the user migrates the compact storage, is it enough if we update the upgrade documentation and indexes defunct properly in case the user still have them and try to use them? Or do we want to iterate on start through the indexes again (further to checking for not migrated COMPACT STORAGE tables) check for old indexes of kind KEYS, and prevent the server from start? For now there is a warning added to the one during server start if the user should migrate from compact storage when they haven't done It yet.
   - About the system table Built_indexes, I saw there is some SystemKeyspaceMigrator40 class, I guess on start we can check and migrate this table there (if it was not already migrated) ?


Looked at the patch. I left a few nitpicks [on this commit|https://github.com/pcmanus/cassandra/commit/0ab608cbb6f78657ae6b3e99cea0f47d84aa3dad]. More general remarks/questions:
 * I'd be in favor of removing support for the native protocol V3 while at it. V4 has been out since pre-C* 3.0, and V3 still use the cell layout in the paging state, which force us to keep some legacy code around like {{CellInLegacyOrderIterator}} in {{BTreeRow.java}} (plus, some complexity in {{PagingState}} can be nixed if we remove it). Overall, I find it doubtful that anyone would still be on V3 on 3.X+, but even if someone is, I think forcing them to upgrade to V4 pre-upgrade to 4.0 is a good idea even outside of the benefit of allowing us to remove some code.
 * In {{TableMetadata:}}
 ** I think we should remove the {{#isCompound}} method, as only compact tables could ever be non-compound, so "compound" does not make sense anymore. Also, we shouldn't remove the {{&& flags.contains(Flag.COMPOUND)}} part from {{Flag#isSupported}}, as a non-compound table is _not_ supported anymore and is indicative of someone forgetting to use {{DROP COMPACT STORAGE}}.
 ** We should however keep the {{CompactTable#isSuperColumnMapColumn}} method and its call (though it's probably not worth keeping the {{CompactTables}} class for that; a static method in {{TableMetadata}} is probably fine; I pushed a commit doing just that [here|https://github.com/pcmanus/cassandra/commit/0ab608cbb6f78657ae6b3e99cea0f47d84aa3dad] if you'd like) .
 * In {{SchemaEvent.java}}, in {{repr(TableMetadata)}}, we should keep the "isCounter" case (we still support counter tables). However, we should remove the "isCompound" entry (for the reason mentioned above).
 * In {{ColumnFamilyStore}}, at the end of the ctor, the code to detect unsupported indexes has been commented out. Is that intentional?
 * Maybe worth removing the references to {{COMPACT STORAGE}} in the doc, namely those in {{doc/source/cql/ddl.rst}}.
 * I'm a bit unsure what our story about upgrading KEYS indexes is, and in particular, I'm unsure we can remove them like that. That is, while we could ask users to drop their KEYS index and re-create them afterwards, this cannot be done without downtime (for anything touching the index), and are we OK with that?

{quote}About the system table Built_indexes, I saw there is some SystemKeyspaceMigrator40 class, I guess on start we can check and migrate this table there (if it was not already migrated) ?
{quote}
That's an option, and I'm ok if that's done. But fwiw, I'm equally ok with letting it be. Basically, that table simply has a {{value}} column that is unused, but as that table is meant for internal consumption in the first place, that feel like a pretty minor detail. So either way is fine with me.
{quote}We definitely need to be very careful when removing usage of compact storage methods, since most of the usage is in around the storage engine.
{quote}
I wanted to point out that all the hard, deep, storage engine level changes have been done when removing thrift, some times ago. The patch here is actually pretty simple and almost exclusively touch CQL. It's also pretty easy to convince oneself that the majority of the change is just removing dead code.

The one exception imo is the 2ndary index question, and that's worth being careful, but the rest is pretty straightforward.
{quote}Also, it might be useful to know the impact of the removal and whether or not we got anything from it performance-wise
{quote}
Related to my previous point, I'm cool if we do performance testing, that never hurt, but I think this is *very* low on the list of tickets that justify the effort. Again, we're merely removing a bunch of 'if' in CQL that are never taken anymore, so the performance impact is almost surely non measurable, one way or another.

Thanks [~slebresne]!

[~ifesdjeen] and [~djoshi], any thoughts on:
 * the 2ndary index
 * [~slebresne]'s proposal also to remove native protocol V3
 * considering the ML discussion and what [~slebresne] also mentioned, do you agree to complete this work and commit while still in Alpha?

I will rebase and do another pass after we take a decision on those. Thanks!

I promise you lots of people are still running native proto v3, please don't remove it this far into the alphas.




Echoing that, yes; removing protocol V3 at this point would delay the ability of many to upgrade to Cassandra 4.0 and reduce the amount of prerelease testing that can be performed due to use of older driver versions.

{quote}please don't remove it this far into the alphas.
{quote}
{quote}removing protocol V3 at this point would delay the ability of many to upgrade to Cassandra 4.0
{quote}
Fair enough, I don't mind keeping it more than that.

Though, fwiw, I do am a bit surprised by your points. Protocol v4 was added back in 2.2.0, and was a small enough iteration over V3 that the main drivers supported it right away. And C* 4.0 does not support upgrading from 2.X directly at all (in fact, reminder that you need to upgrade from at least 3.0.13 or 3.11.0 according to the NEWS file). Requiring that users have upgraded their driver version in the last 5 years didn't felt, a priori, a big constraining ask to me. But I trust your "lots of people" and "of many" are backed by data, so again, happy to keep V3, I just admit surprise. TIL.

Until we decide on whether or not to defer this ticket to a future release, can we mark it {{4.0-alpha}} if it changes user facing interfaces and {{4.0-beta}} otherwise? This is a large ticket and {{4.0-rc}} isn't the appropriate target completion stage in the release cycle. 

[~jwest], corrected, thank you!

 

[~djoshi] - are you reviewing this? Or Jordan, or Sylvain, or....?  :)

 

Seems like we have a lot of hands on this one. Just want to clarify so I know who to -badger- follow up with about it.

I have made a first pass of review and offered a few remarks above.

But I think this ticket is hang up on us deciding whether removing the KEYS 2ndary index code is ok or not. And this yield, to me, the question of what is the upgrade path to 4.0 for users that still have KEYS index (which, reminder, could only be created with Thrift, but could _used_ with CQL and thus still be around).

Because, while I haven't tested this myself, I suspect we have a hole here.

Namely, KEYS index were compact tables, and 4.0 does not *start* if there is still compact tables. And while for user tables, user are asked to use {{DROP COMPACT STORAGE}} before upgrading, this cannot be done on KEYS index (there is just no syntax to do it), so unless there is code I'm not aware of (and please, someone correct me if I'm wrong), I don't think user can upgrade to 4.0 at all if they still have KEYS index. They'd have to drop those index first.

So If I'm right here, this technically mean removing the KEYS index code in 4.0 is fine, since you cannot upgrade in the first place if you have KEYS index. But the more important question for 4.0 imo is what is the upgrade path for users if they have a KEYS index in 3.X?

Currently (without code changes), the only available option I can think of is that before upgrade to 4.0, users would have to 1) drop their KEYS index and then 2) re-create a "normal" (non-KEYS) equivalent index.

Are we comfortable with that being the upgrade path for KEYS index?

Personally, I'm not sure I am because this is not a seamless upgrade, as between the 1) and 2) above, there is a window where there is no accessible index, so if the user application rely on it, it means a period of downtime for the application to perform the upgrade. However, if we want a more seamless upgrade, we need to figure something out, and that probably involve non trivial amounts of code and testing. And, playing devil's advocate, KEYS index being so old, maybe nobody that plans to upgrade to 4.0 have them anymore, and maybe it's not worth bothering?

So I could use others opinions here.

Tl;dr, this ticket raises the point that "Oops, I'm not sure we have though through the question of upgrade to 4.0 for KEYS indexes". And tbc, it's not directly related to this ticket, only indirectly, but it is still something we need to figure out. And I'd say, before 4.0-alpha. But I'm happy to create a separate ticket specific to that question if that helps.

Given that there are multiple discussions concerning this ticket happening, can someone please clarify if we want to move forward with this? Last time I checked in on the discussion for this ticket, people voiced concerns about making such an invasive change in alpha release. This ticket was deemed too risky and would 'invalidate testing'. This was the last known consensus on the mailing list. Has that changed? Why? Can someone please point me to the discussion that led to this decision? Or is it that we're just revisiting this ticket in the light of some new information?

bq. can someone please clarify if we want to move forward with this?

I vote yes (see additional context on the mailing list).

bq. This ticket was deemed too risky and would 'invalidate testing'

I don't know where those qualifications come from, and on what they were based, but they simply don't match what this ticket does and the attached patch. This ticket just removes dead code, not _that_ much of it, and it's hardly a chirurgical removal. There is no testing invalidation nor invasive changes involved. This is fake news.

I think people just got scared because this is compact storage and that has historically been messy. But the truth is that nearly all the complex and invasive removal of legacy code has been committed _years_ ago, mainly by CASSANDRA-11115, CASSANDRA-12716 and CASSANDRA-10857. This ticket is just cleaning 2 small left-over, that's all.


Getting back to the KEYS index question.

bq. I don't think user can upgrade to 4.0 at all if they still have KEYS index.

I was wrong.

I tested it now (see [this upgrade test|https://github.com/pcmanus/cassandra-dtest/commit/09a6a9888a73eb14613eaecb4dc7e5cba9a46765#diff-59d5ceaa3ba81b0a9a360dedcf3bed16R378], but you if you create a KEYS index through thrift (in 2.x/3.x), {{DROP COMPACT STORAGE}} on the base table and then uprade from 3.11 to 4.0, this 'just work'™ (a rolling upgrade can be done while continuing to use the KEYS index before, during and after the upgrade).

I though this would have broke because 4.0 crashes if it finds tables with compact storage "flags" when reading the schema system tables, but 2i metadata are not written there so this pass. We still hit [this warning|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/schema/TableMetadata.java#L140] (and we should remove the calls to {{isDense}} and {{isCompound}} in {{CassandraIndex}} to avoid that) but that is the only consequence.

So my opinion here is that we should keep KEYS index for now (so revert their removal by this ticket), as we currently imo don't have a good upgrade story for them otherwise. We can look at this more closely later, but for me, it's not urgent, as their code is not that complex and fairly isolated.

I'll create a followup ticket soonish to add that upgrade test mentioned above and discuss a few minor related points, but as far as this ticket goes, let's keep KEYS indexes.


Thanks [~slebresne] for spending the time on this. Appreciate it!
I also did a quick CCM test upgrading locally while still having the indexes and I didn't see any issues. 

If the community still wants the dead code removed, I can rebase and go through the points of your initial review next week. (and returning the KEYS index back of course)
If that is the case I also support you that this one would be even doable in beta as it will be really only the dead code removal. Yes, there was a bit of a work done around the parser but I also don't see it as breaking or blocker. 



{quote}This ticket just removes dead code, not _that_ much of it, and it's hardly a chirurgical removal. 
{quote}
Am I too optimistic in reading this as "this ticket could be appropriate for the beta phase"?

[~jmckenzie]  Personally, I don't see a reason not to move it to beta if we cut index removal from its scope and only remove the already not used dead code. 

Agree with Sylvain on all points here. This is just cleanup of dead, unreachable code that doesn't change any API. It can go in an alpha, a beta, or even RC if needed.

Thank you [~slebresne] and [~aleksey] for your input. I just moved it to beta so we can concentrate now on the final outstanding alpha tickets.

I will rebase and cut the scope of the patch to the removal of the dead code as agreed, also will take into consideration the points [~slebresne] made in his initial review.

Moving it back to open to show that there is still work to be done but not working on it in this very moment.

[~slebresne] post review changes done and committed to this [pull request | https://github.com/ekaterinadimitrova2/cassandra/pull/30] . I didn't squash the commits so you can easily identify the latest changes. I will do it + remove the CircleCI custom config as soon as we agree on the final version of the patch. 

CI looks good to me:
[JAVA8 | https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/275/workflows/8bb7dda4-0ba2-491c-bc85-dd96814f8bfb]
[JAVA 11 | https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/275/workflows/e61bcd92-d57f-42e9-8771-1b883863f93d]

The failures are not related. 
Unfortunately, on CircleCI this is the best we can get from the upgrade tests due to resource allocation issues.

 [~mck], is it possible to run them in Jenkins at the moment? 

bq. Michael Semb Wever, is it possible to run them in Jenkins at the moment?

ci-cassandra-apache.org run for the patch [here|https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/208/]
(bear in mind that the devbranch aggregated test results are not currently working, you need to step into the stage builds to check tests, fix in progress for that)

As [~slebresne] is not available, [~djoshi], [~ifesdjeen] or anyone else having the time to make the final review so I don't have to rebase again this patch? As agreed, I returned the indexes part and now only the dead code removal is there. 

 [~jwest] , I heard that you are familiar with the compact storage codebase, will you be able to do a quick review for me this week ? I really want to get this ticket move forward if you have some time. 

Available again so did a review pass on the last version.

And that last version looks good to me. I just gathered a few last nits/minor suggestions in [this commit|https://github.com/pcmanus/cassandra/commits/C-13994-review]. Which is mostly cleaning a few minor things and updating/adding comments. The only 2 real 'code changes' there are:
* in {{CassandraIndex#indexCfsMetadata}}, the leftover special case for keys index felt more cleanly handled now by overriding the {{CassandraIndexFunctions#addIndexClusteringColumns}} method, which this commit does.
* we were checking/throwing for unsupported flags both in {{TableMetadata}} ctor and in {{SchemaKeyspace#fetchTable}}, and this with different messages, but the latter calls the former in all cases, so I simplified a bit keeping only the {{TableMetadata}} ctor case.

But those are all minor suggestions so whether you keep them or not, +1 from me (assuming CI is still clean on this obviously).


Thank you for the review and the additional suggestions which I cherry-picked to the patch [~slebresne]

CI run results after rebase and the addition of your commit look good to me:

[JAVA8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/296/workflows/953f79e3-7416-4375-82cf-3dcfeda61ab3] [JAVA11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/296/workflows/f60d6eca-8bd1-4d68-add7-0a13c35f4695]
 * stMessagePurging - org.apache.cassandra.net.ConnectionTest - CASSANDRA-15958; failing both for Java 8 and Java 11
 * test_simple_parallel_repair - repair_tests.repair_test.TestRepair - not related, I will add it to be checked with CASSANDRA-15986; Java 8
 * j11_cqlsh-dtests-py38-with-vnodes show they failed but they passed, there was at the end some circle resource issue
 * test_resumable_rebuild - rebuild_test.TestRebuild - failing in java 11; CASSANDRA-15892
 * test_dead_sync_initiator - repair_tests.repair_test.TestRepair - CASSANDRA-15963
 * test_authentication_handle_unavailable - auth_test.TestAuthUnavailable - java 11 - not related; have to check whether a ticket is needed
 * The upgrade tests that are failing for reason different than No Host Available(test_static_columns_with_2i and upgrade_udtfix_test) were already failing on trunk in Jenkins: [https://ci-cassandra.apache.org/job/Cassandra-trunk-dtest-upgrade/1/#showFailuresLink]

 

Commits squashed and custom CircleCI config file removed [here |https://github.com/ekaterinadimitrova2/cassandra/commit/e7de05c5ca70fa59aab622f2df41529971e63fb6] 

 

Great work [~e.dimitrova], thanks. Committed.

