QA run this.

+1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12677192/draft.patch
  against trunk revision 1634174.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2401//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2401//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2401//console

This message is automatically generated.

+1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12677409/ZOOKEEPER-2069.patch
  against trunk revision 1634174.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2402//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2402//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2402//console

This message is automatically generated.

+1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12678331/v2.patch
  against trunk revision 1634776.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2409//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2409//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2409//console

This message is automatically generated.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12678338/v3.patch
  against trunk revision 1634776.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2410//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2410//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2410//console

This message is automatically generated.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12678392/v4.patch
  against trunk revision 1634776.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2411//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2411//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2411//console

This message is automatically generated.

The patch on the review board is the one in the draft.patch file uploaded above, yes? Even if it is a preliminary patch, next time please name it after the jira number.

Thanks [~fpj] for the advice. Still learning how to get this right. 

The patch in review board is the latest patch "QA-run-nettyclient-for-test.patch".
I am running ClientCnxnSocketNetty as default to show a jenkins test.

Got it, thanks.

Updated patch to eliminate duplicate netty close

Tested this live with load test (against NIO server).
It beats ClientCnxnSocketNIO in write speed.

ClientCnxnSocketNIO 200000 writes / 20201 ms
ClientCnxnSocketNetty 200000 writes / 13921 ms

[~fpj]

I tried to update the patch regarding your comments and reuse channelFactory but my local jenkins tests showed frequent flaky failure. 
I will keep investigating and following up.

[~fpj]
At the mean time, please feel free to look at the change (only made in ClientCnxnSocketNetty) and point out anything I misunderstand.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12678728/ZOOKEEPER-2069-v2.patch
  against trunk revision 1634776.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2415//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2415//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2415//console

This message is automatically generated.

Uploaded a more stable patch (v3).

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12678759/ZOOKEEPER-2069-v3.patch
  against trunk revision 1634776.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 2 new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2416//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2416//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2416//console

This message is automatically generated.

Hi [~fpj],

Experimented a few cases over past days.

My finding regarding your comments:
bq. Shouldn't isConnected return true in the case channel isn't null instead of channelFactory? In fact, it sounds like this implementation is instantiating a new ChannelFactory every time it tries to connect (modulo an attempt already being in progress). It doesn't sound necessary.

Yes. isConnected had better be based on (channel != null && channel.isConnected).

However, I found a problem reusing channelFactory -- Some un-handled errors that happened in Netty channel closing will propodate in the executors thread pool and crash later connection tries. 
It can be resolved by creating a new channelFactory for every new connect. I couldn't come up with perfect solutions to isolate channel errors on top of my head.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12679037/ZOOKEEPER-2069-v6.patch
  against trunk revision 1634776.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2419//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2419//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2419//console

This message is automatically generated.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12679047/ZOOKEEPER-2069-v7.patch
  against trunk revision 1634776.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2420//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2420//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2420//console

This message is automatically generated.

I have run local jenkins and make sure of another stable patch again. Uploaded as "v8".

Just a little update:
1. The sendPacket method is concurrent to the other lifecycles methods (connect, doTransport, cleanup, etc.) and it is possible that it still sends something even the channel is closed.
2. In such case, I got a few "ClosedChannelException"s. And the errors were propogated throughout the executors thread pool of channel factory.
3. As such, I am creating a new channel factory and everything new on new connection. This helps isolate error propogation and thoroughly close previous connection.

Let me know if there is any better solution.

QA run this (netty client as default).

Rerun QA..

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12679404/ZOOKEEPER-2069-v8.patch
  against trunk revision 1634776.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2426//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2426//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2426//console

This message is automatically generated.

Failure is irrelevant:
{code}
ReconfigRecoveryTest.testCurrentServersAreObserversInNextConfig
{code}

[~fpj]
I have run through tens of GREEN Jenkins test in personal cloud. I have tried my best to make it stable and asked some people for help testing it.

At the mean time, please take time to review and give feedback to the patch. Thanks!

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12679464/ZOOKEEPER-2069-v9.patch
  against trunk revision 1634776.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2427//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2427//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2427//console

This message is automatically generated.

FIx a typo.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12679535/ZOOKEEPER-2069-v9.patch
  against trunk revision 1634776.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2428//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2428//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2428//console

This message is automatically generated.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12679572/ZOOKEEPER-2069-v9.1.patch
  against trunk revision 1634776.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2429//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2429//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2429//console

This message is automatically generated.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12679608/ZOOKEEPER-2069-v9.2.patch
  against trunk revision 1634776.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2431//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2431//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2431//console

This message is automatically generated.

[~hdeng], thanks for updating the patch. Your justification for creating a channel factory upon every connect doesn't make a lot of sense to me, though. The sendPacket method propagates up already IOException so I don't understand why it is a problem if you get a closed channel; such exceptions are expected.

Hi [~fpj].

My jenkins test showed frequent failures while re-using channel factory resources. My worry comes down to this question:

  http://stackoverflow.com/questions/26748897/got-closedchannelexception-because-writing-to-channel-after-its-closed

In short, I feel it's safer to isolate resources. I am pretty sure that this method will work (I also asked a few to test "v9.2" patch in real deployment).

But I am not sure the other way, which is re-using channel factory as you suggested. Could you share more knowledge if you understand this part? I will keep searching and asking for the root causes.

[~fpj]

Just a summary of my question/concern:
1. some data written to the old closed channel, because it's all asynchronous.
2. at the mean time, there is a newly created channel (reconnected to another address) running.
3. The ClosedChannelException is being thrown. Here I am worried that without isolation of thread pool resources something wrong could happen.

Still searching the answer now. But the safest option I have is to isolate them (i.e. create a new channel factory here). Please share your feedback on this :)

[~fpj]
I did some investigation into test failures. It seems like those closedChannelException are actually from Netty *SERVER*. Sorry for my mistakes before.

I will follow up shortly with a patch ensuring no writes after channel closed. At the mean time, it seems netty server is not quite solid, which part of our SSL roadmap too.



And I also figured out the failures are not caused by ClosedChannelException. There is actually a race between the read and write operations in my previous patch. In NIO, read and write are sequential. I will update with another patch shortly.

[~fpj]

I have figured out the problem, fixed, tested, and passed Jenkins greens. It gets stable now.

Please help review in RB and share feedback. Thanks!

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12680874/ZOOKEEPER-2069-v11.patch
  against trunk revision 1637293.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    -1 contrib tests.  The patch failed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2436//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2436//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2436//console

This message is automatically generated.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12680897/ZOOKEEPER-2069-v11.patch
  against trunk revision 1637293.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2437//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2437//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2437//console

This message is automatically generated.

If you look into the test result, "v11.patch" didn't have any test failure:

  https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2436//testReport/

The build process is stuck on the C client test:

  https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2436/console

{code}
     [exec]      [exec] make  check-TESTS
     [exec]      [exec] make[1]: Entering directory `/home/jenkins/jenkins-slave/workspace/PreCommit-ZOOKEEPER-Build/trunk/build/test/test-cppunit'
     [exec]      [exec] make[2]: Entering directory `/home/jenkins/jenkins-slave/workspace/PreCommit-ZOOKEEPER-Build/trunk/build/test/test-cppunit'
     [exec] /home/jenkins/jenkins-slave/workspace/PreCommit-ZOOKEEPER-Build/trunk/src/java/test/bin/test-patch.sh: line 463: 26635 Killed   
{code}

I doubt this is Infra's problem..

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12680906/ZOOKEEPER-2069-v11.patch
  against trunk revision 1637293.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2438//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2438//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2438//console

This message is automatically generated.

Thanks for the updates, [~hdeng], I'll check the RB.

Hi [~hdeng],

I'm curious why this does not implement ClientCnxnSocketNetty.disableWrite()?

[~iandi]
disableWrite() is an internal thing only called by ClientCnxnSocketNIO.

Netty doesn't have the concept of enable/disable write interest. NIO has the need because the blocking select will return immediately even if there is nothing in the queue. Logically, they should behave the same: write only waits for new items in outgoingQueue.

Hi [~rgs].
Thanks for your comments in RB. There's one point I didn't understand. Would you mind to write down the code in RB or here? 


Updated per Raul's comments.

[~iandi] [~fpj]

It's been a while. How's progress of this SSL thing? Any more suggestion on the client side? 

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12683385/ZOOKEEPER-2069-v12.patch
  against trunk revision 1640635.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2445//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2445//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2445//console

This message is automatically generated.

Hi [~hdeng],

I'm working on SSL in NettyServerCnxnFactory, and the Netty client you have sent. In perhaps a week I will be able to send a patch. I'll create a subtask for the server when I do this.

[~iandi]
:) Sounds perfect!
FYI, I just uploaded a new patch regarding Raul's comment. No big change though..

Hi [~iandi].

How is the progress now? Is there anything I can help write or review?

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12684773/ZOOKEEPER-2069-v13.patch
  against trunk revision 1642444.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 6 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2446//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2446//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2446//console

This message is automatically generated.

[~fpj].

I think it's better to changing outgoingQueue from linked list to blocking queue. In order to refactor that, we need to use LinkedBlockingQueue (addFirst), which requires *JDK 6*. -v- Might be a good time to upgrade.

Disregard that... JDK 5 has linkedBlockingqueue.

So I meant LinkedBlockingDeque (requires JDK 6). It has addFirst() method which LinkedBlockingQueue doesn't.

Hi [~fpj],

I have addressed your last comments and finished a new patch. Can you take a look in ReviewBoard? I also create a github PR for better code navigation:

https://github.com/fengjingchao/zookeeper/pull/1/files

You can jump to files quickly.

Thanks!

Uploaded 'v-14' patch that's the latest change but use NIO by default. The patch in RB use Netty by default because I tested it in my Jenkins.

This change makes the logic much simpler and refactors a few code, notably:
1. wakeupCnxn is broken into two calls: packetAdded(), onClosing()
2. pendingQueue is ConcurrentLinkedQueue
3. outgoingQUeue is LinkedBlockingDeque
4. I studies the code of Sasl process and figure out iterating the whole queue is a waste. The sasl just sends the first priming packet and then block other packets until completed.
5. Fix a flaky test (testNonExistingOp) because in Netty reads and writes are in parallel so exist() could go first before server sendCloseSession()
6. refactoring

Feedback is highly welcome!

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12685460/ZOOKEEPER-2069-v14.patch
  against trunk revision 1642444.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    -1 javac.  The applied patch generated 3 javac compiler warnings (more than the trunk's current 2 warnings).

    -1 findbugs.  The patch appears to introduce 4 new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2448//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2448//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2448//console

This message is automatically generated.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12685483/ZOOKEEPER-2069-v14.patch
  against trunk revision 1642444.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    -1 javac.  The applied patch generated 3 javac compiler warnings (more than the trunk's current 2 warnings).

    -1 findbugs.  The patch appears to introduce 4 new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2449//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2449//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2449//console

This message is automatically generated.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12685502/ZOOKEEPER-2069-v14.patch
  against trunk revision 1642444.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    -1 javac.  The applied patch generated 3 javac compiler warnings (more than the trunk's current 2 warnings).

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2454//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2454//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2454//console

This message is automatically generated.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12685486/ZOOKEEPER-2069-v14.patch
  against trunk revision 1642444.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    -1 javac.  The applied patch generated 3 javac compiler warnings (more than the trunk's current 2 warnings).

    -1 findbugs.  The patch appears to introduce 1 new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2451//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2451//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2451//console

This message is automatically generated.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12685498/ZOOKEEPER-2069-v14.patch
  against trunk revision 1642444.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    -1 javac.  The applied patch generated 3 javac compiler warnings (more than the trunk's current 2 warnings).

    -1 findbugs.  The patch appears to introduce 1 new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2453//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2453//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2453//console

This message is automatically generated.

+1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12685509/ZOOKEEPER-2069-v14.patch
  against trunk revision 1642444.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2455//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2455//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2455//console

This message is automatically generated.

Hi [~rakeshr] [~fpj] [~rgs].

Anyone else can take look at my patch: https://reviews.apache.org/r/27244/diff/#
and help drive Netty, SSL stuff in?

Thanks!

Nice work [~hdeng]. I've added few comments, please see it.

Do you happen to know why AsyncHammer failed in one of the QA runs?

[~fpj]
I couldn't tell from the log.
Strictly, it's Netty-Netty AsyncHammerTest failing.

I have to admit that I haven't looked into the code of Netty server yet. Let me use Netty-Netty by default and see how it works out in my local Jenkins. Nonetheless, it's beneficial to gain more attention to Netty server once we have SSL and fix more bugs (ZOOKEEPER-2068).

bq. it's beneficial to gain more attention to Netty server once we have SSL and fix more bugs

agreed

Addressed some comments:
1. logging
2. change 'pendingQueue' back from ConcurrentLinkedQueue to List and synchronized
3. target JDK 7

Uploaded 'v-15' to see how NIO test showing up. I have local Jenkins testing how Netty goes with test by default. Will keep watching if any test failure and notify people here.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12686718/ZOOKEEPER-2069-v15.patch
  against trunk revision 1642444.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    -1 javac.  The patch appears to cause tar ant target to fail.

    -1 findbugs.  The patch appears to cause Findbugs (version 2.0.3) to fail.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2457//testReport/
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2457//console

This message is automatically generated.

it shows:
bq. javac: invalid target release: 1.7

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12686732/ZOOKEEPER-2069-v15-jdk6.patch
  against trunk revision 1642444.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 1 new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2458//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2458//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2458//console

This message is automatically generated.

+1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12686746/ZOOKEEPER-2069-v15-jdk6.patch
  against trunk revision 1642444.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2459//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2459//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2459//console

This message is automatically generated.

+1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12687051/ZOOKEEPER-2069-v16.patch
  against trunk revision 1642444.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2460//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2460//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2460//console

This message is automatically generated.

What has changed in this new patch compared to the previous iteration, @hogchao? I'm actually not sure if there is an easy way of checking what has changed from the previous revision in the review board.

Hi [~fpj]. Sorry for the late response.

1. There is a way to check changes from previous revision.
In RB: under each "Review request changed", there is a "Show changes" link.
If you are more comfortable with Github, I have actually created a [local PR|https://github.com/fengjingchao/zookeeper/pull/1] for myself. You can view the commits there to see relevant changes. Except the last commit "use netty" that I do it for my local Jenkins job.

2. What changes did I make this time?
I changed
{code}
            for (Packet p : outgoingQueue) {
                conLossPacket(p);
            }
            outgoingQueue.clear();
{code}
to
{code}
            Iterator<Packet> iter = outgoingQueue.iterator();
            while (iter.hasNext()) {
                Packet p = iter.next();
                conLossPacket(p);
                iter.remove();
            }
{code}
I missed a case that between iterating and clearing there is race.

Thanks for your attention too!!

I'm not sure this is going to work. Previously the synchronized block was preventing the collection from being modified, but with this code the underlying collection may change, which may lead to incorrect behavior, no? Maybe it wasn't a good idea after all to use a concurrent data structure.

1. I do agree to remove previous synchronized block is risky.
2. I think waiting on a blocking queue (which you suggested) is the right thing in doTransport.

What about my old suggestions: add back those synchronized and exclude related findbug rules.
The worst case is to I can provide the old semaphore solution :)

Do you have any other idea? [~fpj]

I actually hadn't realized that the diff revision slider has two cursors, so you can actually arbitrarily select two revisions and see the changes between them... cool!

I'm fine with the findbugs exclusion rules. Just to make sure we are on the same page, your observation 2 relies on the fact that cleanup and doTransport can't be called concurrently, yes? And, the synchronized block in cleanup is to guarantee mutual exclusion between cleanup and queuePacket.

bq. your observation 2 relies on the fact that cleanup and doTransport can't be called concurrently
That's true.

One idea to avoid the synchronized block in cleanup (and possibly remove the one from queuePacket too) is to use a while loop in cleanup like this:

{noformat}
while(outgoingQueue.size() > 0) {
   outgoingQueue.drainTo(list);
   for each element p of list {
           conLossPacket(p);
  }
}
{noformat}

Let me know if you think this works, hopefully this pseudocode is clear.

I think you are concerned about not clearing up packets in outgoingQueue.
Let me summarize my understanding of cleanup() here.
cleanup() are for two purposes:

1. [Disconnection|https://github.com/apache/zookeeper/blob/b0a29d4a957a846a045e11ab158d53ef284e5a6b/src/java/main/org/apache/zookeeper/ClientCnxn.java#L1221]: the cleanup here is to notify *some* of packets that connection was lost. In here, we need to guarantee that the *previous* packets in outgoingQueue is cleared and notified. If there are new packets being queued, not a problem because they will be sent in next connection. I have three deep thoughts here: (1) it's the reason that I think blocking queue is a much better solution than the semaphore one. Because semaphore won't be wakeup up in next connection; (2) the later queued packet doesn't matter in next connection because priming packet is always *addFront*; (3) we can't simply try to eliminate later queued packet here because cleanup() here doesn't guarantee *closing* or *!state.isAlive()*.
{code}
            if (!state.isAlive() || closing) {
                conLossPacket(packet);
            } else {
                ...
                outgoingQueue.add(packet);
            }
{code}
2. [Session Expire/Close|https://github.com/apache/zookeeper/blob/b0a29d4a957a846a045e11ab158d53ef284e5a6b/src/java/main/org/apache/zookeeper/ClientCnxn.java#L1233]: the cleanup here is to clear everything. When it jumps to this point, it's guaranteed *closing* or *!state.isAlive()*. We can assume that no other packets will be added to outgoingQueue because they will be *notified* of death. After it's cleared, guaranteed cleared.

Now let's jump back to your suggestion. The looping check isn't needed in the first condition and guaranteed in the second. -v- Hope you don't mind long talk.

This essentially means that we don't need a synchronized(outgoingQueue) in cleanup... And if this is the case, we can also remove the synchronized(outgoingQueue) in queuePacket too, no?

Exactly.
The way I change cleanup() to use iterator avoid the race of clearing un-notified packets.

Just to confirm, are you also removing the one in queuePacket?

I previously removed all 6 synchronized blocks around outgoingQueue because I didn't think it's needed.

I have another patch adding those (all 6) back and will upload it shortly after ZOOKEEPER-1963 is fixed.

What do you mean "removing the synchronized in queuePacket"?

With your argument a few comments above, you actually convinced me that the synchronized(outgoingQueue) blocks in cleanup and queuePacket aren't actually needed. I haven't checked all 6 you mention, but we might be able to leave them out. The case of cleanup wasn't clear to me before because we do multiple iterations over outgoingQueue, but as you argued, doTransport and cleanup won't be executed concurrently, so it is ok to leave the synchronized block out. Does it clarify?  

Sounds perfect! Thanks for it.
I will add some comments in code clarifying assumptions made.

I think I've exhausted my comments. Are you planning on making another update to the patch or this is it? It'd be good to get a second +1 other than mine.

I am only adding a few comments on my assumptions upon outgoingQueue as we discussed and rebasing the JDK 7 change. No hurry that we can wait for more agreement.

Ok, I'll give a couple more days to see if you get more comments and to check your new patch. Assuming there is no other concern, let's aim at having this in by the end of this week.

This holds up in a live environment, and also continues to outperform its NIO counterpart under load.
I also have a patch locally that adds SSL capabilities, and works with the SSL server under development.

+1 LGTM

Thanks [~iandi]. Good to have you and other guys help testing it in live.

Since [~rakeshr] is familiar with ClientCnxn code, it would be great to have you take a look at the latest too :)
https://reviews.apache.org/r/27244/diff/#

Update to the last thing you comment:
1. change ClientCnxn.cleanup() to use iterator.
2. minor fix on formatting, comments.

+1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12687866/ZOOKEEPER-2069-v17.patch
  against trunk revision 1646345.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 9 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    +1 core tests.  The patch passed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2464//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2464//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2464//console

This message is automatically generated.

To confirm, this patch is supposed to go to trunk and the 3.5 branch, yes?

Right.
To trunk and 3.5 branch.
I tried the patch on 3.4 and had few problems resolving conflicts. But it lacks JDK 6 supports.

+1, thanks a lot for all the effort put here, [~hdeng].

Trunk:  Committed revision 1646985, 1646992.
3.5: Committed revision 1646990.

The second commit to trunk was just to fix the position of the jira description in the CHANGES file. Also, I don't think this should be going to 3.4 given that it is a sub-task of a new feature.

org.apache.zookeeper.test.ReconfigTest.testPortChange has failed recently.
It looks like the QA robot wrongfully attribited failure to ZOOKEEPER-2096.
Could you check this please ?

FAILURE: Integrated in ZooKeeper-trunk #2539 (See [https://builds.apache.org/job/ZooKeeper-trunk/2539/])
ZOOKEEPER-2069 Netty Support for ClientCnxnSocket (Hongchao via fpj) (fpj: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1646992)
* /zookeeper/trunk/CHANGES.txt
ZOOKEEPER-2069 Netty Support for ClientCnxnSocket (Hongchao via fpj) (fpj: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1646985)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/ClientCnxn.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/ClientCnxnSocket.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/ClientCnxnSocketNIO.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/ClientCnxnSocketNetty.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/ZooKeeperTestable.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/client/ZooKeeperSaslClient.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/ClientTest.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/NettyNettySuiteBase.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/NettyNettySuiteHammerTest.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/NettyNettySuiteTest.java


