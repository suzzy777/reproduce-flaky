start working on this.

Comment on this: we should try and write counters for only needed points such as task attempts and re-construct at all other points. The only other relevant place might be for dag finished as we short circuit all other recovery log events.

[~hitesh] Attach the patch.

* Fix one small bug in DAGStatus ( use method getDAGCounters instead of field dagCounters, because it may not have been deserlized from proto )
* restore DAGCounter (TOTAL_LAUNCHED_TASKS, NUM_FAILED_TASKS, NUM_KILLED_TASKS ) in TaskAttemptImpl. Other counters are all recovered from TaskAttemptFinishedEvent. Although there's also counters in VertexFinishedEvent, recover from TaskAttempt should also be OK.
* add unit test to verify that the DAGCounter is correctly recovered. 

Besides unit test in this patch, also plan to add unit test for this in [Tez-850|https://issues.apache.org/jira/browse/TEZ-850]

[~zjffdu] This jira was mainly to address recovery of counters from the task attempts and ensure that a user can get accurate counters when a recovered job completes. I dont see any changes where the counters are restored into the task attempt. Could you clarify what this patch is meant to do? 

[~hitesh] The task attempt counters is recovered from TaskFinishedEvent which is already done, for this jira I just recover the DAGCounter (like TOTAL_LAUNCHED_TASKS, NUM_FAILED_TASKS, NUM_KILLED_TASKS ).  And for the unit test, I was thinking that maybe I should increment a customized counter in processor and verify that it is the same in recovery and no-recovery. 

What if the task finished event was not logged and only the task attempt finished (successful) was logged? Would this recover counters correctly?  

[~hitesh] Sorry for the typo in my last comment, it should be TaskAtttemptFinishedEvent
  bq. "The task attempt counters is recovered from TaskFinishedEvent which is already done". 

So that means as long as the TaskAttemptFinishedEvent is logged, all the counters can be recovered. Because all the counters are from TaskAttempt.

Comments:
  - Do TaskImpl and VertexImpl write counters to recovery but they are not used when restoring state? Should the counters be written or recovered from task attempts? If the latter, then we should not write them.
  - DAGImpl::restoreFromEvent does not seem to restore counters
     - in a scenario where the dag finished is logged and all other events are dropped, I assume counters will be needed?


For future reference, please hit "Submit Patch" to let others know that a patch is ready for review.

[~hitesh]
bq. Do TaskImpl and VertexImpl write counters to recovery but they are not used when restoring state? Should the counters be written or recovered from task attempts? If the latter, then we should not write them.

There's no counter written from VertexImpl and TaskImpl ( their counters are from TaskAttemptImpl ) Should we remove tezCounters from VertexFinishedProto and TaskFinishedProto ? since actually we don't use it in recovery 

bq. DAGImpl::restoreFromEvent does not seem to restore counters
DAG do not write any counters, its counters are all from TaskAttemptImpl. So that means as long as counters of TaskAttemptImpl is recovered, Counters of DAG is recovered.

bq. in a scenario where the dag finished is logged and all other events are dropped, I assume counters will be needed?
Yes, you are right.This is a special case. In this case we should write counters in DAGFinishedEvent and recover from it. ( will add it )



Cancelling patch as some comments still left to be addressed. 

bq. There's no counter written from VertexImpl and TaskImpl ( their counters are from TaskAttemptImpl ) Should we remove tezCounters from VertexFinishedProto and TaskFinishedProto ? since actually we don't use it in recovery
   - Probably makes sense to remove this overhead if they are not meant to be read back. 

Attach the new patch.

* remove counters from VertexFinishedProto and TaskFinishedProto but keep it in java class VertexFinishedEvent and TaskFinishedEvent for history event.
* recover counters from DAGFinishedEvent if dag is finished. 

Mostly looks good. Main question on the unit test. Why is job1 being compared against job2? Based on the kind of failing dag being run, should the test be able to verify how many failures and/or kills are expected? Also, totalSuccess should be calculated based on total num tasks across vertices - correct? Is there a counter for succeeded tasks - if yes, that should be verified too. 


[~hitesh] 
bq. Why is job1 being compared against job2? Based on the kind of failing dag being run, should the test be able to verify how many failures and/or kills are expected? Also, totalSuccess should be calculated based on total num tasks across vertices - correct? Is there a counter for succeeded tasks - if yes, that should be verified too.

Because of the limitation of the VM (FailOnAttemptVertexManagerPlugin), most of time there's no task running when VM kill itself . So actually there's no task failed/killed.  I have designed a new VM which could kill AM when task is running in [Tez-1559|https://issues.apache.org/jira/browse/TEZ-1559]. Maybe I could include it in this jira. 

bq. Is there a counter for succeeded tasks - if yes, that should be verified too.
There's no counter for succeeded tasks. That's why calculate it based on the total_launched, total_killed, and total_failed.

Will update the patch after [Tez-1559|https://issues.apache.org/jira/browse/TEZ-1559] committed. 

Changes in the new patch.

* Fix one small bug in DAGStatus ( use method getDAGCounters instead of field dagCounters, because it may not have been deserlized from proto )
* remove counters from VertexFinishedProto and TaskFinishedProto but keep it in java class VertexFinishedEvent and TaskFinishedEvent for history event.
* Fix counters recovery issue in TaskAttemptImpl and DAGImpl
* Move the counter recovery unit test into TestAMRecovery. 

Mostly looks good. With respect to the tests, they rely on timing. Have you done multiple runs of the test to ensure that they are not flaky? 




After applying the patch, saw unit tests failing:

{code}
Failed tests:
  TestTaskAttemptRecovery.testTARecovery_START:120
eventHandler.handle(<any>);
Wanted 1 time:
-> at org.apache.tez.dag.app.dag.impl.TestTaskAttemptRecovery.testTARecovery_START(TestTaskAttemptRecovery.java:120)
But was 3 times. Undesired invocation:
-> at org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.sendEvent(TaskAttemptImpl.java:822)

  TestTaskAttemptRecovery.testTARecovery_FAILED:162
eventHandler.handle(<any>);
Never wanted here:
-> at org.apache.tez.dag.app.dag.impl.TestTaskAttemptRecovery.testTARecovery_FAILED(TestTaskAttemptRecovery.java:162)
But invoked here:
-> at org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.sendEvent(TaskAttemptImpl.java:822)

  TestTaskAttemptRecovery.testTARecovery_KIILED:148
eventHandler.handle(<any>);
Never wanted here:
-> at org.apache.tez.dag.app.dag.impl.TestTaskAttemptRecovery.testTARecovery_KIILED(TestTaskAttemptRecovery.java:148)
But invoked here:
-> at org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.sendEvent(TaskAttemptImpl.java:822)

  TestTaskAttemptRecovery.testTARecovery_SUCCEED:134
eventHandler.handle(<any>);
Never wanted here:
-> at org.apache.tez.dag.app.dag.impl.TestTaskAttemptRecovery.testTARecovery_SUCCEED(TestTaskAttemptRecovery.java:134)
But invoked here:
-> at org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.sendEvent(TaskAttemptImpl.java:822)

  TestTaskAttemptRecovery.testTARecovery_NEW:108
eventHandler.handle(<any>);
Wanted 1 time:
-> at org.apache.tez.dag.app.dag.impl.TestTaskAttemptRecovery.testTARecovery_NEW(TestTaskAttemptRecovery.java:108)
But was 2 times. Undesired invocation:
-> at org.apache.tez.dag.app.dag.impl.TaskAttemptImpl.sendEvent(TaskAttemptImpl.java:822)
{code}


Also, patch may need a minor rebase. 

[~hitesh] update the patch

* rebase it
* add new DAGCounter: NUM_SUCCEEDED_TASKS
* fix the test failure

bq. With respect to the tests, they rely on timing. Have you done multiple runs of the test to ensure that they are not flaky?
Run it at least 10 times in my local machine, no failure.


Committed to master. 

Thanks [~zjffdu]

