Run it for ~ 30 minutes using

{code}
while mvn test -Dtest=ParDoBoundTranslatorTest#testMultiOutputParDoWithSideInputs; do :; done
{code}

without error. But I have seen this failing in a different environment before as well.

I was able to reproduce on a VM. 

{code}
Failed tests:
  ParDoBoundTranslatorTest.testMultiOutputParDoWithSideInputs:307 expected:<[processing: -42: [11, 222], processing: 3: [11, 222], processing: 666: [11, 222]]> but was:<[processing: -42: [11, 222], processing: 3: [11, 222]]>
{code}

When the test fails, input 666 was read, but never processed by the MultiOutputParDo, because the topology gets terminated before. I cannot see any issue in the runner code, so need to look at this further at the Apex level. I suspect it is the same issue that also manifests in other flaky tests.
 

GitHub user tweise opened a pull request:

    https://github.com/apache/beam/pull/1727

    [BEAM-1140] terminate stream in interval following the final mark to reduce test flakiness (stop gap measure).

    Be sure to do all of the following to help us incorporate your contribution
    quickly and easily:
    
     - [ ] Make sure the PR title is formatted like:
       `[BEAM-<Jira issue #>] Description of pull request`
     - [ ] Make sure tests pass via `mvn clean verify`. (Even better, enable
           Travis-CI on your fork and ensure the whole test matrix passes).
     - [ ] Replace `<Jira issue #>` in the title with the actual Jira issue
           number, if there is one.
     - [ ] If this contribution is large, please file an Apache
           [Individual Contributor License Agreement](https://www.apache.org/licenses/icla.txt).
    
    ---


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tweise/beam BEAM-1140

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/beam/pull/1727.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1727
    
----
commit bb11170915f5c05629f591304f01fbc528e2ea57
Author: Thomas Weise <thw@apache.org>
Date:   2017-01-03T05:58:57Z

    BEAM-1140 terminate stream in interval following the final mark to reduce test flakiness (stop gap measure).

----


The whole topology is terminated? That should require that the final watermarks reach infinity, which should be a bit later. Is it possible that the pending element is not holding things up? I could imagine this being in Apex or in the runner translation somehow.

The termination event is a control tuple that follows the data flow. If everything works as intended, then the topology will be terminated only once the watermark has traversed it fully. Something isn't working as intended, this workaround reduces the likelihood of the race condition. 


Github user asfgit closed the pull request at:

    https://github.com/apache/beam/pull/1727


This issue is assigned but has not received an update in 30 days so it has been labeled "stale-assigned". If you are still working on the issue, please give an update and remove the label. If you are no longer working on the issue, please unassign so someone else may work on it. In 7 days the issue will be automatically unassigned.

Closing as wont fix since Apex runner is being removed

