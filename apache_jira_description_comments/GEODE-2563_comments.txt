Commit 43cdee997b973369bf0f0df4d73396857aef2bea in geode's branch refs/heads/develop from [~jinmeiliao]
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=43cdee9 ]

GEODE-2563: destroy region should be idempotent (#926)

* GEODE-2563: destroy region should be idempotent

* added the if-exists option for destroy region
* refactor the RegionPathConverter for better validation of regionPath
* cleaned up commands that uses the RegionPathConverter to not do unnecessary validation
* reworked DestroyRegionCommandDUnitTest
* added more tests


Commit 43cdee997b973369bf0f0df4d73396857aef2bea in geode's branch refs/heads/develop from [~jinmeiliao]
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=43cdee9 ]

GEODE-2563: destroy region should be idempotent (#926)

* GEODE-2563: destroy region should be idempotent

* added the if-exists option for destroy region
* refactor the RegionPathConverter for better validation of regionPath
* cleaned up commands that uses the RegionPathConverter to not do unnecessary validation
* reworked DestroyRegionCommandDUnitTest
* added more tests


Commit 43cdee997b973369bf0f0df4d73396857aef2bea in geode's branch refs/heads/feature/GEODE-3239 from [~jinmeiliao]
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=43cdee9 ]

GEODE-2563: destroy region should be idempotent (#926)

* GEODE-2563: destroy region should be idempotent

* added the if-exists option for destroy region
* refactor the RegionPathConverter for better validation of regionPath
* cleaned up commands that uses the RegionPathConverter to not do unnecessary validation
* reworked DestroyRegionCommandDUnitTest
* added more tests


Commit 43cdee997b973369bf0f0df4d73396857aef2bea in geode's branch refs/heads/feature/GEODE-3239 from [~jinmeiliao]
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=43cdee9 ]

GEODE-2563: destroy region should be idempotent (#926)

* GEODE-2563: destroy region should be idempotent

* added the if-exists option for destroy region
* refactor the RegionPathConverter for better validation of regionPath
* cleaned up commands that uses the RegionPathConverter to not do unnecessary validation
* reworked DestroyRegionCommandDUnitTest
* added more tests


Commit 43cdee997b973369bf0f0df4d73396857aef2bea in geode's branch refs/heads/feature/GEODE-3727 from [~jinmeiliao]
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=43cdee9 ]

GEODE-2563: destroy region should be idempotent (#926)

* GEODE-2563: destroy region should be idempotent

* added the if-exists option for destroy region
* refactor the RegionPathConverter for better validation of regionPath
* cleaned up commands that uses the RegionPathConverter to not do unnecessary validation
* reworked DestroyRegionCommandDUnitTest
* added more tests


Commit 43cdee997b973369bf0f0df4d73396857aef2bea in geode's branch refs/heads/feature/GEODE-3727 from [~jinmeiliao]
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=43cdee9 ]

GEODE-2563: destroy region should be idempotent (#926)

* GEODE-2563: destroy region should be idempotent

* added the if-exists option for destroy region
* refactor the RegionPathConverter for better validation of regionPath
* cleaned up commands that uses the RegionPathConverter to not do unnecessary validation
* reworked DestroyRegionCommandDUnitTest
* added more tests


Commit 7b866ccfb2bf0970f5a30ca4bf2016d58761d5d2 in geode's branch refs/heads/develop from [~jinmeiliao]
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=7b866cc ]

GEODE-2563: fix flaky test (#942)



Commit 7b866ccfb2bf0970f5a30ca4bf2016d58761d5d2 in geode's branch refs/heads/feature/GEODE-3245 from [~jinmeiliao]
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=7b866cc ]

GEODE-2563: fix flaky test (#942)



kattino opened a new pull request #1056: GEODE-2563:Added acceptance test
URL: https://github.com/apache/geode/pull/1056
 
 
   Thank you for submitting a contribution to Apache Geode.
   
   In order to streamline the review of the contribution we ask you
   to ensure the following steps have been taken:
   
   ### For all changes:
   - [ ] Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?
   
   - [ ] Has your PR been rebased against the latest commit within the target branch (typically `develop`)?
   
   - [ ] Is your initial contribution a single, squashed commit?
   
   - [ ] Does `gradlew build` run cleanly?
   
   - [ ] Have you written or updated unit tests to verify your changes?
   
   - [ ] If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under [ASF 2.0](http://www.apache.org/legal/resolved.html#category-a)?
   
   ### Note:
   Please ensure that once the PR is submitted, you check travis-ci for build issues and
   submit an update to your PR as soon as possible. If you need help, please send an
   email to dev@geode.apache.org.
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


kattino commented on issue #1056: GEODE-2563:Added acceptance test
URL: https://github.com/apache/geode/pull/1056#issuecomment-345310299
 
 
   @jinmeiliao @jdeppe-pivotal @pdxrunner @PurelyApplied 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


pdxrunner commented on a change in pull request #1056: GEODE-2563:Added acceptance test
URL: https://github.com/apache/geode/pull/1056#discussion_r151749636
 
 

 ##########
 File path: geode-assembly/src/test/java/org/apache/geode/management/internal/cli/commands/ConfigureEvictionThroughGfsh.java
 ##########
 @@ -0,0 +1,228 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package org.apache.geode.management.internal.cli.commands;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+
+import org.apache.geode.test.compiler.JarBuilder;
+import org.apache.geode.test.dunit.rules.LocatorServerStartupRule;
+import org.apache.geode.test.dunit.rules.MemberVM;
+import org.apache.geode.test.junit.categories.AcceptanceTest;
+import org.apache.geode.test.junit.rules.gfsh.GfshExecution;
+import org.apache.geode.test.junit.rules.gfsh.GfshRule;
+import org.apache.geode.test.junit.rules.gfsh.GfshScript;
+
+// GEODE-1897 Users should be able to configure eviction through gfsh
+@Category(AcceptanceTest.class)
+public class ConfigureEvictionThroughGfsh {
+  private File jarToDeploy;
+
+  @Rule
+  public GfshRule gfsh = new GfshRule();
+
+
+  @Test
+  public void ConfigureEvictionByEntryCount() throws Exception {
+
+    GfshExecution execution = GfshScript
+        .of("start locator --name=locator", "start server --name=server",
+            "create region --name=region1 --eviction-action=local-destroy --eviction-entry-count=1000 --type=REPLICATE",
+            "create region --name=region2 --eviction-action=overflow-to-disk --eviction-entry-count=1000 --type=REPLICATE",
+            "create region --name=region3 --eviction-action=overflow-to-disk --eviction-entry-count=1000 --type=REPLICATE_PERSISTENT",
+            "create region --name=region4 --eviction-action=local-destroy --eviction-entry-count=1000 --type=LOCAL",
+            "create region --name=region5 --eviction-action=overflow-to-disk --eviction-entry-count=1000 --type=LOCAL")
+        .execute(gfsh);
+
+    assertThat(execution.getOutputText()).contains("Region \"/region1\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region2\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region3\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region4\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region5\" created on \"server\"");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]",
+            "create region --name=region6 --eviction-action=local-destroy --eviction-entry-count=1000 --type=REPLICATE_PERSISTENT")
+        .expectFailure().execute(gfsh);
+    assertThat(execution.getOutputText()).contains(
+        "ERROR: An Eviction Controller with local destroy eviction action is incompatible with");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region1").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region1")
+        .containsPattern("eviction-action\\s+| local-destroy")
+        .containsPattern("eviction-maximum-value\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region2").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region2")
+        .containsPattern("eviction-action\\s+| overflow-to-disk")
+        .containsPattern("eviction-maximum-value\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region3").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region3")
+        .containsPattern("eviction-action\\s+| overflow-to-disk")
+        .containsPattern("eviction-maximum-value\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region4").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region4")
+        .containsPattern("eviction-action\\s+| local-destroy")
+        .containsPattern("eviction-maximum-value\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region5").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region5")
+        .containsPattern("eviction-action\\s+| overflow-to-disk")
+        .containsPattern("eviction-maximum-value\\s+ | 1000");
+
+  }
+
+  @Test
+  public void ConfigureEvictionByMaxMemory() throws Exception {
+    GfshExecution execution = GfshScript
+        .of("start locator --name=locator", "start server --name=server",
+            "create region --name=region1 --eviction-action=local-destroy --eviction-max-memory=1000 --type=REPLICATE",
+            "create region --name=region2 --eviction-action=overflow-to-disk --eviction-max-memory=1000 --type=REPLICATE",
+            "create region --name=region3 --eviction-action=overflow-to-disk --eviction-max-memory=1000 --type=REPLICATE_PERSISTENT",
+            "create region --name=region4 --eviction-action=local-destroy --eviction-max-memory=1000 --type=LOCAL",
+            "create region --name=region5 --eviction-action=overflow-to-disk --eviction-max-memory=1000 --type=LOCAL")
+        .execute(gfsh);
+    assertThat(execution.getOutputText()).contains("Region \"/region1\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region2\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region3\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region4\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region5\" created on \"server\"");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]",
+            "create region --name=region6 --eviction-action=local-destroy --eviction-max-memory=1000 --type=REPLICATE_PERSISTENT")
+        .expectFailure().execute(gfsh);
+    assertThat(execution.getOutputText()).contains(
+        "ERROR: An Eviction Controller with local destroy eviction action is incompatible with");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region1").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region1")
+        .containsPattern("eviction-action\\s+| local-destroy")
+        .containsPattern("eviction-max-memory\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region2").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region2")
+        .containsPattern("eviction-action\\s+| overflow-to-disk")
+        .containsPattern("eviction-max-memory\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region3").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region3")
+        .containsPattern("eviction-action\\s+| overflow-to-disk")
+        .containsPattern("eviction-max-memory\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region4").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region4")
+        .containsPattern("eviction-action\\s+| local-destroy")
+        .containsPattern("eviction-max-memory\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region5").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region5")
+        .containsPattern("eviction-action\\s+| overflow-to-disk")
+        .containsPattern("eviction-max-memory\\s+ | 1000");
+
+
+  }
+
+  @Before
+  public void setup() throws IOException {
+    jarToDeploy = new File(gfsh.getTemporaryFolder().getRoot(), "ourJar.jar");
+
+    String classContents =
+        "import org.apache.geode.cache.util.ObjectSizer; import org.apache.geode.cache.Declarable;public class MySizer implements ObjectSizer, Declarable { public int sizeof(Object o) { return 10; } }";
+
+    JarBuilder jarBuilder = new JarBuilder();
+    jarBuilder.buildJar(jarToDeploy, classContents);
+  }
 
 Review comment:
   I'm not sure it's necessary to put this in a {{@Before}} as it's only used in the one test that follows. Just declare it as a private method and call it in the test.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


pdxrunner commented on a change in pull request #1056: GEODE-2563:Added acceptance test
URL: https://github.com/apache/geode/pull/1056#discussion_r151750201
 
 

 ##########
 File path: geode-assembly/src/test/java/org/apache/geode/management/internal/cli/commands/ConfigureEvictionThroughGfsh.java
 ##########
 @@ -0,0 +1,228 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package org.apache.geode.management.internal.cli.commands;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+
+import org.apache.geode.test.compiler.JarBuilder;
+import org.apache.geode.test.dunit.rules.LocatorServerStartupRule;
+import org.apache.geode.test.dunit.rules.MemberVM;
+import org.apache.geode.test.junit.categories.AcceptanceTest;
+import org.apache.geode.test.junit.rules.gfsh.GfshExecution;
+import org.apache.geode.test.junit.rules.gfsh.GfshRule;
+import org.apache.geode.test.junit.rules.gfsh.GfshScript;
+
+// GEODE-1897 Users should be able to configure eviction through gfsh
+@Category(AcceptanceTest.class)
+public class ConfigureEvictionThroughGfsh {
+  private File jarToDeploy;
+
+  @Rule
+  public GfshRule gfsh = new GfshRule();
+
+
+  @Test
+  public void ConfigureEvictionByEntryCount() throws Exception {
+
+    GfshExecution execution = GfshScript
+        .of("start locator --name=locator", "start server --name=server",
+            "create region --name=region1 --eviction-action=local-destroy --eviction-entry-count=1000 --type=REPLICATE",
+            "create region --name=region2 --eviction-action=overflow-to-disk --eviction-entry-count=1000 --type=REPLICATE",
+            "create region --name=region3 --eviction-action=overflow-to-disk --eviction-entry-count=1000 --type=REPLICATE_PERSISTENT",
+            "create region --name=region4 --eviction-action=local-destroy --eviction-entry-count=1000 --type=LOCAL",
+            "create region --name=region5 --eviction-action=overflow-to-disk --eviction-entry-count=1000 --type=LOCAL")
+        .execute(gfsh);
+
+    assertThat(execution.getOutputText()).contains("Region \"/region1\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region2\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region3\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region4\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region5\" created on \"server\"");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]",
+            "create region --name=region6 --eviction-action=local-destroy --eviction-entry-count=1000 --type=REPLICATE_PERSISTENT")
+        .expectFailure().execute(gfsh);
+    assertThat(execution.getOutputText()).contains(
+        "ERROR: An Eviction Controller with local destroy eviction action is incompatible with");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region1").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region1")
+        .containsPattern("eviction-action\\s+| local-destroy")
+        .containsPattern("eviction-maximum-value\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region2").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region2")
+        .containsPattern("eviction-action\\s+| overflow-to-disk")
+        .containsPattern("eviction-maximum-value\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region3").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region3")
+        .containsPattern("eviction-action\\s+| overflow-to-disk")
+        .containsPattern("eviction-maximum-value\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region4").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region4")
+        .containsPattern("eviction-action\\s+| local-destroy")
+        .containsPattern("eviction-maximum-value\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region5").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region5")
+        .containsPattern("eviction-action\\s+| overflow-to-disk")
+        .containsPattern("eviction-maximum-value\\s+ | 1000");
+
+  }
+
+  @Test
+  public void ConfigureEvictionByMaxMemory() throws Exception {
+    GfshExecution execution = GfshScript
+        .of("start locator --name=locator", "start server --name=server",
+            "create region --name=region1 --eviction-action=local-destroy --eviction-max-memory=1000 --type=REPLICATE",
+            "create region --name=region2 --eviction-action=overflow-to-disk --eviction-max-memory=1000 --type=REPLICATE",
+            "create region --name=region3 --eviction-action=overflow-to-disk --eviction-max-memory=1000 --type=REPLICATE_PERSISTENT",
+            "create region --name=region4 --eviction-action=local-destroy --eviction-max-memory=1000 --type=LOCAL",
+            "create region --name=region5 --eviction-action=overflow-to-disk --eviction-max-memory=1000 --type=LOCAL")
+        .execute(gfsh);
+    assertThat(execution.getOutputText()).contains("Region \"/region1\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region2\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region3\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region4\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region5\" created on \"server\"");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]",
+            "create region --name=region6 --eviction-action=local-destroy --eviction-max-memory=1000 --type=REPLICATE_PERSISTENT")
+        .expectFailure().execute(gfsh);
+    assertThat(execution.getOutputText()).contains(
+        "ERROR: An Eviction Controller with local destroy eviction action is incompatible with");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region1").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region1")
+        .containsPattern("eviction-action\\s+| local-destroy")
+        .containsPattern("eviction-max-memory\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region2").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region2")
+        .containsPattern("eviction-action\\s+| overflow-to-disk")
+        .containsPattern("eviction-max-memory\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region3").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region3")
+        .containsPattern("eviction-action\\s+| overflow-to-disk")
+        .containsPattern("eviction-max-memory\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region4").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region4")
+        .containsPattern("eviction-action\\s+| local-destroy")
+        .containsPattern("eviction-max-memory\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region5").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region5")
+        .containsPattern("eviction-action\\s+| overflow-to-disk")
+        .containsPattern("eviction-max-memory\\s+ | 1000");
+
+
+  }
+
+  @Before
+  public void setup() throws IOException {
 
 Review comment:
   I'd prefer to see the annotated methods (@Before) at the top of the file before any of the `@Test`'s

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jdeppe-pivotal closed pull request #1056: GEODE-2563:Added acceptance test
URL: https://github.com/apache/geode/pull/1056
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/geode-assembly/src/test/java/org/apache/geode/management/internal/cli/commands/ConfigureEvictionThroughGfsh.java b/geode-assembly/src/test/java/org/apache/geode/management/internal/cli/commands/ConfigureEvictionThroughGfsh.java
new file mode 100644
index 0000000000..61b9a8c913
--- /dev/null
+++ b/geode-assembly/src/test/java/org/apache/geode/management/internal/cli/commands/ConfigureEvictionThroughGfsh.java
@@ -0,0 +1,229 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package org.apache.geode.management.internal.cli.commands;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+
+import org.apache.geode.test.compiler.JarBuilder;
+import org.apache.geode.test.dunit.rules.LocatorServerStartupRule;
+import org.apache.geode.test.dunit.rules.MemberVM;
+import org.apache.geode.test.junit.categories.AcceptanceTest;
+import org.apache.geode.test.junit.rules.gfsh.GfshExecution;
+import org.apache.geode.test.junit.rules.gfsh.GfshRule;
+import org.apache.geode.test.junit.rules.gfsh.GfshScript;
+
+// GEODE-1897 Users should be able to configure eviction through gfsh
+@Category(AcceptanceTest.class)
+public class ConfigureEvictionThroughGfsh {
+
+  @Rule
+  public GfshRule gfsh = new GfshRule();
+
+
+  @Test
+  public void ConfigureEvictionByEntryCount() throws Exception {
+
+    GfshExecution execution = GfshScript
+        .of("start locator --name=locator", "start server --name=server",
+            "create region --name=region1 --eviction-action=local-destroy --eviction-entry-count=1000 --type=REPLICATE",
+            "create region --name=region2 --eviction-action=overflow-to-disk --eviction-entry-count=1000 --type=REPLICATE",
+            "create region --name=region3 --eviction-action=overflow-to-disk --eviction-entry-count=1000 --type=REPLICATE_PERSISTENT",
+            "create region --name=region4 --eviction-action=local-destroy --eviction-entry-count=1000 --type=LOCAL",
+            "create region --name=region5 --eviction-action=overflow-to-disk --eviction-entry-count=1000 --type=LOCAL")
+        .execute(gfsh);
+
+    assertThat(execution.getOutputText()).contains("Region \"/region1\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region2\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region3\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region4\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region5\" created on \"server\"");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]",
+            "create region --name=region6 --eviction-action=local-destroy --eviction-entry-count=1000 --type=REPLICATE_PERSISTENT")
+        .expectFailure().execute(gfsh);
+    assertThat(execution.getOutputText()).contains(
+        "ERROR: An Eviction Controller with local destroy eviction action is incompatible with");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region1").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region1")
+        .containsPattern("eviction-action\\s+| local-destroy")
+        .containsPattern("eviction-maximum-value\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region2").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region2")
+        .containsPattern("eviction-action\\s+| overflow-to-disk")
+        .containsPattern("eviction-maximum-value\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region3").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region3")
+        .containsPattern("eviction-action\\s+| overflow-to-disk")
+        .containsPattern("eviction-maximum-value\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region4").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region4")
+        .containsPattern("eviction-action\\s+| local-destroy")
+        .containsPattern("eviction-maximum-value\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region5").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region5")
+        .containsPattern("eviction-action\\s+| overflow-to-disk")
+        .containsPattern("eviction-maximum-value\\s+ | 1000");
+
+  }
+
+  @Test
+  public void ConfigureEvictionByMaxMemory() throws Exception {
+    GfshExecution execution = GfshScript
+        .of("start locator --name=locator", "start server --name=server",
+            "create region --name=region1 --eviction-action=local-destroy --eviction-max-memory=1000 --type=REPLICATE",
+            "create region --name=region2 --eviction-action=overflow-to-disk --eviction-max-memory=1000 --type=REPLICATE",
+            "create region --name=region3 --eviction-action=overflow-to-disk --eviction-max-memory=1000 --type=REPLICATE_PERSISTENT",
+            "create region --name=region4 --eviction-action=local-destroy --eviction-max-memory=1000 --type=LOCAL",
+            "create region --name=region5 --eviction-action=overflow-to-disk --eviction-max-memory=1000 --type=LOCAL")
+        .execute(gfsh);
+    assertThat(execution.getOutputText()).contains("Region \"/region1\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region2\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region3\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region4\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region5\" created on \"server\"");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]",
+            "create region --name=region6 --eviction-action=local-destroy --eviction-max-memory=1000 --type=REPLICATE_PERSISTENT")
+        .expectFailure().execute(gfsh);
+    assertThat(execution.getOutputText()).contains(
+        "ERROR: An Eviction Controller with local destroy eviction action is incompatible with");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region1").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region1")
+        .containsPattern("eviction-action\\s+| local-destroy")
+        .containsPattern("eviction-max-memory\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region2").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region2")
+        .containsPattern("eviction-action\\s+| overflow-to-disk")
+        .containsPattern("eviction-max-memory\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region3").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region3")
+        .containsPattern("eviction-action\\s+| overflow-to-disk")
+        .containsPattern("eviction-max-memory\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region4").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region4")
+        .containsPattern("eviction-action\\s+| local-destroy")
+        .containsPattern("eviction-max-memory\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region5").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region5")
+        .containsPattern("eviction-action\\s+| overflow-to-disk")
+        .containsPattern("eviction-max-memory\\s+ | 1000");
+
+
+  }
+
+
+  private File createJar() throws IOException {
+    File jarToDeploy = new File(gfsh.getTemporaryFolder().getRoot(), "ourJar.jar");
+
+    String classContents =
+        "import org.apache.geode.cache.util.ObjectSizer; import org.apache.geode.cache.Declarable;public class MySizer implements ObjectSizer, Declarable { public int sizeof(Object o) { return 10; } }";
+
+    JarBuilder jarBuilder = new JarBuilder();
+    jarBuilder.buildJar(jarToDeploy, classContents);
+
+    return jarToDeploy;
+  }
+
+  @Test
+  public void ConfigureEvictionByObjectSizer() throws Exception {
+    GfshExecution execution = GfshScript
+        .of("start locator --name=locator", "start server --name=server", "sleep --time=1",
+            "deploy --jar=" + createJar().getAbsolutePath(),
+            "create region --name=region1 --eviction-action=local-destroy --eviction-max-memory=1000 --eviction-object-sizer=MySizer --type=REPLICATE",
+            "create region --name=region2 --eviction-action=overflow-to-disk --eviction-max-memory=1000 --eviction-object-sizer=MySizer --type=REPLICATE",
+            "create region --name=region3 --eviction-action=overflow-to-disk --eviction-max-memory=1000 --eviction-object-sizer=MySizer --type=REPLICATE_PERSISTENT",
+            "create region --name=region4 --eviction-action=local-destroy --eviction-max-memory=1000 --eviction-object-sizer=MySizer --type=LOCAL",
+            "create region --name=region5 --eviction-action=overflow-to-disk --eviction-max-memory=1000 --eviction-object-sizer=MySizer --type=LOCAL")
+        .execute(gfsh);
+
+    assertThat(execution.getOutputText()).contains("Region \"/region1\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region2\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region3\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region4\" created on \"server\"");
+    assertThat(execution.getOutputText()).contains("Region \"/region5\" created on \"server\"");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]",
+            "create region --name=region6 --eviction-action=local-destroy --eviction-max-memory=1000 --eviction-object-sizer=MySizer --type=REPLICATE_PERSISTENT")
+        .expectFailure().execute(gfsh);
+    assertThat(execution.getOutputText()).contains(
+        "ERROR: An Eviction Controller with local destroy eviction action is incompatible with");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region1").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region1")
+        .containsPattern("eviction-action\\s+| local-destroy")
+        .containsPattern("eviction-max-memory\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region2").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region2")
+        .containsPattern("eviction-action\\s+| overflow-to-disk")
+        .containsPattern("eviction-max-memory\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region3").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region3")
+        .containsPattern("eviction-action\\s+| overflow-to-disk")
+        .containsPattern("eviction-max-memory\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region4").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region4")
+        .containsPattern("eviction-action\\s+| local-destroy")
+        .containsPattern("eviction-max-memory\\s+ | 1000");
+
+    execution = GfshScript
+        .of("connect --locator=localhost[10334]", "describe region --name=region5").execute(gfsh);
+    assertThat(execution.getOutputText()).containsPattern("region5")
+        .containsPattern("eviction-action\\s+| overflow-to-disk")
+        .containsPattern("eviction-max-memory\\s+ | 1000");
+
+  }
+
+
+
+}
diff --git a/geode-assembly/src/test/java/org/apache/geode/management/internal/cli/commands/DestroyIndexIfExistsTest.java b/geode-assembly/src/test/java/org/apache/geode/management/internal/cli/commands/DestroyIndexIfExistsTest.java
new file mode 100644
index 0000000000..dfadbd67dd
--- /dev/null
+++ b/geode-assembly/src/test/java/org/apache/geode/management/internal/cli/commands/DestroyIndexIfExistsTest.java
@@ -0,0 +1,49 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package org.apache.geode.management.internal.cli.commands;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.experimental.categories.Category;
+
+import org.apache.geode.test.compiler.JarBuilder;
+import org.apache.geode.test.junit.categories.AcceptanceTest;
+import org.apache.geode.test.junit.rules.gfsh.GfshExecution;
+import org.apache.geode.test.junit.rules.gfsh.GfshRule;
+import org.apache.geode.test.junit.rules.gfsh.GfshScript;
+
+@Category(AcceptanceTest.class)
+public class DestroyIndexIfExistsTest {
+
+  @Rule
+  public GfshRule gfsh = new GfshRule();
+
+
+  @Test
+  public void destroyIndexIfExists() throws Exception {
+    GfshExecution execution =
+        GfshScript.of("start locator --name=locator", "start server --name=server",
+            "sleep --time=1", "destroy index --name=i1 --if-exists=true").execute(gfsh);
+
+    assertThat(execution.getOutputText()).contains("Index i1 not found - skipped");
+  }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


Added documentation in Geode v1.4 docs for the --if-exists option for the four commands in question:

destroy disk-store

destroy gateway-sender

destroy index

destroy region

Plus the newly-added destroy async-event-queue command

