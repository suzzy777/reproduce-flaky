Can you elaborate what performance problems you saw? I was testing UCS by loading around 1TB (more like 800G) and I have not seen any problem in cassandra-stress. It was still responsive and write throughput was not affected.

Attached [the result of a recent benchmark|https://issues.apache.org/jira/secure/attachment/13063855/key-value-oss.html] comparing the UCS default (green) to STCS (blue) and an option with larger SSTable size (orange). The default UCS has worse results in the throughput stage, but more importantly it is unable to serve the 110k ops/s during the 1:1 and read-only stages. I'm still investigating what causes these reads to be so slow, but switching to 10GiB target fully fixes the problem (the two other options the orange graph uses, 'base_shard_count': '1' and 'max_sstables_to_compact': '32', help but are not as significant on their own).

Rather than ask users to choose a target size based on their expected data density, the database should be able to deal with this itself. Admitting some of the growth into the sstable size is a good way to achieve that.

Interesting! I have to admit I was not comparing the various strategies, I remember having UCS with kind of default setup and I saw ~100k writes like for ~2hours so I have not though anything is wrong with it.

I uploaded bunch of htmls with UCS and various parameters.[^file_ucs_shenandoah.html]

[~smiklosovic], would you be willing to be the second reviewer?

I will take a look sometimes next week.

BTW, can't this still go to 5.0? I see the patch against trunk. I think that as long as there is not any 5.0.0 yet we can change UCS as we wish as it has never been released and it is natural to do these kind of patches in alphas.

Yes, I intend to commit it to 5.0.

I noticed that UCS is not introduced in cqlsh so we can not autocomplete that, like (1) and (2) etc.  I think this is a good opportunity to finish it if we are introducing new options here.

Also, ant rat-check was failing on missing licences in svg files.

I created a PR against that PR here where it is all fixed (3)

We should also add parameters of UCS to doc/cql3/CQL.textile among other compaction strategies. I have left this exercise on the authors of this ticket.

(1) https://github.com/apache/cassandra/blob/trunk/pylib/cqlshlib/cqlhandling.py#L49
(2) https://github.com/apache/cassandra/blob/trunk/pylib/cqlshlib/cql3handling.py#L86-L103
(3) https://github.com/datastax/cassandra/pull/833

[~ethan.brown] are you still on top of this? Let me know if finishing it like suggested is too much of a hassle or you are under the time pressure. I may just finish that on your behalf, no problem with that.

[~smiklosovic] Sorry, I've had a pretty crazy week, but I'm back now.  Your PR looks good, so I went ahead and merged it with the CASSANDRA-18945 branch.  The documentation will come in another ticket since it is fully missing for UCS.

[~ethan.brown] great, I took your branch, squashed it all and put it on top of cassandra-5.0. I am running CircleCI for it here

https://app.circleci.com/pipelines/github/instaclustr/cassandra/3430/workflows/9f83e524-bfe5-430a-9ef5-116eec66bc19

We will handle the docs in the documentation ticket, CASSANDRA-18232. I will reach out to Lorina make her aware of the changes.

UnifiedCompactionDensitiesTest is failing

https://app.circleci.com/pipelines/github/instaclustr/cassandra/3430/workflows/9f83e524-bfe5-430a-9ef5-116eec66bc19/jobs/145259/tests#failed-test-0

btw IDEA says that this (1) is always false

https://github.com/apache/cassandra/blob/trunk/test/distributed/org/apache/cassandra/distributed/test/UnifiedCompactionDensitiesTest.java#L93

{quote}+ assert !(count < 0); // Must be positive, 0 or NaN, which should translate to baseShardCount

Review Comment:
@ethan-brown2022 `count >= 0` is more natural to me
{quote}
I can't find this to reply to it directly. The comment at the end of the line says that {{count}} can be {{{}NaN{}}}, which will fail {{count >= 0}} but pass {{{}!(count < 0){}}}. Perhaps we should change the bit after NaN to "(which would fail count >= 0, but is acceptable and should translate to baseShardCount)" or something similar?

[~blambov] yes, I removed it after I read that comment :)

circle finished 

https://app.circleci.com/pipelines/github/instaclustr/cassandra/3430/workflows/9f83e524-bfe5-430a-9ef5-116eec66bc19

If we fix that test I think we are good!

[~smiklosovic] I have fixed the failing tests.

[~ethan.brown] have you pushed that? https://github.com/apache/cassandra/pull/2836/commits I dont see anything new

Ah, I see you forcepushed that. OK, I will take care of the builds.

So ... this is interesting. It fails the multiplexer of j17_jvm_dtests_vnode_repeat as well as the individual test in j17_jvm_dtests_vnode

What is interesting is that it does not fail j17_jvm_dtests_repeat (without vnode).

java17_separate_tests which runs  j17_jvm_dtests_vnode does not fail it either. I am trying to run j17_jvm_dtests_vnode_repeat for java17_separate_tests if it indeed fails there too.

This is the PR against trunk.

This is the branch (2)

(1) https://app.circleci.com/pipelines/github/instaclustr/cassandra/3443/workflows/97bfb70b-146a-4da8-afaf-7f5909b0492d
(2) https://github.com/instaclustr/cassandra/commits/CASSANDRA-18945-trunk

EDIT: Yes, j17_jvm_dtests_vnode_repeat on j17 separate tests fails multiplexer too.

That test is flaky and has to be reworked.

[~ethan.brown] kindly asking if there is any progress with this ticket.

[~smiklosovic] I pushed a commit last week that should fix the failing tests with vnode.  We should probably run CircleCI again to verify, but other than that I think this ticket is ready to merge.

Great job, thank you for letting me know! I will build it again and post the results here.

[j17 trunk|https://app.circleci.com/pipelines/github/instaclustr/cassandra/3488/workflows/69f2bb67-68bc-45b3-a2ee-54fe4bdf8952]
[j11 trunk|https://app.circleci.com/pipelines/github/instaclustr/cassandra/3488/workflows/be20958a-6b4f-43ba-858c-0450684e8d2c]

There were failures in dtests so I run them once more [here|https://app.circleci.com/pipelines/github/instaclustr/cassandra/3492/workflows/c7dbced5-f8b7-423b-90e9-672d167874ea/jobs/151050]

[j17 5.0|https://app.circleci.com/pipelines/github/instaclustr/cassandra/3491/workflows/8207e0a6-eb6f-4bb6-a5ef-bb43aa7ca003]
[j11 5.0|https://app.circleci.com/pipelines/github/instaclustr/cassandra/3491/workflows/ee1e7b06-b0db-4365-9982-c3d1184bc9f7]

repeatable tests are looking stable.

the last j11 5.0 job is running right now. Once that is all finished I will merge that. [~blambov] approved on the PR already.

