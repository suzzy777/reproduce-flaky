this somehow duplicates efforts in https://issues.apache.org/jira/browse/CASSANDRA-14557

Ideally, we should make one more guardrail for having minimum RF and I would remove what was done in 14557 (or at least deprecate it). I think we can remove it altogether as 4.1 is not released yet and it was added this release cycle. I dont see any reason why we should have minimum for RF done by one approach and maximum by Guardrail. However, the minimum is implemented in such a way that it has nodetool commands and so on. That approach diverges greatly from Guardrail one.

Migrating the min RF introduced by CASSANDRA-14557 to guardrails is covered by CASSANDRA-17212.

I agree that it would be ideal to have both min/max RF limits with the same approach, and if we are going to migrate {{minimum_keyspace_rf}} to guardrails it would be ideal to do so before 4.1 so we don't have to deprecate the non-guardrail option.

[~savni_nagarkar] [~dcapwell] regarding passing the client state, I guess we could do something more or less [like this|https://github.com/adelapena/cassandra/commit/d1bddfa54cf430b4f836bcdcdbd5e4b3e9b33b4e], trying to keep the compatibility of 3rd party implementations of {{AbstractReplicationStrategy}}, if any.

Nevertheless, I think we should start by migrating the min RF to guardrails (CASSANDRA-17212) before adding the max RF, so we don't have two separate approaches and config formats for min and max. Also, {{minimum_keyspace_rf}} is only on trunk, so if we are going to migrate it to guardrails it would be ideal to do it as soon as possible so we don't have to deprecate it later. wdyt?

[~adelapena] I like the proposed approach better than using thread local, I added your changes to the current branch and the pull request is [here|https://github.com/apache/cassandra/pull/1582]. I am working on replicating the changes for minimum_keyspace_rf right now. 

||Github||Circle CI||
|[pr|https://github.com/apache/cassandra/pull/1582/files]|[j8|https://app.circleci.com/pipelines/github/thingtwin1/cassandra/72/workflows/a39f0cf2-460b-4da2-b3df-b7235ef75eb3] [j11|https://app.circleci.com/pipelines/github/thingtwin1/cassandra/72/workflows/f7343eb7-622b-4ea3-a470-a0846baa4123]|

||Github||Circle CI||
|[pr|https://github.com/apache/cassandra/pull/1582]|[j8|https://app.circleci.com/pipelines/github/thingtwin1/cassandra/74/workflows/3f044848-0ea5-407f-9b44-464e1dcd1255] [j11|https://app.circleci.com/pipelines/github/thingtwin1/cassandra/74/workflows/bdfae7e9-70ce-4c79-8f26-da5238dc636f]|

||Github||Circle CI||
|[pr|https://github.com/apache/cassandra/pull/1582]|[j8|https://app.circleci.com/pipelines/github/thingtwin1/cassandra/76/workflows/bab530a7-460d-4107-a243-ed260a8887ab] [j11|https://app.circleci.com/pipelines/github/thingtwin1/cassandra/76/workflows/d9bfe461-d326-40ac-aa0c-90ee39d6a291]|

Looks good to me, +1.

I have left a few formatting nits on [this commit|https://github.com/adelapena/cassandra/commit/f5ff92ed108c72dc39b373ae87a2ce1104a14842]. They can be incorporated during commit, if you agree with them.

I think we'd also need a final CI round with a repeated run of the new tests, so we reduce the risk of introducing new flakies. The CircleCI config for that run can be generated with something like, for example:
{code:java}
.circleci/generate.sh -m \
  -e REPEATED_UTEST_TARGET=test \
  -e REPEATED_UTEST_COUNT=100 \
  -e REPEATED_UTEST_CLASS=Guardrail*ReplicationFactorTest
{code}

Another detail for commit: we should add an entry about the new feature on {{NEWS.txt}}, [here|https://github.com/apache/cassandra/blob/trunk/NEWS.txt#L69-L71].

||Github||Circle CI||
|[pr|https://github.com/apache/cassandra/pull/1582]|[j8|https://app.circleci.com/pipelines/github/thingtwin1/cassandra/83/workflows/7d06c9e6-a231-45ee-b04b-a9b9aba56f21] [j11|https://app.circleci.com/pipelines/github/thingtwin1/cassandra/83/workflows/a50cf7dc-6a71-4a74-a744-dca627bba564]|
 Ran repeated tests on GuardrailMaximumReplicationFactorTest class and all tests passed. 

Looks good to me, +1 with the aforementioned [formatting nits|https://github.com/adelapena/cassandra/commit/f5ff92ed108c72dc39b373ae87a2ce1104a14842] and the entry on {{{}NEWS.txt{}}}, that haven't been included in the PR yet.

[~jmckenzie] [~dcapwell] are you ok with the last changes? Are we ready to commit?

+1 here

sorry for the slow review; didn't know I was a reviewer...

+1

One last CI round before commit, rebased and including the additional nits that were agreed but not included into the PR:

||PR||CI||
|[trunk|https://github.com/adelapena/cassandra/commit/34db272a33f418abbdb08140bda9c1b8ff7b11a1]|[j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/1724/workflows/f9fdfdb7-e23b-413c-9578-20613358d7b5] [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/1724/workflows/31962907-35eb-41a1-aa9c-1394ed944777]|

That CI round includes some repetitions of {{GuardrailMinimumReplicationFactorTest}}, since that test has also been modified, together with the new {{GuardrailMaximumReplicationFactorTest}}. There are some test failures that are well-known:

* {{utests_system_keyspace_directory}} CASSANDRA-17489
* {{snitch_test.py::TestGossipingPropertyFileSnitch::test_prefer_local_reconnect_on_listen_address}} CASSANDRA-17700

Additionally, there is an unreported failure in {{compaction_test.py::TestCompaction::test_user_defined_compaction}}, but [it can be reproduced on trunk|https://app.circleci.com/pipelines/github/adelapena/cassandra/1726/workflows/45429a7e-fac0-4ecb-91ad-2d533a529075]. I have created CASSANDRA-17714 to deal with it.

Committed to {{trunk}} as [39e89fd636ee4343eb2201820da87881cbc749e2|https://github.com/apache/cassandra/commit/39e89fd636ee4343eb2201820da87881cbc749e2].

