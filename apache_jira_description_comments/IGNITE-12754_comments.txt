[~ptupitsyn] I have plans to implement service invocation in java thin client.

I've already implemented a PoC and want to discuss some details.

When invoking a service method from thin client we should pass to the server at least: service name, interface name, timeout, nodes set, method name and args (sticky flag is useless since we always will create a new proxy for each request). Methods of some interface can be overloaded. In .Net thick client implementation there is a method used that helps to find an appropriate service method to invoke: PlatformServices.ServiceProxyHolder#getMethod. But since we use here only args values sometimes we can get an error for overloaded methods, for example, if you have an interface like:
{code:java}
public interface TestServiceInterface {
    public String testMethod(String val);
    public String testMethod(Object val);
}
{code}
And invoke service like:
{code:java}
Object arg = null;
svc.testMethod(arg);{code}
Java will resolve the correct method to call on client-side, but using only arg value it's impossible to get exactly one method on the server-side and there will be error: Ambiguous proxy method 'testMethod'

To solve this problem we can pass full method signature instead of method name. Or we can additionally pass argument types to find exactly one method by {{getMethod(String name, Class<?>... parameterTypes)}}. Also, we can support two approaches at the same time: simple method name to simplify the implementation of non-java thin clients, and full method signature to deal with overloaded methods.

What do you think about it?

Should we discuss this on dev-list?

 

[~alex_pl] I have IEP in progress: https://cwiki.apache.org/confluence/display/IGNITE/IEP-46%3A+Thin+Client+Service+Invocation

You can take over, since I'm busy with other things right now.
Let's discuss this on the dev list.



Thin client protocol changes were implemented in IGNITE-13033, this ticket is only about .NET thin client changes.

[~isapego] [~alex_pl] please review.

{panel:title=Branch: [pull/8151/head] Base: [master] : Possible Blockers (8)|borderStyle=dashed|borderColor=#ccc|titleBGColor=#F7D6C1}
{color:#d04437}MVCC Cache 7{color} [[tests 0 TIMEOUT , Exit Code |https://ci.ignite.apache.org/viewLog.html?buildId=5550286]]

{color:#d04437}Cache (Restarts) 1{color} [[tests 0 TIMEOUT , Exit Code |https://ci.ignite.apache.org/viewLog.html?buildId=5550242]]

{color:#d04437}Cache 1{color} [[tests 0 Exit Code |https://ci.ignite.apache.org/viewLog.html?buildId=5550245]]

{color:#d04437}JDBC Driver{color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=5550206]]
* IgniteJdbcDriverTestSuite: JdbcThinJdbcToCacheDataTypesCoverageTest.testBigIntDataType[atomicityMode=ATOMIC, cacheMode=PARTITIONED, ttlFactory=null, backups=0, evictionFactory=null, onheapCacheEnabled=false, writeSyncMode=FULL_SYNC, persistenceEnabled=false] - Test has low fail rate in base branch 0,0% and is not flaky

{color:#d04437}Cache 9{color} [[tests 0 TIMEOUT , Exit Code |https://ci.ignite.apache.org/viewLog.html?buildId=5550253]]

{color:#d04437}ZooKeeper (Discovery) 2{color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=5550222]]
* ZookeeperDiscoverySpiTestSuite2: IgniteClientReconnectCacheTest.testReconnectExchangeInProgress - Test has low fail rate in base branch 0,0% and is not flaky

{color:#d04437}Interceptor Cache (Full API Config Variations / Basic)*{color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=5550203]]
* InterceptorCacheConfigVariationsFullApiTestSuite: InterceptorCacheConfigVariationsFullApiTest_5.testSize - Test has low fail rate in base branch 0,0% and is not flaky

{color:#d04437}Cache (Full API){color} [[tests 1|https://ci.ignite.apache.org/viewLog.html?buildId=5550241]]
* IgniteCacheFullApiSelfTestSuite: GridCachePartitionedOnheapMultiNodeFullApiSelfTest.testWithSkipStoreTx - Test has low fail rate in base branch 0,0% and is not flaky

{panel}
{panel:title=Branch: [pull/8151/head] Base: [master] : New Tests (35)|borderStyle=dashed|borderColor=#ccc|titleBGColor=#D6F7C1}
{color:#00008b}Platform .NET (Core Linux){color} [[tests 18|https://ci.ignite.apache.org/viewLog.html?buildId=5550267]]
* {color:#013220}dll: ServicesClientTest.TestJavaServiceCall - PASSED{color}
* {color:#013220}dll: ServicesClientTest.TestExceptionInServiceIsPropagatedToClient - PASSED{color}
* {color:#013220}dll: ServicesClientTest.TestEmptyClusterGroupThrowsError - PASSED{color}
* {color:#013220}dll: ServicesClientTest.TestClusterGroupWithoutMatchingServiceNodesThrowsError - PASSED{color}
* {color:#013220}dll: ServicesClientTest.TestClientKeepBinaryReturnsServiceInvocationResultInBinaryMode - PASSED{color}
* {color:#013220}dll: ServicesClientTest.TestBasicServiceCall - PASSED{color}
* {color:#013220}dll: ServicesClientTest.TestServerKeepBinaryPassesServerSideArgumentsInBinaryMode - PASSED{color}
* {color:#013220}dll: ServicesClientTest.TestServerAndClientKeepBinaryPassesBinaryObjectsOnServerAndClient - PASSED{color}
* {color:#013220}dll: ServicesClientTest.TestPropertyCalls - PASSED{color}
* {color:#013220}dll: ServicesClientTest.TestOverloadResolution - PASSED{color}
* {color:#013220}dll: ServicesClientTest.TestObjectMethodCall - PASSED{color}
... and 7 new tests

{color:#00008b}Platform .NET{color} [[tests 17|https://ci.ignite.apache.org/viewLog.html?buildId=5550266]]
* {color:#013220}exe: ServicesClientTest.TestServicesWithCustomClusterGroupInvokeOnSpecifiedNodes - PASSED{color}
* {color:#013220}exe: ServicesClientTest.TestServerKeepBinaryPassesServerSideArgumentsInBinaryMode - PASSED{color}
* {color:#013220}exe: ServicesClientTest.TestServerAndClientKeepBinaryPassesBinaryObjectsOnServerAndClient - PASSED{color}
* {color:#013220}exe: ServicesClientTest.TestPropertyCalls - PASSED{color}
* {color:#013220}exe: ServicesClientTest.TestOverloadResolution - PASSED{color}
* {color:#013220}exe: ServicesClientTest.TestObjectMethodCall - PASSED{color}
* {color:#013220}exe: ServicesClientTest.TestObjectArrayBinary - PASSED{color}
* {color:#013220}exe: ServicesClientTest.TestVoidMethodCall - PASSED{color}
* {color:#013220}exe: ServicesClientTest.TestClientKeepBinaryReturnsServiceInvocationResultInBinaryMode - PASSED{color}
* {color:#013220}exe: ServicesClientTest.TestBasicServiceCall - PASSED{color}
* {color:#013220}exe: ServicesClientTest.TestAllArgumentTypes - PASSED{color}
... and 6 new tests

{panel}
[TeamCity *--&gt; Run :: All* Results|https://ci.ignite.apache.org/viewLog.html?buildId=5550301&amp;buildTypeId=IgniteTests24Java8_RunAll]

[~ptupitsyn] everything looks good to me.

Merged to master: f1c00372875a3eb13d592fdcf778115a8f2801af

