I believe I have a fix for this now -  [https://github.com/apache/cassandra/pull/1788] . 

Some notes/observations:
 * '{_}validateMaxConcurrentAutoUpgradeTasksConf{_} ' has been left alone as we have some try catch logic for one of the functions that calls this and 'ConfigurationExceptions' will get converted to 'IllegalArgumentException'
 * 'checkValidForByteConversion' seems to be used in tandem with the constructor 'DataStorageSpec.IntKibibytesBound' for the jmx setters
 ** 'StorageService.setColumnIndexSize' (added in 4.1)
 ** 'StorageService.setColumnIndexCacheSize' (added in 4.0)
 ** 'StorageService.setBatchSizeWarnThreshold' (added in 4.0)

There were some recent changes to this constructor ( https://issues.apache.org/jira/browse/CASSANDRA-17571 ) in 4.1 that will cause the aforementioned jmx setters to throw 'IllegalArgumentException' when certain values are encountered.  I was tempted to just modify 'checkValidForByteConversion' so it throws 'IllegalArgumentException' as this will make my solution much simpler/cleaner and because it already throws it elsewhere.  However, for now I have opted to create new methods as from my understanding, modifying the exceptions thrown is still a breaking change to two of the APIs that have been released in 4.0.

Hi [~lmtrombone],

Thank you for the patch and the extensive explanation!

Overall it looks good on a quick skim, I left some tiny suggestions. Just to confirm, did you have the chance to verify whether there are other setters/getters in the DatabaseDescriptor that can suffer from this problem, out of the list/examples suggested on the ticket? 
Also, I would like to suggest to add some basic unit tests to DatabaseDescriptorTest class? 
Also, I think we need patches for previous versions and we normally merge them from lower affected version upwards to trunk - for more info https://cassandra.apache.org/_/development/patches.html (Bug Fixes section). There might be also the case we need different patches for the different versions as things diverged between them. I can run a full CI for you when we get things into shape.
One more thing is to check whether our docs need some relevant update, at minimum we need to update the Deprecation section in NEWS.txt. Thank you for your work!
{quote} I was tempted to just modify 'checkValidForByteConversion' so it throws 'IllegalArgumentException' as this will make my solution much simpler/cleaner and because it already throws it elsewhere.  However, for now I have opted to create new methods as from my understanding, modifying the exceptions thrown is still a breaking change to two of the APIs that have been released in 4.0. 
{quote}
The breaking change is one very valid point. Another one is that checkValidForByteConversion is also used on startup. We throw ConfigurationException on startup, JMX setters/getters should throw IllegalArgumentException though

[~dcapwell] , do you mind to be a second reviewer for this ticket as you were the one who initially raised the point and worked on fixing breaking changes?

[~e.dimitrova] Thanks for your feedback! I have a few follow-up comments/questions:

{quote}
Just to confirm, did you have the chance to verify whether there are other setters/getters in the DatabaseDescriptor that can suffer from this problem, out of the list/examples suggested on the ticket? 
{quote}
I did try to look for other other getter/setters that could have this problem when I initially worked on the ticket, but wasn't able to find others.  I'll give it another go tomorrow, now that I'm a bit more familiar with this part of the code.  Is this the only place that has this problem and if not, do you want me to try to see if I can find other places too?

{quote}
Also, I would like to suggest to add some basic unit tests to DatabaseDescriptorTest class? 
{quote}
In my pull request, I didn't touch the DatabaseDescriptor class at all and looking at the that file, I think any unit tests I add there might be out of place.  I think StorageServiceTest and ActiveRepairServiceTest seem like a better place for them?

A recent thought is that with my changes, we now have different names for setters vs getters e.g. 'RepairSessionMaxTreeDepth' for getting vs 'RepairSessionMaximumTreeDepth' for setting.  Is this something that will still be acceptable?

{quote}Is this the only place that has this problem and if not, do you want me to try to see if I can find other places too?
{quote}
I would say this will be enough for the scope of this ticket but if you are curious to play around more with the code, I wouldn't discourage you. I will leave it to you to decide how much time you want to invest in this task. We can also spin follow up tickets. 
{quote}In my pull request, I didn't touch the DatabaseDescriptor class at all and looking at the that file, I think any unit tests I add there might be out of place. I think StorageServiceTest and ActiveRepairServiceTest seem like a better place for them?
{quote}
Correct, I wanted to say similar to what some of the tests in the DatabaseDescriptorTest but I messed up.
{quote}A recent thought is that with my changes, we now have different names for setters vs getters e.g. 'RepairSessionMaxTreeDepth' for getting vs 'RepairSessionMaximumTreeDepth' for setting. Is this something that will still be acceptable?
{quote}
Another good point. Yes, for consistency the practice is to deprecate the old pair getter/setter and create both new ones. Thanks

 

I checked all the other methods in DatabaseDescriptor and their usages and I didn't find any others. I have updated the original pull request ( [https://github.com/apache/cassandra/pull/1788] ) and incorporated the feedback given.

Here are the pull requests for the other versions:
3.0 - [https://github.com/apache/cassandra/pull/1817]

3.11 - [https://github.com/apache/cassandra/pull/1818]

4.0 - [https://github.com/apache/cassandra/pull/1819]

4.1 - [https://github.com/apache/cassandra/pull/1825]

[~e.dimitrova] Could you give the pull requests a look when you get the chance?

Thanks [~lmtrombone] ! I just wanted to push your branches to CI but I noticed they are not rebased since quite some time. Also, the 4.1 patch is not propagated to trunk.

Can you, please, do it? Thanks in advance

The patch asks users to "migrate" to a new method that does the same thing but fixes the bug... rather than asking users to migrate we should just fix the bug... can we just catch ConfigurationException and throw the new exception without changing the methods?

bq. The breaking change is one very valid point.

The examples found do not document this behavior, so we are not changing the documented APIs but instead fixing a bug in JMX.  There may be some users that talk to JMX and can handle the ConfigurationException and check for it, so they would no longer catch what they expect, but that was also an internal detail that they are depending on...  The only cases I remember where we asked users to migrate to the new methods were when the methods actually documented this behavior...

I am pretty sure we said we shouldn’t break users in long ago released versions for those exceptions. Also, whoever doesn’t want to migrate will keep on using the old ones.  But also people will be using tools that were broken before. There is choice.

Yes, it is not documented in the API but if it breaks someone’s tools in a patch release and we know it It is not nice to break them if it was there for years. 
Another suggestion is to keep the deprecation in old branches and only fix in 4.1/trunk?  WDYT? That I would accept after being well documented

bq. Yes, it is not documented in the API but if it breaks someone’s tools in a patch release and we know it It is not nice to break them if it was there for years. 
bq. Another suggestion is to keep the deprecation in old branches and only fix in 4.1/trunk?  WDYT? That I would accept after being well documented

Older branches are for critical bug fixes, so I feel that we should leave them be for now (and not mark @Deprecated there), I can be more neutral to adding to trunk but not sure I even agree with 4.1....  

If we limit the patch to only trunk, I am +0 to the idea...  not a fan but get the point about breaking anyone who used the undocumented behavior...

If it is only trunk  probably it is fine to just fix it there. But I know we didn’t fix those before as we wanted to fix them in the older versions too. So I am a bit confused now, but I also understand your point… I wanted to go for the deprecation because of the old versions

bq. If it is only trunk  probably it is fine to just fix it there

If the concern is backwards compatibility then the arguments don't go away because its trunk... I am cool fixing or adding new and marking old as Deprecated; will leave it up to [~e.dimitrova] and [~lmtrombone].

bq.  I wanted to go for the deprecation because of the old versions

Well, I guess I would ask "when do we want to remove them?"  To me trunk is currently 4.2 so earliest we could drop is 5.0 (or was it 6.0? Forget exactly what we agreed in terms of minor and Deprecated)... back porting to add the Deprecated doesn't change that...

I don't really have a preference and am okay with whatever we decide 

It seems the decision will be on me, then trunk with deprecation and be nice to our end users. 
{quote}Well, I guess I would ask "when do we want to remove them?" To me trunk is currently 4.2 so earliest we could drop is 5.0 (or was it 6.0? Forget exactly what we agreed in terms of minor and Deprecated)... back porting to add the Deprecated doesn't change that...
{quote}
Very good question that I also struggle with sometimes... In general we would say deprecate, keep in 5, remove in 6. Although, I see people keep on deprecating and when it comes to just method or config parameter it seems they prefer to keep it without deadline. So I am not sure. I guess in this case it will depend until when we keep JMX around too. I guess that will be the main guideline in this case. 

bq. then trunk with deprecation 

Works for me.

Overall I am +1 to https://github.com/apache/cassandra/pull/1788 if we add comments explaining why we have 2 methods with identical bodies... 

Ok, sounds good to me.  I closed the pull requests for the other branches, rebased the trunk MR, and added comments to the getters with duplicate bodies.

+1

Thanks, I just pushed it rebased with the last 6 commits from trunk into Jenkins. (a few days passed, sorry about that)

There is a limit on number of Jenkins dev runs in parallel which is currently reached so it will take time to start but it should be #1913 [here|https://jenkins-cm4.apache.org/view/patches/job/Cassandra-devbranch/]

It started but it is still running... seems like Jenkins is very busy these days. Will check back again later

No worries, that's fine with me.   I'll try periodically checking it too for when it completes

Looks like the run finally completed and there are some failures.  A few of them are the intermittent failures that have been actively discussed in https://issues.apache.org/jira/browse/CASSANDRA-17461 :D.   For the remaining failures though, from what I can tell from a glance, there are only one or two tests that are potentially related to the changes made in this ticket.  I'll try to take a closer look tomorrow to try to confirm if this is the case.

Great! Let me know if you have any questions. Also, not sure whether you know about [Butler|https://butler.cassandra.apache.org/#/ci/upstream/compare/Cassandra-trunk/trunk], you can consult it together with Jira(in case there was already a ticket opened but not linked in Butler yet). It shows a history of the latest test failures per branch(I shared the link for trunk) and you can click on the links to check the actual error in Jira for the respective run.

As far as I can tell, I still think the failures are unassociated with my changes.  Here's what I found on the failures though:

The following tests has ticket associated with them
|| || ||
|dtest.configuration_test.TestConfiguration.test_change_durable_writes|https://issues.apache.org/jira/browse/CASSANDRA-17872|
|org.apache.cassandra.net.ConnectionTest.testMessageDeliveryOnReconnect-compression|https://issues.apache.org/jira/browse/CASSANDRA-16677|
|org.apache.cassandra.distributed.test.CASTest.testSucccessfulWriteDuringRangeMovementFollowedByRead
org.apache.cassandra.distributed.test.CASTest.testSuccessfulWriteBeforeRangeMovement
org.apache.cassandra.distributed.test.CASTest.testConflictingWritesWithStaleRingInformation|https://issues.apache.org/jira/browse/CASSANDRA-17461|

 
----
 

The following failures don't have tickets associated with them, but has been marked flaky one way or another
|| || ||
|dtest.materialized_views_test.TestMaterializedViews.test_no_base_column_in_view_pk_complex_timestamp_with_flush|Consistently passing on Cassandra CI and locally too, but apparently has a flaky annotation added some time ago|
|org.apache.cassandra.net.ProxyHandlerConnectionsTest.testExpireSome-cdc|Has 'Flaky' tag on Butler and has history of flakiness|

 
----
 

The following failures don't have any markings on them, but in the test results, it seems we might be running some of the tests twice?  Not sure if this is a sign of flakiness, since it's a sample size of 2.  I was not able find anything wrong from running them repeatedly locally either:
 * org.apache.cassandra.distributed.test.metrics.StreamingMetricsTest.testMetricsWithRepairAndStreamingToTwoNodes
 * org.apache.cassandra.distributed.test.UnableToParseClientMessageTest.badHeader[version=3/v3]
 * org.apache.cassandra.distributed.test.repair.ForceRepairTest.forceWithDifference

!Screen Shot 2022-09-13 at 11.27.30 PM.png!

 
----
 

BinAuditLoggerTest.testSelectRoundTripQuery-compression - no idea at all.  It does seem to pass consistently locally too.

Hi [~lmtrombone] ,

I agree with your analysis plus I am adding the following to confirm your patch has nothing to do with the failures we saw:
 * [test_no_base_column_in_view_pk_complex_timestamp_with_flush|https://jenkins-cm4.apache.org/view/patches/job/Cassandra-devbranch/1913/testReport/junit/dtest.materialized_views_test/TestMaterializedViews/test_no_base_column_in_view_pk_complex_timestamp_with_flush/] - I fixed this one already in another ticket
 * testMetricsWithRepairAndStreamingToTwoNodes – seen in CASSANDRA-17608
 * badHeader - CASSANDRA-17488
 * forceWitDifference - seen in CASSANDRA-17566

As it's been some time since we ran that CI, I just did a [rebase|https://github.com/ekaterinadimitrova2/cassandra/tree/CASSANDRA-17668] and started final [CI run|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=CASSANDRA-17668]. I will check that one later and commit, overall I do not expect surprises.

Sounds good to me.  Thanks [~e.dimitrova] !

Committed to trunk:

To [https://github.com/apache/cassandra.git]

   7adfdc85cf..e5c9cf4cbe  trunk -> trunk

The only issues seen were known:

test_move_backwards_and_cleanup - CASSANDRA-16061

test_multiple_repair - CASSANDRA-17005

Also, for the record - I didn't run in the multiplexer the unit tests because they cannot be more deterministic than that. Saved some resources here. 

Thank you for your work [~lmtrombone]!

