I've realized this... It seems there is some flakiness in {{LatticeTest}}. For instance, in the [last Travis run|https://travis-ci.org/apache/calcite/jobs/511278223] two tests failed:
{code}
[INFO] Results:
[INFO] 
[ERROR] Failures: 
[ERROR]   LatticeTest.testTileAlgorithm2:485->checkTileAlgorithm:513 
Expected: a string containing "EnumerableAggregate(group=[{4, 5}])\n  EnumerableTableScan(table=[[adhoc, m{16, 17, 27, 31, 32, 36, 37}]"
     but: was "PLAN=EnumerableAggregate(group=[{3, 5}])\n  EnumerableTableScan(table=[[adhoc, m{16, 17, 27, 32, 35, 36, 37}]])\n\n"
[ERROR]   LatticeTest.testTileAlgorithm3:496->checkTileAlgorithm:513 
Expected: a string containing "EnumerableAggregate(group=[{4, 5}])\n  EnumerableTableScan(table=[[adhoc, m{16, 17, 27, 31, 32, 36, 37}]"
     but: was "PLAN=EnumerableAggregate(group=[{3, 5}])\n  EnumerableTableScan(table=[[adhoc, m{16, 17, 27, 32, 35, 36, 37}]])\n\n"
[INFO] 
[ERROR] Tests run: 210, Failures: 2, Errors: 0, Skipped: 23
{code}
However, I have run the test several times locally and it does not always fail.

Weird, it always fails on my machine.

Even in Travis I observe the flakiness:
[https://travis-ci.org/apache/calcite/jobs/511093849|https://travis-ci.org/apache/calcite/jobs/511093849] -> LatticeTest.testTileAlgorithm3
[https://travis-ci.org/apache/calcite/jobs/511152740|https://travis-ci.org/apache/calcite/jobs/511152740] -> LatticeTest.testTileAlgorithm3
[https://travis-ci.org/apache/calcite/jobs/511276531|https://travis-ci.org/apache/calcite/jobs/511276531] -> LatticeTest.testTileAlgorithm2
[https://travis-ci.org/apache/calcite/jobs/511278223|https://travis-ci.org/apache/calcite/jobs/511278223] -> LatticeTest.testTileAlgorithm2 and LatticeTest.testTileAlgorithm3

It always fails if you enable slow tests.

[https://travis-ci.org/apache/calcite/builds/511316197|https://travis-ci.org/apache/calcite/builds/511316197] is a PR on top of latest master; all tests passed. I still have not been able to find out where the flakiness is coming from...

[~jcamachorodriguez] The Travis tests pass, but the [AppVeyor tests|https://ci.appveyor.com/project/ApacheSoftwareFoundation/calcite/builds/23356198] are failing for the same PR.

[~jcamachorodriguez] Should we just update the expected result? 

I am still exploring the issue... I have been trying to check the usual suspects (e.g. iterating over hashmap), but I have not been able to track how any of the changes that went in are actually affecting these few tests. {{testTileAlgorithm2}} and {{testTileAlgorithm3}} are the two tests that may fail consistently, though results seem correct in both cases for them both. A possible option (at least temporarily) would be to change the matching condition in the test, e.g., only check that the lattice is hit? But I am not sure whether that defeats the original purpose of the test (maybe [~julianhyde] can provide more guidance).

I've created a PR with a temp fix to basically make those tests pass: https://github.com/apache/calcite/pull/1134 .
I do not feel very proud of it... But I have not been able to track down where the different results are being generated and I lack context for the Lattices tests. I would need to spend more time understanding that code...
Hence I guess this may be good enough for the time being, given that the test results are not incorrect in any case. [~julianhyde], [~hyuan], what is your take on this?

I am OK with temporary change. But I suspect maybe the indeterministic order of rule triggering caused the issue. 

It's a mess. In my experiments, the instability starts happening in the CALCITE-2943 fix. The CALCITE-2942 fix passes every time. I am running LatticeTest from the debugger.

I don't think changing the expected results will help.

Disabling the tests and assigning them to me to fix will not help. I do not have time to fix them.

[~julianhyde], pushed new PR based on your last comment. I know it does not solve the underlying issue, but does it look more reasonable?

All tests passed this time: [https://travis-ci.org/apache/calcite/builds/512062338|https://travis-ci.org/apache/calcite/builds/512062338]

Disabling the rules seems a smart move. Running some tests now. Should I be testing commit d6a09b613?

Yes, that's the right commit (some cosmetic changes over the previous ones).

My tests pass on JDK 8 and JDK 12.

+1


Thanks for checking [~julianhyde]. Fixed in [90e69d4188c02420027b51b11c315330759ec2ea |https://github.com/apache/calcite/commit/90e69d4188c02420027b51b11c315330759ec2ea].

Resolved in release 1.20.0 (2019-06-24)

