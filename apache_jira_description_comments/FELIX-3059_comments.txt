Example containing 4 bundles A, B, C, D  where B reexports A and C reexports B but D cannot see A directly.

After testing this again, there's even more to it.

If I simply put the 4 bundles (A to D) into the /bundle directory of the felix-framework installation, it fails to start as outlined due to not finding class a.One.
That is after calling the Activators for bundles A, B and C, in that order.

If, however, I force a reverse load order by naming the files 4_A*, 3_B*, 2_C* and 1_D* (* would be "-$version.jar" here), then suddenly it DOES find a.One and completes the activation of bundle D.
Ie, it will start activating D (works), then C, then B and lastly A (and cleaup in the reverse order).
Although, if I then use the console to refresh D at a later point, it will again FAIL to load a.One.

Very strange but I do not currently have the time to debug this.

Although it did fail for me too in 3.2.2, I played around with this in my trunk build of the framework and it appears to be working:

g! lb
START LEVEL 1
   ID|State      |Level|Name
    0|Active     |    0|System Bundle (3.3.0.SNAPSHOT)
    1|Active     |    1|Apache Felix Bundle Repository (1.6.2)
    2|Active     |    1|Apache Felix Gogo Command (0.8.0)
    3|Active     |    1|Apache Felix Gogo Runtime (0.8.0)
    4|Active     |    1|Apache Felix Gogo Shell (0.8.0)
    5|Installed  |    1|A (1.0.0.qualifier)
    6|Installed  |    1|B (1.0.0.qualifier)
    7|Installed  |    1|FelixWorkPlugin (1.0.0.qualifier)
    8|Installed  |    1|FelixExtendedWorkPlugin (1.0.0.qualifier)
g! start 5 6 7 8
DEBUG: WIRE: [5.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.3.0)) -> [0]
DEBUG: WIRE: [6.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.3.0)) -> [0]
DEBUG: WIRE: [6.0] osgi.wiring.bundle; (osgi.wiring.bundle=A) -> [5.0]
a.One (b.Activator <- super() from b.Three)
b.Three (b.Activator)
a.One (b.Activator <- super() from a.Two)
a.Two (b.Activator)
a.One (b.Activator)
DEBUG: WIRE: [7.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.3.0)) -> [0]
DEBUG: WIRE: [7.0] osgi.wiring.bundle; (osgi.wiring.bundle=B) -> [6.0]
a.One (c.Activator <- super() from c.Five <- super() from b.Three)
b.Three (c.Activator <- super() from c.Five)
c.Five (c.Activator)
a.One (c.Activator <- super() from c.Four <- super() from a.Two)
a.Two (c.Activator <- super() from c.Four)
c.Four (c.Activator)
a.One (c.Activator <- super() from b.Three)
b.Three (c.Activator)
a.One (c.Activator <- super() from a.Two)
a.Two (c.Activator)
a.One (c.Activator)
DEBUG: WIRE: [8.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.3.0)) -> [0]
DEBUG: WIRE: [8.0] osgi.wiring.bundle; (osgi.wiring.bundle=C) -> [7.0]
a.One (d.Activator <- super() from c.Five <- super() from b.Three)
b.Three (d.Activator <- super() from c.Five)
c.Five (d.Activator)
a.One (d.Activator <- super() from c.Four <- super() from a.Two)
a.Two (d.Activator <- super() from c.Four)
c.Four (d.Activator)
a.One (d.Activator <- super() from b.Three)
b.Three (d.Activator)
a.One (d.Activator)
a.One (d.Activator <- super() from a.Two)
a.Two (d.Activator)
g! stop 5 6 7 8
g! refresh 5 6 7 8
g! start 8
DEBUG: WIRE: [6.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.3.0)) -> [0]
DEBUG: WIRE: [6.0] osgi.wiring.bundle; (osgi.wiring.bundle=A) -> [5.0]
DEBUG: WIRE: [7.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.3.0)) -> [0]
DEBUG: WIRE: [7.0] osgi.wiring.bundle; (osgi.wiring.bundle=B) -> [6.0]
DEBUG: WIRE: [8.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.3.0)) -> [0]
DEBUG: WIRE: [8.0] osgi.wiring.bundle; (osgi.wiring.bundle=C) -> [7.0]
DEBUG: WIRE: [5.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.3.0)) -> [0]
a.One (d.Activator <- super() from c.Five <- super() from b.Three)
b.Three (d.Activator <- super() from c.Five)
c.Five (d.Activator)
a.One (d.Activator <- super() from c.Four <- super() from a.Two)
a.Two (d.Activator <- super() from c.Four)
c.Four (d.Activator)
a.One (d.Activator <- super() from b.Three)
b.Three (d.Activator)
a.One (d.Activator)
a.One (d.Activator <- super() from a.Two)
a.Two (d.Activator)
g! refresh 8
g! DEBUG: WIRE: [8.0] osgi.wiring.package; (&(osgi.wiring.package=org.osgi.framework)(version>=1.3.0)) -> [0]
DEBUG: WIRE: [8.0] osgi.wiring.bundle; (osgi.wiring.bundle=C) -> [7.0]
a.One (d.Activator <- super() from c.Five <- super() from b.Three)
b.Three (d.Activator <- super() from c.Five)
c.Five (d.Activator)
a.One (d.Activator <- super() from c.Four <- super() from a.Two)
a.Two (d.Activator <- super() from c.Four)
c.Four (d.Activator)
a.One (d.Activator <- super() from b.Three)
b.Three (d.Activator)
a.One (d.Activator)
a.One (d.Activator <- super() from a.Two)
a.Two (d.Activator)
g!

Could you test the latest snapshot build of the framework distribution and see if it is working for you? You should be able to use the snapshot build for development purposes, since it should be reasonably stable.

BTW, I had noted another reexport visibility issue in my framework refactoring last month and it actually seems to be related to this issue. I'm trying to clean up remaining issues so I can do a framework release, so I decided to investigate your issue and this other issue today. As I say above, your issue appears to be addressed since I completely changed the way we are calculating visible packages.

The other issue was related to verifying class space consistency for a bundle. Turns out it was not doing the correct calculation for reexported packages. This error was actually the cause of your error in 3.2.2. In the old version, the calculation for visible packages was done using this erroneous reexport calculation, but now in trunk I actually calculate visible packages separately from how I verify them. So, even though I fixed the issue for visibility, it's not yet fixed for verification purposes.

I think I have a fix for verification that I'll commit shortly...I'll just commit it against this issue since it was the root cause of the issue for 3.2.2. So, it looks like we should be able to close this as fixed after I commit.

OK, I tested this with the 3.3.0-SNAPSHOT available from
 https://repository.apache.org/content/groups/snapshots/org/apache/felix/org.apache.felix.main/3.3.0-SNAPSHOT/org.apache.felix.main-3.3.0-20110810.161107-13.jar

and can confirm that this version does not exhibit the problem anymore.

Please note that I was not able to build the svn sources due to:

,-- error from "mvn -Dpackaging=bundle install" --
| Downloading: http://repository.apache.org/snapshots/org/apache/felix/maven-bundle-plugin/2.3.5-SNAPSHOT/maven-bundle-plugin-2.3.5-SNAPSHOT.pom
| [INFO] Unable to find resource 'org.apache.felix:maven-bundle-plugin:pom:2.3.5-SNAPSHOT' in repository apache.snapshots (http://repository.apache.org/snapshots)
| Downloading: http://repository.apache.org/snapshots/org/apache/felix/maven-bundle-plugin/2.3.5-SNAPSHOT/maven-bundle-plugin-2.3.5-SNAPSHOT.pom
| [INFO] Unable to find resource 'org.apache.felix:maven-bundle-plugin:pom:2.3.5-SNAPSHOT' in repository apache.snapshots (http://repository.apache.org/snapshots)
| [INFO] ------------------------------------------------------------------------
| [ERROR] BUILD ERROR
| [INFO] ------------------------------------------------------------------------
| [INFO] Error building POM (may not be this project's POM).
| 
| 
| Project ID: org.apache.felix:maven-bundle-plugin
| 
| Reason: POM 'org.apache.felix:maven-bundle-plugin' not found in repository: Unable to download the artifact from any repository
| 
|   org.apache.felix:maven-bundle-plugin:pom:2.3.5-SNAPSHOT
| 
| from the specified remote repositories:
|   apache.snapshots (http://repository.apache.org/snapshots),
|   ops4j (http://repository.ops4j.org/maven2),
|   central (http://repo1.maven.org/maven2),
|   aqute (http://www.aqute.biz/repo)
| 
|  for project org.apache.felix:maven-bundle-plugin
`---------

Also, downloading
 https://repository.apache.org/content/groups/snapshots/org/apache/felix/org.apache.felix.main/3.3.0-SNAPSHOT/org.apache.felix.main-3.3.0-20110810.161525-14.jar

results, although newer than the *-13.jar linked above, in a version 3.2.2 framework. Something seems amiss there.

If you are trying to build from the top-level directory, then don't do that...it has been flaky forever.

To build the framework, just build these subprojects: framework, main, and main.distribution.

The main.distribution is only necessary to create the distribution, if you just want to run the framework you can do that from within the main subproject, which also contains the appropriate bin, bundle, and conf directories to launch the framework.

Regarding the inclusion of a 3.2.2 framework, maybe that was my fault since I was going back and forth between 3.3.0-SNAPSHOT and 3.2.2 to test this issue. I've just deployed new snapshots.

OK, I see.
I just followed http://felix.apache.org/site/building-felix.html to build it, but running maven in main/ worked.

Thanks and best regards.

Ok, I committed a fix for the resolver verification aspect of this issue too. I updated the issue subject to more accurately reflect the underlying issue. I also added a couple test cases around this issue to avoid similar situations in the future, hopefully. Thanks for your help, although I'm obliged to tell you that you shouldn't be using reexport visibility in the first place since it is not modular. :-)

Please close this issue if you are satisfied. Thanks.

Well, regarding the issues that can arise from reexporting, I followed some of the discussions and feel there are pros and cons to both sides.

The small testcase I submitted was simply to demonstrate the issue and does in itself not really need to reexport stuff.
The issues arose in the first place when I tried to get eclipse-based bundles (they call them plugins) to work and eclipse uses this a lot.

Running these on top of (slightly modified) eclipse base plugins on top of felix does work so far, BTW, and it is actually only a few rather minor issues that prevent it out-of-the-box.
Considering to put up some blog or something about it, no time atm, though.

Wrt. to reexporting, the plugins I meant to get working also use it and rewriting them to use package imports instead does not help in the least with modularity.
In fact, to get them work prior to the fix (done, as I said), I had to import packages left, right and center, resulting in a jumbled mess that doesn't make sense (runtime implementation classes from at-first-glance completely unrelated bundles all over the place). So, to summarize, there sure are uses cases for reexporting. :>

Anyway, sorry for the wall of text and thanks again. Now hopefully jbosgi will pick this change up and start working, better, too.

Closing as requested after verifying fix in snapshot version.

