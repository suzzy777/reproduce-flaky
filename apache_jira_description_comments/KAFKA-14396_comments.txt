It appears on further investigation that the GarbageCollectedMemoryPoolTest is using System.gc() in an advisory manner, and is not flakey as a result.

It achieves this by allocating temporary buffers that are overall larger than the heap space, which can only succeed when the garbage collector cleans up buffers that the test has lost references to. By causing high memory pressure, it triggers the background garbage collection.

The other tests do not follow this pattern. They perform both temporary and persistent memory allocation smaller than the heap size, and measure the heap usage to confirm that only the persistent allocations are maintained. This will fail in cases where the memory pressure is not high enough to trigger garbage collection, and the measured memory usage includes some or all of the temporary memory allocations.

I think in order to keep these tests, we should scale them such that the persistent memory allocations consume the majority of the heap. This should increase the memory pressure and force garbage collection to take place.

