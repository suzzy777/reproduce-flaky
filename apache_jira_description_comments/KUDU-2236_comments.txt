[~anjuwong] it looks like you committed some fixes for this in December. I'm looking over the fixes, though, and not sure they are correct.

The original intention of the 'wait' in the test was not to try to avoid the exceptions being logged, but rather to ensure that no exceptions were logged _even 500ms after closing_. It seems like the patch changes the intention of the test to now allow exceptions to be logged when closing the client, and we don't want that to be the case.

I think we need to look again at this and understand why the test was flaky, and check whether it was a regression or just an incomplete bug fix in the first case.

[~tlipcon] ahh, I see. Thanks for the explanation and for pointing this out.

It seems that 986e8de63d8687421c476de07c4e889129062637 added a bit more logging (e.g. cleanup() is now _always_ called at the end of exceptionCaught(), although cleanup() seems to only spew DEBUG logs). So perhaps keeping the sleep in and only parsing INFO logs might do the trick while maintaining the intentions of both 986e8de63d8687421c476de07c4e889129062637 and the original test. I can try that out.

Yea, it looks like the commit you cited also changed it so that ClosedChannelException will log at INFO level even if explicitlyDisconnected is true. That seems to be a regression, no?

So after looking a bit more, I think it was a regression _and maybe_ an incomplete bug fix in the first place. Taking out the regression and looping the test still spews some WARN-level exception messages stemming from ConnectToMasterErrCB.call() that seems to at least have been since a pretty old refactoring of ConnectToCluster (see 3102e3833bcf32a290b63e8d6cae917b62194ac6).

Looping the test after taking out the WARN-level exception logging _and_ removing the regression from 986e8de63d8687421c476de07c4e889129062637, this passes 100/100.

Looping leaving in the WARN-level logging led to ~50/100 failures. Looping leaving in the regression only and commenting out the WARN-level logging led to ~20/100 failures. A fix for the regression seems straightforward (conditional logging, maybe conditionally logging DEBUG level instead of INFO and updating so only INFO-level logs are parsed, in case the logging is still valuable for debugging). A fix for the WARN-level logging, though, I have to think about it a bit more (suggestions welcome :) ).

Actually it seems like the refactoring to Connection.java 58248841f213a64683ee217f025f0a38a8450f74 changed the behavior a lot, which is also pretty recent. Maybe we can salvage the logging behavior from before the refactoring.

Todd fixed the regression in ead756844ce9ada904fcc3666df25692f63e76b8. I've reverted the test changes mentioned in this ticket.

