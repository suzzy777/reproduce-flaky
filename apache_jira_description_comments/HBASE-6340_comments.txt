This is similar to HADOOP-8558.
For HBase I was trying to create a (endpoint) coprocessor, which implements some known interface:
{code}
public interface MyProtocol extends CoprocessorProtocol, ProtocolExtension {
  public static final long VERSION = 0L;
}

public interface ProtocolExtension {
  ...
  public void pingShv();
  ...
}
{code}

If you implement {{MyProtocol}} and try to call {{pingShv()}} it will fail with
{code}
java.lang.NoSuchFieldException: versionID
{code}
This is because {{ProtocolExtension}} is not versioned.
The work around the current implementation is to override {{pingShv()}} in {{MyProtocol}}. But this is inconvenient when {{ProtocolExtension}} has many methods. And especially when you use an external protocol for coprocessors, which may change between versions and will require the coporocessor code rewrite.

As mentioned in HADOOP-8558, the fix is pretty simple, just get rid of getDeclaringClass() calls by passing the actual protocol into {{Invocation}} constructor. 
This should make coprocessors more flexible and yet even better tool for writing HBase applications.
Do people see any unforeseen problems coming out of such a change?

Here is the patch. As I said I am just passing the protocol to the Invocation as {{declaringClass}}, instead of extracting it from the method as it is currently implemented.
Also provide a test case, which fails with current impl and passes with the new one.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12539947/RPCInvocation.patch
  against trunk revision .

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 3 new or modified tests.

    +1 hadoop2.0.  The patch compiles against the hadoop 2.0 profile.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    -1 javac.  The applied patch generated 5 javac compiler warnings (more than the trunk's current 4 warnings).

    -1 findbugs.  The patch appears to introduce 9 new Findbugs (version 1.3.9) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

     -1 core tests.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.catalog.TestMetaReaderEditor
                  org.apache.hadoop.hbase.master.TestAssignmentManager
                  org.apache.hadoop.hbase.TestLocalHBaseCluster

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/2545//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/2545//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/2545//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/2545//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/2545//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/2545//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/2545//console

This message is automatically generated.

> -1 javac. The applied patch generated 5 javac compiler warnings (more than the trunk's current 4 warnings).

Checked Javac warnings. There are the same 4 of them. Looks like Jenkins counted as the fifth one a warning from hbase-it subproject saying
{code}
[WARNING] The POM for org.apache.hbase:hbase-server:jar:tests:0.95-20120530.180436-1 is invalid
{code}

> -1 findbugs. 

Went over Findbugs Warnings. Did not find any differences to the trunk or any warnings related to the patch. Not sure how this is counted.

> -1 core tests. 

Tests are flaky. Those three are not related to the patch and succeed if run individually.

WritableRpcEngine.java would go away through HBASE-6414

Please take a look at the patch in that JIRA and update your patch accordingly.

Thanks

Looked at HBASE-6414 patch. WritableRpcEngine will go away with or without my change. The important thing is that the test in this jira will guarantee that the targeted functionality is preserved.
Also committing this now will make it easy to reuse the patch for back porting into earlier versions, if that will be desired.

I also see that ProtobufRpcEngine.Invoker in HBASE-6414 correctly obtains the protocol version from the protocol itself rather than from the method as in current impl. So this should be compatible.

When I put this patch on top of latest patch from HBASE-6414, I got:
{code}
testCalls(org.apache.hadoop.hbase.ipc.TestProtocolExtension)  Time elapsed: 0.767 sec  <<< ERROR!
java.lang.NullPointerException
  at org.apache.hadoop.hbase.ipc.ProtobufRpcEngine$Invoker.constructRpcRequest(ProtobufRpcEngine.java:130)
  at org.apache.hadoop.hbase.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:175)
  at $Proxy5.ping(Unknown Source)
  at org.apache.hadoop.hbase.ipc.TestProtocolExtension.testCalls(TestProtocolExtension.java:91)
{code}
which is this line in constructRpcRequest():
{code}
      int length = params.length;
{code}

You can rebase patch on 0.94 so that Lars can take a look.

For trunk, investigation is needed after HBASE-6414 goes in.

Take a look at hbase-server/src/test/protobuf/test_rpc_service.proto and TestProtoBufRpc.

Here is method signature for ping():
{code}
    public EmptyResponseProto ping(RpcController unused,
        EmptyRequestProto request) throws ServiceException {
{code}

Ted, it is not going to be that straightforward. Protocols will need to be defined in .proto, then java code will be generated, etc.
If you want this to be postponed until after HBASE-6414 it's fine.

@Konstantin I don't think the work pb'ing endpoints and their protocols has been done yet.  It'll need to be done for 0.96 to go out the door.  Maybe then would be the time to revisit this issue.  Should we raise the priority on this issue.  It seems like something that we need to ensure fixed for 0.96?

Yes I didn't see any work on endpoints in HBASE-6414. Since WritableRpcEngine goes away with it, what endpoint cps will based on?
As for this patch, I can rewrite the test to use endpoint cps. This will be less generic, but more to the point I am targeting. This should make it independent of HBASE-6414. I am also concerned about previous versions .92 .94, which don't have PB RPC, but have to be used until .96 is stabilized.

Conversion of coprocessor endpoints to PB defined services is happening in HBASE-5448.  I hope to post a patch for that this weekend.

@Konstantin Gary answered the 0.96 question.. how it'll be done in pb world.  For 0.94, you want to make it so your patch applies there and we can commit?  You think we should include it in 0.94?  You need it in 0.92 too?

Patch for 0.94

TestCoprocessorEndpoint and TestProtocolExtension pass.

Running test suite.

Ted, thanks for porting it to .94. 
We use .92 in Giraffa as of today. Let me check how much effort to upgrade to .94.
If it is possible (compatibility with hdfs.22) then .94 will be good. Otherwise I'll submit a patch for .92.
Thanks, guys.

The upgraded of Giraffa to 0.94 went well. Some bug fixes in coprocessors were very helpful, thanks.
No need to port this to 0.92 from our side. 
Could you please commit this to 0.94 branch and we will see how the new PRC evolve further on.

Committed to 0.94 after running tests locally including the one this patch adds (Hope that is OK Lars; committed to help a downstream project).  Closing this issue.  Lets open new one Konstantin to deal w/ trunk gymastics.  Thanks for patch Konstantin (and Ted)

Integrated in HBase-0.94 #456 (See [https://builds.apache.org/job/HBase-0.94/456/])
    HBASE-6340 HBase RPC should allow protocol extension with common interfaces. (Revision 1382207)
HBASE-6340 HBase RPC should allow protocol extension with common interfaces. (Revision 1382206)

     Result = FAILURE
stack : 
Files : 
* /hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/ipc/TestProtocolExtension.java

stack : 
Files : 
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/client/coprocessor/Exec.java
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/ipc/Invocation.java
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/ipc/WritableRpcEngine.java


I reopened this issue and backed out the patch because it broke securerpc.  Mind taking a look K?  See HBASE-6762

Integrated in HBase-0.94 #461 (See [https://builds.apache.org/job/HBase-0.94/461/])
    HBASE-6340 HBase RPC should allow protocol extension with common interfaces.: REVERT (Revision 1383537)

     Result = SUCCESS
stack : 
Files : 
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/client/coprocessor/Exec.java
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/ipc/Invocation.java
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/ipc/WritableRpcEngine.java
* /hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/ipc/TestProtocolExtension.java


If there are no objections I commit this change and close both jira and HBASE-6762 as fixed.

Committed to 0.94

What I committed

Integrated in HBase-0.94 #463 (See [https://builds.apache.org/job/HBase-0.94/463/])
    HBASE-6340 Reapply with fix for SecureRpcEngine (Revision 1383754)

     Result = SUCCESS
larsh : 
Files : 
* /hbase/branches/0.94/security/src/main/java/org/apache/hadoop/hbase/ipc/SecureRpcEngine.java
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/client/coprocessor/Exec.java
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/ipc/Invocation.java
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/ipc/WritableRpcEngine.java
* /hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/ipc/TestProtocolExtension.java


Integrated in HBase-0.94-security #52 (See [https://builds.apache.org/job/HBase-0.94-security/52/])
    HBASE-6340 Reapply with fix for SecureRpcEngine (Revision 1383754)
HBASE-6340 HBase RPC should allow protocol extension with common interfaces.: REVERT (Revision 1383537)
HBASE-6340 HBase RPC should allow protocol extension with common interfaces. (Revision 1382207)
HBASE-6340 HBase RPC should allow protocol extension with common interfaces. (Revision 1382206)

     Result = SUCCESS
larsh : 
Files : 
* /hbase/branches/0.94/security/src/main/java/org/apache/hadoop/hbase/ipc/SecureRpcEngine.java
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/client/coprocessor/Exec.java
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/ipc/Invocation.java
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/ipc/WritableRpcEngine.java
* /hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/ipc/TestProtocolExtension.java

stack : 
Files : 
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/client/coprocessor/Exec.java
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/ipc/Invocation.java
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/ipc/WritableRpcEngine.java
* /hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/ipc/TestProtocolExtension.java

stack : 
Files : 
* /hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/ipc/TestProtocolExtension.java

stack : 
Files : 
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/client/coprocessor/Exec.java
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/ipc/Invocation.java
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/ipc/WritableRpcEngine.java


Integrated in HBase-0.94-security-on-Hadoop-23 #8 (See [https://builds.apache.org/job/HBase-0.94-security-on-Hadoop-23/8/])
    HBASE-6340 Reapply with fix for SecureRpcEngine (Revision 1383754)
HBASE-6340 HBase RPC should allow protocol extension with common interfaces.: REVERT (Revision 1383537)
HBASE-6340 HBase RPC should allow protocol extension with common interfaces. (Revision 1382207)
HBASE-6340 HBase RPC should allow protocol extension with common interfaces. (Revision 1382206)

     Result = FAILURE
larsh : 
Files : 
* /hbase/branches/0.94/security/src/main/java/org/apache/hadoop/hbase/ipc/SecureRpcEngine.java
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/client/coprocessor/Exec.java
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/ipc/Invocation.java
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/ipc/WritableRpcEngine.java
* /hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/ipc/TestProtocolExtension.java

stack : 
Files : 
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/client/coprocessor/Exec.java
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/ipc/Invocation.java
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/ipc/WritableRpcEngine.java
* /hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/ipc/TestProtocolExtension.java

stack : 
Files : 
* /hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/ipc/TestProtocolExtension.java

stack : 
Files : 
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/client/coprocessor/Exec.java
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/ipc/Invocation.java
* /hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/ipc/WritableRpcEngine.java


