[~bhulette] This is a new feature that is not yet merged into master but it is pretty close to finalization. I have it marked for 2.22.0 because I expect to finish it before tomorrow but I can hardly make the deadline tomorrow because of other compromises. Do you think we can cherry pick it at the end of the week ? During the stabilization days?

Notice also that this is in part due to some issues on the CI

I'm wary to cherry-pick an entire runner, but maybe we could do that if we're still stabilizing other bugs at that point.

Looks like we've got CI green, any chance you can get it reviewed tomorrow? I don't plan to cut a branch until the end of the day (PST)

That is great to hear, let me know if anything needs to happen from my end

[~bhulette] things look good so far. I asked [~rskraba] to help me take with an extra look today. We are basically prioritizing data consistency and/or bad practices issues for this merge. If we find minor aesthetic issues those will be pushed as fixes during stabilization or even for the next release. I suppose the expectations for a new runner allow us to have some pending things to correct, but rest assured the runner is already passing most of the ValidatesRunner suite and it has probably zero interference with other core code.

I will ping you later today (hopefully with the green light) before the end of the day (PST)!

[~bhulette] Following Ryan's review there is some minor issues that need to be addressed, let's see if [~pulasthisupun] has the time to do those in time before the first time. I think it is easily cherry pickable if ready (and with low impact), but not worth to stop you from cutting the branch today.


[~iemejia] I am looking into the temp file issue that was mentioned by Rayan. One thought that came to mind was to run a small task to clean tmp files after a test class is executed. I am not that familiar with Gradle, is there a way to run a small task in between tests in the validateRunner task?. 

I think you can do something like this with finalizedBy, here's an example in the website build.gradle: https://github.com/apache/beam/blob/master/website/build.gradle#L146

Thanks, Brian, I found a solution with forkEvery, i set the temp files created to delete on exit and since the JVM changes for every test class the old temp files will get deleted automatically. 

[~iemejia] will go through the other points mentioned by Rayan and get the fix within the day if possible.

I Fixed all issue but one that Rayan pointed out in his review. I need to recheck the instances that i have used raw types, but a little hesistant to do it in an hurry, I can make a issue and fix that after the merge if that is OK with you guys.

Sorry guys I'm removing fix version 2.22.0 since the release branch has been cut and this doesn't qualify as a blocker

[~bhulette] thanks for the update. is the option to cherry-pick this later for the 2.22.0 mentioned by [~iemejia] release still a viable option?. I am not sure how that would work with Beam release process but wanted to follow up since it was mentioned a couple times

Cherry-picks are just for release blockers: bugs representing regressions, or features that the community has agreed its worth delaying the release for: https://beam.apache.org/contribute/release-blocking/

I understand the rules Brian, that's the reason why in the first message I mentioned you to ask if we could do this 'exceptionally'. I understand that this also have risks and I am afraid of rushing things too but I wanted to get this feature in because we (and me concretely) have had this contribution waiting for long time.

Given the circumstances it seems like the best path forward is to try to get this into master rapidly so it gets released soon. Sorry [~pulasthisupun].


[~iemejia] sorry I wasn't trying to be pedantic, just sharing the policy with [~pulasthisupun]

Don't worry Brian I did not interpret it as pedantic, my answer was just to make the point clear of my awareness of the rules. I think we should not skip the rules to avoid people asking for this in every release and making the task of the release manager harder. But also when I put the user/contributor hat I see the benefit of having more features. Maybe it is because I come from the old world where releases were for features and not just programmed in time.

[~pulasthisupun] Have you tried to run the runner tests with Java 11? Asking this thinking on possible issues of maintainability now that Beam is starting to get better support of Java 11

[~iemejia] will check with Java 11. Twister2 does support Java 11 so it should work. I Will test and let you know. So would we be able to merge this into the master for now so we can get it into 2.23.0 release?. No worries about missing the 2.22.0 cut :) 

