Yeah, its good to look into: especially the ones happening many times. The java.security.debug flag can help (you can get stacktrace of the code doing this, even when the test does not fail). 

I will warn you, it can get a little messy with complex tests that act more like integration tests than unit tests: kinda like if you were to strace your web browser, you'd see all kinds of things that look like errors but are "normal".

Some of this can be found with grep. For example the all-dashes:

{noformat}
git grep -- "----------"
...
core/src/test/org/apache/solr/cloud/ZkCLITest.java:      new SolrZkClient("----------:33332", 100);
...
{noformat}

The "thrasher" one might be TestStressLiveNodes:
{noformat}
core/src/test/org/apache/solr/cloud/TestStressLiveNodes.java:        final String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + "/thrasher-" + id + "-" + i;
{noformat}

The tests are probably just swallowing all RuntimeException/Throwable and treat it like any other error.

I'm pretty sure most of "/solr/core/src/test-files/solr/filestore" is from SOLR-14078 which is a bulk of them. 

Let's also discuss the "userfiles" directory which is appearing in the test reports.
{code:java}
   30  access denied ("java.io.FilePermission" "/Users/krisden/repos/apache/lucene-solr/solr/core/src/test-files/solr/userfiles" "write"){code}
 

This directory is created in the SolrResourceLoader as follows:
{code:java}
/**
 * Solr allows users to store arbitrary files in a special directory located directly under SOLR_HOME.
 * <p>
 * This directory is generally created by each node on startup.  Files located in this directory can then be
 * manipulated using select Solr features (e.g. streaming expressions).
 */
public static final String USER_FILES_DIRECTORY = "userfiles";

public static void ensureUserFilesDataDir(Path solrHome) {
  final Path userFilesPath = getUserFilesPath(solrHome);
  final File userFilesDirectory = new File(userFilesPath.toString());
  if (!userFilesDirectory.exists()) {
    try {
      final boolean created = userFilesDirectory.mkdir();
      if (!created) {
        log.warn("Unable to create [{}] directory in SOLR_HOME [{}].  Features requiring this directory may fail.", USER_FILES_DIRECTORY, solrHome);
      }
    } catch (Exception e) {
      log.warn("Unable to create [" + USER_FILES_DIRECTORY + "] directory in SOLR_HOME [" + solrHome + "].  Features requiring this directory may fail.", e);
    }
  }
}

public static Path getUserFilesPath(Path solrHome) {
  return Paths.get(solrHome.toAbsolutePath().toString(), USER_FILES_DIRECTORY).toAbsolutePath();
} {code}
Tests pass for me when they are run using the basic:
{code:java}
ant test {code}
There are specific tests that exercise this directory which pass, but that may be because the tests also populate this directory with a file in a way that would create the directory if it does not exist.

 

I think userfiles falls into the same category of SOLR-14078 where the Solr home isn't set correctly by SolrTestCaseJ4.

Yes, it's the same problem. So the action item here is to change SolrTestCaseJ4 it seems. Is this a blocker for 8.4?

I don't personally think its a blocker for 8.4. It hasn't caused any tests to fail. It is isolated to tests only.

I don't think it's a new regression. It's just general flakiness of those tests.

FYI, I saw this in LoggingHandlerTest:

{code}
   [junit4]   2> access: access denied ("java.io.FilePermission" "/boot" "read")
   [junit4]   2> java.lang.Exception: Stack trace
   [junit4]   2> 	at java.base/java.lang.Thread.dumpStack(Thread.java:1387)
   [junit4]   2> 	at java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:462)
   [junit4]   2> 	at java.base/java.security.AccessController.checkPermission(AccessController.java:897)
   [junit4]   2> 	at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:322)
   [junit4]   2> 	at java.base/java.lang.SecurityManager.checkRead(SecurityManager.java:661)
   [junit4]   2> 	at java.base/sun.nio.fs.UnixFileSystem$FileStoreIterator.readNext(UnixFileSystem.java:205)
   [junit4]   2> 	at java.base/sun.nio.fs.UnixFileSystem$FileStoreIterator.hasNext(UnixFileSystem.java:222)
   [junit4]   2> 	at org.apache.lucene.util.IOUtils.getFileStore(IOUtils.java:595)
   [junit4]   2> 	at org.apache.lucene.util.IOUtils.spinsLinux(IOUtils.java:539)
   [junit4]   2> 	at org.apache.lucene.util.IOUtils.spins(IOUtils.java:528)
   [junit4]   2> 	at org.apache.lucene.util.IOUtils.spins(IOUtils.java:503)
   [junit4]   2> 	at org.apache.lucene.index.ConcurrentMergeScheduler.initDynamicDefaults(ConcurrentMergeScheduler.java:412)
   [junit4]   2> 	at org.apache.lucene.index.ConcurrentMergeScheduler.merge(ConcurrentMergeScheduler.java:501)
   [junit4]   2> 	at org.apache.lucene.index.IndexWriter.waitForMerges(IndexWriter.java:2538)
   [junit4]   2> 	at org.apache.lucene.index.IndexWriter.shutdown(IndexWriter.java:1045)
   [junit4]   2> 	at org.apache.lucene.index.IndexWriter.close(IndexWriter.java:1087)
   [junit4]   2> 	at org.apache.lucene.search.spell.SpellChecker.setSpellIndex(SpellChecker.java:172)
   [junit4]   2> 	at org.apache.lucene.search.spell.SpellChecker.<init>(SpellChecker.java:150)
   [junit4]   2> 	at org.apache.solr.spelling.AbstractLuceneSpellChecker.init(AbstractLuceneSpellChecker.java:116)
   [junit4]   2> 	at org.apache.solr.spelling.IndexBasedSpellChecker.init(IndexBasedSpellChecker.java:52)
   [junit4]   2> 	at org.apache.solr.handler.component.SpellCheckComponent.addSpellChecker(SpellCheckComponent.java:759)
   [junit4]   2> 	at org.apache.solr.handler.component.SpellCheckComponent.inform(SpellCheckComponent.java:713)
   [junit4]   2> 	at org.apache.solr.core.SolrResourceLoader.inform(SolrResourceLoader.java:709)
   [junit4]   2> 	at org.apache.solr.core.SolrCore.<init>(SolrCore.java:1023)
   [junit4]   2> 	at org.apache.solr.core.SolrCore.<init>(SolrCore.java:901)
   [junit4]   2> 	at org.apache.solr.core.CoreContainer.createFromDescriptor(CoreContainer.java:1292)
   [junit4]   2> 	at org.apache.solr.core.CoreContainer.lambda$load$13(CoreContainer.java:788)
   [junit4]   2> 	at com.codahale.metrics.InstrumentedExecutorService$InstrumentedCallable.call(InstrumentedExecutorService.java:202)
   [junit4]   2> 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
   [junit4]   2> 	at org.apache.solr.common.util.ExecutorUtil$MDCAwareThreadPoolExecutor.lambda$execute$0(ExecutorUtil.java:210)
   [junit4]   2> 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
   [junit4]   2> 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
   [junit4]   2> 	at java.base/java.lang.Thread.run(Thread.java:834)

{code}

Not just /boot, but it seems to be iterating over all entries in my / folder! Attaching log.

it is the lucene spinning-disk detector. on linux it tries to do evil stuff for your mount points (so its not /, but more like everything in 'df'). if it is confusing, it can be disabled via system property or i think configured explicit in CMS. It is about to be 2020 after all :)

If we run our tests with {{java.security.debug=all}} then we can see that the properties that we thing are being set are not getting resolved:

{noformat}
policy: reading file:/Users/mdrob/code/solr/gradle/testing/randomization/policies/solr-tests.policy
        [Policy Parser]: sun.security.util.PropertyExpander$ExpandException: unable to expand property common.dir
        [Policy Parser]: sun.security.util.PropertyExpander$ExpandException: unable to expand property hadoop.security.credential.provider.path
        [Policy Parser]: sun.security.util.PropertyExpander$ExpandException: unable to expand property hadoop.security.credential.provider.path
        [Policy Parser]: sun.security.util.PropertyExpander$ExpandException: unable to expand property solr.jetty.keystore
        [Policy Parser]: sun.security.util.PropertyExpander$ExpandException: unable to expand property solr.jetty.keystore
        [Policy Parser]: sun.security.util.PropertyExpander$ExpandException: unable to expand property solr.jetty.truststore
        [Policy Parser]: sun.security.util.PropertyExpander$ExpandException: unable to expand property solr.jetty.truststore
        [Policy Parser]: sun.security.util.PropertyExpander$ExpandException: unable to expand property solr.install.dir
        [Policy Parser]: sun.security.util.PropertyExpander$ExpandException: unable to expand property solr.install.dir
        [Policy Parser]: sun.security.util.PropertyExpander$ExpandException: unable to expand property jetty.home
        [Policy Parser]: sun.security.util.PropertyExpander$ExpandException: unable to expand property jetty.home
        [Policy Parser]: sun.security.util.PropertyExpander$ExpandException: unable to expand property solr.solr.home
        [Policy Parser]: sun.security.util.PropertyExpander$ExpandException: unable to expand property solr.solr.home
        [Policy Parser]: sun.security.util.PropertyExpander$ExpandException: unable to expand property solr.data.home
        [Policy Parser]: sun.security.util.PropertyExpander$ExpandException: unable to expand property solr.data.home
        [Policy Parser]: sun.security.util.PropertyExpander$ExpandException: unable to expand property solr.default.confdir
        [Policy Parser]: sun.security.util.PropertyExpander$ExpandException: unable to expand property solr.default.confdir
        [Policy Parser]: sun.security.util.PropertyExpander$ExpandException: unable to expand property solr.log.dir
        [Policy Parser]: sun.security.util.PropertyExpander$ExpandException: unable to expand property solr.log.dir
        [Policy Parser]: sun.security.util.PropertyExpander$ExpandException: unable to expand property log4j.configurationFile
        [Policy Parser]: sun.security.util.PropertyExpander$ExpandException: unable to expand property solr.internal.network.permission
{noformat}

We have a comment noting that these system properties are set by /bin/solr, but for tests, they are set by SolrTestCaseJ4 which is after the security policy has already been set and resolved.

I am seeing failures in TestTaskManagement which seems related:

[https://jenkins.thetaphi.de/job/Solr-main-Linux/334/testReport/org.apache.solr.search/TestTaskManagement/testCancellationQuery/]

 

java.security.AccessControlException: access denied ("java.net.SocketPermission" "127.0.0.1:35107" "connect,resolve")

I think we've taken care of all of the individual failures in other issues now.

Closing after the 9.0.0 release

