| (x) *{color:red}-1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime ||  Logfile || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 57s{color} | {color:blue}{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} || ||
| {color:green}+1{color} | {color:green} dupname {color} | {color:green}  0m  0s{color} | {color:green}{color} | {color:green} No case conflicting files found. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green}{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} {color} | {color:green}  0m  0s{color} | {color:green}test4tests{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
|| || || || {color:brown} trunk Compile Tests {color} || ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green} 24m  0s{color} | {color:green}{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  1m 37s{color} | {color:green}{color} | {color:green} trunk passed with JDK Ubuntu-11.0.9.1+1-Ubuntu-0ubuntu1.18.04 {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  1m 23s{color} | {color:green}{color} | {color:green} trunk passed with JDK Private Build-1.8.0_275-8u275-b01-0ubuntu1~18.04-b01 {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 54s{color} | {color:green}{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 33s{color} | {color:green}{color} | {color:green} trunk passed {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 21m  7s{color} | {color:green}{color} | {color:green} branch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 58s{color} | {color:green}{color} | {color:green} trunk passed with JDK Ubuntu-11.0.9.1+1-Ubuntu-0ubuntu1.18.04 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m 31s{color} | {color:green}{color} | {color:green} trunk passed with JDK Private Build-1.8.0_275-8u275-b01-0ubuntu1~18.04-b01 {color} |
| {color:blue}0{color} | {color:blue} spotbugs {color} | {color:blue}  3m 33s{color} | {color:blue}{color} | {color:blue} Used deprecated FindBugs config; considering switching to SpotBugs. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  3m 31s{color} | {color:green}{color} | {color:green} trunk passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} || ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  1m 23s{color} | {color:green}{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  1m 27s{color} | {color:green}{color} | {color:green} the patch passed with JDK Ubuntu-11.0.9.1+1-Ubuntu-0ubuntu1.18.04 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  1m 27s{color} | {color:green}{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  1m 20s{color} | {color:green}{color} | {color:green} the patch passed with JDK Private Build-1.8.0_275-8u275-b01-0ubuntu1~18.04-b01 {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  1m 20s{color} | {color:green}{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 49s{color} | {color:green}{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} mvnsite {color} | {color:green}  1m 21s{color} | {color:green}{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green}{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedclient {color} | {color:green} 17m 56s{color} | {color:green}{color} | {color:green} patch has no errors when building and testing our client artifacts. {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 59s{color} | {color:green}{color} | {color:green} the patch passed with JDK Ubuntu-11.0.9.1+1-Ubuntu-0ubuntu1.18.04 {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  1m 34s{color} | {color:green}{color} | {color:green} the patch passed with JDK Private Build-1.8.0_275-8u275-b01-0ubuntu1~18.04-b01 {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  3m 46s{color} | {color:green}{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} || ||
| {color:red}-1{color} | {color:red} unit {color} | {color:red}120m 46s{color} | {color:red}https://ci-hadoop.apache.org/job/PreCommit-HDFS-Build/360/artifact/out/patch-unit-hadoop-hdfs-project_hadoop-hdfs.txt{color} | {color:red} hadoop-hdfs in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m 47s{color} | {color:green}{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black}210m 30s{color} | {color:black}{color} | {color:black}{color} |
\\
\\
|| Reason || Tests ||
| Failed junit tests | hadoop.hdfs.server.balancer.TestBalancerRPCDelay |
|   | hadoop.hdfs.TestSafeModeWithStripedFile |
|   | hadoop.hdfs.TestParallelUnixDomainRead |
|   | hadoop.hdfs.TestDataTransferKeepalive |
|   | hadoop.hdfs.TestErasureCodingPolicies |
|   | hadoop.hdfs.TestDecommissionWithStriped |
|   | hadoop.hdfs.TestDistributedFileSystemWithECFileWithRandomECPolicy |
|   | hadoop.hdfs.server.namenode.TestDecommissioningStatus |
|   | hadoop.hdfs.TestMultipleNNPortQOP |
|   | hadoop.hdfs.TestDFSStripedInputStream |
|   | hadoop.hdfs.TestWriteBlockGetsBlockLengthHint |
|   | hadoop.hdfs.TestDFSStripedOutputStream |
|   | hadoop.hdfs.TestReadStripedFileWithDecodingDeletedData |
|   | hadoop.hdfs.TestReadStripedFileWithDecoding |
|   | hadoop.hdfs.TestFileChecksum |
|   | hadoop.hdfs.TestDFSStripedOutputStreamWithRandomECPolicy |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | ClientAPI=1.41 ServerAPI=1.41 base: https://ci-hadoop.apache.org/job/PreCommit-HDFS-Build/360/artifact/out/Dockerfile |
| JIRA Issue | HDFS-15730 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/13017295/HDFS-15730.001.patch |
| Optional Tests | dupname asflicense compile javac javadoc mvninstall mvnsite unit shadedclient findbugs checkstyle |
| uname | Linux 4ecf4e927666 4.15.0-112-generic #113-Ubuntu SMP Thu Jul 9 23:41:39 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | personality/hadoop.sh |
| git revision | trunk / 4c033bafa02 |
| Default Java | Private Build-1.8.0_275-8u275-b01-0ubuntu1~18.04-b01 |
| Multi-JDK versions | /usr/lib/jvm/java-11-openjdk-amd64:Ubuntu-11.0.9.1+1-Ubuntu-0ubuntu1.18.04 /usr/lib/jvm/java-8-openjdk-amd64:Private Build-1.8.0_275-8u275-b01-0ubuntu1~18.04-b01 |
|  Test Results | https://ci-hadoop.apache.org/job/PreCommit-HDFS-Build/360/testReport/ |
| Max. process+thread count | 3723 (vs. ulimit of 5500) |
| modules | C: hadoop-hdfs-project/hadoop-hdfs U: hadoop-hdfs-project/hadoop-hdfs |
| Console output | https://ci-hadoop.apache.org/job/PreCommit-HDFS-Build/360/console |
| versions | git=2.17.1 maven=3.6.0 findbugs=4.0.6 |
| Powered by | Apache Yetus 0.13.0-SNAPSHOT https://yetus.apache.org |


This message was automatically generated.



Do you think it is correct for the excess block to get deleted before reconstruction? I think we should prevent it from getting deleted incase there is a corrupt replica, until the block gets reconstructed. In case we delete the excess index say b0 and we loose the only remaining b0 as well, we might loose a chance of reconstruction as well?

Thoughts?

Hi [~ayushtkn], thanks your comments ! 
{quote}In case we delete the excess index say b0 and we loose the only remaining b0 as well, we might loose a chance of reconstruction as well?
{quote}
It won't happen. The method BlockManager#processExtraRedundancyBlock() construct an array nonExcess. We can see the corrupt nodes are excluded from the array.
{code:java}
if (!isExcess(cur, block)) {
  if (cur.isInService()) {
    // exclude corrupt replicas
    if (corruptNodes == null || !corruptNodes.contains(cur)) { // Corrupt storage is excluded here !
      nonExcess.add(storage);
    }
  }
}
{code}
Then it calls BlockManager#chooseExcessRedundancies(). All the excess storage are chosen from the array nonExcess. Supposing we have 2 b0. One is corrupt. The corrupt one will be excluded from nonExcess, so the left b0 won't be excess anymore and won't be deleted in BlockManager#chooseExcessRedundancies().

I am not saying if. there are two b0 and one is corrupt.

Say, I have XOR-2-1

b0 is corrupt, b1 is redundant and b2 is normal.

b0 - DN0 (Corrupt)

b1 - DN1

b1 - DN2

b2 - DN3

 

So, if I delete b0 of DN1 considering it excess, before reconstruction, and post delete some how I loose DN2, then I can't reconstruct the block itself, So, my point is before reconstruction we shouldn't delete itself to be on the safe side

Hi [~ayushtkn], very thanks for your explanation !

'Deleting excess replicas when there is corrupt/missing blk' is introduced in HDFS-14754. The test case TestRedundantBlocks#testProcessOverReplicatedAndRedudantBlock shows the situation. If we don't allow the deletion then the reconstruction won't happen.

 

I also agree the risk deleting the excess replica when there is corrupt/missing blk. Shall we start a new Jira to discuss the risk and solution ? Because if we decide to change the behavior, it would be a big change impacting many other test cases.

This jira only focus on the unit test case TestAddOverReplicatedStripedBlocks#testProcessOverReplicatedAndCorruptStripedBlock to make sure the behavior is correct with current implementation.

I am not sure post the change in HDFS-14754, this test is relevant or not, I think it was checking that in case there is a corrupt replica, then excess replica isn't deleted? which doesn't hold true now.
Having excess replica shouldn't bother reconstruction in general if there are datanodes available, that would bother only if there is no DN available, Correct?

Not sure what can be done here, Are we ok with the present behaviour, do we need to hold replica unless we are done with reconstruction, we can drop this test or may be tweak as you have done.

[~ferhui] any thoughts on this?

[~LiJinglun] Thanks for reporting, [~ayushtkn] Thanks for review!
Agree that the test should be fixed, because it will be flaky if not fixed.
[~LiJinglun] does TestAddOverReplicatedStripedBlocks#testProcessOverReplicatedAndMissingStripedBlock have the same problem ?

Thanks [~ayushtkn] [~ferhui] for your comments ! 
{quote}Having excess replica shouldn't bother reconstruction in general if there are datanodes available, that would bother only if there is no DN available, Correct?
{quote}
From the description in HDFS-14754 the scenario is: _the block is not deleting and the missing block is not able to reconstruct_. I haven't go deep into this. But I guess the excess replicas make the live count > expected. This might prevent the NameNode from starting a reconstruction.
{quote}Does TestAddOverReplicatedStripedBlocks#testProcessOverReplicatedAndMissingStripedBlock have the same problem ?
{quote}
I think so. But this test case has other problems. I debug this test and find it always has a storage with blockContentStale which prevents the NameNode to processExtraRedundancyBlock. I've tried some ways but all failed.

 

