Updated the description and listed two possible approaches.

I like the 2nd one since it also addresses the version issue (currently we have the version number written plainly in a config file but the user mustn't modify it).

What do others think ? [~phunt][~fpj][~hdeng][~michim][~marshall]

Just to clarify, this issue contains two parts:
1. Backup static config. It happens twice 
{quote}
once when removing the ensemble definitions, at which point a dynamic file doesn't exist yet, and once when removing clientPort information
{quote}

2. Backup dynamic file. It happens when a new dynamic is created on reconfig.

[~shralex]
Your options are applied to dynamic files. I think it also applies to static files. I prefer sequence number (we can save the zxid in file).

One questions: where should those backup stay? What about creating a new directory in "data/"?

For the static file - it is sufficient to back it up only once - only when configBackwardCompatibilityMode is on. 

As for the dynamic file, here are my reasons for preferring solution #2:
1. When backing up a dynamic config we have to write down the version in the backup file anyway. 
2. Numbering the backups using versions will make backups easy to correlate across different replicas. Whereas it is not clear that bak2 on one machine is for the same thing as bak2 on another (unless you look inside and check the version).
3. If the version is written in a separate file, it will be difficult to maintain consistency between the version file and the dynamic configuration file. Consider updating one of them but not the other and having a failure in between.
With approach #2 changing files when the configuration fails is really straightforward.

We don't have to move the old config file - it will just stay in the configuration directory where the user is likely to look for configuration files.





{quote}
3. If the version is written in a separate file, it will be difficult to maintain consistency between the version file and the dynamic configuration file. Consider updating one of them but not the other and having a failure in between.
{quote}
I agree that at this moment it doesn't need to be separated out.

h3. Regarding the version appended to file name.
Let me give out two examples:

One is using zxid.
{code}
dynamic.10000001
dynamic.20000004
...
{code}

One is using sequence number
{code}
dynamic.1
dynamic.2
....
{code}

The second looks better. Right?

{quote}
2. Numbering the backups using versions will make backups easy to correlate across different replicas.
{quote}
Well. I was previously thinking to replace zxid with sequence number as version across reconfig consistency. So my assumption is that this is gonna be a relatively big change too.. Just a suggestion.

It doesn't need to replace zxid in reconfig consistency.
Otherwise the tradeoff is adding a sequential version in reconfig consistency. 

Consider why zxid is not a sequence number but includes the epoch too. Versions need the same mechanism, they can't be sequence numbers.

sure, 1 2 3 look better but I don't see any other advantage and this approach has all the downsides I pointed out...

What about adding a sequential version on each reconfig. Nothing needs to be replaced in current code.
 
{quote}
1 2 3 look better but I don't see any other advantage 
{quote}
That's true. I am fine with either.

Time to continue to disucss code change to back up. If there is a demand for the sequence, it's not hard to make.

I strongly agree with Alex on this as well. I would like them to be named using zxid as well. As Alex explained, that is much safer from a consistency point of view and much easier to correlate to the reconfiguration as well as different replicas. +1 from me.

[~shralex]
Ju uploaded static file backup patch and appreciate feedback.


There's no need to read the static file for the second time. 
The code above read it into a Properties object, so you can write it out, like this:

                for (Entry<Object, Object> entry : cfg.entrySet()) {
                    String key = entry.getKey().toString().trim();
                    String value = entry.getValue().toString().trim();
                    out.write(key.concat("=").concat(value).concat("\n"));
                }


Ignore the previous one.
See the draft.patch.
This is the basic idea where to put the code. Please review safety.


Umm... Outputting cfg doesn't guarantee the same sequence.
But let's discuss more important problem -- should it append old zxid? If so, except reading the dynamic file again, can I just get from quorum verifier (small code change)?

My 0.02 - I like the idea of using the zxid as the file name suffix. It makes things easier to debug -- it's very clear which zxid version is associated with the change. Typically when I'm debugging issues I'm always tying them back to this value anyway. It also means that we don't need to include the version number in the file itself - which I also like very much.

For dynamic configuration files, here's where I'd start:

In QuorumPeer, setQuorumVerifier, before calling writeDynamicConfig update the dynamicConfigFilename to have the correct suffix of the new config version. 

In writeDynamicConfig change, instead of this
            public void write(OutputStream outConfig) throws IOException {
                byte b[] = qv.toString().getBytes();
                outConfig.write(b);
            }
I'd construct a Properties object first, and then write out all keys that are not "version".
Then you need to call editStaticConfig and update the link to the new file.

For loading the version, perhaps the easiest thing is after dynamicCfg.load(inConfig) in QuorumPeerConfig, 
add a pair to this Properites object with key="version" and value taken from the filename.




{quote}
 before calling writeDynamicConfig update the dynamicConfigFilename to have the correct suffix of the new config version.
{quote}

I couldn't find an easy way to atomically do both writing the dynamic file with version and linking it to the one of "dynamicConfigFile".
I was thinking about 
1. writing the dynamic file again with zxid appended??
2. copy the old to another file and then write the new to "dynamicConfigFile"?? which I am trying to do.

The properties method looks good.

why not create the new dynamic config file first, and after this is done update the static file with a link to the new dynamic file ? if writing out the dynamic file fails you won't change the link, so the link will point to the previous dynamic file. Is there a failure scenario you're concerned about ?

Okay. Sounds good. I misinterpret the line in your previous comments.
FYI, it should let users know that the "dynamicConfigFile" will be changed.

[~shralex]

I have finished the functionality. Please take a look.
The next thing would be to 
1. fix existing test cases that make assumptions on "zoo.cfg.dynamic"
2. add test case for this patch.
3. refactor "configBackwardCompatibilityMode" variable which isn't useful anymore and
4. optimize cases where we don't need to edit the static file.

Gonna be another huge patch.

thanks! can you plesae create a review board for this, its gonna make it easier to comment

[~shralex]
Add it to the description for easier access.

I added some comments to reviewboard.

Thanks for the comments. [~shralex]
Could you explain
{code}
            if (clientPortAddress!=null && qs!=null && qs.clientAddr!=null){ 
                if ((!clientPortAddress.getAddress().isAnyLocalAddress()
                       && !clientPortAddress.equals(qs.clientAddr)) || 
                   (clientPortAddress.getAddress().isAnyLocalAddress() 
                       && clientPortAddress.getPort()!=qs.clientAddr.getPort())) 
                    throw new ConfigException("client address for this server (id = " + serverId + ") in static config file is " + clientPortAddress + " is different from client address found in dynamic file: " + qs.clientAddr);
                else {
                    editStaticConfig(configFileStr, dynamicConfigFileStr, true);
                }
            }
{code}

the logic behind this and why it causes the race?

Just to keep a reference: https://reviews.apache.org/r/24208/

Suppose you start with a static configuration file, without a dynamic one. When this line is called all the server definitions are removed from the static file (see editStaticConfig function). But here the dynamic file doesn't exist yet. The dynamic file is created by QuorumPeer.writeDynamiConfig, but QuorumPeer wasn't created here yet. So the edited static file doesn't have any server definitions after this point. If the server crashes after this line it will not be able to restart.

It doesn't sound safe to write the static file at that point. The right path seems to be to write the static file without the server declarations only once we have written a dynamic file. Why don't we move it to after we write the dynamic configuration file?

Exactly what I meant as well. We already have this sequence of calls in setQuorumVerifier: writeDynamicConfigFile, editStaticConfigFile.

[~shralex]
Another change I made is that I didn't keep the version in dynamic file. 

My question: why do we need to extract the version from dynamic file? It's the old version.
I think you wanna back it up, maybe? But It's already there appended with version on creation. Newly created dynamic file will have its version appended. Right?

Hi, I think we only need to extract the version from the dynamic file name when the server starts up. This is to know which config he's working with and construct the right QuorumVerifier object. This happens in QuorumPeerConfig, see my comment in reviewboard. I think that right after parsing the dynamic file you should add the version (extracted from the file name) to the Properties object. 

Okay. Made sense. Thanks for telling me.

I am worried about one case:
what if a client first start with a dynamic file without version / with incorrect version?
Can you share more details in this? [~shralex]

right, this is a valid concern.

- I think you should remove the "!key.equals("version")"  from QuorumPeerConfig - make sure that "version" key doesn't appear in the file. 

- if the version is specified in the file name lets assume that its correct

- if the version is not specified in the file name we shouldn't add "version" key to the Properties object - this is the case for starting a new ensemble or adding a joining server. In this  case we'll use the default value of version =  0.

Besides removing "configBackwardCompatibilityMode" in QuorumPeerConfig, I also realized there is "configBackwardCompatibility" in QuorumPeer which is used in this logic:
{code}
            // we need to write the dynamic config file. Either it already exists
            // or we have the old-style config file and we're in the backward compatibility mode,
            // so we'll create the dynamic config file for the first time now
            if (dynamicConfigFilename != null || (configFilename != null && configBackwardCompatibility)) {         
{code}

[~shralex] Could you explain the logic here? I am thinking about removing that "configBackwardCompatibility" as well. What changes should be made?


[~shralex]
I have update review board to reflect my changes regarding your last suggestion. Please take a look and review.

I will start working on testing.

I rethought the version thing a bit more.
It seems to me too hackish to parse the "version" number from filename.
My original proposal was to have some sort of backup with a history view. The reason I suggest separating version out is that I am concerned when users copy dynamic files around and boot it up, they didn't realize the version inside is important. I was suggesting to separate version apart to another related file, and if a dynamic file doesn't have any version related to it, it is version 0.

I don't know where to go here. As a compromise to what we have done so far, I would like to keep "version" still in dynamic file and everything is still what [~shralex] suggested:
1. have version appended to filename (not parsed from filename)
2. update static config to point to new dynamic file.


Let me know any opinion here. This is more like a design decision.

Hi Hongchao, I think we should stick with the design we discussed previously. Its always possible to improve later but I think this is a pretty good option. 

Having the version in the file itself in addition to the filename has the disadvantage we have now - there is a configuration parameter the user mustn't touch otherwise the system will break, but nevertheless its very easy for the user to mistakenly change it. Having it just in the filename makes it more difficult to mistakenly change.

Again - there may be a more elegant solution but currently I don't see it. 

BTW, when you write the dynamic file you don't need to parse the filename - you know the up-to-date version from the quorumVerifier you have in memory. You only need to parse it on server boot.


Cool. Okay I will stick to it.

{quote}
BTW, when you write the dynamic file you don't need to parse the filename - you know the up-to-date version from the quorumVerifier you have in memory. You only need to parse it on server boot.
{quote}
Definitely what I am doing. :)

Regarding the backward compatibility flag in QuorumPeer. You probably saw that already, but this is set by QuorumPeerMain, together with all other parameters. quorumPeer.setConfigBackwardCompatibility(config.getConfigBackwardCompatibility());
where config is the QuorumPeerConfig. So if you remove one you should remove the other.

Instead of "if (dynamicConfigFilename != null || (configFilename != null && configBackwardCompatibility)) {       " I think that you should have just configFilename != null (because some tests initialize QuorumPeer without a static config file). Maybe I'm wrong here, so try to test it.

[~shralex]
I missed one thing -- the version of next dynamic file.
What should be set for it?

Maybe I should kept that version in next dynamic file.

yeah that's a good point, I'm not sure what's best here. Having a version inside the .next file sounds fine.
Do you wanna call it dynamic.next or dynamic.<base version>.next ? (base version being the version of the old config) either way is fine with me.

I prefer "zoo.cfg.dynamic.next". Otherwise the program needs a consistent way to track another changing name.
I will write the version into next dynamic file and load it on bootup. This doesn't make less change on existing code. :)

I have finished the functionality and testing according to this discussion.

Updated review board and welcome review/feedback:
    https://reviews.apache.org/r/24208/


-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12660254/ZOOKEEPER-1994.patch
  against trunk revision 1615240.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 8 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 2 new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2265//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2265//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2265//console

This message is automatically generated.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12660402/ZOOKEEPER-1994-v2.patch
  against trunk revision 1615240.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 8 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    -1 findbugs.  The patch appears to introduce 2 new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2266//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2266//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2266//console

This message is automatically generated.

This is a latest version completing comments on review board:
https://reviews.apache.org/r/24208/

Fixed Jenkins test failure.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12660475/ZOOKEEPER-1994-v3.patch
  against trunk revision 1615240.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 11 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2267//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2267//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2267//console

This message is automatically generated.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12660492/ZOOKEEPER-1994-v4.patch
  against trunk revision 1615240.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 11 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2268//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2268//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2268//console

This message is automatically generated.

fix flaky test

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12660523/ZOOKEEPER-1994-v5.patch
  against trunk revision 1615240.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 11 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2269//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2269//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2269//console

This message is automatically generated.

[~shralex]
The patch is good to go now.

More refactoring wrt review board's comments.
Thanks Alex and Raul.

1. remove 'dynamicConfigFilename' in QuorumPeer.java
2. format 'if' clause.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12661105/ZOOKEEPER-1994-v6.patch
  against trunk revision 1615240.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 11 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2271//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2271//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2271//console

This message is automatically generated.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12661236/ZOOKEEPER-1994-v6.patch
  against trunk revision 1615240.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 14 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2273//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2273//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2273//console

This message is automatically generated.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12661236/ZOOKEEPER-1994-v6.patch
  against trunk revision 1615240.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 14 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2274//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2274//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2274//console

This message is automatically generated.

Add another test to cover the trace of version appended to dynamic file.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12661277/ZOOKEEPER-1994-v7.patch
  against trunk revision 1615240.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 14 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2275//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2275//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2275//console

This message is automatically generated.

[~shralex]
This patch is ready now.
I played with it a bit and it worked great.

Workflow is like:
After startup,
{code}
dynamicConfigFile=./zoo.cfg.dynamic.1000
...
zoo.cfg.dynamic.1000:
server.1=xxx
server.2=xxx
{code}

Reconfig to add server 3, it creates a new file "zoo.cfg.dynamic.1004"
{code}
dynamicConfigFile=./zoo.cfg.dynamic.1004
...
zoo.cfg.dynamic.1004:
server.1=xxx
server.2=xxx
server.3=xxx
{code}

The hex-numeric version at the end of file matters.
Let's get this patch in.
Any feedback/requirement/comment is welcome:
https://reviews.apache.org/r/24208/

Thanks Hongchao! I'll take a look soon, hopefully in the evening.
So you decided not to skip updating the config files during ReconfigTest ? (its probably fine, I'm asking just for my understanding)

>  skip updating the config files during ReconfigTest 
If you meant something like "dynamicFilePrefix", I had skipped that part.

The main reason is that there is some work to coordinate the path across config files. I am not sure of what to do. So I still chose "configFile + prefix + version" which works fine during my play-around.

Fix review board comments.
Thanks Alex.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12661486/ZOOKEEPER-1994-v8.patch
  against trunk revision 1615240.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 14 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2277//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2277//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2277//console

This message is automatically generated.

Small changes to QuorumPeerTestBase and to the new tests.

Hongchao, please take a look and let me know if my changes make sense. Could you upload this patch to reviewboard ?

[~shralex]
Looks absolutely nicer and neater than mine!
Thanks Alex.

-1 overall.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12661563/ZOOKEEPER-1994-v9.patch
  against trunk revision 1615240.

    +1 @author.  The patch does not contain any @author tags.

    +1 tests included.  The patch appears to include 15 new or modified tests.

    +1 javadoc.  The javadoc tool did not generate any warning messages.

    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.

    +1 findbugs.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.

    +1 release audit.  The applied patch does not increase the total number of release audit warnings.

    -1 core tests.  The patch failed core unit tests.

    +1 contrib tests.  The patch passed contrib unit tests.

Test results: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2278//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2278//artifact/trunk/build/test/findbugs/newPatchFindbugsWarnings.html
Console output: https://builds.apache.org/job/PreCommit-ZOOKEEPER-Build/2278//console

This message is automatically generated.

I ran the patch locally, everything seems to work great.

Committed to trunk and 3.5 branch.

Great work, Hongchao, thank you! 

SUCCESS: Integrated in ZooKeeper-trunk #2406 (See [https://builds.apache.org/job/ZooKeeper-trunk/2406/])
ZOOKEEPER-1994. Auto-backup configuration files; config version becomes part of filename (Hongchao Deng via shralex) (shralex: http://svn.apache.org/viewcvs.cgi/?root=Apache-SVN&view=rev&rev=1617886)
* /zookeeper/trunk/CHANGES.txt
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/quorum/QuorumPeer.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java
* /zookeeper/trunk/src/java/main/org/apache/zookeeper/server/quorum/QuorumPeerMain.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerTestBase.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/quorum/ReconfigBackupTest.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/quorum/ReconfigLegacyTest.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/server/quorum/ReconfigRecoveryTest.java
* /zookeeper/trunk/src/java/test/org/apache/zookeeper/test/LENonTerminateTest.java


