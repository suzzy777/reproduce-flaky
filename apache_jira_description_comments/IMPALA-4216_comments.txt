I don't think the text change in the Memory Limit Exceeded report (IMPALA-1616) is the root cause here.  The test expects "Memory limit exceed" (lowarcase 'l' and 'e') string to be present in the ImpalaBeeswaxException exception. I've checked the history of  RuntimeState::LogMemLimitExceeded() and found that for the "Memory Limit Exceeded" portion of the message it has always used uppercase 'L' and 'E' ever since it was introduced.

The ImpalaBeeswaxException exception that the test catches is thrown by ImpalaBeeswaxClient.wait_for_completion() (impala_beeswax.py). This method raises an ImpalaBeeswaxException when the query has failed, and sets the exception message to the error logs received from the Impala service.

After taking a quick look at the code, it looks to me that the "Memory limit exceeded" (lowercase 'l' and 'e') string that the test expects should come from the return status being set to Status::MemLimitExceeded(). Probably the return status is not set properly or it is not added to the error logs in some cases.

Anyway, a quick-and-dirty fix would be to replace the failing assert with something like:
assert TestLowMemoryLimits.EXPECTED_ERROR_MSG.lower() in str(e).lower()

Do you think, I should go ahead with this approach or spend more time investigating?


That's true, I misinterpreted this - thanks for investigating. Maybe we should change the capitalisation of MemoryLimitExceeded in RuntimeState::LogMemLimitExceeded(). It looks like it's inconsistent with the capitalisation elsewhere:

{code}
tarmstrong@tarmstrong-box:~/Impala/incubator-impala$ git grep "Memory limit exceeded"
be/src/common/status.cc:  return Status(TErrorCode::MEM_LIMIT_EXCEEDED, "Memory limit exceeded");
be/src/runtime/runtime-state.h:  /// generic "Memory limit exceeded" error.
testdata/workloads/functional-query/queries/QueryTest/analytic-fns.test:Memory limit exceeded
testdata/workloads/functional-query/queries/QueryTest/insert.test:Memory limit exceeded
testdata/workloads/functional-query/queries/QueryTest/large_strings.test:Memory limit exceeded
testdata/workloads/functional-query/queries/QueryTest/nested-types-tpch.test:Memory limit exceeded
testdata/workloads/functional-query/queries/QueryTest/outer-joins.test:#'Memory limit exceeded'
testdata/workloads/functional-query/queries/QueryTest/set.test:Memory limit exceeded
testdata/workloads/tpch/queries/tpch-outer-joins.test:Memory limit exceeded
tests/query_test/test_kudu.py:        assert "Memory limit exceeded" in str(e)
tests/query_test/test_mem_usage_scaling.py:  EXPECTED_ERROR_MSG = "Memory limit exceeded"
tests/query_test/test_udfs.py:    if 'Memory limit exceeded' in str(e) or 'Cancelled' in str(e):
tests/query_test/test_udfs.py:       and ('Memory limit exceeded' in e.inner_exception.message
tarmstrong@tarmstrong-box:~/Impala/incubator-impala$ git grep "Memory limit exceeded" -i
fatal: bad flag '-i' used after filename
tarmstrong@tarmstrong-box:~/Impala/incubator-impala$ git grep -i "Memory limit exceeded"
be/src/common/status.cc:  return Status(TErrorCode::MEM_LIMIT_EXCEEDED, "Memory limit exceeded");
be/src/runtime/mem-tracker.cc:  if (CheckLimitExceeded()) ss << " memory limit exceeded.";
be/src/runtime/runtime-state.cc:  ss << "Memory Limit Exceeded by fragment: " << fragment_instance_id() << endl;
be/src/runtime/runtime-state.h:  /// generic "Memory limit exceeded" error.
testdata/workloads/functional-query/queries/QueryTest/analytic-fns.test:Memory limit exceeded
testdata/workloads/functional-query/queries/QueryTest/insert.test:Memory limit exceeded
testdata/workloads/functional-query/queries/QueryTest/large_strings.test:Memory limit exceeded
testdata/workloads/functional-query/queries/QueryTest/nested-types-tpch.test:Memory limit exceeded
testdata/workloads/functional-query/queries/QueryTest/outer-joins.test:#'Memory limit exceeded'
testdata/workloads/functional-query/queries/QueryTest/set.test:Memory limit exceeded
testdata/workloads/tpch/queries/tpch-outer-joins.test:Memory limit exceeded
tests/query_test/test_kudu.py:        assert "Memory limit exceeded" in str(e)
tests/query_test/test_mem_usage_scaling.py:  EXPECTED_ERROR_MSG = "Memory limit exceeded"
tests/query_test/test_scanners_fuzz.py:          if 'memory limit exceeded' in str(e).lower():
tests/query_test/test_udfs.py:    if 'Memory limit exceeded' in str(e) or 'Cancelled' in str(e):
tests/query_test/test_udfs.py:       and ('Memory limit exceeded' in e.inner_exception.message
tests/stress/concurrent_select.py:    if "memory limit exceeded" in caught_msg or \

{code}

[~attilaj], any idea how "Query aborted:Memory Limit Exceeded by fragment" made it to the status ? Reading the code it appears that message is only logged. Was the code different back then ?

The issue cannot be reproduced.

