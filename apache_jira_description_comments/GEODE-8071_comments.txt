jujoramos opened a new pull request #5054:
URL: https://github.com/apache/geode/pull/5054


   GEODE-8071: Use daemon threads in RebalanceCommand
   
   Changed the ExecutorService within RebalanceCommand to use daemon 
   threads, otherwise the locator refuses to gracefully shutdown.
   
   - Fixed minor warnings.
   - Added distributed tests.
   
   Thank you for submitting a contribution to Apache Geode.
   
   In order to streamline the review of the contribution we ask you
   to ensure the following steps have been taken:
   
   ### For all changes:
   - [X] Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?
   
   - [X] Has your PR been rebased against the latest commit within the target branch (typically `develop`)?
   
   - [ ] Is your initial contribution a single, squashed commit?
   
   - [X] Does `gradlew build` run cleanly?
   
   - [X] Have you written or updated unit tests to verify your changes?
   
   - [ ] If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under [ASF 2.0](http://www.apache.org/legal/resolved.html#category-a)?
   
   ### Note:
   Please ensure that once the PR is submitted, check Concourse for build issues and
   submit an update to your PR as soon as possible. If you need help, please send an
   email to dev@geode.apache.org.
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jujoramos commented on pull request #5054:
URL: https://github.com/apache/geode/pull/5054#issuecomment-624176387


   The [first commit ](https://github.com/apache/geode/pull/5054/commits/feb052e71cee12a5e7a2ca72809f9ad07a908e44) is just a refactor of the test class, the actual changes to fix the problem are in the [second commit](https://github.com/apache/geode/pull/5054/commits/bd481554d8add576c885c675c2350474eb398939). I've split them to make the review easier, will `squash` them before merging into `develop`.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


DonalEvans commented on a change in pull request #5054:
URL: https://github.com/apache/geode/pull/5054#discussion_r420289186



##########
File path: geode-dunit/src/main/java/org/apache/geode/management/internal/cli/commands/RebalanceCommandDistributedTest.java
##########
@@ -35,40 +37,91 @@
 import org.apache.geode.test.dunit.rules.MemberVM;
 import org.apache.geode.test.junit.assertions.TabularResultModelAssert;
 import org.apache.geode.test.junit.rules.GfshCommandRule;
+import org.apache.geode.test.junit.rules.MemberStarterRule;
+
+@RunWith(Parameterized.class)
+public class RebalanceCommandDistributedTest {
+  private static final String REGION_ONE_NAME = "region-1";
+  private static final String REGION_TWO_NAME = "region-2";
+  private static final String REGION_THREE_NAME = "region-3";
+
+  @Rule
+  public GfshCommandRule gfsh = new GfshCommandRule();
+
+  @Rule
+  public ClusterStartupRule cluster = new ClusterStartupRule();
 
-@SuppressWarnings("serial")
-public class RebalanceCommandDistributedTestBase {
+  protected MemberVM locator, server1, server2;
 
-  @ClassRule
-  public static ClusterStartupRule cluster = new ClusterStartupRule();
+  @Parameterized.Parameters(name = "ConnectionType:{0}")
+  public static GfshCommandRule.PortType[] connectionTypes() {
+    return new GfshCommandRule.PortType[] {http, jmxManager};
+  }
 
-  @ClassRule
-  public static GfshCommandRule gfsh = new GfshCommandRule();
+  @Parameterized.Parameter
+  public static GfshCommandRule.PortType portType;
 
-  protected static MemberVM locator, server1, server2, server3;
+  private void setUpRegions() {
+    server1.invoke(() -> {
+      Cache cache = ClusterStartupRule.getCache();
+      assertThat(cache).isNotNull();
+      RegionFactory<String, String> dataRegionFactory =
+          cache.createRegionFactory(RegionShortcut.PARTITION);
+      Region<String, String> region = dataRegionFactory.create(REGION_ONE_NAME);
+      for (int i = 0; i < 10; i++) {
+        region.put("key" + (i + 200), "value" + (i + 200));
+      }
+      region = dataRegionFactory.create(REGION_TWO_NAME);
+      for (int i = 0; i < 100; i++) {
+        region.put("key" + (i + 200), "value" + (i + 200));
+      }

Review comment:
       Could the ints added to the keys and values be cleared up a bit? There doesn't seem to be any reason to add 200 to them here, and if the number of entries is extracted to a constant, then it can be used in the invocation on server2 to prevent overwriting the existing data.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jujoramos commented on a change in pull request #5054:
URL: https://github.com/apache/geode/pull/5054#discussion_r420622492



##########
File path: geode-dunit/src/main/java/org/apache/geode/management/internal/cli/commands/RebalanceCommandDistributedTest.java
##########
@@ -35,40 +37,91 @@
 import org.apache.geode.test.dunit.rules.MemberVM;
 import org.apache.geode.test.junit.assertions.TabularResultModelAssert;
 import org.apache.geode.test.junit.rules.GfshCommandRule;
+import org.apache.geode.test.junit.rules.MemberStarterRule;
+
+@RunWith(Parameterized.class)
+public class RebalanceCommandDistributedTest {
+  private static final String REGION_ONE_NAME = "region-1";
+  private static final String REGION_TWO_NAME = "region-2";
+  private static final String REGION_THREE_NAME = "region-3";
+
+  @Rule
+  public GfshCommandRule gfsh = new GfshCommandRule();
+
+  @Rule
+  public ClusterStartupRule cluster = new ClusterStartupRule();
 
-@SuppressWarnings("serial")
-public class RebalanceCommandDistributedTestBase {
+  protected MemberVM locator, server1, server2;
 
-  @ClassRule
-  public static ClusterStartupRule cluster = new ClusterStartupRule();
+  @Parameterized.Parameters(name = "ConnectionType:{0}")
+  public static GfshCommandRule.PortType[] connectionTypes() {
+    return new GfshCommandRule.PortType[] {http, jmxManager};
+  }
 
-  @ClassRule
-  public static GfshCommandRule gfsh = new GfshCommandRule();
+  @Parameterized.Parameter
+  public static GfshCommandRule.PortType portType;
 
-  protected static MemberVM locator, server1, server2, server3;
+  private void setUpRegions() {
+    server1.invoke(() -> {
+      Cache cache = ClusterStartupRule.getCache();
+      assertThat(cache).isNotNull();
+      RegionFactory<String, String> dataRegionFactory =
+          cache.createRegionFactory(RegionShortcut.PARTITION);
+      Region<String, String> region = dataRegionFactory.create(REGION_ONE_NAME);
+      for (int i = 0; i < 10; i++) {
+        region.put("key" + (i + 200), "value" + (i + 200));
+      }
+      region = dataRegionFactory.create(REGION_TWO_NAME);
+      for (int i = 0; i < 100; i++) {
+        region.put("key" + (i + 200), "value" + (i + 200));
+      }

Review comment:
       I actually didn't add these tests and the entries looked a bit weird to me as well, I didn't want to change this but it makes sense, will do it, thanks.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jujoramos commented on pull request #5054:
URL: https://github.com/apache/geode/pull/5054#issuecomment-624511969


   @DonalEvans 
   > One thing I'm wondering though... do we know of any circumstances in which a locator might launch a non-deamon thread other than this? I'm concerned that the test might fail for unrelated reasons if something other than the rebalance command happens to start a thread.
   
   Under the current test conditions no other `non-daemon` threads should be launched by the locator; it's a valid concern, though, so thanks for bringing it up.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


Commit d8e86cb720c054b154a16cc88fee88e73db709f3 in geode's branch refs/heads/develop from Juan José Ramos
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=d8e86cb ]

GEODE-8071: Use daemon threads in RebalanceCommand (#5054)

Changed the ExecutorService within RebalanceCommand to use daemon
threads, otherwise the locator refuses to gracefully shutdown.

- Fixed minor warnings.
- Added distributed tests.
- Refactored RebalanceCommandDistributedTest.

Commit 5a3a24e4724ba7278bc2f9482d25302ede964319 in geode's branch refs/heads/support/1.12 from Juan José Ramos
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=5a3a24e ]

GEODE-8071: Use daemon threads in RebalanceCommand (#5054)

Changed the ExecutorService within RebalanceCommand to use daemon
threads, otherwise the locator refuses to gracefully shutdown.

- Fixed minor warnings.
- Added distributed tests.
- Refactored RebalanceCommandDistributedTest.

(cherry picked from commit d8e86cb720c054b154a16cc88fee88e73db709f3)


Commit 193a98a1975a2df417e50755d7badd320c7cb8af in geode's branch refs/heads/support/1.13 from Juan José Ramos
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=193a98a ]

GEODE-8071: Use daemon threads in RebalanceCommand (#5054)

Changed the ExecutorService within RebalanceCommand to use daemon
threads, otherwise the locator refuses to gracefully shutdown.

- Fixed minor warnings.
- Added distributed tests.
- Refactored RebalanceCommandDistributedTest.

(cherry picked from commit d8e86cb720c054b154a16cc88fee88e73db709f3)


jujoramos opened a new pull request #5676:
URL: https://github.com/apache/geode/pull/5676


   Different versions of the embedded Jetty server can launch non-daemon
   threads, so the fix implies preventing any flakiness by just checking
   for the thread we're interested in.
   
   Thank you for submitting a contribution to Apache Geode.
   
   In order to streamline the review of the contribution we ask you
   to ensure the following steps have been taken:
   
   ### For all changes:
   - [X] Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?
   
   - [X] Has your PR been rebased against the latest commit within the target branch (typically `develop`)?
   
   - [X] Is your initial contribution a single, squashed commit?
   
   - [X] Does `gradlew build` run cleanly?
   
   - [X] Have you written or updated unit tests to verify your changes?
   
   - [ ] If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under [ASF 2.0](http://www.apache.org/legal/resolved.html#category-a)?
   
   ### Note:
   Please ensure that once the PR is submitted, check Concourse for build issues and
   submit an update to your PR as soon as possible. If you need help, please send an
   email to dev@geode.apache.org.
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


jujoramos merged pull request #5676:
URL: https://github.com/apache/geode/pull/5676


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


Commit 38ed63838f7cdaf7ff2f5089bda3df3b75a4c4c2 in geode's branch refs/heads/develop from Juan José Ramos
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=38ed638 ]

GEODE-8071: Prevent Test Flakiness (#5676)

Different versions of the embedded Jetty server can launch non-daemon
threads, so the fix implies preventing any flakiness by just checking
for the thread we're interested in.

Commit 38ed63838f7cdaf7ff2f5089bda3df3b75a4c4c2 in geode's branch refs/heads/develop from Juan José Ramos
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=38ed638 ]

GEODE-8071: Prevent Test Flakiness (#5676)

Different versions of the embedded Jetty server can launch non-daemon
threads, so the fix implies preventing any flakiness by just checking
for the thread we're interested in.

