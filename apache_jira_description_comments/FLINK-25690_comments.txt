[~trohrmann] as discussed in [FLINK-25674|https://issues.apache.org/jira/browse/FLINK-25674].
Can you assign the ticket to me? 

Done. Thanks for fixing this [~echauchot] :-)

Since the RetryRule is on it's way out does it really make sense to evolve it further?

As a first step the tests that could use it should be migrated to the RetryExtension, which may or not cover this use-case already.

[~chesnay] I did not know that it was on its way out. 
I think we should add deprecation notice to _RetryRule_ and other classes on their way out so that people like me could know that they are using deprecated classes.


[~trohrmann] [~chesnay] That being said I've already done the _RetryRule_ code because I needed it for cassandra flakiness fixes but I can comply to what you think is best guys !

You both mentioned @after methods. So rather than allowing _RetryRule#setExceptionHandler(Runnable)_ you prefer that we make tests author define @after methods and call them before retrials to stay 100% junit standard ?

I checked RetryExtension, it does not supports  this use case but it could be extended very easily by implementing _AfterEachCallback_
I guess you prefer that rather than changing _RetryRule_. So I can do the _RetryExtension_ change and update Cassandra tests to use the new _RetryExtension_. WDYT?

??I did not know that it was on its way out.??

This is due to the jUnit 5 migration.

??I think we should add deprecation notice to RetryRule and other classes on their way out so that people like me could know that they are using deprecated classes.??

We decided against that because it would imply a ton of deprecation warnings for hardly any gain.

??I checked RetryExtension, it does not supports this use case [...]??

Are you sure? It works quite a bit differently than the RetryRule.
I did a small test where I added Before-/AfterEach methods to the {{RetryOnFailureExtensionTest}}, and it does seem to work just fine.


I would currently be in favor of migrating the test to junit5, because that bit is inevitable, while changes to the RetryRule will not benefit us in the long run.
There is of course the issue of this being about a flaky test, so it depends a bit on how much effort it would be.

Thanks [~chesnay] for your answer.

??We decided against that because it would imply a ton of deprecation warnings for hardly any gain??

This makes total sense !

??Are you sure? It works quite a bit differently than the RetryRule [...]??

I did not have enough time to test it properly, I just read its code and I saw that it did not implement _AfterEachCallback_ that is why I though that only _AfterAll_ was supported. But if it works as I need that is perfect! I will test in my use case and keep you posted.

??Changes to the RetryRule will not benefit us in the long run??

I totally agree. I don't plan on changing RetryRule. My plan after your comment was to use RetryExtension instead. I'll test it in my use case and if I miss something I'll add it to RetryExtension, if I miss nothing, then that is all for the best :)

Thanks anyway for the info about Junit 5 migration

[~chesnay] [~trohrmann] I Migrated CassandraITCase to RetryExtension 
- tested it by manually throwing 2 NoHostHavailableException => retrial mechanism works perfectly!
- I also tested after methods to drop the table between retrials and it works perfectly.
- I will have to migrate CassandraITCase to junit 5 to use RetryExtension, I'll do so in [FLINK-25674|https://issues.apache.org/jira/browse/FLINK-25674]

So closing this ticket.

Thanks for the pointers guys !

