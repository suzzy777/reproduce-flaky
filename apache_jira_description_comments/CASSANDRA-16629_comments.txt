[~blerer] [~sumanth.pasupuleti]
Could you please review the changes and let me know if there are any concerns on getting them merged.

[~azotcsit], thanks for the work.
some feedbackâ€¦ 
1. sounds good.
2. only to be applied where the patch already touches. (there shouldn't be files in the patch that only consist of formatting changes)
3. the project's only consensus so far has been to favour assertj (see this [ML thread|https://lists.apache.org/thread.html/rc562ec47578d0ae6f346ba9e3d7469c1cd3f8b521a72ddcb2accc47b%40%3Cdev.cassandra.apache.org%3E]) (i think there was some cross-communication on the slack dev channel [here|https://the-asf.slack.com/archives/CK23JSY2K/p1619212378333000])
4. same as (2)

I'm curious if we want to apply a patch to all branches. it's not much fun on code that's unnecessarily changed between branches when forward-merging. 

[~mck]
thanks for the quick response!

2,4. ok, I've rolled back some changes in a separate [commit|https://github.com/apache/cassandra/pull/982/commits/655036bcc2b10a0133892a0a99f0e83cd3c23651]. I still feel they would be useful and safe, so if you check the commit and find them good to go, please, let me know and I'll bring them back.
3. hmm.. actually that Slack communication was mine. And what I understood is that there is no preference on one library over the other:
{quote}Thats test author dependent; some know different libs more than others.  The main question is how readable your tests are.{quote}
should I migrate tests to assertj? I have no problems with doing that since it is not smth hard or time consuming.


{quote}I'm curious if we want to apply a patch to all branches. it's not much fun on code that's unnecessarily changed between branches when forward-merging.{quote}
I think it is makes sense to apply the code to all branches. I do not expect to see conflicts with these changes, so it should be fairly easy. Anyway, I think I need to wait until the current changes are reviewed/approved and only after that start working on backporting. Here are a few general questions on the process:
5. What branches should I backport these changes to? Should I create separate PRs for every branch? Is there anything specific I should know?


bq. should I migrate tests to assertj?

The tests, and asserts, you add you can choose. Taking onboard the project is leaning towards the precedence of assertj. Generally we don't rewrite existing asserts unless we are editing that code already. (Reviewers are limited on time so we make patches as minimal to the scope as possible.)

bq.  I think I need to wait until the current changes are reviewed/approved and only after that start working on backporting

You are spot on ðŸ˜€

Once you have confirmation on one patch, a patch for each branch is required. You don't need to create the PR, we can view the patch via the github "compare" page, and add comments on the github commit page if that's needed. 

This will be applicable to 2.2, 3.0, 3.11 and trunk.

{quote}should I migrate tests to assertj?{quote}

We had a clear agreement on the mailing list on AssertJ. I do not know how Hamcrest was introduced.
In my opinion we should standardize on AssertJ. Having to adapt to different test frameworks when working on a patch is a bit painful. 


{quote}I do not know how Hamcrest was introduced.
{quote}
Not sure, but most of the {{NodeTool}} tests were Hamcrest-based. That's why originally I converted the rest from AssertJ to Hamcrest. Since now it is clear that AssertJ is preferable, I've converted all tests to AssertJ. Looking forward for review comments.

Thanks for providing a great support!

Our test changes a lot from one version to the next and I do not believe that we should backport such refactoring. I also believe that we should probably commit them in trunk only once 4.0 has been branched to avoid any risk of introducing some flaky tests before we release 4.0 GA. [~mck] What is your opinion ?

Regarding the patch it looks good to me. We just need to rebase it after the branching and run CI.  

[~blerer]

A couple of questions:
 # As far as I know 4.0 has been branched. Is it a good moment to rebase my branch onto trunk?
 # Are non-committers able to run CI? If yes, could you, please, let me know the high-level steps on how to do it.

{quote}1. As far as I know 4.0 has been branched. Is it a good moment to rebase my branch onto trunk?{quote}

Yes, please.

{quote}2. Are non-committers able to run CI? If yes, could you, please, let me know the high-level steps on how to do it.{quote}

I can do it for you for this patch.
[~mck] will be more able to answer to that question than me.

# Done. I rebased and squashed all commits as per #5 of https://cassandra.apache.org/doc/latest/development/patches.html#creating-a-patch.
 # Thanks!

bq. Are non-committers able to run CI? If yes, could you, please, let me know the high-level steps on how to do it.

Unfortunately not on ci-cassandra.apache.org (you need to be a committer to trigger CI runs on patches there).

You can use CircleCI, but you need a paid-for account to run CI reliably there.

I've kicked off your patch on ci-cassandra.apache.org [!https://ci-cassandra.apache.org/job/Cassandra-devbranch/731/badge/icon!|https://ci-cassandra.apache.org/job/Cassandra-devbranch/731/]

CI looks good. The failing test are unrelated.

Committed into trunk at 5fc811210b70889084b2be5a6a3577963fd5f3c4

Thanks [~blerer]!

