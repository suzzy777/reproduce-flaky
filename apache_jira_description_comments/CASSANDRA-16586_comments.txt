The failure is easily reproduced. Aside from the timeout error in the description, I'm also occasionally seeing it fail with the following:

{noformat}
[junit-timeout] Unexpected error in case ALL-ONE with upgraded coordinator and 2 nodes down
[junit-timeout] junit.framework.AssertionFailedError: Unexpected error in case ALL-ONE with upgraded coordinator and 2 nodes down
[junit-timeout]     at org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityTestBase$Tester.test(MixedModeAvailabilityTestBase.java:127)
[junit-timeout]     at org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityTestBase.lambda$testAvailability$2(MixedModeAvailabilityTestBase.java:79)
[junit-timeout]     at org.apache.cassandra.distributed.upgrade.UpgradeTestBase$TestCase.run(UpgradeTestBase.java:187)
[junit-timeout]     at org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityTestBase.testAvailability(MixedModeAvailabilityTestBase.java:81)
[junit-timeout]     at org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityTestBase.testAvailability(MixedModeAvailabilityTestBase.java:52)
[junit-timeout]     at org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityV30Test.testAvailabilityV30ToV4(MixedModeAvailabilityV30Test.java:39)
[junit-timeout]     at org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityTestBase$Tester.maybeFail(MixedModeAvailabilityTestBase.java:150)
[junit-timeout]     at org.apache.cassandra.distributed.upgrade.MixedModeAvailabilityTestBase$Tester.test(MixedModeAvailabilityTestBase.java:113)
{noformat}

As shown in the error in the description,  we're occasionally bumping into coordinator timeouts, which are [set to a smaller value|https://github.com/apache/cassandra/blob/6665fc29b33abcc26aad4cecbfee88225b0a7225/test/distributed/org/apache/cassandra/distributed/upgrade/MixedModeAvailabilityTestBase.java#L64-L65] by the test. I assume they were set lower to make the test timeout faster when we are [expecting a failure|https://github.com/apache/cassandra/blob/6665fc29b33abcc26aad4cecbfee88225b0a7225/test/distributed/org/apache/cassandra/distributed/upgrade/MixedModeAvailabilityTestBase.java#L113]. However, simply raising them then causes the test to occasionally fail in a different way ({{Failure}} instead of {{Timeout}}) if the node shutdown occurs mid-request.

I'm pushing a potential patch that makes sure the coordinator sees the node as down, then expects an {{UnavailableException}}. I'm not sure if/why the {{Timeout}} exception would be essential to this test, but if that is preferred we could look at another technique of inducing the timeout deterministically without making it cause flakiness.

[patch|https://github.com/aholmberg/cassandra/pull/54]
[ci|https://app.circleci.com/pipelines/github/aholmberg/cassandra?branch=CASSANDRA-16586]

CI says I broke the other availability upgrade tests, so sitting on this until I can get back into it.

I ran into trouble getting the shutdown approach working with some of the earlier versions. Instead I pushed a simplified version that
1.) extends the request timeout by a second to get away from false negatives
2.) uses message filtering to effect timeouts to nodes when "down"

test run [here|https://app.circleci.com/pipelines/github/aholmberg/cassandra/250/workflows/c139a296-8b51-4e33-881f-ff811dbec0d3/jobs/2998/parallel-runs/0?filterBy=ALL]

One nit, otherwise LGTM, thanks!
We need second reviewer, maybe [~adelapena] or [~dcapwell] will volunteer? Does anyone of you have a bit of time?

The patch look good to me.

Committed into trunk at 27f1bdee5ecf37eda3dde6ea61a439bdda41ea0a

