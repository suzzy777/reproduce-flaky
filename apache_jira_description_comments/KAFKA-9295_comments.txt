Failed again:

 [https://builds.apache.org/job/kafka-pr-jdk8-scala2.12/2687/testReport/junit/org.apache.kafka.streams.integration/KTableKTableForeignKeyInnerJoinMultiIntegrationTest/shouldInnerJoinMultiPartitionQueryable/]

A bit concerning if it can't process just a single record within a minute...

Investigating

Documenting that I found this test failure in an unrelated PR build after this ticket was resolved.

https://ci-builds.apache.org/job/Kafka/job/kafka-pr/job/PR-10529/4/testReport/org.apache.kafka.streams.integration/KTableKTableForeignKeyInnerJoinMultiIntegrationTest/Build___JDK_15_and_Scala_2_13___shouldInnerJoinMultiPartitionQueryable_2/
{code:java}
java.lang.AssertionError: Did not receive all 1 records from topic output- within 60000 ms,  currently accumulated data is []
Expected: is a value equal to or greater than <1>
     but: <0> was less than <1>
	at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)
	at org.apache.kafka.streams.integration.utils.IntegrationTestUtils.lambda$waitUntilMinKeyValueRecordsReceived$1(IntegrationTestUtils.java:610)
	at org.apache.kafka.test.TestUtils.retryOnExceptionWithTimeout(TestUtils.java:368)
	at org.apache.kafka.test.TestUtils.retryOnExceptionWithTimeout(TestUtils.java:336)
	at org.apache.kafka.streams.integration.utils.IntegrationTestUtils.waitUntilMinKeyValueRecordsReceived(IntegrationTestUtils.java:606)
	at org.apache.kafka.streams.integration.utils.IntegrationTestUtils.waitUntilMinKeyValueRecordsReceived(IntegrationTestUtils.java:579)
	at org.apache.kafka.streams.integration.KTableKTableForeignKeyInnerJoinMultiIntegrationTest.verifyKTableKTableJoin(KTableKTableForeignKeyInnerJoinMultiIntegrationTest.java:203)
	at org.apache.kafka.streams.integration.KTableKTableForeignKeyInnerJoinMultiIntegrationTest.shouldInnerJoinMultiPartitionQueryable(KTableKTableForeignKeyInnerJoinMultiIntegrationTest.java:187){code}

[~cadonna] Hm...github says the commit that kicked off that build was merged 10 hours ago, and the PR to improve this test was also merged 10 hours ago. But based on the line numbers in the stack trace, I think that build did not contain the fix -- line 187 in the test used to be verifyKTableKTableJoin(), but now is just an empty line. So let's leave the ticket resolved but keep an eye out for further failures. 

Still, thanks for reporting this! Fingers crossed that this fix will be sufficient and we won't have to dig any further or mess with the session interval

[~ableegoldman] Makes sense! My bad, I looked at the wrong dates. Thank you for double checking!

Still failing, saw this on both the Java 8 and Java 11 build of a PR:

Stacktrace
java.lang.AssertionError: Application did not reach a RUNNING state for all streams instances. Non-running instances: {org.apache.kafka.streams.KafkaStreams@cce6a1d=REBALANCING, org.apache.kafka.streams.KafkaStreams@45af6187=REBALANCING, org.apache.kafka.streams.KafkaStreams@5d8ba53=REBALANCING}
	at org.junit.Assert.fail(Assert.java:89)
	at org.apache.kafka.streams.integration.utils.IntegrationTestUtils.startApplicationAndWaitUntilRunning(IntegrationTestUtils.java:904)
	at org.apache.kafka.streams.integration.KTableKTableForeignKeyInnerJoinMultiIntegrationTest.verifyKTableKTableJoin(KTableKTableForeignKeyInnerJoinMultiIntegrationTest.java:197)
	at org.apache.kafka.streams.integration.KTableKTableForeignKeyInnerJoinMultiIntegrationTest.shouldInnerJoinMultiPartitionQueryable(KTableKTableForeignKeyInnerJoinMultiIntegrationTest.java:185)


https://ci-builds.apache.org/job/Kafka/job/kafka-pr/job/PR-10573/8/testReport/org.apache.kafka.streams.integration/KTableKTableForeignKeyInnerJoinMultiIntegrationTest/Build___JDK_8_and_Scala_2_12___shouldInnerJoinMultiPartitionQueryable/

It's failing on 
{noformat}
startApplicationAndWaitUntilRunning(kafkaStreamsList, ofSeconds(60));
{noformat}

At this point a session timeout seems unlikely, since [~showuon] observed a Streams instance dropping out on the heartbeat interval only a couple of times even when it failed, and all it has to do here is get to RUNNING once. It doesn't require that all KafkaStreams in the list get to RUNNING and then stay there, so all the instance has to do is start up and go through at least once successful rebalance in that time. There's nothing to restore so the transition to RUNNING should be immediate after the rebalance.

Now technically 60s is a typical timeout for startApplicationAndWaitUntilRunning in the Streams integration tests, but the difference between this and other tests is that most have only one or two KafkaStreams to start up whereas this test has three. They're not started up and waited on sequentially so that shouldn't _really_ matter that much, but still it might just be that a longer timeout should be used in this case. I'm open to other theories however

Also note that we should soon have a larger default session interval, so once Jason's KIP for that has been implemented we'll be able to get that improvement for free. Even if we think the session interval is the problem with this test, it probably makes sense to just wait for that KIP than to hardcode in some special value. If it starts to fail very frequently we can reconsider, but I haven't observed it doing so since the last fix was merged

_a longer timeout should be used in this case._

Agree!

Failed again, same stacktrace. I take back what I said in the earlier comment, it is actually failing semi-frequently now

https://ci-builds.apache.org/job/Kafka/job/kafka-pr/job/PR-10608/2/testReport/junit/org.apache.kafka.streams.integration/KTableKTableForeignKeyInnerJoinMultiIntegrationTest/Build___JDK_15_and_Scala_2_13___shouldInnerJoinMultiPartitionQueryable_2/

Failed multiple times for a PR (https://ci-builds.apache.org/job/Kafka/job/kafka-pr/job/PR-10568/5/testReport/)
{code:java}
java.lang.AssertionError: Application did not reach a RUNNING state for all streams instances. Non-running instances: {org.apache.kafka.streams.KafkaStreams@9cbb96e=REBALANCING, org.apache.kafka.streams.KafkaStreams@2e11b5=REBALANCING}
	at org.junit.Assert.fail(Assert.java:89)
	at org.apache.kafka.streams.integration.utils.IntegrationTestUtils.startApplicationAndWaitUntilRunning(IntegrationTestUtils.java:904)
	at org.apache.kafka.streams.integration.KTableKTableForeignKeyInnerJoinMultiIntegrationTest.verifyKTableKTableJoin(KTableKTableForeignKeyInnerJoinMultiIntegrationTest.java:197)
	at org.apache.kafka.streams.integration.KTableKTableForeignKeyInnerJoinMultiIntegrationTest.shouldInnerJoinMultiPartitionQueryable(KTableKTableForeignKeyInnerJoinMultiIntegrationTest.java:185) {code}
 

[~showuon] are you interested in submitting another PR to increase the timeout of startApplicationAndWaitUntilRunning? If not, or of you can't get to it just yet, you can unassign yourself from the ticket in case someone else is able to pick this up before you have time :) 

Let me create another PR for it later.

PR: [https://github.com/apache/kafka/pull/10635]

 

Merged about 9:58pm PST on May 5th, so please disregard any test failures on builds kicked off prior to that time (and raise any new failures by reopening the ticket)

Unfortunately it seems to still be failing :/ 

[https://ci-builds.apache.org/job/Kafka/job/kafka-pr/job/PR-6592/14/testReport/]

Most of the logs were truncated but from what I could tell, just before it shut down it had just completed a rebalance and had triggered a followup rebalance for some reason. I'm guessing it was a cooperative rebalance since none of the other kinds of followup rebalances should apply here, and if a member had dropped out and rejoined then a cooperative rebalance would not be unexpected.

[~showuon] Maybe it is time to try bumping up the session timeout a bit (maybe 20s?)

[~ableegoldman], sure, I'll work on it. Also, I was looking into this test days ago and have some finding. I'll update here next Monday. Sorry, on vacation now :)

Seen it in [https://ci-builds.apache.org/job/Kafka/job/kafka-pr/job/PR-10758/1/testReport/org.apache.kafka.streams.integration/KTableKTableForeignKeyInnerJoinMultiIntegrationTest/Build___JDK_15_and_Scala_2_13___shouldInnerJoinMultiPartitionQueryable/]

 

Guess there is still something else going on here yet. At this point I think we can mostly rule out fiddling with the configs but I don't have any guesses on where to look next. It would be nice if we could get real logs from a run that reproduced this, but unfortunately all the actual Streams content is truncated.

[~showuon] maybe you can look into turning the zookeeper and kafka logs down to WARN or even ERROR so that we have some hope of viewing the relevant parts of the logs? I tried to do that a while back but clearly it didn't work, and I didn't have time to revisit it

On it!

[~showuon] [~ableegoldman] is this reopened issue a blocker for 3.0? I see all 3 known PRs are merged but this has been reopened. I'd suggest let's postpone if we can't get in before code freeze. 

I see it's a flaky test (missed this somehow). Have you noticed it still failing? Any chance we can investigate before code freeze for 3.0? Thanks

[~kkonstantine] Luke was able to figure out the likely root cause and it actually does seem to be a potentially severe bug. See https://issues.apache.org/jira/browse/KAFKA-13008

Thanks for the update [~ableegoldman]. Based on that I've added 3.0 as a target fix version for https://issues.apache.org/jira/browse/KAFKA-13008 and have marked that ticket as blocker. I'll be looking for any updates on that issue or its severity. 

[~showuon] I've merged KAFKA-13008 for 3.0, please feel free to proceed on this one. Thanks!

Close this ticket since the root cause issue is fixed. Thank you.

