I think it might be related to the following commit (but I could be wrong): CASSANDRA-17056

This return {{null}} for some of the cases which leads to the {{NullPointerException}}
StatsComponent#serializationHeader(org.apache.cassandra.schema.TableMetadata)

{code}
[junit-timeout] ERROR [Reference-Reaper] 2023-08-10 14:33:45,219 Ref.java:240 - LEAK DETECTED: a reference (class org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier@1954732867:/tmp/10654893319199153835/SSTableLoaderTest/Standard2-e6b6fab0378a11eebf94c5a5ea4e0fa0/nc-14-big) to class org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier@1954732867:/tmp/10654893319199153835/SSTableLoaderTest/Standard2-e6b6fab0378a11eebf94c5a5ea4e0fa0/nc-14-big was not released before the reference was garbage collected
[junit-timeout] ERROR [Reference-Reaper] 2023-08-10 14:33:45,220 Ref.java:280 - Allocate trace class org.apache.cassandra.io.sstable.format.SSTableReader$InstanceTidier@1954732867:/tmp/10654893319199153835/SSTableLoaderTest/Standard2-e6b6fab0378a11eebf94c5a5ea4e0fa0/nc-14-big:
[junit-timeout] Thread[main,5,main]
[junit-timeout]         at java.base/java.lang.Thread.getStackTrace(Thread.java:1610)
[junit-timeout]         at org.apache.cassandra.utils.concurrent.Ref$Debug.<init>(Ref.java:270)
[junit-timeout]         at org.apache.cassandra.utils.concurrent.Ref$State.<init>(Ref.java:191)
[junit-timeout]         at org.apache.cassandra.utils.concurrent.Ref.<init>(Ref.java:113)
[junit-timeout]         at org.apache.cassandra.io.sstable.format.SSTableReader.<init>(SSTableReader.java:467)
[junit-timeout]         at org.apache.cassandra.io.sstable.format.SSTableReaderWithFilter.<init>(SSTableReaderWithFilter.java:43)
[junit-timeout]         at org.apache.cassandra.io.sstable.format.big.BigTableReader.<init>(BigTableReader.java:100)
[junit-timeout]         at org.apache.cassandra.io.sstable.format.big.BigTableReader$Builder.buildInternal(BigTableReader.java:742)
[junit-timeout]         at org.apache.cassandra.io.sstable.format.big.BigTableReader$Builder.buildInternal(BigTableReader.java:693)
[junit-timeout]         at org.apache.cassandra.io.sstable.format.SSTableReader$Builder.build(SSTableReader.java:1890)
[junit-timeout]         at org.apache.cassandra.io.sstable.format.SSTableReaderLoadingBuilder.build(SSTableReaderLoadingBuilder.java:97)
[junit-timeout]         at org.apache.cassandra.io.sstable.format.SSTableReader.open(SSTableReader.java:397)
[junit-timeout]         at org.apache.cassandra.io.sstable.format.SSTableReader.openForBatch(SSTableReader.java:373)
[junit-timeout]         at org.apache.cassandra.io.sstable.SSTableLoader.lambda$openSSTables$0(SSTableLoader.java:152)
[junit-timeout]         at org.apache.cassandra.db.lifecycle.LogAwareFileLister.lambda$innerList$2(LogAwareFileLister.java:99)
[junit-timeout]         at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:178)
[junit-timeout]         at java.base/java.util.TreeMap$EntrySpliterator.forEachRemaining(TreeMap.java:3287)
[junit-timeout]         at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
[junit-timeout]         at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
[junit-timeout]         at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)
[junit-timeout]         at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
[junit-timeout]         at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)
[junit-timeout]         at org.apache.cassandra.db.lifecycle.LogAwareFileLister.innerList(LogAwareFileLister.java:101)
[junit-timeout]         at org.apache.cassandra.db.lifecycle.LogAwareFileLister.list(LogAwareFileLister.java:73)
[junit-timeout]         at org.apache.cassandra.db.lifecycle.LifecycleTransaction.getFiles(LifecycleTransaction.java:626)
[junit-timeout]         at org.apache.cassandra.io.sstable.SSTableLoader.openSSTables(SSTableLoader.java:103)
[junit-timeout]         at org.apache.cassandra.io.sstable.SSTableLoader.stream(SSTableLoader.java:202)
[junit-timeout]         at org.apache.cassandra.io.sstable.SSTableLoaderTest.testLoadingIncompleteSSTable(SSTableLoaderTest.java:225)
[junit-timeout]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[junit-timeout]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
[junit-timeout]         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[junit-timeout]         at java.base/java.lang.reflect.Method.invoke(Method.java:568)
[junit-timeout]         at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
[junit-timeout]         at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
[junit-timeout]         at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
[junit-timeout]         at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
[junit-timeout]         at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
[junit-timeout]         at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
[junit-timeout]         at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
[junit-timeout]         at org.junit.rules.RunRules.evaluate(RunRules.java:20)
[junit-timeout]         at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
[junit-timeout]         at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
[junit-timeout]         at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
[junit-timeout]         at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
[junit-timeout]         at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
[junit-timeout]         at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
[junit-timeout]         at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
[junit-timeout]         at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
[junit-timeout]         at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
[junit-timeout]         at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
[junit-timeout]         at junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:38)
[junit-timeout]         at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:534)
[junit-timeout]         at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1196)
[junit-timeout]         at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:1041)
{code}

There are a couple of unrelated exceptions in the logs. The first is when the resources are not released properly after the test, so they throw an exception - in other tests the {{ColumnFamilyStore#truncateBlocking}} is called to release the resources, but in this particular test it is not. The second one is the exception mentioned in the issue description - the above error appears in the log at the same time as the {{NullPointerException}} is thrown.

Here:
https://app.circleci.com/pipelines/github/Mmuzaf/cassandra/290/workflows/09943d9e-5026-4fbb-8c79-d3208dab87a2/jobs/20389/parallel-runs/5

btw:

{{\{KEYSPACE1, CF_SNAPSHOTS}}} is missed in the cleanup as well.


Seen again today:

https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/2493/workflows/59762ffe-b907-42f3-b6c1-558041f737c0/jobs/38779/tests

[~mmuzaf] , I see a PR attached to the ticket. Is this a fix? What is the status of this one? Do we need [~jlewandowski] to look at it? (I saw CASSANDRA-17056 mentioned)

[~e.dimitrova] This was a draft PR to reproduce the issue, I've spent a few hours trying to fix it, but didn't find a good solution. More time needs to be invested into this issue. I've removed the PR to avoid any confusion.

I'll take a look on this

So far, I don't understand that test fully, some statements and comments seem misleading to me, in particular:

{code:java}
        ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD2);
        Util.flush(cfs); // wait for sstables to be on disk else we won't be able to stream them
{code}

Since we use an external writer, it has nothing to do with flushing; I've checked - the number of live sstables before and after flushing is zero. It is expected and contradicts the purpose of flushing (as well as the comment). The writer saves sstables independently and asynchronously in a loop when the buffer gets exhausted. 

Next:


{code:java}
        //writer is still open so loader should not load anything
        SSTableLoader loader = new SSTableLoader(dataDir, new TestClient(), new OutputHandler.SystemOutput(false, false));
        loader.stream(Collections.emptySet(), completionStreamListener(latch)).get();

        List<FilteredPartition> partitions = Util.getAll(Util.cmd(cfs).build());

        assertTrue(partitions.size() > 0 && partitions.size() < NB_PARTITIONS);
{code}

The comment actually contradicts the assertion. We expect to load something, but not everything.

Now, what may be causing the problem? {{SSTableLoader}} does not require the {{STATS}} component to be present to consider a file to load. This works the same way in pre-17056 as in post-17056. This may be a problem in both versions because we can only load an sstable with {{STATS}} component. SSTables are stored asynchronously in a separate thread in {{SSTableSimpleUnsortedWriter.DiskWriter}}. {{DATA}} and {{PRIMARY_INDEX}} components are stored first, then {{STATS}} component is stored. The problem looks as is to be caused by trying to load an sstable for which {{DATA}} and {{PRIMARY_INDEX}} are saved, but {{STATS}} still needs to be saved. So, it is a race that explains this failure's flaky nature. 

I'm planning to investigate the transactions to check if SSTableLoader shall reject the sstables with unfinished components.

It is difficult to reproduce when I added some extra logging... [https://app.circleci.com/pipelines/github/jacek-lewandowski/cassandra?branch=CASSANDRA-18737,] 1500 iterations total already and nothing...

{quote}This was a draft PR to reproduce the issue
{quote}
[~mmuzaf] , do you mind sharing your code again to reproduce the issue?

[~e.dimitrova] it is not like that - I was able to reproduce that, it occured to me in some other CI runs. But once I've added some extra logging, I cannot reproduce it any longer...

Oh I see what you mean now, [~jlewandowski] . So there is some timing component

Ahhh.... I think I've got it!

When we build an {{SSTableWriter}} using new builders, the empty files for index and data components get create in the constructor, as we create partition writer. It happens even before we start a transaction, so at that moment, we have two sstable files and no transaction log. Whatever scans that directory at that moment will that sstable as completed. I think this is what we are encountering in that test, here is an example - stopped at the constructor of sstable 9:

 
{noformat}
jlewandowski@deauville:~/dev/cassandra/wip[CASSANDRA-18737][j11]$ ls /tmp/15704397017644002949/SSTableLoaderTest/Standard2-65d925a0532111eea827adf63f6cb5
be/ -l

total 264

-rw-rw-r-- 1 jlewandowski jlewandowski    575 wrz 14 19:11 nc-8-big-CompressionInfo.db

-rw-rw-r-- 1 jlewandowski jlewandowski 231990 wrz 14 19:11 nc-8-big-Data.db

-rw-rw-r-- 1 jlewandowski jlewandowski      9 wrz 14 19:11 nc-8-big-Digest.crc32

-rw-rw-r-- 1 jlewandowski jlewandowski     16 wrz 14 19:11 nc-8-big-Filter.db

-rw-rw-r-- 1 jlewandowski jlewandowski   5845 wrz 14 19:11 nc-8-big-Index.db

-rw-rw-r-- 1 jlewandowski jlewandowski   6327 wrz 14 19:11 nc-8-big-Statistics.db

-rw-rw-r-- 1 jlewandowski jlewandowski    111 wrz 14 19:11 nc-8-big-Summary.db

-rw-rw-r-- 1 jlewandowski jlewandowski     92 wrz 14 19:11 nc-8-big-TOC.txt

-rw-rw-r-- 1 jlewandowski jlewandowski      0 wrz 14 19:11 nc-9-big-Data.db

-rw-rw-r-- 1 jlewandowski jlewandowski      0 wrz 14 19:11 nc-9-big-Index.db


 {noformat}

That knowledge allowed me to reproduce the issue reliably with each run... it is enough to put a thread into sleep in {{SSTableWriter}} constructor, right before {{lifecycleNewTracker.trackNew(this);}}

So my plan is to:
 # Fix the issue,
 # Add an assertion that no files exists when we are about to create a transaction

[~mmuzaf]  - we should investigate those leaks in a separate ticket probably - like induce a failure around the same place and make sure that everything collapses properly.

Tests on trunk passed, running tests on 5.0

[~jlewandowski] , in the post-commit run, we have all these failures both for 5.0 and trunk. 

Can you please take a look? I guess they are related to this ticket?

[https://ci-cassandra.apache.org/job/Cassandra-5.0/46/testReport/org.apache.cassandra.db.compaction/LongCompactionsTest/]

https://ci-cassandra.apache.org/job/Cassandra-trunk/1722/testReport/junit/org.apache.cassandra.db.compaction/LongCompactionsTest/

[~smiklosovic] has already created a ticket CASSANDRA-18884

