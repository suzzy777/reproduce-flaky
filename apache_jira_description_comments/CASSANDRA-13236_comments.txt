Can you share the schema and query?

I'm not sure which queries causes this atm. Is there a way to find out from enabling logging or something else?

CREATE KEYSPACE keyspace WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '3'}  AND durable_writes = true;

CREATE TABLE keyspace.public_uri_share (
    uri text PRIMARY KEY,
    collection__username__type__id text
) WITH bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';

CREATE TABLE keyspace.photo_collections (
    photo__username__id text,
    collection__username__type__id text,
    collection_photo_order bigint,
    is_cover_photo boolean,
    PRIMARY KEY (photo__username__id, collection__username__type__id)
) WITH CLUSTERING ORDER BY (collection__username__type__id ASC)
    AND bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';

CREATE TABLE keyspace.comments_counts (
    collection__username__type__id text,
    collection_photo_order bigint,
    counter_value counter,
    PRIMARY KEY (collection__username__type__id, collection_photo_order)
) WITH CLUSTERING ORDER BY (collection_photo_order ASC)
    AND bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';

CREATE TABLE keyspace.comments (
    collection__username__type__id text,
    collection_photo_order bigint,
    comment_id_order bigint,
    comment text,
    commenter_username text,
    PRIMARY KEY (collection__username__type__id, collection_photo_order, comment_id_order)
) WITH CLUSTERING ORDER BY (collection_photo_order ASC, comment_id_order ASC)
    AND bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';

CREATE TABLE keyspace.photos (
    username text,
    id_shard int,
    id text,
    json text,
    main_collection__username__type__id text,
    u_id text,
    PRIMARY KEY ((username, id_shard), id)
) WITH CLUSTERING ORDER BY (id ASC)
    AND bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';

CREATE TABLE keyspace.collection_types (
    collection_type int PRIMARY KEY,
    name text
) WITH bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';

CREATE TABLE keyspace.collections (
    username text,
    collection_type int,
    collection_id bigint,
    collection_data blob,
    comments_lazy bigint,
    comments_lazy_updated bigint,
    json text,
    last_modified bigint,
    max_exif_timestamp bigint,
    min_exif_timestamp bigint,
    share_date bigint,
    share_default_granted_authorization text,
    share_non_public_share boolean,
    share_remove_geo_data boolean,
    share_secret text,
    share_uri text,
    subscribed_collection_started_date bigint,
    subscribed_collection_username__type__id text,
    type_last_modified bigint static,
    PRIMARY KEY ((username, collection_type), collection_id)
) WITH CLUSTERING ORDER BY (collection_id ASC)
    AND bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';

CREATE TABLE keyspace.collection_photos_order (
    username text,
    collection_id bigint,
    collection_photo_order bigint,
    comments_lazy bigint,
    comments_lazy_updated bigint,
    last_modified bigint static,
    likes_lazy bigint,
    likes_lazy_updated bigint,
    photo__username__id text,
    photo_metadata blob,
    PRIMARY KEY ((username, collection_id), collection_photo_order)
) WITH CLUSTERING ORDER BY (collection_photo_order DESC)
    AND bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';

CREATE TABLE keyspace.main_photos (
    id text PRIMARY KEY,
    json text,
    main_collection__username__type__id text,
    u_id text,
    username text
) WITH bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';

CREATE TABLE keyspace.collection_titles (
    username text,
    collection_type int,
    collection_title text,
    collection__username__type__id text,
    PRIMARY KEY ((username, collection_type), collection_title)
) WITH CLUSTERING ORDER BY (collection_title ASC)
    AND bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';

CREATE TABLE keyspace.account_info (
    username text PRIMARY KEY,
    activated boolean,
    import_state int,
    last_read_accessed bigint,
    last_write_accessed bigint,
    locked_for_read boolean,
    locked_for_write boolean,
    u_id text
) WITH bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';

CREATE TABLE keyspace.likes_counter (
    id_a text,
    id_b text,
    counter_value counter,
    PRIMARY KEY (id_a, id_b)
) WITH CLUSTERING ORDER BY (id_b ASC)
    AND bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';

CREATE TABLE keyspace.collection_subscribing_usernames (
    collection__username__type__id text,
    subscribing_username text,
    granted_authorization text,
    subscription_start bigint,
    PRIMARY KEY (collection__username__type__id, subscribing_username)
) WITH CLUSTERING ORDER BY (subscribing_username ASC)
    AND bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';

CREATE TABLE keyspace.collection_user_likes (
    id_a text,
    id_b text,
    id_c text,
    PRIMARY KEY (id_a, id_b, id_c)
) WITH CLUSTERING ORDER BY (id_b ASC, id_c ASC)
    AND bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';

CREATE TABLE keyspace.likes (
    id_a text,
    id_b text,
    PRIMARY KEY (id_a, id_b)
) WITH CLUSTERING ORDER BY (id_b ASC)
    AND bloom_filter_fp_chance = 0.01
    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}
    AND comment = ''
    AND compaction = {'class': 'org.apache.cassandra.db.compaction.SizeTieredCompactionStrategy', 'max_threshold': '32', 'min_threshold': '4'}
    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}
    AND crc_check_chance = 1.0
    AND dclocal_read_repair_chance = 0.1
    AND default_time_to_live = 0
    AND gc_grace_seconds = 864000
    AND max_index_interval = 2048
    AND memtable_flush_period_in_ms = 0
    AND min_index_interval = 128
    AND read_repair_chance = 0.0
    AND speculative_retry = '99PERCENTILE';


The stack trace above indicates a select statement is happening. Is this occurring on "every" request, or only infrequently (as in a few times a minute or less)? Does this happen on all nodes, or a subset? Also, is the cluster completely transitioned to 3.0, or are you in middle of upgrading?

As far as logging goes, I'm not sure we have a way to dump error-inducing statements.

We started the upgrade process and got that error repeatedly when the server came back up. We found another similar ticket CASSANDRA-12088, which again referred to CASSANDRA-12582. Atm we've upgraded all nodes to 3.0.10 and are in the process of running upgradesstables on them.
The error is still occuring on all nodes, including the ones which have finished the upgradesstables process.

Is the exception always/only about the "Corrupt flags value for unfiltered partition (isStatic flag set): 160"?

yes

[~ifesdjeen] or [~Stefania] any ideas what might be going here? It seems to be failing at {{UnfilteredSerializer#deserialize()}}, where it checks the extended flags to see if the row is static (apparently the flags indicate the row is static).

as the upgradesstables process is running we're seeing a change (a bit too soon to conclude maybe). For instance:

cqlsh> SELECT * FROM collections WHERE username = 'redacted' AND collection_type in(0,1,2,3,4,5,6,7);
ServerError: java.io.IOError: java.io.IOException: Corrupt flags value for unfiltered partition (isStatic flag set): 160

Its failing there, but sometimes it actually returns data. So maybe the problem is related to one or more of the replicated data sets not having completed the upgradesstables for that specific table yet?

My guess is that either the sstable(s) are corrupt, or it's incorrectly trying to read a static row as a regular row, like for CASSANDRA-12582. If you don't have too many sstables, you could try to reproduce it with {{tools/bin/sstabledump}}. If you can reproduce it and can share the sstable with the problem, then we should be able to debug what is going on.

+1 on what [~Stefania] said.

Sometimes it's also useful to compare the outputs from the old and new sstables, might be helpful to understand how to fix the upgrade path.

If you can't show the sstables, you could also try hex-dumping the part of buffer on the exception (with {{ByteBufferUtil#bytesAsHex}}), this way you can understand if the sstable is completely off, or it's just this single byte is written incorrectly. Sometimes the offsets might be wrong, which leads into reader jumping and starting reading from the wrong point in the sstable. 

Likely a dupe of CASSANDRA-12088 , marking as related. 

How do I go about comparing the tables? I've run upgradesstables on every
node now, but I still have snapshops from before the upgrade.

[~jjirsa] Yes it might be. We found a change in the scema for one of the tables with 2 deleted static columns from back in april. However the query i mentioned earlier, was not reading from that table.

The error is completely gone after upgradesstables finished on all nodes.

[~ingard] - do you recall if your errors occurred on a cluster that started out as 2.0 and was upgraded 2.0 -> 2.2 -> 3.0 ? 



The error is being thrown when the coordinator deserialises the response from a replica (which may actually be itself) that is reading an old format sstable. The bug is in the serialisation of the replica response which does a double read of the static row, first as the static row, then incorrectly as the partition's regular row. This only affects tables with column indexes, so doesn't repro with narrow partitions. With support for pre-3.0 sstables going away in 4.0, the problem only affects 3.0 & 3.x.
 
I've pushed 3.0 & 3.11 branches and added a dtest to catch this scenario [here|https://github.com/riptano/cassandra-dtest/pull/1469], but I need to get up to speed on the new CI workflows, especially running dtests with custom a repo/branch
||branch||
|[13236-3.0|https://github.com/beobal/cassandra/tree/13236-3.0]|
|[13236-3.11|https://github.com/beobal/cassandra/tree/13236-3.11]|

Queued you up as builds #44 and #45 in dtests here: https://builds.apache.org/view/A-D/view/Cassandra/job/Cassandra-devbranch-dtest/

Unit tests you can do on your own by linking your github account with circleci.com 


[~beobal] - Dtests have completed. I'm copying the output below because ASF jenkins doesn't keep history forever.

#44 (3.0) shows 14 failures: https://builds.apache.org/view/A-D/view/Cassandra/job/Cassandra-devbranch-dtest/44/

{quote}
 auth_test.TestAuth.system_auth_ks_is_alterable_test (Failed 19 times in the last 30 runs. Flakiness: 65%, Stability: 36%)	2 min 4 sec	4
 bootstrap_test.TestBootstrap.resumable_bootstrap_test (Failed 1 times in the last 10 runs. Flakiness: 11%, Stability: 90%)	2 min 31 sec	1
 bootstrap_test.TestBootstrap.simultaneous_bootstrap_test (Failed 26 times in the last 30 runs. Flakiness: 27%, Stability: 13%)	3 min 15 sec	7
 consistency_test.TestConsistency.short_read_test (Failed 3 times in the last 27 runs. Flakiness: 11%, Stability: 88%)	13 min	1
 consistency_test.TestConsistency.short_read_test (Failed 3 times in the last 27 runs. Flakiness: 11%, Stability: 88%)	14 min	1
 hintedhandoff_test.TestHintedHandoffConfig.hintedhandoff_dc_disabled_test (Failed 3 times in the last 10 runs. Flakiness: 44%, Stability: 70%)	1 min 30 sec	1
 hintedhandoff_test.TestHintedHandoffConfig.hintedhandoff_dc_reenabled_test (Failed 5 times in the last 13 runs. Flakiness: 58%, Stability: 61%)	1 min 51 sec	1
 hintedhandoff_test.TestHintedHandoffConfig.hintedhandoff_disabled_test (Failed 5 times in the last 13 runs. Flakiness: 58%, Stability: 61%)	1 min 36 sec	1
 hintedhandoff_test.TestHintedHandoffConfig.hintedhandoff_enabled_test (Failed 5 times in the last 13 runs. Flakiness: 58%, Stability: 61%)	1 min 34 sec	1
 paxos_tests.TestPaxos.contention_test_many_threads (Failed 9 times in the last 30 runs. Flakiness: 44%, Stability: 70%)	3 min 15 sec	1
 repair_tests.incremental_repair_test.TestIncRepair.multiple_full_repairs_lcs_test (Failed 3 times in the last 30 runs. Flakiness: 17%, Stability: 90%)	57 sec	1
 repair_tests.incremental_repair_test.TestIncRepair.multiple_full_repairs_lcs_test (Failed 3 times in the last 30 runs. Flakiness: 17%, Stability: 90%)	58 sec	1
 repair_tests.repair_test.TestRepair.dc_parallel_repair_test (Failed 2 times in the last 13 runs. Flakiness: 25%, Stability: 84%)	2 min 2 sec	1
 repair_tests.repair_test.TestRepair.dc_repair_test (Failed 3 times in the last 30 runs. Flakiness: 17%, Stability: 90%)	2 min 3 sec	1
{quote}


#45 (3.11) shows 7 https://builds.apache.org/view/A-D/view/Cassandra/job/Cassandra-devbranch-dtest/45/testReport/

{quote}
 bootstrap_test.TestBootstrap.simultaneous_bootstrap_test (Failed 26 times in the last 30 runs. Flakiness: 24%, Stability: 13%)	3 min 19 sec	8
 cqlsh_tests.cqlsh_copy_tests.CqlshCopyTest.test_bulk_round_trip_with_timeouts (Failed 2 times in the last 30 runs. Flakiness: 10%, Stability: 93%)	2 min 57 sec	1
 hintedhandoff_test.TestHintedHandoffConfig.hintedhandoff_dc_disabled_test (Failed 4 times in the last 11 runs. Flakiness: 40%, Stability: 63%)	2 min 34 sec	2
 hintedhandoff_test.TestHintedHandoffConfig.hintedhandoff_dc_disabled_test (Failed 4 times in the last 11 runs. Flakiness: 40%, Stability: 63%)	2 min 34 sec	2
 replace_address_test.TestReplaceAddress.fail_without_replace_test (Failed 4 times in the last 10 runs. Flakiness: 33%, Stability: 60%)	3 min 29 sec	2
 topology_test.TestTopology.size_estimates_multidc_test (Failed 23 times in the last 30 runs. Flakiness: 41%, Stability: 23%)	2 min 8 sec	1
 topology_test.TestTopology.size_estimates_multidc_test (Failed 23 times in the last 30 runs. Flakiness: 41%, Stability: 23%)	2 min 11 sec	1
{quote}

I see [an upgrade dtest|https://github.com/beobal/cassandra-dtest/commit/923b8d8d4f6738ac1afbab9221e7ec67cad09bf1] for this issue - feel that's sufficient, or were you planning on adding a unit test? 

Patch looks good to me. I don't see any indication that any of the dtest failures are related to this patch (they all seem reasonably flakey on their own, except resumable bootstrap test, which seems to have completed a bootstrap while the dtest thought it would still be in progress).

+1



Thanks, committed to 3.0 in {{415d06b1da7062c48e735c1c20ded031fa0349d2}} and merged to 3.11 & trunk (with {{--s ours}} in the latter case)

