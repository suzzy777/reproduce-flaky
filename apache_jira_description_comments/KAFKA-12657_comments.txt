https://ci-builds.apache.org/job/Kafka/job/kafka-pr/job/PR-10639/1/testReport/org.apache.kafka.connect.integration/BlockingConnectorTest/Build___JDK_15_and_Scala_2_13___testWorkerRestartWithBlockInConnectorStop/

{code:java}
org.opentest4j.AssertionFailedError: Condition not met within timeout 60000. Worker did not complete startup in time ==> expected: <true> but was: <false>
{code}

https://github.com/apache/kafka/pull/10810/checks?check_run_id=2780356245

I've reviewed the test runs and managed to reproduce locally by invoking {{{}./gradlew :connect:runtime:integrationTest{}}}. It appears that the issue is environmental; every failure occurs because some condition isn't met in time, and oftentimes, that condition is simply starting an embedded Connect worker at the beginning of the test.

I was able to achieve a completely green run by adding {{-PmaxParallelForks=5}} to my test run, which suggests that reducing the number of active test cases (or even just running threads in general) would alleviate the issue. Unfortunately, it looks like our Jenkinsfile [already sets that value even lower|https://github.com/apache/kafka/blob/85cfa70f59162d3b7ae23c55bb3f3fe97e56ba80/Jenkinsfile#L40] to just 2.

[~mjsax] [~cadonna] do you have any details about the CI architecture these tests are run on? Are the Jenkins nodes that carry out these tests shared concurrently by different Jenkins jobs/stages? How many cores are available on them? And, as a sanity check, are we still using the project's {{Jenkinsfile}} to run these tests (and set {{{}-PmaxParallelForks=2{}}})?

I do not know the specifics of the build environment and currently I do not know where to look that up. Anyways, I have the feeling that the build environment is quite slower than a local machine. Regarding the Jenkinsfile, yes, we still use the Jenkinsfile according to Jenkins. 

Can we do something in the test that might alleviate the issue? Would it make sense to simply increase the timeouts or maybe something more elaborate?   

Giving it a shot with [https://github.com/apache/kafka/pull/12191|https://github.com/apache/kafka/pull/12191]. I wish there were a way to reduce parallelism with our tests since that seems to be the root cause here, and (at least with my rudimentary laptop testing), it may actually decrease the time for a complete test run. But for now, we can try bumping timeouts and see if that stops the bleeding.

