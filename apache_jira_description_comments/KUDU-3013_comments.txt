Thanks for the detailed analysis; this test has been flaky for some time. A couple thoughts on how we might fix it:
# We could stop the tablet by calling {{TabletReplica::Stop}} instead of {{Tablet::Stop}}. This is a heavier-weight stop operation which actually calls {{Tablet::Shutdown}}, but also waits for all in-flight transactions to finish, so there won't be any danger of a transaction applying concurrently with the tablet stopping.
# We may be able to adjust {{Tablet::Stop}} to be safer. One option is to call {{Mvcc::Close}} with the tablet's state_lock_ held, but I'm always nervous about holding multiple locks if we don't strictly need to (as it increases the chance of a deadlock). Another option is to call {{Mvcc::Close}} before tinkering with the tablet's state, so that {{MvccManager::AbortTransaction}} does the right thing when MVCC is closed. From a quick glance over the MVCC code I _think_ in-flight transactions would handle this gracefully, but I'm not sure.

[~awong] I think you originally added this test (and the associated stopped states); could you take a look at Lifu's analysis and provide your thoughts on whether the race is test-only or real, and how we might address it?

Sorry this slipped through my notifications. [~helifu] thanks for your analysis! I think this may be a real issue since disk-failure-handling code will call {{Tablet::Stop()}}, not {{TabletReplica::Stop()}} (see {{TabletReplica::MakeUnavailable()}} which gets called by {{TSTabletManager::FailTabletAndScheduleShutdown()}}.

{quote}
Another option is to call Mvcc::Close before tinkering with the tablet's state, so that MvccManager::AbortTransaction does the right thing when MVCC is closed. From a quick glance over the MVCC code I think in-flight transactions would handle this gracefully, but I'm not sure.
{quote}

I _would_ like this approach, but I'm not sure that it's safe. Op failures will generally lead to checks against the tablet's state, not the MVCC state. That would mean we could end up aborting a transaction due to MVCC being closed, but because we haven't locked or changed the tablet's state, callers of the {{apply}} would see a failure while the tablet isn't closed. So, while it's somewhat nerve-wracking, I would consider calling {{Mvcc::Close()}} under the tablet's lock. I'll ponder this some more and try putting up a fix.

