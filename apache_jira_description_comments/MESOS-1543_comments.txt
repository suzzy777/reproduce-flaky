Thanks for reporting Vinod!

Looks like the master is still in recovering when the slave/scheduler tries to reregister with it. So the master drops the AuthenticateMessage.

And since the clock is paused, the slave doesn't try to reregistration.

The solution I can think is to make sure the master is already recovered before the slave tries to reregister with it.

Any advice? Thanks!




Update:

I am going to wait on FUTURE_DISPATCH of master::_recover();
Then do a detector->appoint();

Hope that can help.

Yup. Thats the same conclusion that I came to regarding the bug :)

Regarding the solution, I havent thought it through but for one we can definitely bring the Clock::pause() below the first 2 AWAITS. That will alleviate some of the problems. I'll take a look once you send the patch to confirm it works ok. Also, make sure it run the test a few times (1000) to make sure you didn't miss anything.

Bad news:
I failed to catch the _recover via FUTURE_DISPATCH, I know although even we are in the entry point of _recover, it doesn't mean the master has finished recovery, but it can alleviate the problem a lot.

I created a review request:
https://reviews.apache.org/r/23001/

temporarily disabled the test for now. this is causing flaky tests.

[~Yifan] do you have time to work on this or do you want me to take over?

[~vinodkone] I can work on this now.
I will try to put the pause bellow the 2 AWAITS. Hope that can alleviate the problem.
Sorry for the delay.

Wait. I don't think that will help...
If the master is still in recovery when the slave and the framework try to register, then the slave will fail to register for the first time, and wait for some while, then do a second registration, but by the time the slave successfully registered, the framework will have already sent out a second registeration message, and will get registered too, which is not we want...

I came up with another idea. I will try to stop the framework after the master stops, then start it after the slave get registered.
I am going to leave for a while. Will submit the new patch in the evening.

Failed to do that.. when the scheduler stops, it will terminate the process...
I need to find another solution..so sad.

Update:
I found that I can just do a Clock::settle() after StartMaster, because in cluster.hpp, it is said that doing so can ensure the master to finish executing _recover().
Let me try out.

Fixed.
FYI:
https://reviews.apache.org/r/23001/

Thank you!

commit 8015e6e3cca540a5fed550246ed5a2354a110a10
Author: Yifan Gu <yifan@mesosphere.io>
Date:   Tue Jul 1 11:34:46 2014 -0700
    Fixed flaky OrphanTasks test.
    Added Clock::settle after StartMaster() to ensure the master finishes executing _recover().
    Review: https://reviews.apache.org/r/23001

I have just seen this one break in a single (unreplicatable) run, unfortunately I had no logging activated. Do we want to reopen this ticket, or shall I file a new one?

{noformat}
[ RUN      ] MasterTest.OrphanTasks
ABORT: (../../3rdparty/libprocess/3rdparty/stout/include/stout/try.hpp:92): Try::get() but state == ERROR: Resolver Error 0 (no error)*** Aborted at 1414072736 (unix time) try "date -d @1414072736" if you are using GNU date ***
PC: @     0x7fff9219d282 __pthread_kill
*** SIGABRT (@0x7fff9219d282) received by PID 11348 (TID 0x7fff765a7300) stack trace: ***
   @     0x7fff94743f1a _sigtramp
   @                0x1 (unknown)
   @     0x7fff8c40bb73 abort
   @        0x1048fc0cd _Abort()
   @        0x1048fc05a _Abort()
   @        0x104aef8ca mesos::MesosSchedulerDriver::initialize()
   @        0x104aefc32 mesos::MesosSchedulerDriver::MesosSchedulerDriver()
   @        0x10349ded9 mesos::internal::tests::TestingMesosSchedulerDriver::TestingMesosSchedulerDriver()
   @        0x103901314 MasterTest_OrphanTasks_Test::TestBody()
   @        0x103bf9b1c testing::internal::HandleExceptionsInMethodIfSupported<>()
   @        0x103be4a6a testing::Test::Run()
   @        0x103be5772 testing::TestInfo::Run()
   @        0x103be5db0 testing::TestCase::Run()
   @        0x103beb827 testing::internal::UnitTestImpl::RunAllTests()
   @        0x103bfa2e4 testing::internal::HandleExceptionsInMethodIfSupported<>()
   @        0x103beb539 testing::UnitTest::Run()
   @        0x103849fa8 main
   @     0x7fff877325c9 start
{noformat}

