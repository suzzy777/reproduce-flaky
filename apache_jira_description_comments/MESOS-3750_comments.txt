The root cause for the flakiness is due to the following race condition:

Bad Run
- The master sends 1 offer to the framework.
- The framework accepts the offer and launches a task.
- The executor , when the task completes, sends a {{TASK_FINISHED}} status update to the master.
- The master upon noticing the terminal status update , marks the resources as available. Note, there that these resources can now be offered back to the framework.
- The master sends an {{Event::Offer}} to the framework.
- This fails the test as the framework was expecting an {{Event::Failure}}.

Good Run
- The master sends 1 offer to the framework.
- The framework accepts the offer and launches a task.
- The executor , when the task completes, sends a {{TASK_FINISHED}} status update to the master.
- The framework on getting the status update, sends a {{Call::SHUTDOWN}} to the master leading to the master destroying the executor.
- No subsequent offers are sent to the framework in this case. An {{Event::FAILURE}} is sent by the master to the framework letting it know that an active executor has finished.

This seems easily fixable but I wonder if we should wait for a resolution on MESOS-3339 before fixing this as that enables us to filter subsequent offers quite easily and set expectations based on that.

This was fixed as part of moving the scheduler tests to use the callback interface: https://github.com/apache/mesos/commit/b446dbf2d797168b1d48c7a9462a51101b982a1a#diff-ceb2659ff062bb666ccb8b9baee18a47

