I'm reopening this ticket. While digging into the test failure, it appears to be a bug-in-test, and a different code path than CASSANDRA-17708

I think that the problem is https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/net/HandshakeTest.java#L384. The previous line calls {{isConnected}}, which only checks the state of the connection, not whether the connection has pending data. Given that the test appears to want to just test connection fallback, I think that the check for pending messages is unnecessary. I'll submit a patch to remove that check.

I agree with your analysis.  This only affects trunk since the test was added as part of CASSANDRA-17923.

||Branch||CI||
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17979-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/853/workflows/5439b983-4b50-41a3-9cf9-2def4f6cda00], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/853/workflows/4b689d33-6688-4c6a-9531-984ba07facc7]|


We need to remove [this one|https://github.com/driftx/cassandra/commit/37ccbbef2c22fefd137275ef47dfaa1b1cf8d153] too.

||Branch||CI||
|[trunk|https://github.com/driftx/cassandra/tree/CASSANDRA-17979-trunk]|[j8|https://app.circleci.com/pipelines/github/driftx/cassandra/854/workflows/e4a4f08c-825b-4dc2-a1d0-ed20ec208e0d], [j11|https://app.circleci.com/pipelines/github/driftx/cassandra/854/workflows/234db71c-ee84-4497-a369-83be08ac3fd5]|


The one failure in j8 is a circle env problem (ran OOS) and the one in j11 is CASSANDRA-18151.  +1 from me.

For posterity, here's a brief description of the code path and bug-in-test:

* The test calls {{initiateOutbound}} to [enqueue a message|https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/net/HandshakeTest.java#L365] and initiate the connection
*  After successful connection setup, the {{OutboundConnection}} state [is updated|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/net/OutboundConnection.java#L1131]
* {{waitForConnection}} basically [loops until the connection state is established {{OutboundConnection::isConnected}}|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/net/OutboundConnection.java#L1131]
* The unit test then [verifies that the connection is established|https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/net/HandshakeTest.java#L383] because {{waitForConnection}} can also exit due to timeout
* At this point we have verified that the connection has established successfully and performed whatever fallback handshake needed to occur, but nothing about the current state indicates whether or not the enqueued message has been sent, so the subsequent [{{hasPending}}|https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/net/HandshakeTest.java#L384] call is a race against the message delivery thread

Connection establishment, at least in my mind, means sockets connected, TLS handshake complete (if negotiated), and ready for use, but I don't think we want to conflate that state with whether or not bytes have been put on the wire

+1. Thanks. [~brandon.williams] I will leave committing on you.

I think [~edimitrova] had a concern here, is that still the case?

My suggestion was to fix that assertion instead of removing it, it is a quick trivial fix. Otherwise I do not disagree with the things said here

I've replaced both assertions with a new method to validate delivery and I've renamed everything to make it clear that they also test delivery. CircleCI is running unit tests now. I'm going to disagree with the idea that every unit test should be an integration test (message delivery is tested in other test classes), but in the interest of fixing a flaky test we can hopefully merge this soon.

Still pending review. I really think we should go back to the first version of the patch. Testing for delivery just feels like conflating concerns in a unit test

I haven’t forgotten, there was just a discussion on github with the original author and I didn’t get response?

I guess the original patch should be also fine. I am out today and on the phone, but I can commit the fix tomorrow if no one gets to it before me or has anything to say/ask

I still had the branch so committing was simple.  Thanks folks!

