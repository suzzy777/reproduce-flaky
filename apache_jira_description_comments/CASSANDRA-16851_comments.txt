Looks like there is need for one small change, for accessing `JsonStringEncoder` directly.

PR: [https://github.com/apache/cassandra/pull/1137]

 

 

 

Hi [~cowtowncoder]. Thank you for raising the ticket and providing a patch. I hope you don't mind that I moved your ticket to PATCH AVAILABLE to signal reviewers to take a look. 

I just pushed your branch to Jenkins dev [here|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1019/]. Unfortunately, only committers and PMC members can submit CI runs there. But you might want to explore Circle CI. (Just please bear in mind that if you use LOWRES resources not all dtests will be able to run as they require more resources. Please contact me in Slack if you need more help with this or some info for the higher resources.)
More information about our test environment can be found [here|https://cassandra.apache.org/_/development/testing.html]
I am wondering why not moving to latest Jackson version for trunk?

Hi [~e.dimitrova]! Thank you for updating the issue and suggestions. Will try to see how to use CI as plain ant test locally is taking quite long time.

I'd be happy to move to the latest version as well but since this is my first contribution wanted to be cautious – no real blocker for that and I could target Jackson 2.12.4 instead of 2.10.5.

As per discussions, changed to refer to Jackson 2.12(.4).

 

Thank you, I just submitted Jenkins CI [here|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1025/]. Let's see the results from the CI run and I haven' t checked the release notes for this one but I will do it next week. Thank you!

The CI run looks good to me, I didn't see any new failures. I didn't see any changed behavior in the newer versions that might affect some of our usages of Jackson.

I am wondering whether to update the previous Cassandra versions at least to a supported minor version? I see security and other important issues were addressed. WDYT?

[~mck], I am also interested into your opinion for older versions. Plus we need second committer if you have the time :) 

Security aspect wrt CVE is probably a good one regarding move from 2.9 to even just 2.10 – practically all Jackson CVEs for past 2.5 years were for polymorphic deserialization and are not applicable to 2.10 or beyond.
While these CVEs were already not applicable to Cassandra usage (as per [https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062),] vuln tracking tools are very simplistic and cannot really express something that is only applicable to specific usage scenarios, and will happily indicate Cassandra requiring update to latest Jackson 2.9 patch.

Or, TL;DNR; moving out of 2.9 will stop any new jackson polymorphic deser CVEs.
This would probably be nice for C* 3.x as well as 4.x.
Choice of Jackson dependency to use can also be different between 3.x and 4.x, although with relatively simple usage it is probably simpler from support perspective to update both to Jackson 2.12.

 

Agree to applying to release branches from 3.0 up.
(Though I have a comment about performance in the PR.)

I ended up adding back the missing method in `BufferRecyclers` for Jackson 2.12, included again in 2.12.5. This simplifies patch; will update PR accordingly.

 

[~mck] I ended up reverting code wrt JsonStringEncoder so now can use the old method (since it was reintroduced in 2.12.5, as it was technically API regression). I hope this makes patch easier to consider.

A full CI test run would be needed still, although if that has been run before there is no functional change here. I did however notice that someone had added a Jackson module in the meantime to support Java 8 date/time types.

[!https://ci-cassandra.apache.org/job/Cassandra-devbranch/1082/badge/icon!|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1082/]

Looks like above test summary says: "[Test Result|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1082/testReport/] (7 failures / -1)". Not 100% sure if it means that there is one less failure from baseline (recent runs), or something else. Failed tests:

!https://ci-cassandra.apache.org/static/c0f8b409/images/16x16/document_add.png!  [org.apache.cassandra.distributed.upgrade.CompactStorageUpgradeTest.compactStorageUpgradeTest|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1082/testReport/org.apache.cassandra.distributed.upgrade/CompactStorageUpgradeTest/compactStorageUpgradeTest/] 6.9 sec [1|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1082/]

!https://ci-cassandra.apache.org/static/c0f8b409/images/16x16/document_add.png!  [org.apache.cassandra.distributed.test.OptimiseStreamsRepairTest.randomTest|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1082/testReport/org.apache.cassandra.distributed.test/OptimiseStreamsRepairTest/randomTest/] 37 sec [1|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1082/]

!https://ci-cassandra.apache.org/static/c0f8b409/images/16x16/document_add.png!  [org.apache.cassandra.metrics.TableMetricsTest.testLoggedPartitionsPerBatch-compression|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1082/testReport/org.apache.cassandra.metrics/TableMetricsTest/testLoggedPartitionsPerBatch_compression/] 3.1 sec [1|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1082/]

!https://ci-cassandra.apache.org/static/c0f8b409/images/16x16/document_add.png!  [org.apache.cassandra.distributed.upgrade.CompactStorageUpgradeTest.compactStorageHiddenColumnTest|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1082/testReport/org.apache.cassandra.distributed.upgrade/CompactStorageUpgradeTest/compactStorageHiddenColumnTest/] 1 min 13 sec [2|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1081/]

!https://ci-cassandra.apache.org/static/c0f8b409/images/16x16/document_add.png!  [org.apache.cassandra.distributed.upgrade.MixedModeReadTest.mixedModeReadColumnSubsetDigestCheck|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1082/testReport/org.apache.cassandra.distributed.upgrade/MixedModeReadTest/mixedModeReadColumnSubsetDigestCheck/] 26 sec [4|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1079/]

!https://ci-cassandra.apache.org/static/c0f8b409/images/16x16/document_add.png!  [org.apache.cassandra.distributed.upgrade.MixedModeReadTest.mixedModeReadColumnSubsetDigestCheck|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1082/testReport/org.apache.cassandra.distributed.upgrade/MixedModeReadTest/mixedModeReadColumnSubsetDigestCheck_2/] 25 sec [4|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1079/]

!https://ci-cassandra.apache.org/static/c0f8b409/images/16x16/document_add.png!  [org.apache.cassandra.distributed.upgrade.MixedModeReadTest.mixedModeReadColumnSubsetDigestCheck|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1082/testReport/org.apache.cassandra.distributed.upgrade/MixedModeReadTest/mixedModeReadColumnSubsetDigestCheck_3/] 29 sec [4|https://ci-cassandra.apache.org/job/Cassandra-devbranch/1079/]

 

 

 

The '-1' is the only thing to be concerned with, one less test failed on your run than others...if it's positive, that's bad.  The failing tests all look to be known existing issues, so +1.

In general that is what it means but also we need to compare with the recent post-commit builds; this comparison is to the recent dev builds which sometimes can be confusing if someone was testing patch in progress. 
That is not the case here though. I am also +1

Ok good, this makes sense.

Hey [~mck], I think [~tatu-at-datastax] found the perfect workaround to the performance concern by doing a new release and backporting the old method. (Thank you [~tatu-at-datastax]! ) Shall we commit this now to 3.0+ branches? 

+1 from me.

I was about to submit patch&Jenkins runs for the other branches too. I just found CASSANDRA-15867  where it seems we have skipped 3.0 which is on 1.9.5. Should we skip it again? I didn't see any comment on why this was done so maybe there was some offline discussion I am missing. [~brandon.williams]? I see you were looking into it. 

I think that was probably just oversight during the 4.0 push.  I don't think we need to skip it.

On a second reading I think the upgrade in 3.0 probably didn't happen intentionally as we actually have there Jackson-core-asl and Jackson-mapper-asl which migrated in Jackson 2. So I opted out of touching those for now. CC [~tatu-at-datastax] if he wants to add something on this.

Then I started the update for 3.11 and here it becomes interesting. It seems there we use _BufferRecyclers.getJsonStringEncoder()_ which change has happened in CASSANDRA-14427(Bump jackson version to >= 2.9.5). Initially the method used was _JsonStringEncoder.getInstance(),_ added in __ CASSANDRA-11048 (Make SELECT JSON and toJson() threadsafe)

Not sure now which method is more correct to use at this point. Thoughts?

[~e.dimitrova] gotcha wrt 3.0; since it is Jackson 1.x, this would not apply (and adding Jackson 2.x would do no good; it wouldn't be used). I did not realize upgrade happened after 3.0; 3.11 and later use Jackson 2.x.

As to `BufferRecyclers.getJsonStringEncoder()`: it has bit of an "interesting" history, and was not meant for use by code outside Jackson.
During Jackson 2.9 there was an attempt for safe recycling of underlying buffers of encoder, which lead to complicated handling via `BufferRecyclers`. This was removed in 2.10, along with making encoder stateless, but without considering compatibility aspects (i.e. removing accessor method).
I added old method back in 2.12.5 to address this.

With Jackson 2.13 (when it gets released), the recommended way is to just call `JsonStringEncoder.getInstance()`; there is no buffer recycling (underlying buffer is calculated to be about optimal size). With 2.12.x this method is safe to use as well.

But for 2.12 I added method `BufferRecyclers.getJsonEncoder()` (and related) back for compatibility reasons, but marked "deprecated" so that there would not be additional use. It is not meant to indicate imminent removal (methods won't be removed before 3.0).

So I think going via `BufferRecyclers` makes sense now and maybe move "back" to `JsonStringEncoder.getInstance()` when Cassandra upgrades to Jackson 2.13 or later 2.x?

Does above make sense? (the whole thing being a mess, but that aside :) )

 

{quote}So I think going via `BufferRecyclers` makes sense now and maybe move "back" to `JsonStringEncoder.getInstance()` when Cassandra upgrades to Jackson 2.13 or later 2.x?

Does above make sense? (the whole thing being a mess, but that aside :) )
{quote}
+1, I had similar thoughts, let's see whether [~mck] and [~brandon.williams] agree :)

[~mck], [~brandon.williams], do you agree with our suggestion around 3.11? 

+1 from me.

+1 from me.

I just rebased and started CI for all three branches we plan to do the update:
||Patch||CI||
|​[3.11|https://github.com/ekaterinadimitrova2/cassandra/pull/new/16851-3.11]|​[Jenkins|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1119/]|
|​[4.0|https://github.com/ekaterinadimitrova2/cassandra/pull/new/16851-4.0]|​[Jenkins|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1120/]|
|​[trunk|https://github.com/ekaterinadimitrova2/cassandra/pull/new/16851-trunk]|​[Jenkins|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1121/]|

*NOTE:*  _JsonStringEncoder.getInstance()_ was always used in 3.11 so we kept it (I was looking the wrong branch before). Thanks to the release done by [~tatu-at-datastax], we keep for now  _BufferRecyclers.getJsonEncoder()_ in 4.0 and trunk as it seems they were there already 3 years.

I didn't see any related issues based on the CI runs.

[~tatu-at-datastax] as our CI is still new to you and I know it can be overwhelming sometimes, I made the CI results analysis for you as an example. It is based on [Jenkins post-commit builds history|https://jenkins-cm4.apache.org/] and already opened tickets for tests issues - [this Jira filter|https://issues.apache.org/jira/issues/?filter=12350869], linked by Josh in the latest [project updates|https://lists.apache.org/thread.html/r681bcfcfa938569ae7fb86c0c309ee7d84558f1cc07eb2c1a30468c7%40%3Cdev.cassandra.apache.org%3E] on the mailing list.

*I think we need to open ticket for:*  [org.apache.cassandra.distributed.test.UnableToParseClientMessageTest.badHeader[version=5/v5|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1121/testReport/junit/org.apache.cassandra.distributed.test/UnableToParseClientMessageTest/badHeader_version_5_v5_/]]  which failed in trunk as it is flaky according to Jenkins even without this patch and it is not related. 

[org.apache.cassandra.distributed.test.ClientTombstoneWarningTest.failThresholdSinglePartition|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1121/testReport/org.apache.cassandra.distributed.test/ClientTombstoneWarningTest/failThresholdSinglePartition_2/]  is also consistently failing in trunk and there is no ticket, the failure is unrelated to this patch. 

[org.apache.cassandra.distributed.test.OptimiseStreamsRepairTest.randomTest|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1120/testReport/junit/org.apache.cassandra.distributed.test/OptimiseStreamsRepairTest/randomTest/] - failed in 4.0. Seems legit issue and we need ticket. From a quick look at the log I think it will turn test issue as there are overlapping repairs probably...timing problem. I've seen this before with other tests. But...again....to be checked, I am speculating based on a very quick look in Jenkins log excerpt. 

[org.apache.cassandra.cql3.ViewTest.testTruncateWhileBuilding|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1119/testReport/junit/org.apache.cassandra.cql3/ViewTest/testTruncateWhileBuilding/] - failing in 3.11, unrelated; needs a ticket

[org.apache.cassandra.concurrent.LongSharedExecutorPoolTest.testPromptnessOfExecution|https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1119/testReport/junit/org.apache.cassandra.concurrent/LongSharedExecutorPoolTest/testPromptnessOfExecution/] - failing in 3.11, unrelated; needs a ticket

*No ticket needed for:*

[org.apache.cassandra.distributed.upgrade.CompactStorageUpgradeTest.compactStorageUpgradeTest |https://jenkins-cm4.apache.org/job/Cassandra-devbranch/1121/testReport/junit/org.apache.cassandra.distributed.upgrade/CompactStorageUpgradeTest/compactStorageUpgradeTest/] - unrelated timeout I think?

dtest-novnode.materialized_views_test.TestMaterializedViews.test_view_metadata_cleanup - CASSANDRA-16954

offline_tools_test.py::TestOfflineTools::test_sstableverify fails on 3.11 - CASSANDRA-16948

cqlsh.python2 - I am not sure that those we plan to fix; the failures provides contradictive Info. 

The upgrade tests in 3.11 fail with timeouts or teardown issues - CASSANDRA-16954

org.apache.cassandra.utils.memory.LongBufferPoolTest.testAllocate - CASSANDRA-16681

I can commit this tomorrow if no one has any objections. 

Sounds good to me: wish I had something to contribute wrt failures but I agree that none of the failures sound related (with limited understanding of C* internals I have). Jackson usage I have seen is quite basic and seems unlikely to have regressions, functionally or wrt performance.

Thank you [~e.dimitrova] for all your work on this!

Committed, thank you
To https://github.com/apache/cassandra.git
   b3af67f0ee..e4d2802276  cassandra-3.11 -> cassandra-3.11
   dd3d83a819..14af149ed5  cassandra-4.0 -> cassandra-4.0
   7faff38826..7c3935ced3  trunk -> trunk

Also, tickets opened for the flaky/failing tests:
CASSANDRA-16970 - Fix org.apache.cassandra.distributed.test.ClientTombstoneWarningTest.failThresholdSinglePartition
CASSANDRA-16971 - Fix org.apache.cassandra.distributed.test.OptimiseStreamsRepairTest.randomTest
CASSANDRA-16973 - Fix org.apache.cassandra.concurrent.LongSharedExecutorPoolTest.testPromptnessOfExecution
CASSANDRA-16972 - Fix org.apache.cassandra.cql3.ViewTest.testTruncateWhileBuilding
CASSANDRA-16974 -Fix org.apache.cassandra.distributed.test.UnableToParseClientMessageTest.badHeader[version=5/v5]

Pop the champagne! Thank you again [~e.dimitrova] for getting this through; should eliminate possibility of those "busy work cve updates for jackson 2.9" popping up ever again.
Plus I think there's some incremental performance work for JsonNode handling too in 2.10 and 2.11 if I remember correctly.

Great! Thanks for guiding us in the Jackson world :) 

My pleasure!

 

