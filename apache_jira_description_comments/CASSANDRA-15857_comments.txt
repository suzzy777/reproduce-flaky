PR: [https://github.com/apache/cassandra/pull/669]

Code: [https://github.com/yifan-c/cassandra/tree/CASSANDRA-15857-rawtuple-tostring-miss-frozen]

Test: [https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=CASSANDRA-15857-rawtuple-tostring-miss-frozen] (Test failure is not related to the change)

The patch simply adds the frozen wrapper in the RawTuple's toString method when it is frozen. 

The toString method is called in CreateTypeStatement, CreateAggregateStatement and CreateFunctionStatement, and further affects the CQLSSTableWriter and the produced SchemaChange objects. Therefore, tests cases to verify CQLSSTableWriter and SchemaChange were added. 

Once reviewed this one, I can make a backport patch to 3.11. 

As tuples cannot be frozen at all, it seems more convenient to completely omit the {{frozen<>}} bracket. I.e. removing the {{frozen}} param from {{RawTuple.<init>}}, removing the {{frozen}} handling in {{CQL3Type.Tuple.toString()}} (remove {{frozen<>}} entirely from the string) and adopting the frozen-validation-logic in {{CQL3Type.Raw.RawCollection.prepare()}}.

Honestly, the handling of frozen isn't actually great in the code base, but cleaning that up is quite a bit of work (too much for a patch release and even for 4.0 now). E.g. it should be ensured that all subtypes of a type are always frozen no matter what, the whole partition key must always be frozen, clustering key elements must be frozen, a bunch of code constructs like "if (some-check) freeze()" should be simplified and generalized. Things become a bit complicated when freezable types are nested, for example a non-frozen-UDT in a non-frozen-collection in a UDT, which is legal.

bq. As tuples cannot be frozen at all

Is it a typo? According to the document, tuple is always frozen. https://docs.datastax.com/en/dse/6.8/cql/cql/cql_reference/refDataTypes.html?hl=tuple%2Cfrozen#refDataTypes__tuple 

The parsing rules defined at {{Parser.g}} only freeze the type when there is a frozen keyword. 

Are you suggesting to freeze the RawTuple when constructing the object? So we can get rid of the {{frozen}} param. 

Not really a typo, but there's no point in freezing a tuple, as there is no unfrozen tuple. I.e. a {{frozen<>}} around a tuple doesn't add any value. So dealing with an unfrozen tuple is meaningless IMO.

Thanks Robert for the clarification! 
I agree that adding {{frozen}} keyword to a tuple is redundant, given tuples are implicitly frozen. 

In the current code base, we cannot set the {{RawTuple}} to frozen directly. Create function/aggregate statement rejects frozen raw types. (CASSANDRA-9441)

After giving more thoughts, the validation in the {{RawCollection#prepare}} does not need to throw in the case that inner type is RawTuple. Because tuples are always frozen. The method should proceed and the inner row tuple gets frozen (if not yet) when preparing itself later. 

I have update the PR with the above change. 

The test in CI passes (with unrelated failures in dtest)

Please take another look.

Ah, sorry, my bad. We cannot "blindly" freeze all tuples, because we do have a notion of non-frozen tuples for the very special use-case of dropped columns w/ non-frozen UDTs (UDTs are "converted" into a tuple when a column's dropped).

Ugh - actually, the recorded type in system_schema.dropped_columns for a dropped column with an unfrozen UDT is already broken (unrelated to this ticket though):

{code}
[cqlsh 5.0.1 | Cassandra 3.11.7-SNAPSHOT | CQL spec 3.4.4 | Native protocol v4]
cqlsh> CREATE TYPE ks.some_type ( i int, t text );
cqlsh> CREATE TABLE ks.t ( pk int primary key, t some_type);
cqlsh> ALTER TABLE ks.t DROP t;
cqlsh> SELECT * FROM system_schema.dropped_columns ;
 keyspace_name | table_name | column_name | dropped_time                    | kind    | type
---------------+------------+-------------+---------------------------------+---------+--------------------------------------------------------
            ks |          t |           t | 2020-07-15 08:35:10.494000+0000 | regular |                               frozen<tuple<int, text>>
{code}


I can confirm that in 4.0, non-frozen UDT cannot be ever dropped. So it is safe to freeze a tuple unconditionally.
{code:java}
[cqlsh 5.0.1 | Cassandra 4.0-beta1-SNAPSHOT | CQL spec 3.4.5 | Native protocol v4]
cqlsh> CREATE TYPE ks.some_type ( i int, t text );
cqlsh> CREATE TABLE ks.t ( pk int primary key, t some_type);
cqlsh> ALTER TABLE ks.t DROP t;
InvalidRequest: Error from server: code=2200 [Invalid query] message="Cannot drop non-frozen column t of user type some_type"
{code}
An optional [commit (freeze tuples unconditionally)|https://github.com/apache/cassandra/pull/669/commits/5e7577141de4ebe2c5c284fd7c22d0dd8f49aea0] was added to the patch. We can totally drop the commit if not like it. 
 All raw tuples are now always frozen. Because of that, rejections on frozen raw tuple in CreateFunctionStatement and CreateAggregateStatement are removed.

The rejections were added mainly to make the aggregate and function flexible to both frozen and non-frozen types, according to comments in CASSANDRA-9186. It prevents adding frozen in the declaration of aggregate and function, in order to not confuse users.

Given that tuples are always frozen, user should be clear that 'tuple' and 'frozen tuple' produce the same effect. Therefore, it could be confusion-free to allow both form for tuple in the create statements for aggregates and functions.

LGTM, can you provide a backport to 3.11?

Thanks for the review! 

Here is the patch that backport to 3.11. [https://github.com/apache/cassandra/pull/686]

Some noticeable difference than the patch to trunk. 
 # {{CQLSSTableWriterTest}} uses JUnit Rule, which does not exist in JUnit 4.6. I added a separate commit to "Backport CASSANDRA-13360 Upgrade junit from 4.6 to 4.12 "
 # {{testSchemaChange}} in {{AggregationTest}} and {{UFTest}} are adjusted since in 3.11 branch we do not have CASSANDRA-14825, which removes {{frozen}} from param

Hm, not really a fan of sneaking unrelated changes in a 3.11-patch, although it's probably not an issue. Let's stick with the "old" (non-{{@Rule}}) approach in 3.11 for {{CQLSSTableWriterTest}}.

Otherwise the PR looks good.

Got it. Just dropped the commit that upgrade junit version and fix the test. 

3.11    PR: [https://github.com/apache/cassandra/pull/686] Test: [https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=CASSANDRA-15857-freeze-rawtuple-3_11]

Trunk PR: [https://github.com/apache/cassandra/pull/669] Test: [https://app.circleci.com/pipelines/github/yifan-c/cassandra?branch=CASSANDRA-15857-rawtuple-tostring-miss-frozen]

+1

Thanks for the patch!

Committed as [d51c18f807c5c88ef44114341592214747487645|https://github.com/apache/cassandra/commit/d51c18f807c5c88ef44114341592214747487645] to [cassandra-3.11|https://github.com/apache/cassandra/tree/cassandra-3.11], [merged|https://github.com/apache/cassandra/commit/a76d288c32e9a062dfafc8e38a33b8aed064913e] to [trunk|https://github.com/apache/cassandra/tree/trunk].


