Does this mean local mode AM should be run in session mode?

@Bikas, I read this as the client should be able to submit a second non-session application. This would start a second DAGAppMaster, making it more like YarnClient in this respect. [~sseth], can you cornfirm or correct my understanding?

bq. @Bikas, I read this as the client should be able to submit a second non-session application. This would start a second DAGAppMaster, making it more like YarnClient in this respect. Siddharth Seth, can you cornfirm or correct my understanding?
Yep. I don't think we should default to session mode to get this working. Should be close to the regular TezClient behaviour.

That makes sense. I was guessing that it already works this way and we wanted something else. Looks like it doesn't.

This affects session as well.

The patch passes the framework client into the DAGClient. This does end up leaking local mode into DAGCLientRPC - but is very limited.

The unit test verifies the behaviour - but cannot be checked in at the moment. It'll end up being a very flaky test because of the 5s sleep / die in the AppMaster. I'll try addressing that. Otherwise, the patch can go in without the test - till the exiting problem is resolved.

Eventually, we need to figure out a good way to share these instances.

[~hitesh], [~jeagles] - please review.

FrameworkClient should probably have a refcounter to ensure that stop() takes effect only after all users have called stop(). Each new user can call start() to ensure that it acquires a reference. The first start() can start the real connection. We probably have this issue in the current patch but because localclient.stop() is empty it does not matter.
I think if we make the above fix, then both local and non-local clients could be shared between TezClient and DAGClient. The local vs non-local check would not be necessary. Later we can make an extension that allows the last refcounted user to actually shutdown the session. This way we dont need to keep tezclient alive until all the processing is complete. Only the DAGClient needs to stay alive - which seems natural.

I haven't targeted sharing the FrameworkClient between TezClient and DAGClient in this patch. That's a slightly more involved change (and I believe I filed a separate jira for this earlier). This one is targeted only for LocalMode and doesn't affect non local-mode execution at all.

My comment was primarily not about sharing them. That was a useful side effect. The comment was trying to say that the current patch has an issue that both TezClient and DAGClient will independently close/stop FrameworkClient. The issue is not exposed because LocalClient does not have any implementation in those methods. It may break whenever that changes or something else in the framework client logic changes. Its fine to commit this without fixing the issue as long as we call it out in some comment.

Alright, I'll add a comment in the close() method. The change works primarily because LocalClient doesn't do anything on close - and YarnClient is never shared. Not yet anyway. Thanks for taking a look. Will upload another patch with documentation and commit.

Still taking a look. Will post comments soon.

Updated patch.

Looks good to me, [~sseth]. I think we will still want to verify non-session concurrent DAG submission, but that smaller feature can be tested separately and handled in a separate JIRA if necessary.


Thanks for taking a look [~bikassaha] and [~jeagles]. Will leave concurrent DAGs to a separate jira. I though [~airbots] had opened a jira for that, but couldn't find it.

Committed to master.

This is really helpful. Thanks, [~seth.siddharth@gmail.com]. The multiDAG issue is: TEZ-1376. 

Bulk close for jiras fixed in 0.5.0.

