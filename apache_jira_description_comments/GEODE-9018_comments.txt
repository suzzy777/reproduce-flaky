albertogpz opened a new pull request #6110:
URL: https://github.com/apache/geode/pull/6110


   â€¦arison
   
   Thank you for submitting a contribution to Apache Geode.
   
   In order to streamline the review of the contribution we ask you
   to ensure the following steps have been taken:
   
   ### For all changes:
   - [ ] Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?
   
   - [ ] Has your PR been rebased against the latest commit within the target branch (typically `develop`)?
   
   - [ ] Is your initial contribution a single, squashed commit?
   
   - [ ] Does `gradlew build` run cleanly?
   
   - [ ] Have you written or updated unit tests to verify your changes?
   
   - [ ] If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under [ASF 2.0](http://www.apache.org/legal/resolved.html#category-a)?
   
   ### Note:
   Please ensure that once the PR is submitted, check Concourse for build issues and
   submit an update to your PR as soon as possible. If you need help, please send an
   email to dev@geode.apache.org.
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


DonalEvans commented on a change in pull request #6110:
URL: https://github.com/apache/geode/pull/6110#discussion_r591760383



##########
File path: geode-core/src/test/java/org/apache/geode/cache/query/internal/types/ExtendedNumericComparatorTest.java
##########
@@ -0,0 +1,83 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package org.apache.geode.cache.query.internal.types;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+import java.util.Comparator;
+
+import org.junit.Test;
+
+import org.apache.geode.cache.query.QueryService;
+import org.apache.geode.cache.query.internal.index.IndexManager;
+
+public class ExtendedNumericComparatorTest {
+  Comparator comparator = TypeUtils.getExtendedNumericComparator();

Review comment:
       Warnings in this class can be fixed by using `Comparator<Object> comparator = uncheckedCast(TypeUtils.getExtendedNumericComparator());` here

##########
File path: geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CompactRangeIndexJUnitTest.java
##########
@@ -442,6 +445,48 @@ public void doTestHook(final SPOTS spot, final DefaultQuery _ignored,
     }
   }
 
+  /**
+   * Tests adding entries to compact range index where there are undefined and null values
+   * for the key
+   */
+  @Test
+  public void testNullAndUndefinedValuesForMapKeyInCompactRangeIndex() throws Exception {
+    index = utils.createIndex("indexName", "positions['SUN']", SEPARATOR + "exampleRegion");
+    Region<Object, Object> region = utils.getCache().getRegion("exampleRegion");
+
+    // create objects
+    Portfolio p1 = new Portfolio(1);
+    p1.positions = new HashMap<>();
+    p1.positions.put("SUN", "yes");
+    region.put("KEY-" + 1, p1);
+
+    // null value for positions['SUN']

Review comment:
       This comment (and some others in this test) are inaccurate

##########
File path: geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CompactRangeIndexJUnitTest.java
##########
@@ -442,6 +445,48 @@ public void doTestHook(final SPOTS spot, final DefaultQuery _ignored,
     }
   }
 
+  /**
+   * Tests adding entries to compact range index where there are undefined and null values
+   * for the key
+   */
+  @Test
+  public void testNullAndUndefinedValuesForMapKeyInCompactRangeIndex() throws Exception {

Review comment:
       This test passes even with the changes in `ExtendedNumericComparator` reverted. Would it be possible to write a test that exercises the new behaviour?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


albertogpz commented on a change in pull request #6110:
URL: https://github.com/apache/geode/pull/6110#discussion_r591784419



##########
File path: geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CompactRangeIndexJUnitTest.java
##########
@@ -442,6 +445,48 @@ public void doTestHook(final SPOTS spot, final DefaultQuery _ignored,
     }
   }
 
+  /**
+   * Tests adding entries to compact range index where there are undefined and null values
+   * for the key
+   */
+  @Test
+  public void testNullAndUndefinedValuesForMapKeyInCompactRangeIndex() throws Exception {
+    index = utils.createIndex("indexName", "positions['SUN']", SEPARATOR + "exampleRegion");
+    Region<Object, Object> region = utils.getCache().getRegion("exampleRegion");
+
+    // create objects
+    Portfolio p1 = new Portfolio(1);
+    p1.positions = new HashMap<>();
+    p1.positions.put("SUN", "yes");
+    region.put("KEY-" + 1, p1);
+
+    // null value for positions['SUN']

Review comment:
       ok

##########
File path: geode-core/src/test/java/org/apache/geode/cache/query/internal/types/ExtendedNumericComparatorTest.java
##########
@@ -0,0 +1,83 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license
+ * agreements. See the NOTICE file distributed with this work for additional information regarding
+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the License. You may obtain a
+ * copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package org.apache.geode.cache.query.internal.types;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+import java.util.Comparator;
+
+import org.junit.Test;
+
+import org.apache.geode.cache.query.QueryService;
+import org.apache.geode.cache.query.internal.index.IndexManager;
+
+public class ExtendedNumericComparatorTest {
+  Comparator comparator = TypeUtils.getExtendedNumericComparator();

Review comment:
       ok




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


albertogpz commented on a change in pull request #6110:
URL: https://github.com/apache/geode/pull/6110#discussion_r591784654



##########
File path: geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CompactRangeIndexJUnitTest.java
##########
@@ -442,6 +445,48 @@ public void doTestHook(final SPOTS spot, final DefaultQuery _ignored,
     }
   }
 
+  /**
+   * Tests adding entries to compact range index where there are undefined and null values
+   * for the key
+   */
+  @Test
+  public void testNullAndUndefinedValuesForMapKeyInCompactRangeIndex() throws Exception {

Review comment:
       Actually, the test without the changes is flaky. If you run it several times you will see it failing a certain percentage of times.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


DonalEvans commented on a change in pull request #6110:
URL: https://github.com/apache/geode/pull/6110#discussion_r591804577



##########
File path: geode-core/src/integrationTest/java/org/apache/geode/cache/query/internal/index/CompactRangeIndexJUnitTest.java
##########
@@ -442,6 +445,48 @@ public void doTestHook(final SPOTS spot, final DefaultQuery _ignored,
     }
   }
 
+  /**
+   * Tests adding entries to compact range index where there are undefined and null values
+   * for the key
+   */
+  @Test
+  public void testNullAndUndefinedValuesForMapKeyInCompactRangeIndex() throws Exception {

Review comment:
       Would it be possible to write a test that wasn't flaky when it failed? If something changed in future that made this test fail, it would be best if it failed immediately rather than randomly some time after the breaking change was made.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


Commit 863243af44e9f4ea2e501c3b24a62a1647a7df16 in geode's branch refs/heads/develop from Alberto Gomez
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=863243a ]

GEODE-9018: Fix ExtendedNumericComparator for NULL and UNDEFINED compâ€¦ (#6110)

* GEODE-9018: Fix ExtendedNumericComparator for NULL and UNDEFINED comparison

* GEODE-9018: Changes after review

* GEODE-9018: Added checks in test case after review

Commit 863243af44e9f4ea2e501c3b24a62a1647a7df16 in geode's branch refs/heads/develop from Alberto Gomez
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=863243a ]

GEODE-9018: Fix ExtendedNumericComparator for NULL and UNDEFINED compâ€¦ (#6110)

* GEODE-9018: Fix ExtendedNumericComparator for NULL and UNDEFINED comparison

* GEODE-9018: Changes after review

* GEODE-9018: Added checks in test case after review

Commit 863243af44e9f4ea2e501c3b24a62a1647a7df16 in geode's branch refs/heads/develop from Alberto Gomez
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=863243a ]

GEODE-9018: Fix ExtendedNumericComparator for NULL and UNDEFINED compâ€¦ (#6110)

* GEODE-9018: Fix ExtendedNumericComparator for NULL and UNDEFINED comparison

* GEODE-9018: Changes after review

* GEODE-9018: Added checks in test case after review

Commit 863243af44e9f4ea2e501c3b24a62a1647a7df16 in geode's branch refs/heads/develop from Alberto Gomez
[ https://gitbox.apache.org/repos/asf?p=geode.git;h=863243a ]

GEODE-9018: Fix ExtendedNumericComparator for NULL and UNDEFINED compâ€¦ (#6110)

* GEODE-9018: Fix ExtendedNumericComparator for NULL and UNDEFINED comparison

* GEODE-9018: Changes after review

* GEODE-9018: Added checks in test case after review

