Some of the operations were changed, but handled by using the correct nodetool.  When it comes to the sidecar project, they don't plan to use nodetool so these are important to know for sidecar, not clear if we would want to support the older APIs

Updated the test https://github.com/apache/cassandra/blob/trunk/test/unit/org/apache/cassandra/tools/JMXCompatabilityTest.java#L73 to flag some of the JMX objects/attributes as expected.

{code}
List<String> excludeObjects = Arrays.asList("org.apache.cassandra.metrics:type=ThreadPools.*",
                                                    "org.apache.cassandra.internal:.*",
                                                    "org.apache.cassandra.metrics:type=DroppedMessage.*",
                                                    "org.apache.cassandra.metrics:type=ClientRequest,scope=CASRead,name=ConditionNotMet",
                                                    "org.apache.cassandra.metrics:type=Client,name=connectedThriftClients", // removed in CASSANDRA-11115
                                                    "org.apache.cassandra.request:type=ReadRepairStage", // removed in CASSANDRA-13910
                                                    "org.apache.cassandra.db:type=HintedHandoffManager", // removed in CASSANDRA-15939

                                                    // dropped tables
                                                    "org.apache.cassandra.metrics:type=Table,keyspace=system,scope=(schema_aggregates|schema_columnfamilies|schema_columns|schema_functions|schema_keyspaces|schema_triggers|schema_usertypes),name=.*",
                                                    ".*keyspace=system,(scope|table|columnfamily)=views_builds_in_progress.*",
                                                    ".*keyspace=system,(scope|table|columnfamily)=range_xfers.*",
                                                    ".*keyspace=system,(scope|table|columnfamily)=hints.*",
                                                    ".*keyspace=system,(scope|table|columnfamily)=batchlog.*");
        List<String> excludeAttributes = Arrays.asList("RPCServerRunning", // removed in CASSANDRA-11115
                                                       "MaxNativeProtocolVersion");
        List<String> excludeOperations = Arrays.asList("startRPCServer", "stopRPCServer", // removed in CASSANDRA-11115
                                                       // nodetool apis that were changed,
                                                       "decommission", // -> decommission(boolean)
                                                       "forceRepairAsync", // -> repairAsync
                                                       "forceRepairRangeAsync", // -> repairAsync
                                                       "beginLocalSampling", // -> beginLocalSampling(p1: java.lang.String, p2: int, p3: int): void
                                                       "finishLocalSampling" // -> finishLocalSampling(p1: java.lang.String, p2: int): java.util.List
        );
{code}

given this list, the main ones remaining (outside of operations, would be good to be backwards compatible but I see them as sidecar/tools related where as object/attributes are metrics, so I am more focused on metrics side) are:

Objects:
"org.apache.cassandra.metrics:type=ThreadPools.*",
"org.apache.cassandra.internal:.*",
"org.apache.cassandra.metrics:type=DroppedMessage.*",
"org.apache.cassandra.metrics:type=ClientRequest,scope=CASRead,name=ConditionNotMet",

Attributes:
MaxNativeProtocolVersion

[~dcapwell] Do we have a clear process on how we deprecate JMX objects/attributes? 

C* doesn't have a process at the moment (at least that I can find [~blerer]), deprecation has been lacking and gets skipped some time; we should more formalize this.

The issue is mostly that this causes a big burden for users as monitoring/tooling breaks when we do this, so delays the ability to upgrade 4.0 until tools/monitoring can adapt.

As one point of data, in 3.0 we deprecated HintedHandOffManagerMBean, left it as such in 3.11, and now have removed it in trunk.

I've seen the same story as [~brandon.williams]. Just one question on my mind, now we don't plan to do any removals, at most deprecation in beta, right?

bq. now we don't plan to do any removals, at most deprecation in beta, right?

We should no longer remove without approval in dev@, and those should only be things added in 4.0.

IMO we should develop the pattern of X.0 we depreciate, (X + 1).0 we remove, X.Y deprecate and (X + 2).0 remove; this should give plenty of time for users to migrate.

For this ticket, the remaining metrics are 

{code}
Objects:
"org.apache.cassandra.metrics:type=ThreadPools.*",
"org.apache.cassandra.internal:.*",
"org.apache.cassandra.metrics:type=DroppedMessage.*",
"org.apache.cassandra.metrics:type=ClientRequest,scope=CASRead,name=ConditionNotMet",
Attributes:
MaxNativeProtocolVersion
{code}

other than internal (personal bias is anything named internal is free to break at any point in time), all look useful; I do see DroppedMessage used in tooling.

So to me the question is, do we add them back?

To me the question is, were they announced for removal? Why, who.. when were they removed? I guess if we get to know what happened we will be able to make a well informed decision. WDYT? [~dcapwell] [~blerer] 

sounds good to me.

Ok, I am assigning it, I will start digging into it in between other stuff while waiting test runs completions, etc

Short update:
Objects:
*"org.apache.cassandra.metrics:type=ThreadPools.*"* ---> a few scopes are missing which I still haven't found how that happened as the stages that formed the scope look the same but some refactoring of the code happened so I need to check actual details.

*"org.apache.cassandra.metrics:type=DroppedMessage.*" *---> as part of CASSANDRA-15066 verbs have been changed. Many are now seen split to Verb_RSP and Verb_REQ, for example MUTATION_RSP and MUTATION_RSQ. 

*"org.apache.cassandra.internal:.*" *- I didn't really dig into it but looks like a few types are missing now in 4.0 - AntiEntropyStage, InternalResponseStage, MiscStage, PerDiskMemtableFlushWriter_0, ViewBuildExecutor

*"org.apache.cassandra.metrics:type=ClientRequest,scope=CASRead,name=ConditionNotMet"* ---> conditionNotMet has been moved to CASClientWriteRequestMetrics as part of  CASSANDRA-12649. What is interesting to me is that in 3.11 we see in CASClientRequestMetrics:

{code:java}
/* Used only for write  */
    public final Counter conditionNotMet; in 3.11
{code}



I am not sure why some of the ThreadPools scopes are missing. Codewise I see the same set. I asked [~blerer]Â  to take a look when he has a bit of time to direct me as way more knowledgeable than me on that part of the code.

To me it looks like the rest requires update of the documentation? Any objections? Thoughts? [~dcapwell]? I know you also spent quite some time on those, any opinion?

{quote}I am not sure why some of the ThreadPools scopes are missing.{quote}

The Stage threadpools are initialized [lazily|https://github.com/apache/cassandra/blob/trunk/src/java/org/apache/cassandra/concurrent/Stage.java#L74]. By consequence, their metrics will not appear until the stage has been used at least once.
Would it explain the missing metrics?

bq. The Stage threadpools are initialized lazily. By consequence, their metrics will not appear until the stage has been used at least once.
Would it explain the missing metrics?

Since this was seen from scraping metrics it could, but that would imply that 3.x was not lazy and 4.x is?  If we validate that they are present on a running cluster than it can be safe to ride off as tooling issue.

bq. To me it looks like the rest requires update of the documentation?

DroppedMessage looks like we could add an alias layer to avoid breaking, as that is a good metric to monitor to make sure the cluster is healthy.

ConditionNotMet looks like a rename regression, we should add an alias to fix it (like we have for other metrics).


??ConditionNotMet looks like a rename regression, we should add an alias to fix it (like we have for other metrics).??

[~dcapwell], I guess you mean the work done in CASSANDRA-15909? While I haven't worked on that one, It looks to me from the ticket comments that a nice framework was created that could help to quickly wrap up? :-)  Or you meant something else - "like we have for other metrics"? :-)

??Since this was seen from scraping metrics it could, but that would imply that 3.x was not lazy and 4.x is? If we validate that they are present on a running cluster than it can be safe to ride off as tooling issue.??

While I haven't validated this on a running cluster, a quick check of the code suggests that this is the case.(Thank you [~blerer]!) I can spend more time on that point later this week. (I was asked to prioritize other tickets)


bq. I guess you mean the work done in CASSANDRA-15909? 

Yeah, that would work. Utilities were added to create alias which map to the same thing, so just adding the old name should resolve this issue.

bq. a quick check of the code suggests that this is the case

I am ok riding off this as a tooling issue, though I am interested in why 3.0 has it and 4.0 doesn't; wonder what changed?  Some stages should be executed as part of the test, so it might also be better to have a exclude list of stages known to be flaky with initialization; this would at least make sure the stage metrics do not regress.

Back to this one.

It is still planned for 4.0 beta right? (Checking as there were other metrics related tickets moved for later)

So I just looked a bit in the code, we need this time alias for the scope name which was changed for the below metrics, not directly the MetricName name as in CASSANDRA-15909.

I can probably do this tomorrow.

?? *"org.apache.cassandra.metrics:type=DroppedMessage.*" *---> as part of CASSANDRA-15066 verbs have been changed. Many are now seen split to Verb_RSP and Verb_REQ, for example MUTATION_RSP and MUTATION_RSQ.??

?? *"org.apache.cassandra.metrics:type=ClientRequest,scope=CASRead,name=ConditionNotMet"* ---> conditionNotMet has been moved to CASClientWriteRequestMetrics as part of CASSANDRA-12649.??

Â 

Trunk patch [here | https://github.com/ekaterinadimitrova2/cassandra/pull/86], CI runs [JAVA 8 | https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/602/workflows/aaeee3fa-dc4d-47e7-ad4f-46892e0c93df] and [JAVA 11 | https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/602/workflows/bf260a66-ca2a-4eb8-ae13-76189d9c8741] have failures but I believe they are known and not related to this patch.

From "org.apache.cassandra.metrics:type=DroppedMessage." I didn't do anything only for PAGED_RANGE as it was marked deprecated in 3.11 and according to the practices we discussed earlier in the thread, I think we can safely remove it in 4.0.

[~dcapwell], [~blerer], would you have time for review, please? :-)  

For the wide audience - a first review was done. Thanks [~blerer]Â for your support.

There are concerns around the following mapping/alias whether it is fully correct:
_Verb.BATCH_REMOVE_REQ, -> "BATCH_REMOVE";_
_Verb.BATCH_STORE_REQ -> "BATCH_STORE";_
_Verb.COUNTER_MUTATION_REQ ->"COUNTER_MUTATION");_
_Verb.HINT_REQ -> "HINT";_
_Verb.MUTATION_REQ -> "MUTATION";_
_Verb.RANGE_REQ -> "RANGE_SLICE";_
_Verb.READ_REQ -> "READ";_
_Verb.READ_REPAIR_REQ -> "READ_REPAIR";_
_Verb.REQUEST_RSP -> "REQUEST_RESPONSE";_

I will do a second pass review of the Messaging Service rewrite to confirm this

In 3.11 {{ReadCommandVerbHandler}} was increasing the Dropped message metrics for discarded responses [here|https://github.com/apache/cassandra/blob/cassandra-3.11/src/java/org/apache/cassandra/db/ReadCommandVerbHandler.java#L56].

Ok, then I guess the question will be whether we want to create accumulative metrics for backward compatibility or not. In 4.0 we have a split between request and response.Â 

Some clarifications: {{ReadCommandVerbHandler}} was used in 3.11 by 3 verbs: {{READ}}, {{RANGE_SLICE}} and {{PAGED_RANGE}}. The metrics for the other verbs will match the new {{XXX-REQ}} metrics.

{quote}Ok, then I guess the question will be whether we want to create accumulative metrics for backward compatibility or not. In 4.0 we have a split between request and response.{quote}

I do not believe it is worth the extra complexity. Nevertheless, we should probably add an entry in the {{NEWS.txt}} upgrade section explaining that the value of the {{DroppedMessage}} metrics for those verbs will differ from the same metrics in 3.11 as it does not include anymore the responses dropped. 

Thank you [~blerer]

Final version [here|https://github.com/ekaterinadimitrova2/cassandra/pull/86/files]

CircleCI failures are seen also with other patches in Jenkins(only in the dev environment for some reason but that is a matter of a separate ticket I believe).

[Java 8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/623/workflows/1c89bd58-bcd1-45dc-b923-3aba245a78a6]Â | [Java 11 |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/623/workflows/369256da-5daa-4c17-86fb-8b2d1dce53f9]

I will probably open a separate ticket for the snapshot_test.py failures.Â 

On +1, I'll squash

Thanks for the patch. +1

Patch committed [here|https://github.com/apache/cassandra/commit/2330545827dfe6a39c56c6ae314723b88c3bc6b7]. Thank you!

