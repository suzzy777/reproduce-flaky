[~himos]
Thx for investigating this.
I do not understand why the CDATA is not finished. I would supose the {{ReporterException}} could be the reason why the stream is incomplete.

This one is probably a duplication of SUREFIRE-1697. Though this one is with steps to reproduce.

[~tibordigana] 
StatelessXmlReporter doesn't throw the exception but dumps it into the file:
{code:java}
Created at 2021-04-18T22:14:19.101# Created at 2021-04-18T22:14:19.101When writing xml report stdout/stderrorg.apache.maven.surefire.api.report.ReporterException: When writing xml report stdout/stderr at org.apache.maven.plugin.surefire.report.StatelessXmlReporter.addOutputStreamElement(StatelessXmlReporter.java:508) at org.apache.maven.plugin.surefire.report.StatelessXmlReporter.createOutErrElements(StatelessXmlReporter.java:483) at org.apache.maven.plugin.surefire.report.StatelessXmlReporter.serializeTestClassWithRerun(StatelessXmlReporter.java:261) at org.apache.maven.plugin.surefire.report.StatelessXmlReporter.serializeTestClass(StatelessXmlReporter.java:207) at org.apache.maven.plugin.surefire.report.StatelessXmlReporter.testSetCompleted(StatelessXmlReporter.java:152) at org.apache.maven.plugin.surefire.report.StatelessXmlReporter.testSetCompleted(StatelessXmlReporter.java:51) at org.apache.maven.plugin.surefire.report.TestSetRunListener.testSetCompleted(TestSetRunListener.java:193) at org.apache.maven.plugin.surefire.booterclient.output.ForkClient$TestSetCompletedListener.handle(ForkClient.java:139) at org.apache.maven.plugin.surefire.booterclient.output.ForkClient$TestSetCompletedListener.handle(ForkClient.java:128) at org.apache.maven.plugin.surefire.booterclient.output.ForkedProcessEventNotifier.notifyEvent(ForkedProcessEventNotifier.java:232) at org.apache.maven.plugin.surefire.booterclient.output.ForkClient.handleEvent(ForkClient.java:361) at org.apache.maven.plugin.surefire.booterclient.output.ForkClient.handleEvent(ForkClient.java:57) at org.apache.maven.plugin.surefire.booterclient.output.ThreadedStreamConsumer$Pumper.run(ThreadedStreamConsumer.java:91) at java.lang.Thread.run(Thread.java:748)Caused by: java.io.FileNotFoundException: /var/folders/wz/5hl931hj1ml_k_p4_f_x1hq1lwp2d4/T/stdout5335614658614860966deferred (No such file or directory) at java.io.FileInputStream.open0(Native Method) at java.io.FileInputStream.open(FileInputStream.java:195) at java.io.FileInputStream.<init>(FileInputStream.java:138) at org.apache.maven.surefire.shared.io.output.DeferredFileOutputStream.writeTo(DeferredFileOutputStream.java:321) at org.apache.maven.plugin.surefire.report.Utf8RecodingDeferredFileOutputStream.writeTo(Utf8RecodingDeferredFileOutputStream.java:85) at org.apache.maven.plugin.surefire.report.StatelessXmlReporter.addOutputStreamElement(StatelessXmlReporter.java:502) ... 13 more
{code}

We changed the implementation of {{Utf8RecodingDeferredFileOutputStream}} but the behavior should be the same. I guess the method {{Utf8RecodingDeferredFileOutputStream.free()}} is called after the test set has finished but the problem is that the internal variable {{storage}} is not set to NULL.

[~tibordigana]

After debugging 3.0.0-M4 that's the sequence I see that make it fail:
 First run:
 1) First test run is completed and _TestSetRunListner.testSetCompleted_ is called
 2) _DeferredFileOutputStream_ is associated with this test run and because there is a lot of output _tempFile_ is created
 3) _StatelessXmlReporter_ writes one _WrappedReportEntry_ into xml results
 4) _DeferredFileOutputStream_ is freed and temporary file is deleted

Rerun:
 5) Rerun is completed and _TestSetRunListner.testSetCompleted_ is called again
 6) New DeferredFileOutputStream is created and associated with "rerun" _WrappedReportEntry_

7) _StatelessXmlReporter_ has 2 _WrappedReportEntry_ one from the original run and the second from the rerun and tries to uses them to generate new xml report

8) It tries to use _DeferredFileOutputStream_ from first test run entry but the file been freed/deleted after the first run
 9) We get _java.io.FileNotFoundException_

In our project we fixed it by releasing patched version where we mark _DeferredFileOutputStream.outputFile.deletOnExit()_ when we call free() method instead of deleting the file straight away.
 In case of a parallel run this works fine since a fork exits pretty fast, but in a big project that runs sequentially on the same JVM it can create a lot of temporary files before JVM exits so not sure if its a good general solution.

I haven't checked the code of later version, but if temp file gets delete on test set complete event it should have the same problem. 

IMO the best solution could be having "allRerunsFinished" event for this test set and only then free resources. 

[~himos]
You'r right, something like "allRerunsFinished" is needed and we are aiming for new events sending from JVM marking the rerun in M6.

We have also faced this problem.

https://ci-hadoop.apache.org/job/HBase/job/HBase-PreCommit-GitHub-PR/job/PR-3550/4/artifact/yetus-jdk11-hadoop3-check/output/patch-unit-hbase-server.txt/*view*/

There are two flaky tests and the jenkis job is broken when passing the xml test report. I downloaded the xml and it is exactly the same with the description of this issue.

{noformat}
  <testcase name="testMultiplePuts" classname="org.apache.hadoop.hbase.replication.regionserver.TestReplicationValueCompressedWAL" time="14.723">
    <flakyFailure message="Waited too much time for replication" type="java.lang.AssertionError">
      <stackTrace><![CDATA[java.lang.AssertionError: Waited too much time for replication
	at org.apache.hadoop.hbase.replication.regionserver.TestReplicationValueCompressedWAL.testMultiplePuts(TestReplicationValueCompressedWAL.java:56)
]]></stackTrace>
      <system-out><![CDATA[Formatting using clusterid: testClusterID
Formatting using clusterid: testClusterID
]]></system-out>
      <system-err><![CDATA[
{noformat}

{noformat}
  <testcase name="killOneMasterRS" classname="org.apache.hadoop.hbase.replication.TestReplicationKillMasterRSWithSeparateOldWALs" time="10.053">
    <flakyFailure message="Waited too much time for queueFailover replication. Waited 54548ms." type="java.lang.AssertionError">
      <stackTrace><![CDATA[java.lang.AssertionError: Waited too much time for queueFailover replication. Waited 54548ms.
]]></stackTrace>
      <system-out><![CDATA[Formatting using clusterid: testClusterID
Formatting using clusterid: testClusterID
]]></system-out>
      <system-err><![CDATA[
{noformat}

Looking foward on the fix in 3.0.0-M6...

Looks like this is biting us over in HBase and Phoenix. We eagerly await a resolution to this issue!

Do we have any updates here? [~tibordigana]

Thanks~

We also faced the same issue.  Running flaky and a lot of logs with rerun enabled causes CDATA error.


I am able to reproduce this issue with 3.0.0-M5. The next version 3.0.0-M6-SNAPSHOT fixed this issue.
I am closing this issue as a duplicate of the old Jira issue SUREFIRE-1697.
I will describe what commit could fix this problem.

Ah good. Thank you. Look forward on the 3.0.0-M6 release!

[~zhangduo]
[~himos]
The commits for 2.22.3 and 3.0.0-M6, respectively:
https://gitbox.apache.org/repos/asf?p=maven-surefire.git;a=commit;h=5542cf4c43e1e20db9f5944c2eabec8edbba47eb
https://gitbox.apache.org/repos/asf?p=maven-surefire.git;a=commit;h=82212233fe18859bae13d66feecd58123e9df794

