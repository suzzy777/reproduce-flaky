Stacktrace:
{noformat}
self = <apache_beam.options.pipeline_options_test.PipelineOptionsTest testMethod=test_value_provider_options>

    def test_value_provider_options(self):
      class UserOptions(PipelineOptions):
        @classmethod
        def _add_argparse_args(cls, parser):
          parser.add_value_provider_argument(
              '--pot_vp_arg1',
              help='This flag is a value provider')
    
          parser.add_value_provider_argument(
              '--pot_vp_arg2',
              default=1,
              type=int)
    
          parser.add_argument(
              '--pot_non_vp_arg1',
              default=1,
              type=int
          )
    
      # Provide values: if not provided, the option becomes of the type runtime vp
      options = UserOptions(['--pot_vp_arg1', 'hello'])
      self.assertIsInstance(options.pot_vp_arg1, StaticValueProvider)
      self.assertIsInstance(options.pot_vp_arg2, RuntimeValueProvider)
      self.assertIsInstance(options.pot_non_vp_arg1, int)
    
      # Values can be overwritten
      options = UserOptions(pot_vp_arg1=5,
                            pot_vp_arg2=StaticValueProvider(value_type=str,
                                                            value='bye'),
                            pot_non_vp_arg1=RuntimeValueProvider(
                                option_name='foo',
                                value_type=int,
                                default_value=10))
      self.assertEqual(options.pot_vp_arg1, 5)
      self.assertTrue(options.pot_vp_arg2.is_accessible(),
                      '%s is not accessible' % options.pot_vp_arg2)
      self.assertEqual(options.pot_vp_arg2.get(), 'bye')
>     self.assertFalse(options.pot_non_vp_arg1.is_accessible())
E     AssertionError: True is not false

apache_beam/options/pipeline_options_test.py:426: AssertionError
{noformat}


Observation: all failures I saw so far are failing in -pytest suites. Pytest speeds up the execution by running tests concurrently. I think the test fails due to side-effects in test execution.

In particular, evaluation of options.pot_non_vp_arg1.is_accessible relies on a particular value of a class attribute [1], which can be modified by a different test in [2].

[1] https://github.com/apache/beam/blob/19dcb5c10c270b367cb4f897090eae2f700b11a6/sdks/python/apache_beam/options/value_provider.py#L93
[2] https://github.com/apache/beam/blob/19dcb5c10c270b367cb4f897090eae2f700b11a6/sdks/python/apache_beam/options/value_provider.py#L117

cc: [~pabloem] [~udim]

Actually pytest (when executed with xdist) parallelizes the execution within multiple processes (workers), but within one worker tests are running sequentially. The flake may be caused by the order of the test execution. Similar issue: BEAM-9026.

