Thanks for bringing this up, [~dserfe]. I don't fully understand the intention of this Jira issue, though. We're not using {{edu.illinois:nondex-maven-plugin:2.1.1:nondex}} as part of our build system. Therefore, the test instability your mentioning isn't present. Looking through the code, it appears that the production code is also deterministically generating the String (I haven't checked the entire code, though, tbh).

Based on what I found about the {{edu.illinois:nondex-maven-plugin}} (from [this Github source|https://github.com/TestingResearchIllinois/NonDex]), it verifies that the code behaves in the same way among different JVM implementations. Is this correct?

If you think that it makes sense to add this plugin to Flink's build pipeline we should actually approach this on a more systematic level: 
1. Discussing why this plugin should be added in the first place (e.g. in the dev ML). Where are the benefits to the Flink users?
2. If the community agrees we should add the plugin to the build pipeline and fix all tests in one go.

WDYT?

Hi Matthias, thanks for your comments!

To clarify:
1) This PR is to fix a flaky test which can lead to potential test failures, the test failures may happen even when running the test suite (maybe multiple times) without NonDex. 
> it verifies that the code behaves in the same way among different JVM implementations.  Is this correct?
Yes, NonDex is designed to detect such potential issues, so the issues can be fixed to avoid test failures happening. It's fine not to add this plugin because it will have some overheads, but I believe it would be good for the builds if the test failures could be fixed.

2) Root cause of test failures:
[testSerializerTree|#L35] calls method getSerializerTree(Line 43) to return a string, and then assert it equals to an expected one. In line 291 of [getSerializerTree|#L270], it calls another method getGenericTypeTree([https://github.com/dserfe/flink/blob/a4ad86fb083f90503938a9c3d816cdda9dc22427/flink-java/src/main/java/org/apache/flink/api/java/Utils.java#L301])  that leverages API getDeclaredFields to return an array containing the names of Field objects reflecting all the declared fields. However, the elements in the array returned are not sorted and are not in any particular order (from the [documentation|[https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html]]). When iterating the array, the elements are inserted to a string and returned. As a result, testSerializerTree asserts a non-deterministic string equals a deterministic one, so the test will fail during some runs.

If you don't like the proposed fix, please let me know and we can discuss other fixes!

