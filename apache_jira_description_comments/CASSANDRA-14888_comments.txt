There are a few more mbeans that don't unregister, not just the ones listed here.
Proposed patch [here|https://github.com/apache/cassandra/compare/trunk...stillalex:CASSANDRA-14888], I also tried adding a new test (java, not dtest) based on an existing one, if I got something wrong please let me know. I went for the simplest test there is, I'm open to suggestions if there is a need to improve it right away.


Updated the patch to include the table parts as well (with a test), making CASSANDRA-14819 superfluous.

Thanks!  [~djoshi3]: would you like to review this?

Yes, I’ll be happy to review it.

[~stillalex], thank you for the patch. I have imported it to a branch in my repo. https://github.com/apache/cassandra/compare/trunk...dineshjoshi:14888-trunk?expand=1 I will review it shortly and provide you feedback.

[~djoshi] any feedback?

You should to add a unit test to cover MVs as well as they have some conditionally registered metrics.

There are utility methods to create the metrics and automatically deregister them on cleanup. All metrics with issues just skipped that and created the metrics manually. Really this does fix the issue, but by doing more manual cleanup.

While this does fix the problem, I think we should change these metrics to register appropriately (which also may provide keyspace metrics) or clean up that mechanism up a bit to be easier (maybe using annotations, reflection or something?). We should try to enforce the registering and automatic cleanup or make it easier and more obvious instead of setting a further precedence to do it manually.

In the past the "wall of removeMetric" calls in {{release}} was never kept in sync and while the junit should work, this actually isn't the first time a unit test like this has been made (3rd to my knowledge) and there are some "flakey" scenarios with dropping tables, and the test actually doesn't capture everything (although we can improve that).

This is the 4th (that I remember at least) time this issue came up, I think we should look at this in a bigger picture sense. That said if you are not interested or don't have bandwidth we could just patch this up a little here as it has definite value and have a follow up ticket to try to prevent the issue in future.

[~cnlwsu] thanks for the great feedback! I am interested in providing a more in-depth solution to this, I'd just need a bit of guidance. Let me take another stab at it based on your observations and we can continue from there.

[~cnlwsu] I took another look and while the "wall of removes" is very fragile, it seems to be the way to go, or at least I couldn't find a cleaner example in Cassandra of how to approach this. One idea that I had was to have the factory keep track of registered & perform release when needed (looking at KeyspaceMetrics: basically move allMetrics into KeyspaceMetricNameFactory and add a #release method for cleanup).
Again, I would love a pointer to prior art here, so I get a better understanding of expectations.

Also, regarding the tests, could you expand a bit on what is missing? I could improve this bit so it covers MVs, not sure about the flakey scenarios.

Hi [~stillalex], my apologies for the delay and thanks [~cnlwsu] for the great feedback. I'll try to review over this week.

[~stillalex] I'm revisiting this ticket. I think we need to go further to ensure that future metrics are released properly without excessive manual intervention. We should follow a pattern where we use a factory to register all kinds of releasable metrics which doesn't seem to be the case right now. Once we have that we can iterate over them in the release method much like what we do for Metric instances and call release on them.

[~stillalex] and I chatted about the approach. For the time being we're going to take the minimally invasive approach and try to eliminate the manual release of all metrics in {{TableMetrics}}.

thanks [~djoshi] for the discussion. I agree with the minimal approach, but there was a fair amount of shuffle, mainly contained inside the TableMetrics class.
I pushed a new version of the patch, let me know what you think. [0]
Changes:
* TableMetrics: I tried to aggregate all registered metrics into the 'all' set, which now contains 'release' wrappers for each registered metric. it was a bit of a stretch, so if there's a way to make the code cleaner I'm open to further changing it.
* KeyspaceMetrics: this was a much simpler setup, most changes are trivial refactoring of functions. release happens automatically thanks to the factory keeping track of registered metrics.
* added some tests covering metrics unregistering for tables and keyspaces

[0] https://github.com/apache/cassandra/compare/trunk...stillalex:CASSANDRA-14888

[~stillalex] The only thing that immediately jumps out to me about the newer patch is that we might want to stay consistent with the new [helper methods|https://github.com/apache/cassandra/pull/493/files#diff-40a2ae61c758454cc6166903250edbdfR953] for metric creation added in CASSANDRA-8272. (i.e. It might also [make sense|https://github.com/apache/cassandra/compare/trunk...stillalex:CASSANDRA-14888#diff-40a2ae61c758454cc6166903250edbdfR876] to have a version of {{createTableTimer()}} that doesn't take a keyspace metric, just an alias...)

Finished looking at the tests, and had a couple minor comments:

1.) {{TableMetricsTest#testMetricsCleanupOnDrop()}} already uses {{recreateTable()}}, so you might be able to get away with using a descriptive static name for the table.
2.) We might not need {{OrderedJUnit4ClassRunner}} in {{KeyspaceMetricsTest}}.
3.) {{KeyspaceMetricsTest#registerUnregister()}} could perhaps be renamed {{testMetricsCleanupOnDrop()}} to follow the pattern from {{TableMetricsTest}}.
4.) Echoing [~cnlwsu]'s earlier suggestion, a brief test around un-registering MV metrics (ex. in {{ViewWriteMetrics}}) would be a good idea. (The number of metrics there is small, so I don't expect we'd need to add any more complex machinery for that. The unit test would catch leaks going forward...)

Otherwise, this patch looks like a nice step in the right direction.

thanks [~maedhroz] for the review. I have rebased & updated the patch. [0]
the only changes still missing are the tests for ViewWriteMetrics, which I will add soon.
please take a look and let me know if it looks good so far.


[0] https://github.com/apache/cassandra/compare/trunk...stillalex:CASSANDRA-14888

[~stillalex] Two minor things:

1.) I think there's a [minor typo|https://github.com/apache/cassandra/compare/trunk...stillalex:CASSANDRA-14888#diff-8f3132f0fa1e03f77fd29bc9b8163fe3R65] in {{KeyspaceMetricsTest#testMetricsCleanupOnDrop()}}.

2.) You probably don't need the JavaDoc comment for {{ReleasableMetric#release()}}, unless there's something more substantial we need to say there.

Just heads up...there also may have been an issue (which is now resolved) w/ compiling trunk at the time you rebased.

Do you mind creating a quick PR so we can discuss the patch inline?

[~stillalex] There is one real problem I think we need to address. In {{KeyspaceMetricNameFactory#release()}}, we call {{createMetricName()}}, which adds names to {{allMetrics}}, _while we're iterating over_ {{allMetrics}}. You'll either need to store {{MetricName}} instances in {{allMetrics}}, so you can avoid the call to {{createMetricName()}}, or go back to something more like the approach in {{TableMetrics}}, keeping the metric lifecycle separate from the factory itself. (I lean toward the {{TableMetrics}} approach, given the helper methods might make it a little easier to add things going forward, and it doesn't fragment the responsibilities of the factory, but I could be wrong there.)

By the way, when we get to a good place (maybe after the MV test is ready) I'll cherry-pick your commit into my fork and run it through CircleCI. (The free tier hardware is a bit lacking...)

[~maedhroz] created a PR https://github.com/apache/cassandra/pull/629

bq. Just heads up...there also may have been an issue (which is now resolved) w/ compiling trunk at the time you rebased.
that explains it :)

I rebased the PR, followed your suggestions on the Keyspace metrics it's now very close to the Table metrics version.
Re. MV test I added a test but it's not complete, it doesn't seem to create those specific metrics, I'm not sure if I missed something.

[~stillalex] I dropped a few comments around the MV metrics test in the PR. Otherwise, this is getting really close.

thanks for the review so far.
the last pending issue I guess is related to the MV test itself. as suggested I moved the test over but I still don't see any of the metrics I was looking for (from ViewWriteMetrics): ViewReplicasAttempted, ViewReplicasSuccess, ViewWriteLatency, ViewPendingMutations.

This is what is created during the current test,(and all of this gets correctly cleaned):
{code}
org.apache.cassandra.metrics.Table.AdditionalWriteLatencyNanos.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.AdditionalWrites.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.AllMemtablesHeapSize.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.AllMemtablesLiveDataSize.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.AllMemtablesOffHeapSize.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.AnticompactionTime.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.BloomFilterDiskSpaceUsed.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.BloomFilterFalsePositives.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.BloomFilterFalseRatio.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.BloomFilterOffHeapMemoryUsed.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.BytesAnticompacted.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.BytesFlushed.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.BytesMutatedAnticompaction.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.BytesPendingRepair.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.BytesRepaired.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.BytesUnrepaired.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.BytesValidated.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.CasCommitLatency.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.CasCommitTotalLatency.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.CasPrepareLatency.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.CasPrepareTotalLatency.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.CasProposeLatency.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.CasProposeTotalLatency.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.ColUpdateTimeDeltaHistogram.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.CompactionBytesWritten.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.CompressionMetadataOffHeapMemoryUsed.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.CompressionRatio.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.CoordinatorReadLatency.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.CoordinatorScanLatency.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.CoordinatorWriteLatency.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.DroppedMutations.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.EstimatedColumnCountHistogram.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.EstimatedPartitionCount.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.EstimatedPartitionSizeHistogram.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.IndexSummaryOffHeapMemoryUsed.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.KeyCacheHitRate.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.LiveDiskSpaceUsed.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.LiveSSTableCount.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.LiveScannedHistogram.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.MaxPartitionSize.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.MeanPartitionSize.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.MemtableColumnsCount.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.MemtableLiveDataSize.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.MemtableOffHeapSize.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.MemtableOnHeapSize.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.MemtableSwitchCount.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.MinPartitionSize.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.MutatedAnticompactionGauge.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.OldVersionSSTableCount.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.PartitionsValidated.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.PendingCompactions.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.PendingFlushes.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.PercentRepaired.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.RangeLatency.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.RangeTotalLatency.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.ReadLatency.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.ReadRepairRequests.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.ReadTotalLatency.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.RecentBloomFilterFalsePositives.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.RecentBloomFilterFalseRatio.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.RepairJobsCompleted.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.RepairJobsStarted.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.RepairedDataInconsistenciesConfirmed.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.RepairedDataInconsistenciesUnconfirmed.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.RepairedDataTrackingOverreadRows.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.RepairedDataTrackingOverreadTime.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.ReplicaSideFilteringProtectionRequests.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.RowCacheHit.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.RowCacheHitOutOfRange.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.RowCacheMiss.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.SSTablesPerReadHistogram.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.ShortReadProtectionRequests.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.SnapshotsSize.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.SpeculativeFailedRetries.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.SpeculativeInsufficientReplicas.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.SpeculativeRetries.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.SpeculativeSampleLatencyNanos.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.SyncTime.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.TombstoneFailures.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.TombstoneScannedHistogram.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.TombstoneWarnings.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.TotalDiskSpaceUsed.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.UnleveledSSTables.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.ValidationTime.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.WaitingOnFreeMemtableSpace.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.WriteLatency.junit.tablemetricstest_materialized_view_cleanup, org.apache.cassandra.metrics.Table.WriteTotalLatency.junit.tablemetricstest_materialized_view_cleanup
{code}

Updated the PR, will leave the final decision re. MV tests to you [~maedhroz]. 
Let me know if the PR needs extra work in any way.

+1

[~stillalex] Kicked off a [CI run|https://app.circleci.com/pipelines/github/maedhroz/cassandra/5/workflows/357e99c0-fa27-4027-8b01-3909eac71e4c]...

bq. but I still don't see any of the metrics I was looking for

Right, those metrics (from {{ViewWriteMetrics}}) belong to {{StorageProxy}}, and they would only show up if you searched for {{ViewWrite}}, not the view table name.

thanks [~maedhroz] let me know how the CI results look like.
just in case it got missed in the wall of updates, this PR also includes CASSANDRA-14819.

[~stillalex] The unit and in-JVM dtests look pretty good so far. I'm sorting out some hardware issues w/ the Python dtests, but I'll let you know when those resolve.

I kicked off a [test run|https://circleci.com/workflow-run/de5f7cdb-06b6-4869-9d19-81a145e79f3f]. However, I see a couple failures. Could you both please ensure that they are indeed unrelated / flaky? 

The one failure in the unit tests appears to be CASSANDRA-14238 resurrected, which we've already noted.

In the dtests, the {{TestPushedNotifications}} failures have already been noted in CASSANDRA-15877.

There also appears to be some good evidence that {{test_simple_repair_order_preserving - repair_tests.repair_test.TestRepair}} is [flaky|https://issues.apache.org/jira/browse/CASSANDRA-15170?focusedCommentId=16909454&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-16909454].

...and {{hintedhandoff_test.TestHintedHandoffConfig}} appears to be covered by CASSANDRA-15865.

[~djoshi] After the known issues above, the only other failure appears to be [compression_test.TestCompression|https://app.circleci.com/pipelines/github/dineshjoshi/cassandra/48/workflows/23de1e8d-108e-4138-8ea6-a650965920a5/jobs/2550], but CASSANDRA-15782 should have addressed that. Not exactly sure what's going on there, given that fix was committed to {{cassandra-dtests}} at the [beginning of May|https://github.com/apache/cassandra-dtest/commit/da7fcefb16d16af8924cda35c0a6a63ad553694f].

I've made a note in CASSANDRA-15782, but I think it's pretty safe to say this patch isn't the cause of any of the regressions we're seeing. I'd say we're ready to commit.

+1

committed to [trunk|https://github.com/apache/cassandra/commit/1731e2fe84c1da2a6f4b0d1f73b8fd76c88b3acd]. Thank you for the contribution [~stillalex] and reviews [~maedhroz], [~cnlwsu]. [~stillalex] if you have backports to 3.0 and 3.11, I'll be happy to take a look.

Hi [~Ryangdotson]. Does the file you attached ({{ExtendedDictionary.java}}) relate to this issue? It doesn't look like it, but just making sure...

