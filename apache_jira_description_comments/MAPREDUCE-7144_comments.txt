OK, this was a tricky race condition but eventually I came up with something.

The biggest issue is that killing a container is not a synchronous operation. On a loaded node, it might take some time for the NM to fully terminate the container process. In the meantime, the AppMaster thinks that the reducers have stopped, even though they haven't. Originally I wanted to wait until {{TaskAttempt.isFinished()}} is true and it helped to some degree but it's not enough. If container has been assigned to an attempt and you want to kill it, you have to make sure that the respective container is fully stopped.

Another solution is introduce some sort of sync killing method to {{ContainerManagementProtocol}}. Unfortunately it's marked as Public/Stable, so we can't just add a new method, if we want to strcitly follow the interface stability guidelines.

Anyway I have a POC which _seems_ to be working. Even if it isn't I'd like to hear some opinions - [~jlowe] [~wilfreds] what do you think about this?

Just realized that the new field in TaskTAttemptKilledEvent is not necessary. Also, we don't iterate through all attempts in the {{transition()}} method in TaskImpl.java.

Anyway the POC demonstrates the basic idea.

