Good one lads.  Can I help w/ the bugfix?

Thanks [~saint.ack@gmail.com]! Let me firstly give a try.

Fine with me as long as it is fixed : ) 

The patch is inflated by PB changes. In the patch, I did the following:

1) During region open request, we pass a isOpenForLogReplay flag. If a region is opened for recovery purpose and current RS hasn't distributedLogReplay on, just fail the region open request
2) When SplitLogWorker pick work items, it will verify if current work item recovery mode is matching current RS's log recovery mode.(splitting or replay) otherwise not pick it up.
3) We have existing logic where HMaster will recreate all unsigned work items in ZK upon restart. Therefore, unsigned ZK workitems can reflect 

Release Note: You have to drain all remaining split log work items before rolling upgrade/change distributedLogReplay config  

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12644031/hbase-11094.patch
  against trunk revision .
  ATTACHMENT ID: 12644031

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 10 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 lineLengths{color}.  The patch introduces the following lines longer than 100:
    +      result = result && (hasIsOpenForDistributedLogReplay() == other.hasIsOpenForDistributedLogReplay());
+              new java.lang.String[] { "OpenInfo", "ServerStartCode", "IsOpenForDistributedLogReplay", });

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/9486//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/9486//console

This message is automatically generated.

{quote}
-1 lineLengths. The patch introduces the following lines longer than 100:
{quote}
Those lines are generated by PB not "my code".

Jeffrey the patch attached contains changes to PB generated classes that are not touched by the patch (mapreduce.proto, etc), and these things should not be there: 
{code}
-       * <code>optional .TableSchema table = 1;</code>
+       * <code>optional .TableSchema table = 3;</code>
{code}
Can you regenerate the patch pls. 

- This should go inside the  RegionOpenInfo, not OpenRegionRequest. OpenRegionRequest is for multiple regions. Different regions can be in diferent log replay state. 
{code}
+  // open region for distributedLogReplay
+  optional bool isOpenForDistributedLogReplay = 3;
{code}
- Small typo:
{code}+      // check if current RS has distributedLogReplayh on
{code}
- 
{code}
+        throw new ServiceException(new DoNotRetryIOException("This OpenRegion request is opening "
{code}
Once that is thrown, do we retry on a different server? Do we run out of retries? 
 - At a higher level, on a rolling restart cluster, even if the master has upgraded, 0.98 RS's won't execute the new SLW and RSRpcServices changes in the patch. So even though the master will create the split task for replay, one of the 0.98 RS's can grab the task and do a split log instead, right? Can also happen that some of the log files for the same server are split and some are replayed. 

After some offline discussions with Jeffrey, it seems that we do not want to add a lot of complexity for dealing with this incapability. Should we disable the feature by default again, commit this patch, and re-enable it post 1.0? If we commit something like the attached patch, it would mean rolling restarts from 1.0 to 1.1 (if it enables by default) will not be broken, but 0.98 -> 1.1 will be. [~saint.ack@gmail.com] wdyt? 

The v2 patch addressed [~enis] comments.

Thanks [~enis] for the comments!

{quote}
the patch attached contains changes to PB generated classes that are not touched by the patch (mapreduce.proto
{quote}
That's the leftover from others. Even we run protobuf compile against trunk branch without my changes, the mapreduce changes still shows up.

{quote}
This should go inside the RegionOpenInfo
{quote}
Fixed in v2.

{quote}
Once that is thrown, do we retry on a different server? Do we run out of retries
{quote}
It will retry though I still created a new exception in v2 so that it's more explicit.

{quote}
0.98 RS's won't execute the new SLW and RSRpcServices changes in the patch
{quote}
That's right. The old code doesn't have the change so we cannot do a rolling upgrade(have to stop & restart everything). There are some options discussed with Enis offline but not clean and one time effort. It seems we still need to turn it off by default for 1.0 to support rolling upgrade.  


bq.  If we commit something like the attached patch, it would mean rolling restarts from 1.0 to 1.1 (if it enables by default) will not be broken, but 0.98 -> 1.1 will be. Stack wdyt?

Sorry.  Do you mean 0.98 to 1.1 in the above?  Or did you mean 0.98 to 1.0?  If the former, I think it ok to require you go via 1.0? (I like this feature so pardon my reluctance at going without for one more release).

bq. Release Note: You have to drain all remaining split log work items before rolling upgrade/change distributedLogReplay config

How does operator know when this has been done?

Did we decide the exception subpackage an anti-pattern?  Or maybe it was ok for new exceptions?  (Im talking about location for RegionServerConfigMismatchException).

+  * @param isOpenForReplay

Above is the name of the method, not the name of the attribute.  Suggest rename as openForReplay

Yeah, change this name too:

+    optional bool isOpenForDistributedLogReplay = 4;

Its not possible to mix old and new style log splitting in the one cluster?

So, IIRC, its the RS that does the replay of log edits?  The master has already opened the regions before it assigns out the split log task?  Yeah, I suppose its not possible for a mix of both types of replay in a cluster.

Worse case would be crash just after the Master had been upgraded?  In this case, all regionservers would respond that the regions could not be opened in replay mode?  Right?

Or, if a crash after the M and the RS have been rolling restarted.  Only one RS will be able to open regions.  It could take a while  for the M to figure this out going by the below:

             needNewPlan = true;
+            if(t instanceof RegionServerConfigMismatchException) {
+              // try another server & reset retry count
+              i--;
+            }

Could the rolling restart proceed during this time and in this way we'd get ourselves out of the spot?

What happens on non-upgraded servers when we pass the code path that this is inserted into?

+      // RS & Master have to see the same configuration values
+      if((slt.getMode() == ZooKeeperProtos.SplitLogTask.RecoveryMode.UNKNOWN)
+         || (slt.getMode() == ZooKeeperProtos.SplitLogTask.RecoveryMode.LOG_REPLAY && 
+            !HLogSplitter.isDistributedLogReplay(conf)) 
+         || (slt.getMode() == ZooKeeperProtos.SplitLogTask.RecoveryMode.LOG_SPLITTING &&
+            HLogSplitter.isDistributedLogReplay(conf))) {
+        LOG.debug("Didn't grab Task=" + path + " because recovery mode isn't expected. Current " +
+        		"task has recovery mode=" + slt.getMode());
+        return;
+      }

The solution is pretty clean.  What would happen in the above scenarios?

We could go another version without turning on this feature but when we go to turn it on the next time, will we run into a new issue that precludes our making it the default?

What if we turn it on by default but add to the release notes that IF YOU ARE GOING TO ROLLING RESTART, turn this off?  That too exotic?

Good stuff lads.

{quote}
bq. Release Note: You have to drain all remaining split log work items before rolling upgrade/change distributedLogReplay config

How does operator know when this has been done?
{quote}
This reminds me of HBASE-10544

Thanks for the comments!

{quote}
How does operator know when this has been done?
{quote}
HBASE-10544 will definitely help. In the meantime, an administrator needs to wait for all split tasks under znode splitLogZNode clear and then restart master & then all region servers. 

{quote}
Im talking about location for RegionServerConfigMismatchException
{quote}
Any suggestion where I should put it?

{quote}
Suggest rename as openForReplay. 
{quote}
Ok. I'll change the name in the next patch.

{quote}
Or, if a crash after the M and the RS have been rolling restarted.  Only one RS will be able to open regions.  It could take a while  for the M to figure this out going by the below
{quote}
Yes for regions in recovery while for a normal(without any recovery work) region move/open will not be affected. Also rolling restart of RSs shouldn't take long time.

{quote}
What happens on non-upgraded servers when we pass the code path that this is inserted into?
{quote}
That's the reason that blocks rolling upgrade. If both old & upgraded code are aware of different recovery mode(including the JIRA patch), we're fine.

{quote}
 What would happen in the above scenarios?
{quote}
The above code make sure SplitLogWorker only grab split log task intended with the same recovery mode. 




The v3 patch addressed [~saint.ack@gmail.com] comments. Thanks.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12646940/hbase-11094-v3.patch
  against trunk revision .
  ATTACHMENT ID: 12646940

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 13 new or modified tests.

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/9603//console

This message is automatically generated.

I took a quick looks.  Seems good to me.

How to proceed?  Commit this with fat release note and a note in the 1.0 doc that we need to include in the upgrade doc the steps this issues requires rolling upgrading and then discuss on dev in 1.0 thread if we should turn off distributed log replay for 1.0?

Rebase to master branch.

Since there are still two/three months away from 1.0 being cut, I'd suggest I can commit this patch and close the JIRA. Open a new one to set distributedLogReplay off by default and wait till we're about to cut 1.0 with a clear way on what will be included in 1.0 and rolling upgrading strategy by then.

Sounds good to me.

- Agreed with Stack. This should not be in the exceptions package. Also not in hbase-client, but hbase-server. 
{code}
+++ hbase-client/src/main/java/org/apache/hadoop/hbase/exceptions/RegionServerConfigMismatchException.java
{code}
- Instead of SplitLogTask getting conf, can we pass directly the mode to constructor. SLT should be like a POJO. Also when the worker creates tasks, should it set the mode as well? It seems that it is just setting the mode right now to UNKNOWN for everything other than UNASSIGNED. 
- In case of task resubmit, can it be the case that the master has changed configuration? Should we get the mode from existing node, and set it to the new task? 

- Some offline discussions with Jeffrey: 
 -- It seems that this will be simpler if the region servers do not look into their confs, but just use whatever the split log task or region assignment tells them.  
 -- If there are split log tasks in master restart, but the master now has a different configuration for replay, we can abort the master, or wait for all the tasks to drain until we change to the new configuration. 
bq.  How to proceed? Commit this with fat release note and a note in the 1.0 doc that we need to include in the upgrade doc the steps this issues requires rolling upgrading and then discuss on dev in 1.0 thread if we should turn off distributed log replay for 1.0?
makes sense.

bq. It seems that this will be simpler if the region servers do not look into their confs, but just use whatever the split log task or region assignment tells them.

There is precedent for this.  The RS does not fully start until it has talked to Master and gotten a few critical configs passed from the Master (rather than reading its own local values).

Nice work lads.

Thanks [~enis] for the review! The v4 patch covers Enis comments. Basically, we only keep log splitting/replay config setting in master(splitlogmanager) and region server will use what's told by master.

When log recovery mode config setting is changed and restart master, master will delay its recovery mode update till all outstanding log split tasks drained in order to avoid asking people manually check the drain status(basically no release note for the JIRA) 

Thanks

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12648054/hbase-11094-v4.patch
  against trunk revision .
  ATTACHMENT ID: 12648054

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 26 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 lineLengths{color}.  The patch introduces the following lines longer than 100:
    +        result = result && (hasOpenForDistributedLogReplay() == other.hasOpenForDistributedLogReplay());
+              new java.lang.String[] { "Region", "VersionOfOfflineNode", "FavoredNodes", "OpenForDistributedLogReplay", });

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
                       org.apache.hadoop.hbase.regionserver.wal.TestLogRollingNoCluster

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/9671//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9671//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9671//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9671//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9671//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9671//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9671//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9671//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9671//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9671//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/9671//console

This message is automatically generated.

The line length > 100 warning is from protobuf generated files. The TestLogRollingNoCluster doesn't fail in my env. The v5 addressed a test failure from my local full test suite run. Thanks.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12648358/hbase-11094-v5.patch
  against trunk revision .
  ATTACHMENT ID: 12648358

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 29 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 lineLengths{color}.  The patch introduces the following lines longer than 100:
    +        result = result && (hasOpenForDistributedLogReplay() == other.hasOpenForDistributedLogReplay());
+              new java.lang.String[] { "Region", "VersionOfOfflineNode", "FavoredNodes", "OpenForDistributedLogReplay", });

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
     

     {color:red}-1 core zombie tests{color}.  There are 1 zombie test(s): 	at org.apache.hadoop.hbase.regionserver.wal.TestLogRolling.testLogRollOnDatanodeDeath(TestLogRolling.java:371)

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/9691//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9691//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9691//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9691//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9691//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9691//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9691//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9691//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9691//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9691//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/9691//console

This message is automatically generated.

Rebase & resubmit.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12649686/hbase-11094-v5.1.patch
  against trunk revision .
  ATTACHMENT ID: 12649686

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 35 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 lineLengths{color}.  The patch introduces the following lines longer than 100:
    +        result = result && (hasOpenForDistributedLogReplay() == other.hasOpenForDistributedLogReplay());
+              new java.lang.String[] { "Region", "VersionOfOfflineNode", "FavoredNodes", "OpenForDistributedLogReplay", });

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

     {color:red}-1 core tests{color}.  The patch failed these unit tests:
     

     {color:red}-1 core zombie tests{color}.  There are 1 zombie test(s): 	at org.apache.hadoop.hbase.regionserver.TestHRegion.testWritesWhileGetting(TestHRegion.java:3499)

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/9738//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9738//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9738//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9738//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9738//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9738//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9738//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9738//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9738//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9738//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/9738//console

This message is automatically generated.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment 
  http://issues.apache.org/jira/secure/attachment/12649723/hbase-11094-v5.1.patch
  against trunk revision .
  ATTACHMENT ID: 12649723

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 35 new or modified tests.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  The javadoc tool did not generate any warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 lineLengths{color}.  The patch introduces the following lines longer than 100:
    +        result = result && (hasOpenForDistributedLogReplay() == other.hasOpenForDistributedLogReplay());
+              new java.lang.String[] { "Region", "VersionOfOfflineNode", "FavoredNodes", "OpenForDistributedLogReplay", });

  {color:green}+1 site{color}.  The mvn site goal succeeds with this patch.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-HBASE-Build/9739//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9739//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9739//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9739//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9739//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9739//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9739//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9739//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9739//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-HBASE-Build/9739//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html
Console output: https://builds.apache.org/job/PreCommit-HBASE-Build/9739//console

This message is automatically generated.

[~saint.ack@gmail.com] & [~enis] are you all right for me to check it in? Once 1.0 branch is cut, I'll create a JIRA to turn distributedLogReplay off by default depends on the rolling upgrade story for 1.0. Thanks.

From my understanding of the patch, MasterFS has a volatile replay mode that can only change once all existing split log tasks are drained. Once that happens, all new tasks are created with this new mode. 

- Do we still need the changes in open Region RPC? Can we use the region in zk under replaying nodes be the canonical state? 
- Is this relevant? 
{code}
+++ hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransactionOnCluster.java
+      cluster.startRegionServer();
{code}

- Is this relevant? 
{code}
-  private static final int slaves = 3; // also used for testing HTable pool size
+  private static final int slaves = 5; // also used for testing HTable pool size
{code}

- Wrong log name: 
{code}
+  public void testGetPreviousRecoveryMode() throws Exception {
+    LOG.info("testNotAcquireTaskOfDifferentRecoveryMode");
{code}

Thanks [~enis] for the reviews! 

{quote}
Once that happens, all new tasks are created with this new mode.
{quote}
Yes.

{quote}
Do we still need the changes in open Region RPC? Can we use the region in zk under replaying nodes be the canonical state?
{quote}
Because the source of truth is in Master and also the recovering state in ZK might be stale. Eventually in the future, the recovering state in ZK will be removed as well. 

{quote}
Is this relevant?
{quote}
Both test cases fixed in the patch are flaky so just fix them in the patch as they're trivial.

{quote}
Wrong log name:
{quote}
Good catch! I'll fix this when I commit the patch.

I'm targeting check in this patch Friday if there is no objections.






Ok, thanks Jeffrey. +1 for the patch. 

Thanks for all the reviews! I've integrated the fix into master branch. Will apply the patch to 0.98 after I resolve some conflicts & run full test suit.

FAILURE: Integrated in HBase-TRUNK #5200 (See [https://builds.apache.org/job/HBase-TRUNK/5200/])
HBase-11094: Distributed log replay is incompatible for rolling restarts (jeffreyz: rev 55cecc9679ca04796450d75e72cfc89e1f3b4970)
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/SplitLogManager.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestWALReplay.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransactionOnCluster.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/ServerManager.java
* hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/RequestConverter.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterFileSystem.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/SplitLogTask.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/HLogSplitter.java
* hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/AdminProtos.java
* hbase-protocol/src/main/protobuf/Admin.proto
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterFileSystem.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/handler/ServerShutdownHandler.java
* hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestHLogMethods.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SplitLogWorker.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestSplitLogManager.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/TestSerialization.java
* hbase-protocol/src/main/protobuf/ZooKeeper.proto
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/handler/HLogSplitterHandler.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestHLogSplit.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestAssignmentManager.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitLogWorker.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMultiParallel.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/handler/MetaServerShutdownHandler.java
* hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/ZooKeeperProtos.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerNoMaster.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java


bq. Once 1.0 branch is cut, I'll create a JIRA to turn distributedLogReplay off by default depends on the rolling upgrade story for 1.0. 

What does the above mean [~jeffreyz]?

Can you add a release note saying what has been implemented?  I know you say '(basically no release note for the JIRA)' above but would be good for us devs trying to follow along (or who may have to debug it in future).  Please describe what was implemented

To be clear, mode is LOG_REPLAY currently in master?

Reading over the patch, it looks good.  I'm not sure I am clear on all that is going on but I like the sound of it (smile).





{quote}
What does the above mean Jeffrey Zhong?
{quote}
I'll leave distributedLogReplay on by default in master branch. Since we can't rolling upgrade from pre 0.98.4 version to 1.0, I'll create a JIRA to see if we need to turn it off by default to support rolling upgrade to 1.0. 

{qutoe}
Can you add a release note saying what has been implemented?
{quote}
Done.

{quote}
To be clear, mode is LOG_REPLAY currently in master?
{quote}
Yes.

Thanks for looking at this again.


FAILURE: Integrated in HBase-0.98-on-Hadoop-1.1 #319 (See [https://builds.apache.org/job/HBase-0.98-on-Hadoop-1.1/319/])
HBASE-11094: Distributed log replay is incompatible for rolling restarts (jeffreyz: rev 34ae4a94d0795850642915f117b7d1257b418ca5)
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/handler/ServerShutdownHandler.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransactionOnCluster.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/handler/HLogSplitterHandler.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SplitLogWorker.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/SplitLogManager.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestHLogMethods.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerNoMaster.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestAssignmentManager.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/HLogSplitter.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitLogWorker.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestDistributedLogSplitting.java
* hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestSplitLogManager.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/handler/MetaServerShutdownHandler.java
* hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/RequestConverter.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestHLogSplit.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMultiParallel.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterFileSystem.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
* hbase-protocol/src/main/protobuf/ZooKeeper.proto
* hbase-server/src/test/java/org/apache/hadoop/hbase/TestSerialization.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/SplitLogTask.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/ServerManager.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterFileSystem.java
* hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/AdminProtos.java
* hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/ZooKeeperProtos.java
* hbase-protocol/src/main/protobuf/Admin.proto
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestWALReplay.java


SUCCESS: Integrated in HBase-0.98 #338 (See [https://builds.apache.org/job/HBase-0.98/338/])
HBASE-11094: Distributed log replay is incompatible for rolling restarts (jeffreyz: rev 34ae4a94d0795850642915f117b7d1257b418ca5)
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/HLogSplitter.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestHLogSplit.java
* hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/AdminProtos.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/handler/HLogSplitterHandler.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/SplitLogManager.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/handler/ServerShutdownHandler.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerNoMaster.java
* hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java
* hbase-protocol/src/main/protobuf/Admin.proto
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/ServerManager.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SplitLogWorker.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitLogWorker.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterFileSystem.java
* hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/RequestConverter.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestSplitLogManager.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/TestSerialization.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestDistributedLogSplitting.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/SplitLogTask.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/handler/MetaServerShutdownHandler.java
* hbase-protocol/src/main/protobuf/ZooKeeper.proto
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestHLogMethods.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestAssignmentManager.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransactionOnCluster.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestWALReplay.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterFileSystem.java
* hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/ZooKeeperProtos.java
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java
* hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMultiParallel.java


I've integrated the patch to 0.98 branch as well. Thanks.

SUCCESS: Integrated in HBase-TRUNK #5209 (See [https://builds.apache.org/job/HBase-TRUNK/5209/])
hbase-11094: https://issues.apache.org/jira/browse/HBASE-11094(addendum) (jeffreyz: rev 5136c70554b6ead2f91e99b53389b10710639127)
* hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java


Closing this issue after 0.99.0 release. 

