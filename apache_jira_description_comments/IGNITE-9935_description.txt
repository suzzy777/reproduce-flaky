GridCacheBinaryObjectMetadataExchangeMultinodeTest.testReadRequestBlockedOnUpdatingMetadata fails sometimes on master branch.
Example of recent failure on TC: https://ci.ignite.apache.org/viewLog.html?buildId=2103824&tab=buildResultsDiv&buildTypeId=IgniteTests24Java8_BinaryObjects#testNameId8753246349372607337
Typical log output:

{noformat}
junit.framework.AssertionFailedError: unexpected size of syncMap:  expected:<1> but was:<0>
    at junit.framework.Assert.fail(Assert.java:57)
    at junit.framework.Assert.failNotEquals(Assert.java:329)
    at junit.framework.Assert.assertEquals(Assert.java:78)
    at junit.framework.Assert.assertEquals(Assert.java:234)
    at junit.framework.TestCase.assertEquals(TestCase.java:401)
    at org.apache.ignite.internal.processors.cache.binary.GridCacheBinaryObjectMetadataExchangeMultinodeTest$3.handleDiscoveryMessage(GridCacheBinaryObjectMetadataExchangeMultinodeTest.java:198)
    at org.apache.ignite.testframework.GridTestUtils$DiscoverySpiListenerWrapper.onDiscovery(GridTestUtils.java:165)
    at org.apache.ignite.spi.discovery.tcp.ServerImpl$RingMessageWorker.notifyDiscoveryListener(ServerImpl.java:5642)
    at org.apache.ignite.spi.discovery.tcp.ServerImpl$RingMessageWorker.processCustomMessage(ServerImpl.java:5521)
    at org.apache.ignite.spi.discovery.tcp.ServerImpl$RingMessageWorker.processMessage(ServerImpl.java:2837)
    at org.apache.ignite.spi.discovery.tcp.ServerImpl$RingMessageWorker.processMessage(ServerImpl.java:2611)
    at org.apache.ignite.spi.discovery.tcp.ServerImpl$MessageWorker.body(ServerImpl.java:7188)
    at org.apache.ignite.spi.discovery.tcp.ServerImpl$RingMessageWorker.body(ServerImpl.java:2700)
    at org.apache.ignite.internal.util.worker.GridWorker.run(GridWorker.java:120)
    at org.apache.ignite.spi.discovery.tcp.ServerImpl$MessageWorkerThread.body(ServerImpl.java:7119)
    at org.apache.ignite.spi.IgniteSpiThread.run(IgniteSpiThread.java:62)
{noformat}

It seems there are two issues in this test:
1. executorService used without arguments - the task can be executed on a random node instead of the specified one.
2. not stable synchronization between message processing and metadata reading.
