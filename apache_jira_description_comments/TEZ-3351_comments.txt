Draft version of the changes.

[~sseth] [~rajesh.balamohan] I've attached the WIP version of the patch. Please take a look and tell me if the approach is fine.

Quick question: Do we need to check if this would work with history parser, when someone chooses only DAG level info to be logged.

* Adding config option to enable granular log level for ATSv15.
* Changed grouping to use one file for 1000 dags in a session.

{color:green}+1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12818523/TEZ-3351.01.patch
  against master revision 55f5186.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 3 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/1857//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/1857//console

This message is automatically generated.

General questions:
   - Is ATSHistoryLogLevel sufficient to control the amount of data pushed to ATS? What if dags have 5000 counters each? Would that be handled easily by ATS? Do we need a knob to stop publishing counters at certain levels? Additionally, why do we need so many logging levels? 

Comments on the patch: 
   - ATSHistoryLogLevel sounds ATS specific. ATS is actually a plugin and therefore it seems wrong to add a plugin specific API to the generic APIs of TezClient and DAGClient. A generic API to set logging level makes sense though. 
  - "private static final int DAGS_PER_GROUP = 1000;"  - why a 1000? What kind of perf impact will we see if we scale this value upwards or downwards? Can this be changed dynamically per app? 
  - Why does a TIMELINE_GROUPID related vars belong to TezDAGId? 
 
{code}
    } else {
367	      // dagId does not exist, lets check at AM level.
368	      if (!amAtsHistoryLogLevel.shouldLog(eventType.getAtsHistoryLogLevel())) {
369	        return false;
370	      }
371	    }
{code}
  - this approach is incorrect for recovery cases. If the dag object exists, it should be easy enough to retrieve the log level and add it back to the map. This does raise an issue for cache misses though. 

  - testATSLogLevelNone() - not sure how this is actually testing that there is no data being generated by the history logger?
  - there needs to be additional testing for a level that does not match ALL/NONE  
  - ATSVHistoryLoggingService has not been changed?

  -  "Find better way to wait for the events to be drained." - timing based tests have a tendency to be flaky. Would be good to change this to more definitive. 


 

 

bq. private static final int DAGS_PER_GROUP = 1000;

Additional question: given that the timeline cache plugin is hosted within Timeline and could potentially need to handle multiple different deployments of Tez, how would it handle different buidls where the group count is different? 

Splitting into subtasks.

