I think this is a nice addition to our tool belt, thanks. It will be useful at least until we have JUnit 5's [@RepeatedTest|https://junit.org/junit5/docs/5.0.1/api/org/junit/jupiter/api/RepeatedTest.html] available, someday.

Maybe we could add a few implementations for our most common runners, as proposed [here|https://github.com/adelapena/cassandra/commit/65cd829bc73e1a9232e11c0bcfbeaccee2536c53], so we can use annotations such as {{@RunWith(RepeatableRunner.Parameterized.class)}}, {{@RunWith(RepeatableRunner.BMUnitRunner.class)}}, etc., wdyt?

I would add a note in the documentation about how many tests alter singletons and so they don't work with the repeatable runner.

We could put the number of repetitions in a {{RepeatableRunner}} constant for better visibility, and maybe also add the possibility of reading the value from a JVM property, as it's done [here|https://github.com/adelapena/cassandra/blob/65cd829bc73e1a9232e11c0bcfbeaccee2536c53/test/unit/org/apache/cassandra/RepeatableRunner.java#L35]. The later is probably not so useful since we are nevertheless forced to temporary modify the code when setting the runner.

[~adelapena] your proposal sounds great. I modified it a bit to have a param for the runner for the number of repetitions. Sounds most convenient imo wdyt?. Please check the [4.0 PR|https://github.com/apache/cassandra/pull/1006] not the trunk one for the final version. {{DirectoriesTest}} modifications are not part of the PR, I left it there just for your convenience to test it.

I really like the idea of using an annotation for the runner parameters. I spent some time trying to figure out how to extend {{RunWith}} without any success, but the additional annotation approach is simple and effective. Indeed, we could get rid of the inner subclasses for wrapped runners and just add the wrapped runner to the annotation, so we can use something like:
{code:java}
@RunWith(RepeatableRunner.class)
@RepeatableRunnerConfiguration(iterations = 5, runner = Parameterized.class)
{code}
Or:
{code:java}
@RunWith(RepeatableRunner.class)
@RepeatableRunnerConfiguration(iterations = 5, runner = BMUnitRunner.class)
{code}
Differently from the subclasses approach, this should work with any kind of runner. I gave it a go [here|https://github.com/adelapena/cassandra/commit/b222faab156e119bfa82b6b8d7e909c22d8be12c] (some examples included), wdyt? 

Also, I wonder if we should mention the existence of this runner in the [documentation for testing|https://github.com/apache/cassandra/blob/trunk/doc/source/development/testing.rst#unit-testing].

Ha! I was thinking along the same lines but for some reason it didn't occur to me as you did it which is super-nice imo. This is great as it is completely Runner agnostic and non-invasive. Also I think junit5 repeats at the method level not a _class_ level.

What we have is good but I want to linger here a bit more and see if I can somehow avoid having to decorate a class with Runners. Like call a Runner programmatically and pass the test class as a param...

{quote}What we have is good but I want to linger here a bit more and see if I can somehow avoid having to decorate a class with Runners. Like call a Runner programmatically and pass the test class as a param...
{quote}
Being able to run repeatedly without modifying the test would certainly be great, looking forward to something that can do that.

There's no easy way to make ant take a runner as a parameter. You have to create a plugin etc etc. Alternatives are also quite involved. If I have not lost track of the things I think what we have is the most reasonable option.

Edit: Added doc notes.

{quote}There's no easy way to make ant take a runner as a parameter. You have to create a plugin etc etc. Alternatives are also quite involved. If I have not lost track of the things I think what we have is the most reasonable option.
{quote}
Agree, I played a bit with {{JUnitTask}}/{{JStackJUnitTask}} while working on the CircleCI multiplexer and it seems probably more involved than we need right now. I think it's better if we commit this as it is, so it starts to help us with 4.0 immediately. We can always come back later to add the repetitions as an Ant parameter.
{quote}Edit: Added doc notes.
{quote}
The new section about flaky tests is nice, thanks. I've left a couple of very minor suggestions in the PR that can be addressed during commit.

I think we are ready to commit. IMO it would be nice if we added the runner also to 3.0 and 3.11, it should be a straightforward merge.

Also, just a reminder to remove the usages of {{RepeatableRunner}} that we have added as examples ({{DirectoriesTest}}, {{ColumnFilterTest}}, {{AssureSufficientLiveNodesTest}} and {{SpeculativeRetryParseTest}})

[~adelapena] all cleaned, PRs for all versions pushed & CI attached. I'll wait for your final +1 before committing just to be on the safe side now we have all PRs up.

Looks good to me, +1, I think this runner will be very helpful :)

Hey, I just sneaked into this ticket quickly and it seems great tool for someone new who can use it locally. I suggest you mentioned it on the mailing list, same as the other multiplexer from last week so people don't miss it as it will be very helpful! Thank you!

