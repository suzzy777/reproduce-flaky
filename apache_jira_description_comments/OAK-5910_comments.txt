initial patch. javadocs missing on Segment class, but it proves the idea.
fyi [~mduerig], [~frm].

benchmarks are very flaky (more a reflection on the state of benchmarks rather than the patch itself):

ConcurrentReadWriteTest on Trunk:

{noformat}
# ConcurrentReadWriteTest          C     min     10%     50%     90%     max       N 
Oak-Segment-Tar                    1      55      98     119     145     307     494
# ConcurrentReadWriteTest          C     min     10%     50%     90%     max       N 
Oak-Segment-Tar                    1      75      98     118     137     246     504
# ConcurrentReadWriteTest          C     min     10%     50%     90%     max       N 
Oak-Segment-Tar                    1      45      93     112     132     221     532
{noformat}

ConcurrentReadWriteTest with patch:
{noformat}
# ConcurrentReadWriteTest          C     min     10%     50%     90%     max       N 
Oak-Segment-Tar                    1      40      97     116     135     252     517
# ConcurrentReadWriteTest          C     min     10%     50%     90%     max       N 
Oak-Segment-Tar                    1      44     100     121     142     242     493
# ConcurrentReadWriteTest          C     min     10%     50%     90%     max       N 
Oak-Segment-Tar                    1      71      92     112     128     256     537
{noformat}

it seems that the patch version looks better over multiple test runs but even the unpatched version spikes on my machine, so the results are borderline useless, unless someone can propose a reliable way to run benchmarks without the spikiness.


I think it makes perfect sense exploring this avenue. Apart from the potential performance gain it will also remove some memory pressure and the pressure on gc that goes along with it. It is probably hard to measure this with our (micro) benchmarks as its effect will likely only show once there is a certain load on a system (many tar files, fragmentation etc). Still it would be good to run more of our benchmarks for a longer time to guard us against "surprises". E.g. like in OAK-5853, where an innocent looking change did not have the desired effect in one area but had an adverse effect in another one. 

Finally do we actually know why the code currently copies the data in these places? Is this a leftover or was there an intention behind this?

applied the patch with http://svn.apache.org/viewvc?rev=1790536&view=rev

Created OAK-6056 for the SegmentStream investigation.

Bulk close for 1.7.0

