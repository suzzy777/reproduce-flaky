pivotal-jbarrett opened a new pull request #597:
URL: https://github.com/apache/geode-native/pull/597


   The external Cache pointer is not valid when destruction has started. Use
   internal CacheImpl from RegionInternal.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


pdxcodemonkey commented on a change in pull request #597:
URL: https://github.com/apache/geode-native/pull/597#discussion_r421069121



##########
File path: cppcache/src/CacheImpl.cpp
##########
@@ -640,13 +640,16 @@ void CacheImpl::readyForEvents() {
   }
 }
 
-bool CacheImpl::isPoolInMultiuserMode(std::shared_ptr<Region> regionPtr) {
-  const auto& poolName = regionPtr->getAttributes().getPoolName();
+bool CacheImpl::isPoolInMultiuserMode(std::shared_ptr<Region> region) {
+  const auto& poolName = region->getAttributes().getPoolName();
 
   if (!poolName.empty()) {
-    auto poolPtr = regionPtr->getCache().getPoolManager().find(poolName);
-    if (poolPtr != nullptr && !poolPtr->isDestroyed()) {
-      return poolPtr->getMultiuserAuthentication();
+    auto pool = static_cast<RegionInternal&>(*region)
+                    .getCacheImpl()
+                    ->getPoolManager()
+                    .find(poolName);
+    if (pool && !pool->isDestroyed()) {
+      return pool->getMultiuserAuthentication();

Review comment:
       Before I approve and merge this, can you explain why a method on CacheImpl is checking whether its pool is in multi-user mode by getting hold of _another_ CacheImpl pointer and extracting the pool from there?  Why can't CacheImpl call getPoolManager() on itself?  This code is super weird without any context...




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


pdxcodemonkey commented on a change in pull request #597:
URL: https://github.com/apache/geode-native/pull/597#discussion_r421125677



##########
File path: cppcache/src/CacheImpl.cpp
##########
@@ -640,13 +640,16 @@ void CacheImpl::readyForEvents() {
   }
 }
 
-bool CacheImpl::isPoolInMultiuserMode(std::shared_ptr<Region> regionPtr) {
-  const auto& poolName = regionPtr->getAttributes().getPoolName();
+bool CacheImpl::isPoolInMultiuserMode(std::shared_ptr<Region> region) {
+  const auto& poolName = region->getAttributes().getPoolName();
 
   if (!poolName.empty()) {
-    auto poolPtr = regionPtr->getCache().getPoolManager().find(poolName);
-    if (poolPtr != nullptr && !poolPtr->isDestroyed()) {
-      return poolPtr->getMultiuserAuthentication();
+    auto pool = static_cast<RegionInternal&>(*region)
+                    .getCacheImpl()
+                    ->getPoolManager()
+                    .find(poolName);
+    if (pool && !pool->isDestroyed()) {
+      return pool->getMultiuserAuthentication();

Review comment:
       Also is there a reasonable way to write a test to force this race condition or something?
   




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


pivotal-jbarrett commented on a change in pull request #597:
URL: https://github.com/apache/geode-native/pull/597#discussion_r422321681



##########
File path: cppcache/src/CacheImpl.cpp
##########
@@ -640,13 +640,16 @@ void CacheImpl::readyForEvents() {
   }
 }
 
-bool CacheImpl::isPoolInMultiuserMode(std::shared_ptr<Region> regionPtr) {
-  const auto& poolName = regionPtr->getAttributes().getPoolName();
+bool CacheImpl::isPoolInMultiuserMode(std::shared_ptr<Region> region) {
+  const auto& poolName = region->getAttributes().getPoolName();
 
   if (!poolName.empty()) {
-    auto poolPtr = regionPtr->getCache().getPoolManager().find(poolName);
-    if (poolPtr != nullptr && !poolPtr->isDestroyed()) {
-      return poolPtr->getMultiuserAuthentication();
+    auto pool = static_cast<RegionInternal&>(*region)
+                    .getCacheImpl()
+                    ->getPoolManager()
+                    .find(poolName);
+    if (pool && !pool->isDestroyed()) {
+      return pool->getMultiuserAuthentication();

Review comment:
       It's a really good question. I suppose it could use `this` and some that the `region` is owned by `this` `CacheImpl`.  Even better refactor.
   
   Testing this would require a concurrency test framework we don't have and then magical timing. You could write a flaky test that tries over and over in hopes of hitting it but not hitting it doesn't prove it is fixed. Through analysis of the object lifecycle we can at least guarantee that if we get into this call that `this` `CacheImpl` has not been destructed.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


codecov-io commented on pull request #597:
URL: https://github.com/apache/geode-native/pull/597#issuecomment-626123939


   # [Codecov](https://codecov.io/gh/apache/geode-native/pull/597?src=pr&el=h1) Report
   > Merging [#597](https://codecov.io/gh/apache/geode-native/pull/597?src=pr&el=desc) into [develop](https://codecov.io/gh/apache/geode-native/commit/b10e7fedc4166f998301b863d04fc67765a2b681&el=desc) will **increase** coverage by `0.02%`.
   > The diff coverage is `100.00%`.
   
   [![Impacted file tree graph](https://codecov.io/gh/apache/geode-native/pull/597/graphs/tree.svg?width=650&height=150&src=pr&token=plpAqoqGag)](https://codecov.io/gh/apache/geode-native/pull/597?src=pr&el=tree)
   
   ```diff
   @@             Coverage Diff             @@
   ##           develop     #597      +/-   ##
   ===========================================
   + Coverage    73.17%   73.20%   +0.02%     
   ===========================================
     Files          638      638              
     Lines        50847    50845       -2     
   ===========================================
   + Hits         37209    37219      +10     
   + Misses       13638    13626      -12     
   ```
   
   
   | [Impacted Files](https://codecov.io/gh/apache/geode-native/pull/597?src=pr&el=tree) | Coverage Δ | |
   |---|---|---|
   | [cppcache/include/geode/Cache.hpp](https://codecov.io/gh/apache/geode-native/pull/597/diff?src=pr&el=tree#diff-Y3BwY2FjaGUvaW5jbHVkZS9nZW9kZS9DYWNoZS5ocHA=) | `100.00% <ø> (ø)` | |
   | [cppcache/src/Cache.cpp](https://codecov.io/gh/apache/geode-native/pull/597/diff?src=pr&el=tree#diff-Y3BwY2FjaGUvc3JjL0NhY2hlLmNwcA==) | `88.00% <ø> (+3.38%)` | :arrow_up: |
   | [cppcache/src/CacheImpl.hpp](https://codecov.io/gh/apache/geode-native/pull/597/diff?src=pr&el=tree#diff-Y3BwY2FjaGUvc3JjL0NhY2hlSW1wbC5ocHA=) | `95.12% <ø> (ø)` | |
   | [cppcache/src/CacheImpl.cpp](https://codecov.io/gh/apache/geode-native/pull/597/diff?src=pr&el=tree#diff-Y3BwY2FjaGUvc3JjL0NhY2hlSW1wbC5jcHA=) | `77.98% <100.00%> (ø)` | |
   | [cppcache/src/ServerLocation.hpp](https://codecov.io/gh/apache/geode-native/pull/597/diff?src=pr&el=tree#diff-Y3BwY2FjaGUvc3JjL1NlcnZlckxvY2F0aW9uLmhwcA==) | `85.41% <0.00%> (-4.17%)` | :arrow_down: |
   | [cppcache/src/ThinClientPoolDM.cpp](https://codecov.io/gh/apache/geode-native/pull/597/diff?src=pr&el=tree#diff-Y3BwY2FjaGUvc3JjL1RoaW5DbGllbnRQb29sRE0uY3Bw) | `75.35% <0.00%> (-0.08%)` | :arrow_down: |
   | [cppcache/src/ThinClientRegion.cpp](https://codecov.io/gh/apache/geode-native/pull/597/diff?src=pr&el=tree#diff-Y3BwY2FjaGUvc3JjL1RoaW5DbGllbnRSZWdpb24uY3Bw) | `55.89% <0.00%> (-0.06%)` | :arrow_down: |
   | [cppcache/src/ThinClientRedundancyManager.cpp](https://codecov.io/gh/apache/geode-native/pull/597/diff?src=pr&el=tree#diff-Y3BwY2FjaGUvc3JjL1RoaW5DbGllbnRSZWR1bmRhbmN5TWFuYWdlci5jcHA=) | `75.46% <0.00%> (ø)` | |
   | [cppcache/src/TcrEndpoint.cpp](https://codecov.io/gh/apache/geode-native/pull/597/diff?src=pr&el=tree#diff-Y3BwY2FjaGUvc3JjL1RjckVuZHBvaW50LmNwcA==) | `55.53% <0.00%> (+0.56%)` | :arrow_up: |
   | [cppcache/src/TcrConnection.cpp](https://codecov.io/gh/apache/geode-native/pull/597/diff?src=pr&el=tree#diff-Y3BwY2FjaGUvc3JjL1RjckNvbm5lY3Rpb24uY3Bw) | `71.96% <0.00%> (+0.62%)` | :arrow_up: |
   | ... and [2 more](https://codecov.io/gh/apache/geode-native/pull/597/diff?src=pr&el=tree-more) | |
   
   ------
   
   [Continue to review full report at Codecov](https://codecov.io/gh/apache/geode-native/pull/597?src=pr&el=continue).
   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
   > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
   > Powered by [Codecov](https://codecov.io/gh/apache/geode-native/pull/597?src=pr&el=footer). Last update [b10e7fe...f12fa00](https://codecov.io/gh/apache/geode-native/pull/597?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org


Commit 4929011adfeecb2cfac6559df171cba9e33ae9b9 in geode-native's branch refs/heads/develop from Jacob Barrett
[ https://gitbox.apache.org/repos/asf?p=geode-native.git;h=4929011 ]

GEODE-8063: Fixes access violation. (#597)

The external Cache pointer is not valid when destruction has started.
Refactored to not be static and use this CacheImpl.
Removed unused private static method from API files.

