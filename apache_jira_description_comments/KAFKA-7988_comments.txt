Failed again: [https://jenkins.confluent.io/job/apache-kafka-test/job/2.2/32/]
{quote}java.lang.AssertionError: expected:<Some(2)> but was:<Some(149)> at org.junit.Assert.fail(Assert.java:88) at org.junit.Assert.failNotEquals(Assert.java:834) at org.junit.Assert.assertEquals(Assert.java:118) at org.junit.Assert.assertEquals(Assert.java:144) at kafka.server.DynamicBrokerReconfigurationTest.$anonfun$verifyMarkPartitionsForTruncation$4(DynamicBrokerReconfigurationTest.scala:629) at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:158) at kafka.server.DynamicBrokerReconfigurationTest.$anonfun$verifyMarkPartitionsForTruncation$3(DynamicBrokerReconfigurationTest.scala:622) at kafka.server.DynamicBrokerReconfigurationTest.$anonfun$verifyMarkPartitionsForTruncation$3$adapted(DynamicBrokerReconfigurationTest.scala:621) at scala.collection.Iterator.foreach(Iterator.scala:941) at scala.collection.Iterator.foreach$(Iterator.scala:941) at scala.collection.AbstractIterator.foreach(Iterator.scala:1429) at scala.collection.IterableLike.foreach(IterableLike.scala:74) at scala.collection.IterableLike.foreach$(IterableLike.scala:73) at scala.collection.AbstractIterable.foreach(Iterable.scala:56) at kafka.server.DynamicBrokerReconfigurationTest.verifyMarkPartitionsForTruncation(DynamicBrokerReconfigurationTest.scala:621) at kafka.server.DynamicBrokerReconfigurationTest.testThreadPoolResize(DynamicBrokerReconfigurationTest.scala:583){quote}

Failed again: [https://builds.apache.org/blue/rest/organizations/jenkins/pipelines/kafka-2.2-jdk8/runs/30/log/?start=0]
{quote}kafka.server.DynamicBrokerReconfigurationTest > testThreadPoolResize FAILED java.lang.AssertionError: Invalid threads: expected 6, got 5: List(ReplicaFetcherThread-0-0, ReplicaFetcherThread-0-1, ReplicaFetcherThread-0-0, ReplicaFetcherThread-0-2, ReplicaFetcherThread-0-1) at org.junit.Assert.fail(Assert.java:88) at org.junit.Assert.assertTrue(Assert.java:41) at kafka.server.DynamicBrokerReconfigurationTest.verifyThreads(DynamicBrokerReconfigurationTest.scala:1260) at kafka.server.DynamicBrokerReconfigurationTest.maybeVerifyThreadPoolSize$1(DynamicBrokerReconfigurationTest.scala:531) at kafka.server.DynamicBrokerReconfigurationTest.resizeThreadPool$1(DynamicBrokerReconfigurationTest.scala:550) at kafka.server.DynamicBrokerReconfigurationTest.reducePoolSize$1(DynamicBrokerReconfigurationTest.scala:536) at kafka.server.DynamicBrokerReconfigurationTest.$anonfun$testThreadPoolResize$3(DynamicBrokerReconfigurationTest.scala:559) at scala.collection.immutable.Range.foreach$mVc$sp(Range.scala:158) at kafka.server.DynamicBrokerReconfigurationTest.verifyThreadPoolResize$1(DynamicBrokerReconfigurationTest.scala:558) at kafka.server.DynamicBrokerReconfigurationTest.testThreadPoolResize(DynamicBrokerReconfigurationTest.scala:572){quote}

Removed Fix Version 2.2.1 as this issue is not blocking that release.

Failed in 2.3:Â [https://builds.apache.org/blue/organizations/jenkins/kafka-2.3-jdk8/detail/kafka-2.3-jdk8/47/tests]
{code:java}
java.lang.AssertionError: expected:<{0=10, 1=11, 2=12, 3=13, 4=4, 5=5, 6=6, 7=7, 8=8, 9=9}> but was:<{0=10, 1=11, 2=12, 3=13, 4=14, 5=5, 6=6, 7=7, 8=8, 9=9}>
at org.junit.Assert.fail(Assert.java:89)
at org.junit.Assert.failNotEquals(Assert.java:835)
at org.junit.Assert.assertEquals(Assert.java:120)
at org.junit.Assert.assertEquals(Assert.java:146)
at kafka.server.DynamicBrokerReconfigurationTest.stopAndVerifyProduceConsume(DynamicBrokerReconfigurationTest.scala:1353)
at kafka.server.DynamicBrokerReconfigurationTest.verifyThreadPoolResize$1(DynamicBrokerReconfigurationTest.scala:615)
at kafka.server.DynamicBrokerReconfigurationTest.testThreadPoolResize(DynamicBrokerReconfigurationTest.scala:629)
{code}

Since this is not a blocker issue, as part of the 2.6.0 release process I'm changing the fix version to `2.6.1` and `2.7.0`. If this is incorrect, please respond and discuss on the "[DISCUSS] Apache Kafka 2.6.0 release" discussion mailing list thread.

No failures reported for this in over a year. As part of the 2.7.0 release process, I'm optimistically closing this ticket. If another failure occurs, we can re-open.

why exist the same thread name  ?
{code:java}
Invalid threads: expected 6, got 5: List(ReplicaFetcherThread-0-0, ReplicaFetcherThread-0-1, ReplicaFetcherThread-0-0, ReplicaFetcherThread-0-2, ReplicaFetcherThread-0-1
{code}


[~mjsax] for the same thread name issue, I plan to add the monitor which listen the thread creation. but lack of the api to support it. 
I want to check whether the user take the wrong usage ? 

