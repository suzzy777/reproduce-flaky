Hi [~k-rus]Â 

do you want to be involved in this patch so you provide fixes for all branches or are you ok with us doing that?

We should probably rename all these tests as well:

{code}
/cassandra-3.0$ find . -type f -name '*Tests\.java'
./test/unit/org/apache/cassandra/utils/UUIDTests.java
./test/unit/org/apache/cassandra/cql3/BatchTests.java
cassandra-3.11$ find . -type f -name '*Tests\.java'
./test/unit/org/apache/cassandra/utils/UUIDTests.java
./test/unit/org/apache/cassandra/cql3/BatchTests.java
cassandra-4.0$ find . -type f -name '*Tests\.java'
./test/unit/org/apache/cassandra/utils/UUIDTests.java
./test/unit/org/apache/cassandra/cql3/BatchTests.java
cassandra-4.1$ find . -type f -name '*Tests\.java'
./test/unit/org/apache/cassandra/utils/UUIDTests.java
./test/unit/org/apache/cassandra/auth/CassandraAuthorizerTruncatingTests.java
./test/unit/org/apache/cassandra/service/paxos/uncommitted/PaxosUncommittedTests.java
./test/unit/org/apache/cassandra/cql3/BatchTests.java
cassandra$ find . -type f -name '*Tests\.java'
./test/unit/org/apache/cassandra/utils/UUIDTests.java
./test/unit/org/apache/cassandra/auth/CassandraAuthorizerTruncatingTests.java
./test/unit/org/apache/cassandra/service/paxos/uncommitted/PaxosUncommittedTests.java
./test/unit/org/apache/cassandra/cql3/BatchTests.java
{code}

And add a check so any file \*Test\*.java throws a warning or shtg along those lines?

[~bereng] yep, thats what that should do. 

I prepared this for 4.1 (1). This should go to trunk as well.

For 3.11 and 4.0, we should just fix the classes but without the check. That check was done for 4.1 and trunk only so we do not have checkstyle infrastructure in place for earlier branches.

(1) https://github.com/apache/cassandra/pull/1915

EDIT: I need to play with that regexp a little bit, it does not fix it as I wanted.

So I will fix the filenames, so it can go to all branches.

[~smiklosovic] do you mean you will add the check to your PR?

[~bereng] I updated Fix versions. Can you check and correct if needed?

I would fix it for 3.0 as well.

So, you should rename all files I mentioned in my first comment PLUS we need to add checkstyle check for cassandra-4.1 and trunk branches.

If you apply that checkstyle for tests, we should rename KilllerForTests class to "TestKiller", "ParametrizedTests" to "ParametrizedTest" and "NonParametrizedTests" to "NonParametrizedTest" as these classes would be false positives.

For reference, 4.1 branch with all these changes is here: https://github.com/apache/cassandra/pull/1915/files

I do not expect that it would differ from trunk. So the remaining task is to prepare 3.0, 3.11 and 4.0 and I do the 4.1 and trunk.

We agreed on Slack that I should finish this so Ruslan made me the assignee.

Ping me when you need a reviewer

trunk: https://github.com/apache/cassandra/pull/1920
4.1: https://github.com/apache/cassandra/pull/1919
4.0: https://github.com/apache/cassandra/pull/1918
3.11: https://github.com/apache/cassandra/pull/1917
3.0: https://github.com/apache/cassandra/pull/1916

It is all building in Jenkins, that takes a while ... I will update this comment to include builds as well. [~bereng] good to review in the meanwhile so I might cancel the builds if there is some issue.

bq. reviewed by Brandon Williams for CASSANDRA-17964

Well, since I'm your default pocket reviewer according to this, +1. ;)

Do IIUC correctly you're trying to detect the string 'Tests' in filenames? I would change the regexp to fail on anything with the word 'Test' that is not '\*Test.java'. I am thinking files named like 'TestForFeatureA.java' should also trigger the warning.

[~brandon.williams] :D yeah you got it haha. 

[~bereng] right ... not sure what the regexp should be like. That module checks only names of classes not names of files so ".java" is irrelevant here IMHO.

The problem I am seeing is I almost got bit by this when we split test classes. Where ViewFilteringTest and ViewFilteringTest2 were the obvious options but wrong. Wouldn't a regexp checking for end of line work? sthg like .\*Test$

bq. like .*Test$

That seems the most correct to me.

That particular regexp indeed makes sense but if you try it yourself, you will see here are dozens of classes which do not adhere to that policy because there is a lot of helper classes we use in tests.

Basically, we need negative regexp telling how classes should NOT look like, not how they should. I covered case like "it should not end on Tests" but I do not know how to specify that PLUS your requirement to not contain "Test" anywhere but at the end.
I ll try to spend more time on this if somebody does not come with that regexp first.

Indeed, this is going to be tricky:

{code}
$ find test/ | grep -v 'Test.java$' | grep 'java$'|wc -l
205
{code}

I'm not sure we're going to be able to get around things named like 'TableStatsTestBase.java'

I would have to look into checkstyle to see if it's possible. Sorry [~stefan.miklosovic] if you feel I am shoveling stuff to you this could be merged and it's already an improvement. We could open a new ticket for the rest if you prefer it.

I dont think you are shoveling anything tbh.

I tried this regexp:
{code:java}
^(?!(?:Test))(?!.*?(?:Tests)).*$
{code}
These are the failures:
{code:java}
/anttasks/TestHelper.java:26:14: Name 'TestHelper' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/distributed/org/apache/cassandra/distributed/test/TestBaseImpl.java:47:14: Name 'TestBaseImpl' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/distributed/org/apache/cassandra/distributed/upgrade/UpgradeTestBase.java:113:25: Name 'TestVersions' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/distributed/org/apache/cassandra/distributed/upgrade/UpgradeTestBase.java:151:25: Name 'TestCase' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java:72:25: Name 'TestLoader' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/cql3/validation/entities/VirtualTableTest.java:990:25: Name 'TestTrigger' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/cql3/validation/operations/CreateTest.java:767:25: Name 'TestTrigger' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/db/memtable/TestMemtable.java:23:14: Name 'TestMemtable' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/diag/DiagnosticEventServiceTest.java:214:25: Name 'TestEvent1' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/diag/DiagnosticEventServiceTest.java:227:25: Name 'TestEvent2' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/index/SecondaryIndexManagerTest.java:664:25: Name 'TestingIndex' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/index/internal/CassandraIndexTest.java:627:18: Name 'TestScript' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/metrics/DecayingEstimatedHistogramReservoirTest.java:613:29: Name 'TestClock' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/metrics/TestMe.java:21:14: Name 'TestMe' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/metrics/TestsMe.java:21:14: Name 'TestsMe' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/metrics/TheseTestsMe.java:21:14: Name 'TheseTestsMe' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/net/TestChannel.java:35:14: Name 'TestChannel' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/net/TestScheduledFuture.java:27:14: Name 'TestScheduledFuture' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/net/proxy/ProxyHandlerTest.java:213:25: Name 'TestHandler' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/schema/RemoveWithoutDroppingTest.java:65:25: Name 'TestSchemaUpdateHandlerFactory' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/security/SSLFactoryTest.java:359:25: Name 'TestFileBasedSSLContextFactory' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/service/reads/repair/TestableReadRepair.java:40:14: Name 'TestableReadRepair' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/transport/MessagePayloadTest.java:379:25: Name 'TestQueryHandler' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/triggers/TriggersTest.java:208:25: Name 'TestTrigger' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/utils/TestKiller.java:26:14: Name 'TestKiller' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
/unit/org/apache/cassandra/utils/concurrent/AbstractTransactionalTest.java:152:34: Name 'TestableTransaction' must match pattern '^(?!(?:Test))(?!.*?(?:Tests)).*$'. [TypeName]
{code}
Notice there is also "TestMe" and "TestsMe" (added my myself) so it covers tests starting on "Test" as well. All errors starts on "Test" or "Testing".

"MyTestBase" is not caught so it is considered to be OK (which is what we actually want).

There are examples of failures where test itself is named just fine but it contains illegal names of classes in it. For example, "AbstractTransactionalTest" contains "TestableTransaction" which is public static class in AbstractTransactionalTest. Checkstyle is doing the check on all types, not on "java files". The solution here is to make that static class protected as I am filtering that in checkstyle config so only public classes are checked (and tests happen to be public). Anything else does not need to be public for the sake of testing it. E.g TestableTransaction does not need to be public at all.

Other example - TestTrigger should be renamed to "TriggerForTesting" etc.

A lot of violations are easilly solvable by having visibility equal to anything but "public".

I can go through this and try to rename / resolve it all, lets try to do this properly ...

[~brandon.williams] Â [~bereng]Â  this is the branch (1) where I incorporated my previous comment (last commit). What do you think about this?Â 

Some examples:

TestMe - fails
TestsMe - fails
TheseTestsMe - fails
SomeTests - fails


MyTestBase - passes
SomeClassForTesting - passes
SomeTest - passes

Â 

(1) https://github.com/apache/cassandra/pull/1920

Shouldn't we use this one? https://checkstyle.sourceforge.io/apidocs/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpOnFilenameCheck.html Seems to do everything we need including negating the match etc? 

IIUC this checks for files with 'Test' in their name and not ending in ' Test.java'. Seems we have indeed at least a few splitted tests that weren't running

{noformat}
  <module name="RegexpOnFilename">
    <property name="fileNamePattern" value=".*Test.*[^.]\.java"/>
  </module>
{noformat}

Let me see if I can find a way to not do a big rename:

Edit: IIUC

{noformat}
(?!.*Tester.*)(.*Test+.*[^.]\.java)
{noformat}

{noformat}
  <module name="RegexpOnFilename">
    <property name="fileNamePattern" value="(?!.*Tester.*)(.*Test+.*[^.]\.java)"/>
  </module>
{noformat}

Does what we need:
- Fails when we need to
- We can use the word 'Tester' safely in all those '*BaseTester' files we have.
- I would rename to 'Tester' all files that may need it
- Avoid us having to deal with types inside files and focuses on the file name
- We can add a custom fail message suggesting to rename to 'Tester' and why it failed such as <message key="regexp.filename.mismatch" value="Careful this file may not be ran as a test, if you want it ran rename to \*Test.java otherwise to \*Tester\*.java'"/>

or sthg along those lines. Wdyt?

Ah this is great, I have not noticed that one. This seems to be way better. I will try to incorporate this one and drop what I had.

I tried to incorporate Berenguer's approach and this is what I ended up with (1).

It consists of two commits, the first commit one goes through (2) and fixes it all (where applicable). On top of that, the second commit goes through (3).

For cases we use "Tester", what I saw was that it is abstract class which a proper "*Test" extends. It is not {_}a test{_}. I do not think "Tester" is a problem here.

Also, we can still rename stuff to "*ForTesting" like "TestMemtable" might be "MemtableForTesting".

For cases like "MyTestSplit1" and "MyTestSplit2", this can be renamed to "MyFirstSplitTest" and "MySecondSplitTest" or even better "MySplit1Test" and "MySplit2Test".

This still holds (4), I left same regexp, I just used different module.

I know that it does not cover cases like "MySplit2" when somebody wants to introduce such test after this change would be in, but I think that unless we figure out some super regexp this will stay unnoticed. Anyway, the manual review should still cover these corner cases. This PR should cover the most common cases of violation.

(1) [https://github.com/instaclustr/cassandra/tree/CASSANDRA-17964-4.1-2]

(2)
{code:java}
  <module name="RegexpOnFilename">
    <property name="fileNamePattern" value=".*Test.*[^.]\.java"/>
  </module> {code}
(3)
{code:java}
<module name="RegexpOnFilename">
  <property name="fileNamePattern" value="^(?!(?:Test))(?!.*?(?:Tests)).*$"/>
  <property name="match" value="false"/>
</module> {code}
(4)

TestMe - fails
TestsMe - fails
TheseTestsMe - fails
SomeTests - fails

MyTestBase - passes
SomeClassForTesting - passes
SomeTest - passes

If IIUC you used those regexp to _fix_ the current problem. But I added an offending test file and checkstyle doesn't complain. So while fixing the current problem is valuable this PR doesn't prevent it from happening again. Why not use the regexp ".\*Test.\*[^.]\.java" and rename any offending files? That would fix the problem and prevent it the future imo. Or am I missing sthg?

I think we are moving in circles so I try to explain that once again.

I indeed wrote that there will be cases when my regexp is not detecting everything. It will not detect a corner case like "MySplitTest1". This is the price we pay for having other classes which have "Test" in it. For example, these are violations with your regexp (bellow).

How do you want to rename FuzzTestBase? To what? Or TestHelper, or UpgradeTestBase, or AuthTestUtils ... These files do contain "Test" in the middle but as far as I tried you regexp's correctly, it will mark it to be invalid. I do not think they should be invalid. These names are just fine.

There will be still a manual process anyway, on PR, to go over PR and we do detect if some test is called "MyTestForThisFeature". I do not think people are going to create tests like these anyway from now on. The most frequent violations are caused by "TestThisFeature" and "MyFeatureTests" my regexp marks as failure.
{code:java}
TestHelper.java
BurnTestUtil.java
FuzzTestBase.java
DistributedTestSnitch.java
CASCommonTestCases.java
CASTestBase.java
JVMDTestTest.java
PaxosRepairTest2.java
ReprepareTestBase.java
ReprepareTestOldBehaviour.java
TestBaseImpl.java
ConfigCompatabilityTestGenerate.java
MixedModeAvailabilityTestBase.java
MixedModeBatchTestBase.java
MixedModeConsistencyTestBase.java
MixedModeReplicationTestBase.java
UpgradeTestBase.java
TokenAllocatorTestBase.java
ReadTestSmallPartitions.java
ReadTestWidePartitions.java
SimulationTestBase.java
ServerTestUtils.java
AuthTestUtils.java
CassandraAuthorizerTruncatingTests.java
KeywordTestBase.java
KeywordTestSplit1.java
KeywordTestSplit2.java
CDCTestReplayer.java
CommitLogTestReplayer.java
CommitLogUpgradeTestMaker.java
TestMemtable.java
PartitionerTestCase.java
OfflineTokenAllocatorTestUtils.java
DTestSerializer.java
HintsTestUtil.java
SSTableWriterTestBase.java
TestChannel.java
TestScheduledFuture.java
SchemaTestUtil.java
PaxosUncommittedTests.java
TestableReadRepair.java
TableStatsTestBase.java
EncodeAndDecodeTestBase.java
FilterTestHelper.java
KillerForTests.java
AbstractTestAsyncPromise.java
AbstractTestAwaitable.java
AbstractTestPromise.java
{code}

Hi [~stefan.miklosovic]. We have 2 options:

A. Use your regexp + a few renames: That is fine, but it will not catch some future violations.
B. Use my regexp + a few more renames: That will catch all present and future offenders. The restriction is only tests can contain the word 'Test' in the filename. All others will have to be renamed. My suggestion is to rename those to *Tester* which my regexp is fine with.

I don't think both options are exclusive, we can open a ticket for B if we see with time A didn't suffice. Wdyt is best?


Looking at https://github.com/instaclustr/cassandra/tree/CASSANDRA-17964-4.1-2 I have concerns that this renames things that were already running, or renames things that are just fine (such as what class all jvm-dtest extend...)

The issue with checkstyle is that we don't have the full ability to understand the context and if this is correct or not...

I wrote a quick test to find all bad named tests

{code}
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.cassandra.distributed.test;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.junit.Test;

import org.reflections.Reflections;
import org.reflections.scanners.Scanners;
import org.reflections.util.ConfigurationBuilder;

public class DidYouNameThingsRightTest
{
    private static final Reflections reflections = new Reflections(new ConfigurationBuilder().forPackage("org.apache.cassandra").setScanners(Scanners.MethodsAnnotated, Scanners.SubTypes).setExpandSuperTypes(true));

    @Test
    public void test()
    {
        Set<Method> methodsAnnotatedWith = reflections.getMethodsAnnotatedWith(Test.class);
        List<String> testFiles = methodsAnnotatedWith.stream().map(Method::getDeclaringClass).distinct()
//                                                    .filter(c -> c.getPackage().getName().contains("org.apache.cassandra.distributed.test")) // uncomment to filter to jvm-dtest
                                                     .flatMap(DidYouNameThingsRightTest::expand)
                                                     .map(DidYouNameThingsRightTest::normalize)
                                                     .map(Class::getCanonicalName)
                                                     .filter(s -> !s.endsWith("Test"))
                                                     .distinct().sorted()
                                                     .collect(Collectors.toList());
        throw new AssertionError("Detected tests that have a bad naming convension: \n" + String.join("\n", testFiles));
    }

    private static Class<?> normalize(Class<?> klass)
    {
        for (; klass.getEnclosingClass() != null; klass = klass.getEnclosingClass())
        {
        }
        return klass;
    }

    private static Stream<Class<?>> expand(Class<?> klass)
    {
        Set<? extends Class<?>> subTypes = reflections.getSubTypesOf(klass);
        if (subTypes == null || subTypes.isEmpty())
            return Stream.of(klass);
        Stream<Class<?>> subs = (Stream<Class<?>>) subTypes.stream();
        // assume we include if not abstract
        if (!Modifier.isAbstract(klass.getModifiers()))
            subs = Stream.concat(Stream.of(klass), subs);
        return subs;
    }
}

{code}

Which finds

{code}
org.apache.cassandra.auth.CassandraAuthorizerTruncatingTests
org.apache.cassandra.cql3.BatchTests
org.apache.cassandra.cql3.CachingBench
org.apache.cassandra.cql3.GcCompactionBench
org.apache.cassandra.cql3.KeywordTestSplit1
org.apache.cassandra.cql3.KeywordTestSplit2
org.apache.cassandra.db.guardrails.GuardrailAllowUncompressedTables
org.apache.cassandra.db.guardrails.GuardrailSecondaryIndexTester
org.apache.cassandra.db.guardrails.GuardrailSecondaryIndexesPerTable
org.apache.cassandra.distributed.test.ByteBuddyExamples
org.apache.cassandra.distributed.test.PaxosRepairTest2
org.apache.cassandra.distributed.test.ReprepareTestOldBehaviour
org.apache.cassandra.distributed.test.VirtualTableFromInternode
org.apache.cassandra.utils.UUIDTests
{code}

Can we limit the changes to just these classes?  Would it make sense to leverage the above code for test discovery?  maybe adding something like

{code}
$ ant find-tests-unit
$ ant find-tests-jvm-dtest
$ ant find-tests-jvm-dtest-upgrade
{code}

I am fine with abandoning checkstyle if we need something more robust. It seems to me checkstyle module is quite hard to use right with all stuff we need.

Talking with [~dcapwell] about this outside of this ticket, we would like to introduce an Ant task which is checking this in more depth and we would fail the build if Ant task fails.

I will spend more time on trying to introduce Ant task with the logic pretty similar to David's (if not the same and I just retrofit that code to Ant task).



We chatted on Slack, history can be found here https://the-asf.slack.com/archives/CK23JSY2K/p1667507316662959

This is what I have (1) [~dcapwell] [~bereng]

I reshuffled things little bit. In order to be able to use that annotation in IDE, IDE has to know about that (it has to be a proper (test) source).

Another consequence is that our ant task has to have compiled classes to do reflection on which means I depend on build-test.

I did just 4.1 but since this is not a checkstyle module anymore, we can introduce this to all branches from 3.0 included and fix stuff there as well. Nothing prevents us from doing this for all branches.

Please take a look and I will start to incorporate this into 3.0 and up.

BTW I do not think that making that check "granuluar" per test type is necessary. Can we just make things simple for now?

(1) https://github.com/apache/cassandra/pull/1971

I will be updating this comment as new branches and builds will be added.

Important notes for 3.0 - I have updated reflections library to 0.10.2 (same as is in trunk). The reason for that was that when the scanning is happening in our Ant task, the version which is present in 3.0 currently (0.9.something) prints big debug log of reflection library which is unnecessary and it just pollutes the overall build logs. Moving to 0.10.2 is very simple, basically a drop-in replacement. 0.10.2 does not write out this log.

3.0 PR [https://github.com/apache/cassandra/pull/1981/files]
Circle 3.0 [https://app.circleci.com/pipelines/github/instaclustr/cassandra/1539/workflows/d18c175f-ecdc-47e8-b5e8-d2ea8b679dcb]
Jenkins 3.0 [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2063/]

Circle 3.0 fails for me on dtests massively, I have never got a clean 3.0 build in Circle like ... _ever_. For that reason, as repeats are covered in circle, I built it in Jenkins too

3.11

PR [https://github.com/apache/cassandra/pull/1982]
Jenkins [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2064/]
Circle [https://app.circleci.com/pipelines/github/instaclustr/cassandra/1540/workflows/56bf9387-0209-4510-8cc3-6ee24d74608f]

3.11 starts to fail on this: https://issues.apache.org/jira/browse/CASSANDRA-18021

4.0 branch https://github.com/instaclustr/cassandra/tree/CASSANDRA-17964-4.0-ant
4.0 jenkins https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2065/

4.1 branch https://github.com/apache/cassandra/pull/1988
4.1 jenkins https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2068/

trunk https://github.com/apache/cassandra/pull/1990/files
trunk jenkins https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2069/#showFailuresLink

Paxos test is expected to fail in trunk as we enabled it


PRs are +1 from me... For failing tests, do we want to punt them for now in this ticket and have a different ticket to get working?

Hi David, thanks for the review, I will continue tomorrow with the rest of the branches. I would say we should include them and leave them failing. There will be one more ticket for Paxos related failure. That will motivate people to fix it. Fixing these tests is out of scope of this ticket.

So, PRs LGTM. Jenkins failures align to the per-commit CI so this LGTM Also. Circle failures we can use CASSANDRA-18000 as a reference imo despite there are 50 executors there when we only have 25 in this ticket. So given jenkins runs are ok, dtests should be unaffected and circle runs here seem to be on a lower tier we should be ok there also.

I would also fix newer failing tests in dedicated tickets.

cool, sounds like we are good to move forward.

[~stefan.miklosovic] if you plan to merge with them failing please create JIRAs first so they are not "unknown" errors for people; having a JIRA we can add to butler lets people not following know that their change may not have impacted as these tests are known failing

Why are we changing {{CompactStorageTest.java}} in 4.0? It is correctly named and we change the asserts. Also are you going to add circle runs for them?

https://github.com/apache/cassandra/pull/1983#discussion_r1015648508

Thx I had missed that. I moved this out of 'ready to commit', I hope I didn't miss anything.

Would it make sense to hold this one until 4.1 is out? We probably don't want to add noise on that side of the fence?

Why? I dont see any reason not to merge that now.

Based on discussion in ML we will postpone the merge this until 4.1 is out.

https://lists.apache.org/thread/0s494tkpf3ph1fcwxxfzr883l68wyqkf

I will merge this soonish, we were just waiting on 4.1 to be out.

cc [~bereng] [~dcapwell]

4.1 is out, looking forward to this!

I will be starting my xmas break this week #justfyi in case I don't answer.

I ll return to this next year. No rush.

I am transitioning this back to "in progress" as it was quite a while and I need to double check all is fine after recent 4.1 release etc ... I guess additional reviews would not hurt either. 

I went through the branches, rebased all of them etc ... they are bellow. Nothing important has changed in the meanwhile.

3.0 https://github.com/apache/cassandra/pull/1981
3.11 https://github.com/apache/cassandra/pull/1982
4.0 https://github.com/apache/cassandra/pull/1983
4.1 https://github.com/apache/cassandra/pull/1988
trunk https://github.com/apache/cassandra/pull/1990

Could I please get one more time +1 from you or am I free to just run the builds yet again and merge it? I do not want to do the builds before you review, if you do, as I would have to run them again if we find something is wrong. [~bereng] [~dcapwell]

I would ask for devBranch runs in circle just to be on the safe side of the fence.

Also, apologies if I am raising sthg already discussed or I can't remember, but there is only a handful uses of the {{IgnoreInvalidTestName}}. Couldn't we just remove that and rename those files as well? It brings no value and only asks for trouble imo.

[~bereng] do you want to remove that annotation as well or you want to just rename the tests?
edit: ah I see you want to remove it completely ... well, yeah, sure. I think we left some tests to be like that as we didnt know what to name it like. I think the discussion went something like that.

Yes I would remove completely as it's just an accident waiting to happen imo. Someday somebody will see it and use it...

[~bereng] OK I have a question though. When that annotation was used in tests, it had to be visible by IDEA because otherwise IDEA would not know where to find it as it was not among the sources. So I added this (1). When that annotation is supposed to be removed, the reason for that line ceases to exist.  The question is if we still want to have the source of that ant task nicely editable / known by IDEA out of the box. If you look into the current trunk, test/anttasks are not in idea-iml.file.xml so they are not recognized by IDE but it does not matter because that stuff is just used for ant tasks.

I think the fact they are not automatically recognized by IDEA is a bug and we should still add these sources among automatically recognized.

(1) https://github.com/apache/cassandra/pull/1981/files#r1066960701

Hi [~stefan.miklosovic] I don't use IDEA. But my gut feeling would be to leave that line of code in case future ant tasks come along they get picked up by IDEA. Maybe you should check with some IDEA user?

[~dcapwell] do you use IDEA? Could you comment on my last comment above? Thanks.

[~bereng], [~stefan.miklosovic], I think the issue with removing the annotation is we need to make those tests running and successful... For the *Example tests I think this is fine, maybe it is best we run them always to make sure the examples don't get stale...

The *Bench tests will fail 100% of the time in CI... I am in trunk and ran GcCompactionBench, each test takes 1m (will be slower in CI) and each fails... This will have the side effect of adding failing tests and causing the JVM to timeout due to our unit test limit being smaller than the runtime of these tests.

So, for the *Bench tests, I think we need a solution other than rename if we drop the annotation... We either do NOT want to run them in CI, or fix (but wouldn't want to put that burden on [~stefan.miklosovic])... Maybe use the @Ignore annotation?  I don't like this as it will still take resources in CI, but only 2 files are impacted so prob wouldn't notice the impact

bq. The question is if we still want to have the source of that ant task nicely editable / known by IDEA out of the box

Since you did it I feel we should keep... there isn't anything wrong with keeping it and is nice to those who use IDEA (the majority of cases)...

I don't think the burden of fixing failing tests should fall in this ticket either. Let's @ignore them, add a comment in place and open tickets for them?

I would Ignore failing tests (but I would still rename them), examples will be renamed too. Then I would dedicate separate ticket to un-ignore them and fix them. I do not think fixing these tests is the scope of this ticket. I agree that we might keep ant tasks sources tracked.

great we are on the same page, lets deliver this!

I think our latest comments say the same yes?

QQ: why should we @ignore the tests that are failing if they will have tickets anyway and we need to fix them? How many are those that fail? 

Because the work in this ticket has nothing to do with them failing. It is about introducing an Ant task and respective target which is checking how they are called, not if they are run successfully. 

I am becoming a little bit irritated by this ticket already. I am constantly waiting for something to happen and people changing their minds on the last notice. Could not we just introduce the Ant task and file the tickets? I think this is pretty much standard way of doing it?

bq. I am becoming a little bit irritated by this ticket already. I am constantly waiting for something to happen and people changing their minds on the last notice. 
Last thing I want is to irritate you or demand anything. The opposite - I want to thank you guys for tackling this problem!

bq. Because the work in this ticket has nothing to do with them failing. It is about introducing an Ant task and respective target which is checking how they are called, not if they are run successfully. 
Totally agree with you
I also did not have the intention to imply that you should fix those tests. Not at all! You solved the problem in hand. That those tests failed with no one realizing that because they were not run is not part of the problem you are solving here. More like - I was wondering what is the rationality to add @ignore if we are opening tickets and they need to be fixed? Same as every other ticket we have for failing/flaky test. That's all I meant. I was wondering whether they are maybe just too many and you don't want to add too much noise or so?

[~e.dimitrova] We may indeed not ignore them if that is what you prefer. Nothing against that. The obvious consequence of doing so is that they would start to be visible as failures in the test results pretty much constantly until they are fixed. 
I believe that nobody is looking at this as it is a regression. It would be a regression if a respective test was passing and it started to fail. But these tests are technically failing already, we are just making it visible. 

{quote}I believe that nobody is looking at this as it is a regression. It would be a regression if a respective test was passing and it started to fail. But these tests are technically failing already, we are just making it visible.
{quote}
That's what I think too.Â 
{quote}[~e.dimitrova] We may indeed not ignore them if that is what you prefer. Nothing against that. The obvious consequence of doing so is that they would start to be visible as failures in the test results pretty much constantly until they are fixed.Â 
{quote}
I will leave the final decisions to you and the reviewers. It is indeed a matter of visibility. What I was wondering is why adding a precedent, to silence failing tests? What would be the rationality? This reminds me of the case when [~dcapwell]Â found a long-term issue with DTests framework which led to more failing tests after the bug was fixed. Some of those failing tests are still out there with associated tickets for pre-4.0, for example? I believe there was something around a repair bug being exposed for example.Â 

[~mck] I find your input valuable here, to save you from going through this I will summarize.

This patch introduces an Ant task which will check that test classes end on "Test" and it will fail the build when not all of them are. When we renamed the tests which did not end on "Test" to pass the check, some of tests, when committed and run in CI will start to fail. They were failing before as well, but because of their name, they were never picked up by CI so their failure went undetected.

We were suggesting to Ignore these tests (put Ignore annotation on top of them) with description why and we create new ticket(s) to fix them. This solution will not mark these tests as erroneous but they will not be run.

Another solution is to keep them un-ignored but they would start to appear in the results as constantly failing.

The tests we are talking about are (both in long test suite)

org.apache.cassandra.cql3.GcCompactionBench
org.apache.cassandra.cql3.CachingBench

they are in cassandra-3.11,4.0,4.1,trunk branches

Â 

I would slightly prefer just ignoring them, mostly because they are long tests and they eat resources absolutely unnecessarily when they fail every time. I agree with David who said:

_The *Bench tests will fail 100% of the time in CI... I am in trunk and ran GcCompactionBench, each test takes 1m (will be slower in CI) and each fails... This will have the side effect of adding failing tests and causing the JVM to timeout due to our unit test limit being smaller than the runtime of these tests._

bq. We were suggesting to Ignore these tests (put Ignore annotation on top of them) with description why and we create new ticket(s) to fix them. 

Works for me. The benefit of adding them failing is that, with tickets associated to them, we will be constantly reminded (by CI and Butler) to fix them. Having them ignored they may well get forgotten about _foreverâ¦_ But I buy the rationale wrt their timeout and load.

bq. The benefit of adding them failing is that, with tickets associated to them, we will be constantly reminded (by CI and Butler) to fix them.

This is true, but I want to point out we would lose the benefit of a simple pass/fail indicator (assuming everything else is passing), and I think there is a lot of value in that simplicity vs having the added cognitive overhead of correlating butler failures to your results to determine if they actually passed or failed.  But I share the concern about having the tests forgotten _forever_ as well.

[~blambov] could you estimate how hard it would be to fix (I git-blamed you)

org.apache.cassandra.cql3.GcCompactionBench
org.apache.cassandra.cql3.CachingBench

The most ideal option would be to simply fix them in foreseeable future as part of this ticket. If it is rendered too time-consuming, we would dedicate separate tickets and Ignored them.

These are not unit tests. They were written to do what we now do with JMH tests before I was aware we can use the latter for higher-level testing.

They should be moved out of the test tree and into {{microbench}} and changed to use JMH. This should not be a significant effort.

[~blambov]Â  could you be more specific about the effort / delivery time? Would you be able to dedicate some time to this until the next week or so?Â 

I would like to merge this sooner than later and if you are willing to fix it in a horizon of, lets say, one month, I would say it is better if I just create a ticket to fix these two and we ignore them so we are unblocked here and we may merge this ticket.

It is not likely that I will be able to invest the time.

Put an {{@Ignore}} annotation over them, the comment can say that these are only intended to be run manually to measure the effect of code changes on performance.

[~smiklosovic] I think it is just being suggested to do something like [this|https://github.com/driftx/cassandra/commit/600b88001cd7bcef62e72e96b408490a518dcedc].

Unfortunately I think jenkins runs the microbenchmarks so they will still fail it (circle does not, however.)

Ok thanks everybody, I ll merge this from 3.0 to trunk during weekend ignoring them. I think I have enough explicit +1s already.

Last time I checked with [~mck] I remember he said we donât run the microbenchmark tests in Jenkins (exactly for the points mentioned here). I think you got confused with the burn tests which we run only in Jenkins

bq. â¦we donât run the microbenchmark tests in Jenkinsâ¦

The jobs are in jenkins, with JMH reporting (CASSANDRA-16371).
See the jobs with the {{-microbench}} suffix in https://ci-cassandra.apache.org/view/all/ 

They are not part of the pipeline. And they are not regularly run, because there's too much noise for the JMH reports to provide accuracy value (we need a dedicated box for that).

You can see that this code is neglected in all our branches.

Indeed, the 3.11 microbench job is currently broken, so I think we can just move these tests.

I ll merge this during this weekend.

3.0 [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2222/]
3.11 [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2230/]
4.0 [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2233/]
4.1 [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2237/]
trunk [https://ci-cassandra.apache.org/view/patches/job/Cassandra-devbranch/2238/]

[https://github.com/instaclustr/cassandra/tree/CASSANDRA-17964-3.0-ant]
[https://github.com/instaclustr/cassandra/tree/CASSANDRA-17964-3.11-ant]
[https://github.com/instaclustr/cassandra/tree/CASSANDRA-17964-4.0-ant]
[https://github.com/instaclustr/cassandra/tree/CASSANDRA-17964-4.1-ant]
[https://github.com/instaclustr/cassandra/tree/CASSANDRA-17964-trunk-ant]

Â 

btw there is still this: https://issues.apache.org/jira/browse/CASSANDRA-18021

This is happening only on 3.11. I put comment there to see CASSANDRA-18021 but it is not ignored. I have not ignored these micro bench tests either. It does not seem to be necessary as they are not executed / reported.Â 

thanks [~stefan.miklosovic] for driving this to done! you have put in a lot of work, thanks!

Same thanks!

