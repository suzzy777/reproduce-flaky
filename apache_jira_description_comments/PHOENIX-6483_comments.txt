[~vjasani]
Thanks for looking at this!
However, I believe that your workaround emphasises that there is a real bug in either Phoenix or HBase permission handling.

AFAICT the permission operations should be synchronous, and in HBase 2.x this is clearly not the case.
Last time I looked at this code, Phoenix really wasn't doing anything special, so I suspect that the problem is in HBase.

I think we should raise an HBase JIRA for the issue, and either fix it, or at least document that permission changes are NOT synchronous in HBase.

{quote}I think we should raise an HBase JIRA for the issue, and either fix it, or at least document that permission changes are NOT synchronous in HBase.
{quote}
Sure thing, I will keep this in my bucket list. Indeed there seems some difference with sync behaviour otherwise this should not have been visible.

Just for keeping record for this Jira, copying same text from mailing list:

Â 

For Permission APIs grant/revoke, I just checked the diff b/ HBase 1 and
HBase 2.
Phoenix MetaDataClient uses AccessControlClient to grant/revoke permission
to a user. HBase 1 AccessControlClient invokes coproc
endpoint AccessController, which puts records in hbase:acl table on
RegionServer hosting acl's single region. HBase 2 AccessControlClient on
the other hand invokes Admin APIs to let master take care of adding records
in hbase:acl table (HBASE-21739). This is the main diff b/ both versions,
however, both workflows seem synchronous.
For both HBase 1 and 2, post-put hook updates ZNodes with updated entries
in acl table, which internally triggers a refresh of table cache in
AuthManager, and this table cache could be used to verify Auth of user on
table/namespace in subsequent request (based on our test case: remove
access, followed by verification of grant permission). If table cache has
race condition, it should also be applicable to HBase 1 as well I believe,
yet to compare both at length.

I understand, Phoenix is not doing anything different w.r.t GRANT/REVOKE
statements so some sync issue might have been introduced in HBase 2
unknowingly. I will try to dig more sometime next week and file HBase Jira
if I could find some evidence of race conditions or could reproduce with
HBase tests directly.

