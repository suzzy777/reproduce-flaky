[~sershe], If this is not assigned, may I take this up? Thanks!

Thanks for volunteering [~kshukla]. Will make you the assigned owner for this. 

[~taksaito], [~hitesh], In a scenario where the waitTillReady does timeout after, say a configurable timeout value, would we want to submit the DAG or have a TezException thrown. This would change the API behavior to return with either an error or ignore it instead of looping on it endlessly. Thanks a lot!

The waitTillReady api is to check if the session is in a state to submit dags to it. If there is a timeout specified and it expires, it implies that the session has still not reached a ready state even after the timeout expired. The main objective here is to not have waitTillReady() hang indefinitely. Now after the timeout expires, there are 2 options for the API: 
  
1) Silently return back and let the application decide what it wants to do
2) Return back something ( or throw an exception if needed ) to indicate whether the api returned because the session is ready or if the timeout expired. 

(2) for me seems a better approach. One could be to return a bool to indicate success/failure or throw a timeoutexpired/timeoutexceeded exception. 

\cc [~sseth] [~sershe] in case they have any preferences. 

To add, we are not changing behavior of the current API. The current api will behave as is. The new one that supports a timeout param will follow a certain behavior. 

Also, what the application does after ( whether it submits a dag or closes the session, etc ) is up to the application. The wait with timeout api should not make any assumptions on post-call user behavior. 

+1 for throwing a timeoutexception.

Putting an initial patch based on peer comments. Do we want to change the calls to {{waitTillReady}} in cases like JoinValidate:
{code}
DAG dag = createDag(tezConf, lhsPath, rhsPath, numPartitions);

    tezClient.waitTillReady();
    DAGClient dagClient = tezClient.submitDAG(dag);
{code}

Also currently the configured timeout is 10 seconds, does that sound right? 

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12790007/TEZ-3077.001.patch
  against master revision 923f7b4.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:red}-1 findbugs{color}.  The patch appears to introduce 2 new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/1521//testReport/
Findbugs warnings: https://builds.apache.org/job/PreCommit-TEZ-Build/1521//artifact/patchprocess/newPatchFindbugsWarningstez-api.html
Findbugs warnings: https://builds.apache.org/job/PreCommit-TEZ-Build/1521//artifact/patchprocess/newPatchFindbugsWarningstez-runtime-library.html
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/1521//console

This message is automatically generated.

Comments on the patch, and apologies for the late review.
- We should not change the behaviour of the existing waitTillReady API - that's a backward incompatible change
- Instead of defining a configuration parameter, a new method waitTillReady(long timeout, TimeUnit timeUnit) should be sufficient.
- Please ignore my comment earlier about throwing a TimeoutException - a return status (boolean) would be more consistent with the way such time based APIs work in Java libraries. e.g. https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/Condition.html#await(long,%20java.util.concurrent.TimeUnit), or https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/BlockingQueue.html#poll(long,%20java.util.concurrent.TimeUnit)
- It should be possible to make use of this new method in the existing waitTillReady with an infinite timeout (0)
- Also, the sleep interval in this new method would need to be modified to match with the timeout specified in the api cal. i.e. min(SLEEP_FOR_READY, sleepTimeRemaining)

Thank you so much [~sseth] for the review comments. Apologies for the delay.

I have attached a revised patch and added a new waitTillReady and preWarm method. Currently the sleep time is decided as either the diff of SLEEP_FOR_READY and timeout if SLEEP_FOR_READY is greater. This could lead to more sleeps  if the difference between the two is very small. I wonder if setting it to a fraction of the client timeout like 1/3 (in case of some yarn NM timeouts) may be a better idea?

The older waitTillReady calls the new one with value 0.


{color:green}+1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12796224/TEZ-3077.002.patch
  against master revision e416991.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/1599//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/1599//console

This message is automatically generated.

[~sseth], [~hitesh], Request for comments/review. Thanks a lot!

Thanks for the updated patch [~kshukla]. This looks a lot better in terms of the APIs. Some comments.

- Can the existing preWarm method be changed to invoke the new one with a timeout of 0 ? Similar to what has been done for the existing waitTillReady method.
- In waitTillReady
{code}
+      if ((timeout > 0) &&
+          Time.monotonicNow() - startTime >= timeout) {
+        return false;
{code}
This check should be after checking the updated status to be READY. Otherwise we could end up timing out in the last iteration even if the state did change to READY.

{code}long sleepTime = (SLEEP_FOR_READY > timeout) ?
                       SLEEP_FOR_READY - timeout : SLEEP_FOR_READY;{code}
Should this be {code}
long sleepTime = (SLEEP_FOR_READY > timeout) ?
                       timeout : SLEEP_FOR_READY;
{code}
Even better would be to sleep for whatever time is actually left.
{code}
      long now = Time.monotonicNow();
      if (startTime + timeout > now) {
        long sleepTime = Math.min(SLEEP_FOR_READY, startTime + timeout - now);
        Thread.sleep(sleepTime);
      } else {
        return false;
      }
{code}

On the unit test, could you please look at testStopRetriesUntilTimeout - and see if a test can be added along these lines. i.e. it actually validates that attempts were made to get the appReport, and a final timeout - rather than returning success.


Updating patch addressing comments. The test now checks if DAG was submitted within the stipulated time for 3 scenarios. Please let me know if I am missing anything.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12797966/TEZ-3077.003.patch
  against master revision 53981d4.

    {color:red}-1 patch{color}.  The patch command could not apply the patch.

Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/1649//console

This message is automatically generated.

Rebasing patch for minor conflicts in the test class.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12797973/TEZ-3077.004.patch
  against master revision 53981d4.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

    {color:green}+1 release audit{color}.  The applied patch does not increase the total number of release audit warnings.

    {color:red}-1 core tests{color}.  The patch failed these unit tests in :
                   org.apache.tez.test.TestFaultTolerance

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/1650//testReport/
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/1650//console

This message is automatically generated.

TestFaultTolerance is failing intermittently when I tried locally, should be tracked by TEZ-2686. 

Thank you [~sseth] for the helpful review. Request for more comments and improvements. Thanks a lot!

Mostly looks good. A couple of minor changes -  which I should have seen earlier.
- "startTime + timeout"  should only be computed once - outside the check. There's a small chance of long sleepTime = Math.min(SLEEP_FOR_READY, startTime + timeout - now); ending up with a negative value since it's being recomputed after the condition check.
- In preWarm - "throw new TezException("Tez AM not ready, could not submit DAG")" - Could you please replace this with a new Exception - SesssionNotReady (similar to SessionNotRunning), so that users can detect the case and take relevant action. (The javadocs would need to change as well)
- On the test
    - Could you increase the sleep times used - 10ms, 200ms is very easy to miss on a slow machine - and that can lead to flakiness. The 5 second range would be better - even though that means the test runs longer.
    - Needs a timeout annotation (30s?)

Patch addressing comments. I have added the Javadoc comment for the new Exception SessionNotReady. Did not change the Javadoc for preWarm since TezException covers the new Exception which is similar to how waitTillReady handles SessionNotRunning.

+1. Thanks [~kshukla] for the patience while this went through reviews. Minor: the new exception is missing the Apache header. I'll add that and commit, once jenkins comes back.

{color:red}-1 overall{color}.  Here are the results of testing the latest attachment
  http://issues.apache.org/jira/secure/attachment/12799338/TEZ-3077.005.patch
  against master revision b78a84a.

    {color:green}+1 @author{color}.  The patch does not contain any @author tags.

    {color:green}+1 tests included{color}.  The patch appears to include 1 new or modified test files.

    {color:green}+1 javac{color}.  The applied patch does not increase the total number of javac compiler warnings.

    {color:green}+1 javadoc{color}.  There were no new javadoc warning messages.

    {color:green}+1 findbugs{color}.  The patch does not introduce any new Findbugs (version 3.0.1) warnings.

        {color:red}-1 release audit{color}.  The applied patch generated 1 release audit warnings.

    {color:green}+1 core tests{color}.  The patch passed unit tests in .

Test results: https://builds.apache.org/job/PreCommit-TEZ-Build/1662//testReport/
Release audit warnings: https://builds.apache.org/job/PreCommit-TEZ-Build/1662//artifact/patchprocess/patchReleaseAuditProblems.txt
Console output: https://builds.apache.org/job/PreCommit-TEZ-Build/1662//console

This message is automatically generated.

Thank you very much [~sseth] for the detailed comments/review and the Apache Header addition.

