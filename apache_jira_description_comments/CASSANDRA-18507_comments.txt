Here is a fix for Cassandra 4.0: branch [thobe/CASSANDRA-18507-4.0|https://github.com/thobe/cassandra/tree/CASSANDRA-18507-4.0], commit [285323eee48aaf0ff800d0aaba96b94238174e52|https://github.com/thobe/cassandra/commit/285323eee48aaf0ff800d0aaba96b94238174e52].

Same fix for Cassandra 4.1: branch [thobe/CASSANDRA-18507-4.1|https://github.com/thobe/cassandra/tree/CASSANDRA-18507-4.1], commit [186b7876bd7f82a50409877427bf420b76854a91|https://github.com/thobe/cassandra/commit/186b7876bd7f82a50409877427bf420b76854a91].

Only the test case required minimal adaptation between 4.0 and 4.1.

I reverted the change to src so only the test exists, I then ran it and seems the jvm is crashing?

{code}
[junit-timeout] Testcase: org.apache.cassandra.db.compaction.PartialCompactionsTest:null:       Caused an ERROR
[junit-timeout] Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM exit.
[junit-timeout] junit.framework.AssertionFailedError: Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM exit.
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
[junit-timeout]         at org.apache.cassandra.anttasks.TestHelper.execute(TestHelper.java:53)
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
[junit-timeout]
[junit-timeout]
[junit-timeout] Test org.apache.cassandra.db.compaction.PartialCompactionsTest FAILED (crashed)
{code}

I pulled in the src changes and still the test is crashing 

{code}
[junit-timeout] Testcase: org.apache.cassandra.db.compaction.PartialCompactionsTest:null:       Caused an ERROR
[junit-timeout] Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM exit.
[junit-timeout] junit.framework.AssertionFailedError: Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM exit.
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
[junit-timeout]         at org.apache.cassandra.anttasks.TestHelper.execute(TestHelper.java:53)
[junit-timeout]         at java.util.Vector.forEach(Vector.java:1277)
[junit-timeout]
[junit-timeout]
[junit-timeout] Test org.apache.cassandra.db.compaction.PartialCompactionsTest FAILED (crashed)
{code}

[~toblin] can you take a look at the test and make sure it passes, and that it detects the issue if you revert the change to src?

[~dcapwell] that's odd. When I run the test with the source unchanged (/reverted) I get:

{code:java}
[junit-timeout] Testcase: shouldNotRemoveTombstonesShadowingDataExcludedFromCompaction(org.apache.cassandra.db.compaction.PartialCompactionsTest): FAILED
[junit-timeout] remaining live rows after compaction expected:<100> but was:<105>
[junit-timeout] junit.framework.AssertionFailedError: remaining live rows after compaction expected:<100> but was:<105>
[junit-timeout] at org.apache.cassandra.db.compaction.PartialCompactionsTest.shouldNotRemoveTombstonesShadowingDataExcludedFromCompaction(PartialCompactionsTest.java:90)
[junit-timeout] at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
[junit-timeout] at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
[junit-timeout] at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
[junit-timeout] 
[junit-timeout] 
[junit-timeout] Test org.apache.cassandra.db.compaction.PartialCompactionsTest FAILED
{code}
 
And with the source changes in place:

{code:java}
[junit-timeout] INFO  [main] 2023-05-10 09:01:05,369 ColumnFamilyStore.java:2655 - Truncate of PartialCompactionsTest.shouldNotRemoveTombstonesShadowingDataExcludedFromCompaction is complete
[junit-timeout] ------------- ---------------- ---------------
   [delete] Deleting directory .../cassandra-4.1/build/test/cassandra/commitlog
   [delete] Deleting directory .../cassandra-4.1/build/test/cassandra/data
   [delete] Deleting directory .../cassandra-4.1/build/test/cassandra/saved_caches
   [delete] Deleting directory .../cassandra-4.1/build/test/cassandra/hints


BUILD SUCCESSFUL
Total time: 24 seconds
{code}
Same exact result on both the {{cassandra-4.0}} branch and the {{cassandra-4.1}} branch.

Maybe I'm doing something non-standard when running tests? I've primarily been running with:

{code:java}
ant test -Dtest.name=PartialCompactionsTest -Duse.jdk11=true {code}
But in order to rule out the possibility of this being Java version related, I also tried with Java 8 now, and that had the exact same outcome as well.

So next I'm wondering if the difference you are experiencing is platform related. I've been running on MacOS. So I tried running the test in a docker container ({{{}eclipse-temurin:8-jdk-jammy{}}}). That also works in the same way as when running natively on my machine, and is able to detect the issue when the change to source is reverted.

Even if I run the test as part of a larger set of tests it works the way it is intended to.

Please let me know if I should be running the test in a different way, or what I should be doing to reproduce the failure you are experiencing.

 

That's weird... I know [~marcuse] is looking at this patch as well.

Overall the patch LGTM... its not clear why the test doesn't work on [~maedhroz] and my laptop, but think [~marcuse] can help here.

For the core patch, I am +1.  I do think we will want this test for trunk just to make sure this regression doesn't come back.

+1 on the patch, very nice catch

pushed an alternative/additional test here:
https://github.com/krummas/cassandra/tree/CASSANDRA-18507-4.1
https://github.com/krummas/cassandra/tree/CASSANDRA-18507-4.0 
but the existing test is fine as well I think (though we might have a general problem running tests with java11 on macos?)

running cci:
https://app.circleci.com/pipelines/github/krummas/cassandra/868/workflows/0ab45cff-4d06-4f25-ba55-e19a8dcb1ad2
https://app.circleci.com/pipelines/github/krummas/cassandra/869/workflows/a7502533-0524-4669-b450-a8bd3897cb34

Hey everyone,

I also have a Mac available so decided to test on my end too. I can confirm that I pulled [https://github.com/krummas/cassandra/tree/CASSANDRA-18507-4.1] and [https://github.com/krummas/cassandra/tree/CASSANDRA-18507-4.0].  Then:

 
{code:java}
ant realclean
ant jar
{code}
 
ant test -Dtest.name=PartialCompactionsTest -Duse.jdk11=true 
Everything finished successfully for me.

To be on the safe side I also tested with JDK 8. I ran this with both branches.

I tried on Mac Book pro from 2018, MAC OS 12.06
{code:java}
openjdk version "11.0.2" 2019-01-15
OpenJDK Runtime Environment 18.9 (build 11.0.2+9)
OpenJDK 64-Bit Server VM 18.9 (build 11.0.2+9, mixed mode)
{code}
and 
{code:java}
java version "1.8.0_231"
Java(TM) SE Runtime Environment (build 1.8.0_231-b11)
Java HotSpot(TM) 64-Bit Server VM (build 25.231-b11, mixed mode)
{code}
[~marcuse], can you push to run also the JDK 11 workflow In CI, please? I noticed you started only JDK8 workflow.
{quote} I do think we will want this test for trunk just to make sure this regression doesn't come back.
{quote}
That sounds like a great idea to me.

j8/j11 runs;

https://app.circleci.com/pipelines/github/krummas/cassandra?branch=CASSANDRA-18507-4.0
https://app.circleci.com/pipelines/github/krummas/cassandra?branch=CASSANDRA-18507-4.1


I have pushed an update that structures the test to be more in line with how other tests works. This also makes it possible to add other test cases to that test class in the future (I'd made a mistake in the setup that prevented that before). I'm not sure if this has any effect on the issue [~dcapwell] had with running the test or not.
I also incorporated the JVM-DTest that [~marcuse] wrote, since I think it seems useful to have that level of testing for this as well.
* [thobe/CASSANDRA-18507-4.0|https://github.com/thobe/cassandra/tree/CASSANDRA-18507-4.0]
* [thobe/CASSANDRA-18507-4.1|https://github.com/thobe/cassandra/tree/CASSANDRA-18507-4.1]

I have also done some further analysis of the behavior of this test on {{trunk}}. I said before that the problem does not manifest on {{trunk}}. However, after further analysis, it seems that is because {{trunk}} uses a different method for checking for available disk space, so the limiting that's done in my test (and the limiting don in the JVM-DTest that [~marcuse] wrote) does not work to trigger a partial compaction, but later there is a different check that _is_ triggered by the limiting in my test that rejects the compaction due to lack of disk space. I had misinterpreted this as partial compactions not being supported at all, but I'll see if I can revise the test to be applicable to {{trunk}} as well in order to see if this problem also occurs there.

After updating the tests to emulate insufficient disk space correctly for {{{}trunk{}}}, I can conclude that the problem occurs there as well. Here is a branch with changes applicable for {{{}trunk{}}}: [thobe/CASSANDRA-18507|https://github.com/thobe/cassandra/tree/CASSANDRA-18507].

the trunk patch LGTM, +1

If [~marcuse] doesn't merge today, ill merge tomorrow; assuming he is +1 to trunk patch

I have updated the branches to make sure they are in sync. I have also pushed branches of {{4.1}} and {{trunk}} where the change history is based on merging the changes forward from the previous version instead, in case that is more helpful:
* {{4.1}}: [thobe/CASSANDRA-18507-4.1-merge|https://github.com/thobe/cassandra/tree/CASSANDRA-18507-4.1-merge]
* {{trunk}}: [thobe/CASSANDRA-18507-merge|https://github.com/thobe/cassandra/tree/CASSANDRA-18507-merge]

I also added a change to logging that would have made debugging this issue when we first encountered it a little bit quicker.

Starting commit

CI Results (pending):
||Branch||Source||Circle CI||Jenkins||
|cassandra-4.0|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-18507-cassandra-4.0-82D47737-2369-4747-BEBD-045157D71017]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-18507-cassandra-4.0-82D47737-2369-4747-BEBD-045157D71017]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2466/]|
|cassandra-4.1|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-18507-cassandra-4.1-82D47737-2369-4747-BEBD-045157D71017]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-18507-cassandra-4.1-82D47737-2369-4747-BEBD-045157D71017]|[build|https://ci-cassandra.apache.org/job/Cassandra-devbranch/2467/]|
|trunk|[branch|https://github.com/dcapwell/cassandra/tree/commit_remote_branch/CASSANDRA-18507-trunk-82D47737-2369-4747-BEBD-045157D71017]|[build|https://app.circleci.com/pipelines/github/dcapwell/cassandra?branch=commit_remote_branch%2FCASSANDRA-18507-trunk-82D47737-2369-4747-BEBD-045157D71017]|[build|unknown]|


4.0 has org.apache.cassandra.distributed.test.FailingRepairTest crash right away; I don't see any logs... this repo for me locally as well as CI (https://app.circleci.com/pipelines/github/dcapwell/cassandra/2124/workflows/2862d46f-0728-4617-b1a3-1ba15baa672e/jobs/27702/tests)

4.1 looks to be flaky tests

trunk looks good other than upgrade tests... I think I mentioned this to people on slack awhile back... this doesn't look related to your work so I think it's fine to ignore for this patch.

[~toblin] can you take a look at the repair test in 4.0?  Curious if you can repo and figure out what's going on.

[~dcapwell] that looks like CASSANDRA-18366 to me.

ill test out 4.0 in isolation to double check

thanks for pointing that out, confirmed it fails in cassandra-4.0 branch as well.

With that, CI is clean

starting the merge now

Thanks for all the hard work!  merged to 4.0, 4.1, and trunk

