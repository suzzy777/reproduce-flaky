[~gezapeti] I could use some direction here, the test fails only when it's run individually and only when {code}Object value = null;{code}. Maybe there's a way to force the test to only execute as part of whole class and not by itself?
 

ok, hope [~asasvari] doesn't mind, I moved the assertNotNull inside try block and with assumeNotNull, test does not fail. Please advise.

Testing JIRA OOZIE-3105

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 77 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1{color} There are no new bugs found in total.
. {color:green}+1{color} There are no new bugs found in [core].
. {color:green}+1{color} There are no new bugs found in [server].
. {color:green}+1{color} There are no new bugs found in [client].
. {color:green}+1{color} There are no new bugs found in [docs].
. {color:green}+1{color} There are no new bugs found in [examples].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive].
. {color:green}+1{color} There are no new bugs found in [sharelib/pig].
. {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
. {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
. {color:green}+1{color} There are no new bugs found in [sharelib/spark].
. {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
. {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
. {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
. {color:green}+1{color} There are no new bugs found in [tools].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 2048
.    Tests rerun: 119
.    Tests failed at first run: org.apache.oozie.command.coord.TestCoordActionInputCheckXCommandNonUTC,org.apache.oozie.action.hadoop.TestJavaActionExecutor,org.apache.oozie.service.TestStatusTransitService,org.apache.oozie.service.TestPartitionDependencyManagerEhcache,
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}. There is at least one warning, please check{color}

The full output of the test-patch run is available at

. https://builds.apache.org/job/PreCommit-OOZIE-Build/159/

[~dbist13] thanks for taking care of this. Recently I've been thinking about creating an umbrella JIRA that includes all flaky tests we have right now, I wanted to include this as well. But I don't fully understand this patch, how does using {{assumeNotNull}} instead of {{assertNotNull}} eliminate the flakyness? It just makes JUnit skip the test, no?

The test changed behavior.
Before patch:
# call something to get a value
## If we got an exception, fail the test
## if we got back null, fail the test

After patch:
# call something to get a value
## If we got an exception we don't check what we got back
## if we got an excpetion we're checking if the exception is null

I think the new behavior is not correct. It's also possible that I get something wrong, it's getting late here...

But if we got an exception, it means there's a problem, right? So we should find out why we occasionally end up in the catch branch. 

[~pbacsko] you're correct, except in the old behavior we just failed indefinitely and if value was null, assertion would fail and throw an error that JMX service is unavailable. I may have introduced wrong behavior but test only fails due to null value. We can move the assertion back after the catch but it won't fix the failure. Again, I'm happy to work on this with some direction. Also, behavior can be observed in the catch block when jvm.memory.heap.committed is not available. Then it throws InstanceNotFoundException

This test passes in some jenkins runs and fails on others. 
When the returned value is null then something is wrong and the test should fail. The issue is that we don't know what causes this.
I've messed around with this test a bit and found that the removal of testSamplers() makes testJMXInstrumentation() fail. From this point I'd suggest to look into testSamplers and find out what part is required for the other test to run successfully.


PreCommit-OOZIE-Build started



Testing JIRA OOZIE-3105

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 100 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1{color} There are no new bugs found in total.
. {color:green}+1{color} There are no new bugs found in [client].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive].
. {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
. {color:green}+1{color} There are no new bugs found in [sharelib/spark].
. {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
. {color:green}+1{color} There are no new bugs found in [sharelib/oozie].
. {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
. {color:green}+1{color} There are no new bugs found in [sharelib/pig].
. {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
. {color:green}+1{color} There are no new bugs found in [docs].
. {color:green}+1{color} There are no new bugs found in [server].
. {color:green}+1{color} There are no new bugs found in [core].
. {color:green}+1{color} There are no new bugs found in [examples].
. {color:green}+1{color} There are no new bugs found in [webapp].
. {color:green}+1{color} There are no new bugs found in [tools].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 2096
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}. There is at least one warning, please check{color}

The full output of the test-patch run is available at

. https://builds.apache.org/job/PreCommit-OOZIE-Build/465/



I think the root cause for this was somewhere in OOZIE-3240 or OOZIE-3236

The problem reappeared in https://builds.apache.org/job/PreCommit-OOZIE-Build/548. I'm reopening this.

If no objections, I'm reducing the priority of this ticket. Sure, it needs to be fixed, but it's not really a blocker.

[~dbist13] can you still reproduce the problem by running {{mvn clean -Dtest=org.apache.oozie.util.TestMetricsInstrumentation#testJMXInstrumentation test}}? I executed this command many times in a loop, but the test always passed.

[~pbacsko] I've ran the test multiple times with hadoop.version=2.7.6 and I cannot reproduce on the current master. We can close this as invalid, your call.

[~dbist13] [~pbacsko] closing this issue, then.

The problem reappeared again. For instance: [https://builds.apache.org/job/PreCommit-OOZIE-Build/921/]Â 

I've tested it using grind:
{noformat}
$ grind test -i TestMetricsInstrumentation -n 50 --java-version 8
...
...
147.1s 50/50 tests complete (5 failed){noformat}

Reopening because it is still flaky.

