I took the provided derby-test.java and tweaked it slightly. I ran it as follows:

 

    javac -cp .;\users\bryan\derby\trunk\classes test1.java

    java -cp .;\users\bryan\derby\trunk\classes test1

 

It produced the following output:

 

Insert 3
3: 1517299200000 -> 1517376190493

 

I'm not really sure what the program was supposed to do, but it didn't produce a NullPointerException for me.

 

However, an important difference is that I ran the program in Embedded mode, not in Client/Server mode.

Hi. I have attached the version of EmbeddedDriver for easy testing.
 Test results are the same between Server/Client and EmbeddedDriver.

Yes, it reproduces for me now. I see the following in my derby.log:

 

Wed Jan 31 06:35:24 PST 2018 Thread[main,5,main] (XID = 212), (SESSIONID = 1), (DATABASE = test), (DRDAID = null), Faile
d Statement is: SELECT id, LASTUPDATE FROM test1 WHERE id = ? FOR UPDATE OF id, LASTUPDATE with 1 parameters begin parameter #1: 3 :end parameter 
java.lang.NullPointerException
 at org.apache.derby.iapi.store.access.BackingStoreHashtable.remove(BackingStoreHashtable.java:968)
 at org.apache.derby.impl.sql.execute.TableScanResultSet.getNextRowCore(TableScanResultSet.java:520)
 at org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet.getNextRowCore(IndexRowToBaseRowResultSet.java:346)
 at org.apache.derby.impl.sql.execute.BasicNoPutResultSetImpl.getNextRow(BasicNoPutResultSetImpl.java:488)
 at org.apache.derby.impl.jdbc.EmbedResultSet.movePosition(EmbedResultSet.java:450)
 at org.apache.derby.impl.jdbc.EmbedResultSet.next(EmbedResultSet.java:394)
 at Main.main(Main.java:123)

I don't fully understand what's going wrong here, but I (sort of) know how to fix it.

The problem involves:
 # The use of a CONCUR_UPDATABLE result set and a SELECT ... FOR UPDATE statement, which triggers some tricky code in TableScanResultSet
 # The fact that we execute the query multiple times, closing and reopening result sets on the same prepared statement
 # A bug (I think) in the TableScanResultSet.close() logic.

 

The tricky code in TableScanResultSet is very very old code:
{code:java}
/** 
 * This field is used by beetle 3865, updateable cursor using index. It 
 * is a hash table containing updated rows that are thrown into future 
 * direction of the index scan, and as a result we'll hit it again but 
 * should skip it. The hash table will spill to disk if it grows too big 
 * to be kept in memory. 
 */ 
protected BackingStoreHashtable past2FutureTbl;
{code}
And the bug (I think) in TableScanResultSet.close() is that when the past2FutureTbl object is lazy-initialized, so when we close() it, we also have to null out the variable, so that the next time we reopen this result set, we will re-allocate and re-initialize a new past2FutureTbl hashtable.

That is, I think the fix is:
{code:java}
Index: java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java =================================================================== 
--- java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java (revision 1805254) 
+++ java/engine/org/apache/derby/impl/sql/execute/TableScanResultSet.java (working copy) 
@@ -625,6 +625,7 @@
 if (past2FutureTbl != null)
 { 
past2FutureTbl.close(); 
+ past2FutureTbl = null;
 }
 }
 else
{code}
 

I haven't run any real tests on this, just verified that if I null-out past2FutureTbl at this point, this particular test case passes.

 

Rick, what do you think?

Attached 'patch1.diff' is a patch proposal, containing the proposed change to TableScanResultSet.close as well as the reproduction script from this issue, refactored into the UpdatableResultSetTest suite.

The test case fails without the change to TableScanResultSet.java, and passes with it.

I haven't done any other testing (my environment is a bit flaky right now).

If this patch proposal seems like a reasonable path forward, I'll try to run more tests.

Hi Bryan,

Thanks for digging into this. Your analysis sounds solid to me. It definitely looks like a bug to close the hashtable without nulling out that variable immediately afterward. Thanks.

Commit 1823037 from [~bryanpendleton] in branch 'code/trunk'
[ https://svn.apache.org/r1823037 ]

DERBY-6981: NullPointerException when re-executing PreparedStatement query.

TableScanResultSet's past2FutureTbl is a hash table containing updated
rows that are thrown into the future direction of the index scan, so
that the scan knows it's seen these rows already and should skip them
subsequently.

When the TableScanResultSet.close() method was called, it was closing the
past2FutureTbl, but not clearing the pointer, which caused the lazy
initialization of the past2FutureTbl to be incorrectly performed the
next time the same TableScanResultSet was opened and scanned, resulting
in the NullPointerException in the underlying BackingStoreHashtable code
in that second scan.

The fix is to clear the old instance and freshly initialize a new instance,
each time the TableScanResultSet is closed and reopened.

Thanks Rick for the review! I'm not planning any additional work at this time, resolving.

