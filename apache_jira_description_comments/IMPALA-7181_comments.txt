IMPALA-7181: Fix flaky test shell/test_shell_commandline.py::TestImpalaShell::test_socket_opening

test_shell_commandline.py::TestImpalaShell::test_socket_opening
uses netcat to listen to an ephemeral port to verify the expected
socket opening behavior of impala-shell.

This port number is fixed to 42000. When this port happens to
be used by another outbound socket, this test will fail.

This change refactors the test to use socket.bind(). The port used
in this test is no longer fixed and will be picked automatically.
This change also adds the proper cleanup logics to the various
subprocess.Popen objects used in the test.

Change-Id: Idd64632ded936d49fc404bcac75588dd7886be44
Reviewed-on: http://gerrit.cloudera.org:8080/10747
Reviewed-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>

Commit 5cd0c5ddf53d2f3d0283e03b7e7769b84995e1de in impala's branch refs/heads/2.x from Vincent Tran
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=5cd0c5d ]

IMPALA-7181: Fix flaky test shell/test_shell_commandline.py::TestImpalaShell::test_socket_opening

test_shell_commandline.py::TestImpalaShell::test_socket_opening
uses netcat to listen to an ephemeral port to verify the expected
socket opening behavior of impala-shell.

This port number is fixed to 42000. When this port happens to
be used by another outbound socket, this test will fail.

This change refactors the test to use socket.bind(). The port used
in this test is no longer fixed and will be picked automatically.
This change also adds the proper cleanup logics to the various
subprocess.Popen objects used in the test.

Change-Id: Idd64632ded936d49fc404bcac75588dd7886be44
Reviewed-on: http://gerrit.cloudera.org:8080/10747
Reviewed-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Not sure if it is the same issue, but saw this fail on a recent Jenkins build with the following error:
{code:java}
shell.test_shell_commandline.TestImpalaShell.test_socket_opening[table_format_and_file_extension: ('textfile', '.txt') | protocol: beeswax] (from pytest)

Error Message
Impala/tests/shell/test_shell_commandline.py:797: in test_socket_opening     self._validate_expected_socket_connected(vector, args2, s) Impala/tests/shell/test_shell_commandline.py:767: in _validate_expected_socket_connected     connection, client_address = sock.accept() /usr/lib64/python2.7/socket.py:202: in accept     sock, addr = self._sock.accept() E   error: [Errno 4] Interrupted system call

Stacktrace
Impala/tests/shell/test_shell_commandline.py:797: in test_socket_opening
    self._validate_expected_socket_connected(vector, args2, s)
Impala/tests/shell/test_shell_commandline.py:767: in _validate_expected_socket_connected
    connection, client_address = sock.accept()
/usr/lib64/python2.7/socket.py:202: in accept
    sock, addr = self._sock.accept()
E   error: [Errno 4] Interrupted system call
{code}

This happened again in [impala-cdpd-master-core:|https://master-02.jenkins.cloudera.com/job/impala-cdpd-master-core/393/]
{code:java}
/data/jenkins/workspace/impala-cdpd-master-core/repos/Impala/tests/shell/test_shell_commandline.py:822: in test_socket_opening
    self._validate_expected_socket_connected(vector, args2, s)
/data/jenkins/workspace/impala-cdpd-master-core/repos/Impala/tests/shell/test_shell_commandline.py:792: in _validate_expected_socket_connected
    connection, client_address = sock.accept()
/usr/lib64/python2.7/socket.py:202: in accept
    sock, addr = self._sock.accept()
E   error: [Errno 4] Interrupted system call
{code}

[~thundergun] could you take a look?

Taking a look.

Unfortunately, I have not been able to reproduce this exact error from the shell - but a few Google search results seem to indicate that this is a ubiquitous problem: 
{noformat}
[Errno 4] Interrupted system call 
{noformat}
 

Delivering a SIGINT to the Python process executing socket.accept() does raise an exception:
{noformat}
[root@v-711-1 ~]# ./open-socket.py
Listening to port: 56959
Traceback (most recent call last):
 File "./open-socket.py", line 11, in <module>
 connection, client_address = s.accept()
 File "/usr/lib64/python2.7/socket.py", line 202, in accept
 sock, addr = self._sock.accept()
KeyboardInterrupt
{noformat}
Assuming that the signal delivered during the test is benign, the EINTR error should be handled, and the accept() should be retried. This is a feature of Python 3.5[1], so I think it's safe to implement it here.

 

[~csringhofer] - do you have any opinions about this?

 

[1] [https://www.python.org/dev/peps/pep-0475/]

 

 

 

We have seen the same failed tests in a recent build at [https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/9868/testReport/junit/shell.test_shell_commandline/TestImpalaShell/test_socket_opening_table_format_and_file_extension____textfile_____txt_____protocol__hs2_/] with the following stack trace.
{noformat}
shell/test_shell_commandline.py:819: in test_socket_opening
    self._validate_expected_socket_connected(vector, args1, s)
shell/test_shell_commandline.py:792: in _validate_expected_socket_connected
    connection, client_address = sock.accept()
/usr/lib/python2.7/socket.py:206: in accept
    sock, addr = self._sock.accept()
E   error: [Errno 4] Interrupted system call
{noformat}


The original failure doesn't look at all related aside from being the same test. I filed a Jira for the new problem here and pushed out a code review: IMPALA-9547

