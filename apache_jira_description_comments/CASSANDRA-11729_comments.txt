Looking at the code, this error happens when we have existing KeyspaceMetadata for a keyspace we're trying to create. Seeing as how the test is waiting on schema agreement at the appropriate points, I do not believe this should be happening.


This isn't actually related to indexes, but is highlighting a race condition which is pretty pervasive. You can see from the stacktrace that the assertion error is actually being thrown from a lambda defined in {{CassandraDaemon::setup}}, which only runs when a node is started. From inspection of the code and logs, what seems to be happening is this:
* At startup node1 creates a task to submit rebuilds of all MVs in all keyspaces& submits it to the {{OptionalTasks}} executor to run after {{RING_DELAY}}.
* While this is still pending, all 3 nodes finish startup and proceed with the test, creating and then dropping the {{ks}} keyspace. 
* It so happens that all of the "DROP KEYSPACE" statements hit node3 as the coordinator. From its log, we can see that the 4th of these executes at {{00:33:56,585}}, so shortly after that point, it pushes a defs change to node1 and node2.
* Back on node1, the MV building runnable is executed where it calls {{Keyspace::all}} and begins to iterate the keyspaces, submitting MV builds. 

This is where the race occurs. {{Keyspace::all}} provides an iterable of {{Keyspace}} instance by transforming the key set of {{Schema.instance.keyspaces}}, using {{Keyspace::open}} as the transformation function. Concurrently, processing the schema update pushed by node3 follows the path 
{code}
SchemaKeyspace::mergeSchema
  -> Schema.instance.dropKeyspace
      -> Schema.instance.clearKeyspaceMetadata
          -> Schema.instance.keyspaces.remove
{code}

If the removal from {{Schema.instance.keyspaces}} happens after the transforming iterable has read the keyspace name from the keyset, but before it attempts to open the {{Keyspace}}, the assertion error is thrown. 

This is really a deep rooted problem with schema not being properly safe under any level of concurrency. {{Keyspace::all}} has many callsites, all of which are potentially vulnerable to this and fixing that properly should be done as a subtask of CASSANDRA-9424. 

[~iamaleksey] , I don't think that any of the existing subtasks fully capture this. Do you think it may fit in CASSANDRA-9425, or do you think a new ticket is called for?
 
[~philipthompson], is the best thing to do here just to mark the test as flaky for now?

This has failed once in the last hundred or so runs. Maybe more. I'd feel safer leaving it annotated as a known failure, but we can set it as flaky, yes.

I've marked the dtest as flaky in and added a note in the docstring (in [638167ff|https://github.com/riptano/cassandra-dtest/commit/638167fff0eb57bcf39e31de237d4c4a1d35a0d4]), so closing this now.

