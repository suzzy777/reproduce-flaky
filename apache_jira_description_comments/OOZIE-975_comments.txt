TestCoordKillXCommand.testCoordKillSuccess2 also failing. From the attached kill-output.txt, it seems like coord-materialize and coordinputcheckx are running for no reason. The service triggering them (CoordMaterializeTriggerService) should not be loaded.

Different ways to not load all services classes in a test case:

1) Split the current 'oozie.services' property in two 1) oozie.services and 2) oozie.services.toBeNotUsedbyTestCases (name can be changed). The 'Services' class will load classes using both these values. XTestCase will set oozie.services.NotToBeUsedbyTestCases to empty. So by default, they will not be loaded by any test case. If a particular test case requires a service to be loaded from 'nottobeused' list, they can override this value.  

2) Maintain a list of services to be loaded only for testCases in XTestCase. But, this would require maintaining the list when a service is added 

3) Have a configuration in oozie-default like 'oozie.services.toBeLoadedByTestCases' and use this in XTestCase. However, XTestCase doesn't have a services instance, so there is no clean to get the value of conf.

4) By default load all services classes and make the failing test cases remove the conflicting test cases. But this would require maintaining the list of all flaky test cases.

Comments are appreciated..

After some experimentation, following is the list of services classes not required by most of the TestCases. Also most of them cause conflict with the actual test cases.

{code}
org.apache.oozie.service.CoordMaterializeTriggerService,
org.apache.oozie.service.ActionCheckerService,
org.apache.oozie.service.RecoveryService,
org.apache.oozie.service.PurgeService,
org.apache.oozie.service.PauseTransitService,
org.apache.oozie.service.StatusTransitService,
org.apache.oozie.service.GroupsService,
org.apache.oozie.service.ProxyUserService
{code}

Different options of separating them from other services class are mentioned in above comment.


I'm a bit puzzled on why they would conflict? Furthermore, I think it is good we test things with most/all of them loaded as that would identify runtime issues. If you need a special behavior in any of those services, you can always override them in the setUp() method of the testcase, by adding an overriding impl via setSystemProperty() to 'oozie.services.ext', or by using Services().get().setService(). What is the exact issue you are seeing here.

Had a chat with tucu, will summarize the two issues here:

1) Load all the services classes for test cases. If there is any conflict due to the already running services in any test case, remove them in the specific test's case setUp() method. Any new test case should be designed considering this fact.

2) The services.destroy() may not be shutting down all the running threads and needs to be fixed. This will be done in a separate JIRA.



Patch at https://reviews.apache.org/r/6927/

Testing JIRA OOZIE-975

Cleaning local svn workspace

{code}
----------------------------

+1 PATCH_APPLIES
   CLEAN cleaned target directories
-1 RAW_PATCH_ANALYSIS
    +1 the patch does not introduce any @author tags
    +1 the patch does not introduce any tabs
    +1 the patch does not introduce any trailing spaces
    -1 the patch contains 2 line(s) longer than 132 characters
    +1 the patch does adds/modifies 8 testcase(s)
+1 RAT
    +1 the patch does not seem to introduce new RAT warnings
+1 JAVADOC
    +1 the patch does not seem to introduce new Javadoc warnings
+1 COMPILE
    +1 HEAD compiles
    +1 patch compiles
    +1 the patch does not seem to introduce new javac warnings
+1 BACKWARDS_COMPATIBILITY
    +1 the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
    +1 the patch does not modify JPA files
+1 TESTS
   Tests run: 907
   Tests failures: 0
   Tests errors: 0
+1 DISTRO
    +1 distro tarball builds with the patch 

----------------------------
{code}

The full output of the test-patch run is available at

   https://builds.apache.org/job/oozie-trunk-precommit-build/82/

Looks good to me.  

The only thing would be that instead of having 5 almost identical copies of the
{{private void setClassesToBeExcluded(Configuration conf)}} method, maybe it would be better to move the method definition to the parent class, XDataTestCase and have an array or varargs argument to take the services to disable; e.g. 
{{protected void setClassesToBeExcluded(Configuration conf, String[] excludedServices)}} or
{{protected void setClassesToBeExcluded(Configuration conf, String... excludedServices)}}
This would also allow any future new tests to use this without copying the code.  

Thanks Robert for the review. New patch adds a method to XDataTestCase instead of duplicating.

Testing JIRA OOZIE-975

Cleaning local svn workspace

{code}
----------------------------

+1 PATCH_APPLIES
   CLEAN cleaned target directories
-1 RAW_PATCH_ANALYSIS
    +1 the patch does not introduce any @author tags
    +1 the patch does not introduce any tabs
    +1 the patch does not introduce any trailing spaces
    -1 the patch contains 2 line(s) longer than 132 characters
    +1 the patch does adds/modifies 8 testcase(s)
+1 RAT
    +1 the patch does not seem to introduce new RAT warnings
+1 JAVADOC
    +1 the patch does not seem to introduce new Javadoc warnings
+1 COMPILE
    +1 HEAD compiles
    +1 patch compiles
    +1 the patch does not seem to introduce new javac warnings
+1 BACKWARDS_COMPATIBILITY
    +1 the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
    +1 the patch does not modify JPA files
+1 TESTS
   Tests run: 907
   Tests failures: 0
   Tests errors: 0
+1 DISTRO
    +1 distro tarball builds with the patch 

----------------------------
{code}

The full output of the test-patch run is available at

   https://builds.apache.org/job/oozie-trunk-precommit-build/84/

+1. Virag please edit the 2 lines exceeding 132 chars on commit. THX

Committed to trunk. New patch after editing lines greater than 132 chars attached.

Closing issue as it has been released as part of 3.3.0 release

