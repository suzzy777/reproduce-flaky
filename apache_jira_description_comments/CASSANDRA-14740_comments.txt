Patch available [here|https://github.com/belliottsmith/cassandra/tree/14740]; [tests|https://circleci.com/workflow-run/9b4bc0a4-ba24-4a29-a6fd-4bf78f125432]

The basic approach is quite simple: when we repair, we build a {{WritePlan}}, but we only select those nodes we need to meet the consistency level of the operation we are performing, and we only consider live nodes.  We prefer those nodes we have read from.  If they are all present, and they are sufficient to meet consistency, we behave as before.  In any other scenario, we build a partition representing all differences we have seen, and propagate this to any node that wasn't one of the original targets.

There are some minor inefficiencies, such as not handling the case where the ownership of only one node has changed, and there is no node pending, in which case we _might_ be able to only propagate the difference found on reconciling the presumably replaced node (though if unsafe bootstrap occurred even this would not be acceptable, but this might be an acceptable consistency failure given the semantic guarantees of this).  

We also don't bother to avoid merging the complete diff row with any other pending repairs if we have to perform an additional write.  It's assume that these scenario are rare, and not worth the significant extra complexity.

Unfortunately fixing unit tests was painful and not super beautiful.  This is because read-repair now consults the ring to decide who a repair should be routed to, instead of assuming it is sufficient to write to those we read from.  The tests as written assume the ring can be empty, and also that replication factor isn't relevant, so to avoid completely rewriting the tests, I have done some ugly things.

This is nice. As well as addressing the bug, using a {{ReplicaPlan}} for the writes really clarifies {{BlockingPartitionRepair}} & {{BlockingReadRepair}}.

There's a copy/paste bug in {{RowIteratorMergeListener::applyToPartition}} in the {{buildFullDiff}} branch, where it should be setting {{repairs[repairs.length - 1]}}. This is causing the new {{movingTokenReadRepairTest}} failure, but locally at least, it doesn't affect the other tests in that fixture so I'm not sure what's going on in CircleCI.

The patch also needs a rebase, but it doesn't look too onerous.

Nits:
* {{BlockingReadRepair}} #54: extraneous comment
* {{ReadRepairTest}} #199: formatting
* {{RowIteratorMergeListener}}: unused import
* I find the style of having the conditions and statements for an {{if/else}} on the same line ({{RowIteratorMergeListener}} #373) makes them harder to parse. This is clearly rather subjective though and maybe just because it's not followed more universally in the project - feel free to ignore.


Thanks, I've addressed your comments and pushed.  I still need to figure out how to parse CircleCI results.

[CircleCI|https://circleci.com/workflow-run/1e09aaed-8345-484f-bc9d-a9b018005520] looks clean (I think? I'm losing faith in my ability to understand its UX, or its ability to understand our output)



Committed to trunk in {{0f22dab1a015cb84d9857f940de5a256bfbee083}}. Final CI run after rebasing with only previously known failures: [jdk8|https://circleci.com/workflow-run/3cb3c20e-6dea-4fd6-8aff-193e1e7d298b]Â & [jdk11|https://circleci.com/workflow-run/024ba3cd-c112-4f73-a562-b364ea420e3c]

spoke to sam about this; MessageForwardingTest is a regression and not an existing issue.

This test used to fail on java 11 (was stable on java 8) because of a change in behavior of java Streams; Blake fixed that in 1f7e3c2835c79363025a01a8470ee85d17457cf8 and since then the test has been stable.

The test is now failing in both java 8 and java 11 and isn't flaky, fails 100% of the time.

Sorry, this broke {{MessageForwardingTest}} by forcing the RF of the test keyspace to 3; I mistakenly thought that test was already failing before. 
Fixed in a follow up commit [{{cb4314ee96}}|https://github.com/apache/cassandra/commit/cb4314ee96922f870f5b30d6594a42d2007a5bb2] with CI runs for [jdk8|https://circleci.com/workflow-run/3e9a34a0-a6b7-4b41-9e7f-667233f858c6] and [jdk11|https://circleci.com/workflow-run/442cd66f-25c4-4d39-988b-7bdd3aceae5a]

