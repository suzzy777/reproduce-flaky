End of the log for a failing case has these lines:
{noformat}
2019-02-06 14:18:11,218 ERROR [PEWorker-1] helpers.MarkerIgnoringBase(159): CODE-BUG: Uncaught runtime exception for pid=1, state=FAILED, locked=true, exception=java.io.IOException via Should have persisted the timeout value:java.io.IOException: Should have persisted the timeout value; org.apache.hadoop.hbase.procedure2.TestProcedureSkipPersistence$TestProcedure
java.lang.UnsupportedOperationException
   at org.apache.hadoop.hbase.procedure2.TestProcedureSkipPersistence$TestProcedure.rollback(TestProcedureSkipPersistence.java:109)
   at org.apache.hadoop.hbase.procedure2.TestProcedureSkipPersistence$TestProcedure.rollback(TestProcedureSkipPersistence.java:62)
   at org.apache.hadoop.hbase.procedure2.Procedure.doRollback(Procedure.java:982)
   at org.apache.hadoop.hbase.procedure2.ProcedureExecutor.executeRollback(ProcedureExecutor.java:1663)
   at org.apache.hadoop.hbase.procedure2.ProcedureExecutor.executeRollback(ProcedureExecutor.java:1595)
   at org.apache.hadoop.hbase.procedure2.ProcedureExecutor.executeProcedure(ProcedureExecutor.java:1438)
   at org.apache.hadoop.hbase.procedure2.ProcedureExecutor.access$1200(ProcedureExecutor.java:78)
   at org.apache.hadoop.hbase.procedure2.ProcedureExecutor$WorkerThread.run(ProcedureExecutor.java:2058)
2019-02-06 14:18:11,219 INFO  [PEWorker-1] procedure2.ProcedureExecutor(1625): Rolled back pid=1, state=ROLLEDBACK, exception=java.io.IOException via Should have persisted the timeout value:java.io.IOException: Should have persisted the timeout value; org.apache.hadoop.hbase.procedure2.TestProcedureSkipPersistence$TestProcedure exec-time=247msec
2019-02-06 14:18:11,306 INFO  [Time-limited test] procedure2.ProcedureExecutor(702): Stopping
2019-02-06 14:18:11,307 INFO  [Time-limited test] wal.WALProcedureStore(331): Stopping the WAL Procedure Store, isAbort=false{noformat}
The IOException is thrown from TestProcedure's execute method.

Steps:
 # Procedure(a) added with timeout=3600000 with no persistence.
 # ProcedureExecutor restarted
 # Procedure(b) restored, no timeout restored; set timeout=2000 with persistence
 # ProcedureExecutor restarted
 # Procedure(c) restored, should have timeout

When the test fails Step #3 and #4 are running in parallel so Procedure(b) it not started/persisted completely. After ProcedureExecutor is started (step 4) it discovers the procedure but it does not have persisted timeout on it. Is it still the original Procedure(a)?

[~Apache9], do you think it is a test or a production issue?

Let me check.

OK, so the problem here is that, we will first set the procedure state and timeout, and then try to persist it. But in the testing code, we will restart the procedure executor just after we check the procedure state in memory, so it is possible that we kill the procedure executor before we actually persist the procedure state?

Seems like a test issue. Let me think how to fix it...

Yes, that's what I observed.

Check active executor count before restarting the ProcedureExecutor. We will update the procedure state in executeProcedure method, and the decreasing of activeExecutorCount is performed after this method, so I think this could solve the problem. Could you please try if it works for you? [~psomogyi] Thanks.

| (/) *{color:green}+1 overall{color}* |
\\
\\
|| Vote || Subsystem || Runtime || Comment ||
| {color:blue}0{color} | {color:blue} reexec {color} | {color:blue}  0m 10s{color} | {color:blue} Docker mode activated. {color} |
|| || || || {color:brown} Prechecks {color} ||
| {color:green}+1{color} | {color:green} hbaseanti {color} | {color:green}  0m  0s{color} | {color:green} Patch does not have any anti-patterns. {color} |
| {color:green}+1{color} | {color:green} @author {color} | {color:green}  0m  0s{color} | {color:green} The patch does not contain any @author tags. {color} |
| {color:green}+1{color} | {color:green} test4tests {color} | {color:green}  0m  0s{color} | {color:green} The patch appears to include 1 new or modified test files. {color} |
|| || || || {color:brown} master Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  4m 55s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 24s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 15s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} shadedjars {color} | {color:green}  4m 34s{color} | {color:green} branch has no errors when building our shaded downstream artifacts. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 26s{color} | {color:green} master passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 12s{color} | {color:green} master passed {color} |
|| || || || {color:brown} Patch Compile Tests {color} ||
| {color:green}+1{color} | {color:green} mvninstall {color} | {color:green}  4m 38s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} compile {color} | {color:green}  0m 22s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javac {color} | {color:green}  0m 22s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} checkstyle {color} | {color:green}  0m 14s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} whitespace {color} | {color:green}  0m  0s{color} | {color:green} The patch has no whitespace issues. {color} |
| {color:green}+1{color} | {color:green} shadedjars {color} | {color:green}  4m 35s{color} | {color:green} patch has no errors when building our shaded downstream artifacts. {color} |
| {color:green}+1{color} | {color:green} hadoopcheck {color} | {color:green}  9m 57s{color} | {color:green} Patch does not cause any errors with Hadoop 2.7.4 or 3.0.0. {color} |
| {color:green}+1{color} | {color:green} findbugs {color} | {color:green}  0m 35s{color} | {color:green} the patch passed {color} |
| {color:green}+1{color} | {color:green} javadoc {color} | {color:green}  0m 12s{color} | {color:green} the patch passed {color} |
|| || || || {color:brown} Other Tests {color} ||
| {color:green}+1{color} | {color:green} unit {color} | {color:green}  3m 27s{color} | {color:green} hbase-procedure in the patch passed. {color} |
| {color:green}+1{color} | {color:green} asflicense {color} | {color:green}  0m  9s{color} | {color:green} The patch does not generate ASF License warnings. {color} |
| {color:black}{color} | {color:black} {color} | {color:black} 35m 33s{color} | {color:black} {color} |
\\
\\
|| Subsystem || Report/Notes ||
| Docker | Client=17.05.0-ce Server=17.05.0-ce Image:yetus/hbase:b002b0b |
| JIRA Issue | HBASE-21854 |
| JIRA Patch URL | https://issues.apache.org/jira/secure/attachment/12958219/HBASE-21854.patch |
| Optional Tests |  dupname  asflicense  javac  javadoc  unit  findbugs  shadedjars  hadoopcheck  hbaseanti  checkstyle  compile  |
| uname | Linux b155a60c2102 4.4.0-139-generic #165~14.04.1-Ubuntu SMP Wed Oct 31 10:55:11 UTC 2018 x86_64 GNU/Linux |
| Build tool | maven |
| Personality | /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build@2/component/dev-support/hbase-personality.sh |
| git revision | master / c48438fcb0 |
| maven | version: Apache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-17T18:33:14Z) |
| Default Java | 1.8.0_181 |
| findbugs | v3.1.0-RC3 |
|  Test Results | https://builds.apache.org/job/PreCommit-HBASE-Build/15923/testReport/ |
| Max. process+thread count | 286 (vs. ulimit of 10000) |
| modules | C: hbase-procedure U: hbase-procedure |
| Console output | https://builds.apache.org/job/PreCommit-HBASE-Build/15923/console |
| Powered by | Apache Yetus 0.8.0   http://yetus.apache.org |


This message was automatically generated.



I did not succeed to reproduce the race condition on my local machine so I added some sleep before _throw new ProcedureSuspendedException()_. By this the original test failed with the same error as I reported it in the description and with your patch it succeeded 100/100 times.

Thanks for the patch [~Apache9]. Pushed to branch-2.1+

Results for branch branch-2
	[build #1677 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/branch-2/1677/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2/1677//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2/1677//JDK8_Nightly_Build_Report_(Hadoop2)/]


(/) {color:green}+1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2/1677//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch branch-2.2
	[build #34 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/branch-2.2/34/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2.2/34//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2.2/34//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2.2/34//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Results for branch branch-2.1
	[build #856 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/branch-2.1/856/]: (/) *{color:green}+1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2.1/856//General_Nightly_Build_Report/]




(/) {color:green}+1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2.1/856//JDK8_Nightly_Build_Report_(Hadoop2)/]


(/) {color:green}+1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2.1/856//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Mighty [~psomogyi]... TestProcedureSkipPersistence is in branch-2.0. Do i need this fix there sir? Thanks.

Oh, I don't see this test failing on branch-2.0 flakies so perhaps not related?  https://builds.apache.org/view/H-L/view/HBase/job/HBase-Find-Flaky-Tests/job/branch-2.0/lastSuccessfulBuild/artifact/dashboard.html

This issue is not critical, only a rare condition in test. That's the reason why I did not push it to branch-2.0. If you want I can commit it there too, no harm.

Results for branch master
	[build #789 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/master/789/]: (x) *{color:red}-1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/master/789//General_Nightly_Build_Report/]




(x) {color:red}-1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/master/789//JDK8_Nightly_Build_Report_(Hadoop2)/]


(x) {color:red}-1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/master/789//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


(/) {color:green}+1 client integration test{color}


Reopen so I can pull back this nice fix to branch-2.0.

Pushed to branch-2.0 also.

(Thanks [~psomogyi] -- I just pushed it...)

Results for branch branch-2.0
	[build #1341 on builds.a.o|https://builds.apache.org/job/HBase%20Nightly/job/branch-2.0/1341/]: (/) *{color:green}+1 overall{color}*
----
details (if available):

(/) {color:green}+1 general checks{color}
-- For more information [see general report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2.0/1341//General_Nightly_Build_Report/]




(/) {color:green}+1 jdk8 hadoop2 checks{color}
-- For more information [see jdk8 (hadoop2) report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2.0/1341//JDK8_Nightly_Build_Report_(Hadoop2)/]


(/) {color:green}+1 jdk8 hadoop3 checks{color}
-- For more information [see jdk8 (hadoop3) report|https://builds.apache.org/job/HBase%20Nightly/job/branch-2.0/1341//JDK8_Nightly_Build_Report_(Hadoop3)/]


(/) {color:green}+1 source release artifact{color}
-- See build output for details.


