one more: https://travis-ci.org/apache/flink/jobs/370525366

This happens very frequently lately. [~NicoK] I saw that you reduced the # of buffers while working on FLINK-9076. Did you do this since you saw this kind of failures? Maybe we can just reduce it even further...

It seems like the tests are running concurrently, the ({{ExecutionEnvironment#contextEnvironmentFactory}}) set by {{SuccessAfterNetworkBuffersFailureITCase}} was override by other tests.

GitHub user sihuazhou opened a pull request:

    https://github.com/apache/flink/pull/5911

    [FLINK-9243][tests]harden SuccessAfterNetworkBuffersFailureITCase#testSuccessfulProgramAfterFailure()

    ## What is the purpose of the change
    
    This PR aim to harden `SuccessAfterNetworkBuffersFailureITCase#testSuccessfulProgramAfterFailure()`.
    
    ## Brief change log
    
      - *Use a dedicated TestEnvironment in `SuccessAfterNetworkBuffersFailureITCase#testSuccessfulProgramAfterFailure()` to avoid concurrently problem*
    
    
    ## Verifying this change
    
    This change is a trivial rework / code cleanup without any test coverage.
    
    ## Does this pull request potentially affect one of the following parts:
    
    no
    
    ## Documentation
    
    no

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sihuazhou/flink fixTestSuccessfulProgramAfterFailureUnstable

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/flink/pull/5911.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #5911
    
----
commit 0eb8055aa466ec8d7c2b60d9e2a185a7df9c5863
Author: sihuazhou <summerleafs@...>
Date:   2018-04-25T11:57:34Z

    Use dedicated TestEnvironment in SuccessAfterNetworkBuffersFailureITCase#testSuccessfulProgramAfterFailure() to avoid concurrently problem

----


Github user sihuazhou commented on the issue:

    https://github.com/apache/flink/pull/5911
  
    cc @zentol 


ITCases are run in their own JVM, it shouldn't be possible for this to affect the test outcome.

Github user zentol commented on the issue:

    https://github.com/apache/flink/pull/5911
  
    please see my latest comment in the JIRA.


Github user sihuazhou commented on the issue:

    https://github.com/apache/flink/pull/5911
  
    hmm...so, closing ...


Github user sihuazhou closed the pull request at:

    https://github.com/apache/flink/pull/5911


yes [~chesnay], I was reducing the number of buffers to the value before the credit-based flow control changes and briefly tested that it was working...
However, credit and non-credit code paths still have slightly different minimum buffer requirements on the receiver (see {{org.apache.flink.runtime.io.network.NetworkEnvironment#setupInputGate()}}:
- non-credit requires at least one buffer per input channel
- credit requires {{taskmanager.network.memory.buffers-per-channel}} (default: 2) buffers per input channel

I do see a difference in handling {{RemoteInputChannel}} vs. {{LocalInputChannel}} in this regard: local channels were also counted in non-credit mode while with credit-based flow control, they are not. {{LocalInputChannel}}, however, do not need their own buffers since they will take those from the result subpartition they are connected to.

Let me do some more digging and I'll see whether I can come up with a good solution to unify this here. Maybe [~zjwang] also has some thoughts on this but I think, the credit-based part may actually be the correct way to go.

GitHub user NicoK opened a pull request:

    https://github.com/apache/flink/pull/5915

    [FLINK-9243][tests] fix flaky SuccessAfterNetworkBuffersFailureITCase

    this adds some `rebalance()` operations into `SuccessAfterNetworkBuffersFailureITCase#runKMeans` which should be set up to fail and at the same time allow `#runConnectedComponents()` to succeed. It appears, these two have been too close together regarding network buffer use before.
    
    I ran the test 500 times locally and it always succeeded now.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/NicoK/flink flink-9243

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/flink/pull/5915.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #5915
    
----
commit f78151b345bb297963c861135b1312ccfb1945cc
Author: Nico Kruber <nico@...>
Date:   2018-04-25T18:27:43Z

    [FLINK-9243][tests] fix flaky SuccessAfterNetworkBuffersFailureITCase

----


Github user zentol commented on the issue:

    https://github.com/apache/flink/pull/5915
  
    merging.


master: 0113ee2b33e3f86bb6a3de2ecf60d8e7bf554be2
1.5: 687278d791a10b7b8e3eede93a264a11eaa7651f

Github user asfgit closed the pull request at:

    https://github.com/apache/flink/pull/5915


Github user zhijiangW commented on the issue:

    https://github.com/apache/flink/pull/5915
  
    The points is already `rebalance()` in line 131, so it is no need to `rebalance()` again in line 137?


Github user NicoK commented on the issue:

    https://github.com/apache/flink/pull/5915
  
    true, `points.rebalance()` is redundant, thanks for having a look, I created a follow-up fix in #5916


