The issue is hit very rarely in this test with JDK11 on 4.0+.

I hit the issue with the MID resources in CircleCI but I suspect we should be able to hit it also without raising resources.

Started a run here:  [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1951/workflows/843b1c08-b7c8-4da1-8ca9-a6df17e5b0f8]

To be able to start that job we need to point CircleCI to the test we want to cover.

In this case I did it by running the following command from the main cassandra folder, 4.0-based branch:

 
{code:java}
.circleci/generate.sh -l   -e REPEATED_UTEST_TARGET=test-jvm-dtest-some   -e REPEATED_UTEST_COUNT=5000   
-e REPEATED_UTEST_CLASS=org.apache.cassandra.repair.RepairJobTest   -e REPEATED_UTEST_METHODS=testNoTreesRetainedAfterDifference{code}
 

This resulted in the following commit - [https://github.com/ekaterinadimitrova2/cassandra/commit/597198f1c8043c4df043d17dfe85752de7227688]

As those are low resources the tests are still running. I will check the results tomorrow morning.

Confirmed, the test fails with the low resources too. Only thing is it takes three times more time to run in a loop the test with the free tier. 

-I actually tried an unreleased in maven central jamm jar with the mid resources and this time I didn't see the issue. I will try one more run to confirm that the issue was solved and I am not missing anything.-

This is the [branch|https://github.com/apache/cassandra/compare/trunk...ekaterinadimitrova2:cassandra:17884-4.0-hack] where I added a jar including [this commit|https://github.com/jbellis/jamm/commit/33d78c1035211e5f9e69ad9247f3a0f6ef75c923] (this is not the latest work in the repo though) which was supposed to solve that issues with JDK11 according to the author commit message in the jamm repo.

It seems it didn't and we are missing something else to filter. - [https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1955/workflows/20b3aa2c-fefd-42df-8ad0-b787add2fbb1/jobs/15494/steps]
I added annoying print in the jamm code and verified it is printed in the CircleCI logs to ensure nothing went wrong and we use the new jar I plugged in.

I also think we need to get back to the repo [TreePrint|https://github.com/ekaterinadimitrova2/jamm/blob/33d78c1035211e5f9e69ad9247f3a0f6ef75c923/src/org/github/jamm/TreePrinter.java] class as I think it is really useful for debugging. Others think in the same way. If we feel it lacks some testing, better to add that than to remove it completely.

Another test in 4.0 hit the same issue - [testTruncationReleasesLogSpace|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1977/workflows/041331ac-fce0-47ac-b475-83759ac4e2c7/jobs/15701/tests#failed-test-0]

Thanks for your help Ekaterina, posting summary of conversation we had here

 
 # Issue I have seen so far with this test is when MemoryMeter tries to access fields from JDK internal classes like com.sun.*, jdk.internal.* etc. There is a commit in jamm [https://github.com/jbellis/jamm/commit/33d78c1035211e5f9e69ad9247f3a0f6ef75c923] (Ekaterina pointed me to) addressing this specific issue, but it does not seem to filter out all the JDK internal classes.
 # Also there might be a timing issue involved here. When I step into the code using IntelliJ and look at the values of the variables (adding latency), occurrence of the failure is delayed.

 

Still trying to figure out when the iteration in MemoryMeter.addFieldChildren should terminate.

Avoiding access to these internal functions will help JDK11. Foreign function interface available as part of project Panama maybe another option, in later JDK versions, to get the object size.

There are couple of tasks being worked on to resolve this issue
1) We suspect there are objects which should not be considered in the object size calculation and those classes need to be marked Unmetered. [^RepairSessionTree.txt] contains a printout of the tree traversed by Jamm for a MeasurableRepairSession object, DebuggableThreadPoolExecutor is an example.

2) Jamm library needs to handle modules/hidden classes/Java internal classes appropriately, Benjamin is looking into it.

Moving this one back to open to acknowledge it is not actively worked on now.

This one is blocked on CASSANDRA-18329 which will happen when new jamm version is released.

