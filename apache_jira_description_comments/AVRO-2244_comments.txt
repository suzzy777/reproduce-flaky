The spec for [ISO_LOCAL_TIME|https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#ISO_LOCAL_TIME]: "One to nine digits for the nano-of-second. As many digits will be output as required."  So it's going to drop the trailing zeros.

The spec for the [JODA formatter|https://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#time--] that's being used here says: "Returns a formatter for a two digit hour of day, two digit minute of hour, two digit second of minute, three digit fraction of second, and time zone offset (HH:mm:ss.SSSZZ).", i.e., it will pad with trailing zeros.

So the test code in this case is buggy.

I don't believe the fix for AVRO-2241 addresses the problem in AVRO-2244: 2244 seems to be related to the _formatting_ of times, rather than the truncation of them.  However, I think the reverse is true: A fix to AVRO-2244 would (have) addressed the problem seen in AVRO-2241.

If there's any doubt about this issue being resolved, I just got the following error:
{noformat}
testAbilityToReadJsr310RecordWrittenAsJodaRecord(org.apache.avro.specific.TestSpecificLogicalTypes) Time elapsed: 0.085 sec <<< FAILURE!
java.lang.AssertionError:
Expected: is "23:43:30.800"
     but: was "23:43:30.8"}}
     at org.apache.avro.specific.TestSpecificLogicalTypes.testAbilityToReadJsr310RecordWrittenAsJodaRecord(TestSpecificLogicalTypes.java:150)
{noformat}
Personally, I would revert AVRO-2241 and figure out how to get {{TestSpecificLogicalTypes.testAbilityToReadJsr310RecordWrittenAsJodaRecord}} to output zero-padded, three-digit time stamps for the Jsr310 case.

The solution for AVRO-2241 reduces the problem frequency from 1 in 10 to 1 in 1000.
I showed how to deterministically reproduce the problem [here|https://github.com/thiru-apache/avro/commit/7c4160553f4337c0ded0b40ac2833cebf24e2a07]

thiru-apache opened a new pull request #386: Test and fix for AVRO-2244
URL: https://github.com/apache/avro/pull/386
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


I fixed this over here: https://github.com/apache/avro/commit/25032e10a86851bdabfa29b99885ccfc03c6667e#diff-a2bcc0c4e92dfb4332f75a9d56cdb4daR73


Fokko commented on issue #386: Test and fix for AVRO-2244
URL: https://github.com/apache/avro/pull/386#issuecomment-440232578
 
 
   This looks good. Thanks @thiru-apache for fixing this!

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


Fokko closed pull request #386: Test and fix for AVRO-2244
URL: https://github.com/apache/avro/pull/386
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/lang/java/avro/src/test/java/org/apache/avro/specific/TestSpecificLogicalTypes.java b/lang/java/avro/src/test/java/org/apache/avro/specific/TestSpecificLogicalTypes.java
index ba8923980..02bea73bd 100644
--- a/lang/java/avro/src/test/java/org/apache/avro/specific/TestSpecificLogicalTypes.java
+++ b/lang/java/avro/src/test/java/org/apache/avro/specific/TestSpecificLogicalTypes.java
@@ -27,7 +27,6 @@
 import java.time.format.DateTimeFormatter;
 import java.time.format.DateTimeFormatterBuilder;
 import java.time.temporal.ChronoField;
-import java.time.temporal.ChronoUnit;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -46,6 +45,7 @@
 import org.joda.time.DateTimeZone;
 import org.joda.time.LocalDate;
 import org.joda.time.LocalTime;
+import org.joda.time.chrono.ISOChronology;
 import org.joda.time.format.ISODateTimeFormat;
 import org.junit.Assert;
 import org.junit.Rule;
@@ -119,8 +119,8 @@ public void testRecordWithJsr310LogicalTypes() throws IOException {
         3019.34,
         null,
         java.time.LocalDate.now(),
-        java.time.LocalTime.now().truncatedTo(ChronoUnit.MILLIS),
-        java.time.Instant.now().truncatedTo(ChronoUnit.MILLIS),
+        java.time.LocalTime.now(),
+        java.time.Instant.now(),
         new BigDecimal(123.45f).setScale(2, BigDecimal.ROUND_HALF_DOWN)
     );
 
@@ -133,6 +133,7 @@ public void testRecordWithJsr310LogicalTypes() throws IOException {
 
   @Test
   public void testAbilityToReadJsr310RecordWrittenAsJodaRecord() throws IOException {
+
     TestRecordWithLogicalTypes withJoda = new TestRecordWithLogicalTypes(
             true,
             34,
@@ -142,7 +143,10 @@ public void testAbilityToReadJsr310RecordWrittenAsJodaRecord() throws IOExceptio
             null,
             LocalDate.now(),
             LocalTime.now(),
-            DateTime.now().withZone(DateTimeZone.UTC),
+            // There is no reliable way to get fixed width string from ISO_INSTANT below
+            // for granularity less than one second second.
+            new DateTime((System.currentTimeMillis() / 1000) * 1000,
+                    ISOChronology.getInstance()).withZone(DateTimeZone.UTC),
             new BigDecimal(123.45f).setScale(2, BigDecimal.ROUND_HALF_DOWN)
     );
 
@@ -162,7 +166,7 @@ public void testAbilityToReadJsr310RecordWrittenAsJodaRecord() throws IOExceptio
 
     Assert.assertThat(ISO_LOCAL_DATE.format(withJsr310.getD()), is(ISODateTimeFormat.date().print(withJoda.getD())));
     Assert.assertThat(ISO_LOCAL_TIME.format(withJsr310.getT()), is(ISODateTimeFormat.time().print(withJoda.getT())));
-    Assert.assertThat(ISO_INSTANT.format(withJsr310.getTs()), is(ISODateTimeFormat.dateTime().print(withJoda.getTs())));
+    Assert.assertThat(ISO_INSTANT.format(withJsr310.getTs()), is(ISODateTimeFormat.dateTimeNoMillis().print(withJoda.getTs())));
     Assert.assertThat(withJsr310.getDec(), comparesEqualTo(withJoda.getDec()));
   }
 
@@ -176,8 +180,8 @@ public void testAbilityToReadJodaRecordWrittenAsJsr310Record() throws IOExceptio
             3019.34,
             null,
             java.time.LocalDate.now(),
-            java.time.LocalTime.now().truncatedTo(ChronoUnit.MILLIS),
-            java.time.Instant.now().truncatedTo(ChronoUnit.MILLIS),
+            java.time.LocalTime.now(),
+            java.time.Instant.now(),
             new BigDecimal(123.45f).setScale(2, BigDecimal.ROUND_HALF_DOWN)
     );
 


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org


Commit e04c2c291395339b8eb488a5e045500d366553b6 in avro's branch refs/heads/master from Thiruvalluvan M G
[ https://gitbox.apache.org/repos/asf?p=avro.git;h=e04c2c2 ]

AVRO-2244 Fix flaky datetime test (#386)



