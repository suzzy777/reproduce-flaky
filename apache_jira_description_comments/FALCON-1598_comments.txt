[~bvellanki], I believe what the test is attempting to test is if "concurrent" requests are issued to delete the same entity, one of them should fail. That, IMO is fine. We follow the same approach for update and submit too. Subsequent requests are idempotent, but, if there are concurrent requests, only one of them should return success and the rest should fail. The reason the other requests should fail is because these concurrent threads may not aware of the result/state of the succeeding thread and hence the user should re-try the request. Makes sense?

[~pallavi.rao] : If the concurrent requests end up in a race condition, where the request that won the race should delete an Entity. Subsequent requests should not fail because the there is no entity to be deleted. They should pass with a message similar to "falcon/testFeed(feed) doesn't exist. Nothing to do". That is my understanding. Am I missing anything here?

I am guessing the problem is it passes the check that the feed exists and then proceeds to delete it and other requests deletes it first. This causes it to fail with an exception. That said I totally agree that the test itself shouldn't fail.  If a test fails arbitrarily then it looses it's usefulness. If it's too difficult to fix the test then we should probably delete the test.

This patch deletes the feed concurrently instead of cluster. This will considerably reduce the chances of the testcase failing. 

[~nperiwal] : I do not think one of the two delete commands should fail. In AbstractEntityManager, the delete method calls obtainEntityLocks(entityObj, "delete", tokenList);  If another delete command is already issued for the same entity, this method throws 
{code} FalconException(command + " command is already issued for " + entity.toShortString()) {code}

I think, the inside try-catch block should catch this exception and 
{code}return new APIResult(APIResult.Status.SUCCEEDED, entity + "(" + type + ") is currently being deleted. Nothing to do"); {code}

What do you think?


I wrote some quick code to test my suggestion and it works. Do [~ajayyadava] and [~pallavi.rao] agree with this suggestion?

If there is an exception while obtaining locks, the exception will be caught anyway, because it is an nested try-catch. The parent try-catch will take care of it and one thread should see an exception.
{code}
try {
            ...
            try {
                Entity entityObj = EntityUtil.getEntity(type, entity);
                 ...
                obtainEntityLocks(entityObj, "delete", tokenList);
               ...
            } catch (EntityNotRegisteredException e) { // already deleted
                return new APIResult(APIResult.Status.SUCCEEDED,
                        entity + "(" + type + ") doesn't exist. Nothing to do");
            }

            return new APIResult(APIResult.Status.SUCCEEDED,
                    entity + "(" + type + ") removed successfully " + removedFromEngine);
        } catch (Throwable e) {
           ....
            throw FalconWebException.newException(e, Response.Status.BAD_REQUEST);
        } finally {
            releaseEntityLocks(entity, tokenList);
        }
{code}

The test is failing because of thread timing. Sometimes, by the time the second thread tries to obtain a lock, the first thread would finish its work and release the lock, resulting in a "SUCCESS" for both the cases.

If the suggestion is to change the current behavior to make concurrent requests behave similar to subsequent requests, in an idempotent manner, then, we can consider it (may be in another JIRA), and make code changes to ensure all APIs behave consistently.

But, if the suggestion is to change the test to expect "SUCCESS" for both threads. Then, it wouldn't be testing the "expected" behavior. right?

So, may be we should just let this patch fix the test and have another JIRA to make concurrent requests idempotent? If we can achieve idempotency without complexity in code, sounds good to me.



[~pallavi.rao] agreed,  we should just let this patch fix the test and have another JIRA to make concurrent requests idempotent. +1 for the patch based on our discussion. 

Will commit this in a bit.

To https://git-wip-us.apache.org/repos/asf/falcon.git
   e77e4d7..97e3587  master -> master

Thanks [~nperiwal] for fixing it and [~bvellanki] for your review and inputs.

