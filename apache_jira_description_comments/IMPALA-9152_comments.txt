I believe it's a flasky test failure. I'm trying to reproduce it.

In AuthorizationStmtTest, testRowFilterEnabled runs before testColumnMaskEnabled. This can be confirmed in Ranger's access log that create & delete row_filter policies come before create & delete col_mask policies:
{code:java}
$ grep 'service/public/v2/api/policy' access_log.2019-11-12.log
127.0.0.1 - - [12/Nov/2019:20:59:35 +0000] "POST /service/public/v2/api/policy HTTP/1.1" 200 948 "-" "Java/1.8.0_222"
127.0.0.1 - - [12/Nov/2019:20:59:58 +0000] "DELETE /service/public/v2/api/policy?servicename=test_impala&policyname=row_filter HTTP/1.1" 204 - "-" "Java/1.8.0_222"
127.0.0.1 - - [12/Nov/2019:20:59:58 +0000] "POST /service/public/v2/api/policy HTTP/1.1" 200 953 "-" "Java/1.8.0_222"
127.0.0.1 - - [12/Nov/2019:21:00:26 +0000] "DELETE /service/public/v2/api/policy?servicename=test_impala&policyname=row_filter HTTP/1.1" 204 - "-" "Java/1.8.0_222"
127.0.0.1 - - [12/Nov/2019:21:00:27 +0000] "POST /service/public/v2/api/policy HTTP/1.1" 200 1019 "-" "Java/1.8.0_222"
127.0.0.1 - - [12/Nov/2019:21:01:07 +0000] "DELETE /service/public/v2/api/policy?servicename=test_impala&policyname=col_mask HTTP/1.1" 204 - "-" "Java/1.8.0_222"
127.0.0.1 - - [12/Nov/2019:21:01:07 +0000] "POST /service/public/v2/api/policy HTTP/1.1" 200 1024 "-" "Java/1.8.0_222"
127.0.0.1 - - [12/Nov/2019:21:01:12 +0000] "DELETE /service/public/v2/api/policy?servicename=test_impala&policyname=col_mask HTTP/1.1" 204 - "-" "Java/1.8.0_222" {code}

Somehow rangerImpalaPlugin_ does not refresh the policies correctly and still see the row filtering policy from the previous test, which cause this failure. We need to add some cleanup to make sure no row_filtering policies exist in testColumnMaskEnabled.

Still trying to reproduce the failure.

I can only reproduce it by creating some row filter policies manually and then run testColumnMaskEnabled individually.
 Patch for review: [http://gerrit.cloudera.org:8080/14734]

Thanks for fixing this [~stigahuang]! This is a duplicate JIRA of https://issues.apache.org/jira/browse/IMPALA-9148.

[~stigahuang] I gave +2 to http://gerrit.cloudera.org:8080/14734 and started gerrit-verify-dryrun to fix flakiness, but I would prefer if this was investigated a bit more. My understanding is that after calling deleteRangerPolicy()  (in the finally section of the row filter test) and rangerImpalaPlugin_.refreshPoliciesAndTags() the old row filter should be gone.

Commit c1244c2f04e629cc07b0830a597c70317be92768 in impala's branch refs/heads/master from stiga-huang
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=c1244c2 ]

IMPALA-9152: Clear row filter policies before testColumnMaskEnabled

When checking privilege requests, we put table level request before
column level requests in the request list. If a table has both row
filter policy and column masking policies, the error message will be row
filtering not supported. So we need to clear any existing row filter
policies in AuthorizationStmtTest#testColumnMaskEnabled().

Test:
Manually create some row filter policies and run testColumnMaskEnabled
successfully.

Change-Id: Ic77fc7480e1b8bc8abcc3968f11ee148c1f02c0f
Reviewed-on: http://gerrit.cloudera.org:8080/14734
Reviewed-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


Seen again in https://jenkins.impala.io/job/gerrit-verify-dryrun/5283/ 
which includes c1244c2f04e629cc07b0830a597c70317be92768

Still happening, this time in our nightly builds:

https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/9104/testReport/junit/org.apache.impala.authorization/AuthorizationStmtTest/testColumnMaskEnabled_1_/
https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/9092/testReport/junit/org.apache.impala.authorization/AuthorizationStmtTest/testColumnMaskEnabled_1_/

Hit this again in org.apache.impala.authorization.AuthorizationStmtTest.testInsert[1]

{code}
org.apache.impala.authorization.AuthorizationException: 

Principal: non_owner
Statement: insert into functional.alltypes partition(month, year) select * from functional.alltypes_view where id < 100
Error: Impala does not support column masking yet. Column masking is enabled on column: functional.alltypes_view.string_col
	at org.apache.impala.authorization.AuthorizationTestBase.authzOk(AuthorizationTestBase.java:581)
	at org.apache.impala.authorization.AuthorizationTestBase.authzOk(AuthorizationTestBase.java:571)
	at org.apache.impala.authorization.AuthorizationTestBase.access$300(AuthorizationTestBase.java:75)
	at org.apache.impala.authorization.AuthorizationTestBase$AuthzTest.ok(AuthorizationTestBase.java:414)
	at org.apache.impala.authorization.AuthorizationStmtTest.testInsert(AuthorizationStmtTest.java:850)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:27)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:272)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:236)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:386)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:323)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:143)
{code}

Build: https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/9596/



Again here: https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/9052/testReport/junit/org.apache.impala.authorization/AuthorizationStmtTest/testAlterView_1_/

It's a pity that we don't keep all FeSupport.INFO files under logs/fe_tests. We just have one for the last ran test. I think somehow the RangerPlugin fail to refresh the cache. I'll try to reproduce it in my local env.

This happens more frequently now. Found in two recent builds:
 [https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/9196]
 [https://jenkins.impala.io/job/ubuntu-16.04-from-scratch/9199]
 I believe they are due to ghost policies - policies that is deleted but still exists in the plugin.

I still can't reproduce them. Just found a bug that could cause ghost policies in Ranger plugin: RANGER-2727. But it only happens when there are concurrent get and create/delete policy requests. In our FE tests, all the tests are executed in series. So I think there may be other problems.

Commit f403a96700e47df184ff782378342569be8f1c58 in impala's branch refs/heads/master from stiga-huang
[ https://gitbox.apache.org/repos/asf?p=impala.git;h=f403a96 ]

IMPALA-9152: Make Impala ranger plugin singleton in FE Tests

Fix the flakiness of Ranger FE tests in AuthorizationStmtTest which is
caused by a row filter policy not being cleanly deleted. There is a bug
in Ranger that policies being deleted in Ranger Admin server but still
exist in Ranger plugins when there are concurrent create policy and get
policy requests (RANGER-2727). It's more possible to hit the bug if we
have more ranger plugins running, since each plugin instance will poll
policies in each 30s regularly.

Impalad and Catalogd servers only initialize one ImpalaRangerPlugin
instance. However, AuthorizationStmtTest has embedded Frontend and
CatalogServiceCatalog objects. It will initialize two ranger plugin
instances totally. What's worse, the JUnit testing framework makes a new
object for each test method run. Currently there are 29 test methods in
AuthorizationStmtTest, which means 29 AuthorizationStmtTest objects will
be created. So we finally have 58 ranger plugin instances running, which
makes RANGER-2727 easy to happen.

The failure can be reproduced by adding the following new test and run
it with all existing tests:
  @Test
  public void testRangerPolicyRepeatedly() throws Exception {
    if (authzProvider_ == AuthorizationProvider.SENTRY) return;
    for (int i = 0; i < 100; ++i) {
      testRowFilterEnabled();
      testColumnMaskEnabled();
    }
  }
We only explicitly create policies for column masking and row filtering
(other tests are using grant/revoke requests). This test increases the
number of CreatePolicy requests, so increases the possibility of
CreatePolicy requests running concurrently with GetPolicies requests
polling from other ranger plugin instances created by previous tests.

The fix is to make ImpalaRangerPlugin a singleton class so we will have
only one ranger plugin instance, which dramatically reduces the
possibility of hitting RANGER-2727. The thorough fix is bumping CDP
version after RANGER-2727 is resolved. Codes added in the previous patch
(c1244c2f04e629cc07b0830a597c70317be92768) are removed.

Tests:
 - Ran AuthorizationStmtTest with the above new test.

Change-Id: I91f2bad1a9ce897b45cfc42f97b192fe2f8c7e06
Reviewed-on: http://gerrit.cloudera.org:8080/15235
Reviewed-by: Csaba Ringhofer <csringhofer@cloudera.com>
Tested-by: Impala Public Jenkins <impala-public-jenkins@cloudera.com>


