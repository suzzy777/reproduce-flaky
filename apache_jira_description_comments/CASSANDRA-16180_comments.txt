[~adelapena] [~bdeggleston] I know the main focus of this issue is testing, but I want to propose something that bleeds into our documentation and code organization along the way. {{StorageProxy}} is one of the most critical classes in the entire project, but it is almost exactly 3000 lines of code and has zero class-level JavaDoc. We should break it up into its major constituent parts (hints, Paxos, point reads, range reads, etc.) and consider testing those constituent parts in isolation. (There is a {{StorageProxyTest}}, but it's really just a test for some utilities that also happen to be jammed into {{StorageProxy}}.)

We don't have to boil the ocean either. You, [~jasonstack], and I know that SAI is already likely going to pull the range read logic out of {{StorageProxy}}, so pulling that forward (again, assuming we have reasonable tests to avoid risk) along w/ point reads could be a good first step. (That also corresponds pretty closely to this Jira in particular.)

I'd also propose that we leave Paxos/CAS out of scope for this issue. CC [~benedict]

{quote}I'd also propose that we leave Paxos/CAS out of scope for this issue.
{quote}
Yes, that's probably best - there's a related ticket where Sylvain and I have both expanded Paxos test coverage anyway, and besides this I think it is better to wait until post 4.0 (shortly after which I hope the Paxos landscape will materially improve in the project)

[~maedhroz] I'm adding [a document|https://docs.google.com/document/d/1BBeGKla9tIPflZ2awkyfl5Hc_FTs3QYw98LWUnb1fTQ/edit?usp=sharing] describing the existing dtests for coordination. I think that they are in quite better shape than the ones we found for read repair during CASSANDRA-15977, which is unsurprising given how fundamental coordination is. 

After giving it a thought I think that splitting {{StorageProxy}} and trying to add some unit tests to the separated components is a good thing to do here, particularly for the range read logic, as you said. 

I also agree that it's better to leave Paxos/CAS out of the scope of this ticket.

[~maedhroz] I have created [a PR|https://github.com/apache/cassandra/pull/801] trying to separate range query logic (and tests) from {{StorageProxy}}. It doesn't add any new tests yet, but it can be useful to see whether it eases testing and what new tests we could add. At least it reduces the size of {{StorageProxy}} and will probably ease SAI integration in the future.

[~adelapena] I'm still reading through the doc, but once place we might be able to improve our coverage is {{UpgradeTest}}. It basically looks like a coordination test through upgrade w/ mixed version clusters, but it isn't as exhaustive as what you did for {{MixedModeReadRepairTest}} in terms of the version transitions. It also only queries at {{ALL}}, so we might be able to stop nodes and move down the consistency level chain in {{runAfterClusterUpgrade()}} as well as executing the mixed cluster queries in {{runAfterNodeUpgrade()}}.

[~maedhroz] I have ported the Python dtests for short read protection to in-JVM ([this commit|https://github.com/apache/cassandra/pull/801/commits/af71097f75ec17cc9dbc98176c8c012196cddefd]). I have extended them with some extra cases and added parametrization to toggle paging, flush, coordinator, etc., similarly to what we did for read repair in CASSANDRA-15977. The PR for dtests marks the ported tests with the new {{@ported_to_in_jvm}} annotation.

While writing these tests I have found what seems to be a bug in group-by queries using paging. I have created CASSANDRA-16307 to deal with that particular issue, trying to limit the scope of this ticket. The new tests hitting that bug are just temporarily [ignored|https://github.com/apache/cassandra/blob/af71097f75ec17cc9dbc98176c8c012196cddefd/test/distributed/org/apache/cassandra/distributed/test/ShortReadProtectionTest.java#L334] in the PR, so we can enable them once we fix the bug.

Next thing is working on the upgrade tests mentioned in the previous comment.

[~adelapena] I've reviewed the latest commits and left my comments inline in the PR. The most important thing to resolve at the moment looks like the failures (ex. [here|https://github.com/apache/cassandra/pull/801/files?file-filters%5B%5D=.java#r536335965]) that are popping up every now and then around particular coordinators not recognizing row/partition deletes at CL=ALL. If we have a real bug there, I'd lean toward fixing and rebasing, given there are some more tests in the pipeline for this issue anyway.

Regarding the audit, the work here seems to mainly be focused on partition range reads. Between CASSANDRA-16180 and CASSANDRA-16181, I think we also need to look at writes (including batches), single partition reads, and paging. If we want to scope this ticket to _just_ range reads, that's fine, but we should then create some additional subtasks for CASSANDRA-15579.

Some dtests that aren't included in the doc for either ticket are:
 * multidc_putget_test.py
 * pending_range_test.py
 * putget_test.py
 * paging_test.py

It may also be helpful to drop the distinction between coordination and replication, since testing the distributed read write path is really looking at the coordination of client queries, and client writes are just one component of C* replication </bikeshed>

Code wise, things look good so far for the most part. The 2 suggestions I have at this point are:
 First, the multi-line assignment format in RangeCommandIterator should be fixed (indent before `=` in `query`)
 Second, RangeCommandExecutor could be streamlined a bit. I get that we want the range command iterator to be accessible for testing, but we shouldn't be allocating objects on the heap in production just for that. This could be reworked into a couple of static methods that would create a command iterator and another that would create a partition iterator. That would support testing and avoid any unneccesary allocations. Given that change, a better name for the class would probably be RangeCommands, or something.

I'll cover {{batch_test.py}} in the doc for CASSANDRA-16181 (given batches seem pretty clearly like a replication concern) shortly.

bq. First, the multi-line assignment format in RangeCommandIterator should be fixed (indent before `=` in `query`)
Done [here|https://github.com/apache/cassandra/pull/801/commits/bbe4d6ca6fb1c6620c318605190b472884983da5]. For some reason my IntelliJ with the project's codestyle insists on removing those indents.

bq. Second, RangeCommandExecutor could be streamlined a bit. I get that we want the range command iterator to be accessible for testing, but we shouldn't be allocating objects on the heap in production just for that. This could be reworked into a couple of static methods that would create a command iterator and another that would create a partition iterator. That would support testing and avoid any unneccesary allocations. Given that change, a better name for the class would probably be RangeCommands, or something.

I tried to do so [here|https://github.com/apache/cassandra/pull/801/commits/02affa9dcf96fd8fcbca6247a38ff19e1f1ffc7e]. The reason for having an instantiable {{RangeCommandExecutor}} was to be able to have multiple implementations of it this executor the future, when we integrate SAI. But we aren't in that point yet, and when we get there this will be easy to change it back if needed.

{quote}
Some dtests that aren't included in the doc for either ticket are:
 * multidc_putget_test.py
 * pending_range_test.py
 * putget_test.py
 * paging_test.py
{quote}
I have added those to the document. From those, I'm not sure of what else could be done for {{multidc_putget_test}} nor {{pending_range_test}}, and {{paging_test}} seems quite exhaustive as it is. 

As for {{putget_test}}, it seems a pretty old and basic test with perhaps some overlap in purpose with {{SimpleReadWriteTest}}. However, its usage of data spread across multiple sstables and interest on compression makes it interesting IMO, so I have ported it to in-JMV [here|https://github.com/apache/cassandra/pull/801/commits/820487aa4f9942094e12bdea9e7d210cabf10a9a]. The new version of these tests extends them to include some additional query types, paging and ordering, and it makes systematic the usage of multiple sstables and compression. Not sure whether we should think a better name for it.

Reviewed the last commit, and aside from some nits I've dropped inline in the PR, I thinks we're just about done here.

 The only other thing I'd like to clean up is removing some tests, like {{coordinatorReadTest}} and {{coordinatorWriteTest}} in {{SimpleReadWriteTest}}, that look completely subsumed by the new tests in this patch.

+1

CI runs:

https://app.circleci.com/pipelines/github/adelapena/cassandra/163/workflows/167dec46-e527-4377-bf86-2732f4771bf4
https://app.circleci.com/pipelines/github/adelapena/cassandra/163/workflows/6b8bea64-14d6-4b02-bc15-e8975c99d7e4
https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-test/176/
https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest/169/
https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-jvm-dtest-upgrade/167/
https://ci-cassandra.apache.org/view/all/job/Cassandra-devbranch-dtest/325/

+1 all around

I think the only failures in Circle are related to CASSANDRA-16394.



+1 with some small comments on the PR. I think we can further extend the scope of this audit by fuzz tests, using learnings from this work!

[~ifesdjeen] thanks for the review, I have tried to address the comments on the PR. I have also rebased the PR and CI is running:

* [j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/177/workflows/fc561f5a-9041-4ada-ab95-4b53a858d8b2]
* [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/177/workflows/91650c9b-c6bd-4a75-8957-5dd86a71cc13]

I think we can do the fuzz testing part in the sibling ticket CASSANDRA-16262.

Great, thank you. Sure, didn't mean that fuzz testing should be done in the scope of this ticket. 

I have just enabled the test cases that were skipped due to CASSANDRA-16307 and CASSANDRA-16427, which are now solved. CI:
 * [j8|https://app.circleci.com/pipelines/github/adelapena/cassandra/181/workflows/52c62204-521c-40cb-82c3-9c1ed4989386]
 * [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/181/workflows/84fa978e-6df6-455a-b9d0-8e1024e2657f]

The [failure|https://app.circleci.com/pipelines/github/dcapwell/cassandra/801/workflows/34d9dd52-444a-465d-88ff-074db4a03132/jobs/4597] in MigrationCoordinatorTest looks to be preexisting, and I've only seen mention of it [here|https://issues.apache.org/jira/browse/CASSANDRA-15158?focusedCommentId=17165619&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17165619]. I'll create a flaky test Jira for that one...

That failure in {{MigrationCoordinatorTest.testWeKeepSendingRequests}} has also previously happened in trunk at least in runs [273|https://ci-cassandra.apache.org/job/Cassandra-trunk/273/testReport/org.apache.cassandra.schema/MigrationCoordinatorTest/testWeKeepSendingRequests/], [270|https://ci-cassandra.apache.org/job/Cassandra-trunk/270/testReport/org.apache.cassandra.schema/MigrationCoordinatorTest/testWeKeepSendingRequests/] and [261|https://ci-cassandra.apache.org/job/Cassandra-trunk/261/testReport/org.apache.cassandra.schema/MigrationCoordinatorTest/testWeKeepSendingRequests_compression/], so I think it's safe to consider it as not related.

Filed CASSANDRA-16450, and I'll have a patch soon.

Committed to {{trunk}} as [6665fc29b33abcc26aad4cecbfee88225b0a7225|https://github.com/apache/cassandra/commit/6665fc29b33abcc26aad4cecbfee88225b0a7225]. Python dtests committed as [e0ea690d462c042b5d217ef57c32457cf7501b4a|https://github.com/apache/cassandra-dtest/commit/e0ea690d462c042b5d217ef57c32457cf7501b4a].

Thanks for the reviews.

