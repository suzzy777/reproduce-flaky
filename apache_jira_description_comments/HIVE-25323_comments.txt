[~adeshrao] Not sure about this but you seem to have committed the only change related to (timestamp) casting just before this test started failing. Would you mind taking a look?
[http://ci.hive.apache.org/job/hive-flaky-check/307/]

 

Sure [~klcopp], I will take a look at it.

[~klcopp] Debugged it and figured out that the issue is happening because vectorization is using older java libraries (`java.sql.timestamp` instead of using `java.time.Instant/ZonedDateTime` etc) and are not considering timezones while converting to/from timestamp. This is not the case with non-vectorized execution anymore.

The test which is failing is comparing the result of non-vectorized execution with vectorized execution and hence failing (because of different results). I discussed this with [~mmccline], Fixing the tests will actually require fixing the vectorized timestamp conversion. I will go ahead and raise a PR to comment out the tests and create another jira for the proper fix for vectorized execution.  

[~adeshrao] thanks for taking a look!

Probably the reason java.sql.Timestamp was left in vectorization is lost to time.

Until the fix is done – and I assume it will be a bit of time – we can re-enable the test, convert the timestamps from java.sql.Timestamp -> hive.Timestamp and then compare.

By the way do you know why the test was timing out after 5h instead of failing?

I will work on the comparison by converting timestamps appropriately. 

The test is failing in my local (instead of timing out), though I was running it on a very small scale:

{code:java}
Object[][] randomRows = rowSource.randomRows(100); 
{code}
instead of 

{code:java}
Object[][] randomRows = rowSource.randomRows(100000);
{code}

I will try running the test with original number of random rows and check if it again timeouts.
   

[~adeshrao] great, thank you! It would be good to always keep test coverage at the maximum.

