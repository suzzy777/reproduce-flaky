[~davidmoten2] {{RequestConfig}} parameters apply to the process of request execution only. They have no effect on the process of route negotiation. Please use connection manager level parameters. 

Duplicates HTTPCLIENT-1478 

Oleg

Oleg, thanks for the comment, I had read that other issue. My point is the inconsistency here. That the timeout is applied for SSL Handshake when no proxy specified but not when a proxy is specified. Why would we want them to behave differently?

[~davidmoten2] I have no idea what inconsistency you are referring to given that {{RequestConfig#socketTimeout}} is used by the main request executor once a connection has been fully established, that is, well after all proxy hops and TLS handshake have been completed.

Oleg 

I've explained the inconsistency I think. You get to figure out why?

I perhaps haven't made it clear that I'm only talking about the SSL Handshake phase. Without proxy there is a read timeout set, with proxy there is no read timeout. That's the inconsistency. 

[~davidmoten2] What are your {{SocketConfig}} settings?

Oleg

I don't touch them.

[~davidmoten2] So where exactly do you see inconsistency as the default {{SocketConfig}} settings for socket / connect timeouts basically mean undefined / OS / JRE / specific?  

Oleg

Ok, but do the SocketConfig settings apparently vary even though I don't set them? 

To demonstrate this I started a socket server on localhost:1234 that accepted a connection and slept forever. I then changed the code above so that the setProxy line is commented out and changed the HttpHost to "https://localhost:1234". When I check the breakpoint there is a socket timeout set on sslsocket just before startHandshake is called.

I repeated the above with the setProxy line enabled and went to "https://google.com". When I check the breakpoint mentioned there is no socket timeout set on sslsocket just before startHandshake is called. 

You think this is OS/JRE specific? Seems odd.

> You think this is OS/JRE specific? Seems odd.
[~davidmoten2] This is not odd. This is what undefined means.

Oleg

As far as the OS/JRE is concerned the only difference it would discern is that one socket connection is local and the other remote. Perhaps this accounts for the difference? I guess I could repeat the test by starting the socket server on another host...

Righto, from my home machine (no proxy) I made a connection to https://google.com and put in a breakpoint at the point it did startHandshake(). I stepped back through the stack trace and saw that the RequestConfig.connectTimeout had been set as the soTimeout on the sslsocket!

I see the line `final int timeout = config.getConnectTimeout();` in MainClientExec.java:383 where config is RequestConfig and that value is passed all the way through to the sslsocket. I assume you don't expect this?

Stack trace:
			SSLConnectionSocketFactory.createLayeredSocket(Socket, String, int, HttpContext) line: 436	
			SSLConnectionSocketFactory.connectSocket(int, Socket, HttpHost, InetSocketAddress, InetSocketAddress, HttpContext) line: 384	
			DefaultHttpClientConnectionOperator.connect(ManagedHttpClientConnection, HttpHost, InetSocketAddress, int, SocketConfig, HttpContext) line: 142	
			PoolingHttpClientConnectionManager.connect(HttpClientConnection, HttpRoute, int, HttpContext) line: 376	
			MainClientExec.establishRoute(AuthState, HttpClientConnection, HttpRoute, HttpRequest, HttpClientContext) line: 393	
			MainClientExec.execute(HttpRoute, HttpRequestWrapper, HttpClientContext, HttpExecutionAware) line: 236	
			ProtocolExec.execute(HttpRoute, HttpRequestWrapper, HttpClientContext, HttpExecutionAware) line: 186	
			RetryExec.execute(HttpRoute, HttpRequestWrapper, HttpClientContext, HttpExecutionAware) line: 89	
			RedirectExec.execute(HttpRoute, HttpRequestWrapper, HttpClientContext, HttpExecutionAware) line: 110	
			InternalHttpClient.doExecute(HttpHost, HttpRequest, HttpContext) line: 185	
			InternalHttpClient(CloseableHttpClient).execute(HttpUriRequest, HttpContext) line: 83	
			InternalHttpClient(CloseableHttpClient).execute(HttpUriRequest) line: 108	
			InternalHttpClient(CloseableHttpClient).execute(HttpUriRequest) line: 56	
			HttpClientMain.main(String[]) line: 21	
	/usr/lib/jvm/java-8-oracle/bin/java (22 Jun 2020, 10:28:48 pm)	


To clarify the sentence:

>I see the line `final int timeout = config.getConnectTimeout();` in MainClientExec.java:383 where config is RequestConfig and that value is passed all the way through to the sslsocket **as the soTimeout**.

I'll do a similar test with the proxy set and see what the code path is for that tomorrow (off to bed!).

Yep different code paths for a connection through a proxy. The difference boils down to this interface:

{{
public interface HttpClientConnectionOperator {

    void connect(
            ManagedHttpClientConnection conn,
            HttpHost host,
            InetSocketAddress localAddress,
            int connectTimeout,
            SocketConfig socketConfig,
            HttpContext context) throws IOException;

    void upgrade(
            ManagedHttpClientConnection conn,
            HttpHost host,
            HttpContext context) throws IOException;

}
}}

The non-proxy connection goes through the `connect` method above and a timeout is passed that is ostensibly for connecting but is also used as a read timeout in the SSL handshake.

The proxy connection goes through the `upgrade` method above and no timeout is passed in a method parameter at that point making application of defaults (like used in non-proxy `connect` method) difficult (except by configuring SocketConfig which presumably affects some factory somewhere).

I think bug is not a correct description and I'd describe my issue as a feature request. I'd like the proxy connection to have some reasonable default for socket timeout (read) because a default behaviour of wait forever is not going to make anybody happy, especially as an SSL Handshake should normally be a very short-lived affair. I'd like to see the code actively set the soTimeout to some reasonable default value for the SSL handshake if it has not been specified by SocketConfig. Is this a reasonable request Oleg? Would you like me to close this issue and open another with the feature request?



PS formatting code in these issues driving me insane. Can someone enable markdown?

[~davidmoten2] You are welcome to propose a PR at GitHub. If there are no API visible changes I foresee no problem merging it.

Oleg 

I think I've stumbled upon this issue myself, however in my case the connect timeout is substantially shorter than my socket timeout, expecting to negotiate a connection, and make a request which may take a minute or so to respond. Unfortunately this manifests as a SocketTimeoutException after the smaller connect timeout duration while the target server is processing my request.

Interestingly my test passes using httpclient 4, but fails using httpclient 5 using a nearly identical configuration.

It looks like InternalExecRuntime.upgradeTls will set the endpoint socket timeout to the connect timeout, but nothing ever resets the sockets timeout to the socket timeout.

I don't see test coverage in the project for forward proxies, I'd appreciate if someone could point me in the right direction for existing coverage. My local reproducer test uses the Undertow server, I can add a test dependency on that library to implement a test if there's not something else already available.

PR with test coverage and a proposed solution is here: [https://github.com/apache/httpcomponents-client/pull/229]

This regression appears to have been introduced by this commit: [https://github.com/apache/httpcomponents-client/commit/160bac0cbb2b388018c4e794c120ba719ddd2887]
Unfortunately I don't fully understand the rationale behind the original change, and it's possible my proposed solution (reverting the changes to upgradeTls implementations) may result in unexpected behavior being reintroduced. I have confirmed that tests pass using my proposed PR, so it may be fine. [~olegk] I'd appreciate your feedback, at your convenience :)

[~ckozak] This is a different issue entirely. Please raise a new JIRA for the defect. 

I now see where I fucked up. Sadly, the only way to properly fix the defect is by adding a method to query the actual timeout of an endpoint.
https://github.com/ok2c/httpcomponents-client/commit/69864bc4ec17310b23cd49f51b5ff4a08c68c963

Unfortunately due to API changes involved the fix will have to go into the 5.1.x branch.

Oleg

Thanks [~olegk], I've created https://issues.apache.org/jira/browse/HTTPCLIENT-2091

