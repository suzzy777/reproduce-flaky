Seeing this a lot locally, looking into it :)

[~guozhang] -actually nevermind, I don't see this anymore with recent trunk. I think you fixed this in https://github.com/apache/kafka/pull/2682 too right? Unassigning ... I think this can be closed :)-

Not true after all :( I can still reproduce it but not by looping the test individually. Looks liker there is some interaction across tests.

Thanks for looking into this [~original-brownbear]! Let me know if you need anything for debugging the issue.

GitHub user original-brownbear opened a pull request:

    https://github.com/apache/kafka/pull/2761

    KAFKA-4692: Make testNo thread safe

    https://issues.apache.org/jira/browse/KAFKA-4692 should be resolved by this.
    
    The problem here (or at least one problem, causing trouble) appears to have been that the `testNo` field is not thread-safe the way it is used here (`volatile` doesn't help anything really) to generate a unique test number (for creating non-conflicting topic names).
    If two instances of this class are set up inside the same fork and `testNo++;` is run in one just as the other runs e.g. 
    
    ```java
        private void createTopics() throws InterruptedException {
            streamOneInput = "stream-one-" + testNo;
            outputTopic = "output-" + testNo;
            CLUSTER.createTopic(streamOneInput, 3, 1);
            CLUSTER.createTopic(outputTopic);
        }
    ```
    
    then both will have the same value for the topic names while sharing the same static `CLUSTER` field too.
    I fixed this by simply making the actually used `testNo` an instance variable that is derived from an increasing static counter for each test in an atomic way. I think this should resolve any naming collisions here.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/original-brownbear/kafka KAFKA-4692

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/kafka/pull/2761.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2761
    
----
commit 4d2468318897f37b00dab0ad63c36ae3004a9165
Author: Armin Braun <me@obrown.io>
Date:   2017-03-29T19:27:59Z

    KAFKA-4692: Make testNo thread safe

----


[~guozhang] maybe take a look at my PR. I think I fixed this specific instance in there, but if you look at the solution you'll likely agree that we have that very same problem in many of the streams tests.
Does it make sense to add fixes to other tests that are analogous to this one to that PR or should those get new JIRAs (a quick glance over recent PR's build fails shows a few others from the streams integration suit being flaky that aren't listed in the parent to this one so far, like e.g. `
org.apache.kafka.streams.integration.ResetIntegrationTest`).

Github user original-brownbear closed the pull request at:

    https://github.com/apache/kafka/pull/2761


GitHub user original-brownbear opened a pull request:

    https://github.com/apache/kafka/pull/2775

    MINOR: Reduce Fork Count in ITs

    While looking into instabilities like https://issues.apache.org/jira/browse/KAFKA-4692 I noticed that we are running one JVM fork per core in the ITs.
    
    This seems to me could be contributing to the instability of some ITs a lot. Turning down the number of forks to half the cores, the IT suits speed up measurably for me (example streams goes from ~4 minutes to 2.5 minutes).
    Also, case in point this is what 4 forks look like on an i7 (that would get 8 forks in trunk):
    
    ![4forks](https://cloud.githubusercontent.com/assets/6490959/24557893/a7afa746-1639-11e7-94ff-6327695cf108.png)
    
    Effectively there's still load on all 8 cores at 4 forks (which is expected looking at the fact that most ITs have 2 or more I/O threads).
    
    => imo it's a good idea to turn this down to half the cores. Let's see how Jenkins behaves with this in terms of the build times :)


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/original-brownbear/kafka fewer-IT-forks

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/kafka/pull/2775.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2775
    
----
commit 7d88af4c2bc6fe94dced671ec5049c7e2d54e9ec
Author: Armin Braun <me@obrown.io>
Date:   2017-03-31T15:36:17Z

    Minor: Reduce Fork Count in ITs

----


Unassigning myself here after learning that the Jenkins runners only use one fork. I cannot reproduce this issue anymore with current trunk and all instabilities I could force recently were a result of a lack of resources.

[~original-brownbear] [~guozhang] Should we close this as "can't reproduce" ?

[~original-brownbear] are you trying to re-produce on a Linux box or on a MacOS? I suspect some of those non-reproducible test failures are because most of us are re-running locally on a MacBook.

[~guozhang] I'm always trying on Linux (so I should be similar to Jenkins here in behavior). I couldn't reproduce this one individually ever, only when running the full streams integration suit. But it stopped failing now while it was fairly reliable before. So for me this would be a "can't reproduce" at this point.

Thanks [~original-brownbear]!!

Github user original-brownbear closed the pull request at:

    https://github.com/apache/kafka/pull/2775


