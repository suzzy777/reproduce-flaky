Attaching patch. 

I modified XLog.format to check for dates in the template and modify the timezone with the timezone in DateUtils.getOozieProcessingTimeZone().

I tested with unit-test (also in patch).

Also modified XLogTest to allow it to run in less than a minute by removing unnecessary setup.

Testing JIRA OOZIE-1612

Cleaning local svn workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 1361
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/891/

Looks good.  

Just two minor things:
# No need to catch the {{ParseException}}; just make {{testXLogFormatDate}} throw {{Exception}}.  If there is a {{ParseException}}, then the test will fail and the stack trace will be printed out automatically
# Also no need for the empty {{finally}} blocks

[~gwenshap],
     Can you give examples of the log statements where you are facing this issue?

Thanks Robert. I was under the impression that tests throwing exceptions are bad style, but the test is definitely more readable now.

Attaching the improved patch.

[~rohini] 
I did not encounter those log statements myself. [~rkanter] opened the bug (and probably has the statements), I was trying to help (and improve my Oozie skills) by patching the issue.


We were recently investigating an issue a user ran into during the DST switch, and saw a log message like this:
{noformat}
ActionInputCheck:: nominal Time is newer than current time, so requeue and wait. Current=Sun Nov 03 00:59:03 PDT 2013, nominal=Sun Nov 03 01:00:00 PST 2013
{noformat}
Notice that the first date is in PDT and the second is PST.  Having it reported in two timezones makes it harder to work out what happened; plus, in this case, its very easy to not notice that they are different.  
The bigger picture to this issue is that we should be writing dates in log messages in the {{oozie.processing.timezone}}.

The specific offending log message comes from {{CoordActionInputCheckXCommand}}:
{code:java}
        Date nominalTime = coordAction.getNominalTime();
        Date currentTime = new Date();
        if (nominalTime.compareTo(currentTime) > 0) {
            queue(new CoordActionInputCheckXCommand(coordAction.getId(), coordAction.getJobId()), Math.max((nominalTime.getTime() - currentTime
                    .getTime()), getCoordInputCheckRequeueInterval()));
            updateCoordAction(coordAction, false);
            LOG.info("[" + actionId
                    + "]::ActionInputCheck:: nominal Time is newer than current time, so requeue and wait. Current="
                    + currentTime + ", nominal=" + nominalTime);

            return null;
        }
{code}

Now that I think about it more, if there's only a few places that we print out dates, then it would be more efficient to convert the dates in those specific places instead of having {{XLog.format}} check for Date objects every time.  

bq. then it would be more efficient to convert the dates in those specific places
    Performance was my concern as well and the reason for asking the question as the current approach would add a lot of instanceof checks for each statement logged. 

In that case, [~gwenshap], can you try to find log messages that print out dates and change them there instead?  I don't think there's too many of them.  I'm not sure what the easiest way to find them is; but I'd guess that a grep for log statements that had a variable named {{*Time}} or {{*Date}} would probably get most, if not all, of them.

If we don't set the timezone as part of the XLog format, then the bug would come back next time someone adds a log message and doesn't think ahead.

IMO, logging is something that should "just work" correctly.



Testing JIRA OOZIE-1612

Cleaning local svn workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch does adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 1361
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/893/

{quote}
If we don't set the timezone as part of the XLog format, then the bug would come back next time someone adds a log message and doesn't think ahead.
{quote}
That is a good point, and I agree that it would be nice if this was automatic.  But the concern is that doing a loop and checking {{instanceof}} for every log formatting will be "slow".  If a majority of log messages have a {{Date}} object in them, then it would definitely make sense to put this in there; however, if there's only a small number of log messages that actually do this (which is what I'm guessing because I don't recall seeing that many dates), then the added overhead isn't worth it.  I guess it would be good to know how many times we log a {{Date}}.  

Alternatively, perhaps there's another way of modifying {{XLog#format}} to do this that would be more efficient?

I didn't find an efficient way to format Date objects within XLog.
In addition, I noticed that my previous patch would only correct timezone if formatting template is used for logging. In 100% of the places where Dates are logged, templates are not used - instead the Date objects are concatenated into a string and then logged. Which means the formatter will never be called and the wrong timezone will be used.

So, attaching the ugly patch: multiple locations where Dates are logged are converted to Oozie timezone. And one location with a comment explaining why I chose not to convert :)

Testing JIRA OOZIE-1612

Cleaning local svn workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:red}-1{color} the patch contains 3 line(s) longer than 132 characters
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 1368
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/903/

Fixed the issue with long lines.

Not touching any unit-tests. AFAIK, log messages are not typically unit tested. 



Testing JIRA OOZIE-1612

Cleaning local svn workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:red}-1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:red}-1{color} the patch does not add/modify any testcase
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:red}-1 TESTS{color}
.    Tests run: 1368
.    Tests failed: 1
.    Tests errors: 0

.    The patch failed the following testcases:

.      testTimeOutWithUnresolvedMissingDependencies(org.apache.oozie.command.coord.TestCoordPushDependencyCheckXCommand)

{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:red}*-1 Overall result, please check the reported -1(s)*{color}


The full output of the test-patch run is available at

.   https://builds.apache.org/job/oozie-trunk-precommit-build/904/

The unit test does not fail in my env. Even after pulling latest changes, nothing breaks.

Any thoughts on what this may be?

There are, unfortunately, some flaky tests; this doesn't look related, so I don't think we need to worry about it for this JIRA.  

I think this is the right way to fix the date messages; especially considering there ended up only being 5 messages that had dates in them.  We'll just have to be on the look-out for new patches to make sure they print their dates in the proper timezone.

Patch looks good: +1



Thanks Gwen.  You're now an Oozie contributor!  Looking forward to more patches in the future :)

Committed to trunk

