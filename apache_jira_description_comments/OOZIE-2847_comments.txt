[~bpgergo] thanks for the contribution!

My thoughts:
* in the original stack trace I cannot see the log message {{Hadoop job id mismatch}} that would suggest the code path affected by the fix is being run
* how can Oozie be sure about that when a job Id file is present but empty, it's for sure the actual job Id of the {{JobConf}} entry {{mapred.job.id}}? The patch would always overwrite the empty file w/ the actual one
* from the unit test method name alone I cannot conclude what are the prerequisites, and what is the observable behavior. If possible, please use better naming, and multiple test methods each testing only one piece of functionality / use case

I think the problem description is legit, but the stack trace demonstrates a different issue. In this case the MR AppMaster tries to recover but it cannot properly parse the jhist file written by the previous (crashed/killed) app master.



In general the patch looks good, some thoughts:

* please import stuff explicitly, not {{import org.apache.hadoop.fs.*;}}
* use a hard-coded string for the recoveryID (not UUID)
* make the test name more explicit: {{testRecoveryWritesJobIdWhenRecoveryFileIsEmpty}}

I'll take a slightly deeper look later.

What do you think about https://reviews.apache.org/r/61208/ ?

LGTM +1 (non-binding). [~pbacsko] can you please take a look?

Submitted patch to trigger the tests (PreCommit-OOZIE-Build).

PreCommit-OOZIE-Build started



Testing JIRA OOZIE-2847

Cleaning local git workspace

----------------------------

{color:red}-1{color} Patch failed to apply to head of branch

----------------------------


[~dionusos] can you please rebase the patch? Thanks.

[~asasvari] I think OOZIE-1770 solves this issue implicitly.

[~bpgergo] ?

As far as I recall, this patch should defend against that rare condition, when the recovery file exists, but it is empty.

I will assume, that the place for this logic in the new implementation would be the setRecoveryId method in the LauncherAM class:

 
{noformat}
private void setRecoveryId() throws LauncherException {
try {
  ApplicationId applicationId = containerId.getApplicationAttemptId().getApplicationId();
  String applicationIdStr = applicationId.toString();

  String recoveryId = Preconditions.checkNotNull(launcherConf.get(OOZIE_ACTION_RECOVERY_ID),
"RecoveryID should not be null");

  Path path = new Path(actionDir, recoveryId);
  if (!hdfsOperations.fileExists(path, launcherConf)) {
    hdfsOperations.writeStringToFile(path, launcherConf, applicationIdStr);
  } else {

    String id = hdfsOperations.readFileContents(path, launcherConf);

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//I would defend against empty file here
  if (id == null || id.isEmpty()) {
  hdfsOperations.writeStringToFile(path, launcherConf, applicationIdStr);
  }  
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

    if (!applicationIdStr.equals(id)) {
      throw new LauncherException(MessageFormat.format(
"YARN Id mismatch, action file [{0}] declares Id [{1}] current Id [{2}]", path, id,
applicationIdStr));
    }
  }
} catch (RuntimeException | InterruptedException | IOException ex) {
throw new LauncherException("IO error", ex);
}
}{noformat}
[https://github.com/apache/oozie/blob/master/sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/LauncherAM.java#L467]

 

 

OOZIE-1770 is about Oozie on Yarn that migrates the launcher from MapReduce to Yarn Application Master. It is only included in Oozie 5.0.0-beta1 and the master branch. So, {{LauncherMapper}} only exists in 4.3.1. Related mechanism, {{setRecoveryId()}}, on the master branch resides in [LauncherAM|[https://github.com/apache/oozie/blob/ba665da34c23b1fa86bf1570724147e6f8c85b1d/sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/LauncherAM.java#L481]|https://github.com/apache/oozie/blob/ba665da34c23b1fa86bf1570724147e6f8c85b1d/sharelib/oozie/src/main/java/org/apache/oozie/action/hadoop/LauncherAM.java#L481].] . It might have similar issue in HA mode. Anyway, it would be nice to solve it on branch-4.3.{{}}

Patch for 4.3 seems straightforward, but testing in 5.0 is a bit complicated. Will provide patches next day.

Patch need to be rebased.

PreCommit-OOZIE-Build started



Testing JIRA OOZIE-2847

Cleaning local git workspace

----------------------------

{color:green}+1 PATCH_APPLIES{color}
{color:green}+1 CLEAN{color}
{color:green}+1 RAW_PATCH_ANALYSIS{color}
.    {color:green}+1{color} the patch does not introduce any @author tags
.    {color:green}+1{color} the patch does not introduce any tabs
.    {color:green}+1{color} the patch does not introduce any trailing spaces
.    {color:green}+1{color} the patch does not introduce any line longer than 132
.    {color:green}+1{color} the patch adds/modifies 1 testcase(s)
{color:green}+1 RAT{color}
.    {color:green}+1{color} the patch does not seem to introduce new RAT warnings
{color:green}+1 JAVADOC{color}
.    {color:green}+1{color} the patch does not seem to introduce new Javadoc warnings
.    {color:red}WARNING{color}: the current HEAD has 100 Javadoc warning(s)
{color:green}+1 COMPILE{color}
.    {color:green}+1{color} HEAD compiles
.    {color:green}+1{color} patch compiles
.    {color:green}+1{color} the patch does not seem to introduce new javac warnings
{color:orange}0{color} There are [1] new bugs found in total that would be nice to have fixed.
. {color:green}+1{color} There are no new bugs found in [core].
. {color:green}+1{color} There are no new bugs found in [server].
. {color:green}+1{color} There are no new bugs found in [client].
. {color:green}+1{color} There are no new bugs found in [docs].
. {color:green}+1{color} There are no new bugs found in [examples].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive].
. {color:green}+1{color} There are no new bugs found in [sharelib/pig].
. {color:green}+1{color} There are no new bugs found in [sharelib/distcp].
. {color:green}+1{color} There are no new bugs found in [sharelib/streaming].
. {color:green}+1{color} There are no new bugs found in [sharelib/spark].
. {color:green}+1{color} There are no new bugs found in [sharelib/hcatalog].
. {color:green}+1{color} There are no new bugs found in [sharelib/sqoop].
. {color:green}+1{color} There are no new bugs found in [sharelib/hive2].
. {color:orange}0{color} There are [1] new bugs found in [sharelib/oozie] that would be nice to have fixed.
. You can find the FindBugs diff here: sharelib/oozie/findbugs-new.html
. {color:green}+1{color} There are no new bugs found in [tools].
{color:green}+1 BACKWARDS_COMPATIBILITY{color}
.    {color:green}+1{color} the patch does not change any JPA Entity/Colum/Basic/Lob/Transient annotations
.    {color:green}+1{color} the patch does not modify JPA files
{color:green}+1 TESTS{color}
.    Tests run: 2089
.    {color:orange}Tests failed at first run:{color}
TestJavaActionExecutor#testCredentialsSkip
TestMetricsInstrumentation#testJMXInstrumentation
.    For the complete list of flaky tests, see TEST-SUMMARY-FULL files.
{color:green}+1 DISTRO{color}
.    {color:green}+1{color} distro tarball builds with the patch 

----------------------------
{color:green}*+1 Overall result, good!, no -1s*{color}

{color:red}. There is at least one warning, please check{color}

The full output of the test-patch run is available at

. https://builds.apache.org/job/PreCommit-OOZIE-Build/376/



[~dionusos] thanks for your contribution, +1. I will commit the patches to branch-4.3 and master soon.

I decided to only push it to master. [~gezapeti] is the release manager of 4.3.1, that is in progress. He will commit OOZIE-2847-4.3.patch to branch-4.3 later and update fix version.

Thanks for your help, [~asasvari]!

4.3.1 rc4 is already out, so this issue won't be part of that.
If there will be an rc5 I'll make sure this will be part of it. If not, it still can be part of 4.3.2 if there will be one.



Closing issue; Oozie 5.0.0 is released.

