{{testIterationOrder}} removed (replaced by {{testIdentifierAssignment}}) in commit 50977290cdda79896ccb6304067341486fe104d2 (in "master" branch).

Please expand on what the problem is for {{testUpdate}}.

{quote}Please expand on what the problem is for testUpdate.
{quote}
Since the collection of neurons is stored in an unordered Map the neurons may be returned in a different order for each iteration so distancesBefore and distanceAfter, when using the same index, do not refer to the same neuron.

In the recently closed PR-213 I suggested updating to:
{code:java}
for (Neuron n : net) {
    distancesBefore[(int) n.getIdentifier()] = dist.applyAsDouble(n.getFeatures(), features);
}
// ...
for (Neuron n : net) {
    distancesAfter[(int) n.getIdentifier()] = dist.applyAsDouble(n.getFeatures(), features);
}
{code}
However given that the collection of neurons between the two statements has not changed I think the changing iteration order of the two loops is being artificially introduced when testing using the nondex plugin. For completeness we should update the arrays to store the distances using the neuron ID, this is assuming the network neuron IDs are not updated in the intermediate actions.

Or even refactor the extraction of the distances to a method:
{code:java}
final double[] distancesBefore = getDistances(net, dist, features);

final double[] distancesAfter = getDistances(net, dist, features);

private static double[] getDistances(Network net,
                                     DistanceMeasure dist,
                                     double[] features) {
  return net.getNeurons()
            .stream()
            .sorted((a, b) -> Long.compare(a.getIdentifier(), b.getIdentifier()))
            .mapToDouble(n -> dist.applyAsDouble(n.getFeatures(), features))
            .toArray();
}
{code}

+1

Same kind of change I've just did for the other test.
Just more elegant functional style. ;-)

Updated KohonenUpdateActionTest in commit:

3e72f1ea31f4b0ed43e6cb48381f86b95c15f36c

