This is by design and it should not be changed. If you change *any* parameter or dependency of the incremental build, the test task will run again. It's typically enough to not specify the random seed - if the seed is random, it re-runs the test pretty much automatically every time.

See here for more information:
https://github.com/apache/lucene-solr/blob/master/help/tests.txt#L92-L103

Disabling this functionality is not in your favour in the long run. For multi-module projects 'gradlew check' runs only those tasks that really changed somehow - including tests for just those modules that have changed.

I may look into this to provide a local developer option to make tests always run. I don't want it to be the default though (or even documented).

It's much like with 'check vs precommit' - there are some gradle conventions you get used to after a while. Coming from maven or ant, it's a different world, but it's not necessarily a bug...

Gradle ways of re-executing the task:
--rerun-tasks
clean(taskName)

You can also multiply the test on a single run (see reiteration ("beasting") in tests.txt).


So we should be using {{cleanTest}} always?

There's never a time when i ask gradle to run tests, and don't want it to actually in fact, run the test.

No, no. Normally tests will execute every time - the random seed is changing from run to run, classes change, etc. If you rerun the same Gradle test task (say, fix the seed and don't touch anything else) it will be up to date and will be skipped. This scenario is so uncommon that I don't think it requires special treatment. If you do encounter it, cleanTest first to force the test task to run again 

[~dweiss] It is pretty common when reproducing test failures from jenkins. 

Often times people want to use threads from tests, also various things about lucene (e.g. ConcurrentMergeScheduler) aren't reproducible by default. 

So it is pretty common to have to run a seed multiple times to make it reproduce.

I still think my argument holds, what is the use-case for *not* running the test, ever?

It seems we're defending gradle's broken behavior here instead of configuring it to our needs?

It's not broken - it's normal and consistent with any other task (that is incremental). If your inputs and outputs are up-to-date, the task does not run. Lucene tests use random seed as input so they're sort of special here but other projects would use this feature to skip tests that have passed if nothing has changed in between.

If you're using gradle for a longer while there is nothing surprising about this. Changing this behavior would violate the principle of least surprise, in my opinion... But if you insist you can change it by forcing task outputs to never be up to date - 

{code}
outputs.upToDateWhen { false }
{code}
https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/TaskOutputs.html#upToDateWhen-groovy.lang.Closure-

This should be added to each and every test task - somewhere here, perhaps:
https://github.com/dweiss/lucene/blob/main/gradle/testing/defaults-tests.gradle#L88


Reopening to provide a workaround since there is a discussion about it.

Commit 81f5b4d6423958890876bd755e4ed68c73fbb612 in lucene's branch refs/heads/main from Dawid Weiss
[ https://gitbox.apache.org/repos/asf?p=lucene.git;h=81f5b4d ]

LUCENE-9660: add tests.neverUpToDate=true option which, by default, makes test tasks always execute. (#410)



Thanks for reconsidering this. Â Rob's argument was very convincing :)

Yes, thank you [~dweiss]. I understand your argument, but I just don't agree.

I've never seen a build system that treats tests this way. In a Makefile, my {{test}} task is always {{.PHONY}} and doesn't have outputs (unlike more basic stuff like compilation).

It is more than just random seed and source code files that can cause any of our tests to behave differently across runs. Maybe i upgraded my kernel, or my JVM, or passed different jvm flags (e.g. -Xint), or mounted my filesystem differently, or disabled ipv6, or the system is busier and hence slower, the list goes on and on.

So I just happen disagree with the idea that a test task takes inputs and creates outputs. It isn't like compilation. It's a "phony target", aka a recipe that we just want to run when we ask it to: https://www.gnu.org/software/make/manual/html_node/Phony-Targets.html

Practically, there's two real use-cases where I've hit this issue:
* reproducing a flaky test fail in jenkins. sometimes it takes a couple tries especially multithreaded ones.
* (re)running tests with an explicit (arbitrary) seed, doing profiling, trying to keep the testsuite fast.

my absolute favorite example was some flaky tests in the pre-forbidden-apis days that would only fail during certain times of the year (specifically DST change in europe vs the USA).


Ok, ok. I accept the arguments. It is configurable via gradle.properties too so both sides are happy, I hope.

Ok, ok. I accept the arguments. It is configurable via gradle.properties too so both sides are happy, I hope.

As a side note - the 'cleanX' convention doesn't rerun all tasks, it just wipes the outputs of task X. So a 'cleanX' wouldn't result in java recompiling classes or anything - it'd just rerun the test task (much like forced up-to-date):
{code}
> gradlew -p lucene\analysis\kuromoji cleanTest test -Ptests.neverUpToDate=false -Ptests.seed=deadbeef --console=plain
...
> Task :lucene:analysis:kuromoji:cleanTest
> Task :lucene:analysis:kuromoji:processResources UP-TO-DATE
> Task :lucene:analysis:kuromoji:copyTestResources UP-TO-DATE
...
> Task :lucene:analysis:kuromoji:compileTestJava UP-TO-DATE
> Task :lucene:analysis:kuromoji:testClasses UP-TO-DATE
> Task :lucene:analysis:kuromoji:test
...
{code}

Commit 486141f0eb01c892dbeeed67060b5b4adc77d38d in lucene's branch refs/heads/main from Dawid Weiss
[ https://gitbox.apache.org/repos/asf?p=lucene.git;h=486141f ]

LUCENE-9660: correct help/tests.txt.


Commit 81f5b4d6423958890876bd755e4ed68c73fbb612 in lucene's branch refs/heads/hnsw from Dawid Weiss
[ https://gitbox.apache.org/repos/asf?p=lucene.git;h=81f5b4d ]

LUCENE-9660: add tests.neverUpToDate=true option which, by default, makes test tasks always execute. (#410)



Commit 486141f0eb01c892dbeeed67060b5b4adc77d38d in lucene's branch refs/heads/hnsw from Dawid Weiss
[ https://gitbox.apache.org/repos/asf?p=lucene.git;h=486141f ]

LUCENE-9660: correct help/tests.txt.


Closing after the 9.0.0 release

This issue was moved to GitHub issue: [#10699|https://github.com/apache/lucene/issues/10699].

