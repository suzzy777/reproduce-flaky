[~adar] wanna try looping dist test and see if this is still an issue?

bq. Adar Dembo wanna try looping dist test and see if this is still an issue?

The issue I originally wrote about (in test()) still exists. I wasn't able to figure out the other issues when I first reported this bug.

I ran into this again in a recent precommit build. Here's the surefire summary:

{noformat}
-------------------------------------------------------------------------------
Test set: org.apache.kudu.client.TestAsyncKuduSession
-------------------------------------------------------------------------------
Tests run: 9, Failures: 4, Errors: 0, Skipped: 0, Time elapsed: 37.704 s <<< FAILURE! - in org.apache.kudu.client.TestAsyncKuduSession
test(org.apache.kudu.client.TestAsyncKuduSession)  Time elapsed: 3.436 s  <<< FAILURE!
java.lang.AssertionError: Expected PleaseThrottleException
	at org.apache.kudu.client.TestAsyncKuduSession.test(TestAsyncKuduSession.java:380)

test(org.apache.kudu.client.TestAsyncKuduSession)  Time elapsed: 2.57 s  <<< FAILURE!
java.lang.AssertionError
	at org.apache.kudu.client.TestAsyncKuduSession.test(TestAsyncKuduSession.java:455)

test(org.apache.kudu.client.TestAsyncKuduSession)  Time elapsed: 2.789 s  <<< FAILURE!
java.lang.AssertionError
	at org.apache.kudu.client.TestAsyncKuduSession.test(TestAsyncKuduSession.java:455)

test(org.apache.kudu.client.TestAsyncKuduSession)  Time elapsed: 2.318 s  <<< FAILURE!
java.lang.AssertionError
	at org.apache.kudu.client.TestAsyncKuduSession.test(TestAsyncKuduSession.java:455)
{noformat}

I'm attaching the test log too.

Just another error path is outlined below:

{noformat}
18:16:39.348 [DEBUG - New I/O worker #69] (AsyncKuduClient.java:950) Notify RPC Batch{operations=1, tablet="5ceb1b36c63b4045be78db7318693bc3" [<start>, <end>), ignoreAllDuplicateRows=false, rpc=KuduRpc(method=Write, tablet=null, attempt=1, DeadlineTracker(timeout=30000, elapsed=2), Traces: [0ms] querying master, [0ms] Sub rpc: GetTableLocations sending RPC to server , [2ms] Sub rpc: GetTableLocations received from server  response Not found: The table was deleted: Table deleted at 2017-09-20 18:16:38 UTC (error 0), Deferred@509465434(state=PENDING, result=null, callback=apply batch response, errback=apply batch error response))} after lookup exception
org.apache.kudu.client.NonRecoverableException: The table was deleted: Table deleted at 2017-09-20 18:16:38 UTC
	at org.apache.kudu.client.RpcProxy.dispatchMasterError(RpcProxy.java:360)
	at org.apache.kudu.client.RpcProxy.responseReceived(RpcProxy.java:253)
	at org.apache.kudu.client.RpcProxy.access$000(RpcProxy.java:60)
	at org.apache.kudu.client.RpcProxy$1.call(RpcProxy.java:132)
	at org.apache.kudu.client.RpcProxy$1.call(RpcProxy.java:128)
	at org.apache.kudu.client.Connection.messageReceived(Connection.java:375)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)
	at org.apache.kudu.client.Connection.handleUpstream(Connection.java:239)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.handler.timeout.ReadTimeoutHandler.messageReceived(ReadTimeoutHandler.java:184)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296)
	at org.jboss.netty.handler.codec.oneone.OneToOneDecoder.handleUpstream(OneToOneDecoder.java:70)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:462)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.callDecode(FrameDecoder.java:443)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.messageReceived(FrameDecoder.java:303)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:462)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.callDecode(FrameDecoder.java:443)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.messageReceived(FrameDecoder.java:303)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255)
	at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:88)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:108)
	at org.jboss.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:337)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:89)
	at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:178)
	at org.jboss.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:108)
	at org.jboss.netty.util.internal.DeadLockProofWorker$1.run(DeadLockProofWorker.java:42)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
{noformat}

I'm attaching the test log in the org.apache.kudu.client.TestAsyncKuduSession-TableIsDeleted-output.txt file.

Still flaky as of 11/8

Still flaky as of today

Seems like the "The table was deleted: Table deleted" case is due to the rerun not working properly, and the root cause is the "expected: PleaseThrottleException" that Adar mentioned.

Still flaky, with 3 attempts failed in a row.  The first attempt failed with:

{noformat}
com.stumbleupon.async.TimeoutException: Timed out after 50000ms when joining Deferred@147093588(state=PENDING, result=null, callback=wakeup thread Time-limited test, errback=wakeup thread Time-limited test)
        at com.stumbleupon.async.Deferred.doJoin(Deferred.java:1183)
        at com.stumbleupon.async.Deferred.join(Deferred.java:1042)
        at org.apache.kudu.client.TestAsyncKuduSession.test(TestAsyncKuduSession.java:299)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:483)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
        at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.lang.Thread.run(Thread.java:745) [^org.apache.kudu.client.TestAsyncKuduSession.test.log.xz] 
{noformat}

I attached full log of the failed scenario (the first failed run out of three failed).

I also observed a case where it failed the part of the test where it expected the PleaseThrottleException but it never appeared:
{code:java}
java.lang.AssertionError
        at org.junit.Assert.fail(Assert.java:86)
        at org.junit.Assert.assertTrue(Assert.java:41)
        at org.junit.Assert.assertTrue(Assert.java:52)
        at org.apache.kudu.client.TestAsyncKuduSession.test(TestAsyncKuduSession.java:452)
{code}
Sounds like the same issue.

Will has been deflaking TestAsyncKuduSession.

With git repo of revision {{fc8218463fc8b58a606314af71b6b9b3b78aa5ce}}, the test failed with:

{noformat}
There was 1 failure:
1) test(org.apache.kudu.client.TestAsyncKuduSession)
java.lang.AssertionError: Expected PleaseThrottleException
        at org.junit.Assert.fail(Assert.java:88)
        at org.junit.Assert.assertTrue(Assert.java:41)
        at org.apache.kudu.client.TestAsyncKuduSession.test(TestAsyncKuduSession.java:386)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)
        at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.lang.Thread.run(Thread.java:748)
{noformat}

I think I've cleaned up most of the flakiness here.

