Looking into the test it seems to me nothing more than a timing issue. 

If we reduce the TTL to 5 seconds we can reproduce the failure so I suggest we just raise the TTL from 20 to 30 to prevent flakiness.

I didn't run repeatedly the test with the increased TTL in CircleCI as it was not failing there even with the old value.

4.1 - [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1889/workflows/81d755c5-da11-4da6-bc3e-ddb5a63ca239/jobs/14890] and [j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1889/workflows/16d2e175-251d-45dd-b559-09e18b66f10c/jobs/14894] 1000 runs on clean 4.1 without the patch

4.0 - [1000 runs |https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra?branch=clean-4.0] running each repeatable job on clean 4.0

I actually decided to increase also the next UPDATE statement TTL to 30 too, just in case so we don't have to revise the test again in two days. 

I looped the test locally a few times with no issues. 

[dtest patch|https://github.com/ekaterinadimitrova2/cassandra-dtest/commits/17882]

[~brandon.williams] , [~adelapena] anyone of you up for review? :) 

The comment you edited was already out of date, so this probably isn't the first time this has been bumped and it makes sense to do so again. +1

Yes, CASSANDRA-14148. ...which reminds me I need to edit also the previous comment, I will do it on commit :) Thanks 

I'd say that the sleeps that are right after the modified lines ([here|https://github.com/ekaterinadimitrova2/cassandra-dtest/blob/364081c7fe40daf32ccd2818cd7ecdf7e79e0db2/materialized_views_test.py#L1544] and [here|https://github.com/ekaterinadimitrova2/cassandra-dtest/blob/364081c7fe40daf32ccd2818cd7ecdf7e79e0db2/materialized_views_test.py#L1551]) where meant to let the TTL'ed columns expire before proceeding with the next check. If that's right, increasing the ttls without increasing the sleep would change the meaning of the test, I think.

That's a very good point, thank you for catching it! So I guess it should be enough to make them equal to the TTLs, right? Like in this [commit|https://github.com/ekaterinadimitrova2/cassandra-dtest/commit/827d869ad8eb88bc7594cb0c6c7ef7db4d310485]

I just checked that was actually also done with the previous bump and it makes total sense to me. Good catch!

Yes, exactly like that (y)

I'd give it another quick run in the the multiplexer, just in case.

If the long sleeps were a problem for timeouts, I guess we could make {{update_view}} return the time when the query has been executed:
{code:python}
def update_view(self, session, query, flush, compact=False):
    session.execute(query)
    query_time = time.time() # new

    self._replay_batchlogs()
    if flush:
        self.cluster.flush()
    if compact:
        self.cluster.compact()

    return query_time  # new {code}
And then use that time to do a shorter sleep:
{code:python}
update_time = self.update_view(session, "UPDATE t USING TTL 30 SET a=1 WHERE k=1 AND c=1;", flush)
assert_one(session, "SELECT * FROM t", [1, 1, 1, None, None, None])
assert_one(session, "SELECT * FROM mv", [1, 1, 1, None])

wait_time = update_time + 30 - time.time()
if wait_time > 0:
    time.sleep(wait_time)
{code}
But only if the long wait is a problem, I don't know if that is the case.

Another good idea :) I will do some testing. It seems that _update_view_ is used 48 times in _materialized_views_test_ so maybe the whole suite can benefit of this. I will test later today, thanks!

While looking into this I saw that for some tests we were adding also additional try-catch block and error message to ask people to raise the TTL. (added initially for CASSANDRA-17605)

Even if the long sleeps weren't many and becoming an issue so far I figured that it is better to take the precaution so we don't have to revise this suite again soon for timeouts. 

For consistency and because this is a good idea, I added it here too. 

I also checked the other places where we use update_time with TTL and similar sleeps, there was only one sleep of 5 seconds and I figured that it is a too small one to deal with it. I ended up updating only the test in question. The additional changes are added in [this|https://github.com/ekaterinadimitrova2/cassandra-dtest/commit/625e342f44de1097f007da07b7c92166bcdff205] commit. I will post Circle CI runs soon.

 

Just started the following runs, I will check them back later:
||Branch||CI runs||
|3.0|[j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1891/workflows/27b79d20-8623-48ad-976c-64dfa7197e3e]|
|3.11|[j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1892/workflows/770c85ea-a7c7-4220-93ba-30e667e2866e]|
|4.0|[j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1893/workflows/e2cccd5e-02ac-492a-8b71-5ebbbef548ef] [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1893/workflows/5a51784e-8fda-40a9-99eb-d0d97fb1ae83]|
|4.1|[j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1894/workflows/055cf6f9-14ec-4537-a8fc-36f9d57458f6] [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1894/workflows/89a88c5e-2217-4058-a238-aa19c281906c]|
|trunk|[j8|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1895/workflows/8114bce5-387c-47c9-8292-f89f184c3d35] [j11|https://app.circleci.com/pipelines/github/ekaterinadimitrova2/cassandra/1895/workflows/a1c20624-326e-4034-a2da-237b68b04c1e]|

 

Looks great, +1

All green, thanks, I assume [~brandon.williams] approval still stands, starting commit soon :) 

+1 I do :)

Thanks, committed:

https://github.com/apache/cassandra-dtest.git

   47f33636..94540894  trunk -> trunk

