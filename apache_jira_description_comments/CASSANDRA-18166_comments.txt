Here is the patch and CI runs for this ticket:
|[5.0|https://github.com/apache/cassandra/pull/2916]|[CI|https://app.circleci.com/pipelines/github/mike-tr-adamson/cassandra/381/workflows/18d97894-4ddf-4054-95ff-03f704cf6106]|
|[trunk|https://github.com/apache/cassandra/pull/2917]|[CI|https://app.circleci.com/pipelines/github/mike-tr-adamson/cassandra/383/workflows/169a2c85-1032-4ae4-96a5-4451b97c249b]|

The patch is large, but the majority of class changes are associated with the changes in a few core changes made to the context and identity classes associated with the index.

The main changes are that {{IndexContext}} has been removed and replaced with {{IndexTermType}} and {{IndexDefinition}}. 

A secondary change is that the {{Expression}} has been refactored as an interface with indexed and unindexed implementations. This change was brought about by CASSANDRA-18994 where we were failing to handle filter operators that were not supported by SAI. This includes a patch proposed by  [~adelapena] that rejects these unsupported expressions in the planning stage and pushes them back to the {{RowFilter}}.

{{IndexTermType}} was proposed in CASSANDRA-18590, but it made sense to implement it as part of this ticket. {{IndexTermType}} is a representation of an {{AbstractType}} as an indexable type. It manages the capabilities of the type and any special encoding and comparison for the type. It replaces the {{TypeUtil}} class.

{{IndexDefinition}} is a simple class that wraps the index name and holds the log message wrapper that was previously in {{IndexContext}}. This is useful in the testing of low-level classes (file handlers) that only need access to the index name.

The remaining capabilities of {{IndexContext}} have been moved to {{StorageAttachedIndex}}. These are the {{ViewManager}}, {{MemtableIndexManager}}, {{PrimaryKey.Factory}}, {{IndexWriterConfig}}, {{AbstractAnalyzer.AnalyzerFactory}}, {{ColumnQueryMetrics}} and {{IndexMetrics}}. Access to these elements is always at a point in the code where the {{StorageAttachedIndex}} is available, so having another context object makes no sense.

+1

Let comments, mostly minor, in the PR

Changes look good to me. Here is a CI run for 5.0:
* [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/3329/workflows/f2124edd-fa0e-4bc5-ab03-ddfb886bf015]
* [j17|https://app.circleci.com/pipelines/github/adelapena/cassandra/3329/workflows/998dcba1-0780-4e03-a47f-995d524d0715]

These runs have hit these test failures:
* {{StorageAttachedIndexDDLTest#concurrentTruncateWithIndexBuilding}} is CASSANDRA-19032
* [{{IndexStreamingFailureTest#testAvailabilityAfterFailedNonEntireFileStreaming}}|https://app.circleci.com/pipelines/github/adelapena/cassandra/3329/workflows/f2124edd-fa0e-4bc5-ab03-ddfb886bf015/jobs/93097/tests] doesn't have an associated ticket, but at least one of the failures has been [hit on Jenkins|https://ci-cassandra.apache.org/job/Cassandra-5.0/106/testReport/org.apache.cassandra.distributed.test.sai/IndexStreamingFailureTest/testAvailabilityAfterFailedNonEntireFileStreaming__jdk11_x86_64_novnode] before this patch. 

I haven't run CI on trunk, which needs a rebase on top of the extensive changes recently introduced by CASSANDRA-18330. That ticket has been merged without clean CI results, so it might be tricky to distinguish what causes what failures.
Â 

bq. IndexStreamingFailureTest#testAvailabilityAfterFailedNonEntireFileStreaming doesn't have an associated ticket, but at least one of the failures has been hit on Jenkins before this patch.

Created CASSANDRA-19084

bq. I haven't run CI on trunk, which needs a rebase on top of the extensive changes recently introduced by CASSANDRA-18330. That ticket has been merged without clean CI results, so it might be tricky to distinguish what causes what failures.


All TCM known failures are listed under CASSANDRA-19055.
Given how close 5.0 and trunk were otherwise, any CI differences after the rebase I would attribute to TCM and 19055.  
Let's focus on the 5.0 CI.

How can we know that the trunk patch isn't introducing new failures, being based on a different codebase?

By the way, here is CI running for the trunk patch, in case we still care for validating CI on trunk:
 * [j11|https://app.circleci.com/pipelines/github/adelapena/cassandra/3331/workflows/307b3d57-142a-44a9-a069-f6515c6712cd]
 * [j17|https://app.circleci.com/pipelines/github/adelapena/cassandra/3331/workflows/dbbe8281-266d-4bd6-afa3-7fb6c5522087]

bq. How can we know that the trunk patch isn't introducing new failures, being based on a different codebase?

We don't.  But given the breakage and mess on trunk from TCM, I think it is fair that we trust and lean on [~samt] and co to deal with it (at least lead) under 19055.

I wouldn't exactly call it a broken mess - we have a handful of test failures, concentrated on upgrades, range movements and brand new code. 

bq. How can we know that the trunk patch isn't introducing new failures

We haven't removed tests, so areas that were previously covered are working (unless documented in 19055). Things that already had no coverage _could_ be broken, just as they could by _any_ patch.

We very much still care about validating trunk, both with CI and with things which are not _yet_ part of CI (the recent bugs identified with Harry, were caught as part of ad-hoc testing in preparation for merging 18330).

{quote}How can we know that the trunk patch isn't introducing new failures, being based on a different codebase?
{quote}
I meant if we applied "any CI differences after the rebase I would attribute to TCM and 19055". Of course, the standard pre-commit procedure should be able to deal with this. We just get all the test failures on the candidate patch and subtract the well-known issues. Then we start a repeated CI run on unpatched trunk for the remaining tests, to see if they were broken before. If they were, we open a separate ticket for them. Any test that can't reproduce on unpatched trunk can be considered a new failure introduced by the patch, and we have to fix it before commit. That's what we plan to do here.

Test failures from Andres runs above:
{noformat}
****j11****

j11_jvm_dtests
==============
org.apache.cassandra.distributed.test.log.FetchLogFromPeersTest.testSchema-_jdk11

j11_jvm_dtests_vnode
==============
org.apache.cassandra.distributed.test.ClearSnapshotTest.clearSnapshotSlowTest-_jdk11
org.apache.cassandra.distributed.test.log.InProgressSequenceCoordinationTest.rejectSubsequentInProgressSequence-cassandra.testtag_IS_UNDEFINED
org.apache.cassandra.distributed.test.log.FetchLogFromPeersTest.catchupCoordinatorAheadPlacementsReadTest-_jdk11

j11_unit_tests
==============
org.apache.cassandra.index.sai.cql.StorageAttachedIndexDDLTest.concurrentTruncateWithIndexBuilding-_jdk11
(Fails in repeated runs too)

j11_utests_system_keyspace_directory
==============
org.apache.cassandra.db.lifecycle.LifecycleTransactionTest-system_keyspace_directory_jdk11

j17_dtests_vnode
==============
materialized_views_test.TestMaterializedViewsConsistency.test_multi_partition_consistent_reads_after_write

j17_jvm_dtests
==============
org.apache.cassandra.distributed.test.log.RegisterTest.serializationVersionDisagreementTest-_jdk17
org.apache.cassandra.distributed.test.log.FetchLogFromPeersTest.testSchema-_jdk17

j17_jvm_dtests_vnode
==============
org.apache.cassandra.distributed.test.log.InProgressSequenceCoordinationTest.rejectSubsequentInProgressSequence-cassandra.testtag_IS_UNDEFINED
org.apache.cassandra.distributed.test.log.RegisterTest.serializationVersionDisagreementTest-_jdk17
org.apache.cassandra.distributed.test.log.FetchLogFromPeersTest.catchupCoordinatorAheadPlacementsReadTest-_jdk17

j17_unit_tests
==============
org.apache.cassandra.index.sai.cql.StorageAttachedIndexDDLTest.concurrentTruncateWithIndexBuilding-_jdk17
org.apache.cassandra.db.lifecycle.LifecycleTransactionTest-_jdk17

j17_utests_oa
==============
org.apache.cassandra.index.sai.cql.StorageAttachedIndexDDLTest.concurrentTruncateWithIndexBuilding-oa_jdk17


****j17****

j17_dtests
==============
materialized_views_test.TestMaterializedViewsConsistency.test_multi_partition_consistent_reads_after_write

j17_jvm_dtests
==============
org.apache.cassandra.distributed.test.log.RegisterTest.serializationVersionDisagreementTest-_jdk17

j17_jvm_dtests_vnode
==============
org.apache.cassandra.distributed.test.log.InProgressSequenceCoordinationTest.rejectSubsequentInProgressSequence-cassandra.testtag_IS_UNDEFINED
org.apache.cassandra.distributed.test.log.RegisterTest.serializationVersionDisagreementTest-_jdk17
org.apache.cassandra.distributed.test.ring.DecommissionTest.testDecomDirectoryMinMaxVersions-_jdk17
org.apache.cassandra.distributed.test.ring.DecommissionTest.testMixedVersionBlockDecom-_jdk17
org.apache.cassandra.distributed.test.log.FetchLogFromPeersTest.catchupCoordinatorAheadPlacementsReadTest-_jdk17

j17_unit_tests
==============
org.apache.cassandra.db.DiskBoundaryManagerTest.updateTokensTest-_jdk17
org.apache.cassandra.index.sai.cql.StorageAttachedIndexDDLTest.concurrentTruncateWithIndexBuilding-_jdk17
{noformat}


Failures unaccounted for by 19055, or by other tickets (e.g. Butler), are:
{noformat}
****j11****

j11_utests_system_keyspace_directory
==============
org.apache.cassandra.db.lifecycle.LifecycleTransactionTest-system_keyspace_directory_jdk11

j17_unit_tests
==============
org.apache.cassandra.db.lifecycle.LifecycleTransactionTest-_jdk17

****j17****

j17_unit_tests
==============
org.apache.cassandra.db.DiskBoundaryManagerTest.updateTokensTest-_jdk17
{noformat}

All are now accounted for by 19055.

Both LifecycleTransactionTest have been seen before via CASSANDRA-19062 and CASSANDRA-19059

DiskBoundaryManagerTest is now covered by CASSANDRA-19089

The failures I recognise are:
* {{DecommissionTest#testMixedVersionBlockDecom}} is CASSANDRA-19078
* {{InProgressSequenceCoordinationTest#rejectSubsequentInProgressSequence}} is CASSANDRA-19076
* {{FetchLogFromPeersTest#testSchema}} is CASSANDRA-19087
* {{FetchLogFromPeersTest#catchupCoordinatorAheadPlacementsReadTest}} is CASSANDRA-19072
* {{ClearSnapshotTest#clearSnapshotSlowTest}} is CASSANDRA-19070
* {{RegisterTest#serializationVersionDisagreementTest}} is CASSANDRA-19073
* {{materialized_views_test.py::TestMaterializedViewsConsistency::test_multi_partition_consistent_reads_after_write}} is CASSANDRA-19056

The ones I haven't found are the ones mentioned above and also {{DecommissionTest#testDecomDirectoryMinMaxVersions}}.

DecommissionTest#testDecomDirectoryMinMaxVersions is also CASSANDRA-19078 

All CI runs are summarised.
Andres and Caleb have +1'd.

Moving to Ready to Commit.

Committed as https://github.com/apache/cassandra/commit/0e42b77c9735d1124fe0a5766447f29c891cdb5b

