I prefer a parameterized docker file; it prevents accidental divergence. 

I second Robert, let's go with the parameterized approach first. If we later discover that the base image cannot be shared across all Python versions, we can still introduce separate Dockerfiles.

Btw, how important is having multiple Python 3.x versions? Wouldn't it suffice to have the latest Python version, e.g. 3.7.x?

Point releases are not necessarily fully backwards compatible (though generally much, much more so that 2.x to 3.x), so it's valuable to have both (especially as we count on things like pickling compatibility which is an internal implementation detail). 

Also of note, 3.5 is nearly end-of-life, but 3.8 is on on the horizon. 

[~frederik], you can test your changes by building a container image, for example, ./gradlew :sdks:python:container:py3:docker, and running ValidatesContainer suites, for example: https://github.com/apache/beam/blob/7e633f34e3a8ee68274d2752382fb6a52b5e9b4a/.test-infra/jenkins/job_PostCommit_Python_ValidatesContainer_Dataflow.groovy#L25. The latter suite currently does not pass due to BEAM-7063, but you could still try to exercise the container with Portable Python Precommit suite, see https://github.com/apache/beam/pull/8745/files#diff-08a37e2757c9df3f0e1d0ba3e2121eecR101. 

 Portable Python Precommit suite is currently flaky (https://issues.apache.org/jira/browse/BEAM-7546), so I don't think we should run it for all of 3.5 - 3.7, but we could switch Portable Python Precommit from Python 3.5 to 3.7 after this issue is completed and/or to help test the changes being made here.

I am working on customized container for python and introducing minor versioned container.

[~frederik], do you mind I take over this task?

It makes sense to consolidate these tasks, reassigning to [~hannahjiang]. [~frederik] please let us know if you have any concerns. Thank you.

No problem - go ahead!

Is this issue on track for 2.16 release? (branch will be cut in 3 days) Shall we move it to 2.17?

