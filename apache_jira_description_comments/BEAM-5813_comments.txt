Thanks for opening this ticket Kenn ! I'll take a look when I have a bit of time.

I have very little availability to work on ES6 [~dattran.vn01] can you take a look at this flaky test? I cannot assign you the ticket. CC [~timrobertson100]

I submitted a PR that might correct that. Copying my assumption from the PR:
From time to time, the expected number of splits is higher that the actual number of sources after the split. But both expected and actual number of splits are determined using {{Math.ceil(indexSize/desiredBundleSize)}}. My guess is that the difference is due to indexSize not being the same between the time when expected value is calculated and the time when it is actually estimated in split. This can have 2 reasons:
1- index size in ES has a part of random (says Elastic dev team)
2- refresh of the index was not finished when split is done.
=> This PR addresses point 2 because there is nothing we can do about point 1: test util requests to ES are issued *synchronously* and they specify refresh=true which causes a refresh to be done but I'm not sure that this refresh is synchronous. Instead use refresh=wait so that the request waits for the index refresh before returning.

We need to wait some time (1 week?) to see the results of the postCommits to see if there is still flakiness on the overloaded jenkins (I cannot reproduce it on my machine).

Within I week I saw no ES flakiness in postcommits, so PR [https://github.com/apache/beam/pull/7038]Â seems to have fixed this flakiness closing this ticket

