You can reproduce this behavior pretty regularly with the JUnit test below that uses SolrCloudTestCase as its base:

{code}
@Test
  public void testOtherReplicasAreNotActive() throws Exception {
    final String collection = "collection1";
    CollectionAdminRequest
        .createCollection(collection, "config", 1, 2)
        .process(cluster.getSolrClient());
    cluster.waitForActiveCollection(collection, 1, 2);
    Slice shard = getCollectionState(collection).getSlice("shard1");
    JettySolrRunner otherReplicaJetty = cluster.getReplicaJetty(getNonLeader(shard));
    
    otherReplicaJetty.stop();
    cluster.waitForJettyToStop(otherReplicaJetty);
    waitForState("Timeout waiting for replica get down", collection, (liveNodes, collectionState) -> getNonLeader(collectionState.getSlice("shard1")).getState() != Replica.State.ACTIVE);
    otherReplicaJetty.start();
    cluster.waitForNode(otherReplicaJetty, 30);
    waitForState("Timeout waiting for replica get up", collection, (liveNodes, collectionState) -> getNonLeader(collectionState.getSlice("shard1")).getState() == Replica.State.ACTIVE);
    CollectionAdminResponse response = CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());
    assertNull("Expected collection-delete to fully succeed", response.getResponse().get("failure"));
  }
{code}

I've attached a strawman patch that adds a very basic retry check into HttpShardHandler.  Most of the patch is just plumbing to pass around a "retryable" boolean to where it can be added to {{ShardRequest}}.  This plumbing is pretty rough - I wouldn't commit it without finding something a little more elegant - but it's sufficient for showing the change conceptually.

Having seen a lot of discussion on prior JIRAs related to this issue, it seems like there's a lot of concern about retrying on this particular error case.  To summarize, {{NoHttpResponseException}} is ambiguous - there's no way to tell whether the server received and processed your request or not.  So a requirement is that we avoid retrying any non-idempotent requests.  That was the main goal in choosing the approach I did for this strawman patch.  Each caller of HttpShardHandler can choose whether they're OK with their request being retried, with the default being to not retry.

Anyway, curious if people have any thoughts.

Oh, one last thing.  Also in this patch is an additional assertion to LeaderTragicEventTest that exhibits the problem.  It passes with the rest of the patch, but will fail and show the problem when applied on its own. 

I hope to revisit this soon, but don't have time to focus on it in the immediate future.  So I'm removing myself as the assignee.

I still think this is an important issue to fix though, as it's a continuing contributor to test flakiness, as well as production behavior.

