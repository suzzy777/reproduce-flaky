[~spodxx@gmail.com], [~krummas], I'm interested in taking on the cqlsh tests if you aren't already working on them. It looks like there's a mix of different things going on. I've started looking into it, I'll post details as they become clear.

Maybe you would also be interested to review CASSANDRA-14299, Patrick?

[~spodxx@gmail.com], thanks for thinking of me, but it looks like somebody else already took care of it.

I'm steadily progressing on this - I've fixed almost everything in cqlsh_tests/cqlsh_tests.py. Findings so far for cqlsh_tests.py are attached in cqlsh_tests_notes.md.

All tests in cqlsh_tests/cqlsh_tests.py pass on trunk, cassandra-3.11, and cassandra-3.0 on Ubuntu 16.04 LTS.

I spent last night reviewing cqlsh_tests/cqlsh_copy_tests.py. There's a lot of similarity between them, but they're numerous. It will take some work to refactor them for the pytest framework.

You do use [nose2pytest|https://github.com/pytest-dev/nose2pytest] for converting the tests to pytest, are you? It should be able to convert most of the code automatically.

For cqlsh_tests/cqlsh_copy_tests.py, It looks like our workaround for importing functions from the cassandra cqlshlib no longer works. Since cqlshlib pointedly does not work in Python 3, this will be an interesting problem to solve. There are 25 tests that depend on functions imported from cqlshlib, which is about a third of the copy tests.

I've considered a few approaches to salvaging the cqlsh copy tests that depend on cassandra cqlshlib's CSV formatting functions. This mostly concerns the function assertCsvResultEqual in cqlsh_tests/cqlsh_copy_tests.py::TestCqlshCopy. There are 25 tests that use it - they get a query result set, call COPY TO to export the results to CSV, call cqlshlib's CSV formatting functions to format the same result set to CSV, and assert that the two CSV files are equal. It's broken right now because cqlshlib isn't compatible with Python 3.

The approach I'm following right now is to add a Python 2.7 compatible script that can import cqlshlib and reuse most of the CSV formatting previously implemented in the cqlsh copy tests. We'll run it with subprocess, pipe pickled query results data to its stdin, and pipe CSV formatted data back out. The new CSV formatting utility would run in a separate virtualenv. The biggest disadvantage of this approach is that it adds Python 2.7 as an additional native dependency.

If this is found to be unacceptable, I think the most realistic alternative would be to rewrite the impacted tests to use different assertions. Most of the impacted tests look like they're fundamentally about edge cases for data types rather than CSV formatting.

"It's broken right now because cqlshlib isn't compatible with Python 3."

We'll have to address this at some point anyways. Time's probably better spend migrating code to Python 3, instead of creating workarounds to make the tests run with Python 2 again.

bq. Time's probably better spend migrating code to Python 3, instead of creating workarounds to make the tests run with Python 2 again.

I agree with this, only casually observing this ticket. Is it worth bringing up on the dev@ ML? Or should we just make this ticket "bring all cqlsh-related things up to Python 3?"

I agree that porting C* cqlsh to Python 3 is inevitable. This ticket probably isn't a good reason to do it, but there are other better reasons to do it, such as the pending end of life for Python 2.

[~jasobrown], I suspect you were more asking Stefan than me, but I agree that the question of porting cqlsh to Python 3 should be discussed on the list. It would be worth some discussion on how to do it. For example, do we want to go all the way to Python 3, or would we prefer it to be 2/3 cross-compatible? And, how far back are we going to port - would we go back to 3.0, since we're still supporting it until six months after 4.0 is released?

I suggest that if we're going to start a Python 3 epic, we should do it in a separate ticket, and make this ticket a subticket under it.

Dialing back the scope to just the cqlsh tests - keep in mind that this problem only impacts a third of the cqlsh copy tests. I have everything in cqlsh_tests/cqlsh_tests.py working fine right now, nothing in that set of tests depends on the C* cqlshlib.

However, for the impacted copy tests, we can only completely avoid these ugly workarounds if we port cqlshlib to Python 3 not only in trunk, but also in all other supported versions. Any branch of C* left behind on Python 2.7 will either have to be skipped for the copy tests, or else tested through some kind of alternate approach such as the awful hack I'm working on right now.

 

{quote}For example, do we want to go all the way to Python 3, or would we prefer it to be 2/3 cross-compatible?
{quote}
Being cross-compatible would be the most convenient option for users I guess. But I haven't really any experience converting Python 2 code in such a way. Would you up to give this a try, Patrick?
{quote}I agree with this, only casually observing this ticket. Is it worth bringing up on the dev@ ML?
{quote}
Sure. Maybe we can bring it up with an actual proposal after checking our options.
{quote}However, for the impacted copy tests, we can only completely avoid these ugly workarounds if we port cqlshlib to Python 3 not only in trunk, but also in all other supported versions.
{quote}
Depending on how invasive those changes will turn out to be, we can discuss patching 3.11, but I don't think that's going to happen for older branches. Anyone running Cassandra 2.x/3.0 should be able to keep using Python 2 until EOL 2020, which should be well past the Cassandra EOL date.
{quote}Any branch of C* left behind on Python 2.7 will either have to be skipped for the copy tests, or else tested through some kind of alternate approach such as the awful hack I'm working on right now.
{quote}
We currently run 0% tests on b.a.o. If we can get all but the copy tests working in a straight forward way, that would be a good start.

If you'd like to set aside the cqlsh copy tests that depend on cqlshlib for now, I can regroup and focus on getting everything else working. I can include a modification to pytest_collection_modifyitems in conftest.py to deselect the impacted tests, similar to what we're doing with the upgrade tests.

I'll investigate the possibility of porting cqlshlib for 2/3 cross compatibility. I personally prefer a complete transition to Python 3, but I suspect the community would be more comfortable with a cross compatible implementation.

If you have a patch to get some of the cqlsh dtests work again with Python 3 and pytest, that would be great. We can get back to the then temporarily disabled dtest leftovers after updating cqlshlib.

As for doing a full Python 3 transition or keeping the code cross compatible, I don't know. Guess it depends on how much work it is and how big the change set is going to be. If we can get away with a few future imports and a couple of changed print statements, we can even consider patching 3.11. But if it's too much work, or to hard to be compatible, we might as well fully migrate trunk to Python 3. But's thats something we should discuss on dev- based on your findings.

 

I had to do a little extra work to update a few tests for CASSANDRA-13910 and CASSANDRA-13985, but a patch is ready.

It passes on trunk, cassandra-3.11, and cassandra-3.0 on a 64-bit Ubuntu 16.04 LTS platform.

I've attached new notes summarizing the changes.

Patch for cassandra-dtest master branch.

Nice work! Just found a single change to clarify, before spinning up tests runs.
{quote} 
 "Many tests were failing because they were asserting that some string was equal to content in stdout or stderr piped from subprocess, which was a bytes"
{quote}
Having both a local {{run_cqlsh}} method returning bytes and ccm's {{node.run_cqlsh}} returning strings, is rather confusing and error prone. Can't we convert the local method to return strings as well, just to keep things consistent and spare us from carefully b' prefixing string literals in our assertions?

ccm returns strings because it opens its subprocess with universal_newlines=True. Probably we can modify our local run_cqlsh to do the same - I'll look into it.

Yes! I've modified test_cqlsh/test_cqlsh.py::TestCqlsh::run_cqlsh to open the cqlsh subprocess with universal_newlines=True and that allowed us to remove all bytes and calls to encode() and decode() from functions using our local run_cqlsh. We're still passing on trunk, 3.11, and 3.0.

I posted a new patch, CASSANDRA-14298.txt. I also re-posted the previous patch as CASSANDRA-14298_old.txt, in case it's needed for some reason.

I was giving your patch a try on builds.apache.org against cassandra-3.0:
[https://builds.apache.org/view/A-D/view/Cassandra/job/Cassandra-devbranch-dtest/545/#showFailuresLink]

Looks like there's still an encoding issue while piping input to the cqlsh subprocess. Except that, most of the tests seem to pass.

The encoding issue sounds no good - I'll take another look.

The encoding problem is environmental. Python subprocesses use whatever is returned by locale.getpreferredencoding(). We can do this on a Debian based platform (such as Ubuntu) by setting LC_CTYPE='C.UTF-8'.

We could simply say that this environment setting is a prerequisite for the cqlsh_tests, but I think we can do one better:

 
{code:java}
class TestCqlsh(Tester):

    @classmethod
    def setUpClass(cls):
        cls._cached_driver_methods = monkeypatch_driver()
        os.environ['LC_CTYPE'] = 'C.UTF-8' # override environment locale setting to prefer UTF-8 encoding

{code}
 

I have to admit I don't know what this will do on Windows, but I've tested it on my Ubuntu environment and it works fine.

I'll issue a new patch with these additions. I'll also re-post the current patch as the "old" patch, if you'd prefer to stick with it and just declare that this environment variable setting is a prerequisite to running these tests.

 

Running some final checks before posting updated patch.

Posted a new patch that includes test fixture setup in cqlsh_tests/cqlsh_tests.py to set environment variable LC_CTYPE='C.UTF-8'.

I've made a lot of progress porting cqlshlib to Python 3. Along the way I've been taking notes on all the areas that I think would require extra effort for cross compatibility with Python 2.

I don't have a complete plan yet, but I have some observations.

In terms of level of effort and complexity, this is not going to be as simple as running 2to3 and then adding a few imports from future and six. However, we won't need to rearchitect the library either. So far I've found that existing classes and functions work with just a few tweaks to their implementation, mostly around IO and strings vs. bytes.

The biggest challenge, regardless of whether we go straight Python 3 or cross-compatible, is going to be adequately testing the result. The cqlshlib unittests and the cqlsh_tests have been useful to help find bugs, but I'm not confident that our tests have enough code coverage to exercise everything. We would need a strategy for more comprehensive testing.

Some specifics:
 * The SaferScanner class in saferscanner.py requires a slightly different implementation in Python 2 vs. Python 3, because of changes in the internals of the re module for regular expressions.
 * copyutil.py, formatting.py, and displaying.py have needed the most work so far, since they have a lot of IO and serialization.
 * The formatter for blobs in formatting.py needs a different implementation in Python 2 vs. Python 3, because of changes in the behavior of binascii.hexlify.

Edited: removed some off-topic discussion of issues encountered while testing.

The latest changes setting LC_CTYPE explicitly from the python code doesn't seem to do the trick ([CircleCI|https://circleci.com/gh/krummas/cassandra/485#tests/containers/25]). Adding {{LC_CTYPE="C.UTF-8"}} to the environment instead seems to be cleaner anyways. WDYT [~krummas]?

As for your remarks regard the cqlshlib Python3 migration, maybe it's a good time to move this discussion to the -dev mailing list and discuss how we move on with the testing code in general?

bq. Adding LC_CTYPE="C.UTF-8" to the environment instead seems to be cleaner anyways.
yeah, sounds good, and it almost fixes the cqlsh tests: https://circleci.com/gh/krummas/cassandra/489 (running on this: https://github.com/krummas/cassandra/commits/CASSANDRA-14298)

Too bad the programmatic environment setting didn't work! It must be environmental - I'll have to start testing my patches on multiple flavors of Linux to help catch these kind of issues.

As for taking the cqlshlib porting question to the dev list, I agree that now is a good time. Did you plan for you or Marcus to write the email, or would you like me to write it?

Regarding my concerns about code coverage - once I get the cqlshlib unit tests and dtests working, I'll experiment with [coverage.py|https://coverage.readthedocs.io/en/coverage-4.5.1/] and see if I can get a useful analysis of our code coverage. This would help us plan where to spend effort doing extra testing.

I think I need to retract my recommendation to use LC_CTYPE=C.UTF-8. I learned this weekend that the C.UTF-8 locale is somewhat specific to Debian. (It's also available on more recent versions of Fedora, as an optional add-on.)

I recommended it initially because it's more internationalization friendly than picking a single language such as en_US.UTF-8. Unfortunately, since it's specific to the Debian family, I think that makes it a poor choice for testing.

For the lack of a better solution, I recommend we use LC_CTYPE=en_US.UTF-8.

Also - I'm working on standing up a RHEL 7.5 instance on AWS to test my work on a different environment, to make sure there aren't more hidden environmental dependencies like this.

Separately, as an update on the cqlshlib porting work: my forks of cassandra and cassandra-dtest have cqlshlib3 branches with cqlshlib ported to straight Python 3, with all cqlshlib unittests and all dtest cqlsh_tests passing, except for test_describe (in test_cqlsh_output.py in the cqlshlib unit tests) and test_unusual_dates (in cqlsh_tests.py in the dtests). I still want to try to measure coverage (not sure how that's going to work with the dtests but it should be doable with the unittests), and I definitely want to test these on RHEL or some other non-Debian environment; I'll continue with that work this week.

 

I switched to CentOS instead of RHEL, since RHEL requires a license to get access to the packages for many of the C* dependencies.

Things look okay for the dtests on CentOS for these modifications using LC_CTYPE=en_US.utf8. That includes the cqlshlib port to Pyfhon 3 too.

There are some extensive failures for the cqlshlib unittests in CentOS. cqlshlib/test/run_cqlsh.py::ProcRunner::read_until() can't handle ANSI control characters for colors in the prompt. I was able to modify the regular expression to handle the escape sequences, and with that change, the tests pass. But I won't be happy with that solution until I figure out why these escape characters are showing up in CentOS but not in my usual Ubuntu environment. The inputrc and bashrc files are a bit different, but I haven't figured out yet which difference, if any, is making the CentOS cqlsh prompt include colors.

[~spodxx@gmail.com], I've been cluttering up this ticket with lots of discussion of testing the cqlshlib port to Python 3, but I think I'd like to move that to a new ticket and try to close up this one according to our original plan: deselect tests that depend on cqlshlib and fix everything else.

I'm testing a new CASSANDRA-14298 patch that will try to use LC_CTYPE=en_US.UTF-8. If it works on Ubuntu 16.04 LTS and CentOS, I'll submit it. Does all that sound good to you?

Testing modifications that should work on Red Hat variants in addition to Ubuntu.

Please see attachment CASSSANDRA-14298.txt for a new patch to cassandra-dtest that passes on trunk, cassandra-3.11, and cassandra-3.0 on CentOS 7.5 and Ubuntu 16.04 LTS on AWS t2.large instances.

In this patch, the setUpClass() function for cqlsh_tests.py::TestCqlsh and cqlsh_copy_tests.py::TestCqlshCopy checks the system preferred encoding with locale.getpreferredencoding(), and if the result isn't UTF-8, it sets LC_CTYPE=en_US.utf8. This locale is more widely available.

On systems where en_US.utf8 isn't available, the tests will fail unless some other UTF-8 locale is set.

I've noticed that the bulk round trip tests in cqlsh_tests/cqlsh_copy_tests::TestCqlshCopy are flaky. When they've failed, they've consistently passed when rerun.

I'm going to continue testing on builds.apache.org next week. Although I think I'll just add LC_ALL=en_US.UTF-8 to the wrapper script, so we don't have to change the environment programmatically from python.

OK - I left up the "old" patch that didn't change the environment variable, if you prefer that approach.

I'm going to move any further comments of porting cqlshlib to CASSANDRA-10190. I also plan to email the dev list about it after I put together some kind of code coverage analysis.

I just noticed [this discussion of this ticket|https://wilderness.apache.org/channels/?f=cassandra-dev/2018-05-17] on the #cassandra-dev IRC channel. Would you like me to reissue this patch with the files renamed to test_cqlsh.py and test_cqlsh_copy.py?

I've now [pushed a commit|https://github.com/apache/cassandra-builds/commit/8f796c66896f8c889c8d654a90b35d3b7d03efb4] that adds the LC_CTYPE variable to the dtest wrapper script.

Tests have also been restarted to get the results before and after your patch:
 * [3.0|https://builds.apache.org/view/A-D/view/Cassandra/job/Cassandra-3.0-dtest/]
 * [3.11|https://builds.apache.org/view/A-D/view/Cassandra/job/Cassandra-3.11-dtest/]
 * [trunk|https://builds.apache.org/view/A-D/view/Cassandra/job/Cassandra-trunk-dtest/]

[~ptbannister], yes, please rename the files so they will get picked up by pytest when running a directory.

As you're probably aware, there have been code freeze dates floating around for 4.0. Usually before releases starting to happen, we also try to concentrate more on getting tests to successfully pass. And there are plenty of dtests issues at the moment. But as this is still a bit ahead, it's not a top priority for me right now, so I'm not always able to catch up and respond as quickly as I should here. Sorry about that.

As for porting cqlshlib to Python 3, this is probably a good time to clarify in which direction we're heading. But there needs to be broader support among devs, if we decide to support Python 3 in one way or another. Bringing this to the dev mailing list would be the right thing to do at this point. Please feel free to reach out to the ML with any suggestions on that if you like. Thanks!

[~spodxx@gmail.com], no worries about having to multitask, I appreciate the significant time you've put into working with me on this ticket.

I'll update the patch to rename the files.

I'll email the dev list about porting as soon as I finish coverage analysis (working actively on that today).

[~spodxx@gmail.com] - I attached a new patch (CASSANDRA-14298.txt) with the files cqlsh_tests.py and cqlsh_copy_tests.py renamed to test_cqlsh.py and test_cqlsh_copy.py, respectively.

The patch still has a check in the setUp fixture that adds LC_CTYPE=en_US.utf8 to the environment if locale.getpreferredencoding() is not UTF-8. If you feel strongly that we should not do this, I'd be willing to remove it, but I recommend we keep it. For people who run outside of the cassandra-builds dtest wrapper environment, this may prevent some configuration headaches during testing.

I've been able to get a dtest run to finish, after getting back to this issue.

https://builds.apache.org/view/A-D/view/Cassandra/job/Cassandra-devbranch-dtest/597/testReport/

Looks like there are still encoding issues left and {{TestCqlsh.setUpClass}} isn't executed at all without an {{@pytest.fixture}} annotation. Even when it does, it doesn't fix the error for me locally.

[~spodxx@gmail.com], great to hear from you again. I'll start looking into this.

I've been on a break for a couple of weeks, and coming back to it now, I can't get ccm to start - I get the error "[node1 ERROR] b'Error: Could not find or load main class org.apache.cassandra.service.CassandraDaemon'." Did we add a new dependency or something?

[~spodxx@gmail.com], I built a CentOS system, checked out your copy of CASSANDRA-14298, and ran some of the tests that failed on build 597. I have LANG=en_US.utf8 and nothing set for LC_ALL or LC_CTYPE. Almost all of the Unicode related tests passed:
 * test_eat_glass
 * test_source_glass
 * test_unicode_syntax_error
 * test_with_empty_values
 * test_copy_to

I have two suggestions:
 * Please check the output of locale -a on your test system and confirm that you have an en_US.utf8 locale generated.
 * If locale -a lists en_US.utf8 but not en_US.UTF-8, please try setting the environment variable LANG=en_US.utf8.

Alternatively - is it possible for me to duplicate your Jenkins build and do that troubleshooting myself? I haven't set up on Jenkins yet, but I'd be willing to do it to work more efficiently on this ticket and eat up a little less of your time.

Other failures...test_unicode_invalid_request_error fails for me too, but it looks like a superficial problem. test_materialized_view looks like a more substantive issue. I'll check into both.

[~spodxx@gmail.com], I'm working on duplicating your test environment to troubleshoot the problems you mentioned. Those problems don't arise on my simpler Ubuntu and Centos environments, so I suspect it's something related to setting up the cassandra-builds dtest environment.

Is it possible to run the test script (```/cassandra-builds/docker/jenkins/jenkinscommand.sh apache trunk https://github.com/spodkowinski/cassandra-dtest.git CASSANDRA-14298 https://git.apache.org/cassandra-builds.git master```) outside of builds.apache.org or some other specifically configured Jenkins server?

[~spodxx@gmail.com], I diagnosed the cause of the Unicode related failures. You are running the dtests in the Docker image kjellman/cassandra-test:0.4.4. That image does not have a locale configured, other than C.UTF-8.

I recommend we resolve this by adding the following RUN command to the Dockerfile and rebuilding the image:
{code:java}
RUN sudo apt-get -q -y install locales && sudo locale-gen en_US.UTF-8 && sudo apt-get -q -y remove locales
{code}
I still need to look into the other failures you encountered, but this should at least clear up the Unicode problems.

Thanks for figuring this out, [~ptbannister]! I'll look into rebuilding the docker image with the described steps.

Posted a new patch (CASSANDRA-14298.txt) that fixes the failures in test_unicode_invalid_request_error and test_materialized_view.

test_pycodestyle_compliance is still failing, because it's complaining about Python style in cqlsh and cqlshlib, which is out of scope for this ticket.

[~krummas] i’m donating the cassandra-test repository along with the Dockerfile to the ASF. test away ;)

Thanks [~mkjellman]! Can you please attach your Dockerfile to CASSANDRA-14713? I'll then try to get rid of the ADDed resource dependencies.

I attached [https://github.com/mkjellman/cassandra-test-docker/blob/master/Dockerfile] to CASSANDRA-14713.

My idea on how to integrate the cql tests are now basically to add them as an extra build to the CircleCI work-flow and builds.apache.org. Builds run on b.a.o are already constantly running into timeout issues and adding cqlsh tests will make this worse. Also cqlsh related regressions should be more easily to predict than others, so we should leave the decision to the dev to run or not to run them.

Here's what needs to be done next:
 * CASSANDRA-14713 - any Python version and environment issues should be easier to address, once the docker image has been update
 * CASSANDRA-14806 - improved CircleCI work-flow will introduce ad-hoc jobs than needs to be manually triggered by the developer
 * CASSANDRA-14298 - add new cqlsh build to work-flow, see [WIP-14298|https://github.com/spodkowinski/cassandra/tree/WIP-14298] (requires dtest update in [WIP-14298|https://github.com/spodkowinski/cassandra-dtest/tree/WIP-14298])

I've tested running the cqlsh tests using the free CircleCI settings once and [results|https://circleci.com/gh/spodkowinski/cassandra/563#tests/containers/0] indicate that the resources (4GB mem) are probably not enough to make the tests pass reliably. It would be nice if we could make the tests fit into the free tier settings, as I wouldn't expect that we need complex virtual testing topology, for the sake of testing cqlsh aspects.

I'm finalizing a new patch.

Attachment CASSANDRA-14298.txt is a new patch for the head of cassandra-dtest master (currently commit e6f58cb33f7a09f273c5990d5d21c7b529ba80bf).

As previously discussed on this ticket, this patch deselects 27 tests in test_cqlsh_copy.py that depend on importing the Python 2.7 cqlshlib into the Python 3 dtests, and gets the remaining tests to pass.

I've gotten passing tests with this patch on AWS t2.large instances running Ubuntu and CentOS 7 with trunk, cassandra-3.11, and cassandra-3.0. The environment must have the en_US.UTF-8 locale generated, with the environment variable LC_CTYPE=en_US.UTF-8.

Thank you for the patch, [~ptbannister]. I have imported your patch into a git branch and rebased it on the current master to make it easier for review. I have opened this PR for review: https://github.com/apache/cassandra-dtest/pull/45/files I will over over it and add my comments. [~spodxx@gmail.com] please feel free to review as well.

[~ptbannister] I have gone over the changes and they look reasonable so I ran the dtests against trunk and few cqlsh tests have failed. Take a look [here|https://circleci.com/workflow-run/6426fd6f-0e35-4c0b-ba16-aeb3fb9a4247]. Could you please look into those failures? I believe a couple might be because the cluster failed to start. However others seem to be genuine. 

Here's what I think I see:
 * In container #26, test_cqlsh.py passes
 * In container #28, test_cqlsh_copy.py test_bulk_round_trip_blogposts fails because some of the nodes of the ccm cluster wouldn't start
 * In container #29, test_cqlsh_copy.py test_bulk_round_trip_blogposts_with_max_connections fails because the ccm cluster has problems with its virtual network
 * In container #68, test_cqlsh_copy.py test_round_trip_with_rate_file fails because expected and observed data don't match. This may be another environmental resource issue - I think we get trouble when the environment is too slammed to get data through at the desired rate

These tests pass for me when I run the cqlsh copy tests in isolation. I'm thinking about breaking the resource intensive bulk round trip tests in the cqlsh copy tests into a separate script, and marking them as resource intensive. What options does our test infrastructure offer for dealing with resource intensive tests? I know [~spodxx@gmail.com] had some long term plans to improve the infrax to deal with this, but maybe we have some options right now that we could exercise by restructuring the cqlsh tests a bit.

[~ptbannister] I realized the CircleCI wasn't executing the tests as intended. I made some minor modifications and reran only the cqlsh tests. There were 5 failures out of 99. Here are teh failures -

# test_colons_in_string_literals - cqlsh_tests.test_cqlsh.TestCqlshSmoke - test teardown
# test_uuid - cqlsh_tests.test_cqlsh.TestCqlshSmoke - test teardown
# test_bulk_round_trip_blogposts - cqlsh_tests.test_cqlsh_copy.TestCqlshCopy - assertion error
# test_bulk_round_trip_blogposts_with_max_connections - assertion error
# test_round_trip_with_rate_file - assertion error

We should definitely look into the assertions first. Individual test function is being run in a 8 Core / 16GB container so I don't think they should be resource constrained.

I was also able to run these tests locally and they ran fine on my Mac so this issue has to be related to CircleCI environment.

The failures in test_bulk_round_trip_blogposts* are happening when we do a SELECT COUNT statement by executing a Cassandra driver SimpleStatement with ConsistencyLevel.ALL. It can't achieve the desired consistency level for some reason. I have some ideas for how to work around the problem - either a retry strategy, or else I'll execute that statement with a ccm run_cqlsh call instead.

I've posted a new patch with some possible workarounds for the test_bulk_round_trip_blogposts* and test_round_trip_with_ratefile failures. For the blogposts tests, I added a retry policy to the select count statement. For the ratefile test, I increased the number of rows written with stress, to make sure the stress tool writes for at least one second.

I can't reproduce any of these failures on the environments I've tried, even running the tests inside the same Docker container used by CircleCI. But hopefully these workarounds will address these problems.

I'm not sure what's going on with the failures in the test teardowns.

The tear down failures have been fixed (https://github.com/riptano/ccm/pull/694). I have verified the fix works for us as well. I will look into the changes you made.

[~ptbannister] I didn't have a whole lot of time to work on it. I imported your updates and modified the assertion as it was still failing. The useful check was to ensure that the number of rows we imported are equal to what we expect. The tests pass without vnodes. However, when I run them with vnodes one test fails - https://circleci.com/gh/dineshjoshi/cassandra/1033#tests/containers/10 Could you debug this further?

So [~ptbannister] and I went back and forth on the tests. He finally fixed all issues. We got the cqlsh tests green – https://circleci.com/workflow-run/d782f4e9-63dd-4f8f-b3e3-d008a1e4d5da I am going to run a full test suite (Passed - https://circleci.com/gh/dineshjoshi/workflows/cassandra/tree/test-trunk). If everything looks good, [~spodxx@gmail.com] could you please look over it once?

I'll have a look next week. I also hope we'll be able to commit  CASSANDRA-14806 by then and we can break this out as separate build/test target.

[~spodxx@gmail.com] do we really need to break this out? I think they should just run as part of the dtests. This is a minor issue and we can work it out later. We'd like to get this reviewed and committed so these tests start running and we can work on CASSANDRA-10190

I was hopping we'd be able to run the separate build with low resources settings, so Patrick and others would be able to run tests own their own in CircleCI. Also can you link the branches you want me to look at?

[~spodxx@gmail.com] please take a look at this PR - https://github.com/apache/cassandra-dtest/pull/45/files

I also ran these tests with low memory settings that come with the free circleci tier and I don't think they work. 

We should be fine merging the dtest changes (sans "Hack debugging") if tests are passing and do not take a huge amount of time, which doesn't seem to be the case.

Thanks, [~spodxx@gmail.com] for taking a look. We'll hold off making any changes to circleci. They were the only "hack debugging" we did :). All the tests pass. I will squash and merge it.

You to be clear, I was referring to [d724c125|https://github.com/apache/cassandra-dtest/pull/45/commits/d724c1257ab4cf2428a62ff8a77d9d1265b03cba] as "Hack debugging".

Yep, that is already cleaned up :)

Committed as 87afb85f59bdc94a7909bf02575819b6812efaf2 to cassandra-dtest repo. Thanks [~ptbannister] and [~spodxx@gmail.com]

Somehow is resolved w/resolution unresolved. Re-opening to fix.

