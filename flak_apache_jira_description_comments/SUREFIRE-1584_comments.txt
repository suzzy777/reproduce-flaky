[~sormuras@gmx.de]
Do you think this feature can be supported?

I forgot to mention that JUnit 5 team is planning to do something similar: [https://github.com/junit-team/junit5/issues/1558]

That is intended for the console runner I think.

[~tictac.freshmint]
[~sormuras@gmx.de]
Yes, this can be done in JUnit5 level, but we should not forget feature {{skipAfterFailureCount}} which is connected to this feature {{rerunFailingTestsCount}}.
We have to do {{skipAfterFailureCount}} on Surefire level and not on JUnit5 level because the JVM forks the suite in parallel and this feature in JUnit4 already is concurrent across multiple JVMs. In JUnit4 providers we are calling {{pleaseStop()}} on {{RunNotifier}}. If it was similar method in JUnit5 as well, we could just copy-paste the existing code from existing providers.

We have a sizable set of end-to-end browser UI tests currently running on JUnit 4 with Jenkins CI.
This type of tests is inherently flakier than unit tests because of things like network timeouts, browser crashes and other random factors arising from the complexity of testing big systems end-to-end, and not due to specific test problems.
In our case, even if the native JUnit feature is implemented, it would not be the ideal solution as it seems it would target more marking specific tests as flaky. For this reason I find the current surefire.rerunFailingTestsCount=1 option very valuable.
It also works very well with the [Allure|https://docs.qameta.io/allure/] framework, which we use for test reporting and it has built-in support for reruns. We are interested in migrating to JUnit 5, however the lack of rerun support will likely keep us on 4 for now.

AFAIK the rerun is planned in JUnit5 but ask on https://github.com/junit-team/junit5 for more details.

I second the need to have this feature. I mean it would be great to have this on JUnit 5 level. But the fact that Surefire puts it on the XML report is great and it goes towards the idea that, if you are rerunnig flakly tests, you better give visibility that they pass but they are still flaky.

[~tictac.freshmint]
[~atmcarmo]
Can we close this ticket?
JUnit5 Pioneer has such ability with the annotation {{@RepeatFailedTest(3)}}.
https://www.swtestacademy.com/junit-5-how-to-repeat-failed-test/

Just my 2 cents: The presence of the native JUnit5 rerun feature does not cover all use cases for having it in Surefire as I explained in my previous comment. I find the existing feature, which sadly works only with JUnit4 very useful.

[~Angelov]
ok. If you want to have Surefire's feature with surefire rerun configuration in the plugin, still no objections from my side. But the problem is that we would expect your attention and provide a patch via pull request on GitHub. See the {{JUnit4Provider.java}}. With this inspiration of older provider you should be able to introduce this feature also in JUnit5 provider. If you have any questions, do not hesitate to ask on GitHub.

[~tibor17] - Would you be open to a PR that brings this functionality back into Surefire for JUnit5? This is something that we are very interested in, and have the time/resources to develop if you would be open to it.

[~jonbell]
[~Angelov]
[~atmcarmo]
[~tictac.freshmint]
I understand your feature request.
I will explain the current situation a bit. Currently we are reworking the plugin which is complex work and cannot be done by external developers. We have to work together if we want to have this feature in Surefire. If you have a look in the implementation of JUnit4 Surefire Provider and in the history, you would understand how it works. The motivation is right there. So please help us, since you are contributors as well, and open a PR on GitHub. I am sure we will review it and accept it.

Thanks. We are quite familiar with how it works for Junit4 :) We will put something together and open a PR in the next month or two. 

[~jonbell]
This is the motivation commit https://github.com/apache/maven-surefire/commit/fefaae7f0534a59f52c046a64c96987e8561dd48#diff-dae9177c0947b60bcd0850b342e322c3
See the class {{JUnitCoreProvider}} and few related unit/integration tests.
Your class to upgrade is {{JUnitPlatformProvider}}.
I don't think there is more to do.

Great! If it's OK with you, we would like to make a single PR (with tests) that:
 # Adds reruns for JUnit5
 # Standardizes reruns for all of the JUnit runners so that the reruns occur in a new JVM at the end of test execution (as Lamyaa proposed in [PR 102|https://github.com/apache/maven-surefire/pull/102]). We did a case study and found that the existing rerun mechanism in Surefire (which reruns tests in the same JVM that they failed in) only found about 25% of the flaky tests that were found by instead rerunning tests in a new JVM - [details on that evaluation are here|https://www.deflaker.org/case-studies/].
 # Adds timing information for reruns to the XML reports (also as Lamyaa proposed in [PR 96|https://github.com/apache/maven-surefire/pull/96])

Or, if you would prefer, we can do each of these changes as separate PRs (reviving the existing PR's 102 and 96; I can discuss and coordinate with Lamyaa also - we have worked together in the past). If you have any other suggestions for easy features to implement to simplify/standardize the rerun mechanism in Surefire, please let us know, we would be happy to contribute more.

[~jonbell]
Do you want to rerun each test class or entire testset?
IMO the {{JUnitPlatformProvider}} can make rerun of testset (this means at the end of particular JVM).

Rerun already exists. It has its own configuration:
https://maven.apache.org/surefire/maven-surefire-plugin/examples/rerun-failing-tests.html
It was committed by qingzhouluo and Andreas Gudian in 2014.
Introducing a duplicate rerun configuration would be a big chaos for all users.
It cannot be two rerun counts and both valid. Can you imaging what misunderstanding would be in user's world. Which one is valid and when.

We are quite familiar with the existing rerun option (which reruns failing test methods in the same JVM that they had failed in). We have already implemented the rerun version that I've described above (where failing test methods are rerun in a _new_ JVM), and found it to be much more effective than the way that Surefire reruns tests right now ([details and graph here|https://www.deflaker.org/case-studies/]. Here is a graph showing the number of tests that originally failed, but eventually passed when rerun, comparing between Surefire's current rerun mechanism (rerunning failed tests in the same JVM) and our approach (rerunning failed tests in a new JVM).

 

!FlakyReruns.png!

 

We would like to standardize the rerun options to behave the same between all of the JUnit providers (so that users don't get confused by features that behave differently for JUnit4/JUnit47/Junit5). So, we would like to implement either a single rerun failing tests feature that reruns tests in a new JVM (modifying the existing feature from Qingzhou and Andreas), or add a new option (to all of the JUnit providers) to rerun failing tests in a new JVM.

 

[~jonbell]
The development must go step by step.

Currently this is not possible what you want because this requires interprocess communication on the level of sending commands. We are in a good progress. The communication between Maven and Surefire booter process has two directions. One was reworked and the second direction was not started to rework. I am afraid that the {{StatelesXmlReporter}} is too stupid to safely support this feature and should be reworked as well.

What can be done is to add rerun mechanism in the provider as we kow it today.

The version 3.0.0-M4 is promissing and I hope it will be included in Maven 3.7.0.
This version should rework internal code so that the features would be useful for users again, but without this change it won't be possible.

[~jonbell]
One option would be to support us. You can become our contributor and later a committer in Maven ASF.
I can explain our plan to you in the email and you will see where you can find your place.
I think this is serious because we both want to have the same software result.

Thanks - that sounds good. I would be happy to discuss more - maybe my student and I can help with the changes for communication between Maven and the Surefire booker too. 

https://gitbox.apache.org/repos/asf?p=maven-surefire.git;a=commit;h=d0230dcc93e6cd1b8171407237489fdf291cca48

Hi, is this meant to be available for failsafe as well as part of 3.0.0-M4? I have tried to use {{-Dfailsafe.rerunFailingTestsCount}} as indicated [here|https://maven.apache.org/surefire/maven-failsafe-plugin/examples/rerun-failing-tests.html], but no luck.

[~quiram]
Did you build surefire project locally or you used deployed snapshot version {{3.0.0-SNAPSHOT}}?
Pls try it again with surefire and let me know if it is nok. Both plugins are 99% same in principle.

[~quiram], if you achieve to reproduce with surefire, I think it could also be interesting to try without using {{-Dsurefire.rerunFailingTestsCount}} but configuring directly in the pom, something like:
{code:xml}
<pluginRepository>
  <id>surefire-snapshot</id>
  <name>surefire-snapshot</name>
  <url>https://repository.apache.org/content/repositories/snapshots/</url>
  <snapshots>
    <enabled>true</enabled>
  </snapshots>
 </pluginRepository>
...
<build>
  <plugins>
    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-surefire-plugin</artifactId>
      <version>3.0.0-SNAPSHOT</version>
      <configuration>
        <rerunFailingTestsCount>2</rerunFailingTestsCount>
      </configuration>
    </plugin>
  </plugins>
</build>
{code}


My bad, I read that this change was going to be available in version {{3.0.0-M4}}, so I first tried that. When I realised that this version wasn't available yet, I tried with {{3.0.0-M4-SNAPSHOT}}, instead of {{3.0.0-SNAPSHOT}}. Changing to the latter worked. Thanks! 

[~quiram]
No problem at all. I am glad that users are watching us ;-)

BTW, any estimate as to when {{3.0.0-M4}} might be available? Just in case I don't manage to convince my peers to use the {{SNAPSHOT}} version.

[~quiram]
The front page needs to be adjusted and then I am waiting for a fix by our infra team https://issues.apache.org/jira/browse/INFRA-19277

Excellent, thanks so much [~tibordigana]. You guys do an excellent job, thinks for keeping Maven alive :).

[~quiram]
We appreciate.

Hi [~tibordigana]. I seem to be experiencing an issue with this: when several tests within the same file fail, it seems the plugin retries only the first one, the others are simply tagged as failures. Is this something you can reproduce? Would you like me to create a new ticket for this? Thanks

_Edit:_ This is happening at least with failsafe, I haven't tried with surefire.

[~quiram] thf for testing this feature. Pls talk with the developer of this feature https://github.com/apache/maven-surefire/pull/245
I saw the unit tests but i did not see this error there.
It would be very handy for the developer to prepare a trivial project to reproduce this error.

Thanks [~tibordigana], I'll continue the conversation on GitHub.

[~jonbell]
I agree that executing the re-run tests in separate JVMs is more and more required feature.
Such feature makes sense for me. Perhaps we would recall this feature the next year.
Thx for the graph https://issues.apache.org/jira/browse/SUREFIRE-1584?focusedCommentId=16841327&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16841327

If {{-Dsurefire.rerunFailingTestsCount}} is available in JUnit5, can somebody please update the documentation on https://maven.apache.org/surefire/maven-surefire-plugin/examples/rerun-failing-tests.html to say so?
It currently says that it only works in JUnit4.x

[~ctubbsii] The solution is simple. Just open the PR on the GitHub and I will accept it.

[~tibordigana], my comment contained a conditional: "*If*..."... because I don't know what wording would be correct. I was just trying to bring something to the attention of somebody who knows what it *should* say (which is not me), so they can update it.

[~ctubbsii] See this [feature matrix|https://maven.apache.org/surefire/maven-surefire-plugin/featurematrix.html]. The feature is supported, so the "if" condition simply answers yes, since the system property {{-Dsurefire.rerunFailingTestsCount}} is available.

[~tibordigana] https://github.com/apache/maven-surefire/pull/323

Christopher's pull request seems merged but the webpage [https://maven.apache.org/surefire/maven-surefire-plugin/examples/rerun-failing-tests.html] still does not reflect it (It says it is only available in Junit 4)

[~borjapenman] Based on the file I edited, my guess would be that the website is only updated after a release.

[~ctubbsii] I have to talkout it with [~hboutemy] because i followed the instructions how to deploy the site  but obviously something was not done right way.

Hi,
The webpage is https://maven.apache.org/surefire/maven-surefire-plugin/examples/rerun-failing-tests.html is still saying 'only available for Junit 4'.

Is it possible to reopen this issue?

[~Casper_NL], the last release looks like it was in June 2020. The PR to update the docs was merged in November 2020. There was also another change to the docs 3 months after that, with information regarding 3.0.0-M6, which is not yet released. My suspicion is that even though the documentation has been updated, it won't be published until the next release, which will be 3.0.0-M6. It's possible to update the website before then, but this is minor, so it's probably not worth the effort. It should get automatically updated when 3.0.0-M6 is released and the website updated for that. So, I don't think it's worth re-opening this issue.

Ok, I just found it awkward that the suggested change is in transit for more than 10 months and this issue gave me the impression that being closed also meant that the documentation change was verified. Thanks for the update.

